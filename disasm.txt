
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 64 41 02 c0       	mov    eax,0xc0024164
c0000025:	3d 64 41 02 c0       	cmp    eax,0xc0024164
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 64 41 02 c0       	push   0xc0024164
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 64 41 02 c0       	mov    eax,0xc0024164
c0000051:	2d 64 41 02 c0       	sub    eax,0xc0024164
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 64 41 02 c0       	push   0xc0024164
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb cc 03 02 c0       	mov    ebx,0xc00203cc
c0000097:	81 eb c8 03 02 c0    	sub    ebx,0xc00203c8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be c8 03 02 c0       	mov    esi,0xc00203c8
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 64 41 02 c0       	push   0xc0024164
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 64 41 02 c0       	push   0xc0024164
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 0f 56 01 00       	call   c00158bc <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 ed 55 01 00       	call   c00158bc <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 fa 5a 01 00       	call   c0015de8 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 b9 61 01 00       	call   c00164b0 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 53 12 01 00       	jmp    c00115d2 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 e0 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfc20],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 e0 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc20],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 e0 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfc20],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 e0 03 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfc20],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 e0 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc20],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001176:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011b2:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011b7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011c5:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001216:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c0001231:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c00012eb:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c00012f1:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c00012f8:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013be:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013c4:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c00013cb:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 e4 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfb1c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 b6 7c 01 00       	jmp    c0019a58 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 e0 7c 01 00       	jmp    c0019a98 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 01 7d 01 00       	jmp    c0019ad8 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 40 06 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf9c0]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 40 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf9c0]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 84 2d 02 c0       	mov    edx,0xc0022d84
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba fc 04 02 c0       	mov    edx,0xc00204fc
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 02 05 02 c0       	mov    eax,0xc0020502
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf c0 05 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfa40]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 0b 05 02 c0       	mov    eax,0xc002050b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 40 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf9c0]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 90 05 02 c0       	mov    eax,0xc0020590
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 80 05 02 c0       	mov    ebx,0xc0020580
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 60 05 02 c0       	mov    eax,0xc0020560
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 70 05 02 c0       	mov    eax,0xc0020570
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 12 05 02 c0       	mov    edx,0xc0020512
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 1e 05 02 c0       	mov    edx,0xc002051e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 32 05 02 c0       	mov    edx,0xc0020532
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 60 09 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020960
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 60 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020960
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 60 07 02 c0       	mov    eax,0xc0020760
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 a0 06 02 c0       	mov    eax,0xc00206a0
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 60 06 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf9a0]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 60 0a 02 c0       	push   0xc0020a60
c000611b:	e8 d4 42 01 00       	call   c001a3f4 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 6e 0a 02 c0       	push   0xc0020a6e
c0006153:	e8 9c 42 01 00       	call   c001a3f4 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 05 42 01 00       	call   c001a398 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 7d 0a 02 c0       	push   0xc0020a7d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000655e:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c0006564:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006580:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00065f9:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00066f1:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000672f:	05 40 65 02 c0       	add    eax,0xc0026540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00067ee:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 80 0a 02 c0       	push   0xc0020a80
c0006812:	e8 dd 3b 01 00       	call   c001a3f4 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 f1 3b 01 00       	call   c001a410 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 85 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a85
c000682c:	e8 c3 3b 01 00       	call   c001a3f4 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006838:	e8 d3 3b 01 00       	call   c001a410 <iso_kprintfd>
c000683d:	c7 04 24 8b 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a8b
c0006844:	e8 ab 3b 01 00       	call   c001a3f4 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006850:	e8 bb 3b 01 00       	call   c001a410 <iso_kprintfd>
c0006855:	c7 04 24 91 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a91
c000685c:	e8 93 3b 01 00       	call   c001a3f4 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006868:	e8 a3 3b 01 00       	call   c001a410 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068ce:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c000692a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 7d 0a 02 c0       	push   0xc0020a7d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a06:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a0c:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 65 02 c0       	add    eax,0xc0026550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 9a 0a 02 c0       	push   0xc0020a9a
c0006a31:	e8 be 39 01 00       	call   c001a3f4 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a66:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 a5 0a 02 c0       	push   0xc0020aa5
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 ac 0a 02 c0       	push   0xc0020aac
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b27:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 b3 0a 02 c0       	push   0xc0020ab3
c0006b48:	e8 a7 38 01 00       	call   c001a3f4 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 be 0a 02 c0       	push   0xc0020abe
c0006b63:	e8 8c 38 01 00       	call   c001a3f4 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 65 02 c0       	push   0xc0026540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c4d:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 96 a1 00 00       	call   c0010e08 <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 2b 5e 00 00       	call   c000caac <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 cf 0a 02 c0       	push   0xc0020acf
c0006cb2:	e8 30 a2 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 e8 0a 02 c0       	push   0xc0020ae8
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 35 ef 00 00       	call   c0015c14 <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 44 f1 00 00       	call   c0015e38 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 20 69 01 c0       	push   0xc0016920
c0006d03:	52                   	push   edx
c0006d04:	e8 2f f1 00 00       	call   c0015e38 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d11:	68 e4 0b 02 c0       	push   0xc0020be4
c0006d16:	e8 cc a1 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d22:	e8 79 aa 00 00       	call   c00117a0 <KeInitRand()>
c0006d27:	e8 17 00 01 00       	call   c0016d43 <Vm::initialise8086()>
c0006d2c:	e8 c3 4a 00 00       	call   c000b7f4 <Fs::initVFS()>
c0006d31:	c7 04 24 f5 0a 02 c0 	mov    DWORD PTR [esp],0xc0020af5
c0006d38:	e8 aa a1 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 e4 0b 02 c0       	push   0xc0020be4
c0006d5c:	e8 86 a1 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c0006d61:	e8 9c 46 00 00       	call   c000b402 <KeInitialiseSymlinks()>
c0006d66:	e8 df a6 00 00       	call   c001144a <KeLoadSystemEnv()>
c0006d6b:	e8 3c a9 00 00       	call   c00116ac <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 0f 0b 02 c0       	push   0xc0020b0f
c0006d7a:	68 18 0b 02 c0       	push   0xc0020b18
c0006d7f:	e8 ac d0 00 00       	call   c0013e30 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 80 56 00 00       	call   c000c40c <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 08 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c08
c0006d93:	e8 4f a1 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 00 5d 00 00       	call   c000caaa <Device::loadDriversForAll()>
c0006daa:	c7 04 24 20 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b20
c0006db1:	e8 31 a1 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 31 0b 02 c0       	push   0xc0020b31
c0006dc5:	e8 5d e8 00 00       	call   c0015627 <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 85 ea 00 00       	call   c0015858 <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 bc f4 00 00       	call   c001629c <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 4d 0b 02 c0       	push   0xc0020b4d
c0006df5:	50                   	push   eax
c0006df6:	e8 2b 5d 00 00       	call   c000cb26 <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba 54 0c 02 c0       	mov    edx,0xc0020c54
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 d1 84 01 00       	call   c001f3c6 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 ed 93 00 00       	call   c0010320 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 c6 93 00 00       	call   c0010320 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 a4 93 00 00       	call   c0010320 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 82 93 00 00       	call   c0010320 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 8f 92 00 00       	call   c001029c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 6a 92 00 00       	call   c001029c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 30 83 01 00       	call   c001f380 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 7e 7f 01 00       	call   c001eff0 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 80 92 00 00       	call   c0010320 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 56 0b 02 c0       	push   0xc0020b56
c00070e2:	e8 00 a5 00 00       	call   c00115e7 <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 5c 0b 02 c0       	push   0xc0020b5c
c000711e:	e8 c4 a4 00 00       	call   c00115e7 <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 cd 8b 00 00       	jmp    c000fd38 <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071be:	68 62 0b 02 c0       	push   0xc0020b62
c00071c3:	0f 94 05 c0 35 02 c0 	sete   BYTE PTR ds:0xc00235c0
c00071ca:	e8 18 9d 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 c7 86 00 00       	call   c000f8ac <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 9a 57 00 00       	call   c000c98e <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 7a 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b7a
c000720d:	e8 d5 9c 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 b0 91 00 00       	call   c00103d8 <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 57 57 00 00       	call   c000c98e <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 28 0c 02 c0       	push   0xc0020c28
c0007254:	e8 8e 9c 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c0007259:	e8 22 0d 01 00       	call   c0017f80 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 94 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b94
c0007265:	e8 7d 9c 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 ee ec 00 00       	call   c0015f64 <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 af 0b 02 c0       	push   0xc0020baf
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 c0 0b 02 c0       	push   0xc0020bc0
c00072ed:	e8 f5 a2 00 00       	call   c00115e7 <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 cd 0b 02 c0       	push   0xc0020bcd
c0007302:	e8 e0 a2 00 00       	call   c00115e7 <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 d7 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020bd7
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 c6 a2 00 00       	jmp    c00115e7 <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073b1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 39 07 01 00       	call   c0017c4c <HalSystemIdle()>
c0007513:	e8 6a 84 01 00       	call   c001f982 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007615:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000761a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 80 f0 01 c0       	push   0xc001f080
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 90 f0 01 c0       	push   0xc001f090
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 9a f0 01 c0       	push   0xc001f09a
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 a4 f0 01 c0       	push   0xc001f0a4
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 ae f0 01 c0       	push   0xc001f0ae
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 b8 f0 01 c0       	push   0xc001f0b8
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 c2 f0 01 c0       	push   0xc001f0c2
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 cc f0 01 c0       	push   0xc001f0cc
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 d6 f0 01 c0       	push   0xc001f0d6
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 de f0 01 c0       	push   0xc001f0de
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 e8 f0 01 c0       	push   0xc001f0e8
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 f0 f0 01 c0       	push   0xc001f0f0
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 f8 f0 01 c0       	push   0xc001f0f8
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 00 f1 01 c0       	push   0xc001f100
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 1a f1 01 c0       	push   0xc001f11a
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 22 f1 01 c0       	push   0xc001f122
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 2c f1 01 c0       	push   0xc001f12c
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 36 f1 01 c0       	push   0xc001f136
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 40 f1 01 c0       	push   0xc001f140
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 da f1 01 c0       	push   0xc001f1da
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 e1 f1 01 c0       	push   0xc001f1e1
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 cc f1 01 c0       	push   0xc001f1cc
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 d3 f1 01 c0       	push   0xc001f1d3
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 4a f1 01 c0       	push   0xc001f14a
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 54 f1 01 c0       	push   0xc001f154
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 5e f1 01 c0       	push   0xc001f15e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 68 f1 01 c0       	push   0xc001f168
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 72 f1 01 c0       	push   0xc001f172
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 7c f1 01 c0       	push   0xc001f17c
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 86 f1 01 c0       	push   0xc001f186
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 90 f1 01 c0       	push   0xc001f190
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 9a f1 01 c0       	push   0xc001f19a
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 a4 f1 01 c0       	push   0xc001f1a4
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 ae f1 01 c0       	push   0xc001f1ae
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 b8 f1 01 c0       	push   0xc001f1b8
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 c2 f1 01 c0       	push   0xc001f1c2
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 1c f3 01 c0       	push   0xc001f31c
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 26 f3 01 c0       	push   0xc001f326
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 30 f3 01 c0       	push   0xc001f330
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 3a f3 01 c0       	push   0xc001f33a
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 44 f3 01 c0       	push   0xc001f344
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 4e f3 01 c0       	push   0xc001f34e
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 58 f3 01 c0       	push   0xc001f358
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 62 f3 01 c0       	push   0xc001f362
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 d6 f0 01 c0       	push   0xc001f0d6
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 b4 35 02 c0    	mov    edx,DWORD PTR ds:0xc00235b4
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079ba:	8b 3d b4 35 02 c0    	mov    edi,DWORD PTR ds:0xc00235b4
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 b4 35 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00235b4,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 b4 35 02 c0       	mov    eax,ds:0xc00235b4
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 78 0c 02 c0       	push   0xc0020c78
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 a8 0c 02 c0       	push   0xc0020ca8
c0007a27:	e8 bb 9b 00 00       	call   c00115e7 <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 ad 0c 02 c0       	push   0xc0020cad
c0007a3d:	e8 a5 9b 00 00       	call   c00115e7 <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 b4 0c 02 c0       	push   0xc0020cb4
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 02 93 00 00       	call   c0010e6b <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 2b 92 00 00       	call   c0010db5 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007b9b:	e8 7a 7d 01 00       	call   c001f91a <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 cc 0c 02 c0       	push   0xc0020ccc
c0007c31:	e8 b1 99 00 00       	call   c00115e7 <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 6e 02 c0    	lea    edx,[ebp-0x3ffd9114]
c0007c75:	8d 84 05 ed 6e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 cc 0c 02 c0       	push   0xc0020ccc
c0007ca2:	e8 40 99 00 00       	call   c00115e7 <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 b8 35 02 c0    	mov    esi,DWORD PTR ds:0xc00235b8
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d b8 35 02 c0    	mov    ebx,DWORD PTR ds:0xc00235b8
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 b8 35 02 c0    	mov    edx,DWORD PTR ds:0xc00235b8
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 71 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d71
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 3a 98 00 00       	jmp    c00115e7 <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 f4 0c 02 c0       	push   0xc0020cf4
c0007e31:	e8 b1 97 00 00       	call   c00115e7 <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e58:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 87 0d 02 c0       	push   0xc0020d87
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 24 0d 02 c0       	push   0xc0020d24
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 48 0d 02 c0       	push   0xc0020d48
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 ad 0d 02 c0       	push   0xc0020dad
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 9f 0d 02 c0       	push   0xc0020d9f
c000813c:	e8 a6 94 00 00       	call   c00115e7 <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba 0c 0e 02 c0       	mov    edx,0xc0020e0c
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 c9 0d 02 c0       	push   0xc0020dc9
c0008311:	e8 d1 92 00 00       	call   c00115e7 <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000835a:	e8 29 dd 00 00       	call   c0016088 <schedule()>
c000835f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 09 74 01 00       	call   c001f800 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 e6 0d 02 c0       	push   0xc0020de6
c000840c:	e8 d6 91 00 00       	call   c00115e7 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 0c 0e 02 c0       	mov    edx,0xc0020e0c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 54 0e 02 c0       	mov    edx,0xc0020e54
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 72 53 00 00       	call   c000d868 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 24 09 01 00       	call   c0018e40 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d e0 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdca20]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d e0 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdca20]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 98 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcb68]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 70 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcb90]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 56 06 01 00       	call   c0018cd4 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 b3 06 01 00       	jmp    c0018ddc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 20 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020e20
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 71 8e 00 00       	jmp    c00115e7 <KePanic(char const*)>
c0008776:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 e0 3a 00 00       	jmp    c000c3b3 <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be 2e 0e 02 c0       	mov    esi,0xc0020e2e
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 ba 01 01 00       	call   c0018ddc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba 54 0e 02 c0       	mov    edx,0xc0020e54
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 3f 0e 02 c0       	push   0xc0020e3f
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 45 0e 02 c0       	push   0xc0020e45
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba 1c 0f 02 c0       	mov    edx,0xc0020f1c
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 20 36 02 c0       	mov    eax,ds:0xc0023620
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 20 36 02 c0    	mov    DWORD PTR ds:0xc0023620,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 6f 02 c0       	push   0xc0026f98
c00091fc:	e8 e7 67 01 00       	call   c001f9e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba 38 0f 02 c0       	mov    edx,0xc0020f38
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba 1c 0f 02 c0       	mov    edx,0xc0020f1c
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 6f 02 c0       	push   0xc0026f98
c00093d0:	e8 e7 66 01 00       	call   c001fabc <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 6f 02 c0       	push   0xc0026f98
c00093e4:	e8 db 66 01 00       	call   c001fac4 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 6f 02 c0       	push   0xc0026f98
c0009402:	e8 e1 65 01 00       	call   c001f9e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 f4 0e 02 c0       	push   0xc0020ef4
c000942c:	e8 b6 81 00 00       	call   c00115e7 <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba 38 0f 02 c0       	mov    edx,0xc0020f38
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 6f 02 c0       	push   0xc0026f98
c00094d1:	e8 e6 65 01 00       	call   c001fabc <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 6f 02 c0       	push   0xc0026f98
c00094ee:	e8 73 66 01 00       	call   c001fb66 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 6f 02 c0       	push   0xc0026f98
c0009570:	e8 31 64 01 00       	call   c001f9a6 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 b0 35 02 c0       	push   0xc00235b0
c0009580:	68 98 6f 02 c0       	push   0xc0026f98
c0009585:	68 a4 f9 01 c0       	push   0xc001f9a4
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 28 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023628
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d 28 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023628
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 24 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023624
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 24 36 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023624,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 24 36 02 c0    	mov    DWORD PTR ds:0xc0023624,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 4c 0f 02 c0       	push   0xc0020f4c
c0009689:	e8 59 7f 00 00       	call   c00115e7 <KePanic(char const*)>
c000968e:	8b 35 24 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023624
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d 24 36 02 c0    	mov    DWORD PTR ds:0xc0023624,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 24 36 02 c0       	mov    eax,ds:0xc0023624
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 24 36 02 c0    	mov    DWORD PTR ds:0xc0023624,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 24 36 02 c0       	mov    ds:0xc0023624,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 2c 36 02 c0    	mov    edx,DWORD PTR ds:0xc002362c
c000975f:	8b 0d 34 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023634
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d 2c 36 02 c0    	mov    ecx,DWORD PTR ds:0xc002362c
c000977a:	a1 30 36 02 c0       	mov    eax,ds:0xc0023630
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d 30 36 02 c0    	cmp    DWORD PTR ds:0xc0023630,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 e0 11 02 c0       	push   0xc00211e0
c00097c0:	e8 22 7e 00 00       	call   c00115e7 <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 f7 11 02 c0       	push   0xc00211f7
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d 30 36 02 c0    	mov    DWORD PTR ds:0xc0023630,ebx
c0009864:	c6 05 38 36 02 c0 43 	mov    BYTE PTR ds:0xc0023638,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 34 36 02 c0       	mov    ds:0xc0023634,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 2c 36 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002362c,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 30 36 02 c0       	mov    eax,ds:0xc0023630
c0009896:	f7 35 2c 36 02 c0    	div    DWORD PTR ds:0xc002362c
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 6c 0f 02 c0       	push   0xc0020f6c
c00098d1:	e8 11 7d 00 00       	call   c00115e7 <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 0e 12 02 c0       	push   0xc002120e
c00099a3:	e8 3f 7c 00 00       	call   c00115e7 <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 90 0f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020f90
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 dc 7b 00 00       	jmp    c00115e7 <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 2a 12 02 c0       	push   0xc002122a
c0009a18:	e8 ca 7b 00 00       	call   c00115e7 <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 46 12 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021246
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 80 7b 00 00       	jmp    c00115e7 <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 b4 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020fb4
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b26:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d10:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 d8 0f 02 c0       	push   0xc0020fd8
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 40 10 02 c0       	push   0xc0021040
c0009dad:	e8 35 78 00 00       	call   c00115e7 <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 64 10 02 c0       	push   0xc0021064
c0009e99:	e8 49 77 00 00       	call   c00115e7 <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 90 10 02 c0       	push   0xc0021090
c0009fed:	e8 f5 75 00 00       	call   c00115e7 <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 fe 29 00 00       	call   c000cc22 <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 60 12 02 c0       	push   0xc0021260
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 2c 36 02 c0       	mov    eax,ds:0xc002362c
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 38 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023638
c000a2fd:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a304:	50                   	push   eax
c000a305:	e8 d2 3a 00 00       	call   c000dddc <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d 2c 36 02 c0    	cmp    DWORD PTR ds:0xc002362c,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 b4 10 02 c0       	push   0xc00210b4
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a36f:	c7 44 24 50 6e 12 02 c0 	mov    DWORD PTR [esp+0x50],0xc002126e
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 91 12 02 c0       	push   0xc0021291
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 7f 12 02 c0       	push   0xc002127f
c000a3db:	e8 07 72 00 00       	call   c00115e7 <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 91 12 02 c0       	push   0xc0021291
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 2c 36 02 c0    	mov    edx,DWORD PTR ds:0xc002362c
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 38 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023638
c000a47a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a481:	50                   	push   eax
c000a482:	e8 e9 38 00 00       	call   c000dd70 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 2c 36 02 c0    	cmp    DWORD PTR ds:0xc002362c,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 a4 12 02 c0       	push   0xc00212a4
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 e4 10 02 c0       	push   0xc00210e4
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 04 11 02 c0       	push   0xc0021104
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 64 11 02 c0 	mov    DWORD PTR [esp],0xc0021164
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 b9 12 02 c0       	push   0xc00212b9
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 cd 12 02 c0       	push   0xc00212cd
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 e0 12 02 c0       	push   0xc00212e0
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 50 02 c0       	push   0xc0025000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 50 02 c0       	push   0xc0025000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 ed 12 02 c0       	push   0xc00212ed
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 06 13 02 c0       	push   0xc0021306
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 06 13 02 c0       	push   0xc0021306
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 0e 13 02 c0 	mov    DWORD PTR [esp],0xc002130e
c000a7f8:	e8 ea 6d 00 00       	call   c00115e7 <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 26 13 02 c0       	push   0xc0021326
c000a80a:	e8 d8 6d 00 00       	call   c00115e7 <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be 2f 0e 02 c0       	mov    esi,0xc0020e2f
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 2e 0e 02 c0       	mov    al,ds:0xc0020e2e
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 3c 13 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdecc4]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 8c 14 02 c0       	push   0xc002148c
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 a0 14 02 c0       	push   0xc00214a0
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 aa 14 02 c0       	push   0xc00214aa
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 b4 14 02 c0       	push   0xc00214b4
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 f8 15 02 c0       	push   0xc00215f8
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 be 14 02 c0       	push   0xc00214be
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 18 16 02 c0       	push   0xc0021618
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 d3 14 02 c0       	push   0xc00214d3
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 ed 14 02 c0       	push   0xc00214ed
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 40 36 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc9c0]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 40 16 02 c0       	push   0xc0021640
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 f8 15 02 c0       	push   0xc00215f8
c000abb4:	e8 2e 6a 00 00       	call   c00115e7 <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 88 16 02 c0       	push   0xc0021688
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 88 16 02 c0       	push   0xc0021688
c000abe3:	e8 ff 69 00 00       	call   c00115e7 <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 f8 14 02 c0       	push   0xc00214f8
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 f8 14 02 c0       	push   0xc00214f8
c000ac0f:	e8 d3 69 00 00       	call   c00115e7 <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 15 15 02 c0       	push   0xc0021515
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 15 15 02 c0       	push   0xc0021515
c000ac3b:	e8 a7 69 00 00       	call   c00115e7 <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 a8 16 02 c0       	push   0xc00216a8
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 a8 16 02 c0       	push   0xc00216a8
c000ac67:	e8 7b 69 00 00       	call   c00115e7 <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 cc 16 02 c0       	push   0xc00216cc
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 cc 16 02 c0       	push   0xc00216cc
c000ac93:	e8 4f 69 00 00       	call   c00115e7 <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 31 15 02 c0       	push   0xc0021531
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 31 15 02 c0       	push   0xc0021531
c000acbf:	e8 23 69 00 00       	call   c00115e7 <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 4d 15 02 c0       	push   0xc002154d
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 4d 15 02 c0       	push   0xc002154d
c000aceb:	e8 f7 68 00 00       	call   c00115e7 <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 ec 16 02 c0       	push   0xc00216ec
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 ec 16 02 c0       	push   0xc00216ec
c000ad17:	e8 cb 68 00 00       	call   c00115e7 <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 10 17 02 c0       	push   0xc0021710
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 10 17 02 c0       	push   0xc0021710
c000ad43:	e8 9f 68 00 00       	call   c00115e7 <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiIsHashInTable(unsigned short)>:
c000ad50:	0f b7 d0             	movzx  edx,ax
c000ad53:	83 e0 07             	and    eax,0x7
c000ad56:	c1 fa 03             	sar    edx,0x3
c000ad59:	88 c1                	mov    cl,al
c000ad5b:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad62:	d3 fa                	sar    edx,cl
c000ad64:	89 d0                	mov    eax,edx
c000ad66:	83 e0 01             	and    eax,0x1
c000ad69:	c3                   	ret    

c000ad6a <KiSetHashInTable(unsigned short, bool)>:
c000ad6a:	56                   	push   esi
c000ad6b:	53                   	push   ebx
c000ad6c:	0f b7 d8             	movzx  ebx,ax
c000ad6f:	83 e0 07             	and    eax,0x7
c000ad72:	c1 fb 03             	sar    ebx,0x3
c000ad75:	89 c1                	mov    ecx,eax
c000ad77:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad7e:	b8 01 00 00 00       	mov    eax,0x1
c000ad83:	d3 e0                	shl    eax,cl
c000ad85:	84 d2                	test   dl,dl
c000ad87:	74 04                	je     c000ad8d <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad89:	09 f0                	or     eax,esi
c000ad8b:	eb 04                	jmp    c000ad91 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad8d:	f7 d0                	not    eax
c000ad8f:	21 f0                	and    eax,esi
c000ad91:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad97:	5b                   	pop    ebx
c000ad98:	5e                   	pop    esi
c000ad99:	c3                   	ret    

c000ad9a <KiFlushSymlinkChanges()>:
c000ad9a:	57                   	push   edi
c000ad9b:	56                   	push   esi
c000ad9c:	53                   	push   ebx
c000ad9d:	83 ec 1c             	sub    esp,0x1c
c000ada0:	68 14 01 00 00       	push   0x114
c000ada5:	e8 0c cd ff ff       	call   c0007ab6 <malloc>
c000adaa:	83 c4 0c             	add    esp,0xc
c000adad:	89 c3                	mov    ebx,eax
c000adaf:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000adb5:	68 2f 17 02 c0       	push   0xc002172f
c000adba:	50                   	push   eax
c000adbb:	e8 56 0d 00 00       	call   c000bb16 <File::File(char const*, Process*)>
c000adc0:	83 c4 10             	add    esp,0x10
c000adc3:	85 db                	test   ebx,ebx
c000adc5:	75 10                	jne    c000add7 <KiFlushSymlinkChanges()+0x3d>
c000adc7:	83 ec 0c             	sub    esp,0xc
c000adca:	68 4d 17 02 c0       	push   0xc002174d
c000adcf:	e8 13 68 00 00       	call   c00115e7 <KePanic(char const*)>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	50                   	push   eax
c000add8:	50                   	push   eax
c000add9:	6a 06                	push   0x6
c000addb:	53                   	push   ebx
c000addc:	e8 53 0d 00 00       	call   c000bb34 <File::open(FileOpenMode)>
c000ade1:	83 c4 10             	add    esp,0x10
c000ade4:	85 c0                	test   eax,eax
c000ade6:	74 10                	je     c000adf8 <KiFlushSymlinkChanges()+0x5e>
c000ade8:	83 ec 0c             	sub    esp,0xc
c000adeb:	68 67 17 02 c0       	push   0xc0021767
c000adf0:	e8 f2 67 00 00       	call   c00115e7 <KePanic(char const*)>
c000adf5:	83 c4 10             	add    esp,0x10
c000adf8:	31 f6                	xor    esi,esi
c000adfa:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ae00:	7e 70                	jle    c000ae72 <KiFlushSymlinkChanges()+0xd8>
c000ae02:	83 ec 0c             	sub    esp,0xc
c000ae05:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae07:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae0b:	89 f0                	mov    eax,esi
c000ae0d:	57                   	push   edi
c000ae0e:	c1 e0 08             	shl    eax,0x8
c000ae11:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae16:	50                   	push   eax
c000ae17:	6a 00                	push   0x0
c000ae19:	68 00 01 00 00       	push   0x100
c000ae1e:	53                   	push   ebx
c000ae1f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae22:	83 c4 20             	add    esp,0x20
c000ae25:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae2d:	74 10                	je     c000ae3f <KiFlushSymlinkChanges()+0xa5>
c000ae2f:	83 ec 0c             	sub    esp,0xc
c000ae32:	68 81 17 02 c0       	push   0xc0021781
c000ae37:	e8 ab 67 00 00       	call   c00115e7 <KePanic(char const*)>
c000ae3c:	83 c4 10             	add    esp,0x10
c000ae3f:	83 ec 0c             	sub    esp,0xc
c000ae42:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae44:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae4b:	57                   	push   edi
c000ae4c:	52                   	push   edx
c000ae4d:	6a 00                	push   0x0
c000ae4f:	6a 08                	push   0x8
c000ae51:	53                   	push   ebx
c000ae52:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae55:	83 c4 20             	add    esp,0x20
c000ae58:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae5d:	74 10                	je     c000ae6f <KiFlushSymlinkChanges()+0xd5>
c000ae5f:	83 ec 0c             	sub    esp,0xc
c000ae62:	68 9b 17 02 c0       	push   0xc002179b
c000ae67:	e8 7b 67 00 00       	call   c00115e7 <KePanic(char const*)>
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	46                   	inc    esi
c000ae70:	eb 88                	jmp    c000adfa <KiFlushSymlinkChanges()+0x60>
c000ae72:	83 ec 0c             	sub    esp,0xc
c000ae75:	53                   	push   ebx
c000ae76:	e8 17 0d 00 00       	call   c000bb92 <File::close()>
c000ae7b:	83 c4 10             	add    esp,0x10
c000ae7e:	85 db                	test   ebx,ebx
c000ae80:	74 0c                	je     c000ae8e <KiFlushSymlinkChanges()+0xf4>
c000ae82:	83 ec 0c             	sub    esp,0xc
c000ae85:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae87:	53                   	push   ebx
c000ae88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae8b:	83 c4 10             	add    esp,0x10
c000ae8e:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae98:	83 c4 10             	add    esp,0x10
c000ae9b:	5b                   	pop    ebx
c000ae9c:	5e                   	pop    esi
c000ae9d:	5f                   	pop    edi
c000ae9e:	c3                   	ret    

c000ae9f <KiDeinitialiseSymlinks(void*)>:
c000ae9f:	e9 f6 fe ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>

c000aea4 <KiGetSymlinkHash(char const*)>:
c000aea4:	53                   	push   ebx
c000aea5:	89 c3                	mov    ebx,eax
c000aea7:	83 ec 14             	sub    esp,0x14
c000aeaa:	50                   	push   eax
c000aeab:	e8 c0 56 ff ff       	call   c0000570 <strlen>
c000aeb0:	5a                   	pop    edx
c000aeb1:	59                   	pop    ecx
c000aeb2:	50                   	push   eax
c000aeb3:	53                   	push   ebx
c000aeb4:	e8 b0 60 00 00       	call   c0010f69 <KeCalculateCRC32(unsigned char*, int)>
c000aeb9:	83 c4 18             	add    esp,0x18
c000aebc:	89 c2                	mov    edx,eax
c000aebe:	5b                   	pop    ebx
c000aebf:	c1 ea 10             	shr    edx,0x10
c000aec2:	31 d0                	xor    eax,edx
c000aec4:	c3                   	ret    

c000aec5 <KiCreateSymlinkID()>:
c000aec5:	55                   	push   ebp
c000aec6:	57                   	push   edi
c000aec7:	56                   	push   esi
c000aec8:	53                   	push   ebx
c000aec9:	31 db                	xor    ebx,ebx
c000aecb:	83 ec 1c             	sub    esp,0x1c
c000aece:	e8 62 68 00 00       	call   c0011735 <KeRand()>
c000aed3:	43                   	inc    ebx
c000aed4:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000aeda:	31 d2                	xor    edx,edx
c000aedc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aedf:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000aee3:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aee9:	c1 e0 1f             	shl    eax,0x1f
c000aeec:	89 d7                	mov    edi,edx
c000aeee:	89 c6                	mov    esi,eax
c000aef0:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000aef4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aefc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af02:	75 10                	jne    c000af14 <KiCreateSymlinkID()+0x4f>
c000af04:	83 ec 0c             	sub    esp,0xc
c000af07:	68 b5 17 02 c0       	push   0xc00217b5
c000af0c:	e8 d6 66 00 00       	call   c00115e7 <KePanic(char const*)>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000af18:	75 04                	jne    c000af1e <KiCreateSymlinkID()+0x59>
c000af1a:	39 f5                	cmp    ebp,esi
c000af1c:	74 b0                	je     c000aece <KiCreateSymlinkID()+0x9>
c000af1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af26:	31 f0                	xor    eax,esi
c000af28:	83 c4 1c             	add    esp,0x1c
c000af2b:	31 fa                	xor    edx,edi
c000af2d:	5b                   	pop    ebx
c000af2e:	5e                   	pop    esi
c000af2f:	5f                   	pop    edi
c000af30:	5d                   	pop    ebp
c000af31:	c3                   	ret    

c000af32 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af32:	53                   	push   ebx
c000af33:	83 ec 0c             	sub    esp,0xc
c000af36:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af3a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af42:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af47:	68 00 01 00 00       	push   0x100
c000af4c:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af53:	6a 00                	push   0x0
c000af55:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af5c:	c1 e0 08             	shl    eax,0x8
c000af5f:	05 00 70 02 c0       	add    eax,0xc0027000
c000af64:	50                   	push   eax
c000af65:	e8 86 55 ff ff       	call   c00004f0 <memset>
c000af6a:	58                   	pop    eax
c000af6b:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af70:	5a                   	pop    edx
c000af71:	c1 e0 08             	shl    eax,0x8
c000af74:	53                   	push   ebx
c000af75:	05 00 70 02 c0       	add    eax,0xc0027000
c000af7a:	50                   	push   eax
c000af7b:	e8 c0 56 ff ff       	call   c0000640 <strcpy>
c000af80:	89 d8                	mov    eax,ebx
c000af82:	e8 1d ff ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000af87:	ba 01 00 00 00       	mov    edx,0x1
c000af8c:	0f b7 c0             	movzx  eax,ax
c000af8f:	e8 d6 fd ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000af94:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af99:	83 c4 10             	add    esp,0x10
c000af9c:	40                   	inc    eax
c000af9d:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afa2:	83 f8 03             	cmp    eax,0x3
c000afa5:	7e 09                	jle    c000afb0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000afa7:	83 c4 08             	add    esp,0x8
c000afaa:	5b                   	pop    ebx
c000afab:	e9 ea fd ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>
c000afb0:	83 c4 08             	add    esp,0x8
c000afb3:	5b                   	pop    ebx
c000afb4:	c3                   	ret    

c000afb5 <KiIsSymlinkRegistered(char const*)>:
c000afb5:	55                   	push   ebp
c000afb6:	57                   	push   edi
c000afb7:	56                   	push   esi
c000afb8:	53                   	push   ebx
c000afb9:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000afbf:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000afc6:	89 f0                	mov    eax,esi
c000afc8:	e8 d7 fe ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000afcd:	0f b7 c0             	movzx  eax,ax
c000afd0:	e8 7b fd ff ff       	call   c000ad50 <KiIsHashInTable(unsigned short)>
c000afd5:	31 d2                	xor    edx,edx
c000afd7:	88 c1                	mov    cl,al
c000afd9:	31 c0                	xor    eax,eax
c000afdb:	84 c9                	test   cl,cl
c000afdd:	0f 84 31 01 00 00    	je     c000b114 <KiIsSymlinkRegistered(char const*)+0x15f>
c000afe3:	31 db                	xor    ebx,ebx
c000afe5:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000afeb:	7e 30                	jle    c000b01d <KiIsSymlinkRegistered(char const*)+0x68>
c000afed:	89 d8                	mov    eax,ebx
c000afef:	51                   	push   ecx
c000aff0:	c1 e0 08             	shl    eax,0x8
c000aff3:	51                   	push   ecx
c000aff4:	05 00 70 02 c0       	add    eax,0xc0027000
c000aff9:	50                   	push   eax
c000affa:	56                   	push   esi
c000affb:	e8 50 57 ff ff       	call   c0000750 <strcmp>
c000b000:	83 c4 10             	add    esp,0x10
c000b003:	85 c0                	test   eax,eax
c000b005:	75 13                	jne    c000b01a <KiIsSymlinkRegistered(char const*)+0x65>
c000b007:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b00e:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b015:	e9 fa 00 00 00       	jmp    c000b114 <KiIsSymlinkRegistered(char const*)+0x15f>
c000b01a:	43                   	inc    ebx
c000b01b:	eb c8                	jmp    c000afe5 <KiIsSymlinkRegistered(char const*)+0x30>
c000b01d:	83 ec 0c             	sub    esp,0xc
c000b020:	68 14 01 00 00       	push   0x114
c000b025:	e8 8c ca ff ff       	call   c0007ab6 <malloc>
c000b02a:	83 c4 0c             	add    esp,0xc
c000b02d:	89 c3                	mov    ebx,eax
c000b02f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b035:	68 2f 17 02 c0       	push   0xc002172f
c000b03a:	50                   	push   eax
c000b03b:	e8 d6 0a 00 00       	call   c000bb16 <File::File(char const*, Process*)>
c000b040:	83 c4 10             	add    esp,0x10
c000b043:	85 db                	test   ebx,ebx
c000b045:	75 12                	jne    c000b059 <KiIsSymlinkRegistered(char const*)+0xa4>
c000b047:	83 ec 0c             	sub    esp,0xc
c000b04a:	68 be 17 02 c0       	push   0xc00217be
c000b04f:	e8 93 65 00 00       	call   c00115e7 <KePanic(char const*)>
c000b054:	83 c4 10             	add    esp,0x10
c000b057:	eb 10                	jmp    c000b069 <KiIsSymlinkRegistered(char const*)+0xb4>
c000b059:	83 ec 0c             	sub    esp,0xc
c000b05c:	53                   	push   ebx
c000b05d:	e8 96 0d 00 00       	call   c000bdf8 <File::exists()>
c000b062:	83 c4 10             	add    esp,0x10
c000b065:	84 c0                	test   al,al
c000b067:	74 de                	je     c000b047 <KiIsSymlinkRegistered(char const*)+0x92>
c000b069:	52                   	push   edx
c000b06a:	52                   	push   edx
c000b06b:	6a 01                	push   0x1
c000b06d:	53                   	push   ebx
c000b06e:	e8 c1 0a 00 00       	call   c000bb34 <File::open(FileOpenMode)>
c000b073:	83 c4 10             	add    esp,0x10
c000b076:	85 c0                	test   eax,eax
c000b078:	74 10                	je     c000b08a <KiIsSymlinkRegistered(char const*)+0xd5>
c000b07a:	83 ec 0c             	sub    esp,0xc
c000b07d:	68 d9 17 02 c0       	push   0xc00217d9
c000b082:	e8 60 65 00 00       	call   c00115e7 <KePanic(char const*)>
c000b087:	83 c4 10             	add    esp,0x10
c000b08a:	83 ec 0c             	sub    esp,0xc
c000b08d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b08f:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b093:	55                   	push   ebp
c000b094:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b098:	57                   	push   edi
c000b099:	6a 00                	push   0x0
c000b09b:	68 00 01 00 00       	push   0x100
c000b0a0:	53                   	push   ebx
c000b0a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0a4:	83 c4 20             	add    esp,0x20
c000b0a7:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b0af:	75 4b                	jne    c000b0fc <KiIsSymlinkRegistered(char const*)+0x147>
c000b0b1:	83 ec 0c             	sub    esp,0xc
c000b0b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0b6:	55                   	push   ebp
c000b0b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b0bb:	52                   	push   edx
c000b0bc:	6a 00                	push   0x0
c000b0be:	6a 08                	push   0x8
c000b0c0:	53                   	push   ebx
c000b0c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0c4:	83 c4 20             	add    esp,0x20
c000b0c7:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b0cc:	75 2e                	jne    c000b0fc <KiIsSymlinkRegistered(char const*)+0x147>
c000b0ce:	50                   	push   eax
c000b0cf:	50                   	push   eax
c000b0d0:	57                   	push   edi
c000b0d1:	56                   	push   esi
c000b0d2:	e8 79 56 ff ff       	call   c0000750 <strcmp>
c000b0d7:	83 c4 10             	add    esp,0x10
c000b0da:	85 c0                	test   eax,eax
c000b0dc:	75 ac                	jne    c000b08a <KiIsSymlinkRegistered(char const*)+0xd5>
c000b0de:	83 ec 0c             	sub    esp,0xc
c000b0e1:	53                   	push   ebx
c000b0e2:	e8 ab 0a 00 00       	call   c000bb92 <File::close()>
c000b0e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b0f7:	83 c4 10             	add    esp,0x10
c000b0fa:	eb 18                	jmp    c000b114 <KiIsSymlinkRegistered(char const*)+0x15f>
c000b0fc:	83 ec 0c             	sub    esp,0xc
c000b0ff:	53                   	push   ebx
c000b100:	e8 8d 0a 00 00       	call   c000bb92 <File::close()>
c000b105:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b107:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b10a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b10d:	83 c4 10             	add    esp,0x10
c000b110:	31 c0                	xor    eax,eax
c000b112:	31 d2                	xor    edx,edx
c000b114:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b11a:	5b                   	pop    ebx
c000b11b:	5e                   	pop    esi
c000b11c:	5f                   	pop    edi
c000b11d:	5d                   	pop    ebp
c000b11e:	c3                   	ret    

c000b11f <KeDereferenceSymlink(char const*, char*)>:
c000b11f:	55                   	push   ebp
c000b120:	57                   	push   edi
c000b121:	56                   	push   esi
c000b122:	53                   	push   ebx
c000b123:	83 ec 48             	sub    esp,0x48
c000b126:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c000b12a:	56                   	push   esi
c000b12b:	e8 85 fe ff ff       	call   c000afb5 <KiIsSymlinkRegistered(char const*)>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 c7                	mov    edi,eax
c000b135:	89 d0                	mov    eax,edx
c000b137:	09 f8                	or     eax,edi
c000b139:	75 07                	jne    c000b142 <KeDereferenceSymlink(char const*, char*)+0x23>
c000b13b:	31 c0                	xor    eax,eax
c000b13d:	e9 7c 01 00 00       	jmp    c000b2be <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b142:	83 ec 0c             	sub    esp,0xc
c000b145:	89 d5                	mov    ebp,edx
c000b147:	68 14 01 00 00       	push   0x114
c000b14c:	e8 65 c9 ff ff       	call   c0007ab6 <malloc>
c000b151:	83 c4 0c             	add    esp,0xc
c000b154:	89 c3                	mov    ebx,eax
c000b156:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b15c:	56                   	push   esi
c000b15d:	50                   	push   eax
c000b15e:	e8 b3 09 00 00       	call   c000bb16 <File::File(char const*, Process*)>
c000b163:	83 c4 10             	add    esp,0x10
c000b166:	85 db                	test   ebx,ebx
c000b168:	0f 84 32 01 00 00    	je     c000b2a0 <KeDereferenceSymlink(char const*, char*)+0x181>
c000b16e:	56                   	push   esi
c000b16f:	56                   	push   esi
c000b170:	6a 01                	push   0x1
c000b172:	53                   	push   ebx
c000b173:	e8 bc 09 00 00       	call   c000bb34 <File::open(FileOpenMode)>
c000b178:	83 c4 10             	add    esp,0x10
c000b17b:	85 c0                	test   eax,eax
c000b17d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b17f:	74 09                	je     c000b18a <KeDereferenceSymlink(char const*, char*)+0x6b>
c000b181:	83 ec 0c             	sub    esp,0xc
c000b184:	53                   	push   ebx
c000b185:	e9 10 01 00 00       	jmp    c000b29a <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b18a:	83 ec 0c             	sub    esp,0xc
c000b18d:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b191:	56                   	push   esi
c000b192:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b196:	52                   	push   edx
c000b197:	6a 00                	push   0x0
c000b199:	6a 08                	push   0x8
c000b19b:	53                   	push   ebx
c000b19c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b19f:	83 c4 20             	add    esp,0x20
c000b1a2:	85 c0                	test   eax,eax
c000b1a4:	0f 85 e2 00 00 00    	jne    c000b28c <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b1aa:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b1af:	0f 85 d7 00 00 00    	jne    c000b28c <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b1b5:	83 ec 0c             	sub    esp,0xc
c000b1b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1ba:	56                   	push   esi
c000b1bb:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b1bf:	52                   	push   edx
c000b1c0:	6a 00                	push   0x0
c000b1c2:	6a 08                	push   0x8
c000b1c4:	53                   	push   ebx
c000b1c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b1c8:	83 c4 20             	add    esp,0x20
c000b1cb:	85 c0                	test   eax,eax
c000b1cd:	0f 85 b9 00 00 00    	jne    c000b28c <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b1d3:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b1d8:	0f 85 ae 00 00 00    	jne    c000b28c <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b1de:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b1e2:	0f 85 53 ff ff ff    	jne    c000b13b <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b1e8:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b1ec:	0f 85 49 ff ff ff    	jne    c000b13b <KeDereferenceSymlink(char const*, char*)+0x1c>
c000b1f2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b1fa:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b202:	51                   	push   ecx
c000b203:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b207:	50                   	push   eax
c000b208:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b20c:	50                   	push   eax
c000b20d:	53                   	push   ebx
c000b20e:	e8 23 0c 00 00       	call   c000be36 <File::stat(unsigned long long*, bool*)>
c000b213:	83 c4 10             	add    esp,0x10
c000b216:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b21b:	75 6f                	jne    c000b28c <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b21d:	31 c9                	xor    ecx,ecx
c000b21f:	bf 0f 00 00 00       	mov    edi,0xf
c000b224:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b228:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b22c:	39 c7                	cmp    edi,eax
c000b22e:	89 cf                	mov    edi,ecx
c000b230:	19 d7                	sbb    edi,edx
c000b232:	73 58                	jae    c000b28c <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b234:	83 c0 f0             	add    eax,0xfffffff0
c000b237:	bf ff 00 00 00       	mov    edi,0xff
c000b23c:	83 d2 ff             	adc    edx,0xffffffff
c000b23f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b243:	39 c7                	cmp    edi,eax
c000b245:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b249:	19 d1                	sbb    ecx,edx
c000b24b:	72 53                	jb     c000b2a0 <KeDereferenceSymlink(char const*, char*)+0x181>
c000b24d:	40                   	inc    eax
c000b24e:	52                   	push   edx
c000b24f:	50                   	push   eax
c000b250:	6a 00                	push   0x0
c000b252:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000b256:	e8 95 52 ff ff       	call   c00004f0 <memset>
c000b25b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b25d:	89 34 24             	mov    DWORD PTR [esp],esi
c000b260:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b264:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b268:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b26c:	53                   	push   ebx
c000b26d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b270:	83 c4 20             	add    esp,0x20
c000b273:	85 c0                	test   eax,eax
c000b275:	75 15                	jne    c000b28c <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b277:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b27b:	89 c7                	mov    edi,eax
c000b27d:	c1 ff 1f             	sar    edi,0x1f
c000b280:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b284:	75 06                	jne    c000b28c <KeDereferenceSymlink(char const*, char*)+0x16d>
c000b286:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b28a:	74 19                	je     c000b2a5 <KeDereferenceSymlink(char const*, char*)+0x186>
c000b28c:	83 ec 0c             	sub    esp,0xc
c000b28f:	53                   	push   ebx
c000b290:	e8 fd 08 00 00       	call   c000bb92 <File::close()>
c000b295:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b297:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b29a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b29d:	83 c4 10             	add    esp,0x10
c000b2a0:	83 c8 ff             	or     eax,0xffffffff
c000b2a3:	eb 19                	jmp    c000b2be <KeDereferenceSymlink(char const*, char*)+0x19f>
c000b2a5:	83 ec 0c             	sub    esp,0xc
c000b2a8:	53                   	push   ebx
c000b2a9:	e8 e4 08 00 00       	call   c000bb92 <File::close()>
c000b2ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2b6:	83 c4 10             	add    esp,0x10
c000b2b9:	b8 01 00 00 00       	mov    eax,0x1
c000b2be:	83 c4 3c             	add    esp,0x3c
c000b2c1:	5b                   	pop    ebx
c000b2c2:	5e                   	pop    esi
c000b2c3:	5f                   	pop    edi
c000b2c4:	5d                   	pop    ebp
c000b2c5:	c3                   	ret    

c000b2c6 <KeCreateSymlink(char const*, char const*)>:
c000b2c6:	55                   	push   ebp
c000b2c7:	57                   	push   edi
c000b2c8:	56                   	push   esi
c000b2c9:	53                   	push   ebx
c000b2ca:	83 ec 38             	sub    esp,0x38
c000b2cd:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b2d1:	68 14 01 00 00       	push   0x114
c000b2d6:	e8 db c7 ff ff       	call   c0007ab6 <malloc>
c000b2db:	6a 00                	push   0x0
c000b2dd:	89 c3                	mov    ebx,eax
c000b2df:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b2e5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b2e9:	50                   	push   eax
c000b2ea:	e8 49 07 00 00       	call   c000ba38 <File::File(char const*, Process*, bool)>
c000b2ef:	83 c4 20             	add    esp,0x20
c000b2f2:	b8 01 00 00 00       	mov    eax,0x1
c000b2f7:	85 db                	test   ebx,ebx
c000b2f9:	0f 84 fb 00 00 00    	je     c000b3fa <KeCreateSymlink(char const*, char const*)+0x134>
c000b2ff:	52                   	push   edx
c000b300:	52                   	push   edx
c000b301:	6a 12                	push   0x12
c000b303:	53                   	push   ebx
c000b304:	e8 2b 08 00 00       	call   c000bb34 <File::open(FileOpenMode)>
c000b309:	83 c4 10             	add    esp,0x10
c000b30c:	85 c0                	test   eax,eax
c000b30e:	74 0b                	je     c000b31b <KeCreateSymlink(char const*, char const*)+0x55>
c000b310:	83 ec 0c             	sub    esp,0xc
c000b313:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b315:	53                   	push   ebx
c000b316:	e9 d4 00 00 00       	jmp    c000b3ef <KeCreateSymlink(char const*, char const*)+0x129>
c000b31b:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b31f:	be f4 17 02 c0       	mov    esi,0xc00217f4
c000b324:	b9 09 00 00 00       	mov    ecx,0x9
c000b329:	fc                   	cld    
c000b32a:	83 ec 0c             	sub    esp,0xc
c000b32d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b32f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b333:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b335:	56                   	push   esi
c000b336:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b33a:	52                   	push   edx
c000b33b:	6a 00                	push   0x0
c000b33d:	6a 08                	push   0x8
c000b33f:	53                   	push   ebx
c000b340:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b343:	83 c4 20             	add    esp,0x20
c000b346:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b34b:	0f 85 90 00 00 00    	jne    c000b3e1 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b351:	85 c0                	test   eax,eax
c000b353:	0f 85 88 00 00 00    	jne    c000b3e1 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b359:	e8 67 fb ff ff       	call   c000aec5 <KiCreateSymlinkID()>
c000b35e:	83 ec 0c             	sub    esp,0xc
c000b361:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b365:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b369:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b36b:	56                   	push   esi
c000b36c:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b370:	52                   	push   edx
c000b371:	6a 00                	push   0x0
c000b373:	6a 08                	push   0x8
c000b375:	53                   	push   ebx
c000b376:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b379:	83 c4 20             	add    esp,0x20
c000b37c:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b381:	75 5e                	jne    c000b3e1 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b383:	85 c0                	test   eax,eax
c000b385:	75 5a                	jne    c000b3e1 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b387:	83 ec 0c             	sub    esp,0xc
c000b38a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b38c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b38f:	55                   	push   ebp
c000b390:	e8 db 51 ff ff       	call   c0000570 <strlen>
c000b395:	89 34 24             	mov    DWORD PTR [esp],esi
c000b398:	31 d2                	xor    edx,edx
c000b39a:	55                   	push   ebp
c000b39b:	52                   	push   edx
c000b39c:	50                   	push   eax
c000b39d:	53                   	push   ebx
c000b39e:	ff d7                	call   edi
c000b3a0:	83 c4 14             	add    esp,0x14
c000b3a3:	89 c6                	mov    esi,eax
c000b3a5:	55                   	push   ebp
c000b3a6:	e8 c5 51 ff ff       	call   c0000570 <strlen>
c000b3ab:	83 c4 10             	add    esp,0x10
c000b3ae:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b3b2:	75 2d                	jne    c000b3e1 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3b4:	85 f6                	test   esi,esi
c000b3b6:	75 29                	jne    c000b3e1 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3b8:	50                   	push   eax
c000b3b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3c1:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b3c5:	e8 68 fb ff ff       	call   c000af32 <KeRegisterSymlink(char const*, unsigned long long)>
c000b3ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3cd:	e8 c0 07 00 00       	call   c000bb92 <File::close()>
c000b3d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	31 c0                	xor    eax,eax
c000b3df:	eb 19                	jmp    c000b3fa <KeCreateSymlink(char const*, char const*)+0x134>
c000b3e1:	83 ec 0c             	sub    esp,0xc
c000b3e4:	53                   	push   ebx
c000b3e5:	e8 a8 07 00 00       	call   c000bb92 <File::close()>
c000b3ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3f2:	83 c4 10             	add    esp,0x10
c000b3f5:	b8 01 00 00 00       	mov    eax,0x1
c000b3fa:	83 c4 2c             	add    esp,0x2c
c000b3fd:	5b                   	pop    ebx
c000b3fe:	5e                   	pop    esi
c000b3ff:	5f                   	pop    edi
c000b400:	5d                   	pop    ebp
c000b401:	c3                   	ret    

c000b402 <KeInitialiseSymlinks()>:
c000b402:	57                   	push   edi
c000b403:	56                   	push   esi
c000b404:	53                   	push   ebx
c000b405:	81 ec 14 01 00 00    	sub    esp,0x114
c000b40b:	c7 05 00 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029400,0x0
c000b415:	68 00 20 00 00       	push   0x2000
c000b41a:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b424:	6a 00                	push   0x0
c000b426:	68 00 74 02 c0       	push   0xc0027400
c000b42b:	e8 c0 50 ff ff       	call   c00004f0 <memset>
c000b430:	5b                   	pop    ebx
c000b431:	5e                   	pop    esi
c000b432:	ff 35 00 94 02 c0    	push   DWORD PTR ds:0xc0029400
c000b438:	68 fd 17 02 c0       	push   0xc00217fd
c000b43d:	e8 03 f5 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b442:	5f                   	pop    edi
c000b443:	58                   	pop    eax
c000b444:	6a 00                	push   0x0
c000b446:	68 9f ae 00 c0       	push   0xc000ae9f
c000b44b:	e8 84 59 00 00       	call   c0010dd4 <KeRegisterAtexit(void (*)(void*), void*)>
c000b450:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b457:	e8 5a c6 ff ff       	call   c0007ab6 <malloc>
c000b45c:	83 c4 0c             	add    esp,0xc
c000b45f:	89 c3                	mov    ebx,eax
c000b461:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b467:	68 2f 17 02 c0       	push   0xc002172f
c000b46c:	50                   	push   eax
c000b46d:	e8 a4 06 00 00       	call   c000bb16 <File::File(char const*, Process*)>
c000b472:	83 c4 10             	add    esp,0x10
c000b475:	85 db                	test   ebx,ebx
c000b477:	75 10                	jne    c000b489 <KeInitialiseSymlinks()+0x87>
c000b479:	83 ec 0c             	sub    esp,0xc
c000b47c:	68 1a 18 02 c0       	push   0xc002181a
c000b481:	e8 61 61 00 00       	call   c00115e7 <KePanic(char const*)>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	83 ec 0c             	sub    esp,0xc
c000b48c:	53                   	push   ebx
c000b48d:	e8 66 09 00 00       	call   c000bdf8 <File::exists()>
c000b492:	83 c4 10             	add    esp,0x10
c000b495:	84 c0                	test   al,al
c000b497:	75 3a                	jne    c000b4d3 <KeInitialiseSymlinks()+0xd1>
c000b499:	51                   	push   ecx
c000b49a:	51                   	push   ecx
c000b49b:	6a 12                	push   0x12
c000b49d:	53                   	push   ebx
c000b49e:	e8 91 06 00 00       	call   c000bb34 <File::open(FileOpenMode)>
c000b4a3:	83 c4 10             	add    esp,0x10
c000b4a6:	85 c0                	test   eax,eax
c000b4a8:	74 10                	je     c000b4ba <KeInitialiseSymlinks()+0xb8>
c000b4aa:	83 ec 0c             	sub    esp,0xc
c000b4ad:	68 37 18 02 c0       	push   0xc0021837
c000b4b2:	e8 30 61 00 00       	call   c00115e7 <KePanic(char const*)>
c000b4b7:	83 c4 10             	add    esp,0x10
c000b4ba:	83 ec 0c             	sub    esp,0xc
c000b4bd:	53                   	push   ebx
c000b4be:	e8 cf 06 00 00       	call   c000bb92 <File::close()>
c000b4c3:	83 c4 10             	add    esp,0x10
c000b4c6:	85 db                	test   ebx,ebx
c000b4c8:	0f 84 9e 00 00 00    	je     c000b56c <KeInitialiseSymlinks()+0x16a>
c000b4ce:	e9 8d 00 00 00       	jmp    c000b560 <KeInitialiseSymlinks()+0x15e>
c000b4d3:	52                   	push   edx
c000b4d4:	52                   	push   edx
c000b4d5:	6a 01                	push   0x1
c000b4d7:	53                   	push   ebx
c000b4d8:	e8 57 06 00 00       	call   c000bb34 <File::open(FileOpenMode)>
c000b4dd:	83 c4 10             	add    esp,0x10
c000b4e0:	85 c0                	test   eax,eax
c000b4e2:	74 10                	je     c000b4f4 <KeInitialiseSymlinks()+0xf2>
c000b4e4:	83 ec 0c             	sub    esp,0xc
c000b4e7:	68 54 18 02 c0       	push   0xc0021854
c000b4ec:	e8 f6 60 00 00       	call   c00115e7 <KePanic(char const*)>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	83 ec 0c             	sub    esp,0xc
c000b4f7:	ff 05 00 94 02 c0    	inc    DWORD PTR ds:0xc0029400
c000b4fd:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b501:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b503:	57                   	push   edi
c000b504:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b508:	56                   	push   esi
c000b509:	6a 00                	push   0x0
c000b50b:	68 00 01 00 00       	push   0x100
c000b510:	53                   	push   ebx
c000b511:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b514:	83 c4 20             	add    esp,0x20
c000b517:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b51f:	75 33                	jne    c000b554 <KeInitialiseSymlinks()+0x152>
c000b521:	83 ec 0c             	sub    esp,0xc
c000b524:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b526:	57                   	push   edi
c000b527:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b52b:	52                   	push   edx
c000b52c:	6a 00                	push   0x0
c000b52e:	6a 08                	push   0x8
c000b530:	53                   	push   ebx
c000b531:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b534:	83 c4 20             	add    esp,0x20
c000b537:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b53c:	75 16                	jne    c000b554 <KeInitialiseSymlinks()+0x152>
c000b53e:	89 f0                	mov    eax,esi
c000b540:	e8 5f f9 ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000b545:	ba 01 00 00 00       	mov    edx,0x1
c000b54a:	0f b7 c0             	movzx  eax,ax
c000b54d:	e8 18 f8 ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000b552:	eb a0                	jmp    c000b4f4 <KeInitialiseSymlinks()+0xf2>
c000b554:	83 ec 0c             	sub    esp,0xc
c000b557:	53                   	push   ebx
c000b558:	e8 35 06 00 00       	call   c000bb92 <File::close()>
c000b55d:	83 c4 10             	add    esp,0x10
c000b560:	83 ec 0c             	sub    esp,0xc
c000b563:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b565:	53                   	push   ebx
c000b566:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b569:	83 c4 10             	add    esp,0x10
c000b56c:	50                   	push   eax
c000b56d:	50                   	push   eax
c000b56e:	68 6f 18 02 c0       	push   0xc002186f
c000b573:	68 7d 18 02 c0       	push   0xc002187d
c000b578:	e8 49 fd ff ff       	call   c000b2c6 <KeCreateSymlink(char const*, char const*)>
c000b57d:	81 c4 20 01 00 00    	add    esp,0x120
c000b583:	5b                   	pop    ebx
c000b584:	5e                   	pop    esi
c000b585:	5f                   	pop    edi
c000b586:	c3                   	ret    
c000b587:	90                   	nop

c000b588 <File::read(unsigned long long, void*, int*)>:
c000b588:	53                   	push   ebx
c000b589:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b58d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b591:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b598:	83 f8 19             	cmp    eax,0x19
c000b59b:	77 35                	ja     c000b5d2 <File::read(unsigned long long, void*, int*)+0x4a>
c000b59d:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5a4:	85 c0                	test   eax,eax
c000b5a6:	74 2a                	je     c000b5d2 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5a8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5ae:	85 c0                	test   eax,eax
c000b5b0:	74 20                	je     c000b5d2 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5b2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5b6:	74 21                	je     c000b5d9 <File::read(unsigned long long, void*, int*)+0x51>
c000b5b8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5ba:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b5be:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b5c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5cc:	5b                   	pop    ebx
c000b5cd:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b5d0:	ff e0                	jmp    eax
c000b5d2:	b8 0b 00 00 00       	mov    eax,0xb
c000b5d7:	eb 05                	jmp    c000b5de <File::read(unsigned long long, void*, int*)+0x56>
c000b5d9:	b8 05 00 00 00       	mov    eax,0x5
c000b5de:	5b                   	pop    ebx
c000b5df:	c3                   	ret    

c000b5e0 <File::write(unsigned long long, void*, int*)>:
c000b5e0:	53                   	push   ebx
c000b5e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5e9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5f0:	83 f8 19             	cmp    eax,0x19
c000b5f3:	77 35                	ja     c000b62a <File::write(unsigned long long, void*, int*)+0x4a>
c000b5f5:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5fc:	85 c0                	test   eax,eax
c000b5fe:	74 2a                	je     c000b62a <File::write(unsigned long long, void*, int*)+0x4a>
c000b600:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b606:	85 c0                	test   eax,eax
c000b608:	74 20                	je     c000b62a <File::write(unsigned long long, void*, int*)+0x4a>
c000b60a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b60e:	74 21                	je     c000b631 <File::write(unsigned long long, void*, int*)+0x51>
c000b610:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b612:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b616:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b61c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b620:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b624:	5b                   	pop    ebx
c000b625:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b628:	ff e0                	jmp    eax
c000b62a:	b8 0b 00 00 00       	mov    eax,0xb
c000b62f:	eb 05                	jmp    c000b636 <File::write(unsigned long long, void*, int*)+0x56>
c000b631:	b8 05 00 00 00       	mov    eax,0x5
c000b636:	5b                   	pop    ebx
c000b637:	c3                   	ret    

c000b638 <Directory::read(unsigned long long, void*, int*)>:
c000b638:	53                   	push   ebx
c000b639:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b63d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b641:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b648:	83 f8 19             	cmp    eax,0x19
c000b64b:	77 35                	ja     c000b682 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b64d:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b654:	85 c0                	test   eax,eax
c000b656:	74 2a                	je     c000b682 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b658:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b65e:	85 c0                	test   eax,eax
c000b660:	74 20                	je     c000b682 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b662:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b666:	74 21                	je     c000b689 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b668:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b66a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b66e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b674:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67c:	5b                   	pop    ebx
c000b67d:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b680:	ff e0                	jmp    eax
c000b682:	b8 0b 00 00 00       	mov    eax,0xb
c000b687:	eb 05                	jmp    c000b68e <Directory::read(unsigned long long, void*, int*)+0x56>
c000b689:	b8 05 00 00 00       	mov    eax,0x5
c000b68e:	5b                   	pop    ebx
c000b68f:	c3                   	ret    

c000b690 <Directory::write(unsigned long long, void*, int*)>:
c000b690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b694:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b69b:	b8 0b 00 00 00       	mov    eax,0xb
c000b6a0:	83 fa 19             	cmp    edx,0x19
c000b6a3:	77 18                	ja     c000b6bd <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6a5:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b6ac:	85 d2                	test   edx,edx
c000b6ae:	74 0d                	je     c000b6bd <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6b0:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b6b7:	19 c0                	sbb    eax,eax
c000b6b9:	83 e0 0a             	and    eax,0xa
c000b6bc:	40                   	inc    eax
c000b6bd:	c3                   	ret    

c000b6be <File::isAtty()>:
c000b6be:	31 c0                	xor    eax,eax
c000b6c0:	c3                   	ret    
c000b6c1:	90                   	nop

c000b6c2 <Directory::isAtty()>:
c000b6c2:	31 c0                	xor    eax,eax
c000b6c4:	c3                   	ret    
c000b6c5:	90                   	nop

c000b6c6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b6c6:	b8 0a 00 00 00       	mov    eax,0xa
c000b6cb:	c3                   	ret    

c000b6cc <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b6cc:	b8 0a 00 00 00       	mov    eax,0xa
c000b6d1:	c3                   	ret    

c000b6d2 <Filesystem::allocateSwapfile(char const*, int)>:
c000b6d2:	31 c0                	xor    eax,eax
c000b6d4:	31 d2                	xor    edx,edx
c000b6d6:	c3                   	ret    
c000b6d7:	90                   	nop

c000b6d8 <File::~File()>:
c000b6d8:	83 ec 0c             	sub    esp,0xc
c000b6db:	ba 50 19 02 c0       	mov    edx,0xc0021950
c000b6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e4:	89 10                	mov    DWORD PTR [eax],edx
c000b6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6ea:	83 ec 0c             	sub    esp,0xc
c000b6ed:	50                   	push   eax
c000b6ee:	e8 b1 dc ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b6f3:	83 c4 10             	add    esp,0x10
c000b6f6:	90                   	nop
c000b6f7:	83 c4 0c             	add    esp,0xc
c000b6fa:	c3                   	ret    
c000b6fb:	90                   	nop

c000b6fc <File::~File()>:
c000b6fc:	83 ec 0c             	sub    esp,0xc
c000b6ff:	83 ec 0c             	sub    esp,0xc
c000b702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b706:	e8 cd ff ff ff       	call   c000b6d8 <File::~File()>
c000b70b:	83 c4 10             	add    esp,0x10
c000b70e:	83 ec 08             	sub    esp,0x8
c000b711:	68 14 01 00 00       	push   0x114
c000b716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71a:	e8 f9 f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b71f:	83 c4 10             	add    esp,0x10
c000b722:	83 c4 0c             	add    esp,0xc
c000b725:	c3                   	ret    

c000b726 <Directory::~Directory()>:
c000b726:	83 ec 0c             	sub    esp,0xc
c000b729:	ba 6c 19 02 c0       	mov    edx,0xc002196c
c000b72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b732:	89 10                	mov    DWORD PTR [eax],edx
c000b734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b738:	83 ec 0c             	sub    esp,0xc
c000b73b:	50                   	push   eax
c000b73c:	e8 63 dc ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	90                   	nop
c000b745:	83 c4 0c             	add    esp,0xc
c000b748:	c3                   	ret    
c000b749:	90                   	nop

c000b74a <Directory::~Directory()>:
c000b74a:	83 ec 0c             	sub    esp,0xc
c000b74d:	83 ec 0c             	sub    esp,0xc
c000b750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b754:	e8 cd ff ff ff       	call   c000b726 <Directory::~Directory()>
c000b759:	83 c4 10             	add    esp,0x10
c000b75c:	83 ec 08             	sub    esp,0x8
c000b75f:	68 14 01 00 00       	push   0x114
c000b764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b768:	e8 ab f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b76d:	83 c4 10             	add    esp,0x10
c000b770:	83 c4 0c             	add    esp,0xc
c000b773:	c3                   	ret    

c000b774 <Filesystem::Filesystem()>:
c000b774:	ba e4 18 02 c0       	mov    edx,0xc00218e4
c000b779:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b77d:	89 10                	mov    DWORD PTR [eax],edx
c000b77f:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b785:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b789:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b78c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b790:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b795:	90                   	nop
c000b796:	c3                   	ret    
c000b797:	90                   	nop

c000b798 <Filesystem::~Filesystem()>:
c000b798:	ba e4 18 02 c0       	mov    edx,0xc00218e4
c000b79d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7a1:	89 10                	mov    DWORD PTR [eax],edx
c000b7a3:	90                   	nop
c000b7a4:	c3                   	ret    
c000b7a5:	90                   	nop

c000b7a6 <Filesystem::~Filesystem()>:
c000b7a6:	83 ec 0c             	sub    esp,0xc
c000b7a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7ad:	e8 e6 ff ff ff       	call   c000b798 <Filesystem::~Filesystem()>
c000b7b2:	83 c4 04             	add    esp,0x4
c000b7b5:	83 ec 08             	sub    esp,0x8
c000b7b8:	6a 08                	push   0x8
c000b7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7be:	e8 55 f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b7c3:	83 c4 10             	add    esp,0x10
c000b7c6:	83 c4 0c             	add    esp,0xc
c000b7c9:	c3                   	ret    

c000b7ca <Fs::getcwd(Process*, char*, int)>:
c000b7ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b7ce:	31 c0                	xor    eax,eax
c000b7d0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b7d3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b7d7:	7d 15                	jge    c000b7ee <Fs::getcwd(Process*, char*, int)+0x24>
c000b7d9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7dd:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b7e4:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b7e7:	84 c9                	test   cl,cl
c000b7e9:	74 06                	je     c000b7f1 <Fs::getcwd(Process*, char*, int)+0x27>
c000b7eb:	40                   	inc    eax
c000b7ec:	eb e2                	jmp    c000b7d0 <Fs::getcwd(Process*, char*, int)+0x6>
c000b7ee:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b7f1:	31 c0                	xor    eax,eax
c000b7f3:	c3                   	ret    

c000b7f4 <Fs::initVFS()>:
c000b7f4:	83 ec 18             	sub    esp,0x18
c000b7f7:	6a 08                	push   0x8
c000b7f9:	e8 b8 c2 ff ff       	call   c0007ab6 <malloc>
c000b7fe:	89 04 24             	mov    DWORD PTR [esp],eax
c000b801:	e8 ee e3 00 00       	call   c0019bf4 <FAT::FAT()>
c000b806:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b80d:	e8 a4 c2 ff ff       	call   c0007ab6 <malloc>
c000b812:	89 04 24             	mov    DWORD PTR [esp],eax
c000b815:	e8 06 f3 00 00       	call   c001ab20 <ISO9660::ISO9660()>
c000b81a:	83 c4 1c             	add    esp,0x1c
c000b81d:	c3                   	ret    

c000b81e <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b81e:	55                   	push   ebp
c000b81f:	57                   	push   edi
c000b820:	56                   	push   esi
c000b821:	53                   	push   ebx
c000b822:	81 ec 10 04 00 00    	sub    esp,0x410
c000b828:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b82f:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b836:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b83e:	68 00 04 00 00       	push   0x400
c000b843:	6a 00                	push   0x0
c000b845:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b849:	57                   	push   edi
c000b84a:	e8 a1 4c ff ff       	call   c00004f0 <memset>
c000b84f:	83 c4 10             	add    esp,0x10
c000b852:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b856:	75 0b                	jne    c000b863 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b858:	50                   	push   eax
c000b859:	50                   	push   eax
c000b85a:	55                   	push   ebp
c000b85b:	57                   	push   edi
c000b85c:	e8 df 4d ff ff       	call   c0000640 <strcpy>
c000b861:	eb 51                	jmp    c000b8b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b863:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b867:	83 f8 5c             	cmp    eax,0x5c
c000b86a:	74 05                	je     c000b871 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b86c:	83 f8 2f             	cmp    eax,0x2f
c000b86f:	75 1e                	jne    c000b88f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b871:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b878:	8a 00                	mov    al,BYTE PTR [eax]
c000b87a:	3c 60                	cmp    al,0x60
c000b87c:	7e 03                	jle    c000b881 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b87e:	83 e8 20             	sub    eax,0x20
c000b881:	88 04 24             	mov    BYTE PTR [esp],al
c000b884:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b88b:	50                   	push   eax
c000b88c:	50                   	push   eax
c000b88d:	eb 1e                	jmp    c000b8ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b88f:	50                   	push   eax
c000b890:	50                   	push   eax
c000b891:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b898:	57                   	push   edi
c000b899:	e8 a2 4d ff ff       	call   c0000640 <strcpy>
c000b89e:	58                   	pop    eax
c000b89f:	5a                   	pop    edx
c000b8a0:	68 a3 28 02 c0       	push   0xc00228a3
c000b8a5:	57                   	push   edi
c000b8a6:	e8 95 4f ff ff       	call   c0000840 <strcat>
c000b8ab:	59                   	pop    ecx
c000b8ac:	58                   	pop    eax
c000b8ad:	55                   	push   ebp
c000b8ae:	57                   	push   edi
c000b8af:	e8 8c 4f ff ff       	call   c0000840 <strcat>
c000b8b4:	83 c4 10             	add    esp,0x10
c000b8b7:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b8ba:	3c 60                	cmp    al,0x60
c000b8bc:	7e 03                	jle    c000b8c1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b8be:	83 e8 20             	sub    eax,0x20
c000b8c1:	88 04 24             	mov    BYTE PTR [esp],al
c000b8c4:	88 06                	mov    BYTE PTR [esi],al
c000b8c6:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b8cd:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b8d3:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b8d7:	bf 03 00 00 00       	mov    edi,0x3
c000b8dc:	b8 03 00 00 00       	mov    eax,0x3
c000b8e1:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b8e5:	89 e9                	mov    ecx,ebp
c000b8e7:	85 ed                	test   ebp,ebp
c000b8e9:	0f 84 97 00 00 00    	je     c000b986 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b8ef:	8d 57 01             	lea    edx,[edi+0x1]
c000b8f2:	83 fd 5c             	cmp    ebp,0x5c
c000b8f5:	74 05                	je     c000b8fc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b8f7:	83 fd 2f             	cmp    ebp,0x2f
c000b8fa:	75 12                	jne    c000b90e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b8fc:	89 c5                	mov    ebp,eax
c000b8fe:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b903:	74 09                	je     c000b90e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b905:	40                   	inc    eax
c000b906:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b90a:	89 d7                	mov    edi,edx
c000b90c:	eb d3                	jmp    c000b8e1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b90e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b913:	0f be e9             	movsx  ebp,cl
c000b916:	75 5e                	jne    c000b976 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b918:	83 fd 2e             	cmp    ebp,0x2e
c000b91b:	75 59                	jne    c000b976 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b91d:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b921:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b926:	74 18                	je     c000b940 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b928:	83 fd 2e             	cmp    ebp,0x2e
c000b92b:	74 53                	je     c000b980 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b92d:	89 fa                	mov    edx,edi
c000b92f:	42                   	inc    edx
c000b930:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b934:	83 f9 2f             	cmp    ecx,0x2f
c000b937:	74 f6                	je     c000b92f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b939:	83 f9 5c             	cmp    ecx,0x5c
c000b93c:	74 f1                	je     c000b92f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b93e:	eb ca                	jmp    c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b940:	83 fd 2e             	cmp    ebp,0x2e
c000b943:	74 3b                	je     c000b980 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b945:	83 f8 03             	cmp    eax,0x3
c000b948:	74 c0                	je     c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b94a:	42                   	inc    edx
c000b94b:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b94f:	83 f9 5c             	cmp    ecx,0x5c
c000b952:	74 f6                	je     c000b94a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b954:	83 f9 2f             	cmp    ecx,0x2f
c000b957:	74 f1                	je     c000b94a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b959:	48                   	dec    eax
c000b95a:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b95e:	75 06                	jne    c000b966 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b960:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b964:	eb f3                	jmp    c000b959 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b966:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b96a:	74 07                	je     c000b973 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b96c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b970:	48                   	dec    eax
c000b971:	eb f3                	jmp    c000b966 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b973:	40                   	inc    eax
c000b974:	eb 94                	jmp    c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b976:	83 fd 5c             	cmp    ebp,0x5c
c000b979:	74 8f                	je     c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b97b:	83 fd 2f             	cmp    ebp,0x2f
c000b97e:	74 8a                	je     c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b980:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b983:	40                   	inc    eax
c000b984:	eb 84                	jmp    c000b90a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b986:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b98a:	83 ec 0c             	sub    esp,0xc
c000b98d:	56                   	push   esi
c000b98e:	e8 dd 4b ff ff       	call   c0000570 <strlen>
c000b993:	83 c4 10             	add    esp,0x10
c000b996:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000b99b:	74 17                	je     c000b9b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b99d:	83 ec 0c             	sub    esp,0xc
c000b9a0:	56                   	push   esi
c000b9a1:	e8 ca 4b ff ff       	call   c0000570 <strlen>
c000b9a6:	83 c4 10             	add    esp,0x10
c000b9a9:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b9ae:	74 04                	je     c000b9b4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b9b0:	31 ff                	xor    edi,edi
c000b9b2:	eb 5c                	jmp    c000ba10 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000b9b4:	83 ec 0c             	sub    esp,0xc
c000b9b7:	56                   	push   esi
c000b9b8:	e8 b3 4b ff ff       	call   c0000570 <strlen>
c000b9bd:	83 c4 10             	add    esp,0x10
c000b9c0:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000b9c5:	74 e9                	je     c000b9b0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000b9c7:	83 ec 0c             	sub    esp,0xc
c000b9ca:	56                   	push   esi
c000b9cb:	e8 a0 4b ff ff       	call   c0000570 <strlen>
c000b9d0:	83 c4 10             	add    esp,0x10
c000b9d3:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000b9d8:	eb b0                	jmp    c000b98a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000b9da:	52                   	push   edx
c000b9db:	52                   	push   edx
c000b9dc:	56                   	push   esi
c000b9dd:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000b9e1:	55                   	push   ebp
c000b9e2:	e8 59 4c ff ff       	call   c0000640 <strcpy>
c000b9e7:	59                   	pop    ecx
c000b9e8:	58                   	pop    eax
c000b9e9:	56                   	push   esi
c000b9ea:	55                   	push   ebp
c000b9eb:	e8 2f f7 ff ff       	call   c000b11f <KeDereferenceSymlink(char const*, char*)>
c000b9f0:	83 c4 10             	add    esp,0x10
c000b9f3:	48                   	dec    eax
c000b9f4:	75 37                	jne    c000ba2d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000b9f6:	50                   	push   eax
c000b9f7:	56                   	push   esi
c000b9f8:	55                   	push   ebp
c000b9f9:	68 9b 18 02 c0       	push   0xc002189b
c000b9fe:	e8 42 ef ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ba03:	83 c4 10             	add    esp,0x10
c000ba06:	8d 47 01             	lea    eax,[edi+0x1]
c000ba09:	83 ff 14             	cmp    edi,0x14
c000ba0c:	74 08                	je     c000ba16 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000ba0e:	89 c7                	mov    edi,eax
c000ba10:	85 db                	test   ebx,ebx
c000ba12:	75 c6                	jne    c000b9da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000ba14:	eb 17                	jmp    c000ba2d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	bf 15 00 00 00       	mov    edi,0x15
c000ba1e:	68 b6 18 02 c0       	push   0xc00218b6
c000ba23:	e8 bf 5b 00 00       	call   c00115e7 <KePanic(char const*)>
c000ba28:	83 c4 10             	add    esp,0x10
c000ba2b:	eb e3                	jmp    c000ba10 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c000ba2d:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ba33:	5b                   	pop    ebx
c000ba34:	5e                   	pop    esi
c000ba35:	5f                   	pop    edi
c000ba36:	5d                   	pop    ebp
c000ba37:	c3                   	ret    

c000ba38 <File::File(char const*, Process*, bool)>:
c000ba38:	83 ec 1c             	sub    esp,0x1c
c000ba3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba3f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ba43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba47:	83 ec 08             	sub    esp,0x8
c000ba4a:	6a 00                	push   0x0
c000ba4c:	50                   	push   eax
c000ba4d:	e8 6c d7 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000ba52:	83 c4 10             	add    esp,0x10
c000ba55:	ba 50 19 02 c0       	mov    edx,0xc0021950
c000ba5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba5e:	89 10                	mov    DWORD PTR [eax],edx
c000ba60:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ba65:	85 c0                	test   eax,eax
c000ba67:	74 0f                	je     c000ba78 <File::File(char const*, Process*, bool)+0x40>
c000ba69:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ba6e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000ba72:	74 04                	je     c000ba78 <File::File(char const*, Process*, bool)+0x40>
c000ba74:	b0 01                	mov    al,0x1
c000ba76:	eb 02                	jmp    c000ba7a <File::File(char const*, Process*, bool)+0x42>
c000ba78:	b0 00                	mov    al,0x0
c000ba7a:	0f b6 c0             	movzx  eax,al
c000ba7d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba81:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000ba87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ba8b:	83 c2 0d             	add    edx,0xd
c000ba8e:	50                   	push   eax
c000ba8f:	51                   	push   ecx
c000ba90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba94:	52                   	push   edx
c000ba95:	e8 84 fd ff ff       	call   c000b81e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baa1:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000baa4:	83 e8 41             	sub    eax,0x41
c000baa7:	88 c2                	mov    dl,al
c000baa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baad:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab7:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000babb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000babf:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bac5:	0f b6 c0             	movzx  eax,al
c000bac8:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bacf:	85 c0                	test   eax,eax
c000bad1:	74 3e                	je     c000bb11 <File::File(char const*, Process*, bool)+0xd9>
c000bad3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad7:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000badd:	0f b6 c0             	movzx  eax,al
c000bae0:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bae7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000baed:	85 c0                	test   eax,eax
c000baef:	75 20                	jne    c000bb11 <File::File(char const*, Process*, bool)+0xd9>
c000baf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bafb:	0f b6 c0             	movzx  eax,al
c000bafe:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb05:	83 ec 0c             	sub    esp,0xc
c000bb08:	50                   	push   eax
c000bb09:	e8 a0 21 00 00       	call   c000dcae <LogicalDisk::mount()>
c000bb0e:	83 c4 10             	add    esp,0x10
c000bb11:	90                   	nop
c000bb12:	83 c4 1c             	add    esp,0x1c
c000bb15:	c3                   	ret    

c000bb16 <File::File(char const*, Process*)>:
c000bb16:	83 ec 0c             	sub    esp,0xc
c000bb19:	6a 01                	push   0x1
c000bb1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb27:	e8 0c ff ff ff       	call   c000ba38 <File::File(char const*, Process*, bool)>
c000bb2c:	83 c4 10             	add    esp,0x10
c000bb2f:	90                   	nop
c000bb30:	83 c4 0c             	add    esp,0xc
c000bb33:	c3                   	ret    

c000bb34 <File::open(FileOpenMode)>:
c000bb34:	53                   	push   ebx
c000bb35:	b8 0b 00 00 00       	mov    eax,0xb
c000bb3a:	83 ec 08             	sub    esp,0x8
c000bb3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb41:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bb48:	83 fa 19             	cmp    edx,0x19
c000bb4b:	77 40                	ja     c000bb8d <File::open(FileOpenMode)+0x59>
c000bb4d:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bb54:	85 d2                	test   edx,edx
c000bb56:	74 35                	je     c000bb8d <File::open(FileOpenMode)+0x59>
c000bb58:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bb5e:	85 d2                	test   edx,edx
c000bb60:	74 2b                	je     c000bb8d <File::open(FileOpenMode)+0x59>
c000bb62:	b8 06 00 00 00       	mov    eax,0x6
c000bb67:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bb6b:	75 20                	jne    c000bb8d <File::open(FileOpenMode)+0x59>
c000bb6d:	8b 02                	mov    eax,DWORD PTR [edx]
c000bb6f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	51                   	push   ecx
c000bb7a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bb7d:	51                   	push   ecx
c000bb7e:	52                   	push   edx
c000bb7f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bb82:	83 c4 10             	add    esp,0x10
c000bb85:	85 c0                	test   eax,eax
c000bb87:	75 04                	jne    c000bb8d <File::open(FileOpenMode)+0x59>
c000bb89:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bb8d:	83 c4 08             	add    esp,0x8
c000bb90:	5b                   	pop    ebx
c000bb91:	c3                   	ret    

c000bb92 <File::close()>:
c000bb92:	53                   	push   ebx
c000bb93:	b8 0b 00 00 00       	mov    eax,0xb
c000bb98:	83 ec 08             	sub    esp,0x8
c000bb9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb9f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bba6:	83 f9 19             	cmp    ecx,0x19
c000bba9:	77 41                	ja     c000bbec <File::close()+0x5a>
c000bbab:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bbb2:	85 db                	test   ebx,ebx
c000bbb4:	74 36                	je     c000bbec <File::close()+0x5a>
c000bbb6:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bbbd:	74 2d                	je     c000bbec <File::close()+0x5a>
c000bbbf:	b8 05 00 00 00       	mov    eax,0x5
c000bbc4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbc8:	74 22                	je     c000bbec <File::close()+0x5a>
c000bbca:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bbce:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bbd5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bbdb:	53                   	push   ebx
c000bbdc:	53                   	push   ebx
c000bbdd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bbdf:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bbe5:	50                   	push   eax
c000bbe6:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bbe9:	83 c4 10             	add    esp,0x10
c000bbec:	83 c4 08             	add    esp,0x8
c000bbef:	5b                   	pop    ebx
c000bbf0:	c3                   	ret    
c000bbf1:	90                   	nop

c000bbf2 <File::seek(unsigned long long)>:
c000bbf2:	56                   	push   esi
c000bbf3:	53                   	push   ebx
c000bbf4:	b8 0b 00 00 00       	mov    eax,0xb
c000bbf9:	51                   	push   ecx
c000bbfa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bbfe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc02:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc0d:	83 fa 19             	cmp    edx,0x19
c000bc10:	77 31                	ja     c000bc43 <File::seek(unsigned long long)+0x51>
c000bc12:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc19:	85 d2                	test   edx,edx
c000bc1b:	74 26                	je     c000bc43 <File::seek(unsigned long long)+0x51>
c000bc1d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc23:	85 d2                	test   edx,edx
c000bc25:	74 1c                	je     c000bc43 <File::seek(unsigned long long)+0x51>
c000bc27:	b8 05 00 00 00       	mov    eax,0x5
c000bc2c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc30:	74 11                	je     c000bc43 <File::seek(unsigned long long)+0x51>
c000bc32:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc34:	53                   	push   ebx
c000bc35:	51                   	push   ecx
c000bc36:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc3c:	52                   	push   edx
c000bc3d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bc40:	83 c4 10             	add    esp,0x10
c000bc43:	5a                   	pop    edx
c000bc44:	5b                   	pop    ebx
c000bc45:	5e                   	pop    esi
c000bc46:	c3                   	ret    
c000bc47:	90                   	nop

c000bc48 <File::truncate(unsigned long long)>:
c000bc48:	56                   	push   esi
c000bc49:	53                   	push   ebx
c000bc4a:	b8 0b 00 00 00       	mov    eax,0xb
c000bc4f:	51                   	push   ecx
c000bc50:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc54:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc58:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc5f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc63:	83 fa 19             	cmp    edx,0x19
c000bc66:	77 31                	ja     c000bc99 <File::truncate(unsigned long long)+0x51>
c000bc68:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc6f:	85 d2                	test   edx,edx
c000bc71:	74 26                	je     c000bc99 <File::truncate(unsigned long long)+0x51>
c000bc73:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc79:	85 d2                	test   edx,edx
c000bc7b:	74 1c                	je     c000bc99 <File::truncate(unsigned long long)+0x51>
c000bc7d:	b8 05 00 00 00       	mov    eax,0x5
c000bc82:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc86:	74 11                	je     c000bc99 <File::truncate(unsigned long long)+0x51>
c000bc88:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc8a:	53                   	push   ebx
c000bc8b:	51                   	push   ecx
c000bc8c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc92:	52                   	push   edx
c000bc93:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bc96:	83 c4 10             	add    esp,0x10
c000bc99:	5a                   	pop    edx
c000bc9a:	5b                   	pop    ebx
c000bc9b:	5e                   	pop    esi
c000bc9c:	c3                   	ret    
c000bc9d:	90                   	nop

c000bc9e <File::tell(unsigned long long*)>:
c000bc9e:	83 ec 0c             	sub    esp,0xc
c000bca1:	b8 0b 00 00 00       	mov    eax,0xb
c000bca6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bcaa:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bcb1:	83 fa 19             	cmp    edx,0x19
c000bcb4:	77 34                	ja     c000bcea <File::tell(unsigned long long*)+0x4c>
c000bcb6:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcbd:	85 d2                	test   edx,edx
c000bcbf:	74 29                	je     c000bcea <File::tell(unsigned long long*)+0x4c>
c000bcc1:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcc7:	85 d2                	test   edx,edx
c000bcc9:	74 1f                	je     c000bcea <File::tell(unsigned long long*)+0x4c>
c000bccb:	b8 05 00 00 00       	mov    eax,0x5
c000bcd0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bcd4:	74 14                	je     c000bcea <File::tell(unsigned long long*)+0x4c>
c000bcd6:	50                   	push   eax
c000bcd7:	8b 02                	mov    eax,DWORD PTR [edx]
c000bcd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bcdd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bce3:	52                   	push   edx
c000bce4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bce7:	83 c4 10             	add    esp,0x10
c000bcea:	83 c4 0c             	add    esp,0xc
c000bced:	c3                   	ret    

c000bcee <File::rewind()>:
c000bcee:	83 ec 10             	sub    esp,0x10
c000bcf1:	6a 00                	push   0x0
c000bcf3:	6a 00                	push   0x0
c000bcf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf9:	e8 f4 fe ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c000bcfe:	83 c4 1c             	add    esp,0x1c
c000bd01:	c3                   	ret    

c000bd02 <File::unlink()>:
c000bd02:	83 ec 0c             	sub    esp,0xc
c000bd05:	b8 0b 00 00 00       	mov    eax,0xb
c000bd0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd0e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd15:	83 f9 19             	cmp    ecx,0x19
c000bd18:	77 2f                	ja     c000bd49 <File::unlink()+0x47>
c000bd1a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd21:	85 c9                	test   ecx,ecx
c000bd23:	74 24                	je     c000bd49 <File::unlink()+0x47>
c000bd25:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd2b:	85 c9                	test   ecx,ecx
c000bd2d:	74 1a                	je     c000bd49 <File::unlink()+0x47>
c000bd2f:	b8 06 00 00 00       	mov    eax,0x6
c000bd34:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd38:	75 0f                	jne    c000bd49 <File::unlink()+0x47>
c000bd3a:	83 c2 0d             	add    edx,0xd
c000bd3d:	50                   	push   eax
c000bd3e:	50                   	push   eax
c000bd3f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd41:	52                   	push   edx
c000bd42:	51                   	push   ecx
c000bd43:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bd46:	83 c4 10             	add    esp,0x10
c000bd49:	83 c4 0c             	add    esp,0xc
c000bd4c:	c3                   	ret    
c000bd4d:	90                   	nop

c000bd4e <File::rename(char const*)>:
c000bd4e:	83 ec 0c             	sub    esp,0xc
c000bd51:	b8 0b 00 00 00       	mov    eax,0xb
c000bd56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd5a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd61:	83 f9 19             	cmp    ecx,0x19
c000bd64:	77 32                	ja     c000bd98 <File::rename(char const*)+0x4a>
c000bd66:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd6d:	85 c9                	test   ecx,ecx
c000bd6f:	74 27                	je     c000bd98 <File::rename(char const*)+0x4a>
c000bd71:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd77:	85 c9                	test   ecx,ecx
c000bd79:	74 1d                	je     c000bd98 <File::rename(char const*)+0x4a>
c000bd7b:	b8 06 00 00 00       	mov    eax,0x6
c000bd80:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd84:	75 12                	jne    c000bd98 <File::rename(char const*)+0x4a>
c000bd86:	83 c2 0d             	add    edx,0xd
c000bd89:	50                   	push   eax
c000bd8a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd90:	52                   	push   edx
c000bd91:	51                   	push   ecx
c000bd92:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bd95:	83 c4 10             	add    esp,0x10
c000bd98:	83 c4 0c             	add    esp,0xc
c000bd9b:	c3                   	ret    

c000bd9c <File::chfatattr(unsigned char, unsigned char)>:
c000bd9c:	57                   	push   edi
c000bd9d:	b8 0b 00 00 00       	mov    eax,0xb
c000bda2:	56                   	push   esi
c000bda3:	53                   	push   ebx
c000bda4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bda8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bdac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdb3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bdb7:	83 f9 19             	cmp    ecx,0x19
c000bdba:	77 37                	ja     c000bdf3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdbc:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdc3:	85 c9                	test   ecx,ecx
c000bdc5:	74 2c                	je     c000bdf3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdc7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdcd:	85 c9                	test   ecx,ecx
c000bdcf:	74 22                	je     c000bdf3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdd1:	b8 06 00 00 00       	mov    eax,0x6
c000bdd6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdda:	75 17                	jne    c000bdf3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bddc:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bdde:	89 f0                	mov    eax,esi
c000bde0:	83 c2 0d             	add    edx,0xd
c000bde3:	0f b6 f0             	movzx  esi,al
c000bde6:	0f b6 db             	movzx  ebx,bl
c000bde9:	56                   	push   esi
c000bdea:	53                   	push   ebx
c000bdeb:	52                   	push   edx
c000bdec:	51                   	push   ecx
c000bded:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	5b                   	pop    ebx
c000bdf4:	5e                   	pop    esi
c000bdf5:	5f                   	pop    edi
c000bdf6:	c3                   	ret    
c000bdf7:	90                   	nop

c000bdf8 <File::exists()>:
c000bdf8:	83 ec 0c             	sub    esp,0xc
c000bdfb:	31 c0                	xor    eax,eax
c000bdfd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be01:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be08:	83 f9 19             	cmp    ecx,0x19
c000be0b:	77 24                	ja     c000be31 <File::exists()+0x39>
c000be0d:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be14:	85 c9                	test   ecx,ecx
c000be16:	74 19                	je     c000be31 <File::exists()+0x39>
c000be18:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be1e:	85 c9                	test   ecx,ecx
c000be20:	74 0f                	je     c000be31 <File::exists()+0x39>
c000be22:	83 c2 0d             	add    edx,0xd
c000be25:	50                   	push   eax
c000be26:	50                   	push   eax
c000be27:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be29:	52                   	push   edx
c000be2a:	51                   	push   ecx
c000be2b:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be2e:	83 c4 10             	add    esp,0x10
c000be31:	83 c4 0c             	add    esp,0xc
c000be34:	c3                   	ret    
c000be35:	90                   	nop

c000be36 <File::stat(unsigned long long*, bool*)>:
c000be36:	56                   	push   esi
c000be37:	53                   	push   ebx
c000be38:	50                   	push   eax
c000be39:	b8 0b 00 00 00       	mov    eax,0xb
c000be3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be42:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be46:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be51:	83 f9 19             	cmp    ecx,0x19
c000be54:	77 3d                	ja     c000be93 <File::stat(unsigned long long*, bool*)+0x5d>
c000be56:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be5d:	85 c9                	test   ecx,ecx
c000be5f:	74 32                	je     c000be93 <File::stat(unsigned long long*, bool*)+0x5d>
c000be61:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be67:	85 c9                	test   ecx,ecx
c000be69:	74 28                	je     c000be93 <File::stat(unsigned long long*, bool*)+0x5d>
c000be6b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be6d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be71:	74 13                	je     c000be86 <File::stat(unsigned long long*, bool*)+0x50>
c000be73:	83 ec 04             	sub    esp,0x4
c000be76:	56                   	push   esi
c000be77:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000be7d:	51                   	push   ecx
c000be7e:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000be81:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000be84:	eb 0a                	jmp    c000be90 <File::stat(unsigned long long*, bool*)+0x5a>
c000be86:	53                   	push   ebx
c000be87:	83 c2 0d             	add    edx,0xd
c000be8a:	56                   	push   esi
c000be8b:	52                   	push   edx
c000be8c:	51                   	push   ecx
c000be8d:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000be90:	83 c4 10             	add    esp,0x10
c000be93:	5a                   	pop    edx
c000be94:	5b                   	pop    ebx
c000be95:	5e                   	pop    esi
c000be96:	c3                   	ret    

c000be97 <Fs::setcwd(Process*, char*)>:
c000be97:	55                   	push   ebp
c000be98:	57                   	push   edi
c000be99:	56                   	push   esi
c000be9a:	53                   	push   ebx
c000be9b:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bea1:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bea8:	6a 00                	push   0x0
c000beaa:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000beb0:	57                   	push   edi
c000beb1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000beb8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bebc:	56                   	push   esi
c000bebd:	e8 5c f9 ff ff       	call   c000b81e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bec2:	89 34 24             	mov    DWORD PTR [esp],esi
c000bec5:	e8 a6 46 ff ff       	call   c0000570 <strlen>
c000beca:	83 c4 10             	add    esp,0x10
c000becd:	83 f8 02             	cmp    eax,0x2
c000bed0:	77 15                	ja     c000bee7 <Fs::setcwd(Process*, char*)+0x50>
c000bed2:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bed7:	83 eb 41             	sub    ebx,0x41
c000beda:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bee1:	85 c0                	test   eax,eax
c000bee3:	75 1c                	jne    c000bf01 <Fs::setcwd(Process*, char*)+0x6a>
c000bee5:	eb 2f                	jmp    c000bf16 <Fs::setcwd(Process*, char*)+0x7f>
c000bee7:	83 ec 0c             	sub    esp,0xc
c000beea:	56                   	push   esi
c000beeb:	e8 80 46 ff ff       	call   c0000570 <strlen>
c000bef0:	83 c4 10             	add    esp,0x10
c000bef3:	83 f8 03             	cmp    eax,0x3
c000bef6:	75 57                	jne    c000bf4f <Fs::setcwd(Process*, char*)+0xb8>
c000bef8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000befd:	75 50                	jne    c000bf4f <Fs::setcwd(Process*, char*)+0xb8>
c000beff:	eb d1                	jmp    c000bed2 <Fs::setcwd(Process*, char*)+0x3b>
c000bf01:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf08:	75 0c                	jne    c000bf16 <Fs::setcwd(Process*, char*)+0x7f>
c000bf0a:	83 ec 0c             	sub    esp,0xc
c000bf0d:	50                   	push   eax
c000bf0e:	e8 9b 1d 00 00       	call   c000dcae <LogicalDisk::mount()>
c000bf13:	83 c4 10             	add    esp,0x10
c000bf16:	b8 03 00 00 00       	mov    eax,0x3
c000bf1b:	83 fb 19             	cmp    ebx,0x19
c000bf1e:	0f 87 c6 00 00 00    	ja     c000bfea <Fs::setcwd(Process*, char*)+0x153>
c000bf24:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf2b:	b8 05 00 00 00       	mov    eax,0x5
c000bf30:	85 d2                	test   edx,edx
c000bf32:	0f 84 b2 00 00 00    	je     c000bfea <Fs::setcwd(Process*, char*)+0x153>
c000bf38:	b8 06 00 00 00       	mov    eax,0x6
c000bf3d:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bf44:	0f 85 92 00 00 00    	jne    c000bfdc <Fs::setcwd(Process*, char*)+0x145>
c000bf4a:	e9 9b 00 00 00       	jmp    c000bfea <Fs::setcwd(Process*, char*)+0x153>
c000bf4f:	83 ec 0c             	sub    esp,0xc
c000bf52:	68 14 01 00 00       	push   0x114
c000bf57:	e8 5a bb ff ff       	call   c0007ab6 <malloc>
c000bf5c:	83 c4 0c             	add    esp,0xc
c000bf5f:	89 c3                	mov    ebx,eax
c000bf61:	55                   	push   ebp
c000bf62:	56                   	push   esi
c000bf63:	50                   	push   eax
c000bf64:	e8 ad fb ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c000bf69:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bf6e:	83 c4 0c             	add    esp,0xc
c000bf71:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bf75:	50                   	push   eax
c000bf76:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bf7a:	50                   	push   eax
c000bf7b:	53                   	push   ebx
c000bf7c:	e8 b5 fe ff ff       	call   c000be36 <File::stat(unsigned long long*, bool*)>
c000bf81:	83 c4 10             	add    esp,0x10
c000bf84:	83 f8 02             	cmp    eax,0x2
c000bf87:	74 27                	je     c000bfb0 <Fs::setcwd(Process*, char*)+0x119>
c000bf89:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bf8e:	75 1c                	jne    c000bfac <Fs::setcwd(Process*, char*)+0x115>
c000bf90:	b8 02 00 00 00       	mov    eax,0x2
c000bf95:	85 db                	test   ebx,ebx
c000bf97:	74 51                	je     c000bfea <Fs::setcwd(Process*, char*)+0x153>
c000bf99:	83 ec 0c             	sub    esp,0xc
c000bf9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf9e:	53                   	push   ebx
c000bf9f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfa2:	83 c4 10             	add    esp,0x10
c000bfa5:	b8 02 00 00 00       	mov    eax,0x2
c000bfaa:	eb 3e                	jmp    c000bfea <Fs::setcwd(Process*, char*)+0x153>
c000bfac:	85 c0                	test   eax,eax
c000bfae:	74 1c                	je     c000bfcc <Fs::setcwd(Process*, char*)+0x135>
c000bfb0:	b8 01 00 00 00       	mov    eax,0x1
c000bfb5:	85 db                	test   ebx,ebx
c000bfb7:	74 31                	je     c000bfea <Fs::setcwd(Process*, char*)+0x153>
c000bfb9:	83 ec 0c             	sub    esp,0xc
c000bfbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfbe:	53                   	push   ebx
c000bfbf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfc2:	83 c4 10             	add    esp,0x10
c000bfc5:	b8 01 00 00 00       	mov    eax,0x1
c000bfca:	eb 1e                	jmp    c000bfea <Fs::setcwd(Process*, char*)+0x153>
c000bfcc:	85 db                	test   ebx,ebx
c000bfce:	74 0c                	je     c000bfdc <Fs::setcwd(Process*, char*)+0x145>
c000bfd0:	83 ec 0c             	sub    esp,0xc
c000bfd3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfd5:	53                   	push   ebx
c000bfd6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfd9:	83 c4 10             	add    esp,0x10
c000bfdc:	50                   	push   eax
c000bfdd:	50                   	push   eax
c000bfde:	56                   	push   esi
c000bfdf:	57                   	push   edi
c000bfe0:	e8 5b 46 ff ff       	call   c0000640 <strcpy>
c000bfe5:	83 c4 10             	add    esp,0x10
c000bfe8:	31 c0                	xor    eax,eax
c000bfea:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bff0:	5b                   	pop    ebx
c000bff1:	5e                   	pop    esi
c000bff2:	5f                   	pop    edi
c000bff3:	5d                   	pop    ebp
c000bff4:	c3                   	ret    
c000bff5:	90                   	nop

c000bff6 <Directory::Directory(char const*, Process*)>:
c000bff6:	83 ec 0c             	sub    esp,0xc
c000bff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bffd:	83 ec 08             	sub    esp,0x8
c000c000:	6a 00                	push   0x0
c000c002:	50                   	push   eax
c000c003:	e8 b6 d1 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000c008:	83 c4 10             	add    esp,0x10
c000c00b:	ba 6c 19 02 c0       	mov    edx,0xc002196c
c000c010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c014:	89 10                	mov    DWORD PTR [eax],edx
c000c016:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c01b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c01f:	0f 95 c0             	setne  al
c000c022:	0f b6 c0             	movzx  eax,al
c000c025:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c029:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c02f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c033:	83 c2 0d             	add    edx,0xd
c000c036:	50                   	push   eax
c000c037:	51                   	push   ecx
c000c038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c03c:	52                   	push   edx
c000c03d:	e8 dc f7 ff ff       	call   c000b81e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c042:	83 c4 10             	add    esp,0x10
c000c045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c049:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c04c:	83 e8 41             	sub    eax,0x41
c000c04f:	88 c2                	mov    dl,al
c000c051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c055:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c05f:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c067:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c06d:	0f b6 c0             	movzx  eax,al
c000c070:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c077:	85 c0                	test   eax,eax
c000c079:	74 3e                	je     c000c0b9 <Directory::Directory(char const*, Process*)+0xc3>
c000c07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c07f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c085:	0f b6 c0             	movzx  eax,al
c000c088:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c08f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c095:	85 c0                	test   eax,eax
c000c097:	75 20                	jne    c000c0b9 <Directory::Directory(char const*, Process*)+0xc3>
c000c099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c09d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0a3:	0f b6 c0             	movzx  eax,al
c000c0a6:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0ad:	83 ec 0c             	sub    esp,0xc
c000c0b0:	50                   	push   eax
c000c0b1:	e8 f8 1b 00 00       	call   c000dcae <LogicalDisk::mount()>
c000c0b6:	83 c4 10             	add    esp,0x10
c000c0b9:	90                   	nop
c000c0ba:	83 c4 0c             	add    esp,0xc
c000c0bd:	c3                   	ret    

c000c0be <Directory::open()>:
c000c0be:	53                   	push   ebx
c000c0bf:	b8 0b 00 00 00       	mov    eax,0xb
c000c0c4:	83 ec 08             	sub    esp,0x8
c000c0c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0cb:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c0d2:	83 fa 19             	cmp    edx,0x19
c000c0d5:	77 3d                	ja     c000c114 <Directory::open()+0x56>
c000c0d7:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c0de:	85 d2                	test   edx,edx
c000c0e0:	74 32                	je     c000c114 <Directory::open()+0x56>
c000c0e2:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c0e8:	85 d2                	test   edx,edx
c000c0ea:	74 28                	je     c000c114 <Directory::open()+0x56>
c000c0ec:	b8 06 00 00 00       	mov    eax,0x6
c000c0f1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c0f5:	75 1d                	jne    c000c114 <Directory::open()+0x56>
c000c0f7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c0fd:	50                   	push   eax
c000c0fe:	8b 02                	mov    eax,DWORD PTR [edx]
c000c100:	51                   	push   ecx
c000c101:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c104:	51                   	push   ecx
c000c105:	52                   	push   edx
c000c106:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c109:	83 c4 10             	add    esp,0x10
c000c10c:	85 c0                	test   eax,eax
c000c10e:	75 04                	jne    c000c114 <Directory::open()+0x56>
c000c110:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c114:	83 c4 08             	add    esp,0x8
c000c117:	5b                   	pop    ebx
c000c118:	c3                   	ret    
c000c119:	90                   	nop

c000c11a <Directory::close()>:
c000c11a:	53                   	push   ebx
c000c11b:	b8 0b 00 00 00       	mov    eax,0xb
c000c120:	83 ec 08             	sub    esp,0x8
c000c123:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c127:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c12e:	83 f9 19             	cmp    ecx,0x19
c000c131:	77 41                	ja     c000c174 <Directory::close()+0x5a>
c000c133:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c13a:	85 db                	test   ebx,ebx
c000c13c:	74 36                	je     c000c174 <Directory::close()+0x5a>
c000c13e:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c145:	74 2d                	je     c000c174 <Directory::close()+0x5a>
c000c147:	b8 05 00 00 00       	mov    eax,0x5
c000c14c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c150:	74 22                	je     c000c174 <Directory::close()+0x5a>
c000c152:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c156:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c15d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c163:	53                   	push   ebx
c000c164:	53                   	push   ebx
c000c165:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c167:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c16d:	50                   	push   eax
c000c16e:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c171:	83 c4 10             	add    esp,0x10
c000c174:	83 c4 08             	add    esp,0x8
c000c177:	5b                   	pop    ebx
c000c178:	c3                   	ret    
c000c179:	90                   	nop

c000c17a <Directory::unlink()>:
c000c17a:	83 ec 0c             	sub    esp,0xc
c000c17d:	b8 0b 00 00 00       	mov    eax,0xb
c000c182:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c186:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c18d:	83 f9 19             	cmp    ecx,0x19
c000c190:	77 2f                	ja     c000c1c1 <Directory::unlink()+0x47>
c000c192:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c199:	85 c9                	test   ecx,ecx
c000c19b:	74 24                	je     c000c1c1 <Directory::unlink()+0x47>
c000c19d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1a3:	85 c9                	test   ecx,ecx
c000c1a5:	74 1a                	je     c000c1c1 <Directory::unlink()+0x47>
c000c1a7:	b8 06 00 00 00       	mov    eax,0x6
c000c1ac:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1b0:	75 0f                	jne    c000c1c1 <Directory::unlink()+0x47>
c000c1b2:	83 c2 0d             	add    edx,0xd
c000c1b5:	50                   	push   eax
c000c1b6:	50                   	push   eax
c000c1b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1b9:	52                   	push   edx
c000c1ba:	51                   	push   ecx
c000c1bb:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c1be:	83 c4 10             	add    esp,0x10
c000c1c1:	83 c4 0c             	add    esp,0xc
c000c1c4:	c3                   	ret    
c000c1c5:	90                   	nop

c000c1c6 <Directory::rename(char const*)>:
c000c1c6:	83 ec 0c             	sub    esp,0xc
c000c1c9:	b8 0b 00 00 00       	mov    eax,0xb
c000c1ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1d9:	83 f9 19             	cmp    ecx,0x19
c000c1dc:	77 32                	ja     c000c210 <Directory::rename(char const*)+0x4a>
c000c1de:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1e5:	85 c9                	test   ecx,ecx
c000c1e7:	74 27                	je     c000c210 <Directory::rename(char const*)+0x4a>
c000c1e9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1ef:	85 c9                	test   ecx,ecx
c000c1f1:	74 1d                	je     c000c210 <Directory::rename(char const*)+0x4a>
c000c1f3:	b8 06 00 00 00       	mov    eax,0x6
c000c1f8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1fc:	75 12                	jne    c000c210 <Directory::rename(char const*)+0x4a>
c000c1fe:	83 c2 0d             	add    edx,0xd
c000c201:	50                   	push   eax
c000c202:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c204:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c208:	52                   	push   edx
c000c209:	51                   	push   ecx
c000c20a:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c20d:	83 c4 10             	add    esp,0x10
c000c210:	83 c4 0c             	add    esp,0xc
c000c213:	c3                   	ret    

c000c214 <Directory::exists()>:
c000c214:	83 ec 0c             	sub    esp,0xc
c000c217:	31 c0                	xor    eax,eax
c000c219:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c21d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c224:	83 f9 19             	cmp    ecx,0x19
c000c227:	77 24                	ja     c000c24d <Directory::exists()+0x39>
c000c229:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c230:	85 c9                	test   ecx,ecx
c000c232:	74 19                	je     c000c24d <Directory::exists()+0x39>
c000c234:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c23a:	85 c9                	test   ecx,ecx
c000c23c:	74 0f                	je     c000c24d <Directory::exists()+0x39>
c000c23e:	83 c2 0d             	add    edx,0xd
c000c241:	50                   	push   eax
c000c242:	50                   	push   eax
c000c243:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c245:	52                   	push   edx
c000c246:	51                   	push   ecx
c000c247:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c24a:	83 c4 10             	add    esp,0x10
c000c24d:	83 c4 0c             	add    esp,0xc
c000c250:	c3                   	ret    
c000c251:	90                   	nop

c000c252 <Directory::read(dirent*)>:
c000c252:	83 ec 1c             	sub    esp,0x1c
c000c255:	b8 0b 00 00 00       	mov    eax,0xb
c000c25a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c25e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c265:	83 f9 19             	cmp    ecx,0x19
c000c268:	77 30                	ja     c000c29a <Directory::read(dirent*)+0x48>
c000c26a:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c271:	85 c9                	test   ecx,ecx
c000c273:	74 25                	je     c000c29a <Directory::read(dirent*)+0x48>
c000c275:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c27c:	74 1c                	je     c000c29a <Directory::read(dirent*)+0x48>
c000c27e:	83 ec 0c             	sub    esp,0xc
c000c281:	8b 02                	mov    eax,DWORD PTR [edx]
c000c283:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c287:	51                   	push   ecx
c000c288:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c28c:	6a 00                	push   0x0
c000c28e:	68 10 01 00 00       	push   0x110
c000c293:	52                   	push   edx
c000c294:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c297:	83 c4 20             	add    esp,0x20
c000c29a:	83 c4 1c             	add    esp,0x1c
c000c29d:	c3                   	ret    

c000c29e <Directory::create()>:
c000c29e:	83 ec 0c             	sub    esp,0xc
c000c2a1:	b8 0b 00 00 00       	mov    eax,0xb
c000c2a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2aa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2b1:	83 f9 19             	cmp    ecx,0x19
c000c2b4:	77 2f                	ja     c000c2e5 <Directory::create()+0x47>
c000c2b6:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2bd:	85 c9                	test   ecx,ecx
c000c2bf:	74 24                	je     c000c2e5 <Directory::create()+0x47>
c000c2c1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c2c7:	85 c9                	test   ecx,ecx
c000c2c9:	74 1a                	je     c000c2e5 <Directory::create()+0x47>
c000c2cb:	b8 06 00 00 00       	mov    eax,0x6
c000c2d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c2d4:	75 0f                	jne    c000c2e5 <Directory::create()+0x47>
c000c2d6:	83 c2 0d             	add    edx,0xd
c000c2d9:	50                   	push   eax
c000c2da:	50                   	push   eax
c000c2db:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2dd:	52                   	push   edx
c000c2de:	51                   	push   ecx
c000c2df:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c2e2:	83 c4 10             	add    esp,0x10
c000c2e5:	83 c4 0c             	add    esp,0xc
c000c2e8:	c3                   	ret    
c000c2e9:	90                   	nop

c000c2ea <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c2ea:	b8 0a 00 00 00       	mov    eax,0xa
c000c2ef:	c3                   	ret    

c000c2f0 <Bus::Bus(char const*)>:
c000c2f0:	83 ec 0c             	sub    esp,0xc
c000c2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2f7:	83 ec 08             	sub    esp,0x8
c000c2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c2fe:	50                   	push   eax
c000c2ff:	e8 22 08 00 00       	call   c000cb26 <Device::Device(char const*)>
c000c304:	83 c4 10             	add    esp,0x10
c000c307:	ba 88 19 02 c0       	mov    edx,0xc0021988
c000c30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c310:	89 10                	mov    DWORD PTR [eax],edx
c000c312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c316:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c320:	90                   	nop
c000c321:	83 c4 0c             	add    esp,0xc
c000c324:	c3                   	ret    
c000c325:	90                   	nop
c000c326:	66 90                	xchg   ax,ax

c000c328 <Bus::~Bus()>:
c000c328:	83 ec 0c             	sub    esp,0xc
c000c32b:	ba 88 19 02 c0       	mov    edx,0xc0021988
c000c330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c334:	89 10                	mov    DWORD PTR [eax],edx
c000c336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c33a:	83 ec 0c             	sub    esp,0xc
c000c33d:	50                   	push   eax
c000c33e:	e8 4d 05 00 00       	call   c000c890 <Device::~Device()>
c000c343:	83 c4 10             	add    esp,0x10
c000c346:	90                   	nop
c000c347:	83 c4 0c             	add    esp,0xc
c000c34a:	c3                   	ret    
c000c34b:	90                   	nop

c000c34c <Bus::~Bus()>:
c000c34c:	83 ec 0c             	sub    esp,0xc
c000c34f:	83 ec 0c             	sub    esp,0xc
c000c352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c356:	e8 cd ff ff ff       	call   c000c328 <Bus::~Bus()>
c000c35b:	83 c4 10             	add    esp,0x10
c000c35e:	83 ec 08             	sub    esp,0x8
c000c361:	68 58 01 00 00       	push   0x158
c000c366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36a:	e8 a9 e4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c36f:	83 c4 10             	add    esp,0x10
c000c372:	83 c4 0c             	add    esp,0xc
c000c375:	c3                   	ret    

c000c376 <beepThread(void*)>:
c000c376:	83 ec 0c             	sub    esp,0xc
c000c379:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c37e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c382:	48                   	dec    eax
c000c383:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c388:	75 01                	jne    c000c38b <beepThread(void*)+0x15>
c000c38a:	fb                   	sti    
c000c38b:	83 ec 0c             	sub    esp,0xc
c000c38e:	6b c2 0a             	imul   eax,edx,0xa
c000c391:	50                   	push   eax
c000c392:	e8 21 a0 00 00       	call   c00163b8 <milliTenthSleep(unsigned int)>
c000c397:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c39e:	e8 70 bf 00 00       	call   c0018313 <HalMakeBeep(int)>
c000c3a3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c3ab:	83 c4 1c             	add    esp,0x1c
c000c3ae:	e9 e9 9e 00 00       	jmp    c001629c <blockTask(TaskState)>

c000c3b3 <Krnl::beep(int, int, bool)>:
c000c3b3:	56                   	push   esi
c000c3b4:	53                   	push   ebx
c000c3b5:	83 ec 10             	sub    esp,0x10
c000c3b8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c3bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c3c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c4:	e8 4a bf 00 00       	call   c0018313 <HalMakeBeep(int)>
c000c3c9:	83 c4 10             	add    esp,0x10
c000c3cc:	89 f0                	mov    eax,esi
c000c3ce:	84 c0                	test   al,al
c000c3d0:	74 1e                	je     c000c3f0 <Krnl::beep(int, int, bool)+0x3d>
c000c3d2:	83 ec 0c             	sub    esp,0xc
c000c3d5:	6b db 0a             	imul   ebx,ebx,0xa
c000c3d8:	53                   	push   ebx
c000c3d9:	e8 da 9f 00 00       	call   c00163b8 <milliTenthSleep(unsigned int)>
c000c3de:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c3e6:	83 c4 14             	add    esp,0x14
c000c3e9:	5b                   	pop    ebx
c000c3ea:	5e                   	pop    esi
c000c3eb:	e9 23 bf 00 00       	jmp    c0018313 <HalMakeBeep(int)>
c000c3f0:	68 e6 00 00 00       	push   0xe6
c000c3f5:	53                   	push   ebx
c000c3f6:	68 76 c3 00 c0       	push   0xc000c376
c000c3fb:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c401:	e8 32 9a 00 00       	call   c0015e38 <Process::createThread(void (*)(void*), void*, int)>
c000c406:	83 c4 14             	add    esp,0x14
c000c409:	5b                   	pop    ebx
c000c40a:	5e                   	pop    esi
c000c40b:	c3                   	ret    

c000c40c <User::loadClockSettings(int)>:
c000c40c:	53                   	push   ebx
c000c40d:	83 ec 14             	sub    esp,0x14
c000c410:	68 14 01 00 00       	push   0x114
c000c415:	e8 9c b6 ff ff       	call   c0007ab6 <malloc>
c000c41a:	83 c4 0c             	add    esp,0xc
c000c41d:	89 c3                	mov    ebx,eax
c000c41f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c425:	68 ac 19 02 c0       	push   0xc00219ac
c000c42a:	50                   	push   eax
c000c42b:	e8 e6 f6 ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c000c430:	58                   	pop    eax
c000c431:	5a                   	pop    edx
c000c432:	6a 01                	push   0x1
c000c434:	53                   	push   ebx
c000c435:	e8 fa f6 ff ff       	call   c000bb34 <File::open(FileOpenMode)>
c000c43a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c43d:	e8 50 f7 ff ff       	call   c000bb92 <File::close()>
c000c442:	83 c4 10             	add    esp,0x10
c000c445:	85 db                	test   ebx,ebx
c000c447:	74 0f                	je     c000c458 <User::loadClockSettings(int)+0x4c>
c000c449:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c44b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c44f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c452:	83 c4 08             	add    esp,0x8
c000c455:	5b                   	pop    ebx
c000c456:	ff e0                	jmp    eax
c000c458:	83 c4 08             	add    esp,0x8
c000c45b:	5b                   	pop    ebx
c000c45c:	c3                   	ret    
c000c45d:	90                   	nop

c000c45e <Clock::Clock(char const*)>:
c000c45e:	83 ec 0c             	sub    esp,0xc
c000c461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c465:	83 ec 08             	sub    esp,0x8
c000c468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c46c:	50                   	push   eax
c000c46d:	e8 b4 06 00 00       	call   c000cb26 <Device::Device(char const*)>
c000c472:	83 c4 10             	add    esp,0x10
c000c475:	ba d4 19 02 c0       	mov    edx,0xc00219d4
c000c47a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c47e:	89 10                	mov    DWORD PTR [eax],edx
c000c480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c484:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c48e:	90                   	nop
c000c48f:	83 c4 0c             	add    esp,0xc
c000c492:	c3                   	ret    
c000c493:	90                   	nop

c000c494 <Clock::~Clock()>:
c000c494:	83 ec 0c             	sub    esp,0xc
c000c497:	ba d4 19 02 c0       	mov    edx,0xc00219d4
c000c49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4a0:	89 10                	mov    DWORD PTR [eax],edx
c000c4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4a6:	83 ec 0c             	sub    esp,0xc
c000c4a9:	50                   	push   eax
c000c4aa:	e8 e1 03 00 00       	call   c000c890 <Device::~Device()>
c000c4af:	83 c4 10             	add    esp,0x10
c000c4b2:	90                   	nop
c000c4b3:	83 c4 0c             	add    esp,0xc
c000c4b6:	c3                   	ret    
c000c4b7:	90                   	nop

c000c4b8 <Clock::~Clock()>:
c000c4b8:	83 ec 0c             	sub    esp,0xc
c000c4bb:	83 ec 0c             	sub    esp,0xc
c000c4be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c2:	e8 cd ff ff ff       	call   c000c494 <Clock::~Clock()>
c000c4c7:	83 c4 10             	add    esp,0x10
c000c4ca:	83 ec 08             	sub    esp,0x8
c000c4cd:	68 58 01 00 00       	push   0x158
c000c4d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4d6:	e8 3d e3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c4db:	83 c4 10             	add    esp,0x10
c000c4de:	83 c4 0c             	add    esp,0xc
c000c4e1:	c3                   	ret    

c000c4e2 <Clock::timeInSecondsLocal()>:
c000c4e2:	53                   	push   ebx
c000c4e3:	83 ec 14             	sub    esp,0x14
c000c4e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c4ea:	8b 10                	mov    edx,DWORD PTR [eax]
c000c4ec:	50                   	push   eax
c000c4ed:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c4f0:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c4f7:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c4fd:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c503:	89 cb                	mov    ebx,ecx
c000c505:	c1 fb 1f             	sar    ebx,0x1f
c000c508:	01 c8                	add    eax,ecx
c000c50a:	11 da                	adc    edx,ebx
c000c50c:	83 c4 10             	add    esp,0x10
c000c50f:	31 c9                	xor    ecx,ecx
c000c511:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c518:	74 05                	je     c000c51f <Clock::timeInSecondsLocal()+0x3d>
c000c51a:	b9 08 07 00 00       	mov    ecx,0x708
c000c51f:	31 db                	xor    ebx,ebx
c000c521:	01 c8                	add    eax,ecx
c000c523:	11 da                	adc    edx,ebx
c000c525:	83 c4 08             	add    esp,0x8
c000c528:	5b                   	pop    ebx
c000c529:	c3                   	ret    

c000c52a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c52a:	57                   	push   edi
c000c52b:	56                   	push   esi
c000c52c:	53                   	push   ebx
c000c52d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c531:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c535:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c537:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c53b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c53e:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c545:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c54b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c551:	99                   	cdq    
c000c552:	29 c6                	sub    esi,eax
c000c554:	19 d7                	sbb    edi,edx
c000c556:	89 f0                	mov    eax,esi
c000c558:	89 fa                	mov    edx,edi
c000c55a:	31 f6                	xor    esi,esi
c000c55c:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c563:	74 05                	je     c000c56a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c565:	be 08 07 00 00       	mov    esi,0x708
c000c56a:	31 ff                	xor    edi,edi
c000c56c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c570:	29 f0                	sub    eax,esi
c000c572:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c576:	19 fa                	sbb    edx,edi
c000c578:	89 d8                	mov    eax,ebx
c000c57a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c57e:	5b                   	pop    ebx
c000c57f:	5e                   	pop    esi
c000c580:	5f                   	pop    edi
c000c581:	ff e0                	jmp    eax

c000c583 <datetimeToSeconds(datetime_t)>:
c000c583:	55                   	push   ebp
c000c584:	57                   	push   edi
c000c585:	56                   	push   esi
c000c586:	53                   	push   ebx
c000c587:	83 ec 0c             	sub    esp,0xc
c000c58a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c58e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c592:	89 d6                	mov    esi,edx
c000c594:	0f b6 c7             	movzx  eax,bh
c000c597:	c1 ee 10             	shr    esi,0x10
c000c59a:	6b e8 3c             	imul   ebp,eax,0x3c
c000c59d:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c5a3:	0f b6 ce             	movzx  ecx,dh
c000c5a6:	89 df                	mov    edi,ebx
c000c5a8:	49                   	dec    ecx
c000c5a9:	c1 ef 10             	shr    edi,0x10
c000c5ac:	0f b6 db             	movzx  ebx,bl
c000c5af:	89 f8                	mov    eax,edi
c000c5b1:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c5b7:	0f b6 f8             	movzx  edi,al
c000c5ba:	0f b6 d2             	movzx  edx,dl
c000c5bd:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c5c1:	01 d8                	add    eax,ebx
c000c5c3:	0f b7 de             	movzx  ebx,si
c000c5c6:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5c9:	c1 f8 1f             	sar    eax,0x1f
c000c5cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c5d0:	0f b6 c1             	movzx  eax,cl
c000c5d3:	8b 0c 85 20 1a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde5e0]
c000c5da:	83 f8 01             	cmp    eax,0x1
c000c5dd:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c5e1:	76 27                	jbe    c000c60a <datetimeToSeconds(datetime_t)+0x87>
c000c5e3:	83 e6 03             	and    esi,0x3
c000c5e6:	75 22                	jne    c000c60a <datetimeToSeconds(datetime_t)+0x87>
c000c5e8:	31 d2                	xor    edx,edx
c000c5ea:	be 64 00 00 00       	mov    esi,0x64
c000c5ef:	89 d8                	mov    eax,ebx
c000c5f1:	f7 f6                	div    esi
c000c5f3:	85 d2                	test   edx,edx
c000c5f5:	75 12                	jne    c000c609 <datetimeToSeconds(datetime_t)+0x86>
c000c5f7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c5fd:	be 90 01 00 00       	mov    esi,0x190
c000c602:	99                   	cdq    
c000c603:	f7 fe                	idiv   esi
c000c605:	85 d2                	test   edx,edx
c000c607:	75 01                	jne    c000c60a <datetimeToSeconds(datetime_t)+0x87>
c000c609:	41                   	inc    ecx
c000c60a:	83 fb 46             	cmp    ebx,0x46
c000c60d:	76 48                	jbe    c000c657 <datetimeToSeconds(datetime_t)+0xd4>
c000c60f:	be 46 00 00 00       	mov    esi,0x46
c000c614:	bf 64 00 00 00       	mov    edi,0x64
c000c619:	bd 90 01 00 00       	mov    ebp,0x190
c000c61e:	b8 6d 01 00 00       	mov    eax,0x16d
c000c623:	f7 c6 03 00 00 00    	test   esi,0x3
c000c629:	75 23                	jne    c000c64e <datetimeToSeconds(datetime_t)+0xcb>
c000c62b:	89 f0                	mov    eax,esi
c000c62d:	99                   	cdq    
c000c62e:	f7 ff                	idiv   edi
c000c630:	b8 6e 01 00 00       	mov    eax,0x16e
c000c635:	85 d2                	test   edx,edx
c000c637:	75 15                	jne    c000c64e <datetimeToSeconds(datetime_t)+0xcb>
c000c639:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c63f:	99                   	cdq    
c000c640:	f7 fd                	idiv   ebp
c000c642:	83 fa 01             	cmp    edx,0x1
c000c645:	19 c0                	sbb    eax,eax
c000c647:	f7 d0                	not    eax
c000c649:	05 6e 01 00 00       	add    eax,0x16e
c000c64e:	01 c1                	add    ecx,eax
c000c650:	46                   	inc    esi
c000c651:	39 de                	cmp    esi,ebx
c000c653:	7c c9                	jl     c000c61e <datetimeToSeconds(datetime_t)+0x9b>
c000c655:	eb 34                	jmp    c000c68b <datetimeToSeconds(datetime_t)+0x108>
c000c657:	74 32                	je     c000c68b <datetimeToSeconds(datetime_t)+0x108>
c000c659:	b8 45 00 00 00       	mov    eax,0x45
c000c65e:	89 c2                	mov    edx,eax
c000c660:	83 e2 03             	and    edx,0x3
c000c663:	39 d8                	cmp    eax,ebx
c000c665:	7e 0f                	jle    c000c676 <datetimeToSeconds(datetime_t)+0xf3>
c000c667:	83 fa 01             	cmp    edx,0x1
c000c66a:	19 d2                	sbb    edx,edx
c000c66c:	48                   	dec    eax
c000c66d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c674:	eb e8                	jmp    c000c65e <datetimeToSeconds(datetime_t)+0xdb>
c000c676:	b8 6d 01 00 00       	mov    eax,0x16d
c000c67b:	85 d2                	test   edx,edx
c000c67d:	75 0a                	jne    c000c689 <datetimeToSeconds(datetime_t)+0x106>
c000c67f:	83 fb 01             	cmp    ebx,0x1
c000c682:	19 c0                	sbb    eax,eax
c000c684:	05 6e 01 00 00       	add    eax,0x16e
c000c689:	29 c1                	sub    ecx,eax
c000c68b:	b8 80 51 01 00       	mov    eax,0x15180
c000c690:	f7 e9                	imul   ecx
c000c692:	03 04 24             	add    eax,DWORD PTR [esp]
c000c695:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c699:	83 c4 0c             	add    esp,0xc
c000c69c:	5b                   	pop    ebx
c000c69d:	5e                   	pop    esi
c000c69e:	5f                   	pop    edi
c000c69f:	5d                   	pop    ebp
c000c6a0:	c3                   	ret    
c000c6a1:	90                   	nop

c000c6a2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c6a2:	57                   	push   edi
c000c6a3:	56                   	push   esi
c000c6a4:	53                   	push   ebx
c000c6a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c6a9:	8b 06                	mov    eax,DWORD PTR [esi]
c000c6ab:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c6ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6b6:	e8 c8 fe ff ff       	call   c000c583 <datetimeToSeconds(datetime_t)>
c000c6bb:	59                   	pop    ecx
c000c6bc:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c6c3:	5b                   	pop    ebx
c000c6c4:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c6ca:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c6d0:	89 cb                	mov    ebx,ecx
c000c6d2:	c1 fb 1f             	sar    ebx,0x1f
c000c6d5:	29 c8                	sub    eax,ecx
c000c6d7:	19 da                	sbb    edx,ebx
c000c6d9:	31 c9                	xor    ecx,ecx
c000c6db:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c6e2:	74 05                	je     c000c6e9 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c6e4:	b9 08 07 00 00       	mov    ecx,0x708
c000c6e9:	31 db                	xor    ebx,ebx
c000c6eb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c6ef:	29 c8                	sub    eax,ecx
c000c6f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6f5:	19 da                	sbb    edx,ebx
c000c6f7:	89 f8                	mov    eax,edi
c000c6f9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6fd:	5b                   	pop    ebx
c000c6fe:	5e                   	pop    esi
c000c6ff:	5f                   	pop    edi
c000c700:	ff e0                	jmp    eax

c000c702 <secondsToDatetime(unsigned long long)>:
c000c702:	55                   	push   ebp
c000c703:	57                   	push   edi
c000c704:	56                   	push   esi
c000c705:	53                   	push   ebx
c000c706:	83 ec 1c             	sub    esp,0x1c
c000c709:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c70d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c711:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c715:	6a 00                	push   0x0
c000c717:	68 80 51 01 00       	push   0x15180
c000c71c:	55                   	push   ebp
c000c71d:	57                   	push   edi
c000c71e:	e8 dd 2f 01 00       	call   c001f700 <__udivdi3>
c000c723:	83 c4 10             	add    esp,0x10
c000c726:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c72c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c730:	6a 00                	push   0x0
c000c732:	68 80 51 01 00       	push   0x15180
c000c737:	55                   	push   ebp
c000c738:	57                   	push   edi
c000c739:	bf 10 0e 00 00       	mov    edi,0xe10
c000c73e:	e8 bd 30 01 00       	call   c001f800 <__umoddi3>
c000c743:	83 c4 10             	add    esp,0x10
c000c746:	99                   	cdq    
c000c747:	f7 ff                	idiv   edi
c000c749:	bf 3c 00 00 00       	mov    edi,0x3c
c000c74e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c751:	89 d0                	mov    eax,edx
c000c753:	99                   	cdq    
c000c754:	f7 ff                	idiv   edi
c000c756:	85 db                	test   ebx,ebx
c000c758:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c75b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c75e:	79 11                	jns    c000c771 <secondsToDatetime(unsigned long long)+0x6f>
c000c760:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c764:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c76a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c76f:	eb 07                	jmp    c000c778 <secondsToDatetime(unsigned long long)+0x76>
c000c771:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c776:	89 d8                	mov    eax,ebx
c000c778:	bf b4 05 00 00       	mov    edi,0x5b4
c000c77d:	99                   	cdq    
c000c77e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c783:	f7 f9                	idiv   ecx
c000c785:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c78a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c78e:	31 d2                	xor    edx,edx
c000c790:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c798:	01 c3                	add    ebx,eax
c000c79a:	89 d8                	mov    eax,ebx
c000c79c:	f7 f1                	div    ecx
c000c79e:	31 d2                	xor    edx,edx
c000c7a0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c7a3:	89 d8                	mov    eax,ebx
c000c7a5:	f7 f7                	div    edi
c000c7a7:	31 d2                	xor    edx,edx
c000c7a9:	29 c1                	sub    ecx,eax
c000c7ab:	89 d8                	mov    eax,ebx
c000c7ad:	f7 f5                	div    ebp
c000c7af:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c7b4:	29 c1                	sub    ecx,eax
c000c7b6:	31 d2                	xor    edx,edx
c000c7b8:	89 c8                	mov    eax,ecx
c000c7ba:	f7 f5                	div    ebp
c000c7bc:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c7c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7c5:	31 d2                	xor    edx,edx
c000c7c7:	89 c8                	mov    eax,ecx
c000c7c9:	f7 f5                	div    ebp
c000c7cb:	31 d2                	xor    edx,edx
c000c7cd:	01 c3                	add    ebx,eax
c000c7cf:	89 c8                	mov    eax,ecx
c000c7d1:	f7 f7                	div    edi
c000c7d3:	bf 99 00 00 00       	mov    edi,0x99
c000c7d8:	29 c3                	sub    ebx,eax
c000c7da:	31 d2                	xor    edx,edx
c000c7dc:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c7e4:	29 c3                	sub    ebx,eax
c000c7e6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c7e9:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c7ec:	bb 05 00 00 00       	mov    ebx,0x5
c000c7f1:	83 c1 02             	add    ecx,0x2
c000c7f4:	89 c8                	mov    eax,ecx
c000c7f6:	f7 f7                	div    edi
c000c7f8:	31 d2                	xor    edx,edx
c000c7fa:	89 c7                	mov    edi,eax
c000c7fc:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c802:	83 c0 02             	add    eax,0x2
c000c805:	f7 f3                	div    ebx
c000c807:	89 eb                	mov    ebx,ebp
c000c809:	29 c3                	sub    ebx,eax
c000c80b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c811:	88 1e                	mov    BYTE PTR [esi],bl
c000c813:	19 c0                	sbb    eax,eax
c000c815:	31 d2                	xor    edx,edx
c000c817:	83 e0 0c             	and    eax,0xc
c000c81a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c81e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c826:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c82a:	83 f9 01             	cmp    ecx,0x1
c000c82d:	0f 96 c2             	setbe  dl
c000c830:	41                   	inc    ecx
c000c831:	01 d0                	add    eax,edx
c000c833:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c836:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c83a:	83 c4 1c             	add    esp,0x1c
c000c83d:	89 f0                	mov    eax,esi
c000c83f:	5b                   	pop    ebx
c000c840:	5e                   	pop    esi
c000c841:	5f                   	pop    edi
c000c842:	5d                   	pop    ebp
c000c843:	c2 04 00             	ret    0x4

c000c846 <Clock::timeInDatetimeLocal()>:
c000c846:	53                   	push   ebx
c000c847:	83 ec 14             	sub    esp,0x14
c000c84a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c84e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c852:	e8 8b fc ff ff       	call   c000c4e2 <Clock::timeInSecondsLocal()>
c000c857:	83 c4 0c             	add    esp,0xc
c000c85a:	52                   	push   edx
c000c85b:	50                   	push   eax
c000c85c:	53                   	push   ebx
c000c85d:	e8 a0 fe ff ff       	call   c000c702 <secondsToDatetime(unsigned long long)>
c000c862:	89 d8                	mov    eax,ebx
c000c864:	83 c4 14             	add    esp,0x14
c000c867:	5b                   	pop    ebx
c000c868:	c2 04 00             	ret    0x4
c000c86b:	90                   	nop

c000c86c <Device::hibernate()>:
c000c86c:	c3                   	ret    
c000c86d:	90                   	nop

c000c86e <Device::wake()>:
c000c86e:	c3                   	ret    
c000c86f:	90                   	nop

c000c870 <Device::detect()>:
c000c870:	c3                   	ret    
c000c871:	90                   	nop

c000c872 <Device::disableLegacy()>:
c000c872:	c3                   	ret    
c000c873:	90                   	nop

c000c874 <Device::powerSaving(PowerSavingLevel)>:
c000c874:	c3                   	ret    
c000c875:	90                   	nop

c000c876 <DriverlessDevice::close(int, int, void*)>:
c000c876:	31 c0                	xor    eax,eax
c000c878:	c3                   	ret    
c000c879:	90                   	nop

c000c87a <DriverlessDevice::detect()>:
c000c87a:	c3                   	ret    
c000c87b:	90                   	nop

c000c87c <DriverlessDevice::open(int, int, void*)>:
c000c87c:	83 ec 18             	sub    esp,0x18
c000c87f:	68 50 1a 02 c0       	push   0xc0021a50
c000c884:	e8 5e 4d 00 00       	call   c00115e7 <KePanic(char const*)>
c000c889:	83 c8 ff             	or     eax,0xffffffff
c000c88c:	83 c4 1c             	add    esp,0x1c
c000c88f:	c3                   	ret    

c000c890 <Device::~Device()>:
c000c890:	ba b0 1a 02 c0       	mov    edx,0xc0021ab0
c000c895:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c899:	89 10                	mov    DWORD PTR [eax],edx
c000c89b:	90                   	nop
c000c89c:	c3                   	ret    
c000c89d:	90                   	nop

c000c89e <Device::~Device()>:
c000c89e:	83 ec 0c             	sub    esp,0xc
c000c8a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c8a5:	e8 e6 ff ff ff       	call   c000c890 <Device::~Device()>
c000c8aa:	83 c4 04             	add    esp,0x4
c000c8ad:	83 ec 08             	sub    esp,0x8
c000c8b0:	68 58 01 00 00       	push   0x158
c000c8b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8b9:	e8 5a df ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c8be:	83 c4 10             	add    esp,0x10
c000c8c1:	83 c4 0c             	add    esp,0xc
c000c8c4:	c3                   	ret    
c000c8c5:	90                   	nop

c000c8c6 <Device::findAndLoadDriver()>:
c000c8c6:	c7 44 24 04 6e 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a6e
c000c8ce:	e9 72 e0 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c8d3:	90                   	nop

c000c8d4 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c8d4:	57                   	push   edi
c000c8d5:	b9 09 00 00 00       	mov    ecx,0x9
c000c8da:	56                   	push   esi
c000c8db:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c8df:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c8e3:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c8ed:	81 c7 18 01 00 00    	add    edi,0x118
c000c8f3:	fc                   	cld    
c000c8f4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c8f6:	5e                   	pop    esi
c000c8f7:	5f                   	pop    edi
c000c8f8:	c3                   	ret    
c000c8f9:	90                   	nop

c000c8fa <Device::preOpenACPI(void*, char*, char*)>:
c000c8fa:	57                   	push   edi
c000c8fb:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c900:	56                   	push   esi
c000c901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c905:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c909:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c913:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c919:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c91f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c923:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c925:	b9 0e 00 00 00       	mov    ecx,0xe
c000c92a:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c930:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c934:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c936:	5e                   	pop    esi
c000c937:	5f                   	pop    edi
c000c938:	c3                   	ret    
c000c939:	90                   	nop

c000c93a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c93a:	53                   	push   ebx
c000c93b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c93f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c943:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c947:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c94b:	0f b6 c0             	movzx  eax,al
c000c94e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c952:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c956:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c95a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c95e:	5b                   	pop    ebx
c000c95f:	e9 a8 05 00 00       	jmp    c000cf0c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c964 <Device::getParent()>:
c000c964:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c968:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c96e:	c3                   	ret    
c000c96f:	90                   	nop

c000c970 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c970:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c974:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c978:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c97d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c981:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c989:	e9 e6 06 00 00       	jmp    c000d074 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c98e <Device::addChild(Device*)>:
c000c98e:	53                   	push   ebx
c000c98f:	83 ec 08             	sub    esp,0x8
c000c992:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c996:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c99a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c9a0:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c9a6:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c9a8:	85 d2                	test   edx,edx
c000c9aa:	74 04                	je     c000c9b0 <Device::addChild(Device*)+0x22>
c000c9ac:	89 d3                	mov    ebx,edx
c000c9ae:	eb f6                	jmp    c000c9a6 <Device::addChild(Device*)+0x18>
c000c9b0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c9b3:	83 ec 0c             	sub    esp,0xc
c000c9b6:	6a 08                	push   0x8
c000c9b8:	e8 f9 b0 ff ff       	call   c0007ab6 <malloc>
c000c9bd:	89 03                	mov    DWORD PTR [ebx],eax
c000c9bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c9c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c9cc:	83 c4 18             	add    esp,0x18
c000c9cf:	5b                   	pop    ebx
c000c9d0:	c3                   	ret    
c000c9d1:	90                   	nop

c000c9d2 <Device::removeAllChildren()>:
c000c9d2:	56                   	push   esi
c000c9d3:	53                   	push   ebx
c000c9d4:	52                   	push   edx
c000c9d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c9d9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c9df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c9e2:	74 17                	je     c000c9fb <Device::removeAllChildren()+0x29>
c000c9e4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c9e7:	85 c0                	test   eax,eax
c000c9e9:	74 0c                	je     c000c9f7 <Device::removeAllChildren()+0x25>
c000c9eb:	83 ec 0c             	sub    esp,0xc
c000c9ee:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9f0:	50                   	push   eax
c000c9f1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c9f4:	83 c4 10             	add    esp,0x10
c000c9f7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c9f9:	eb e4                	jmp    c000c9df <Device::removeAllChildren()+0xd>
c000c9fb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca01:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca07:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca0d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca14:	58                   	pop    eax
c000ca15:	5b                   	pop    ebx
c000ca16:	5e                   	pop    esi
c000ca17:	c3                   	ret    

c000ca18 <Device::hibernateAll()>:
c000ca18:	53                   	push   ebx
c000ca19:	83 ec 14             	sub    esp,0x14
c000ca1c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca20:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca22:	53                   	push   ebx
c000ca23:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca26:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca2c:	83 c4 10             	add    esp,0x10
c000ca2f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca32:	74 0f                	je     c000ca43 <Device::hibernateAll()+0x2b>
c000ca34:	83 ec 0c             	sub    esp,0xc
c000ca37:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca3a:	e8 d9 ff ff ff       	call   c000ca18 <Device::hibernateAll()>
c000ca3f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca41:	eb e9                	jmp    c000ca2c <Device::hibernateAll()+0x14>
c000ca43:	83 c4 08             	add    esp,0x8
c000ca46:	5b                   	pop    ebx
c000ca47:	c3                   	ret    

c000ca48 <Device::wakeAll()>:
c000ca48:	53                   	push   ebx
c000ca49:	83 ec 14             	sub    esp,0x14
c000ca4c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca50:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca52:	53                   	push   ebx
c000ca53:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ca56:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca5c:	83 c4 10             	add    esp,0x10
c000ca5f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca62:	74 0f                	je     c000ca73 <Device::wakeAll()+0x2b>
c000ca64:	83 ec 0c             	sub    esp,0xc
c000ca67:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca6a:	e8 d9 ff ff ff       	call   c000ca48 <Device::wakeAll()>
c000ca6f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca71:	eb e9                	jmp    c000ca5c <Device::wakeAll()+0x14>
c000ca73:	83 c4 08             	add    esp,0x8
c000ca76:	5b                   	pop    ebx
c000ca77:	c3                   	ret    

c000ca78 <Device::detectAll()>:
c000ca78:	53                   	push   ebx
c000ca79:	83 ec 14             	sub    esp,0x14
c000ca7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca80:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca82:	53                   	push   ebx
c000ca83:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ca86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca8c:	83 c4 10             	add    esp,0x10
c000ca8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca92:	74 0f                	je     c000caa3 <Device::detectAll()+0x2b>
c000ca94:	83 ec 0c             	sub    esp,0xc
c000ca97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca9a:	e8 d9 ff ff ff       	call   c000ca78 <Device::detectAll()>
c000ca9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000caa1:	eb e9                	jmp    c000ca8c <Device::detectAll()+0x14>
c000caa3:	83 c4 08             	add    esp,0x8
c000caa6:	5b                   	pop    ebx
c000caa7:	c3                   	ret    

c000caa8 <Device::disableLegacyAll()>:
c000caa8:	c3                   	ret    
c000caa9:	90                   	nop

c000caaa <Device::loadDriversForAll()>:
c000caaa:	c3                   	ret    
c000caab:	90                   	nop

c000caac <Device::closeAll()>:
c000caac:	53                   	push   ebx
c000caad:	83 ec 08             	sub    esp,0x8
c000cab0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cab4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cab6:	6a 00                	push   0x0
c000cab8:	6a 00                	push   0x0
c000caba:	6a 00                	push   0x0
c000cabc:	53                   	push   ebx
c000cabd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cac0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cac6:	83 c4 10             	add    esp,0x10
c000cac9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cacc:	74 0f                	je     c000cadd <Device::closeAll()+0x31>
c000cace:	83 ec 0c             	sub    esp,0xc
c000cad1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cad4:	e8 d3 ff ff ff       	call   c000caac <Device::closeAll()>
c000cad9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cadb:	eb e9                	jmp    c000cac6 <Device::closeAll()+0x1a>
c000cadd:	83 c4 08             	add    esp,0x8
c000cae0:	5b                   	pop    ebx
c000cae1:	c3                   	ret    

c000cae2 <Device::powerSavingAll(PowerSavingLevel)>:
c000cae2:	56                   	push   esi
c000cae3:	53                   	push   ebx
c000cae4:	83 ec 0c             	sub    esp,0xc
c000cae7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000caeb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000caef:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caf1:	56                   	push   esi
c000caf2:	53                   	push   ebx
c000caf3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000caf6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cafc:	83 c4 10             	add    esp,0x10
c000caff:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb02:	74 0f                	je     c000cb13 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cb04:	52                   	push   edx
c000cb05:	52                   	push   edx
c000cb06:	56                   	push   esi
c000cb07:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb0a:	e8 d3 ff ff ff       	call   c000cae2 <Device::powerSavingAll(PowerSavingLevel)>
c000cb0f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb11:	eb e9                	jmp    c000cafc <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cb13:	58                   	pop    eax
c000cb14:	5b                   	pop    ebx
c000cb15:	5e                   	pop    esi
c000cb16:	c3                   	ret    
c000cb17:	90                   	nop

c000cb18 <Device::setName(char const*)>:
c000cb18:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cb20:	e9 1b 3b ff ff       	jmp    c0000640 <strcpy>
c000cb25:	90                   	nop

c000cb26 <Device::Device(char const*)>:
c000cb26:	83 ec 1c             	sub    esp,0x1c
c000cb29:	ba b0 1a 02 c0       	mov    edx,0xc0021ab0
c000cb2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb32:	89 10                	mov    DWORD PTR [eax],edx
c000cb34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb38:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cb42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb46:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cb50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb54:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cb5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb62:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cb6c:	83 ec 08             	sub    esp,0x8
c000cb6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb77:	e8 9c ff ff ff       	call   c000cb18 <Device::setName(char const*)>
c000cb7c:	83 c4 10             	add    esp,0x10
c000cb7f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cb87:	83 ec 0c             	sub    esp,0xc
c000cb8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb8e:	e8 23 af ff ff       	call   c0007ab6 <malloc>
c000cb93:	83 c4 10             	add    esp,0x10
c000cb96:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cb9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cba3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cba7:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cbad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbb1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbb7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbc1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbc7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbd2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cbd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbdd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cbe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbe8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cbf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbf6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc04:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc12:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cc1c:	90                   	nop
c000cc1d:	83 c4 1c             	add    esp,0x1c
c000cc20:	c3                   	ret    
c000cc21:	90                   	nop

c000cc22 <Device::getName()>:
c000cc22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc26:	05 d0 00 00 00       	add    eax,0xd0
c000cc2b:	c3                   	ret    

c000cc2c <DriverlessDevice::DriverlessDevice(char const*)>:
c000cc2c:	83 ec 0c             	sub    esp,0xc
c000cc2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc33:	83 ec 08             	sub    esp,0x8
c000cc36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc3a:	50                   	push   eax
c000cc3b:	e8 e6 fe ff ff       	call   c000cb26 <Device::Device(char const*)>
c000cc40:	83 c4 10             	add    esp,0x10
c000cc43:	ba dc 1a 02 c0       	mov    edx,0xc0021adc
c000cc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc4c:	89 10                	mov    DWORD PTR [eax],edx
c000cc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc52:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cc5c:	90                   	nop
c000cc5d:	83 c4 0c             	add    esp,0xc
c000cc60:	c3                   	ret    
c000cc61:	90                   	nop

c000cc62 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cc62:	57                   	push   edi
c000cc63:	56                   	push   esi
c000cc64:	53                   	push   ebx
c000cc65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc69:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000cc6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc71:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000cc77:	75 0c                	jne    c000cc85 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000cc79:	52                   	push   edx
c000cc7a:	52                   	push   edx
c000cc7b:	53                   	push   ebx
c000cc7c:	56                   	push   esi
c000cc7d:	e8 30 2f 01 00       	call   c001fbb2 <LinkedList<Device>::addElement(Device*)>
c000cc82:	83 c4 10             	add    esp,0x10
c000cc85:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cc8b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cc8e:	74 12                	je     c000cca2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000cc90:	50                   	push   eax
c000cc91:	57                   	push   edi
c000cc92:	56                   	push   esi
c000cc93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cc96:	e8 c7 ff ff ff       	call   c000cc62 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cc9b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cc9d:	83 c4 10             	add    esp,0x10
c000cca0:	eb e9                	jmp    c000cc8b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cca2:	5b                   	pop    ebx
c000cca3:	5e                   	pop    esi
c000cca4:	5f                   	pop    edi
c000cca5:	c3                   	ret    

c000cca6 <getDevicesOfType(DeviceType)>:
c000cca6:	53                   	push   ebx
c000cca7:	83 ec 14             	sub    esp,0x14
c000ccaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ccae:	53                   	push   ebx
c000ccaf:	e8 da 2f 01 00       	call   c001fc8e <LinkedList<Device>::LinkedList()>
c000ccb4:	83 c4 0c             	add    esp,0xc
c000ccb7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ccbb:	53                   	push   ebx
c000ccbc:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000ccc2:	e8 9b ff ff ff       	call   c000cc62 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ccc7:	89 d8                	mov    eax,ebx
c000ccc9:	83 c4 18             	add    esp,0x18
c000cccc:	5b                   	pop    ebx
c000cccd:	c2 04 00             	ret    0x4

c000ccd0 <HardDiskController::HardDiskController(char const*)>:
c000ccd0:	83 ec 0c             	sub    esp,0xc
c000ccd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccd7:	83 ec 08             	sub    esp,0x8
c000ccda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccde:	50                   	push   eax
c000ccdf:	e8 42 fe ff ff       	call   c000cb26 <Device::Device(char const*)>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	ba 08 1b 02 c0       	mov    edx,0xc0021b08
c000ccec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf0:	89 10                	mov    DWORD PTR [eax],edx
c000ccf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccf6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd00:	90                   	nop
c000cd01:	83 c4 0c             	add    esp,0xc
c000cd04:	c3                   	ret    
c000cd05:	90                   	nop
c000cd06:	66 90                	xchg   ax,ax

c000cd08 <HardDiskController::~HardDiskController()>:
c000cd08:	83 ec 0c             	sub    esp,0xc
c000cd0b:	ba 08 1b 02 c0       	mov    edx,0xc0021b08
c000cd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd14:	89 10                	mov    DWORD PTR [eax],edx
c000cd16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd1a:	83 ec 0c             	sub    esp,0xc
c000cd1d:	50                   	push   eax
c000cd1e:	e8 6d fb ff ff       	call   c000c890 <Device::~Device()>
c000cd23:	83 c4 10             	add    esp,0x10
c000cd26:	90                   	nop
c000cd27:	83 c4 0c             	add    esp,0xc
c000cd2a:	c3                   	ret    
c000cd2b:	90                   	nop

c000cd2c <HardDiskController::~HardDiskController()>:
c000cd2c:	83 ec 0c             	sub    esp,0xc
c000cd2f:	83 ec 0c             	sub    esp,0xc
c000cd32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd36:	e8 cd ff ff ff       	call   c000cd08 <HardDiskController::~HardDiskController()>
c000cd3b:	83 c4 10             	add    esp,0x10
c000cd3e:	83 ec 08             	sub    esp,0x8
c000cd41:	68 58 01 00 00       	push   0x158
c000cd46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd4a:	e8 c9 da ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cd4f:	83 c4 10             	add    esp,0x10
c000cd52:	83 c4 0c             	add    esp,0xc
c000cd55:	c3                   	ret    

c000cd56 <PhysicalDisk::eject()>:
c000cd56:	83 c8 ff             	or     eax,0xffffffff
c000cd59:	c3                   	ret    

c000cd5a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cd5a:	83 ec 0c             	sub    esp,0xc
c000cd5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd61:	83 ec 08             	sub    esp,0x8
c000cd64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd68:	50                   	push   eax
c000cd69:	e8 b8 fd ff ff       	call   c000cb26 <Device::Device(char const*)>
c000cd6e:	83 c4 10             	add    esp,0x10
c000cd71:	ba 34 1b 02 c0       	mov    edx,0xc0021b34
c000cd76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd7a:	89 10                	mov    DWORD PTR [eax],edx
c000cd7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd80:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cd87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd8b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cd92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd96:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cda4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cda8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cdae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cdbc:	90                   	nop
c000cdbd:	83 c4 0c             	add    esp,0xc
c000cdc0:	c3                   	ret    
c000cdc1:	90                   	nop

c000cdc2 <PhysicalDisk::startCache()>:
c000cdc2:	56                   	push   esi
c000cdc3:	53                   	push   ebx
c000cdc4:	83 ec 10             	sub    esp,0x10
c000cdc7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cdcb:	6a 44                	push   0x44
c000cdcd:	e8 e4 ac ff ff       	call   c0007ab6 <malloc>
c000cdd2:	89 c6                	mov    esi,eax
c000cdd4:	58                   	pop    eax
c000cdd5:	5a                   	pop    edx
c000cdd6:	53                   	push   ebx
c000cdd7:	56                   	push   esi
c000cdd8:	e8 7b 17 00 00       	call   c000e558 <VCache::VCache(PhysicalDisk*)>
c000cddd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cde3:	83 c4 14             	add    esp,0x14
c000cde6:	5b                   	pop    ebx
c000cde7:	5e                   	pop    esi
c000cde8:	c3                   	ret    
c000cde9:	90                   	nop

c000cdea <PhysicalDisk::~PhysicalDisk()>:
c000cdea:	83 ec 0c             	sub    esp,0xc
c000cded:	ba 34 1b 02 c0       	mov    edx,0xc0021b34
c000cdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf6:	89 10                	mov    DWORD PTR [eax],edx
c000cdf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdfc:	83 ec 0c             	sub    esp,0xc
c000cdff:	50                   	push   eax
c000ce00:	e8 8b fa ff ff       	call   c000c890 <Device::~Device()>
c000ce05:	83 c4 10             	add    esp,0x10
c000ce08:	90                   	nop
c000ce09:	83 c4 0c             	add    esp,0xc
c000ce0c:	c3                   	ret    
c000ce0d:	90                   	nop

c000ce0e <PhysicalDisk::~PhysicalDisk()>:
c000ce0e:	83 ec 0c             	sub    esp,0xc
c000ce11:	83 ec 0c             	sub    esp,0xc
c000ce14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce18:	e8 cd ff ff ff       	call   c000cdea <PhysicalDisk::~PhysicalDisk()>
c000ce1d:	83 c4 10             	add    esp,0x10
c000ce20:	83 ec 08             	sub    esp,0x8
c000ce23:	68 6c 01 00 00       	push   0x16c
c000ce28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce2c:	e8 e7 d9 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ce31:	83 c4 10             	add    esp,0x10
c000ce34:	83 c4 0c             	add    esp,0xc
c000ce37:	c3                   	ret    

c000ce38 <int_handler>:
c000ce38:	55                   	push   ebp
c000ce39:	57                   	push   edi
c000ce3a:	56                   	push   esi
c000ce3b:	53                   	push   ebx
c000ce3c:	83 ec 0c             	sub    esp,0xc
c000ce3f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ce43:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce4a:	74 0b                	je     c000ce57 <int_handler+0x1f>
c000ce4c:	fa                   	cli    
c000ce4d:	f4                   	hlt    
c000ce4e:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce55:	75 f5                	jne    c000ce4c <int_handler+0x14>
c000ce57:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ce5a:	8d 46 e0             	lea    eax,[esi-0x20]
c000ce5d:	83 f8 17             	cmp    eax,0x17
c000ce60:	76 40                	jbe    c000cea2 <int_handler+0x6a>
c000ce62:	c1 e6 04             	shl    esi,0x4
c000ce65:	31 db                	xor    ebx,ebx
c000ce67:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000ce6d:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000ce73:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ce77:	85 c0                	test   eax,eax
c000ce79:	74 13                	je     c000ce8e <int_handler+0x56>
c000ce7b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000ce7e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000ce82:	74 2c                	je     c000ceb0 <int_handler+0x78>
c000ce84:	83 ec 08             	sub    esp,0x8
c000ce87:	52                   	push   edx
c000ce88:	57                   	push   edi
c000ce89:	ff d0                	call   eax
c000ce8b:	83 c4 10             	add    esp,0x10
c000ce8e:	83 c3 01             	add    ebx,0x1
c000ce91:	83 fb 04             	cmp    ebx,0x4
c000ce94:	75 dd                	jne    c000ce73 <int_handler+0x3b>
c000ce96:	83 c4 0c             	add    esp,0xc
c000ce99:	31 c0                	xor    eax,eax
c000ce9b:	5b                   	pop    ebx
c000ce9c:	31 d2                	xor    edx,edx
c000ce9e:	5e                   	pop    esi
c000ce9f:	5f                   	pop    edi
c000cea0:	5d                   	pop    ebp
c000cea1:	c3                   	ret    
c000cea2:	83 ec 0c             	sub    esp,0xc
c000cea5:	50                   	push   eax
c000cea6:	e8 a5 b4 00 00       	call   c0018350 <HalEndOfInterrupt(int)>
c000ceab:	83 c4 10             	add    esp,0x10
c000ceae:	eb b2                	jmp    c000ce62 <int_handler+0x2a>
c000ceb0:	83 ec 08             	sub    esp,0x8
c000ceb3:	52                   	push   edx
c000ceb4:	57                   	push   edi
c000ceb5:	ff d0                	call   eax
c000ceb7:	83 c4 10             	add    esp,0x10
c000ceba:	83 c4 0c             	add    esp,0xc
c000cebd:	5b                   	pop    ebx
c000cebe:	5e                   	pop    esi
c000cebf:	5f                   	pop    edi
c000cec0:	5d                   	pop    ebp
c000cec1:	c3                   	ret    

c000cec2 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cec2:	56                   	push   esi
c000cec3:	31 c0                	xor    eax,eax
c000cec5:	53                   	push   ebx
c000cec6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ceca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cece:	89 ca                	mov    edx,ecx
c000ced0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ced4:	c1 e2 04             	shl    edx,0x4
c000ced7:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cedf:	74 17                	je     c000cef8 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cee1:	83 c0 01             	add    eax,0x1
c000cee4:	83 f8 04             	cmp    eax,0x4
c000cee7:	75 ee                	jne    c000ced7 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cee9:	c7 44 24 0c 64 1b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021b64
c000cef1:	5b                   	pop    ebx
c000cef2:	5e                   	pop    esi
c000cef3:	e9 ef 46 00 00       	jmp    c00115e7 <KePanic(char const*)>
c000cef8:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cefb:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf02:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf09:	5b                   	pop    ebx
c000cf0a:	5e                   	pop    esi
c000cf0b:	c3                   	ret    

c000cf0c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf0c:	57                   	push   edi
c000cf0d:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cf13:	56                   	push   esi
c000cf14:	53                   	push   ebx
c000cf15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cf19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cf1d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf24:	74 54                	je     c000cf7a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cf26:	89 c7                	mov    edi,eax
c000cf28:	84 c0                	test   al,al
c000cf2a:	74 1d                	je     c000cf49 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cf2c:	83 fe 0f             	cmp    esi,0xf
c000cf2f:	0f 8f d5 00 00 00    	jg     c000d00a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cf35:	0f b6 b6 68 36 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc998]
c000cf3c:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cf44:	d1 ef                	shr    edi,1
c000cf46:	83 e7 01             	and    edi,0x1
c000cf49:	83 ec 08             	sub    esp,0x8
c000cf4c:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf51:	31 db                	xor    ebx,ebx
c000cf53:	50                   	push   eax
c000cf54:	68 71 1b 02 c0       	push   0xc0021b71
c000cf59:	e8 e7 d9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cf5e:	83 c4 10             	add    esp,0x10
c000cf61:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf66:	85 c0                	test   eax,eax
c000cf68:	7f 55                	jg     c000cfbf <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cf6a:	83 ec 0c             	sub    esp,0xc
c000cf6d:	68 88 1b 02 c0       	push   0xc0021b88
c000cf72:	e8 70 46 00 00       	call   c00115e7 <KePanic(char const*)>
c000cf77:	83 c4 10             	add    esp,0x10
c000cf7a:	8d 7e 20             	lea    edi,[esi+0x20]
c000cf7d:	89 f8                	mov    eax,edi
c000cf7f:	31 d2                	xor    edx,edx
c000cf81:	c1 e0 04             	shl    eax,0x4
c000cf84:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cf8b:	85 c9                	test   ecx,ecx
c000cf8d:	0f 84 8e 00 00 00    	je     c000d021 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cf93:	83 c2 01             	add    edx,0x1
c000cf96:	83 fa 04             	cmp    edx,0x4
c000cf99:	75 e9                	jne    c000cf84 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cf9b:	83 ec 0c             	sub    esp,0xc
c000cf9e:	68 dc 1b 02 c0       	push   0xc0021bdc
c000cfa3:	e8 3f 46 00 00       	call   c00115e7 <KePanic(char const*)>
c000cfa8:	83 c4 10             	add    esp,0x10
c000cfab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cfb0:	5b                   	pop    ebx
c000cfb1:	5e                   	pop    esi
c000cfb2:	5f                   	pop    edi
c000cfb3:	c3                   	ret    
c000cfb4:	83 c3 01             	add    ebx,0x1
c000cfb7:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000cfbd:	7e ab                	jle    c000cf6a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cfbf:	83 ec 08             	sub    esp,0x8
c000cfc2:	8b 04 9d e0 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f20]
c000cfc9:	56                   	push   esi
c000cfca:	50                   	push   eax
c000cfcb:	e8 0a 1b 01 00       	call   c001eada <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cfd0:	83 c4 10             	add    esp,0x10
c000cfd3:	84 c0                	test   al,al
c000cfd5:	74 dd                	je     c000cfb4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cfd7:	83 ec 04             	sub    esp,0x4
c000cfda:	89 f8                	mov    eax,edi
c000cfdc:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000cfe3:	0f b6 f8             	movzx  edi,al
c000cfe6:	57                   	push   edi
c000cfe7:	8d 7e 20             	lea    edi,[esi+0x20]
c000cfea:	6a 00                	push   0x0
c000cfec:	89 f8                	mov    eax,edi
c000cfee:	0f b6 c0             	movzx  eax,al
c000cff1:	50                   	push   eax
c000cff2:	89 f0                	mov    eax,esi
c000cff4:	6a 00                	push   0x0
c000cff6:	0f b6 c0             	movzx  eax,al
c000cff9:	6a 00                	push   0x0
c000cffb:	50                   	push   eax
c000cffc:	53                   	push   ebx
c000cffd:	e8 44 1c 01 00       	call   c001ec46 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d002:	83 c4 20             	add    esp,0x20
c000d005:	e9 73 ff ff ff       	jmp    c000cf7d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000d00a:	83 ec 0c             	sub    esp,0xc
c000d00d:	31 ff                	xor    edi,edi
c000d00f:	68 a4 1b 02 c0       	push   0xc0021ba4
c000d014:	e8 ce 45 00 00       	call   c00115e7 <KePanic(char const*)>
c000d019:	83 c4 10             	add    esp,0x10
c000d01c:	e9 28 ff ff ff       	jmp    c000cf49 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000d021:	8d 04 ba             	lea    eax,[edx+edi*4]
c000d024:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d028:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d02f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d033:	5b                   	pop    ebx
c000d034:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d03b:	89 f0                	mov    eax,esi
c000d03d:	5e                   	pop    esi
c000d03e:	5f                   	pop    edi
c000d03f:	c3                   	ret    

c000d040 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d040:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d044:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d048:	c1 e0 04             	shl    eax,0x4
c000d04b:	8d 50 10             	lea    edx,[eax+0x10]
c000d04e:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d054:	74 08                	je     c000d05e <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d056:	83 c0 04             	add    eax,0x4
c000d059:	39 d0                	cmp    eax,edx
c000d05b:	75 f1                	jne    c000d04e <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d05d:	c3                   	ret    
c000d05e:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d068:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d072:	eb e2                	jmp    c000d056 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d074 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d074:	53                   	push   ebx
c000d075:	83 ec 08             	sub    esp,0x8
c000d078:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d07c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d081:	74 0e                	je     c000d091 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d083:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d088:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d08f:	75 37                	jne    c000d0c8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000d091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d095:	83 c0 20             	add    eax,0x20
c000d098:	c1 e0 04             	shl    eax,0x4
c000d09b:	8d 50 10             	lea    edx,[eax+0x10]
c000d09e:	39 98 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ebx
c000d0a4:	74 0c                	je     c000d0b2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000d0a6:	83 c0 04             	add    eax,0x4
c000d0a9:	39 d0                	cmp    eax,edx
c000d0ab:	75 f1                	jne    c000d09e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000d0ad:	83 c4 08             	add    esp,0x8
c000d0b0:	5b                   	pop    ebx
c000d0b1:	c3                   	ret    
c000d0b2:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0bc:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0c6:	eb de                	jmp    c000d0a6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000d0c8:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000d0cd:	7f 11                	jg     c000d0e0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000d0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0d3:	0f b6 80 68 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc998]
c000d0da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0de:	eb b1                	jmp    c000d091 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d0e0:	83 ec 0c             	sub    esp,0xc
c000d0e3:	68 95 1b 02 c0       	push   0xc0021b95
c000d0e8:	e8 fa 44 00 00       	call   c00115e7 <KePanic(char const*)>
c000d0ed:	83 c4 10             	add    esp,0x10
c000d0f0:	eb 9f                	jmp    c000d091 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000d0f2 <setupINTS()>:
c000d0f2:	31 c0                	xor    eax,eax
c000d0f4:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0fe:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d108:	c7 80 24 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bdc],0x0
c000d112:	c7 80 24 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bdc],0x0
c000d11c:	c7 80 28 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd8],0x0
c000d126:	c7 80 28 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd8],0x0
c000d130:	c7 80 2c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd4],0x0
c000d13a:	c7 80 2c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd4],0x0
c000d144:	83 c0 10             	add    eax,0x10
c000d147:	3d 00 10 00 00       	cmp    eax,0x1000
c000d14c:	75 a6                	jne    c000d0f4 <setupINTS()+0x2>
c000d14e:	c3                   	ret    

c000d14f <convertLegacyIRQNumber(int)>:
c000d14f:	83 ec 0c             	sub    esp,0xc
c000d152:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d15c:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d163:	74 0c                	je     c000d171 <convertLegacyIRQNumber(int)+0x22>
c000d165:	83 f8 0f             	cmp    eax,0xf
c000d168:	7f 0b                	jg     c000d175 <convertLegacyIRQNumber(int)+0x26>
c000d16a:	0f b6 80 68 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc998]
c000d171:	83 c4 0c             	add    esp,0xc
c000d174:	c3                   	ret    
c000d175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d179:	83 ec 0c             	sub    esp,0xc
c000d17c:	68 a4 1b 02 c0       	push   0xc0021ba4
c000d181:	e8 61 44 00 00       	call   c00115e7 <KePanic(char const*)>
c000d186:	83 c4 10             	add    esp,0x10
c000d189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d18d:	83 c4 0c             	add    esp,0xc
c000d190:	c3                   	ret    
c000d191:	90                   	nop

c000d192 <startGUI(void*)>:
c000d192:	55                   	push   ebp
c000d193:	89 e5                	mov    ebp,esp
c000d195:	53                   	push   ebx
c000d196:	83 ec 04             	sub    esp,0x4
c000d199:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d19e:	83 e8 01             	sub    eax,0x1
c000d1a1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d1a6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1ab:	85 c0                	test   eax,eax
c000d1ad:	75 01                	jne    c000d1b0 <startGUI(void*)+0x1e>
c000d1af:	fb                   	sti    
c000d1b0:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1b6:	83 ec 08             	sub    esp,0x8
c000d1b9:	6a 01                	push   0x1
c000d1bb:	68 01 1c 02 c0       	push   0xc0021c01
c000d1c0:	e8 62 84 00 00       	call   c0015627 <Thr::loadDLL(char const*, bool)>
c000d1c5:	83 c4 10             	add    esp,0x10
c000d1c8:	83 ec 08             	sub    esp,0x8
c000d1cb:	53                   	push   ebx
c000d1cc:	50                   	push   eax
c000d1cd:	e8 86 86 00 00       	call   c0015858 <Thr::executeDLL(unsigned long, void*)>
c000d1d2:	83 c4 10             	add    esp,0x10
c000d1d5:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1db:	83 ec 08             	sub    esp,0x8
c000d1de:	6a 01                	push   0x1
c000d1e0:	68 1b 1c 02 c0       	push   0xc0021c1b
c000d1e5:	e8 3d 84 00 00       	call   c0015627 <Thr::loadDLL(char const*, bool)>
c000d1ea:	83 c4 10             	add    esp,0x10
c000d1ed:	83 ec 08             	sub    esp,0x8
c000d1f0:	53                   	push   ebx
c000d1f1:	50                   	push   eax
c000d1f2:	e8 61 86 00 00       	call   c0015858 <Thr::executeDLL(unsigned long, void*)>
c000d1f7:	83 c4 10             	add    esp,0x10
c000d1fa:	90                   	nop
c000d1fb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d1fe:	c9                   	leave  
c000d1ff:	c3                   	ret    

c000d200 <startGUIVESA(void*)>:
c000d200:	55                   	push   ebp
c000d201:	89 e5                	mov    ebp,esp
c000d203:	53                   	push   ebx
c000d204:	83 ec 04             	sub    esp,0x4
c000d207:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d20c:	83 e8 01             	sub    eax,0x1
c000d20f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d214:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d219:	85 c0                	test   eax,eax
c000d21b:	75 01                	jne    c000d21e <startGUIVESA(void*)+0x1e>
c000d21d:	fb                   	sti    
c000d21e:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d224:	83 ec 08             	sub    esp,0x8
c000d227:	6a 01                	push   0x1
c000d229:	68 39 1c 02 c0       	push   0xc0021c39
c000d22e:	e8 f4 83 00 00       	call   c0015627 <Thr::loadDLL(char const*, bool)>
c000d233:	83 c4 10             	add    esp,0x10
c000d236:	83 ec 08             	sub    esp,0x8
c000d239:	53                   	push   ebx
c000d23a:	50                   	push   eax
c000d23b:	e8 18 86 00 00       	call   c0015858 <Thr::executeDLL(unsigned long, void*)>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d249:	83 ec 08             	sub    esp,0x8
c000d24c:	6a 01                	push   0x1
c000d24e:	68 1b 1c 02 c0       	push   0xc0021c1b
c000d253:	e8 cf 83 00 00       	call   c0015627 <Thr::loadDLL(char const*, bool)>
c000d258:	83 c4 10             	add    esp,0x10
c000d25b:	83 ec 08             	sub    esp,0x8
c000d25e:	53                   	push   ebx
c000d25f:	50                   	push   eax
c000d260:	e8 f3 85 00 00       	call   c0015858 <Thr::executeDLL(unsigned long, void*)>
c000d265:	83 c4 10             	add    esp,0x10
c000d268:	90                   	nop
c000d269:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d26c:	c9                   	leave  
c000d26d:	c3                   	ret    

c000d26e <sendKeyToTerminal(unsigned char)>:
c000d26e:	55                   	push   ebp
c000d26f:	89 e5                	mov    ebp,esp
c000d271:	83 ec 28             	sub    esp,0x28
c000d274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d277:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d27a:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d27f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d283:	83 ec 08             	sub    esp,0x8
c000d286:	52                   	push   edx
c000d287:	50                   	push   eax
c000d288:	e8 29 bb ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d28d:	83 c4 10             	add    esp,0x10
c000d290:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d294:	83 f8 0a             	cmp    eax,0xa
c000d297:	74 16                	je     c000d2af <sendKeyToTerminal(unsigned char)+0x41>
c000d299:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d29d:	83 f8 03             	cmp    eax,0x3
c000d2a0:	74 0d                	je     c000d2af <sendKeyToTerminal(unsigned char)+0x41>
c000d2a2:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2a6:	83 f8 1c             	cmp    eax,0x1c
c000d2a9:	0f 85 97 00 00 00    	jne    c000d346 <sendKeyToTerminal(unsigned char)+0xd8>
c000d2af:	fa                   	cli    
c000d2b0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2b5:	83 c0 01             	add    eax,0x1
c000d2b8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d2bd:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d2c2:	83 c0 01             	add    eax,0x1
c000d2c5:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d2ca:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d2cf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d2d2:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d2dc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d2e0:	74 1f                	je     c000d301 <sendKeyToTerminal(unsigned char)+0x93>
c000d2e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d2e5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d2e8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d2eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d2ee:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d2f1:	83 ec 0c             	sub    esp,0xc
c000d2f4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d2f7:	e8 a4 92 00 00       	call   c00165a0 <unblockTask(ThreadControlBlock*)>
c000d2fc:	83 c4 10             	add    esp,0x10
c000d2ff:	eb db                	jmp    c000d2dc <sendKeyToTerminal(unsigned char)+0x6e>
c000d301:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d306:	83 e8 01             	sub    eax,0x1
c000d309:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d30e:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d313:	85 c0                	test   eax,eax
c000d315:	75 18                	jne    c000d32f <sendKeyToTerminal(unsigned char)+0xc1>
c000d317:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d31c:	85 c0                	test   eax,eax
c000d31e:	74 0f                	je     c000d32f <sendKeyToTerminal(unsigned char)+0xc1>
c000d320:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d32a:	e8 59 8d 00 00       	call   c0016088 <schedule()>
c000d32f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d334:	83 e8 01             	sub    eax,0x1
c000d337:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d33c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d341:	85 c0                	test   eax,eax
c000d343:	75 01                	jne    c000d346 <sendKeyToTerminal(unsigned char)+0xd8>
c000d345:	fb                   	sti    
c000d346:	90                   	nop
c000d347:	c9                   	leave  
c000d348:	c3                   	ret    

c000d349 <sendKeyboardToken(KeyboardToken)>:
c000d349:	55                   	push   ebp
c000d34a:	89 e5                	mov    ebp,esp
c000d34c:	83 ec 18             	sub    esp,0x18
c000d34f:	e8 e3 42 00 00       	call   c0011637 <KeUserIOReceived()>
c000d354:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d357:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d35a:	0f b7 c0             	movzx  eax,ax
c000d35d:	83 f2 01             	xor    edx,0x1
c000d360:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d366:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d36b:	85 c0                	test   eax,eax
c000d36d:	74 24                	je     c000d393 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d36f:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d375:	83 ec 04             	sub    esp,0x4
c000d378:	68 40 b4 02 c0       	push   0xc002b440
c000d37d:	83 ec 08             	sub    esp,0x8
c000d380:	89 e2                	mov    edx,esp
c000d382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d385:	89 02                	mov    DWORD PTR [edx],eax
c000d387:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d38a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d38e:	ff d1                	call   ecx
c000d390:	83 c4 10             	add    esp,0x10
c000d393:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d397:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d39a:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d39f:	0f b6 d2             	movzx  edx,dl
c000d3a2:	0f b6 c0             	movzx  eax,al
c000d3a5:	39 c2                	cmp    edx,eax
c000d3a7:	74 1c                	je     c000d3c5 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d3a9:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d3ac:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d3b1:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3b6:	0f b6 c0             	movzx  eax,al
c000d3b9:	83 ec 0c             	sub    esp,0xc
c000d3bc:	50                   	push   eax
c000d3bd:	e8 40 b1 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d3c2:	83 c4 10             	add    esp,0x10
c000d3c5:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d3c8:	0f b6 c0             	movzx  eax,al
c000d3cb:	85 c0                	test   eax,eax
c000d3cd:	0f 84 da 00 00 00    	je     c000d4ad <sendKeyboardToken(KeyboardToken)+0x164>
c000d3d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3d6:	0f b7 c0             	movzx  eax,ax
c000d3d9:	3d 18 03 00 00       	cmp    eax,0x318
c000d3de:	75 06                	jne    c000d3e6 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d3e0:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d3e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3e9:	0f b7 c0             	movzx  eax,ax
c000d3ec:	3d 19 03 00 00       	cmp    eax,0x319
c000d3f1:	75 06                	jne    c000d3f9 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d3f3:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d3f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3fc:	0f b7 c0             	movzx  eax,ax
c000d3ff:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d404:	75 06                	jne    c000d40c <sendKeyboardToken(KeyboardToken)+0xc3>
c000d406:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d40c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d40f:	0f b7 c0             	movzx  eax,ax
c000d412:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d417:	75 06                	jne    c000d41f <sendKeyboardToken(KeyboardToken)+0xd6>
c000d419:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d41f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d422:	0f b7 c0             	movzx  eax,ax
c000d425:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d42a:	75 06                	jne    c000d432 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d42c:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d435:	0f b7 c0             	movzx  eax,ax
c000d438:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d43d:	75 06                	jne    c000d445 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d43f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d448:	0f b7 c0             	movzx  eax,ax
c000d44b:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d450:	75 06                	jne    c000d458 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d452:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d45b:	0f b7 c0             	movzx  eax,ax
c000d45e:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d463:	75 06                	jne    c000d46b <sendKeyboardToken(KeyboardToken)+0x122>
c000d465:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d46b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d46e:	0f b7 c0             	movzx  eax,ax
c000d471:	3d 20 03 00 00       	cmp    eax,0x320
c000d476:	75 06                	jne    c000d47e <sendKeyboardToken(KeyboardToken)+0x135>
c000d478:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d47e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d481:	0f b7 c0             	movzx  eax,ax
c000d484:	3d 21 03 00 00       	cmp    eax,0x321
c000d489:	75 06                	jne    c000d491 <sendKeyboardToken(KeyboardToken)+0x148>
c000d48b:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d494:	0f b7 c0             	movzx  eax,ax
c000d497:	3d 22 03 00 00       	cmp    eax,0x322
c000d49c:	0f 85 f1 00 00 00    	jne    c000d593 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4a2:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d4a8:	e9 e6 00 00 00       	jmp    c000d593 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b0:	0f b7 c0             	movzx  eax,ax
c000d4b3:	3d 18 03 00 00       	cmp    eax,0x318
c000d4b8:	75 0a                	jne    c000d4c4 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d4ba:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d4c0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c7:	0f b7 c0             	movzx  eax,ax
c000d4ca:	3d 19 03 00 00       	cmp    eax,0x319
c000d4cf:	75 0a                	jne    c000d4db <sendKeyboardToken(KeyboardToken)+0x192>
c000d4d1:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d4d7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4de:	0f b7 c0             	movzx  eax,ax
c000d4e1:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d4e6:	75 0a                	jne    c000d4f2 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d4e8:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d4ee:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d4f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4f5:	0f b7 c0             	movzx  eax,ax
c000d4f8:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d4fd:	75 0a                	jne    c000d509 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d4ff:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d505:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d50c:	0f b7 c0             	movzx  eax,ax
c000d50f:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d514:	75 0a                	jne    c000d520 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d516:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d51c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d523:	0f b7 c0             	movzx  eax,ax
c000d526:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d52b:	75 0a                	jne    c000d537 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d52d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d533:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d53a:	0f b7 c0             	movzx  eax,ax
c000d53d:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d542:	75 0a                	jne    c000d54e <sendKeyboardToken(KeyboardToken)+0x205>
c000d544:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d54a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d54e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d551:	0f b7 c0             	movzx  eax,ax
c000d554:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d559:	75 0a                	jne    c000d565 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d55b:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d561:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d568:	0f b7 c0             	movzx  eax,ax
c000d56b:	3d 20 03 00 00       	cmp    eax,0x320
c000d570:	75 0a                	jne    c000d57c <sendKeyboardToken(KeyboardToken)+0x233>
c000d572:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d578:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d57c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d57f:	0f b7 c0             	movzx  eax,ax
c000d582:	3d 21 03 00 00       	cmp    eax,0x321
c000d587:	75 0a                	jne    c000d593 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d589:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d58f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d596:	0f b7 c0             	movzx  eax,ax
c000d599:	3d 00 02 00 00       	cmp    eax,0x200
c000d59e:	75 2f                	jne    c000d5cf <sendKeyboardToken(KeyboardToken)+0x286>
c000d5a0:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5a5:	83 f0 01             	xor    eax,0x1
c000d5a8:	0f b6 c0             	movzx  eax,al
c000d5ab:	85 c0                	test   eax,eax
c000d5ad:	74 20                	je     c000d5cf <sendKeyboardToken(KeyboardToken)+0x286>
c000d5af:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d5b4:	6a 01                	push   0x1
c000d5b6:	6a 00                	push   0x0
c000d5b8:	68 92 d1 00 c0       	push   0xc000d192
c000d5bd:	50                   	push   eax
c000d5be:	e8 75 88 00 00       	call   c0015e38 <Process::createThread(void (*)(void*), void*, int)>
c000d5c3:	83 c4 10             	add    esp,0x10
c000d5c6:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d5cd:	eb 3a                	jmp    c000d609 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d2:	0f b7 c0             	movzx  eax,ax
c000d5d5:	3d 01 02 00 00       	cmp    eax,0x201
c000d5da:	75 2d                	jne    c000d609 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5dc:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5e1:	83 f0 01             	xor    eax,0x1
c000d5e4:	0f b6 c0             	movzx  eax,al
c000d5e7:	85 c0                	test   eax,eax
c000d5e9:	74 1e                	je     c000d609 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d5eb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d5f0:	6a 01                	push   0x1
c000d5f2:	6a 00                	push   0x0
c000d5f4:	68 00 d2 00 c0       	push   0xc000d200
c000d5f9:	50                   	push   eax
c000d5fa:	e8 39 88 00 00       	call   c0015e38 <Process::createThread(void (*)(void*), void*, int)>
c000d5ff:	83 c4 10             	add    esp,0x10
c000d602:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d60c:	0f b7 c0             	movzx  eax,ax
c000d60f:	3d 25 03 00 00       	cmp    eax,0x325
c000d614:	75 06                	jne    c000d61c <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d616:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d61c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d61f:	0f b7 c0             	movzx  eax,ax
c000d622:	3d 24 03 00 00       	cmp    eax,0x324
c000d627:	75 06                	jne    c000d62f <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d629:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d62f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d632:	0f b7 c0             	movzx  eax,ax
c000d635:	3d 23 03 00 00       	cmp    eax,0x323
c000d63a:	75 06                	jne    c000d642 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d63c:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d645:	0f b7 c0             	movzx  eax,ax
c000d648:	3d 26 03 00 00       	cmp    eax,0x326
c000d64d:	75 06                	jne    c000d655 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d64f:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d658:	0f b7 c0             	movzx  eax,ax
c000d65b:	3d 27 03 00 00       	cmp    eax,0x327
c000d660:	75 06                	jne    c000d668 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d662:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d66b:	0f b7 c0             	movzx  eax,ax
c000d66e:	3d 22 03 00 00       	cmp    eax,0x322
c000d673:	75 06                	jne    c000d67b <sendKeyboardToken(KeyboardToken)+0x332>
c000d675:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d67b:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d67f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d682:	83 f0 01             	xor    eax,0x1
c000d685:	0f b6 c0             	movzx  eax,al
c000d688:	85 c0                	test   eax,eax
c000d68a:	74 7c                	je     c000d708 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d68c:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d691:	0f b6 c0             	movzx  eax,al
c000d694:	85 c0                	test   eax,eax
c000d696:	74 43                	je     c000d6db <sendKeyboardToken(KeyboardToken)+0x392>
c000d698:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d69c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d6a0:	85 c0                	test   eax,eax
c000d6a2:	74 2b                	je     c000d6cf <sendKeyboardToken(KeyboardToken)+0x386>
c000d6a4:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d6aa:	89 d0                	mov    eax,edx
c000d6ac:	c1 e0 02             	shl    eax,0x2
c000d6af:	01 d0                	add    eax,edx
c000d6b1:	01 c0                	add    eax,eax
c000d6b3:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d6b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6bb:	0f b7 c0             	movzx  eax,ax
c000d6be:	8d 50 d0             	lea    edx,[eax-0x30]
c000d6c1:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6c6:	01 d0                	add    eax,edx
c000d6c8:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d6cd:	eb 71                	jmp    c000d740 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6cf:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d6d9:	eb 65                	jmp    c000d740 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d6db:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6e0:	85 c0                	test   eax,eax
c000d6e2:	74 18                	je     c000d6fc <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d6e4:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d6e9:	0f b6 c0             	movzx  eax,al
c000d6ec:	83 ec 0c             	sub    esp,0xc
c000d6ef:	50                   	push   eax
c000d6f0:	e8 79 fb ff ff       	call   c000d26e <sendKeyToTerminal(unsigned char)>
c000d6f5:	83 c4 10             	add    esp,0x10
c000d6f8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6fc:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d706:	eb 38                	jmp    c000d740 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d708:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d70b:	0f b7 c0             	movzx  eax,ax
c000d70e:	3d 01 01 00 00       	cmp    eax,0x101
c000d713:	75 2b                	jne    c000d740 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d715:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d71a:	85 c0                	test   eax,eax
c000d71c:	74 18                	je     c000d736 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d71e:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d723:	0f b6 c0             	movzx  eax,al
c000d726:	83 ec 0c             	sub    esp,0xc
c000d729:	50                   	push   eax
c000d72a:	e8 3f fb ff ff       	call   c000d26e <sendKeyToTerminal(unsigned char)>
c000d72f:	83 c4 10             	add    esp,0x10
c000d732:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d736:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d740:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d743:	83 f0 01             	xor    eax,0x1
c000d746:	0f b6 c0             	movzx  eax,al
c000d749:	85 c0                	test   eax,eax
c000d74b:	74 5a                	je     c000d7a7 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d74d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d750:	83 f0 01             	xor    eax,0x1
c000d753:	0f b6 c0             	movzx  eax,al
c000d756:	85 c0                	test   eax,eax
c000d758:	74 4d                	je     c000d7a7 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d75a:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d75f:	83 f0 01             	xor    eax,0x1
c000d762:	0f b6 c0             	movzx  eax,al
c000d765:	85 c0                	test   eax,eax
c000d767:	74 3e                	je     c000d7a7 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d76c:	0f b7 c0             	movzx  eax,ax
c000d76f:	83 f8 1f             	cmp    eax,0x1f
c000d772:	76 0b                	jbe    c000d77f <sendKeyboardToken(KeyboardToken)+0x436>
c000d774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d777:	0f b7 c0             	movzx  eax,ax
c000d77a:	83 f8 7e             	cmp    eax,0x7e
c000d77d:	76 16                	jbe    c000d795 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d77f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d782:	0f b7 c0             	movzx  eax,ax
c000d785:	83 f8 0a             	cmp    eax,0xa
c000d788:	74 0b                	je     c000d795 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d78a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d78d:	0f b7 c0             	movzx  eax,ax
c000d790:	83 f8 08             	cmp    eax,0x8
c000d793:	75 12                	jne    c000d7a7 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d798:	0f b6 c0             	movzx  eax,al
c000d79b:	83 ec 0c             	sub    esp,0xc
c000d79e:	50                   	push   eax
c000d79f:	e8 ca fa ff ff       	call   c000d26e <sendKeyToTerminal(unsigned char)>
c000d7a4:	83 c4 10             	add    esp,0x10
c000d7a7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7aa:	83 f0 01             	xor    eax,0x1
c000d7ad:	0f b6 c0             	movzx  eax,al
c000d7b0:	85 c0                	test   eax,eax
c000d7b2:	74 5d                	je     c000d811 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7b4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7b7:	83 f0 01             	xor    eax,0x1
c000d7ba:	0f b6 c0             	movzx  eax,al
c000d7bd:	85 c0                	test   eax,eax
c000d7bf:	74 50                	je     c000d811 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7c1:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7c6:	0f b6 c0             	movzx  eax,al
c000d7c9:	85 c0                	test   eax,eax
c000d7cb:	74 44                	je     c000d811 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d0:	0f b7 c0             	movzx  eax,ax
c000d7d3:	83 f8 3f             	cmp    eax,0x3f
c000d7d6:	76 39                	jbe    c000d811 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7db:	0f b7 c0             	movzx  eax,ax
c000d7de:	83 f8 7f             	cmp    eax,0x7f
c000d7e1:	77 2e                	ja     c000d811 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7e6:	88 c2                	mov    dl,al
c000d7e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7eb:	0f b7 c0             	movzx  eax,ax
c000d7ee:	83 f8 5f             	cmp    eax,0x5f
c000d7f1:	76 04                	jbe    c000d7f7 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d7f3:	b0 20                	mov    al,0x20
c000d7f5:	eb 02                	jmp    c000d7f9 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d7f7:	b0 00                	mov    al,0x0
c000d7f9:	89 d1                	mov    ecx,edx
c000d7fb:	29 c1                	sub    ecx,eax
c000d7fd:	89 c8                	mov    eax,ecx
c000d7ff:	83 e8 40             	sub    eax,0x40
c000d802:	0f b6 c0             	movzx  eax,al
c000d805:	83 ec 0c             	sub    esp,0xc
c000d808:	50                   	push   eax
c000d809:	e8 60 fa ff ff       	call   c000d26e <sendKeyToTerminal(unsigned char)>
c000d80e:	83 c4 10             	add    esp,0x10
c000d811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d814:	0f b7 c0             	movzx  eax,ax
c000d817:	3d 00 03 00 00       	cmp    eax,0x300
c000d81c:	75 12                	jne    c000d830 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d81e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d821:	83 f0 01             	xor    eax,0x1
c000d824:	0f b6 c0             	movzx  eax,al
c000d827:	85 c0                	test   eax,eax
c000d829:	74 05                	je     c000d830 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d82b:	e8 d3 ac ff ff       	call   c0008503 <doTerminalCycle()>
c000d830:	90                   	nop
c000d831:	c9                   	leave  
c000d832:	c3                   	ret    

c000d833 <clearInternalKeybuffer(VgaText*)>:
c000d833:	55                   	push   ebp
c000d834:	89 e5                	mov    ebp,esp
c000d836:	83 ec 08             	sub    esp,0x8
c000d839:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d83c:	05 02 01 00 00       	add    eax,0x102
c000d841:	83 ec 0c             	sub    esp,0xc
c000d844:	50                   	push   eax
c000d845:	e8 26 2d ff ff       	call   c0000570 <strlen>
c000d84a:	83 c4 10             	add    esp,0x10
c000d84d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d850:	81 c2 02 01 00 00    	add    edx,0x102
c000d856:	83 ec 04             	sub    esp,0x4
c000d859:	50                   	push   eax
c000d85a:	6a 00                	push   0x0
c000d85c:	52                   	push   edx
c000d85d:	e8 8e 2c ff ff       	call   c00004f0 <memset>
c000d862:	83 c4 10             	add    esp,0x10
c000d865:	90                   	nop
c000d866:	c9                   	leave  
c000d867:	c3                   	ret    

c000d868 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d868:	55                   	push   ebp
c000d869:	89 e5                	mov    ebp,esp
c000d86b:	83 ec 18             	sub    esp,0x18
c000d86e:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d873:	85 c0                	test   eax,eax
c000d875:	74 2a                	je     c000d8a1 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d877:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d87d:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d883:	83 ec 04             	sub    esp,0x4
c000d886:	68 40 b4 02 c0       	push   0xc002b440
c000d88b:	83 ec 08             	sub    esp,0x8
c000d88e:	89 e2                	mov    edx,esp
c000d890:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d893:	89 02                	mov    DWORD PTR [edx],eax
c000d895:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d898:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d89c:	ff d1                	call   ecx
c000d89e:	83 c4 10             	add    esp,0x10
c000d8a1:	fb                   	sti    
c000d8a2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d8a9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d8ad:	0f 84 0d 01 00 00    	je     c000d9c0 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d8b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8b6:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d8bc:	0f be c0             	movsx  eax,al
c000d8bf:	85 c0                	test   eax,eax
c000d8c1:	75 2c                	jne    c000d8ef <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d8c3:	fa                   	cli    
c000d8c4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8c9:	83 c0 01             	add    eax,0x1
c000d8cc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d8d1:	e8 b2 87 00 00       	call   c0016088 <schedule()>
c000d8d6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8db:	83 e8 01             	sub    eax,0x1
c000d8de:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d8e3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d8e8:	85 c0                	test   eax,eax
c000d8ea:	75 c7                	jne    c000d8b3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d8ec:	fb                   	sti    
c000d8ed:	eb c4                	jmp    c000d8b3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d8ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d8f2:	8d 50 01             	lea    edx,[eax+0x1]
c000d8f5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d8f8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d8fb:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d901:	88 10                	mov    BYTE PTR [eax],dl
c000d903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d906:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d90c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d90f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d913:	83 f8 03             	cmp    eax,0x3
c000d916:	75 1e                	jne    c000d936 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d918:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d91d:	8b 00                	mov    eax,DWORD PTR [eax]
c000d91f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d922:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d928:	83 ec 08             	sub    esp,0x8
c000d92b:	6a 02                	push   0x2
c000d92d:	50                   	push   eax
c000d92e:	e8 57 41 00 00       	call   c0011a8a <KeRaiseSignal(SigHandlerBlock*, int)>
c000d933:	83 c4 10             	add    esp,0x10
c000d936:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d93a:	83 f8 1c             	cmp    eax,0x1c
c000d93d:	75 1e                	jne    c000d95d <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d93f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d944:	8b 00                	mov    eax,DWORD PTR [eax]
c000d946:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d949:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d94f:	83 ec 08             	sub    esp,0x8
c000d952:	6a 09                	push   0x9
c000d954:	50                   	push   eax
c000d955:	e8 30 41 00 00       	call   c0011a8a <KeRaiseSignal(SigHandlerBlock*, int)>
c000d95a:	83 c4 10             	add    esp,0x10
c000d95d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d960:	05 02 01 00 00       	add    eax,0x102
c000d965:	83 ec 0c             	sub    esp,0xc
c000d968:	50                   	push   eax
c000d969:	e8 02 2c ff ff       	call   c0000570 <strlen>
c000d96e:	83 c4 10             	add    esp,0x10
c000d971:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d974:	81 c2 02 01 00 00    	add    edx,0x102
c000d97a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d97d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d980:	81 c2 02 01 00 00    	add    edx,0x102
c000d986:	83 ec 04             	sub    esp,0x4
c000d989:	50                   	push   eax
c000d98a:	51                   	push   ecx
c000d98b:	52                   	push   edx
c000d98c:	e8 3f 2a ff ff       	call   c00003d0 <memmove>
c000d991:	83 c4 10             	add    esp,0x10
c000d994:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d998:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d99c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9a0:	83 f8 0a             	cmp    eax,0xa
c000d9a3:	74 16                	je     c000d9bb <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9a5:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9a9:	83 f8 03             	cmp    eax,0x3
c000d9ac:	74 0d                	je     c000d9bb <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9ae:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9b2:	83 f8 1c             	cmp    eax,0x1c
c000d9b5:	0f 85 ee fe ff ff    	jne    c000d8a9 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d9bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d9be:	eb 03                	jmp    c000d9c3 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d9c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d9c3:	c9                   	leave  
c000d9c4:	c3                   	ret    
c000d9c5:	90                   	nop

c000d9c6 <Keyboard::Keyboard(char const*)>:
c000d9c6:	83 ec 0c             	sub    esp,0xc
c000d9c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9cd:	83 ec 08             	sub    esp,0x8
c000d9d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9d4:	50                   	push   eax
c000d9d5:	e8 4c f1 ff ff       	call   c000cb26 <Device::Device(char const*)>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	ba 5c 1c 02 c0       	mov    edx,0xc0021c5c
c000d9e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9e6:	89 10                	mov    DWORD PTR [eax],edx
c000d9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9ec:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d9f6:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000d9fd:	90                   	nop
c000d9fe:	83 c4 0c             	add    esp,0xc
c000da01:	c3                   	ret    

c000da02 <Keyboard::~Keyboard()>:
c000da02:	83 ec 0c             	sub    esp,0xc
c000da05:	ba 5c 1c 02 c0       	mov    edx,0xc0021c5c
c000da0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da0e:	89 10                	mov    DWORD PTR [eax],edx
c000da10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da14:	83 ec 0c             	sub    esp,0xc
c000da17:	50                   	push   eax
c000da18:	e8 73 ee ff ff       	call   c000c890 <Device::~Device()>
c000da1d:	83 c4 10             	add    esp,0x10
c000da20:	90                   	nop
c000da21:	83 c4 0c             	add    esp,0xc
c000da24:	c3                   	ret    
c000da25:	90                   	nop

c000da26 <Keyboard::~Keyboard()>:
c000da26:	83 ec 0c             	sub    esp,0xc
c000da29:	83 ec 0c             	sub    esp,0xc
c000da2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da30:	e8 cd ff ff ff       	call   c000da02 <Keyboard::~Keyboard()>
c000da35:	83 c4 10             	add    esp,0x10
c000da38:	83 ec 08             	sub    esp,0x8
c000da3b:	68 5c 01 00 00       	push   0x15c
c000da40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da44:	e8 cf cd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000da49:	83 c4 10             	add    esp,0x10
c000da4c:	83 c4 0c             	add    esp,0xc
c000da4f:	c3                   	ret    

c000da50 <LogicalDisk::close(int, int, void*)>:
c000da50:	83 c8 ff             	or     eax,0xffffffff
c000da53:	c3                   	ret    

c000da54 <LogicalDisk::~LogicalDisk()>:
c000da54:	83 ec 0c             	sub    esp,0xc
c000da57:	ba d4 1c 02 c0       	mov    edx,0xc0021cd4
c000da5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da60:	89 10                	mov    DWORD PTR [eax],edx
c000da62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da66:	83 ec 0c             	sub    esp,0xc
c000da69:	50                   	push   eax
c000da6a:	e8 21 ee ff ff       	call   c000c890 <Device::~Device()>
c000da6f:	83 c4 10             	add    esp,0x10
c000da72:	90                   	nop
c000da73:	83 c4 0c             	add    esp,0xc
c000da76:	c3                   	ret    
c000da77:	90                   	nop

c000da78 <LogicalDisk::~LogicalDisk()>:
c000da78:	83 ec 0c             	sub    esp,0xc
c000da7b:	83 ec 0c             	sub    esp,0xc
c000da7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da82:	e8 cd ff ff ff       	call   c000da54 <LogicalDisk::~LogicalDisk()>
c000da87:	83 c4 10             	add    esp,0x10
c000da8a:	83 ec 08             	sub    esp,0x8
c000da8d:	68 78 01 00 00       	push   0x178
c000da92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da96:	e8 7d cd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000da9b:	83 c4 10             	add    esp,0x10
c000da9e:	83 c4 0c             	add    esp,0xc
c000daa1:	c3                   	ret    

c000daa2 <LogicalDisk::open(int, int, void*)>:
c000daa2:	83 ec 18             	sub    esp,0x18
c000daa5:	68 88 1c 02 c0       	push   0xc0021c88
c000daaa:	e8 38 3b 00 00       	call   c00115e7 <KePanic(char const*)>
c000daaf:	83 c8 ff             	or     eax,0xffffffff
c000dab2:	83 c4 1c             	add    esp,0x1c
c000dab5:	c3                   	ret    

c000dab6 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000dab6:	53                   	push   ebx
c000dab7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dabb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dabf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dac3:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000dac9:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000dacf:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000dad5:	77 10                	ja     c000dae7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000dad7:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000dadd:	89 d3                	mov    ebx,edx
c000dadf:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000dae5:	72 05                	jb     c000daec <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000dae7:	83 c8 ff             	or     eax,0xffffffff
c000daea:	89 c2                	mov    edx,eax
c000daec:	5b                   	pop    ebx
c000daed:	c3                   	ret    

c000daee <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000daee:	56                   	push   esi
c000daef:	83 c8 ff             	or     eax,0xffffffff
c000daf2:	53                   	push   ebx
c000daf3:	89 c2                	mov    edx,eax
c000daf5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000daf9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dafd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db01:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db07:	77 27                	ja     c000db30 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db09:	89 d8                	mov    eax,ebx
c000db0b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db11:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000db17:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db1c:	89 c2                	mov    edx,eax
c000db1e:	73 10                	jae    c000db30 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db20:	89 c8                	mov    eax,ecx
c000db22:	89 da                	mov    edx,ebx
c000db24:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000db2a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000db30:	5b                   	pop    ebx
c000db31:	5e                   	pop    esi
c000db32:	c3                   	ret    
c000db33:	90                   	nop

c000db34 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000db34:	83 ec 1c             	sub    esp,0x1c
c000db37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db47:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db4b:	89 04 24             	mov    DWORD PTR [esp],eax
c000db4e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db5a:	83 ec 08             	sub    esp,0x8
c000db5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db61:	50                   	push   eax
c000db62:	e8 bf ef ff ff       	call   c000cb26 <Device::Device(char const*)>
c000db67:	83 c4 10             	add    esp,0x10
c000db6a:	ba d4 1c 02 c0       	mov    edx,0xc0021cd4
c000db6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db73:	89 10                	mov    DWORD PTR [eax],edx
c000db75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db79:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000db80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db84:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000db8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db8f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000db96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db9a:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dba4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dbb0:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dbb6:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dbbc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbc0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dbc3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dbc7:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dbcd:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dbd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dbdb:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dbe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe5:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dbef:	90                   	nop
c000dbf0:	83 c4 1c             	add    esp,0x1c
c000dbf3:	c3                   	ret    

c000dbf4 <LogicalDisk::assignDriveLetter()>:
c000dbf4:	55                   	push   ebp
c000dbf5:	57                   	push   edi
c000dbf6:	56                   	push   esi
c000dbf7:	53                   	push   ebx
c000dbf8:	83 ec 14             	sub    esp,0x14
c000dbfb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dbff:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc05:	b0 41                	mov    al,0x41
c000dc07:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc0d:	84 d2                	test   dl,dl
c000dc0f:	75 02                	jne    c000dc13 <LogicalDisk::assignDriveLetter()+0x1f>
c000dc11:	b0 43                	mov    al,0x43
c000dc13:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dc19:	0f b6 ca             	movzx  ecx,dl
c000dc1c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dc20:	0f be e8             	movsx  ebp,al
c000dc23:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dc29:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc2d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dc31:	3c 43                	cmp    al,0x43
c000dc33:	75 10                	jne    c000dc45 <LogicalDisk::assignDriveLetter()+0x51>
c000dc35:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dc3c:	75 5a                	jne    c000dc98 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc3e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dc43:	75 53                	jne    c000dc98 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc45:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dc48:	ba 01 00 00 00       	mov    edx,0x1
c000dc4d:	89 34 24             	mov    DWORD PTR [esp],esi
c000dc50:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dc53:	d3 e2                	shl    edx,cl
c000dc55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc59:	89 d7                	mov    edi,edx
c000dc5b:	89 d6                	mov    esi,edx
c000dc5d:	c1 ff 1f             	sar    edi,0x1f
c000dc60:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dc64:	21 f9                	and    ecx,edi
c000dc66:	09 d1                	or     ecx,edx
c000dc68:	75 2e                	jne    c000dc98 <LogicalDisk::assignDriveLetter()+0xa4>
c000dc6a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dc6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc72:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dc78:	09 f2                	or     edx,esi
c000dc7a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc7d:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dc83:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dc8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc8e:	09 fa                	or     edx,edi
c000dc90:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dc96:	eb 0d                	jmp    c000dca5 <LogicalDisk::assignDriveLetter()+0xb1>
c000dc98:	8d 50 01             	lea    edx,[eax+0x1]
c000dc9b:	45                   	inc    ebp
c000dc9c:	88 d0                	mov    al,dl
c000dc9e:	80 fa 5b             	cmp    dl,0x5b
c000dca1:	75 8e                	jne    c000dc31 <LogicalDisk::assignDriveLetter()+0x3d>
c000dca3:	31 c0                	xor    eax,eax
c000dca5:	83 c4 14             	add    esp,0x14
c000dca8:	5b                   	pop    ebx
c000dca9:	5e                   	pop    esi
c000dcaa:	5f                   	pop    edi
c000dcab:	5d                   	pop    ebp
c000dcac:	c3                   	ret    
c000dcad:	90                   	nop

c000dcae <LogicalDisk::mount()>:
c000dcae:	56                   	push   esi
c000dcaf:	53                   	push   ebx
c000dcb0:	53                   	push   ebx
c000dcb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dcb5:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dcbb:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dcc5:	85 db                	test   ebx,ebx
c000dcc7:	74 27                	je     c000dcf0 <LogicalDisk::mount()+0x42>
c000dcc9:	51                   	push   ecx
c000dcca:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dcd1:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dcd3:	83 e8 41             	sub    eax,0x41
c000dcd6:	50                   	push   eax
c000dcd7:	56                   	push   esi
c000dcd8:	53                   	push   ebx
c000dcd9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dcdc:	83 c4 10             	add    esp,0x10
c000dcdf:	84 c0                	test   al,al
c000dce1:	74 08                	je     c000dceb <LogicalDisk::mount()+0x3d>
c000dce3:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dce9:	eb 07                	jmp    c000dcf2 <LogicalDisk::mount()+0x44>
c000dceb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dcee:	eb d5                	jmp    c000dcc5 <LogicalDisk::mount()+0x17>
c000dcf0:	31 c0                	xor    eax,eax
c000dcf2:	5a                   	pop    edx
c000dcf3:	5b                   	pop    ebx
c000dcf4:	5e                   	pop    esi
c000dcf5:	c3                   	ret    

c000dcf6 <LogicalDisk::unmount()>:
c000dcf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcfa:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd04:	c3                   	ret    
c000dd05:	90                   	nop

c000dd06 <LogicalDisk::eject()>:
c000dd06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd0a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd10:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd16:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dd19:	90                   	nop

c000dd1a <LogicalDisk::unassignDriveLetter()>:
c000dd1a:	57                   	push   edi
c000dd1b:	56                   	push   esi
c000dd1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd20:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dd27:	85 c9                	test   ecx,ecx
c000dd29:	75 0f                	jne    c000dd3a <LogicalDisk::unassignDriveLetter()+0x20>
c000dd2b:	c7 44 24 0c ac 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021cac
c000dd33:	5e                   	pop    esi
c000dd34:	5f                   	pop    edi
c000dd35:	e9 ad 38 00 00       	jmp    c00115e7 <KePanic(char const*)>
c000dd3a:	83 e9 41             	sub    ecx,0x41
c000dd3d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dd44:	b8 01 00 00 00       	mov    eax,0x1
c000dd49:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dd54:	d3 e0                	shl    eax,cl
c000dd56:	89 c7                	mov    edi,eax
c000dd58:	f7 d0                	not    eax
c000dd5a:	c1 ff 1f             	sar    edi,0x1f
c000dd5d:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000dd63:	89 fe                	mov    esi,edi
c000dd65:	f7 d6                	not    esi
c000dd67:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000dd6d:	5e                   	pop    esi
c000dd6e:	5f                   	pop    edi
c000dd6f:	c3                   	ret    

c000dd70 <LogicalDisk::read(unsigned long long, int, void*)>:
c000dd70:	57                   	push   edi
c000dd71:	56                   	push   esi
c000dd72:	53                   	push   ebx
c000dd73:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dd77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dd7b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dd7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dd83:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dd89:	77 41                	ja     c000ddcc <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000dd8b:	99                   	cdq    
c000dd8c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dd92:	01 c8                	add    eax,ecx
c000dd94:	11 da                	adc    edx,ebx
c000dd96:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dd9c:	19 d7                	sbb    edi,edx
c000dd9e:	72 33                	jb     c000ddd3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000dda0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dda6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ddac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ddb0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ddb4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ddba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ddc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddc4:	5b                   	pop    ebx
c000ddc5:	5e                   	pop    esi
c000ddc6:	5f                   	pop    edi
c000ddc7:	e9 c6 0a 00 00       	jmp    c000e892 <VCache::read(unsigned long long, int, void*)>
c000ddcc:	b8 05 00 00 00       	mov    eax,0x5
c000ddd1:	eb 05                	jmp    c000ddd8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ddd3:	b8 07 00 00 00       	mov    eax,0x7
c000ddd8:	5b                   	pop    ebx
c000ddd9:	5e                   	pop    esi
c000ddda:	5f                   	pop    edi
c000dddb:	c3                   	ret    

c000dddc <LogicalDisk::write(unsigned long long, int, void*)>:
c000dddc:	57                   	push   edi
c000dddd:	56                   	push   esi
c000ddde:	53                   	push   ebx
c000dddf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dde3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dde7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddef:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ddf5:	77 41                	ja     c000de38 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ddf7:	99                   	cdq    
c000ddf8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ddfe:	01 c8                	add    eax,ecx
c000de00:	11 da                	adc    edx,ebx
c000de02:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de08:	19 d7                	sbb    edi,edx
c000de0a:	72 33                	jb     c000de3f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de0c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de12:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de18:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de1c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de20:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de26:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de30:	5b                   	pop    ebx
c000de31:	5e                   	pop    esi
c000de32:	5f                   	pop    edi
c000de33:	e9 6c 09 00 00       	jmp    c000e7a4 <VCache::write(unsigned long long, int, void*)>
c000de38:	b8 05 00 00 00       	mov    eax,0x5
c000de3d:	eb 05                	jmp    c000de44 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000de3f:	b8 07 00 00 00       	mov    eax,0x7
c000de44:	5b                   	pop    ebx
c000de45:	5e                   	pop    esi
c000de46:	5f                   	pop    edi
c000de47:	c3                   	ret    

c000de48 <Mouse::Mouse(char const*)>:
c000de48:	83 ec 0c             	sub    esp,0xc
c000de4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de4f:	83 ec 08             	sub    esp,0x8
c000de52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de56:	50                   	push   eax
c000de57:	e8 ca ec ff ff       	call   c000cb26 <Device::Device(char const*)>
c000de5c:	83 c4 10             	add    esp,0x10
c000de5f:	ba 00 1d 02 c0       	mov    edx,0xc0021d00
c000de64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de68:	89 10                	mov    DWORD PTR [eax],edx
c000de6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de6e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000de78:	90                   	nop
c000de79:	83 c4 0c             	add    esp,0xc
c000de7c:	c3                   	ret    
c000de7d:	90                   	nop
c000de7e:	66 90                	xchg   ax,ax

c000de80 <Mouse::~Mouse()>:
c000de80:	83 ec 0c             	sub    esp,0xc
c000de83:	ba 00 1d 02 c0       	mov    edx,0xc0021d00
c000de88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de8c:	89 10                	mov    DWORD PTR [eax],edx
c000de8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de92:	83 ec 0c             	sub    esp,0xc
c000de95:	50                   	push   eax
c000de96:	e8 f5 e9 ff ff       	call   c000c890 <Device::~Device()>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	90                   	nop
c000de9f:	83 c4 0c             	add    esp,0xc
c000dea2:	c3                   	ret    
c000dea3:	90                   	nop

c000dea4 <Mouse::~Mouse()>:
c000dea4:	83 ec 0c             	sub    esp,0xc
c000dea7:	83 ec 0c             	sub    esp,0xc
c000deaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deae:	e8 cd ff ff ff       	call   c000de80 <Mouse::~Mouse()>
c000deb3:	83 c4 10             	add    esp,0x10
c000deb6:	83 ec 08             	sub    esp,0x8
c000deb9:	68 58 01 00 00       	push   0x158
c000debe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec2:	e8 51 c9 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dec7:	83 c4 10             	add    esp,0x10
c000deca:	83 c4 0c             	add    esp,0xc
c000decd:	c3                   	ret    

c000dece <NIC::getMAC()>:
c000dece:	31 c0                	xor    eax,eax
c000ded0:	31 d2                	xor    edx,edx
c000ded2:	c3                   	ret    
c000ded3:	90                   	nop

c000ded4 <NIC::write(int, unsigned char*, int*)>:
c000ded4:	b8 01 00 00 00       	mov    eax,0x1
c000ded9:	c3                   	ret    

c000deda <NIC::NIC(char const*)>:
c000deda:	83 ec 0c             	sub    esp,0xc
c000dedd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee1:	83 ec 08             	sub    esp,0x8
c000dee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dee8:	50                   	push   eax
c000dee9:	e8 38 ec ff ff       	call   c000cb26 <Device::Device(char const*)>
c000deee:	83 c4 10             	add    esp,0x10
c000def1:	ba 2c 1d 02 c0       	mov    edx,0xc0021d2c
c000def6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000defa:	89 10                	mov    DWORD PTR [eax],edx
c000defc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df00:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df0a:	90                   	nop
c000df0b:	83 c4 0c             	add    esp,0xc
c000df0e:	c3                   	ret    
c000df0f:	90                   	nop

c000df10 <NIC::~NIC()>:
c000df10:	83 ec 0c             	sub    esp,0xc
c000df13:	ba 2c 1d 02 c0       	mov    edx,0xc0021d2c
c000df18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df1c:	89 10                	mov    DWORD PTR [eax],edx
c000df1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df22:	83 ec 0c             	sub    esp,0xc
c000df25:	50                   	push   eax
c000df26:	e8 65 e9 ff ff       	call   c000c890 <Device::~Device()>
c000df2b:	83 c4 10             	add    esp,0x10
c000df2e:	90                   	nop
c000df2f:	83 c4 0c             	add    esp,0xc
c000df32:	c3                   	ret    
c000df33:	90                   	nop

c000df34 <NIC::~NIC()>:
c000df34:	83 ec 0c             	sub    esp,0xc
c000df37:	83 ec 0c             	sub    esp,0xc
c000df3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df3e:	e8 cd ff ff ff       	call   c000df10 <NIC::~NIC()>
c000df43:	83 c4 10             	add    esp,0x10
c000df46:	83 ec 08             	sub    esp,0x8
c000df49:	68 58 01 00 00       	push   0x158
c000df4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df52:	e8 c1 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000df57:	83 c4 10             	add    esp,0x10
c000df5a:	83 c4 0c             	add    esp,0xc
c000df5d:	c3                   	ret    

c000df5e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000df5e:	55                   	push   ebp
c000df5f:	57                   	push   edi
c000df60:	56                   	push   esi
c000df61:	53                   	push   ebx
c000df62:	81 ec 28 01 00 00    	sub    esp,0x128
c000df68:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000df6f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000df76:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000df7d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000df84:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df88:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df8c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000df93:	e8 8a ec ff ff       	call   c000cc22 <Device::getName()>
c000df98:	5a                   	pop    edx
c000df99:	59                   	pop    ecx
c000df9a:	50                   	push   eax
c000df9b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000df9f:	55                   	push   ebp
c000dfa0:	e8 9b 26 ff ff       	call   c0000640 <strcpy>
c000dfa5:	5b                   	pop    ebx
c000dfa6:	58                   	pop    eax
c000dfa7:	68 58 1d 02 c0       	push   0xc0021d58
c000dfac:	55                   	push   ebp
c000dfad:	e8 8e 28 ff ff       	call   c0000840 <strcat>
c000dfb2:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dfb9:	e8 f8 9a ff ff       	call   c0007ab6 <malloc>
c000dfbe:	83 c4 0c             	add    esp,0xc
c000dfc1:	89 c3                	mov    ebx,eax
c000dfc3:	57                   	push   edi
c000dfc4:	56                   	push   esi
c000dfc5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dfc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dfcd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dfd4:	55                   	push   ebp
c000dfd5:	50                   	push   eax
c000dfd6:	e8 59 fb ff ff       	call   c000db34 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dfdb:	83 c4 14             	add    esp,0x14
c000dfde:	53                   	push   ebx
c000dfdf:	e8 10 fc ff ff       	call   c000dbf4 <LogicalDisk::assignDriveLetter()>
c000dfe4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dfe7:	e8 c2 fc ff ff       	call   c000dcae <LogicalDisk::mount()>
c000dfec:	58                   	pop    eax
c000dfed:	5a                   	pop    edx
c000dfee:	53                   	push   ebx
c000dfef:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dff6:	e8 93 e9 ff ff       	call   c000c98e <Device::addChild(Device*)>
c000dffb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e001:	5b                   	pop    ebx
c000e002:	5e                   	pop    esi
c000e003:	5f                   	pop    edi
c000e004:	5d                   	pop    ebp
c000e005:	c3                   	ret    

c000e006 <createPartitionsForDisk(PhysicalDisk*)>:
c000e006:	55                   	push   ebp
c000e007:	57                   	push   edi
c000e008:	56                   	push   esi
c000e009:	53                   	push   ebx
c000e00a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e010:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e017:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e01d:	3d 00 02 00 00       	cmp    eax,0x200
c000e022:	74 27                	je     c000e04b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e024:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e02a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e030:	83 ec 10             	sub    esp,0x10
c000e033:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e037:	99                   	cdq    
c000e038:	c1 e6 0a             	shl    esi,0xa
c000e03b:	52                   	push   edx
c000e03c:	89 fd                	mov    ebp,edi
c000e03e:	50                   	push   eax
c000e03f:	55                   	push   ebp
c000e040:	56                   	push   esi
c000e041:	e8 ba 16 01 00       	call   c001f700 <__udivdi3>
c000e046:	e9 b9 00 00 00       	jmp    c000e104 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e04b:	83 ec 0c             	sub    esp,0xc
c000e04e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e050:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e054:	56                   	push   esi
c000e055:	6a 01                	push   0x1
c000e057:	6a 00                	push   0x0
c000e059:	6a 00                	push   0x0
c000e05b:	53                   	push   ebx
c000e05c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e05f:	83 c4 20             	add    esp,0x20
c000e062:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e06a:	75 0a                	jne    c000e076 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e06c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e074:	74 2c                	je     c000e0a2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e076:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e07c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e082:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e088:	83 ec 10             	sub    esp,0x10
c000e08b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e08f:	89 f7                	mov    edi,esi
c000e091:	c1 e0 0a             	shl    eax,0xa
c000e094:	c1 ff 1f             	sar    edi,0x1f
c000e097:	57                   	push   edi
c000e098:	56                   	push   esi
c000e099:	52                   	push   edx
c000e09a:	50                   	push   eax
c000e09b:	e8 60 16 01 00       	call   c001f700 <__udivdi3>
c000e0a0:	eb 62                	jmp    c000e104 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0a2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e0a9:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e0b0:	89 cf                	mov    edi,ecx
c000e0b2:	83 e2 7f             	and    edx,0x7f
c000e0b5:	83 e7 7f             	and    edi,0x7f
c000e0b8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e0bf:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e0c2:	83 e0 7f             	and    eax,0x7f
c000e0c5:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e0c8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e0cf:	83 e0 7f             	and    eax,0x7f
c000e0d2:	01 d0                	add    eax,edx
c000e0d4:	89 c5                	mov    ebp,eax
c000e0d6:	84 c0                	test   al,al
c000e0d8:	74 41                	je     c000e11b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e0da:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0e0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0e6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0ec:	83 ec 10             	sub    esp,0x10
c000e0ef:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0f3:	89 f7                	mov    edi,esi
c000e0f5:	c1 e0 0a             	shl    eax,0xa
c000e0f8:	c1 ff 1f             	sar    edi,0x1f
c000e0fb:	57                   	push   edi
c000e0fc:	56                   	push   esi
c000e0fd:	52                   	push   edx
c000e0fe:	50                   	push   eax
c000e0ff:	e8 fc 15 01 00       	call   c001f700 <__udivdi3>
c000e104:	83 c4 14             	add    esp,0x14
c000e107:	52                   	push   edx
c000e108:	50                   	push   eax
c000e109:	6a 00                	push   0x0
c000e10b:	6a 00                	push   0x0
c000e10d:	53                   	push   ebx
c000e10e:	e8 4b fe ff ff       	call   c000df5e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e113:	83 c4 20             	add    esp,0x20
c000e116:	e9 73 01 00 00       	jmp    c000e28e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e11b:	89 f0                	mov    eax,esi
c000e11d:	31 c9                	xor    ecx,ecx
c000e11f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e126:	75 02                	jne    c000e12a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e128:	89 cd                	mov    ebp,ecx
c000e12a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e131:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000e138:	c1 e2 08             	shl    edx,0x8
c000e13b:	c1 e6 10             	shl    esi,0x10
c000e13e:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e146:	09 f2                	or     edx,esi
c000e148:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e150:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000e157:	83 c0 10             	add    eax,0x10
c000e15a:	09 f2                	or     edx,esi
c000e15c:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e163:	c1 e6 18             	shl    esi,0x18
c000e166:	09 f2                	or     edx,esi
c000e168:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e16f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e173:	c1 e6 10             	shl    esi,0x10
c000e176:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e17d:	c1 e2 08             	shl    edx,0x8
c000e180:	09 f2                	or     edx,esi
c000e182:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e189:	09 f2                	or     edx,esi
c000e18b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e192:	c1 e6 18             	shl    esi,0x18
c000e195:	09 f2                	or     edx,esi
c000e197:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e19b:	41                   	inc    ecx
c000e19c:	83 f9 04             	cmp    ecx,0x4
c000e19f:	0f 85 7a ff ff ff    	jne    c000e11f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e1a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1a9:	83 f0 01             	xor    eax,0x1
c000e1ac:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e1b0:	75 4f                	jne    c000e201 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1b6:	83 f0 01             	xor    eax,0x1
c000e1b9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e1bd:	75 42                	jne    c000e201 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1bf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e1c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e1cf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e1d5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e1db:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e1e1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e1e5:	89 f7                	mov    edi,esi
c000e1e7:	c1 e0 0a             	shl    eax,0xa
c000e1ea:	c1 ff 1f             	sar    edi,0x1f
c000e1ed:	57                   	push   edi
c000e1ee:	56                   	push   esi
c000e1ef:	52                   	push   edx
c000e1f0:	50                   	push   eax
c000e1f1:	e8 0a 15 01 00       	call   c001f700 <__udivdi3>
c000e1f6:	83 c4 10             	add    esp,0x10
c000e1f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e1fd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e201:	89 e8                	mov    eax,ebp
c000e203:	0f b6 e8             	movzx  ebp,al
c000e206:	85 ed                	test   ebp,ebp
c000e208:	74 50                	je     c000e25a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e20a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e20e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e212:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e216:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e21a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e21e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e222:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e226:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e22a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e22e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e232:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e236:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e23a:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e23e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e242:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e246:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e24a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e24e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e252:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e256:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e25a:	31 ed                	xor    ebp,ebp
c000e25c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e260:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e264:	89 f8                	mov    eax,edi
c000e266:	09 f0                	or     eax,esi
c000e268:	74 1e                	je     c000e288 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e26a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e26e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e272:	89 d1                	mov    ecx,edx
c000e274:	09 c1                	or     ecx,eax
c000e276:	74 10                	je     c000e288 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e278:	83 ec 0c             	sub    esp,0xc
c000e27b:	57                   	push   edi
c000e27c:	56                   	push   esi
c000e27d:	52                   	push   edx
c000e27e:	50                   	push   eax
c000e27f:	53                   	push   ebx
c000e280:	e8 d9 fc ff ff       	call   c000df5e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e285:	83 c4 20             	add    esp,0x20
c000e288:	45                   	inc    ebp
c000e289:	83 fd 04             	cmp    ebp,0x4
c000e28c:	75 ce                	jne    c000e25c <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e28e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e294:	5b                   	pop    ebx
c000e295:	5e                   	pop    esi
c000e296:	5f                   	pop    edi
c000e297:	5d                   	pop    ebp
c000e298:	c3                   	ret    
c000e299:	66 90                	xchg   ax,ax
c000e29b:	90                   	nop

c000e29c <Serial::Serial(char const*)>:
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2a3:	83 ec 08             	sub    esp,0x8
c000e2a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2aa:	50                   	push   eax
c000e2ab:	e8 76 e8 ff ff       	call   c000cb26 <Device::Device(char const*)>
c000e2b0:	83 c4 10             	add    esp,0x10
c000e2b3:	ba 6c 1d 02 c0       	mov    edx,0xc0021d6c
c000e2b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2bc:	89 10                	mov    DWORD PTR [eax],edx
c000e2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2c2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e2cc:	90                   	nop
c000e2cd:	83 c4 0c             	add    esp,0xc
c000e2d0:	c3                   	ret    
c000e2d1:	90                   	nop
c000e2d2:	66 90                	xchg   ax,ax

c000e2d4 <Serial::~Serial()>:
c000e2d4:	83 ec 0c             	sub    esp,0xc
c000e2d7:	ba 6c 1d 02 c0       	mov    edx,0xc0021d6c
c000e2dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e0:	89 10                	mov    DWORD PTR [eax],edx
c000e2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e6:	83 ec 0c             	sub    esp,0xc
c000e2e9:	50                   	push   eax
c000e2ea:	e8 a1 e5 ff ff       	call   c000c890 <Device::~Device()>
c000e2ef:	83 c4 10             	add    esp,0x10
c000e2f2:	90                   	nop
c000e2f3:	83 c4 0c             	add    esp,0xc
c000e2f6:	c3                   	ret    
c000e2f7:	90                   	nop

c000e2f8 <Serial::~Serial()>:
c000e2f8:	83 ec 0c             	sub    esp,0xc
c000e2fb:	83 ec 0c             	sub    esp,0xc
c000e2fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e302:	e8 cd ff ff ff       	call   c000e2d4 <Serial::~Serial()>
c000e307:	83 c4 10             	add    esp,0x10
c000e30a:	83 ec 08             	sub    esp,0x8
c000e30d:	68 58 01 00 00       	push   0x158
c000e312:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e316:	e8 fd c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e31b:	83 c4 10             	add    esp,0x10
c000e31e:	83 c4 0c             	add    esp,0xc
c000e321:	c3                   	ret    
c000e322:	66 90                	xchg   ax,ax

c000e324 <Timer::Timer(char const*)>:
c000e324:	83 ec 0c             	sub    esp,0xc
c000e327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32b:	83 ec 08             	sub    esp,0x8
c000e32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e332:	50                   	push   eax
c000e333:	e8 ee e7 ff ff       	call   c000cb26 <Device::Device(char const*)>
c000e338:	83 c4 10             	add    esp,0x10
c000e33b:	ba b0 1d 02 c0       	mov    edx,0xc0021db0
c000e340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e344:	89 10                	mov    DWORD PTR [eax],edx
c000e346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e354:	90                   	nop
c000e355:	83 c4 0c             	add    esp,0xc
c000e358:	c3                   	ret    
c000e359:	90                   	nop
c000e35a:	66 90                	xchg   ax,ax

c000e35c <Timer::~Timer()>:
c000e35c:	83 ec 0c             	sub    esp,0xc
c000e35f:	ba b0 1d 02 c0       	mov    edx,0xc0021db0
c000e364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e368:	89 10                	mov    DWORD PTR [eax],edx
c000e36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36e:	83 ec 0c             	sub    esp,0xc
c000e371:	50                   	push   eax
c000e372:	e8 19 e5 ff ff       	call   c000c890 <Device::~Device()>
c000e377:	83 c4 10             	add    esp,0x10
c000e37a:	90                   	nop
c000e37b:	83 c4 0c             	add    esp,0xc
c000e37e:	c3                   	ret    
c000e37f:	90                   	nop

c000e380 <Timer::~Timer()>:
c000e380:	83 ec 0c             	sub    esp,0xc
c000e383:	83 ec 0c             	sub    esp,0xc
c000e386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e38a:	e8 cd ff ff ff       	call   c000e35c <Timer::~Timer()>
c000e38f:	83 c4 10             	add    esp,0x10
c000e392:	83 ec 08             	sub    esp,0x8
c000e395:	68 5c 01 00 00       	push   0x15c
c000e39a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e39e:	e8 75 c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e3a3:	83 c4 10             	add    esp,0x10
c000e3a6:	83 c4 0c             	add    esp,0xc
c000e3a9:	c3                   	ret    

c000e3aa <Timer::read()>:
c000e3aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e3b4:	c3                   	ret    

c000e3b5 <setupTimer(int)>:
c000e3b5:	53                   	push   ebx
c000e3b6:	83 ec 14             	sub    esp,0x14
c000e3b9:	68 5c 01 00 00       	push   0x15c
c000e3be:	e8 f3 96 ff ff       	call   c0007ab6 <malloc>
c000e3c3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3c6:	89 c3                	mov    ebx,eax
c000e3c8:	e8 97 0b 01 00       	call   c001ef64 <PIT::PIT()>
c000e3cd:	58                   	pop    eax
c000e3ce:	5a                   	pop    edx
c000e3cf:	53                   	push   ebx
c000e3d0:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e3d6:	e8 b3 e5 ff ff       	call   c000c98e <Device::addChild(Device*)>
c000e3db:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e3dd:	6a 00                	push   0x0
c000e3df:	6a 00                	push   0x0
c000e3e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e3e5:	53                   	push   ebx
c000e3e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3e9:	89 d8                	mov    eax,ebx
c000e3eb:	83 c4 28             	add    esp,0x28
c000e3ee:	5b                   	pop    ebx
c000e3ef:	c3                   	ret    

c000e3f0 <timerHandler(unsigned int)>:
c000e3f0:	56                   	push   esi
c000e3f1:	53                   	push   ebx
c000e3f2:	51                   	push   ecx
c000e3f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f7:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e3fd:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e404:	0f 84 4a 01 00 00    	je     c000e554 <timerHandler(unsigned int)+0x164>
c000e40a:	fa                   	cli    
c000e40b:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e411:	83 ec 0c             	sub    esp,0xc
c000e414:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e41a:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e41f:	e8 ac 18 01 00       	call   c001fcd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e424:	83 c4 10             	add    esp,0x10
c000e427:	84 c0                	test   al,al
c000e429:	0f 85 a1 00 00 00    	jne    c000e4d0 <timerHandler(unsigned int)+0xe0>
c000e42f:	83 ec 0c             	sub    esp,0xc
c000e432:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e437:	e8 b0 18 01 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	89 c6                	mov    esi,eax
c000e441:	8d 76 00             	lea    esi,[esi+0x0]
c000e444:	83 ec 0c             	sub    esp,0xc
c000e447:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e44c:	e8 9b 18 01 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e451:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e458:	89 c3                	mov    ebx,eax
c000e45a:	e8 95 18 01 00       	call   c001fcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e45f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e462:	83 c4 10             	add    esp,0x10
c000e465:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e46b:	77 23                	ja     c000e490 <timerHandler(unsigned int)+0xa0>
c000e46d:	83 ec 0c             	sub    esp,0xc
c000e470:	53                   	push   ebx
c000e471:	e8 2a 81 00 00       	call   c00165a0 <unblockTask(ThreadControlBlock*)>
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	39 de                	cmp    esi,ebx
c000e47b:	75 27                	jne    c000e4a4 <timerHandler(unsigned int)+0xb4>
c000e47d:	83 ec 0c             	sub    esp,0xc
c000e480:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e485:	e8 62 18 01 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e48a:	89 c6                	mov    esi,eax
c000e48c:	eb 12                	jmp    c000e4a0 <timerHandler(unsigned int)+0xb0>
c000e48e:	66 90                	xchg   ax,ax
c000e490:	52                   	push   edx
c000e491:	52                   	push   edx
c000e492:	53                   	push   ebx
c000e493:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e498:	e8 13 19 01 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e49d:	8d 76 00             	lea    esi,[esi+0x0]
c000e4a0:	83 c4 10             	add    esp,0x10
c000e4a3:	90                   	nop
c000e4a4:	83 ec 0c             	sub    esp,0xc
c000e4a7:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4ac:	e8 1f 18 01 00       	call   c001fcd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4b1:	83 c4 10             	add    esp,0x10
c000e4b4:	84 c0                	test   al,al
c000e4b6:	75 18                	jne    c000e4d0 <timerHandler(unsigned int)+0xe0>
c000e4b8:	83 ec 0c             	sub    esp,0xc
c000e4bb:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4c0:	e8 27 18 01 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4c5:	83 c4 10             	add    esp,0x10
c000e4c8:	39 f0                	cmp    eax,esi
c000e4ca:	0f 85 74 ff ff ff    	jne    c000e444 <timerHandler(unsigned int)+0x54>
c000e4d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e4d5:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e4d9:	74 41                	je     c000e51c <timerHandler(unsigned int)+0x12c>
c000e4db:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e4e2:	74 38                	je     c000e51c <timerHandler(unsigned int)+0x12c>
c000e4e4:	fa                   	cli    
c000e4e5:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e4eb:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e4f0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e4f6:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e4f9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e4ff:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e502:	72 08                	jb     c000e50c <timerHandler(unsigned int)+0x11c>
c000e504:	e8 7f 7b 00 00       	call   c0016088 <schedule()>
c000e509:	8d 76 00             	lea    esi,[esi+0x0]
c000e50c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e511:	48                   	dec    eax
c000e512:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e517:	75 03                	jne    c000e51c <timerHandler(unsigned int)+0x12c>
c000e519:	fb                   	sti    
c000e51a:	66 90                	xchg   ax,ax
c000e51c:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e521:	48                   	dec    eax
c000e522:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e527:	75 1b                	jne    c000e544 <timerHandler(unsigned int)+0x154>
c000e529:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e530:	74 12                	je     c000e544 <timerHandler(unsigned int)+0x154>
c000e532:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e53c:	e8 47 7b 00 00       	call   c0016088 <schedule()>
c000e541:	8d 76 00             	lea    esi,[esi+0x0]
c000e544:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e549:	48                   	dec    eax
c000e54a:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e54f:	75 03                	jne    c000e554 <timerHandler(unsigned int)+0x164>
c000e551:	fb                   	sti    
c000e552:	66 90                	xchg   ax,ax
c000e554:	58                   	pop    eax
c000e555:	5b                   	pop    ebx
c000e556:	5e                   	pop    esi
c000e557:	c3                   	ret    

c000e558 <VCache::VCache(PhysicalDisk*)>:
c000e558:	53                   	push   ebx
c000e559:	83 ec 18             	sub    esp,0x18
c000e55c:	ba e0 1d 02 c0       	mov    edx,0xc0021de0
c000e561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e565:	89 10                	mov    DWORD PTR [eax],edx
c000e567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e56b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e572:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e576:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e57d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e581:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e588:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e58f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e593:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e59a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e5a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5a5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e5ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5b0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e5b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5b8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e5bf:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e5c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ca:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e5ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5d2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e5d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5da:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e5de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e5e9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e5f1:	83 ec 0c             	sub    esp,0xc
c000e5f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5f8:	e8 b9 94 ff ff       	call   c0007ab6 <malloc>
c000e5fd:	83 c4 10             	add    esp,0x10
c000e600:	89 c3                	mov    ebx,eax
c000e602:	83 ec 0c             	sub    esp,0xc
c000e605:	53                   	push   ebx
c000e606:	e8 19 78 00 00       	call   c0015e24 <Mutex::Mutex()>
c000e60b:	83 c4 10             	add    esp,0x10
c000e60e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e612:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e615:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e619:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e61d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e624:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e62b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e62f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e635:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e639:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e63c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e640:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e646:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e64c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e650:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e653:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e65a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e65e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e662:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e668:	05 00 02 00 00       	add    eax,0x200
c000e66d:	c1 e0 03             	shl    eax,0x3
c000e670:	83 ec 0c             	sub    esp,0xc
c000e673:	50                   	push   eax
c000e674:	e8 3d 94 ff ff       	call   c0007ab6 <malloc>
c000e679:	83 c4 10             	add    esp,0x10
c000e67c:	89 c2                	mov    edx,eax
c000e67e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e682:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e685:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e689:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e694:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e698:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e69c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6a2:	89 d0                	mov    eax,edx
c000e6a4:	c1 e0 02             	shl    eax,0x2
c000e6a7:	01 d0                	add    eax,edx
c000e6a9:	c1 e0 04             	shl    eax,0x4
c000e6ac:	83 ec 0c             	sub    esp,0xc
c000e6af:	50                   	push   eax
c000e6b0:	e8 01 94 ff ff       	call   c0007ab6 <malloc>
c000e6b5:	83 c4 10             	add    esp,0x10
c000e6b8:	89 c2                	mov    edx,eax
c000e6ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6be:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e6c1:	90                   	nop
c000e6c2:	83 c4 18             	add    esp,0x18
c000e6c5:	5b                   	pop    ebx
c000e6c6:	c3                   	ret    
c000e6c7:	90                   	nop

c000e6c8 <VCache::invalidateReadBuffer()>:
c000e6c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6cc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e6d2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e6d6:	c3                   	ret    
c000e6d7:	90                   	nop

c000e6d8 <VCache::writeWriteBuffer()>:
c000e6d8:	53                   	push   ebx
c000e6d9:	83 ec 08             	sub    esp,0x8
c000e6dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6e0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e6e4:	74 1e                	je     c000e704 <VCache::writeWriteBuffer()+0x2c>
c000e6e6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e6e9:	83 ec 0c             	sub    esp,0xc
c000e6ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6ee:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e6f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e6f4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e6f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e6fa:	50                   	push   eax
c000e6fb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e6fe:	83 c4 20             	add    esp,0x20
c000e701:	8d 76 00             	lea    esi,[esi+0x0]
c000e704:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e70b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e712:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e716:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e71d:	83 c4 08             	add    esp,0x8
c000e720:	5b                   	pop    ebx
c000e721:	c3                   	ret    
c000e722:	66 90                	xchg   ax,ax

c000e724 <VCache::~VCache()>:
c000e724:	83 ec 0c             	sub    esp,0xc
c000e727:	ba e0 1d 02 c0       	mov    edx,0xc0021de0
c000e72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e730:	89 10                	mov    DWORD PTR [eax],edx
c000e732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e736:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e739:	0f b6 c0             	movzx  eax,al
c000e73c:	85 c0                	test   eax,eax
c000e73e:	74 10                	je     c000e750 <VCache::~VCache()+0x2c>
c000e740:	83 ec 0c             	sub    esp,0xc
c000e743:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e747:	e8 8c ff ff ff       	call   c000e6d8 <VCache::writeWriteBuffer()>
c000e74c:	83 c4 10             	add    esp,0x10
c000e74f:	90                   	nop
c000e750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e754:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e757:	83 ec 0c             	sub    esp,0xc
c000e75a:	50                   	push   eax
c000e75b:	e8 66 93 ff ff       	call   c0007ac6 <free>
c000e760:	83 c4 10             	add    esp,0x10
c000e763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e767:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e76a:	83 ec 0c             	sub    esp,0xc
c000e76d:	50                   	push   eax
c000e76e:	e8 53 93 ff ff       	call   c0007ac6 <free>
c000e773:	83 c4 10             	add    esp,0x10
c000e776:	90                   	nop
c000e777:	83 c4 0c             	add    esp,0xc
c000e77a:	c3                   	ret    
c000e77b:	90                   	nop

c000e77c <VCache::~VCache()>:
c000e77c:	83 ec 0c             	sub    esp,0xc
c000e77f:	83 ec 0c             	sub    esp,0xc
c000e782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e786:	e8 99 ff ff ff       	call   c000e724 <VCache::~VCache()>
c000e78b:	83 c4 10             	add    esp,0x10
c000e78e:	83 ec 08             	sub    esp,0x8
c000e791:	6a 44                	push   0x44
c000e793:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e797:	e8 7c c0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e79c:	83 c4 10             	add    esp,0x10
c000e79f:	83 c4 0c             	add    esp,0xc
c000e7a2:	c3                   	ret    
c000e7a3:	90                   	nop

c000e7a4 <VCache::write(unsigned long long, int, void*)>:
c000e7a4:	55                   	push   ebp
c000e7a5:	57                   	push   edi
c000e7a6:	56                   	push   esi
c000e7a7:	53                   	push   ebx
c000e7a8:	83 ec 1c             	sub    esp,0x1c
c000e7ab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e7af:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7b3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e7b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7bb:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e7bf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e7c3:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e7c7:	74 07                	je     c000e7d0 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e7c9:	53                   	push   ebx
c000e7ca:	e8 f9 fe ff ff       	call   c000e6c8 <VCache::invalidateReadBuffer()>
c000e7cf:	58                   	pop    eax
c000e7d0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e7d4:	74 62                	je     c000e838 <VCache::write(unsigned long long, int, void*)+0x94>
c000e7d6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e7d9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e7dd:	99                   	cdq    
c000e7de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7e2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e7e5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e7e8:	31 c1                	xor    ecx,eax
c000e7ea:	89 d0                	mov    eax,edx
c000e7ec:	89 ca                	mov    edx,ecx
c000e7ee:	31 e8                	xor    eax,ebp
c000e7f0:	09 c2                	or     edx,eax
c000e7f2:	75 38                	jne    c000e82c <VCache::write(unsigned long long, int, void*)+0x88>
c000e7f4:	83 ff 01             	cmp    edi,0x1
c000e7f7:	75 33                	jne    c000e82c <VCache::write(unsigned long long, int, void*)+0x88>
c000e7f9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e7fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e800:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e806:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e809:	0f af c8             	imul   ecx,eax
c000e80c:	01 cf                	add    edi,ecx
c000e80e:	89 c1                	mov    ecx,eax
c000e810:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e812:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e815:	40                   	inc    eax
c000e816:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e819:	83 f8 50             	cmp    eax,0x50
c000e81c:	75 6a                	jne    c000e888 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e81e:	83 ec 0c             	sub    esp,0xc
c000e821:	53                   	push   ebx
c000e822:	e8 b1 fe ff ff       	call   c000e6d8 <VCache::writeWriteBuffer()>
c000e827:	83 c4 10             	add    esp,0x10
c000e82a:	eb 5c                	jmp    c000e888 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e82c:	83 ec 0c             	sub    esp,0xc
c000e82f:	53                   	push   ebx
c000e830:	e8 a3 fe ff ff       	call   c000e6d8 <VCache::writeWriteBuffer()>
c000e835:	83 c4 10             	add    esp,0x10
c000e838:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e83b:	83 ff 4f             	cmp    edi,0x4f
c000e83e:	7f 20                	jg     c000e860 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e840:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e843:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e847:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e84a:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e84d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e851:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e854:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e85a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e85c:	eb 2a                	jmp    c000e888 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e85e:	66 90                	xchg   ax,ax
c000e860:	8b 10                	mov    edx,DWORD PTR [eax]
c000e862:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e866:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e86a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e86e:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e872:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e876:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e87a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e87d:	83 c4 1c             	add    esp,0x1c
c000e880:	5b                   	pop    ebx
c000e881:	5e                   	pop    esi
c000e882:	5f                   	pop    edi
c000e883:	5d                   	pop    ebp
c000e884:	ff e0                	jmp    eax
c000e886:	66 90                	xchg   ax,ax
c000e888:	83 c4 1c             	add    esp,0x1c
c000e88b:	31 c0                	xor    eax,eax
c000e88d:	5b                   	pop    ebx
c000e88e:	5e                   	pop    esi
c000e88f:	5f                   	pop    edi
c000e890:	5d                   	pop    ebp
c000e891:	c3                   	ret    

c000e892 <VCache::read(unsigned long long, int, void*)>:
c000e892:	55                   	push   ebp
c000e893:	57                   	push   edi
c000e894:	56                   	push   esi
c000e895:	53                   	push   ebx
c000e896:	83 ec 1c             	sub    esp,0x1c
c000e899:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e89d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8a1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e8a5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e8a9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e8ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e8b1:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e8b5:	74 0d                	je     c000e8c4 <VCache::read(unsigned long long, int, void*)+0x32>
c000e8b7:	83 ec 0c             	sub    esp,0xc
c000e8ba:	57                   	push   edi
c000e8bb:	e8 18 fe ff ff       	call   c000e6d8 <VCache::writeWriteBuffer()>
c000e8c0:	83 c4 10             	add    esp,0x10
c000e8c3:	90                   	nop
c000e8c4:	83 fd 01             	cmp    ebp,0x1
c000e8c7:	0f 85 93 00 00 00    	jne    c000e960 <VCache::read(unsigned long long, int, void*)+0xce>
c000e8cd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8d0:	89 04 24             	mov    DWORD PTR [esp],eax
c000e8d3:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e8da:	0f 85 80 00 00 00    	jne    c000e960 <VCache::read(unsigned long long, int, void*)+0xce>
c000e8e0:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e8e3:	89 e9                	mov    ecx,ebp
c000e8e5:	f7 d9                	neg    ecx
c000e8e7:	89 c8                	mov    eax,ecx
c000e8e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e8ed:	c1 f8 1f             	sar    eax,0x1f
c000e8f0:	21 d9                	and    ecx,ebx
c000e8f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e8f6:	89 c8                	mov    eax,ecx
c000e8f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e8fc:	21 f1                	and    ecx,esi
c000e8fe:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e902:	89 ca                	mov    edx,ecx
c000e904:	74 2e                	je     c000e934 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e906:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e909:	75 29                	jne    c000e934 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e90b:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e90e:	75 24                	jne    c000e934 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e910:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e913:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e919:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e91c:	8d 70 ff             	lea    esi,[eax-0x1]
c000e91f:	21 f3                	and    ebx,esi
c000e921:	0f af d9             	imul   ebx,ecx
c000e924:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e927:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e92b:	89 de                	mov    esi,ebx
c000e92d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e92f:	31 c0                	xor    eax,eax
c000e931:	eb 61                	jmp    c000e994 <VCache::read(unsigned long long, int, void*)+0x102>
c000e933:	90                   	nop
c000e934:	83 ec 0c             	sub    esp,0xc
c000e937:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e93b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e93f:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e942:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e945:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e947:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e94a:	55                   	push   ebp
c000e94b:	52                   	push   edx
c000e94c:	50                   	push   eax
c000e94d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e951:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e954:	83 c4 20             	add    esp,0x20
c000e957:	85 c0                	test   eax,eax
c000e959:	75 39                	jne    c000e994 <VCache::read(unsigned long long, int, void*)+0x102>
c000e95b:	eb b3                	jmp    c000e910 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e95d:	8d 76 00             	lea    esi,[esi+0x0]
c000e960:	83 ec 0c             	sub    esp,0xc
c000e963:	57                   	push   edi
c000e964:	e8 5f fd ff ff       	call   c000e6c8 <VCache::invalidateReadBuffer()>
c000e969:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e96c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e970:	8b 10                	mov    edx,DWORD PTR [eax]
c000e972:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e976:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e97a:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e97e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e982:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e986:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e989:	83 c4 2c             	add    esp,0x2c
c000e98c:	5b                   	pop    ebx
c000e98d:	5e                   	pop    esi
c000e98e:	5f                   	pop    edi
c000e98f:	5d                   	pop    ebp
c000e990:	ff e0                	jmp    eax
c000e992:	66 90                	xchg   ax,ax
c000e994:	83 c4 1c             	add    esp,0x1c
c000e997:	5b                   	pop    ebx
c000e998:	5e                   	pop    esi
c000e999:	5f                   	pop    edi
c000e99a:	5d                   	pop    ebp
c000e99b:	c3                   	ret    

c000e99c <Video::putrect(int, int, int, int, unsigned int)>:
c000e99c:	55                   	push   ebp
c000e99d:	57                   	push   edi
c000e99e:	56                   	push   esi
c000e99f:	53                   	push   ebx
c000e9a0:	83 ec 1c             	sub    esp,0x1c
c000e9a3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e9a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9ab:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e9af:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e9b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e9b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9bb:	01 df                	add    edi,ebx
c000e9bd:	39 fb                	cmp    ebx,edi
c000e9bf:	7d 1f                	jge    c000e9e0 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e9c1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e9c5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e9c9:	7d 12                	jge    c000e9dd <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e9cb:	8b 16                	mov    edx,DWORD PTR [esi]
c000e9cd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e9d1:	53                   	push   ebx
c000e9d2:	55                   	push   ebp
c000e9d3:	45                   	inc    ebp
c000e9d4:	56                   	push   esi
c000e9d5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e9d8:	83 c4 10             	add    esp,0x10
c000e9db:	eb e8                	jmp    c000e9c5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e9dd:	43                   	inc    ebx
c000e9de:	eb dd                	jmp    c000e9bd <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e9e0:	83 c4 1c             	add    esp,0x1c
c000e9e3:	5b                   	pop    ebx
c000e9e4:	5e                   	pop    esi
c000e9e5:	5f                   	pop    edi
c000e9e6:	5d                   	pop    ebp
c000e9e7:	c3                   	ret    

c000e9e8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e9e8:	55                   	push   ebp
c000e9e9:	57                   	push   edi
c000e9ea:	31 ff                	xor    edi,edi
c000e9ec:	56                   	push   esi
c000e9ed:	53                   	push   ebx
c000e9ee:	83 ec 1c             	sub    esp,0x1c
c000e9f1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e9f5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e9f9:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea00:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ea05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea09:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ea0d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea11:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ea14:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea18:	01 f9                	add    ecx,edi
c000ea1a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ea1e:	7d 2f                	jge    c000ea4f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ea20:	31 f6                	xor    esi,esi
c000ea22:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea26:	01 f2                	add    edx,esi
c000ea28:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea2c:	7d 1a                	jge    c000ea48 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea2e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea31:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ea34:	46                   	inc    esi
c000ea35:	51                   	push   ecx
c000ea36:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ea3a:	52                   	push   edx
c000ea3b:	55                   	push   ebp
c000ea3c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea3f:	83 c4 10             	add    esp,0x10
c000ea42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea46:	eb da                	jmp    c000ea22 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ea48:	47                   	inc    edi
c000ea49:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ea4d:	eb c5                	jmp    c000ea14 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ea4f:	83 c4 1c             	add    esp,0x1c
c000ea52:	5b                   	pop    ebx
c000ea53:	5e                   	pop    esi
c000ea54:	5f                   	pop    edi
c000ea55:	5d                   	pop    ebp
c000ea56:	c3                   	ret    
c000ea57:	90                   	nop

c000ea58 <Video::blit(unsigned int*, int, int, int, int)>:
c000ea58:	55                   	push   ebp
c000ea59:	57                   	push   edi
c000ea5a:	56                   	push   esi
c000ea5b:	53                   	push   ebx
c000ea5c:	83 ec 1c             	sub    esp,0x1c
c000ea5f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea63:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ea67:	85 c0                	test   eax,eax
c000ea69:	79 02                	jns    c000ea6d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000ea6b:	31 c0                	xor    eax,eax
c000ea6d:	c1 e0 02             	shl    eax,0x2
c000ea70:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ea74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea78:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea7c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000ea80:	39 d8                	cmp    eax,ebx
c000ea82:	7e 49                	jle    c000eacd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000ea84:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ea8a:	7c 41                	jl     c000eacd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000ea8c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ea90:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea94:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea98:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000ea9c:	39 f9                	cmp    ecx,edi
c000ea9e:	7e 22                	jle    c000eac2 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000eaa0:	83 c5 04             	add    ebp,0x4
c000eaa3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eaa9:	7c 14                	jl     c000eabf <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000eaab:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eaad:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000eab0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eab4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eab8:	56                   	push   esi
c000eab9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eabc:	83 c4 10             	add    esp,0x10
c000eabf:	47                   	inc    edi
c000eac0:	eb d2                	jmp    c000ea94 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000eac2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eac6:	43                   	inc    ebx
c000eac7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000eacb:	eb ab                	jmp    c000ea78 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000eacd:	83 c4 1c             	add    esp,0x1c
c000ead0:	5b                   	pop    ebx
c000ead1:	5e                   	pop    esi
c000ead2:	5f                   	pop    edi
c000ead3:	5d                   	pop    ebp
c000ead4:	c3                   	ret    
c000ead5:	90                   	nop

c000ead6 <Video::clearScreen(unsigned int)>:
c000ead6:	57                   	push   edi
c000ead7:	56                   	push   esi
c000ead8:	53                   	push   ebx
c000ead9:	31 db                	xor    ebx,ebx
c000eadb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eadf:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eae5:	7e 1f                	jle    c000eb06 <Video::clearScreen(unsigned int)+0x30>
c000eae7:	31 ff                	xor    edi,edi
c000eae9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eaef:	7e 12                	jle    c000eb03 <Video::clearScreen(unsigned int)+0x2d>
c000eaf1:	8b 06                	mov    eax,DWORD PTR [esi]
c000eaf3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eaf7:	53                   	push   ebx
c000eaf8:	57                   	push   edi
c000eaf9:	47                   	inc    edi
c000eafa:	56                   	push   esi
c000eafb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eafe:	83 c4 10             	add    esp,0x10
c000eb01:	eb e6                	jmp    c000eae9 <Video::clearScreen(unsigned int)+0x13>
c000eb03:	43                   	inc    ebx
c000eb04:	eb d9                	jmp    c000eadf <Video::clearScreen(unsigned int)+0x9>
c000eb06:	5b                   	pop    ebx
c000eb07:	5e                   	pop    esi
c000eb08:	5f                   	pop    edi
c000eb09:	c3                   	ret    

c000eb0a <Video::putpixel(int, int, unsigned int)>:
c000eb0a:	c7 44 24 04 e8 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021de8
c000eb12:	e9 d0 2a 00 00       	jmp    c00115e7 <KePanic(char const*)>
c000eb17:	90                   	nop

c000eb18 <Video::readPixelApprox(int, int)>:
c000eb18:	83 ec 18             	sub    esp,0x18
c000eb1b:	68 09 1e 02 c0       	push   0xc0021e09
c000eb20:	e8 c2 2a 00 00       	call   c00115e7 <KePanic(char const*)>
c000eb25:	31 c0                	xor    eax,eax
c000eb27:	83 c4 1c             	add    esp,0x1c
c000eb2a:	c3                   	ret    
c000eb2b:	90                   	nop

c000eb2c <Video::Video(char const*)>:
c000eb2c:	83 ec 0c             	sub    esp,0xc
c000eb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb33:	83 ec 08             	sub    esp,0x8
c000eb36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb3a:	50                   	push   eax
c000eb3b:	e8 e6 df ff ff       	call   c000cb26 <Device::Device(char const*)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	ba 84 1e 02 c0       	mov    edx,0xc0021e84
c000eb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb4c:	89 10                	mov    DWORD PTR [eax],edx
c000eb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb52:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000eb5c:	90                   	nop
c000eb5d:	83 c4 0c             	add    esp,0xc
c000eb60:	c3                   	ret    
c000eb61:	90                   	nop

c000eb62 <Video::~Video()>:
c000eb62:	83 ec 0c             	sub    esp,0xc
c000eb65:	ba 84 1e 02 c0       	mov    edx,0xc0021e84
c000eb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb6e:	89 10                	mov    DWORD PTR [eax],edx
c000eb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb74:	83 ec 0c             	sub    esp,0xc
c000eb77:	50                   	push   eax
c000eb78:	e8 13 dd ff ff       	call   c000c890 <Device::~Device()>
c000eb7d:	83 c4 10             	add    esp,0x10
c000eb80:	90                   	nop
c000eb81:	83 c4 0c             	add    esp,0xc
c000eb84:	c3                   	ret    
c000eb85:	90                   	nop

c000eb86 <Video::~Video()>:
c000eb86:	83 ec 0c             	sub    esp,0xc
c000eb89:	83 ec 0c             	sub    esp,0xc
c000eb8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb90:	e8 cd ff ff ff       	call   c000eb62 <Video::~Video()>
c000eb95:	83 c4 10             	add    esp,0x10
c000eb98:	83 ec 08             	sub    esp,0x8
c000eb9b:	68 64 01 00 00       	push   0x164
c000eba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eba4:	e8 6f bc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	83 c4 0c             	add    esp,0xc
c000ebaf:	c3                   	ret    

c000ebb0 <Video::isMonochrome()>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ebba:	c3                   	ret    
c000ebbb:	90                   	nop

c000ebbc <Video::getWidth()>:
c000ebbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebc0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ebc6:	c3                   	ret    
c000ebc7:	90                   	nop

c000ebc8 <Video::getHeight()>:
c000ebc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebcc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ebd2:	c3                   	ret    
c000ebd3:	90                   	nop

c000ebd4 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ebd4:	55                   	push   ebp
c000ebd5:	57                   	push   edi
c000ebd6:	56                   	push   esi
c000ebd7:	53                   	push   ebx
c000ebd8:	83 ec 2c             	sub    esp,0x2c
c000ebdb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ebdf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ebe3:	83 f8 01             	cmp    eax,0x1
c000ebe6:	19 c9                	sbb    ecx,ecx
c000ebe8:	31 db                	xor    ebx,ebx
c000ebea:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ebee:	89 cd                	mov    ebp,ecx
c000ebf0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ebf8:	f7 d5                	not    ebp
c000ebfa:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ec00:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec04:	01 d8                	add    eax,ebx
c000ec06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec0a:	56                   	push   esi
c000ec0b:	e8 b8 ff ff ff       	call   c000ebc8 <Video::getHeight()>
c000ec10:	59                   	pop    ecx
c000ec11:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ec15:	7e 70                	jle    c000ec87 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ec17:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec1b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ec1f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ec22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec26:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec2a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec35:	89 f8                	mov    eax,edi
c000ec37:	83 c0 20             	add    eax,0x20
c000ec3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec3e:	56                   	push   esi
c000ec3f:	e8 78 ff ff ff       	call   c000ebbc <Video::getWidth()>
c000ec44:	5a                   	pop    edx
c000ec45:	39 c7                	cmp    edi,eax
c000ec47:	7d 34                	jge    c000ec7d <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ec49:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ec4e:	74 05                	je     c000ec55 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ec50:	8b 06                	mov    eax,DWORD PTR [esi]
c000ec52:	55                   	push   ebp
c000ec53:	eb 0d                	jmp    c000ec62 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ec55:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ec5a:	74 12                	je     c000ec6e <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ec5c:	8b 06                	mov    eax,DWORD PTR [esi]
c000ec5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec62:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec66:	57                   	push   edi
c000ec67:	56                   	push   esi
c000ec68:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ec6b:	83 c4 10             	add    esp,0x10
c000ec6e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ec72:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ec76:	47                   	inc    edi
c000ec77:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ec7b:	75 c1                	jne    c000ec3e <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ec7d:	43                   	inc    ebx
c000ec7e:	83 fb 20             	cmp    ebx,0x20
c000ec81:	0f 85 79 ff ff ff    	jne    c000ec00 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ec87:	83 c4 2c             	add    esp,0x2c
c000ec8a:	5b                   	pop    ebx
c000ec8b:	5e                   	pop    esi
c000ec8c:	5f                   	pop    edi
c000ec8d:	5d                   	pop    ebp
c000ec8e:	c3                   	ret    
c000ec8f:	90                   	nop

c000ec90 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ec90:	55                   	push   ebp
c000ec91:	57                   	push   edi
c000ec92:	56                   	push   esi
c000ec93:	53                   	push   ebx
c000ec94:	83 ec 28             	sub    esp,0x28
c000ec97:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ec9b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ec9f:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000eca3:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000eca7:	c1 e6 08             	shl    esi,0x8
c000ecaa:	01 c6                	add    esi,eax
c000ecac:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ecb0:	c1 e0 08             	shl    eax,0x8
c000ecb3:	01 d0                	add    eax,edx
c000ecb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecbd:	0f af c6             	imul   eax,esi
c000ecc0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ecc7:	50                   	push   eax
c000ecc8:	e8 e9 8d ff ff       	call   c0007ab6 <malloc>
c000eccd:	83 c4 10             	add    esp,0x10
c000ecd0:	89 c7                	mov    edi,eax
c000ecd2:	85 c0                	test   eax,eax
c000ecd4:	75 10                	jne    c000ece6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ecd6:	83 ec 0c             	sub    esp,0xc
c000ecd9:	68 34 1e 02 c0       	push   0xc0021e34
c000ecde:	e8 04 29 00 00       	call   c00115e7 <KePanic(char const*)>
c000ece3:	83 c4 10             	add    esp,0x10
c000ece6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ecea:	ba 12 00 00 00       	mov    edx,0x12
c000ecef:	85 c0                	test   eax,eax
c000ecf1:	74 11                	je     c000ed04 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ecf3:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ecf7:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ecfb:	c1 fa 03             	sar    edx,0x3
c000ecfe:	0f af d1             	imul   edx,ecx
c000ed01:	83 c2 12             	add    edx,0x12
c000ed04:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ed08:	74 04                	je     c000ed0e <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ed0a:	85 f6                	test   esi,esi
c000ed0c:	75 12                	jne    c000ed20 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ed0e:	83 ec 0c             	sub    esp,0xc
c000ed11:	68 44 1e 02 c0       	push   0xc0021e44
c000ed16:	e8 2a bc ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ed1b:	e9 b8 00 00 00       	jmp    c000edd8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ed20:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ed24:	83 f9 02             	cmp    ecx,0x2
c000ed27:	0f 85 96 00 00 00    	jne    c000edc3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed2d:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed32:	75 0e                	jne    c000ed42 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed34:	85 c0                	test   eax,eax
c000ed36:	75 0a                	jne    c000ed42 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed38:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ed3b:	83 e8 18             	sub    eax,0x18
c000ed3e:	a8 f7                	test   al,0xf7
c000ed40:	74 0a                	je     c000ed4c <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ed42:	83 ec 0c             	sub    esp,0xc
c000ed45:	68 59 1e 02 c0       	push   0xc0021e59
c000ed4a:	eb 7f                	jmp    c000edcb <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ed4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ed54:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ed5c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000ed60:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ed68:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ed6c:	75 0c                	jne    c000ed7a <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ed6e:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000ed73:	c1 e0 18             	shl    eax,0x18
c000ed76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ed7a:	45                   	inc    ebp
c000ed7b:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ed80:	c1 e1 10             	shl    ecx,0x10
c000ed83:	89 c8                	mov    eax,ecx
c000ed85:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ed8a:	c1 e1 08             	shl    ecx,0x8
c000ed8d:	09 c1                	or     ecx,eax
c000ed8f:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ed93:	09 c1                	or     ecx,eax
c000ed95:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ed99:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ed9d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000eda1:	c1 f8 03             	sar    eax,0x3
c000eda4:	01 c2                	add    edx,eax
c000eda6:	89 e8                	mov    eax,ebp
c000eda8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000edac:	39 c6                	cmp    esi,eax
c000edae:	7f b0                	jg     c000ed60 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000edb0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000edb4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edb8:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000edbb:	7e 22                	jle    c000eddf <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000edbd:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000edc1:	eb 99                	jmp    c000ed5c <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000edc3:	50                   	push   eax
c000edc4:	50                   	push   eax
c000edc5:	51                   	push   ecx
c000edc6:	68 67 1e 02 c0       	push   0xc0021e67
c000edcb:	e8 75 bb ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000edd0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000edd3:	e8 ee 8c ff ff       	call   c0007ac6 <free>
c000edd8:	83 c4 10             	add    esp,0x10
c000eddb:	31 ff                	xor    edi,edi
c000eddd:	eb 0f                	jmp    c000edee <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000eddf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ede3:	89 30                	mov    DWORD PTR [eax],esi
c000ede5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ede9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000edec:	89 30                	mov    DWORD PTR [eax],esi
c000edee:	83 c4 1c             	add    esp,0x1c
c000edf1:	89 f8                	mov    eax,edi
c000edf3:	5b                   	pop    ebx
c000edf4:	5e                   	pop    esi
c000edf5:	5f                   	pop    edi
c000edf6:	5d                   	pop    ebp
c000edf7:	c3                   	ret    

c000edf8 <Video::putTGA(int, int, unsigned char*, int)>:
c000edf8:	55                   	push   ebp
c000edf9:	57                   	push   edi
c000edfa:	56                   	push   esi
c000edfb:	53                   	push   ebx
c000edfc:	83 ec 28             	sub    esp,0x28
c000edff:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ee03:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee07:	50                   	push   eax
c000ee08:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee0c:	50                   	push   eax
c000ee0d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee11:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee15:	56                   	push   esi
c000ee16:	e8 75 fe ff ff       	call   c000ec90 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ee1b:	83 c4 20             	add    esp,0x20
c000ee1e:	85 c0                	test   eax,eax
c000ee20:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ee24:	74 35                	je     c000ee5b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee26:	89 c7                	mov    edi,eax
c000ee28:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee2c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee30:	39 d8                	cmp    eax,ebx
c000ee32:	7e 27                	jle    c000ee5b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee34:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ee38:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee3c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ee40:	39 e8                	cmp    eax,ebp
c000ee42:	7e 14                	jle    c000ee58 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ee44:	8b 06                	mov    eax,DWORD PTR [esi]
c000ee46:	83 c7 04             	add    edi,0x4
c000ee49:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ee4c:	53                   	push   ebx
c000ee4d:	55                   	push   ebp
c000ee4e:	45                   	inc    ebp
c000ee4f:	56                   	push   esi
c000ee50:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ee53:	83 c4 10             	add    esp,0x10
c000ee56:	eb e0                	jmp    c000ee38 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ee58:	43                   	inc    ebx
c000ee59:	eb cd                	jmp    c000ee28 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ee5b:	83 c4 1c             	add    esp,0x1c
c000ee5e:	5b                   	pop    ebx
c000ee5f:	5e                   	pop    esi
c000ee60:	5f                   	pop    edi
c000ee61:	5d                   	pop    ebp
c000ee62:	c3                   	ret    
c000ee63:	90                   	nop

c000ee64 <ACPI::close(int, int, void*)>:
c000ee64:	83 ec 1c             	sub    esp,0x1c
c000ee67:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ee6f:	74 0b                	je     c000ee7c <ACPI::close(int, int, void*)+0x18>
c000ee71:	b8 00 00 00 00       	mov    eax,0x0
c000ee76:	e9 99 00 00 00       	jmp    c000ef14 <ACPI::close(int, int, void*)+0xb0>
c000ee7b:	90                   	nop
c000ee7c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ee81:	75 29                	jne    c000eeac <ACPI::close(int, int, void*)+0x48>
c000ee83:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ee88:	85 c0                	test   eax,eax
c000ee8a:	74 08                	je     c000ee94 <ACPI::close(int, int, void*)+0x30>
c000ee8c:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000ee91:	ff d0                	call   eax
c000ee93:	90                   	nop
c000ee94:	83 ec 0c             	sub    esp,0xc
c000ee97:	68 c8 1e 02 c0       	push   0xc0021ec8
c000ee9c:	e8 46 27 00 00       	call   c00115e7 <KePanic(char const*)>
c000eea1:	83 c4 10             	add    esp,0x10
c000eea4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eea9:	eb 69                	jmp    c000ef14 <ACPI::close(int, int, void*)+0xb0>
c000eeab:	90                   	nop
c000eeac:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eeb1:	75 59                	jne    c000ef0c <ACPI::close(int, int, void*)+0xa8>
c000eeb3:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000eeb8:	85 c0                	test   eax,eax
c000eeba:	74 08                	je     c000eec4 <ACPI::close(int, int, void*)+0x60>
c000eebc:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000eec1:	ff d0                	call   eax
c000eec3:	90                   	nop
c000eec4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eec9:	8d 76 00             	lea    esi,[esi+0x0]
c000eecc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eed1:	83 e0 02             	and    eax,0x2
c000eed4:	74 1e                	je     c000eef4 <ACPI::close(int, int, void*)+0x90>
c000eed6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eedd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eee1:	89 c2                	mov    edx,eax
c000eee3:	ec                   	in     al,dx
c000eee4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eee8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eeec:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eef0:	eb da                	jmp    c000eecc <ACPI::close(int, int, void*)+0x68>
c000eef2:	66 90                	xchg   ax,ax
c000eef4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000eefb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ef00:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ef04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef08:	ee                   	out    dx,al
c000ef09:	8d 76 00             	lea    esi,[esi+0x0]
c000ef0c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef11:	8d 76 00             	lea    esi,[esi+0x0]
c000ef14:	83 c4 1c             	add    esp,0x1c
c000ef17:	c3                   	ret    

c000ef18 <findRSDP()>:
c000ef18:	83 ec 1c             	sub    esp,0x1c
c000ef1b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef20:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef26:	83 e0 04             	and    eax,0x4
c000ef29:	0f b6 c0             	movzx  eax,al
c000ef2c:	85 c0                	test   eax,eax
c000ef2e:	75 08                	jne    c000ef38 <findRSDP()+0x20>
c000ef30:	b8 00 00 00 00       	mov    eax,0x0
c000ef35:	eb 75                	jmp    c000efac <findRSDP()+0x94>
c000ef37:	90                   	nop
c000ef38:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000ef3d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ef42:	7f 1c                	jg     c000ef60 <findRSDP()+0x48>
c000ef44:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef49:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ef4f:	83 e2 fb             	and    edx,0xfffffffb
c000ef52:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ef58:	b8 00 00 00 00       	mov    eax,0x0
c000ef5d:	eb 4d                	jmp    c000efac <findRSDP()+0x94>
c000ef5f:	90                   	nop
c000ef60:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ef68:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ef70:	77 32                	ja     c000efa4 <findRSDP()+0x8c>
c000ef72:	83 ec 04             	sub    esp,0x4
c000ef75:	6a 08                	push   0x8
c000ef77:	68 63 1f 02 c0       	push   0xc0021f63
c000ef7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ef80:	e8 fb 13 ff ff       	call   c0000380 <memcmp>
c000ef85:	83 c4 10             	add    esp,0x10
c000ef88:	85 c0                	test   eax,eax
c000ef8a:	0f 94 c0             	sete   al
c000ef8d:	0f b6 c0             	movzx  eax,al
c000ef90:	85 c0                	test   eax,eax
c000ef92:	74 08                	je     c000ef9c <findRSDP()+0x84>
c000ef94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef98:	eb 12                	jmp    c000efac <findRSDP()+0x94>
c000ef9a:	66 90                	xchg   ax,ax
c000ef9c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000efa1:	eb c5                	jmp    c000ef68 <findRSDP()+0x50>
c000efa3:	90                   	nop
c000efa4:	b8 00 00 00 00       	mov    eax,0x0
c000efa9:	8d 76 00             	lea    esi,[esi+0x0]
c000efac:	83 c4 1c             	add    esp,0x1c
c000efaf:	c3                   	ret    

c000efb0 <loadACPITables(unsigned char*)>:
c000efb0:	57                   	push   edi
c000efb1:	56                   	push   esi
c000efb2:	53                   	push   ebx
c000efb3:	83 ec 60             	sub    esp,0x60
c000efb6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000efbb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efc1:	83 e0 04             	and    eax,0x4
c000efc4:	0f b6 c0             	movzx  eax,al
c000efc7:	85 c0                	test   eax,eax
c000efc9:	0f 84 41 02 00 00    	je     c000f210 <loadACPITables(unsigned char*)+0x260>
c000efcf:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000efd4:	0f b6 c0             	movzx  eax,al
c000efd7:	85 c0                	test   eax,eax
c000efd9:	74 79                	je     c000f054 <loadACPITables(unsigned char*)+0xa4>
c000efdb:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000efdf:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000efe3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000efe7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000efea:	83 e8 24             	sub    eax,0x24
c000efed:	c1 e8 03             	shr    eax,0x3
c000eff0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000eff4:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000effc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f000:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f004:	0f 8d ba 00 00 00    	jge    c000f0c4 <loadACPITables(unsigned char*)+0x114>
c000f00a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f00e:	83 c0 24             	add    eax,0x24
c000f011:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f015:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f019:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f01d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f021:	c1 e0 03             	shl    eax,0x3
c000f024:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f028:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f02c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f02f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f031:	89 c1                	mov    ecx,eax
c000f033:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f038:	8d 50 01             	lea    edx,[eax+0x1]
c000f03b:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f041:	89 ca                	mov    edx,ecx
c000f043:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f04a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f04f:	eb ab                	jmp    c000effc <loadACPITables(unsigned char*)+0x4c>
c000f051:	8d 76 00             	lea    esi,[esi+0x0]
c000f054:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f058:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f05c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f060:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f063:	83 e8 24             	sub    eax,0x24
c000f066:	c1 e8 02             	shr    eax,0x2
c000f069:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f06d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f075:	8d 76 00             	lea    esi,[esi+0x0]
c000f078:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f07c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f080:	7d 42                	jge    c000f0c4 <loadACPITables(unsigned char*)+0x114>
c000f082:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f086:	83 c0 24             	add    eax,0x24
c000f089:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f08d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f091:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f095:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f099:	c1 e0 02             	shl    eax,0x2
c000f09c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f0a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f0a4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f0a6:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0ab:	8d 50 01             	lea    edx,[eax+0x1]
c000f0ae:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f0b4:	89 ca                	mov    edx,ecx
c000f0b6:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f0bd:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f0c2:	eb b4                	jmp    c000f078 <loadACPITables(unsigned char*)+0xc8>
c000f0c4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f0cc:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0d1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f0d5:	0f 8d 39 01 00 00    	jge    c000f214 <loadACPITables(unsigned char*)+0x264>
c000f0db:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f0df:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f0e6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f0ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0ee:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f0f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0f6:	25 ff 0f 00 00       	and    eax,0xfff
c000f0fb:	89 c6                	mov    esi,eax
c000f0fd:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f103:	83 ec 0c             	sub    esp,0xc
c000f106:	6a 01                	push   0x1
c000f108:	e8 00 a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f10d:	83 c4 10             	add    esp,0x10
c000f110:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f114:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f11a:	83 ec 0c             	sub    esp,0xc
c000f11d:	6a 01                	push   0x1
c000f11f:	6a 01                	push   0x1
c000f121:	50                   	push   eax
c000f122:	52                   	push   edx
c000f123:	53                   	push   ebx
c000f124:	e8 f1 ad ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f129:	83 c4 20             	add    esp,0x20
c000f12c:	09 f0                	or     eax,esi
c000f12e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f132:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f136:	c1 e0 03             	shl    eax,0x3
c000f139:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f13e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f142:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f146:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f14a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f152:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f156:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f15a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f15e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f162:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f166:	89 c6                	mov    esi,eax
c000f168:	89 d7                	mov    edi,edx
c000f16a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f16c:	89 c8                	mov    eax,ecx
c000f16e:	89 fa                	mov    edx,edi
c000f170:	89 f3                	mov    ebx,esi
c000f172:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f176:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f17a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f17e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f182:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f185:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f189:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f18d:	05 00 10 00 00       	add    eax,0x1000
c000f192:	c1 e8 0c             	shr    eax,0xc
c000f195:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f199:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f1a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1a5:	25 ff 0f 00 00       	and    eax,0xfff
c000f1aa:	89 c6                	mov    esi,eax
c000f1ac:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1b2:	83 ec 0c             	sub    esp,0xc
c000f1b5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1b9:	e8 4f a4 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f1be:	83 c4 10             	add    esp,0x10
c000f1c1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1c5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f1cb:	83 ec 0c             	sub    esp,0xc
c000f1ce:	6a 01                	push   0x1
c000f1d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f1d4:	50                   	push   eax
c000f1d5:	52                   	push   edx
c000f1d6:	53                   	push   ebx
c000f1d7:	e8 3e ad ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f1dc:	83 c4 20             	add    esp,0x20
c000f1df:	09 f0                	or     eax,esi
c000f1e1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1e9:	83 ec 0c             	sub    esp,0xc
c000f1ec:	50                   	push   eax
c000f1ed:	e8 39 a7 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000f1f2:	83 c4 10             	add    esp,0x10
c000f1f5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f1f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f1fd:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f204:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f209:	e9 be fe ff ff       	jmp    c000f0cc <loadACPITables(unsigned char*)+0x11c>
c000f20e:	66 90                	xchg   ax,ax
c000f210:	90                   	nop
c000f211:	8d 76 00             	lea    esi,[esi+0x0]
c000f214:	83 c4 60             	add    esp,0x60
c000f217:	5b                   	pop    ebx
c000f218:	5e                   	pop    esi
c000f219:	5f                   	pop    edi
c000f21a:	c3                   	ret    
c000f21b:	90                   	nop

c000f21c <findRSDT(unsigned char*)>:
c000f21c:	57                   	push   edi
c000f21d:	56                   	push   esi
c000f21e:	53                   	push   ebx
c000f21f:	83 ec 50             	sub    esp,0x50
c000f222:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f227:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f22d:	83 e0 04             	and    eax,0x4
c000f230:	0f b6 c0             	movzx  eax,al
c000f233:	85 c0                	test   eax,eax
c000f235:	75 0d                	jne    c000f244 <findRSDT(unsigned char*)+0x28>
c000f237:	b8 00 00 00 00       	mov    eax,0x0
c000f23c:	e9 2b 01 00 00       	jmp    c000f36c <findRSDT(unsigned char*)+0x150>
c000f241:	8d 76 00             	lea    esi,[esi+0x0]
c000f244:	89 e0                	mov    eax,esp
c000f246:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f24a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f24e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f252:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f25a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f25e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f262:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f266:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f26a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f26e:	89 c6                	mov    esi,eax
c000f270:	89 d7                	mov    edi,edx
c000f272:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f274:	89 c8                	mov    eax,ecx
c000f276:	89 fa                	mov    edx,edi
c000f278:	89 f3                	mov    ebx,esi
c000f27a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f27e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f282:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f286:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f28a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f28e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f296:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f29a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f29e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f2a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2a6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f2aa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f2ae:	25 ff 0f 00 00       	and    eax,0xfff
c000f2b3:	89 c6                	mov    esi,eax
c000f2b5:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2bb:	83 ec 0c             	sub    esp,0xc
c000f2be:	6a 02                	push   0x2
c000f2c0:	e8 48 a3 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f2c5:	83 c4 10             	add    esp,0x10
c000f2c8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f2cc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f2d2:	83 ec 0c             	sub    esp,0xc
c000f2d5:	6a 01                	push   0x1
c000f2d7:	6a 02                	push   0x2
c000f2d9:	50                   	push   eax
c000f2da:	52                   	push   edx
c000f2db:	53                   	push   ebx
c000f2dc:	e8 39 ac ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f2e1:	83 c4 20             	add    esp,0x20
c000f2e4:	09 f0                	or     eax,esi
c000f2e6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f2ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f2ee:	25 ff 0f 00 00       	and    eax,0xfff
c000f2f3:	89 c6                	mov    esi,eax
c000f2f5:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2fb:	83 ec 0c             	sub    esp,0xc
c000f2fe:	6a 02                	push   0x2
c000f300:	e8 08 a3 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f305:	83 c4 10             	add    esp,0x10
c000f308:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f30c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f312:	83 ec 0c             	sub    esp,0xc
c000f315:	6a 01                	push   0x1
c000f317:	6a 02                	push   0x2
c000f319:	50                   	push   eax
c000f31a:	52                   	push   edx
c000f31b:	53                   	push   ebx
c000f31c:	e8 f9 ab ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f321:	83 c4 20             	add    esp,0x20
c000f324:	09 f0                	or     eax,esi
c000f326:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f32a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f32f:	85 c0                	test   eax,eax
c000f331:	75 11                	jne    c000f344 <findRSDT(unsigned char*)+0x128>
c000f333:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f33a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f33e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f342:	eb 24                	jmp    c000f368 <findRSDT(unsigned char*)+0x14c>
c000f344:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f349:	83 f8 02             	cmp    eax,0x2
c000f34c:	75 12                	jne    c000f360 <findRSDT(unsigned char*)+0x144>
c000f34e:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f355:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f359:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f35d:	eb 09                	jmp    c000f368 <findRSDT(unsigned char*)+0x14c>
c000f35f:	90                   	nop
c000f360:	b8 00 00 00 00       	mov    eax,0x0
c000f365:	eb 05                	jmp    c000f36c <findRSDT(unsigned char*)+0x150>
c000f367:	90                   	nop
c000f368:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f36c:	83 c4 50             	add    esp,0x50
c000f36f:	5b                   	pop    ebx
c000f370:	5e                   	pop    esi
c000f371:	5f                   	pop    edi
c000f372:	c3                   	ret    
c000f373:	90                   	nop

c000f374 <findDataTable(unsigned char*, char*)>:
c000f374:	83 ec 1c             	sub    esp,0x1c
c000f377:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f37c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f382:	83 e0 04             	and    eax,0x4
c000f385:	0f b6 c0             	movzx  eax,al
c000f388:	85 c0                	test   eax,eax
c000f38a:	75 08                	jne    c000f394 <findDataTable(unsigned char*, char*)+0x20>
c000f38c:	b8 00 00 00 00       	mov    eax,0x0
c000f391:	eb 5d                	jmp    c000f3f0 <findDataTable(unsigned char*, char*)+0x7c>
c000f393:	90                   	nop
c000f394:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f39c:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f3a1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f3a5:	7d 41                	jge    c000f3e8 <findDataTable(unsigned char*, char*)+0x74>
c000f3a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3ab:	c1 e0 03             	shl    eax,0x3
c000f3ae:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f3b3:	83 ec 04             	sub    esp,0x4
c000f3b6:	6a 04                	push   0x4
c000f3b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3bc:	50                   	push   eax
c000f3bd:	e8 be 0f ff ff       	call   c0000380 <memcmp>
c000f3c2:	83 c4 10             	add    esp,0x10
c000f3c5:	85 c0                	test   eax,eax
c000f3c7:	0f 94 c0             	sete   al
c000f3ca:	0f b6 c0             	movzx  eax,al
c000f3cd:	85 c0                	test   eax,eax
c000f3cf:	74 0f                	je     c000f3e0 <findDataTable(unsigned char*, char*)+0x6c>
c000f3d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3d5:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f3dc:	eb 12                	jmp    c000f3f0 <findDataTable(unsigned char*, char*)+0x7c>
c000f3de:	66 90                	xchg   ax,ax
c000f3e0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f3e5:	eb b5                	jmp    c000f39c <findDataTable(unsigned char*, char*)+0x28>
c000f3e7:	90                   	nop
c000f3e8:	b8 00 00 00 00       	mov    eax,0x0
c000f3ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f3f0:	83 c4 1c             	add    esp,0x1c
c000f3f3:	c3                   	ret    

c000f3f4 <scanMADT()>:
c000f3f4:	53                   	push   ebx
c000f3f5:	83 ec 38             	sub    esp,0x38
c000f3f8:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f3fd:	25 00 04 00 00       	and    eax,0x400
c000f402:	74 14                	je     c000f418 <scanMADT()+0x24>
c000f404:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f409:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f40f:	83 e2 fb             	and    edx,0xfffffffb
c000f412:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f418:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f41d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f423:	83 e0 04             	and    eax,0x4
c000f426:	0f b6 c0             	movzx  eax,al
c000f429:	85 c0                	test   eax,eax
c000f42b:	0f 84 6b 04 00 00    	je     c000f89c <scanMADT()+0x4a8>
c000f431:	e8 e2 fa ff ff       	call   c000ef18 <findRSDP()>
c000f436:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f43b:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f440:	85 c0                	test   eax,eax
c000f442:	75 1c                	jne    c000f460 <scanMADT()+0x6c>
c000f444:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f449:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f44f:	83 e2 fb             	and    edx,0xfffffffb
c000f452:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f458:	e9 47 04 00 00       	jmp    c000f8a4 <scanMADT()+0x4b0>
c000f45d:	8d 76 00             	lea    esi,[esi+0x0]
c000f460:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f465:	83 ec 0c             	sub    esp,0xc
c000f468:	50                   	push   eax
c000f469:	e8 ae fd ff ff       	call   c000f21c <findRSDT(unsigned char*)>
c000f46e:	83 c4 10             	add    esp,0x10
c000f471:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f476:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f47b:	85 c0                	test   eax,eax
c000f47d:	75 19                	jne    c000f498 <scanMADT()+0xa4>
c000f47f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f484:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f48a:	83 e2 fb             	and    edx,0xfffffffb
c000f48d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f493:	e9 0c 04 00 00       	jmp    c000f8a4 <scanMADT()+0x4b0>
c000f498:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f49d:	83 ec 0c             	sub    esp,0xc
c000f4a0:	50                   	push   eax
c000f4a1:	e8 0a fb ff ff       	call   c000efb0 <loadACPITables(unsigned char*)>
c000f4a6:	83 c4 10             	add    esp,0x10
c000f4a9:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4ae:	83 ec 08             	sub    esp,0x8
c000f4b1:	68 6c 1f 02 c0       	push   0xc0021f6c
c000f4b6:	50                   	push   eax
c000f4b7:	e8 b8 fe ff ff       	call   c000f374 <findDataTable(unsigned char*, char*)>
c000f4bc:	83 c4 10             	add    esp,0x10
c000f4bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f4c3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f4c8:	75 1a                	jne    c000f4e4 <scanMADT()+0xf0>
c000f4ca:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4cf:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4d5:	83 e2 fe             	and    edx,0xfffffffe
c000f4d8:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4de:	e9 c1 03 00 00       	jmp    c000f8a4 <scanMADT()+0x4b0>
c000f4e3:	90                   	nop
c000f4e4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f4ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f4f3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f4f7:	0f 87 a7 03 00 00    	ja     c000f8a4 <scanMADT()+0x4b0>
c000f4fd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f505:	0f 87 99 03 00 00    	ja     c000f8a4 <scanMADT()+0x4b0>
c000f50b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f50f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f517:	8d 50 01             	lea    edx,[eax+0x1]
c000f51a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f51e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f522:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f526:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f52a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f52e:	8d 50 01             	lea    edx,[eax+0x1]
c000f531:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f535:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f539:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f53d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f541:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f546:	83 f8 02             	cmp    eax,0x2
c000f549:	0f 86 51 03 00 00    	jbe    c000f8a0 <scanMADT()+0x4ac>
c000f54f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f554:	85 c0                	test   eax,eax
c000f556:	75 58                	jne    c000f5b0 <scanMADT()+0x1bc>
c000f558:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f55c:	8d 50 01             	lea    edx,[eax+0x1]
c000f55f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f563:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f569:	0f b6 d2             	movzx  edx,dl
c000f56c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f570:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f574:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f57a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f57e:	8d 50 01             	lea    edx,[eax+0x1]
c000f581:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f585:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f58b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f58e:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f594:	0f b6 d2             	movzx  edx,dl
c000f597:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f59b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f59f:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f5a5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f5aa:	e9 d9 02 00 00       	jmp    c000f888 <scanMADT()+0x494>
c000f5af:	90                   	nop
c000f5b0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5b5:	83 f8 01             	cmp    eax,0x1
c000f5b8:	0f 85 1a 01 00 00    	jne    c000f6d8 <scanMADT()+0x2e4>
c000f5be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5c2:	8d 50 01             	lea    edx,[eax+0x1]
c000f5c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5c9:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f5cf:	0f b6 d2             	movzx  edx,dl
c000f5d2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5d6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5da:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f5e0:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f5e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ed:	01 d0                	add    eax,edx
c000f5ef:	83 c0 2c             	add    eax,0x2c
c000f5f2:	8a 00                	mov    al,BYTE PTR [eax]
c000f5f4:	0f b6 d0             	movzx  edx,al
c000f5f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5fb:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f602:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f606:	0f b6 c0             	movzx  eax,al
c000f609:	c1 e0 08             	shl    eax,0x8
c000f60c:	89 d1                	mov    ecx,edx
c000f60e:	09 c1                	or     ecx,eax
c000f610:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f614:	8d 50 02             	lea    edx,[eax+0x2]
c000f617:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f61b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f61f:	0f b6 c0             	movzx  eax,al
c000f622:	c1 e0 10             	shl    eax,0x10
c000f625:	09 c1                	or     ecx,eax
c000f627:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f62b:	8d 50 03             	lea    edx,[eax+0x3]
c000f62e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f632:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f636:	0f b6 c0             	movzx  eax,al
c000f639:	c1 e0 18             	shl    eax,0x18
c000f63c:	09 c1                	or     ecx,eax
c000f63e:	89 ca                	mov    edx,ecx
c000f640:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f645:	0f b6 c0             	movzx  eax,al
c000f648:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f64f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f654:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f658:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f65c:	01 d0                	add    eax,edx
c000f65e:	83 c0 2c             	add    eax,0x2c
c000f661:	8a 00                	mov    al,BYTE PTR [eax]
c000f663:	0f b6 d0             	movzx  edx,al
c000f666:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f66a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f66d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f671:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f675:	0f b6 c0             	movzx  eax,al
c000f678:	c1 e0 08             	shl    eax,0x8
c000f67b:	89 d1                	mov    ecx,edx
c000f67d:	09 c1                	or     ecx,eax
c000f67f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f683:	8d 50 02             	lea    edx,[eax+0x2]
c000f686:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f68a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f68e:	0f b6 c0             	movzx  eax,al
c000f691:	c1 e0 10             	shl    eax,0x10
c000f694:	09 c1                	or     ecx,eax
c000f696:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f69a:	8d 50 03             	lea    edx,[eax+0x3]
c000f69d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6a1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6a5:	0f b6 c0             	movzx  eax,al
c000f6a8:	c1 e0 18             	shl    eax,0x18
c000f6ab:	09 c1                	or     ecx,eax
c000f6ad:	89 ca                	mov    edx,ecx
c000f6af:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6b4:	0f b6 c0             	movzx  eax,al
c000f6b7:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f6be:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f6c3:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6c8:	83 c0 01             	add    eax,0x1
c000f6cb:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f6d0:	e9 b3 01 00 00       	jmp    c000f888 <scanMADT()+0x494>
c000f6d5:	8d 76 00             	lea    esi,[esi+0x0]
c000f6d8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f6dd:	83 f8 02             	cmp    eax,0x2
c000f6e0:	0f 85 ea 00 00 00    	jne    c000f7d0 <scanMADT()+0x3dc>
c000f6e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6ea:	8d 50 01             	lea    edx,[eax+0x1]
c000f6ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f6f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f6f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f6f9:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f6fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f701:	8d 50 01             	lea    edx,[eax+0x1]
c000f704:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f708:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f70c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f710:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f714:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f718:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f71c:	01 d0                	add    eax,edx
c000f71e:	83 c0 2c             	add    eax,0x2c
c000f721:	8a 00                	mov    al,BYTE PTR [eax]
c000f723:	0f b6 d0             	movzx  edx,al
c000f726:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f72a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f72d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f731:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f735:	0f b6 c0             	movzx  eax,al
c000f738:	c1 e0 08             	shl    eax,0x8
c000f73b:	89 d1                	mov    ecx,edx
c000f73d:	09 c1                	or     ecx,eax
c000f73f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f743:	8d 50 02             	lea    edx,[eax+0x2]
c000f746:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f74a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f74e:	0f b6 c0             	movzx  eax,al
c000f751:	c1 e0 10             	shl    eax,0x10
c000f754:	09 c1                	or     ecx,eax
c000f756:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f75a:	8d 50 03             	lea    edx,[eax+0x3]
c000f75d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f761:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f765:	0f b6 c0             	movzx  eax,al
c000f768:	c1 e0 18             	shl    eax,0x18
c000f76b:	09 c8                	or     eax,ecx
c000f76d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f771:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f776:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f77a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f77e:	01 d0                	add    eax,edx
c000f780:	83 c0 2c             	add    eax,0x2c
c000f783:	8a 00                	mov    al,BYTE PTR [eax]
c000f785:	0f b6 c0             	movzx  eax,al
c000f788:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f78c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f78f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f793:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f797:	0f b6 d2             	movzx  edx,dl
c000f79a:	c1 e2 08             	shl    edx,0x8
c000f79d:	09 d0                	or     eax,edx
c000f79f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f7a4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f7a9:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f7ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f7b2:	88 90 68 36 02 c0    	mov    BYTE PTR [eax-0x3ffdc998],dl
c000f7b8:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f7bd:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f7c2:	66 89 84 12 c0 bb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4440],ax
c000f7ca:	e9 b9 00 00 00       	jmp    c000f888 <scanMADT()+0x494>
c000f7cf:	90                   	nop
c000f7d0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f7d5:	83 f8 04             	cmp    eax,0x4
c000f7d8:	0f 85 9a 00 00 00    	jne    c000f878 <scanMADT()+0x484>
c000f7de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7e2:	8d 50 01             	lea    edx,[eax+0x1]
c000f7e5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f7e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7ed:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f7f1:	0f b6 c0             	movzx  eax,al
c000f7f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f7f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f800:	01 d0                	add    eax,edx
c000f802:	83 c0 2c             	add    eax,0x2c
c000f805:	8a 00                	mov    al,BYTE PTR [eax]
c000f807:	0f b6 d0             	movzx  edx,al
c000f80a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f80e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f811:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f815:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f819:	0f b6 c0             	movzx  eax,al
c000f81c:	c1 e0 08             	shl    eax,0x8
c000f81f:	09 d0                	or     eax,edx
c000f821:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f825:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f82a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f82e:	8d 50 01             	lea    edx,[eax+0x1]
c000f831:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f835:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f839:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f83d:	0f b6 c0             	movzx  eax,al
c000f840:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f848:	c1 e0 08             	shl    eax,0x8
c000f84b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f84f:	89 c1                	mov    ecx,eax
c000f851:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f855:	c1 e0 18             	shl    eax,0x18
c000f858:	89 c3                	mov    ebx,eax
c000f85a:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f85f:	8d 50 01             	lea    edx,[eax+0x1]
c000f862:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f868:	09 d9                	or     ecx,ebx
c000f86a:	89 ca                	mov    edx,ecx
c000f86c:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f873:	eb 13                	jmp    c000f888 <scanMADT()+0x494>
c000f875:	8d 76 00             	lea    esi,[esi+0x0]
c000f878:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f87d:	83 f8 05             	cmp    eax,0x5
c000f880:	75 06                	jne    c000f888 <scanMADT()+0x494>
c000f882:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f887:	90                   	nop
c000f888:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f88d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f891:	01 d0                	add    eax,edx
c000f893:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f897:	e9 50 fc ff ff       	jmp    c000f4ec <scanMADT()+0xf8>
c000f89c:	90                   	nop
c000f89d:	eb 05                	jmp    c000f8a4 <scanMADT()+0x4b0>
c000f89f:	90                   	nop
c000f8a0:	90                   	nop
c000f8a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8a4:	83 c4 38             	add    esp,0x38
c000f8a7:	5b                   	pop    ebx
c000f8a8:	c3                   	ret    
c000f8a9:	90                   	nop
c000f8aa:	66 90                	xchg   ax,ax

c000f8ac <ACPI::ACPI()>:
c000f8ac:	83 ec 0c             	sub    esp,0xc
c000f8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8b3:	83 ec 08             	sub    esp,0x8
c000f8b6:	68 71 1f 02 c0       	push   0xc0021f71
c000f8bb:	50                   	push   eax
c000f8bc:	e8 65 d2 ff ff       	call   c000cb26 <Device::Device(char const*)>
c000f8c1:	83 c4 10             	add    esp,0x10
c000f8c4:	ba c4 20 02 c0       	mov    edx,0xc00220c4
c000f8c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8cd:	89 10                	mov    DWORD PTR [eax],edx
c000f8cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8d3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8de:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ec:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f8f6:	e8 f9 fa ff ff       	call   c000f3f4 <scanMADT()>
c000f8fb:	90                   	nop
c000f8fc:	83 c4 0c             	add    esp,0xc
c000f8ff:	c3                   	ret    

c000f900 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f900:	83 ec 2c             	sub    esp,0x2c
c000f903:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f907:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f90b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f90f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f913:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f918:	88 d0                	mov    al,dl
c000f91a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f91e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f923:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f92b:	90                   	nop
c000f92c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f930:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f936:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f93a:	0f 8d b0 00 00 00    	jge    c000f9f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f940:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f944:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f948:	83 c2 2a             	add    edx,0x2a
c000f94b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f94f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f954:	0f b7 c0             	movzx  eax,ax
c000f957:	39 c2                	cmp    edx,eax
c000f959:	0f 85 85 00 00 00    	jne    c000f9e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f95f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f963:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f967:	83 c2 2a             	add    edx,0x2a
c000f96a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f96e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f973:	0f b6 c0             	movzx  eax,al
c000f976:	39 c2                	cmp    edx,eax
c000f978:	75 6a                	jne    c000f9e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f97a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f97f:	85 c0                	test   eax,eax
c000f981:	74 3d                	je     c000f9c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f983:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f987:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f98b:	83 c2 2a             	add    edx,0x2a
c000f98e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f992:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f999:	39 c2                	cmp    edx,eax
c000f99b:	74 13                	je     c000f9b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f99d:	83 ec 0c             	sub    esp,0xc
c000f9a0:	68 ec 1e 02 c0       	push   0xc0021eec
c000f9a5:	e8 3d 1c 00 00       	call   c00115e7 <KePanic(char const*)>
c000f9aa:	83 c4 10             	add    esp,0x10
c000f9ad:	8d 76 00             	lea    esi,[esi+0x0]
c000f9b0:	83 ec 0c             	sub    esp,0xc
c000f9b3:	68 76 1f 02 c0       	push   0xc0021f76
c000f9b8:	e8 2a 1c 00 00       	call   c00115e7 <KePanic(char const*)>
c000f9bd:	83 c4 10             	add    esp,0x10
c000f9c0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f9c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9cc:	83 c2 2a             	add    edx,0x2a
c000f9cf:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f9d3:	8b 02                	mov    eax,DWORD PTR [edx]
c000f9d5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f9d8:	89 01                	mov    DWORD PTR [ecx],eax
c000f9da:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f9dd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f9e2:	66 90                	xchg   ax,ax
c000f9e4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f9e9:	e9 3e ff ff ff       	jmp    c000f92c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f9ee:	66 90                	xchg   ax,ax
c000f9f0:	90                   	nop
c000f9f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9f5:	83 c4 2c             	add    esp,0x2c
c000f9f8:	c2 04 00             	ret    0x4
c000f9fb:	90                   	nop

c000f9fc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f9fc:	83 ec 1c             	sub    esp,0x1c
c000f9ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa03:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fa07:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fa0b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fa10:	88 c8                	mov    al,cl
c000fa12:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fa16:	88 d0                	mov    al,dl
c000fa18:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fa1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa20:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa2a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa2d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000fa31:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000fa35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa39:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa3f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fa43:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000fa46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa4a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000fa4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa53:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa59:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000fa5d:	83 c0 01             	add    eax,0x1
c000fa60:	88 c1                	mov    cl,al
c000fa62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa66:	83 c2 2a             	add    edx,0x2a
c000fa69:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fa6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa71:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa7b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa7e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fa82:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000fa86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa8a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa90:	8d 50 01             	lea    edx,[eax+0x1]
c000fa93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa97:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fa9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faa1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000faa7:	3d 00 02 00 00       	cmp    eax,0x200
c000faac:	75 12                	jne    c000fac0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000faae:	83 ec 0c             	sub    esp,0xc
c000fab1:	68 85 1f 02 c0       	push   0xc0021f85
c000fab6:	e8 2c 1b 00 00       	call   c00115e7 <KePanic(char const*)>
c000fabb:	83 c4 10             	add    esp,0x10
c000fabe:	66 90                	xchg   ax,ax
c000fac0:	90                   	nop
c000fac1:	83 c4 1c             	add    esp,0x1c
c000fac4:	c3                   	ret    
c000fac5:	90                   	nop
c000fac6:	66 90                	xchg   ax,ax

c000fac8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fac8:	b8 00 00 00 00       	mov    eax,0x0
c000facd:	c3                   	ret    
c000face:	66 90                	xchg   ax,ax

c000fad0 <ACPI::detectPCI()>:
c000fad0:	53                   	push   ebx
c000fad1:	83 ec 28             	sub    esp,0x28
c000fad4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fad9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fade:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fae3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fae9:	83 e0 04             	and    eax,0x4
c000faec:	0f b6 c0             	movzx  eax,al
c000faef:	85 c0                	test   eax,eax
c000faf1:	74 2d                	je     c000fb20 <ACPI::detectPCI()+0x50>
c000faf3:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000faf8:	83 ec 08             	sub    esp,0x8
c000fafb:	68 a2 1f 02 c0       	push   0xc0021fa2
c000fb00:	50                   	push   eax
c000fb01:	e8 6e f8 ff ff       	call   c000f374 <findDataTable(unsigned char*, char*)>
c000fb06:	83 c4 10             	add    esp,0x10
c000fb09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb0d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fb12:	74 0c                	je     c000fb20 <ACPI::detectPCI()+0x50>
c000fb14:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb19:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb1e:	66 90                	xchg   ax,ax
c000fb20:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fb28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb2c:	8a 00                	mov    al,BYTE PTR [eax]
c000fb2e:	0f b6 c0             	movzx  eax,al
c000fb31:	83 f8 01             	cmp    eax,0x1
c000fb34:	75 0e                	jne    c000fb44 <ACPI::detectPCI()+0x74>
c000fb36:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb3b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb40:	eb 2e                	jmp    c000fb70 <ACPI::detectPCI()+0xa0>
c000fb42:	66 90                	xchg   ax,ax
c000fb44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb48:	8a 00                	mov    al,BYTE PTR [eax]
c000fb4a:	0f b6 c0             	movzx  eax,al
c000fb4d:	83 f8 02             	cmp    eax,0x2
c000fb50:	75 1e                	jne    c000fb70 <ACPI::detectPCI()+0xa0>
c000fb52:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb57:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fb5c:	85 c0                	test   eax,eax
c000fb5e:	74 10                	je     c000fb70 <ACPI::detectPCI()+0xa0>
c000fb60:	83 ec 0c             	sub    esp,0xc
c000fb63:	68 1c 1f 02 c0       	push   0xc0021f1c
c000fb68:	e8 7a 1a 00 00       	call   c00115e7 <KePanic(char const*)>
c000fb6d:	83 c4 10             	add    esp,0x10
c000fb70:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fb74:	83 f0 01             	xor    eax,0x1
c000fb77:	0f b6 c0             	movzx  eax,al
c000fb7a:	85 c0                	test   eax,eax
c000fb7c:	74 46                	je     c000fbc4 <ACPI::detectPCI()+0xf4>
c000fb7e:	e8 ad 05 ff ff       	call   c0000130 <manualPCIProbe>
c000fb83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fb87:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fb8c:	75 0e                	jne    c000fb9c <ACPI::detectPCI()+0xcc>
c000fb8e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb93:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb98:	eb 2a                	jmp    c000fbc4 <ACPI::detectPCI()+0xf4>
c000fb9a:	66 90                	xchg   ax,ax
c000fb9c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fba1:	75 21                	jne    c000fbc4 <ACPI::detectPCI()+0xf4>
c000fba3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fba8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fbad:	85 c0                	test   eax,eax
c000fbaf:	74 13                	je     c000fbc4 <ACPI::detectPCI()+0xf4>
c000fbb1:	83 ec 0c             	sub    esp,0xc
c000fbb4:	68 1c 1f 02 c0       	push   0xc0021f1c
c000fbb9:	e8 29 1a 00 00       	call   c00115e7 <KePanic(char const*)>
c000fbbe:	83 c4 10             	add    esp,0x10
c000fbc1:	8d 76 00             	lea    esi,[esi+0x0]
c000fbc4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fbc9:	85 c0                	test   eax,eax
c000fbcb:	0f 84 87 00 00 00    	je     c000fc58 <ACPI::detectPCI()+0x188>
c000fbd1:	83 ec 0c             	sub    esp,0xc
c000fbd4:	68 a7 1f 02 c0       	push   0xc0021fa7
c000fbd9:	e8 09 13 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c000fbde:	83 c4 10             	add    esp,0x10
c000fbe1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fbe9:	83 ec 0c             	sub    esp,0xc
c000fbec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fbf0:	e8 c1 7e ff ff       	call   c0007ab6 <malloc>
c000fbf5:	83 c4 10             	add    esp,0x10
c000fbf8:	89 c3                	mov    ebx,eax
c000fbfa:	83 ec 0c             	sub    esp,0xc
c000fbfd:	53                   	push   ebx
c000fbfe:	e8 5d b5 00 00       	call   c001b160 <PCI::PCI()>
c000fc03:	83 c4 10             	add    esp,0x10
c000fc06:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fc0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc0e:	83 ec 08             	sub    esp,0x8
c000fc11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc15:	50                   	push   eax
c000fc16:	e8 73 cd ff ff       	call   c000c98e <Device::addChild(Device*)>
c000fc1b:	83 c4 10             	add    esp,0x10
c000fc1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc22:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc24:	83 c0 08             	add    eax,0x8
c000fc27:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc29:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fc2e:	85 d2                	test   edx,edx
c000fc30:	74 0a                	je     c000fc3c <ACPI::detectPCI()+0x16c>
c000fc32:	ba 01 00 00 00       	mov    edx,0x1
c000fc37:	eb 0b                	jmp    c000fc44 <ACPI::detectPCI()+0x174>
c000fc39:	8d 76 00             	lea    esi,[esi+0x0]
c000fc3c:	ba 02 00 00 00       	mov    edx,0x2
c000fc41:	8d 76 00             	lea    esi,[esi+0x0]
c000fc44:	6a 00                	push   0x0
c000fc46:	6a 00                	push   0x0
c000fc48:	52                   	push   edx
c000fc49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc4d:	ff d0                	call   eax
c000fc4f:	83 c4 10             	add    esp,0x10
c000fc52:	e9 91 00 00 00       	jmp    c000fce8 <ACPI::detectPCI()+0x218>
c000fc57:	90                   	nop
c000fc58:	83 ec 0c             	sub    esp,0xc
c000fc5b:	68 bf 1f 02 c0       	push   0xc0021fbf
c000fc60:	e8 82 12 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c000fc65:	83 c4 10             	add    esp,0x10
c000fc68:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fc6f:	83 ec 0c             	sub    esp,0xc
c000fc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc76:	e8 3b 7e ff ff       	call   c0007ab6 <malloc>
c000fc7b:	83 c4 10             	add    esp,0x10
c000fc7e:	89 c3                	mov    ebx,eax
c000fc80:	83 ec 0c             	sub    esp,0xc
c000fc83:	53                   	push   ebx
c000fc84:	e8 71 c0 00 00       	call   c001bcfa <IDE::IDE()>
c000fc89:	83 c4 10             	add    esp,0x10
c000fc8c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fc90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc94:	83 ec 08             	sub    esp,0x8
c000fc97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fc9b:	50                   	push   eax
c000fc9c:	e8 ed cc ff ff       	call   c000c98e <Device::addChild(Device*)>
c000fca1:	83 c4 10             	add    esp,0x10
c000fca4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fca8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fcb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcb6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fcbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcc3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fccc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcd0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd2:	83 c0 08             	add    eax,0x8
c000fcd5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd7:	6a 00                	push   0x0
c000fcd9:	6a 00                	push   0x0
c000fcdb:	6a 00                	push   0x0
c000fcdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fce1:	ff d0                	call   eax
c000fce3:	83 c4 10             	add    esp,0x10
c000fce6:	66 90                	xchg   ax,ax
c000fce8:	90                   	nop
c000fce9:	83 c4 28             	add    esp,0x28
c000fcec:	5b                   	pop    ebx
c000fced:	c3                   	ret    
c000fcee:	66 90                	xchg   ax,ax

c000fcf0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fcf0:	83 ec 1c             	sub    esp,0x1c
c000fcf3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcf7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fcfa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fcfe:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd03:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd08:	83 ec 08             	sub    esp,0x8
c000fd0b:	52                   	push   edx
c000fd0c:	50                   	push   eax
c000fd0d:	e8 66 74 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000fd12:	83 c4 10             	add    esp,0x10
c000fd15:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fd19:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd1e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd23:	83 ec 04             	sub    esp,0x4
c000fd26:	6a 01                	push   0x1
c000fd28:	52                   	push   edx
c000fd29:	50                   	push   eax
c000fd2a:	e8 63 75 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fd2f:	83 c4 10             	add    esp,0x10
c000fd32:	90                   	nop
c000fd33:	83 c4 1c             	add    esp,0x1c
c000fd36:	c3                   	ret    
c000fd37:	90                   	nop

c000fd38 <ACPI::sleep()>:
c000fd38:	83 ec 0c             	sub    esp,0xc
c000fd3b:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd40:	85 c0                	test   eax,eax
c000fd42:	74 08                	je     c000fd4c <ACPI::sleep()+0x14>
c000fd44:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd49:	ff d0                	call   eax
c000fd4b:	90                   	nop
c000fd4c:	90                   	nop
c000fd4d:	83 c4 0c             	add    esp,0xc
c000fd50:	c3                   	ret    
c000fd51:	90                   	nop
c000fd52:	66 90                	xchg   ax,ax

c000fd54 <ACPI::open(int, int, void*)>:
c000fd54:	57                   	push   edi
c000fd55:	56                   	push   esi
c000fd56:	53                   	push   ebx
c000fd57:	81 ec 70 01 00 00    	sub    esp,0x170
c000fd5d:	83 ec 0c             	sub    esp,0xc
c000fd60:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fd67:	e8 64 fd ff ff       	call   c000fad0 <ACPI::detectPCI()>
c000fd6c:	83 c4 10             	add    esp,0x10
c000fd6f:	83 ec 0c             	sub    esp,0xc
c000fd72:	68 44 1f 02 c0       	push   0xc0021f44
c000fd77:	e8 6b 11 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c000fd7c:	83 c4 10             	add    esp,0x10
c000fd7f:	b8 4c 05 00 00       	mov    eax,0x54c
c000fd84:	8a 00                	mov    al,BYTE PTR [eax]
c000fd86:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fd8d:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fd95:	83 f8 01             	cmp    eax,0x1
c000fd98:	75 12                	jne    c000fdac <ACPI::open(int, int, void*)+0x58>
c000fd9a:	83 ec 0c             	sub    esp,0xc
c000fd9d:	68 7d 18 02 c0       	push   0xc002187d
c000fda2:	e8 06 4e 00 00       	call   c0014bad <Thr::loadKernelSymbolTable(char const*)>
c000fda7:	83 c4 10             	add    esp,0x10
c000fdaa:	eb 34                	jmp    c000fde0 <ACPI::open(int, int, void*)+0x8c>
c000fdac:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fdb4:	3d bb 00 00 00       	cmp    eax,0xbb
c000fdb9:	75 15                	jne    c000fdd0 <ACPI::open(int, int, void*)+0x7c>
c000fdbb:	83 ec 0c             	sub    esp,0xc
c000fdbe:	68 d4 1f 02 c0       	push   0xc0021fd4
c000fdc3:	e8 e5 4d 00 00       	call   c0014bad <Thr::loadKernelSymbolTable(char const*)>
c000fdc8:	83 c4 10             	add    esp,0x10
c000fdcb:	eb 13                	jmp    c000fde0 <ACPI::open(int, int, void*)+0x8c>
c000fdcd:	8d 76 00             	lea    esi,[esi+0x0]
c000fdd0:	83 ec 0c             	sub    esp,0xc
c000fdd3:	68 f2 1f 02 c0       	push   0xc0021ff2
c000fdd8:	e8 0a 18 00 00       	call   c00115e7 <KePanic(char const*)>
c000fddd:	83 c4 10             	add    esp,0x10
c000fde0:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fde8:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fdf3:	83 ec 0c             	sub    esp,0xc
c000fdf6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fdfd:	e8 b4 7c ff ff       	call   c0007ab6 <malloc>
c000fe02:	83 c4 10             	add    esp,0x10
c000fe05:	89 c3                	mov    ebx,eax
c000fe07:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fe0c:	83 ec 04             	sub    esp,0x4
c000fe0f:	50                   	push   eax
c000fe10:	68 0c 20 02 c0       	push   0xc002200c
c000fe15:	53                   	push   ebx
c000fe16:	e8 fb bc ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c000fe1b:	83 c4 10             	add    esp,0x10
c000fe1e:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fe25:	83 ec 08             	sub    esp,0x8
c000fe28:	6a 01                	push   0x1
c000fe2a:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fe31:	e8 fe bc ff ff       	call   c000bb34 <File::open(FileOpenMode)>
c000fe36:	83 c4 10             	add    esp,0x10
c000fe39:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fe40:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fe48:	75 16                	jne    c000fe60 <ACPI::open(int, int, void*)+0x10c>
c000fe4a:	83 ec 0c             	sub    esp,0xc
c000fe4d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fe54:	e8 39 bd ff ff       	call   c000bb92 <File::close()>
c000fe59:	83 c4 10             	add    esp,0x10
c000fe5c:	eb 0a                	jmp    c000fe68 <ACPI::open(int, int, void*)+0x114>
c000fe5e:	66 90                	xchg   ax,ax
c000fe60:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fe68:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fe70:	74 1e                	je     c000fe90 <ACPI::open(int, int, void*)+0x13c>
c000fe72:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fe79:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe7b:	83 c0 08             	add    eax,0x8
c000fe7e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe80:	83 ec 0c             	sub    esp,0xc
c000fe83:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fe8a:	ff d0                	call   eax
c000fe8c:	83 c4 10             	add    esp,0x10
c000fe8f:	90                   	nop
c000fe90:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fe97:	83 f0 01             	xor    eax,0x1
c000fe9a:	0f b6 c0             	movzx  eax,al
c000fe9d:	85 c0                	test   eax,eax
c000fe9f:	74 43                	je     c000fee4 <ACPI::open(int, int, void*)+0x190>
c000fea1:	83 ec 0c             	sub    esp,0xc
c000fea4:	68 2a 20 02 c0       	push   0xc002202a
c000fea9:	e8 39 10 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c000feae:	83 c4 10             	add    esp,0x10
c000feb1:	83 ec 04             	sub    esp,0x4
c000feb4:	6a 0c                	push   0xc
c000feb6:	68 45 20 02 c0       	push   0xc0022045
c000febb:	68 56 20 02 c0       	push   0xc0022056
c000fec0:	e8 6b 3f 00 00       	call   c0013e30 <Reg::readIntWithDefault(char*, char*, int)>
c000fec5:	83 c4 10             	add    esp,0x10
c000fec8:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fecf:	83 ec 0c             	sub    esp,0xc
c000fed2:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fed9:	e8 5e 99 ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000fede:	83 c4 10             	add    esp,0x10
c000fee1:	8d 76 00             	lea    esi,[esi+0x0]
c000fee4:	83 ec 0c             	sub    esp,0xc
c000fee7:	68 f5 0a 02 c0       	push   0xc0020af5
c000feec:	e8 f6 0f 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c000fef1:	83 c4 10             	add    esp,0x10
c000fef4:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fefb:	83 ec 08             	sub    esp,0x8
c000fefe:	6a 13                	push   0x13
c000ff00:	50                   	push   eax
c000ff01:	e8 a0 cd ff ff       	call   c000cca6 <getDevicesOfType(DeviceType)>
c000ff06:	83 c4 0c             	add    esp,0xc
c000ff09:	8d 76 00             	lea    esi,[esi+0x0]
c000ff0c:	83 ec 0c             	sub    esp,0xc
c000ff0f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff16:	50                   	push   eax
c000ff17:	e8 c4 ff 00 00       	call   c001fee0 <LinkedList<Device>::isEmpty()>
c000ff1c:	83 c4 10             	add    esp,0x10
c000ff1f:	83 f0 01             	xor    eax,0x1
c000ff22:	0f b6 c0             	movzx  eax,al
c000ff25:	85 c0                	test   eax,eax
c000ff27:	0f 84 47 01 00 00    	je     c0010074 <ACPI::open(int, int, void*)+0x320>
c000ff2d:	83 ec 0c             	sub    esp,0xc
c000ff30:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff37:	50                   	push   eax
c000ff38:	e8 bf ff 00 00       	call   c001fefc <LinkedList<Device>::getFirstElement()>
c000ff3d:	83 c4 10             	add    esp,0x10
c000ff40:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ff47:	83 ec 0c             	sub    esp,0xc
c000ff4a:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff51:	50                   	push   eax
c000ff52:	e8 ad ff 00 00       	call   c001ff04 <LinkedList<Device>::removeFirst()>
c000ff57:	83 c4 10             	add    esp,0x10
c000ff5a:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ff61:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ff68:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ff6f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff73:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ff79:	ba 09 00 00 00       	mov    edx,0x9
c000ff7e:	fc                   	cld    
c000ff7f:	89 c7                	mov    edi,eax
c000ff81:	89 de                	mov    esi,ebx
c000ff83:	89 d1                	mov    ecx,edx
c000ff85:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ff87:	83 ec 08             	sub    esp,0x8
c000ff8a:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ff8e:	50                   	push   eax
c000ff8f:	83 ec 24             	sub    esp,0x24
c000ff92:	89 e0                	mov    eax,esp
c000ff94:	89 c3                	mov    ebx,eax
c000ff96:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ff9a:	ba 09 00 00 00       	mov    edx,0x9
c000ff9f:	89 df                	mov    edi,ebx
c000ffa1:	89 c6                	mov    esi,eax
c000ffa3:	89 d1                	mov    ecx,edx
c000ffa5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ffa7:	e8 9e b6 00 00       	call   c001b64a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ffac:	83 c4 30             	add    esp,0x30
c000ffaf:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ffb6:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ffbe:	0f 84 48 ff ff ff    	je     c000ff0c <ACPI::open(int, int, void*)+0x1b8>
c000ffc4:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ffcf:	83 ec 0c             	sub    esp,0xc
c000ffd2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ffd9:	e8 d8 7a ff ff       	call   c0007ab6 <malloc>
c000ffde:	83 c4 10             	add    esp,0x10
c000ffe1:	89 c3                	mov    ebx,eax
c000ffe3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000ffe8:	83 ec 04             	sub    esp,0x4
c000ffeb:	50                   	push   eax
c000ffec:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fff3:	53                   	push   ebx
c000fff4:	e8 1d bb ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c000fff9:	83 c4 10             	add    esp,0x10
c000fffc:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0010003:	83 ec 0c             	sub    esp,0xc
c0010006:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001000d:	e8 e6 bd ff ff       	call   c000bdf8 <File::exists()>
c0010012:	83 c4 10             	add    esp,0x10
c0010015:	0f b6 c0             	movzx  eax,al
c0010018:	85 c0                	test   eax,eax
c001001a:	74 28                	je     c0010044 <ACPI::open(int, int, void*)+0x2f0>
c001001c:	83 ec 08             	sub    esp,0x8
c001001f:	6a 01                	push   0x1
c0010021:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0010028:	e8 fa 55 00 00       	call   c0015627 <Thr::loadDLL(char const*, bool)>
c001002d:	83 c4 10             	add    esp,0x10
c0010030:	83 ec 08             	sub    esp,0x8
c0010033:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001003a:	50                   	push   eax
c001003b:	e8 18 58 00 00       	call   c0015858 <Thr::executeDLL(unsigned long, void*)>
c0010040:	83 c4 10             	add    esp,0x10
c0010043:	90                   	nop
c0010044:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001004c:	0f 84 ba fe ff ff    	je     c000ff0c <ACPI::open(int, int, void*)+0x1b8>
c0010052:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0010059:	8b 00                	mov    eax,DWORD PTR [eax]
c001005b:	83 c0 08             	add    eax,0x8
c001005e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010060:	83 ec 0c             	sub    esp,0xc
c0010063:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001006a:	ff d0                	call   eax
c001006c:	83 c4 10             	add    esp,0x10
c001006f:	e9 98 fe ff ff       	jmp    c000ff0c <ACPI::open(int, int, void*)+0x1b8>
c0010074:	83 ec 0c             	sub    esp,0xc
c0010077:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001007e:	50                   	push   eax
c001007f:	e8 58 fe 00 00       	call   c001fedc <LinkedList<Device>::~LinkedList()>
c0010084:	83 c4 10             	add    esp,0x10
c0010087:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c001008d:	83 ec 08             	sub    esp,0x8
c0010090:	6a 01                	push   0x1
c0010092:	68 5d 20 02 c0       	push   0xc002205d
c0010097:	e8 8b 55 00 00       	call   c0015627 <Thr::loadDLL(char const*, bool)>
c001009c:	83 c4 10             	add    esp,0x10
c001009f:	83 ec 08             	sub    esp,0x8
c00100a2:	53                   	push   ebx
c00100a3:	50                   	push   eax
c00100a4:	e8 af 57 00 00       	call   c0015858 <Thr::executeDLL(unsigned long, void*)>
c00100a9:	83 c4 10             	add    esp,0x10
c00100ac:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00100b1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00100b7:	83 e0 04             	and    eax,0x4
c00100ba:	0f b6 c0             	movzx  eax,al
c00100bd:	85 c0                	test   eax,eax
c00100bf:	0f 84 1b 01 00 00    	je     c00101e0 <ACPI::open(int, int, void*)+0x48c>
c00100c5:	83 ec 0c             	sub    esp,0xc
c00100c8:	68 7a 20 02 c0       	push   0xc002207a
c00100cd:	e8 15 0e 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c00100d2:	83 c4 10             	add    esp,0x10
c00100d5:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00100e0:	83 ec 0c             	sub    esp,0xc
c00100e3:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00100ea:	e8 c7 79 ff ff       	call   c0007ab6 <malloc>
c00100ef:	83 c4 10             	add    esp,0x10
c00100f2:	89 c3                	mov    ebx,eax
c00100f4:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00100f9:	83 ec 04             	sub    esp,0x4
c00100fc:	50                   	push   eax
c00100fd:	68 97 20 02 c0       	push   0xc0022097
c0010102:	53                   	push   ebx
c0010103:	e8 0e ba ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c0010108:	83 c4 10             	add    esp,0x10
c001010b:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0010112:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001011a:	74 20                	je     c001013c <ACPI::open(int, int, void*)+0x3e8>
c001011c:	83 ec 0c             	sub    esp,0xc
c001011f:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010126:	e8 cd bc ff ff       	call   c000bdf8 <File::exists()>
c001012b:	83 c4 10             	add    esp,0x10
c001012e:	0f b6 c0             	movzx  eax,al
c0010131:	85 c0                	test   eax,eax
c0010133:	74 07                	je     c001013c <ACPI::open(int, int, void*)+0x3e8>
c0010135:	b0 01                	mov    al,0x1
c0010137:	eb 07                	jmp    c0010140 <ACPI::open(int, int, void*)+0x3ec>
c0010139:	8d 76 00             	lea    esi,[esi+0x0]
c001013c:	b0 00                	mov    al,0x0
c001013e:	66 90                	xchg   ax,ax
c0010140:	0f b6 c0             	movzx  eax,al
c0010143:	85 c0                	test   eax,eax
c0010145:	74 25                	je     c001016c <ACPI::open(int, int, void*)+0x418>
c0010147:	83 ec 08             	sub    esp,0x8
c001014a:	6a 01                	push   0x1
c001014c:	68 97 20 02 c0       	push   0xc0022097
c0010151:	e8 d1 54 00 00       	call   c0015627 <Thr::loadDLL(char const*, bool)>
c0010156:	83 c4 10             	add    esp,0x10
c0010159:	83 ec 08             	sub    esp,0x8
c001015c:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0010163:	50                   	push   eax
c0010164:	e8 ef 56 00 00       	call   c0015858 <Thr::executeDLL(unsigned long, void*)>
c0010169:	83 c4 10             	add    esp,0x10
c001016c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0010174:	74 2a                	je     c00101a0 <ACPI::open(int, int, void*)+0x44c>
c0010176:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001017e:	74 20                	je     c00101a0 <ACPI::open(int, int, void*)+0x44c>
c0010180:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0010187:	8b 00                	mov    eax,DWORD PTR [eax]
c0010189:	83 c0 08             	add    eax,0x8
c001018c:	8b 00                	mov    eax,DWORD PTR [eax]
c001018e:	83 ec 0c             	sub    esp,0xc
c0010191:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0010198:	ff d0                	call   eax
c001019a:	83 c4 10             	add    esp,0x10
c001019d:	8d 76 00             	lea    esi,[esi+0x0]
c00101a0:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c00101a5:	83 ec 08             	sub    esp,0x8
c00101a8:	68 b4 20 02 c0       	push   0xc00220b4
c00101ad:	50                   	push   eax
c00101ae:	e8 c1 f1 ff ff       	call   c000f374 <findDataTable(unsigned char*, char*)>
c00101b3:	83 c4 10             	add    esp,0x10
c00101b6:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00101bd:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00101c5:	74 19                	je     c00101e0 <ACPI::open(int, int, void*)+0x48c>
c00101c7:	83 ec 08             	sub    esp,0x8
c00101ca:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00101d1:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00101d8:	e8 13 fb ff ff       	call   c000fcf0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00101dd:	83 c4 10             	add    esp,0x10
c00101e0:	b8 00 00 00 00       	mov    eax,0x0
c00101e5:	81 c4 70 01 00 00    	add    esp,0x170
c00101eb:	5b                   	pop    ebx
c00101ec:	5e                   	pop    esi
c00101ed:	5f                   	pop    edi
c00101ee:	c3                   	ret    
c00101ef:	90                   	nop

c00101f0 <CPU::close(int, int, void*)>:
c00101f0:	31 c0                	xor    eax,eax
c00101f2:	c3                   	ret    
c00101f3:	90                   	nop

c00101f4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00101f4:	60                   	pusha  
c00101f5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00101f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00101fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010201:	9c                   	pushf  
c0010202:	fa                   	cli    
c0010203:	0f 09                	wbinvd 
c0010205:	0f 30                	wrmsr  
c0010207:	9d                   	popf   
c0010208:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001020c:	89 02                	mov    DWORD PTR [edx],eax
c001020e:	61                   	popa   
c001020f:	c3                   	ret    

c0010210 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010210:	60                   	pusha  
c0010211:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010215:	9c                   	pushf  
c0010216:	fa                   	cli    
c0010217:	0f 09                	wbinvd 
c0010219:	31 c0                	xor    eax,eax
c001021b:	31 d2                	xor    edx,edx
c001021d:	0f 32                	rdmsr  
c001021f:	9d                   	popf   
c0010220:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010224:	89 02                	mov    DWORD PTR [edx],eax
c0010226:	61                   	popa   
c0010227:	c3                   	ret    

c0010228 <CPU::AMD_K6_writeback(int, int, int)>:
c0010228:	56                   	push   esi
c0010229:	53                   	push   ebx
c001022a:	83 ec 10             	sub    esp,0x10
c001022d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010231:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0010236:	75 5d                	jne    c0010295 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010238:	83 f8 08             	cmp    eax,0x8
c001023b:	75 09                	jne    c0010246 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001023d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0010242:	7e 13                	jle    c0010257 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010244:	eb 30                	jmp    c0010276 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010246:	83 f8 06             	cmp    eax,0x6
c0010249:	7c 4a                	jl     c0010295 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001024b:	83 f8 07             	cmp    eax,0x7
c001024e:	7e 07                	jle    c0010257 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010250:	83 f8 09             	cmp    eax,0x9
c0010253:	74 21                	je     c0010276 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010255:	eb 3e                	jmp    c0010295 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010257:	89 e6                	mov    esi,esp
c0010259:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c001025f:	56                   	push   esi
c0010260:	c1 eb 15             	shr    ebx,0x15
c0010263:	68 82 00 00 c0       	push   0xc0000082
c0010268:	83 e3 7e             	and    ebx,0x7e
c001026b:	e8 a0 ff ff ff       	call   c0010210 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010270:	56                   	push   esi
c0010271:	6a 00                	push   0x0
c0010273:	53                   	push   ebx
c0010274:	eb 12                	jmp    c0010288 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0010276:	89 e3                	mov    ebx,esp
c0010278:	53                   	push   ebx
c0010279:	68 82 00 00 c0       	push   0xc0000082
c001027e:	e8 8d ff ff ff       	call   c0010210 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010283:	53                   	push   ebx
c0010284:	6a 00                	push   0x0
c0010286:	6a 00                	push   0x0
c0010288:	68 82 00 00 c0       	push   0xc0000082
c001028d:	e8 62 ff ff ff       	call   c00101f4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0010292:	83 c4 18             	add    esp,0x18
c0010295:	83 c4 10             	add    esp,0x10
c0010298:	5b                   	pop    ebx
c0010299:	5e                   	pop    esi
c001029a:	c3                   	ret    
c001029b:	90                   	nop

c001029c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001029c:	55                   	push   ebp
c001029d:	57                   	push   edi
c001029e:	56                   	push   esi
c001029f:	53                   	push   ebx
c00102a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102a4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00102a8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102ac:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00102b0:	39 05 78 36 02 c0    	cmp    DWORD PTR ds:0xc0023678,eax
c00102b6:	75 23                	jne    c00102db <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00102b8:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00102bd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00102c1:	89 06                	mov    DWORD PTR [esi],eax
c00102c3:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00102c8:	89 07                	mov    DWORD PTR [edi],eax
c00102ca:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c00102cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00102d2:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c00102d7:	89 02                	mov    DWORD PTR [edx],eax
c00102d9:	eb 3f                	jmp    c001031a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00102db:	31 c9                	xor    ecx,ecx
c00102dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102e1:	0f a2                	cpuid  
c00102e3:	89 06                	mov    DWORD PTR [esi],eax
c00102e5:	89 1f                	mov    DWORD PTR [edi],ebx
c00102e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00102eb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00102ee:	89 10                	mov    DWORD PTR [eax],edx
c00102f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102f4:	a3 78 36 02 c0       	mov    ds:0xc0023678,eax
c00102f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00102fb:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c0010300:	8b 07                	mov    eax,DWORD PTR [edi]
c0010302:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c0010307:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001030a:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c001030f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010313:	8b 00                	mov    eax,DWORD PTR [eax]
c0010315:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c001031a:	5b                   	pop    ebx
c001031b:	5e                   	pop    esi
c001031c:	5f                   	pop    edi
c001031d:	5d                   	pop    ebp
c001031e:	c3                   	ret    
c001031f:	90                   	nop

c0010320 <CPU::cpuidCheckEDX(unsigned int)>:
c0010320:	83 ec 10             	sub    esp,0x10
c0010323:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010327:	50                   	push   eax
c0010328:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001032c:	50                   	push   eax
c001032d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010331:	50                   	push   eax
c0010332:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010336:	50                   	push   eax
c0010337:	6a 01                	push   0x1
c0010339:	e8 5e ff ff ff       	call   c001029c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001033e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010342:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010346:	0f 95 c0             	setne  al
c0010349:	83 c4 24             	add    esp,0x24
c001034c:	c3                   	ret    
c001034d:	90                   	nop

c001034e <CPU::cpuidCheckECX(unsigned int)>:
c001034e:	83 ec 10             	sub    esp,0x10
c0010351:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010355:	50                   	push   eax
c0010356:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001035a:	50                   	push   eax
c001035b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001035f:	50                   	push   eax
c0010360:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010364:	50                   	push   eax
c0010365:	6a 01                	push   0x1
c0010367:	e8 30 ff ff ff       	call   c001029c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001036c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010370:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010374:	0f 95 c0             	setne  al
c0010377:	83 c4 24             	add    esp,0x24
c001037a:	c3                   	ret    
c001037b:	90                   	nop

c001037c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001037c:	83 ec 10             	sub    esp,0x10
c001037f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010383:	50                   	push   eax
c0010384:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010388:	50                   	push   eax
c0010389:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001038d:	50                   	push   eax
c001038e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010392:	50                   	push   eax
c0010393:	6a 07                	push   0x7
c0010395:	e8 02 ff ff ff       	call   c001029c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001039a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001039e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00103a2:	0f 95 c0             	setne  al
c00103a5:	83 c4 24             	add    esp,0x24
c00103a8:	c3                   	ret    
c00103a9:	90                   	nop

c00103aa <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00103aa:	83 ec 10             	sub    esp,0x10
c00103ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103b1:	50                   	push   eax
c00103b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103b6:	50                   	push   eax
c00103b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103bb:	50                   	push   eax
c00103bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103c0:	50                   	push   eax
c00103c1:	6a 07                	push   0x7
c00103c3:	e8 d4 fe ff ff       	call   c001029c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103cc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00103d0:	0f 95 c0             	setne  al
c00103d3:	83 c4 24             	add    esp,0x24
c00103d6:	c3                   	ret    
c00103d7:	90                   	nop

c00103d8 <CPU::CPU()>:
c00103d8:	83 ec 0c             	sub    esp,0xc
c00103db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103df:	83 ec 08             	sub    esp,0x8
c00103e2:	68 d9 21 02 c0       	push   0xc00221d9
c00103e7:	50                   	push   eax
c00103e8:	e8 39 c7 ff ff       	call   c000cb26 <Device::Device(char const*)>
c00103ed:	83 c4 10             	add    esp,0x10
c00103f0:	ba 6c 22 02 c0       	mov    edx,0xc002226c
c00103f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103f9:	89 10                	mov    DWORD PTR [eax],edx
c00103fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103ff:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0010409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001040d:	05 78 01 00 00       	add    eax,0x178
c0010412:	83 ec 0c             	sub    esp,0xc
c0010415:	50                   	push   eax
c0010416:	e8 41 6f ff ff       	call   c000735c <GDT::GDT()>
c001041b:	83 c4 10             	add    esp,0x10
c001041e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010422:	05 7c 09 00 00       	add    eax,0x97c
c0010427:	83 ec 0c             	sub    esp,0xc
c001042a:	50                   	push   eax
c001042b:	e8 7c 71 ff ff       	call   c00075ac <IDT::IDT()>
c0010430:	83 c4 10             	add    esp,0x10
c0010433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010437:	05 7c 11 00 00       	add    eax,0x117c
c001043c:	83 ec 0c             	sub    esp,0xc
c001043f:	50                   	push   eax
c0010440:	e8 ff 8a ff ff       	call   c0008f44 <TSS::TSS()>
c0010445:	83 c4 10             	add    esp,0x10
c0010448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001044c:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010457:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010461:	90                   	nop
c0010462:	83 c4 0c             	add    esp,0xc
c0010465:	c3                   	ret    

c0010466 <CPU::displayFeatures()>:
c0010466:	c3                   	ret    
c0010467:	90                   	nop

c0010468 <CPU::detectFeatures()>:
c0010468:	55                   	push   ebp
c0010469:	57                   	push   edi
c001046a:	56                   	push   esi
c001046b:	53                   	push   ebx
c001046c:	83 ec 30             	sub    esp,0x30
c001046f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010473:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001047d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010484:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001048a:	6a 0d                	push   0xd
c001048c:	6a 00                	push   0x0
c001048e:	55                   	push   ebp
c001048f:	e8 5c 00 ff ff       	call   c00004f0 <memset>
c0010494:	83 c4 10             	add    esp,0x10
c0010497:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001049c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00104a3:	0f 84 db 05 00 00    	je     c0010a84 <CPU::detectFeatures()+0x61c>
c00104a9:	83 ec 0c             	sub    esp,0xc
c00104ac:	89 ef                	mov    edi,ebp
c00104ae:	6a 10                	push   0x10
c00104b0:	e8 6b fe ff ff       	call   c0010320 <CPU::cpuidCheckEDX(unsigned int)>
c00104b5:	83 e0 01             	and    eax,0x1
c00104b8:	8d 14 00             	lea    edx,[eax+eax*1]
c00104bb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104c1:	83 e0 fd             	and    eax,0xfffffffd
c00104c4:	09 d0                	or     eax,edx
c00104c6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104cc:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00104d3:	e8 48 fe ff ff       	call   c0010320 <CPU::cpuidCheckEDX(unsigned int)>
c00104d8:	83 e0 01             	and    eax,0x1
c00104db:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104e2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104e8:	83 e0 fb             	and    eax,0xfffffffb
c00104eb:	09 d0                	or     eax,edx
c00104ed:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104f3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00104fa:	e8 21 fe ff ff       	call   c0010320 <CPU::cpuidCheckEDX(unsigned int)>
c00104ff:	83 e0 01             	and    eax,0x1
c0010502:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010509:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001050f:	83 e0 f7             	and    eax,0xfffffff7
c0010512:	09 d0                	or     eax,edx
c0010514:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001051a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010521:	e8 fa fd ff ff       	call   c0010320 <CPU::cpuidCheckEDX(unsigned int)>
c0010526:	83 e0 01             	and    eax,0x1
c0010529:	c1 e0 04             	shl    eax,0x4
c001052c:	89 c2                	mov    edx,eax
c001052e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010534:	83 e0 ef             	and    eax,0xffffffef
c0010537:	09 d0                	or     eax,edx
c0010539:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001053f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010546:	e8 d5 fd ff ff       	call   c0010320 <CPU::cpuidCheckEDX(unsigned int)>
c001054b:	83 e0 01             	and    eax,0x1
c001054e:	c1 e0 05             	shl    eax,0x5
c0010551:	89 c2                	mov    edx,eax
c0010553:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010559:	83 e0 df             	and    eax,0xffffffdf
c001055c:	09 d0                	or     eax,edx
c001055e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010564:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001056b:	e8 b0 fd ff ff       	call   c0010320 <CPU::cpuidCheckEDX(unsigned int)>
c0010570:	83 e0 01             	and    eax,0x1
c0010573:	8d 14 00             	lea    edx,[eax+eax*1]
c0010576:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001057c:	83 e0 fd             	and    eax,0xfffffffd
c001057f:	09 d0                	or     eax,edx
c0010581:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010587:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001058e:	e8 8d fd ff ff       	call   c0010320 <CPU::cpuidCheckEDX(unsigned int)>
c0010593:	83 e0 01             	and    eax,0x1
c0010596:	c1 e0 06             	shl    eax,0x6
c0010599:	89 c2                	mov    edx,eax
c001059b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105a1:	83 e0 bf             	and    eax,0xffffffbf
c00105a4:	09 d0                	or     eax,edx
c00105a6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105ac:	58                   	pop    eax
c00105ad:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105b1:	50                   	push   eax
c00105b2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105b6:	50                   	push   eax
c00105b7:	8d 74 24 28          	lea    esi,[esp+0x28]
c00105bb:	56                   	push   esi
c00105bc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105c0:	50                   	push   eax
c00105c1:	6a 00                	push   0x0
c00105c3:	e8 d4 fc ff ff       	call   c001029c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00105c8:	b8 04 00 00 00       	mov    eax,0x4
c00105cd:	89 c1                	mov    ecx,eax
c00105cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105d1:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00105d7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00105db:	89 c1                	mov    ecx,eax
c00105dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105df:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00105e5:	8d 74 24 38          	lea    esi,[esp+0x38]
c00105e9:	89 c1                	mov    ecx,eax
c00105eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105ed:	83 c4 18             	add    esp,0x18
c00105f0:	68 e8 20 02 c0       	push   0xc00220e8
c00105f5:	55                   	push   ebp
c00105f6:	e8 55 01 ff ff       	call   c0000750 <strcmp>
c00105fb:	83 c4 10             	add    esp,0x10
c00105fe:	85 c0                	test   eax,eax
c0010600:	75 0f                	jne    c0010611 <CPU::detectFeatures()+0x1a9>
c0010602:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001060c:	e9 22 02 00 00       	jmp    c0010833 <CPU::detectFeatures()+0x3cb>
c0010611:	50                   	push   eax
c0010612:	50                   	push   eax
c0010613:	68 f5 20 02 c0       	push   0xc00220f5
c0010618:	55                   	push   ebp
c0010619:	e8 32 01 ff ff       	call   c0000750 <strcmp>
c001061e:	83 c4 10             	add    esp,0x10
c0010621:	85 c0                	test   eax,eax
c0010623:	74 dd                	je     c0010602 <CPU::detectFeatures()+0x19a>
c0010625:	50                   	push   eax
c0010626:	50                   	push   eax
c0010627:	68 02 21 02 c0       	push   0xc0022102
c001062c:	55                   	push   ebp
c001062d:	e8 1e 01 ff ff       	call   c0000750 <strcmp>
c0010632:	83 c4 10             	add    esp,0x10
c0010635:	85 c0                	test   eax,eax
c0010637:	74 2a                	je     c0010663 <CPU::detectFeatures()+0x1fb>
c0010639:	50                   	push   eax
c001063a:	50                   	push   eax
c001063b:	68 0f 21 02 c0       	push   0xc002210f
c0010640:	55                   	push   ebp
c0010641:	e8 0a 01 ff ff       	call   c0000750 <strcmp>
c0010646:	83 c4 10             	add    esp,0x10
c0010649:	85 c0                	test   eax,eax
c001064b:	74 16                	je     c0010663 <CPU::detectFeatures()+0x1fb>
c001064d:	50                   	push   eax
c001064e:	50                   	push   eax
c001064f:	68 1c 21 02 c0       	push   0xc002211c
c0010654:	55                   	push   ebp
c0010655:	e8 f6 00 ff ff       	call   c0000750 <strcmp>
c001065a:	83 c4 10             	add    esp,0x10
c001065d:	85 c0                	test   eax,eax
c001065f:	74 48                	je     c00106a9 <CPU::detectFeatures()+0x241>
c0010661:	eb 0f                	jmp    c0010672 <CPU::detectFeatures()+0x20a>
c0010663:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001066d:	e9 c1 01 00 00       	jmp    c0010833 <CPU::detectFeatures()+0x3cb>
c0010672:	50                   	push   eax
c0010673:	50                   	push   eax
c0010674:	68 29 21 02 c0       	push   0xc0022129
c0010679:	55                   	push   ebp
c001067a:	e8 d1 00 ff ff       	call   c0000750 <strcmp>
c001067f:	83 c4 10             	add    esp,0x10
c0010682:	85 c0                	test   eax,eax
c0010684:	74 23                	je     c00106a9 <CPU::detectFeatures()+0x241>
c0010686:	57                   	push   edi
c0010687:	57                   	push   edi
c0010688:	68 36 21 02 c0       	push   0xc0022136
c001068d:	55                   	push   ebp
c001068e:	e8 bd 00 ff ff       	call   c0000750 <strcmp>
c0010693:	83 c4 10             	add    esp,0x10
c0010696:	85 c0                	test   eax,eax
c0010698:	75 1e                	jne    c00106b8 <CPU::detectFeatures()+0x250>
c001069a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00106a4:	e9 8a 01 00 00       	jmp    c0010833 <CPU::detectFeatures()+0x3cb>
c00106a9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00106b3:	e9 7b 01 00 00       	jmp    c0010833 <CPU::detectFeatures()+0x3cb>
c00106b8:	56                   	push   esi
c00106b9:	56                   	push   esi
c00106ba:	68 43 21 02 c0       	push   0xc0022143
c00106bf:	55                   	push   ebp
c00106c0:	e8 8b 00 ff ff       	call   c0000750 <strcmp>
c00106c5:	83 c4 10             	add    esp,0x10
c00106c8:	85 c0                	test   eax,eax
c00106ca:	75 0f                	jne    c00106db <CPU::detectFeatures()+0x273>
c00106cc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00106d6:	e9 58 01 00 00       	jmp    c0010833 <CPU::detectFeatures()+0x3cb>
c00106db:	51                   	push   ecx
c00106dc:	51                   	push   ecx
c00106dd:	68 02 21 02 c0       	push   0xc0022102
c00106e2:	55                   	push   ebp
c00106e3:	e8 68 00 ff ff       	call   c0000750 <strcmp>
c00106e8:	83 c4 10             	add    esp,0x10
c00106eb:	85 c0                	test   eax,eax
c00106ed:	75 0f                	jne    c00106fe <CPU::detectFeatures()+0x296>
c00106ef:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00106f9:	e9 35 01 00 00       	jmp    c0010833 <CPU::detectFeatures()+0x3cb>
c00106fe:	52                   	push   edx
c00106ff:	52                   	push   edx
c0010700:	68 50 21 02 c0       	push   0xc0022150
c0010705:	55                   	push   ebp
c0010706:	e8 45 00 ff ff       	call   c0000750 <strcmp>
c001070b:	83 c4 10             	add    esp,0x10
c001070e:	85 c0                	test   eax,eax
c0010710:	75 0f                	jne    c0010721 <CPU::detectFeatures()+0x2b9>
c0010712:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001071c:	e9 12 01 00 00       	jmp    c0010833 <CPU::detectFeatures()+0x3cb>
c0010721:	50                   	push   eax
c0010722:	50                   	push   eax
c0010723:	68 5d 21 02 c0       	push   0xc002215d
c0010728:	55                   	push   ebp
c0010729:	e8 22 00 ff ff       	call   c0000750 <strcmp>
c001072e:	83 c4 10             	add    esp,0x10
c0010731:	85 c0                	test   eax,eax
c0010733:	75 0f                	jne    c0010744 <CPU::detectFeatures()+0x2dc>
c0010735:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001073f:	e9 ef 00 00 00       	jmp    c0010833 <CPU::detectFeatures()+0x3cb>
c0010744:	50                   	push   eax
c0010745:	50                   	push   eax
c0010746:	68 6a 21 02 c0       	push   0xc002216a
c001074b:	55                   	push   ebp
c001074c:	e8 ff ff fe ff       	call   c0000750 <strcmp>
c0010751:	83 c4 10             	add    esp,0x10
c0010754:	85 c0                	test   eax,eax
c0010756:	75 0f                	jne    c0010767 <CPU::detectFeatures()+0x2ff>
c0010758:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010762:	e9 cc 00 00 00       	jmp    c0010833 <CPU::detectFeatures()+0x3cb>
c0010767:	50                   	push   eax
c0010768:	50                   	push   eax
c0010769:	68 77 21 02 c0       	push   0xc0022177
c001076e:	55                   	push   ebp
c001076f:	e8 dc ff fe ff       	call   c0000750 <strcmp>
c0010774:	83 c4 10             	add    esp,0x10
c0010777:	85 c0                	test   eax,eax
c0010779:	75 0f                	jne    c001078a <CPU::detectFeatures()+0x322>
c001077b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010785:	e9 a9 00 00 00       	jmp    c0010833 <CPU::detectFeatures()+0x3cb>
c001078a:	50                   	push   eax
c001078b:	50                   	push   eax
c001078c:	68 84 21 02 c0       	push   0xc0022184
c0010791:	55                   	push   ebp
c0010792:	e8 b9 ff fe ff       	call   c0000750 <strcmp>
c0010797:	83 c4 10             	add    esp,0x10
c001079a:	85 c0                	test   eax,eax
c001079c:	75 0f                	jne    c00107ad <CPU::detectFeatures()+0x345>
c001079e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00107a8:	e9 86 00 00 00       	jmp    c0010833 <CPU::detectFeatures()+0x3cb>
c00107ad:	50                   	push   eax
c00107ae:	50                   	push   eax
c00107af:	68 91 21 02 c0       	push   0xc0022191
c00107b4:	55                   	push   ebp
c00107b5:	e8 96 ff fe ff       	call   c0000750 <strcmp>
c00107ba:	83 c4 10             	add    esp,0x10
c00107bd:	85 c0                	test   eax,eax
c00107bf:	75 0c                	jne    c00107cd <CPU::detectFeatures()+0x365>
c00107c1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00107cb:	eb 66                	jmp    c0010833 <CPU::detectFeatures()+0x3cb>
c00107cd:	50                   	push   eax
c00107ce:	50                   	push   eax
c00107cf:	68 9e 21 02 c0       	push   0xc002219e
c00107d4:	55                   	push   ebp
c00107d5:	e8 76 ff fe ff       	call   c0000750 <strcmp>
c00107da:	83 c4 10             	add    esp,0x10
c00107dd:	85 c0                	test   eax,eax
c00107df:	75 0c                	jne    c00107ed <CPU::detectFeatures()+0x385>
c00107e1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00107eb:	eb 46                	jmp    c0010833 <CPU::detectFeatures()+0x3cb>
c00107ed:	57                   	push   edi
c00107ee:	57                   	push   edi
c00107ef:	68 ab 21 02 c0       	push   0xc00221ab
c00107f4:	55                   	push   ebp
c00107f5:	e8 56 ff fe ff       	call   c0000750 <strcmp>
c00107fa:	83 c4 10             	add    esp,0x10
c00107fd:	85 c0                	test   eax,eax
c00107ff:	74 e0                	je     c00107e1 <CPU::detectFeatures()+0x379>
c0010801:	56                   	push   esi
c0010802:	56                   	push   esi
c0010803:	68 b8 21 02 c0       	push   0xc00221b8
c0010808:	55                   	push   ebp
c0010809:	e8 42 ff fe ff       	call   c0000750 <strcmp>
c001080e:	83 c4 10             	add    esp,0x10
c0010811:	85 c0                	test   eax,eax
c0010813:	74 cc                	je     c00107e1 <CPU::detectFeatures()+0x379>
c0010815:	51                   	push   ecx
c0010816:	51                   	push   ecx
c0010817:	68 c5 21 02 c0       	push   0xc00221c5
c001081c:	55                   	push   ebp
c001081d:	e8 2e ff fe ff       	call   c0000750 <strcmp>
c0010822:	83 c4 10             	add    esp,0x10
c0010825:	85 c0                	test   eax,eax
c0010827:	74 b8                	je     c00107e1 <CPU::detectFeatures()+0x379>
c0010829:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010833:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0010838:	0f 86 be 00 00 00    	jbe    c00108fc <CPU::detectFeatures()+0x494>
c001083e:	83 ec 0c             	sub    esp,0xc
c0010841:	68 80 00 00 00       	push   0x80
c0010846:	e8 31 fb ff ff       	call   c001037c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001084b:	83 e0 01             	and    eax,0x1
c001084e:	c1 e0 06             	shl    eax,0x6
c0010851:	89 c2                	mov    edx,eax
c0010853:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010859:	83 e0 bf             	and    eax,0xffffffbf
c001085c:	09 d0                	or     eax,edx
c001085e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010864:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001086b:	e8 0c fb ff ff       	call   c001037c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010870:	83 e0 01             	and    eax,0x1
c0010873:	c1 e0 04             	shl    eax,0x4
c0010876:	89 c2                	mov    edx,eax
c0010878:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001087e:	83 e0 ef             	and    eax,0xffffffef
c0010881:	09 d0                	or     eax,edx
c0010883:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010889:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010890:	e8 e7 fa ff ff       	call   c001037c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010895:	89 c2                	mov    edx,eax
c0010897:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001089d:	c1 e2 07             	shl    edx,0x7
c00108a0:	83 e0 7f             	and    eax,0x7f
c00108a3:	09 d0                	or     eax,edx
c00108a5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00108ab:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00108b2:	e8 f3 fa ff ff       	call   c00103aa <CPU::cpuidCheckExtendedECX(unsigned int)>
c00108b7:	83 e0 01             	and    eax,0x1
c00108ba:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00108c1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108c7:	83 e0 f7             	and    eax,0xfffffff7
c00108ca:	09 d0                	or     eax,edx
c00108cc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108d2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00108d9:	e8 cc fa ff ff       	call   c00103aa <CPU::cpuidCheckExtendedECX(unsigned int)>
c00108de:	83 c4 10             	add    esp,0x10
c00108e1:	83 e0 01             	and    eax,0x1
c00108e4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00108eb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108f1:	83 e0 fb             	and    eax,0xfffffffb
c00108f4:	09 d0                	or     eax,edx
c00108f6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00108fc:	83 ec 0c             	sub    esp,0xc
c00108ff:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010903:	50                   	push   eax
c0010904:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010908:	50                   	push   eax
c0010909:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001090d:	57                   	push   edi
c001090e:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010912:	56                   	push   esi
c0010913:	6a 01                	push   0x1
c0010915:	e8 82 f9 ff ff       	call   c001029c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001091a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001091e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010924:	89 c1                	mov    ecx,eax
c0010926:	83 e2 f0             	and    edx,0xfffffff0
c0010929:	83 e1 0f             	and    ecx,0xf
c001092c:	09 ca                	or     edx,ecx
c001092e:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010934:	89 c2                	mov    edx,eax
c0010936:	c1 ea 04             	shr    edx,0x4
c0010939:	83 e2 0f             	and    edx,0xf
c001093c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010940:	89 d1                	mov    ecx,edx
c0010942:	83 c4 20             	add    esp,0x20
c0010945:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001094b:	c1 e1 06             	shl    ecx,0x6
c001094e:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010954:	09 ca                	or     edx,ecx
c0010956:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001095d:	89 c2                	mov    edx,eax
c001095f:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010965:	c1 ea 08             	shr    edx,0x8
c0010968:	83 e1 3f             	and    ecx,0x3f
c001096b:	83 e2 0f             	and    edx,0xf
c001096e:	89 d5                	mov    ebp,edx
c0010970:	83 e5 03             	and    ebp,0x3
c0010973:	c1 e5 06             	shl    ebp,0x6
c0010976:	09 e9                	or     ecx,ebp
c0010978:	89 d5                	mov    ebp,edx
c001097a:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010980:	c1 ed 02             	shr    ebp,0x2
c0010983:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010989:	83 e1 c0             	and    ecx,0xffffffc0
c001098c:	09 e9                	or     ecx,ebp
c001098e:	89 c5                	mov    ebp,eax
c0010990:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010996:	c1 ed 08             	shr    ebp,0x8
c0010999:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001099f:	83 e5 30             	and    ebp,0x30
c00109a2:	83 e1 cf             	and    ecx,0xffffffcf
c00109a5:	09 e9                	or     ecx,ebp
c00109a7:	83 fa 06             	cmp    edx,0x6
c00109aa:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00109b0:	74 05                	je     c00109b7 <CPU::detectFeatures()+0x54f>
c00109b2:	83 fa 0f             	cmp    edx,0xf
c00109b5:	75 64                	jne    c0010a1b <CPU::detectFeatures()+0x5b3>
c00109b7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00109bd:	89 c1                	mov    ecx,eax
c00109bf:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00109c5:	c1 e9 10             	shr    ecx,0x10
c00109c8:	c1 e1 04             	shl    ecx,0x4
c00109cb:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00109cf:	0f b6 c9             	movzx  ecx,cl
c00109d2:	c1 e1 06             	shl    ecx,0x6
c00109d5:	09 e9                	or     ecx,ebp
c00109d7:	83 fa 0f             	cmp    edx,0xf
c00109da:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00109e1:	75 38                	jne    c0010a1b <CPU::detectFeatures()+0x5b3>
c00109e3:	c1 e8 14             	shr    eax,0x14
c00109e6:	83 c0 0f             	add    eax,0xf
c00109e9:	0f b6 c0             	movzx  eax,al
c00109ec:	89 c2                	mov    edx,eax
c00109ee:	c1 e8 02             	shr    eax,0x2
c00109f1:	83 e2 03             	and    edx,0x3
c00109f4:	89 d1                	mov    ecx,edx
c00109f6:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00109fc:	c1 e1 06             	shl    ecx,0x6
c00109ff:	83 e2 3f             	and    edx,0x3f
c0010a02:	09 ca                	or     edx,ecx
c0010a04:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010a0a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010a10:	83 e2 c0             	and    edx,0xffffffc0
c0010a13:	09 d0                	or     eax,edx
c0010a15:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010a1b:	83 ec 0c             	sub    esp,0xc
c0010a1e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a24:	83 c8 07             	or     eax,0x7
c0010a27:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a2d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a31:	50                   	push   eax
c0010a32:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010a36:	55                   	push   ebp
c0010a37:	57                   	push   edi
c0010a38:	56                   	push   esi
c0010a39:	68 00 00 00 80       	push   0x80000000
c0010a3e:	e8 59 f8 ff ff       	call   c001029c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a43:	83 c4 20             	add    esp,0x20
c0010a46:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010a4e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010a52:	76 1e                	jbe    c0010a72 <CPU::detectFeatures()+0x60a>
c0010a54:	83 ec 0c             	sub    esp,0xc
c0010a57:	50                   	push   eax
c0010a58:	55                   	push   ebp
c0010a59:	57                   	push   edi
c0010a5a:	56                   	push   esi
c0010a5b:	68 01 00 00 80       	push   0x80000001
c0010a60:	e8 37 f8 ff ff       	call   c001029c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a65:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010a6f:	83 c4 20             	add    esp,0x20
c0010a72:	52                   	push   edx
c0010a73:	52                   	push   edx
c0010a74:	68 d1 21 02 c0       	push   0xc00221d1
c0010a79:	53                   	push   ebx
c0010a7a:	e8 99 c0 ff ff       	call   c000cb18 <Device::setName(char const*)>
c0010a7f:	83 c4 10             	add    esp,0x10
c0010a82:	eb 69                	jmp    c0010aed <CPU::detectFeatures()+0x685>
c0010a84:	50                   	push   eax
c0010a85:	50                   	push   eax
c0010a86:	68 36 21 02 c0       	push   0xc0022136
c0010a8b:	55                   	push   ebp
c0010a8c:	e8 af fb fe ff       	call   c0000640 <strcpy>
c0010a91:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010a9b:	e8 23 f7 fe ff       	call   c00001c3 <is486>
c0010aa0:	83 c4 10             	add    esp,0x10
c0010aa3:	85 c0                	test   eax,eax
c0010aa5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010aab:	74 1f                	je     c0010acc <CPU::detectFeatures()+0x664>
c0010aad:	83 c8 07             	or     eax,0x7
c0010ab0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010ab6:	0f 20 c0             	mov    eax,cr0
c0010ab9:	83 e0 14             	and    eax,0x14
c0010abc:	83 f8 04             	cmp    eax,0x4
c0010abf:	75 10                	jne    c0010ad1 <CPU::detectFeatures()+0x669>
c0010ac1:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010ac7:	83 e0 fd             	and    eax,0xfffffffd
c0010aca:	eb 1b                	jmp    c0010ae7 <CPU::detectFeatures()+0x67f>
c0010acc:	83 e0 f8             	and    eax,0xfffffff8
c0010acf:	eb df                	jmp    c0010ab0 <CPU::detectFeatures()+0x648>
c0010ad1:	e8 c8 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010ad6:	83 e0 01             	and    eax,0x1
c0010ad9:	8d 14 00             	lea    edx,[eax+eax*1]
c0010adc:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010ae2:	83 e0 fd             	and    eax,0xfffffffd
c0010ae5:	09 d0                	or     eax,edx
c0010ae7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010aed:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010af4:	74 17                	je     c0010b0d <CPU::detectFeatures()+0x6a5>
c0010af6:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010afc:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010b02:	83 c8 10             	or     eax,0x10
c0010b05:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010b0b:	eb 20                	jmp    c0010b2d <CPU::detectFeatures()+0x6c5>
c0010b0d:	e8 8c f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b12:	83 e0 01             	and    eax,0x1
c0010b15:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b18:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b1e:	83 e0 fd             	and    eax,0xfffffffd
c0010b21:	09 d0                	or     eax,edx
c0010b23:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b29:	a8 02                	test   al,0x2
c0010b2b:	75 c9                	jne    c0010af6 <CPU::detectFeatures()+0x68e>
c0010b2d:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010b34:	83 c4 2c             	add    esp,0x2c
c0010b37:	5b                   	pop    ebx
c0010b38:	5e                   	pop    esi
c0010b39:	5f                   	pop    edi
c0010b3a:	5d                   	pop    ebp
c0010b3b:	c3                   	ret    

c0010b3c <CPU::setupSMEP()>:
c0010b3c:	0f 20 e0             	mov    eax,cr4
c0010b3f:	0d 00 00 10 00       	or     eax,0x100000
c0010b44:	0f 22 e0             	mov    cr4,eax
c0010b47:	c3                   	ret    

c0010b48 <CPU::setupUMIP()>:
c0010b48:	0f 20 e0             	mov    eax,cr4
c0010b4b:	80 cc 08             	or     ah,0x8
c0010b4e:	0f 22 e0             	mov    cr4,eax
c0010b51:	c3                   	ret    

c0010b52 <CPU::setupTSC()>:
c0010b52:	0f 20 e0             	mov    eax,cr4
c0010b55:	83 c8 04             	or     eax,0x4
c0010b58:	0f 22 e0             	mov    cr4,eax
c0010b5b:	c3                   	ret    

c0010b5c <CPU::setupLargePages()>:
c0010b5c:	0f 20 e0             	mov    eax,cr4
c0010b5f:	83 c8 10             	or     eax,0x10
c0010b62:	0f 22 e0             	mov    cr4,eax
c0010b65:	c3                   	ret    

c0010b66 <CPU::setupPAT()>:
c0010b66:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010b6b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010b72:	74 2c                	je     c0010ba0 <CPU::setupPAT()+0x3a>
c0010b74:	53                   	push   ebx
c0010b75:	83 ec 10             	sub    esp,0x10
c0010b78:	68 77 02 00 00       	push   0x277
c0010b7d:	50                   	push   eax
c0010b7e:	e8 3d 65 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0010b83:	83 e2 f8             	and    edx,0xfffffff8
c0010b86:	83 ca 01             	or     edx,0x1
c0010b89:	52                   	push   edx
c0010b8a:	50                   	push   eax
c0010b8b:	68 77 02 00 00       	push   0x277
c0010b90:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010b96:	e8 51 65 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0010b9b:	83 c4 28             	add    esp,0x28
c0010b9e:	5b                   	pop    ebx
c0010b9f:	c3                   	ret    
c0010ba0:	c3                   	ret    
c0010ba1:	90                   	nop

c0010ba2 <CPU::setupMTRR()>:
c0010ba2:	c3                   	ret    
c0010ba3:	90                   	nop

c0010ba4 <CPU::setupGlobalPages()>:
c0010ba4:	0f 20 e0             	mov    eax,cr4
c0010ba7:	0c 80                	or     al,0x80
c0010ba9:	0f 22 e0             	mov    cr4,eax
c0010bac:	c3                   	ret    
c0010bad:	90                   	nop

c0010bae <CPU::allowUsermodeDataAccess()>:
c0010bae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bb2:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bb9:	74 03                	je     c0010bbe <CPU::allowUsermodeDataAccess()+0x10>
c0010bbb:	0f 01 cb             	stac   
c0010bbe:	c3                   	ret    
c0010bbf:	90                   	nop

c0010bc0 <CPU::prohibitUsermodeDataAccess()>:
c0010bc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bc4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bcb:	74 03                	je     c0010bd0 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010bcd:	0f 01 ca             	clac   
c0010bd0:	c3                   	ret    
c0010bd1:	90                   	nop

c0010bd2 <CPU::setupSMAP()>:
c0010bd2:	0f 20 e0             	mov    eax,cr4
c0010bd5:	0d 00 00 20 00       	or     eax,0x200000
c0010bda:	0f 22 e0             	mov    cr4,eax
c0010bdd:	eb e1                	jmp    c0010bc0 <CPU::prohibitUsermodeDataAccess()>
c0010bdf:	90                   	nop

c0010be0 <CPU::setupFeatures()>:
c0010be0:	53                   	push   ebx
c0010be1:	83 ec 08             	sub    esp,0x8
c0010be4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010be8:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010bef:	74 18                	je     c0010c09 <CPU::setupFeatures()+0x29>
c0010bf1:	83 ec 0c             	sub    esp,0xc
c0010bf4:	68 dd 21 02 c0       	push   0xc00221dd
c0010bf9:	e8 47 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010bfe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c01:	e8 42 ff ff ff       	call   c0010b48 <CPU::setupUMIP()>
c0010c06:	83 c4 10             	add    esp,0x10
c0010c09:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010c10:	74 18                	je     c0010c2a <CPU::setupFeatures()+0x4a>
c0010c12:	83 ec 0c             	sub    esp,0xc
c0010c15:	68 e7 21 02 c0       	push   0xc00221e7
c0010c1a:	e8 26 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c22:	e8 2b ff ff ff       	call   c0010b52 <CPU::setupTSC()>
c0010c27:	83 c4 10             	add    esp,0x10
c0010c2a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010c31:	74 18                	je     c0010c4b <CPU::setupFeatures()+0x6b>
c0010c33:	83 ec 0c             	sub    esp,0xc
c0010c36:	68 f0 21 02 c0       	push   0xc00221f0
c0010c3b:	e8 05 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c43:	e8 14 ff ff ff       	call   c0010b5c <CPU::setupLargePages()>
c0010c48:	83 c4 10             	add    esp,0x10
c0010c4b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010c52:	74 18                	je     c0010c6c <CPU::setupFeatures()+0x8c>
c0010c54:	83 ec 0c             	sub    esp,0xc
c0010c57:	68 f9 21 02 c0       	push   0xc00221f9
c0010c5c:	e8 e4 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c64:	e8 3b ff ff ff       	call   c0010ba4 <CPU::setupGlobalPages()>
c0010c69:	83 c4 10             	add    esp,0x10
c0010c6c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010c73:	74 18                	je     c0010c8d <CPU::setupFeatures()+0xad>
c0010c75:	83 ec 0c             	sub    esp,0xc
c0010c78:	68 0b 22 02 c0       	push   0xc002220b
c0010c7d:	e8 c3 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c85:	e8 dc fe ff ff       	call   c0010b66 <CPU::setupPAT()>
c0010c8a:	83 c4 10             	add    esp,0x10
c0010c8d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010c94:	74 11                	je     c0010ca7 <CPU::setupFeatures()+0xc7>
c0010c96:	c7 44 24 10 14 22 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022214
c0010c9e:	83 c4 08             	add    esp,0x8
c0010ca1:	5b                   	pop    ebx
c0010ca2:	e9 9e 9c ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010ca7:	83 c4 08             	add    esp,0x8
c0010caa:	5b                   	pop    ebx
c0010cab:	c3                   	ret    

c0010cac <CPU::open(int, int, void*)>:
c0010cac:	55                   	push   ebp
c0010cad:	57                   	push   edi
c0010cae:	56                   	push   esi
c0010caf:	53                   	push   ebx
c0010cb0:	83 ec 18             	sub    esp,0x18
c0010cb3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010cb7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010cbb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010cbf:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010cc5:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010ccb:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010cd1:	50                   	push   eax
c0010cd2:	e8 e7 66 ff ff       	call   c00073be <GDT::setup()>
c0010cd7:	83 c4 0c             	add    esp,0xc
c0010cda:	6a 00                	push   0x0
c0010cdc:	68 ef be ad de       	push   0xdeadbeef
c0010ce1:	55                   	push   ebp
c0010ce2:	e8 a1 82 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010ce7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010cea:	e8 79 82 ff ff       	call   c0008f68 <TSS::flush()>
c0010cef:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010cf5:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cf8:	e8 25 69 ff ff       	call   c0007622 <IDT::setup()>
c0010cfd:	b8 00 04 00 00       	mov    eax,0x400
c0010d02:	0f 23 f8             	mov    db7,eax
c0010d05:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010d0f:	e8 ab 70 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010d14:	83 c4 10             	add    esp,0x10
c0010d17:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010d1d:	85 f6                	test   esi,esi
c0010d1f:	89 38                	mov    DWORD PTR [eax],edi
c0010d21:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010d27:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010d2a:	74 10                	je     c0010d3c <CPU::open(int, int, void*)+0x90>
c0010d2c:	50                   	push   eax
c0010d2d:	50                   	push   eax
c0010d2e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010d34:	56                   	push   esi
c0010d35:	e8 74 8b ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010d3a:	eb 0d                	jmp    c0010d49 <CPU::open(int, int, void*)+0x9d>
c0010d3c:	83 ec 0c             	sub    esp,0xc
c0010d3f:	68 1e 22 02 c0       	push   0xc002221e
c0010d44:	e8 9e 08 00 00       	call   c00115e7 <KePanic(char const*)>
c0010d49:	83 c4 10             	add    esp,0x10
c0010d4c:	83 ec 0c             	sub    esp,0xc
c0010d4f:	68 2c 22 02 c0       	push   0xc002222c
c0010d54:	e8 8e 01 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c0010d59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d5c:	e8 07 f7 ff ff       	call   c0010468 <CPU::detectFeatures()>
c0010d61:	c7 04 24 4f 22 02 c0 	mov    DWORD PTR [esp],0xc002224f
c0010d68:	e8 7a 01 00 00       	call   c0010ee7 <KeSetBootMessage(char const*)>
c0010d6d:	e8 eb 73 00 00       	call   c001815d <HalInitialise()>
c0010d72:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010d77:	83 e0 10             	and    eax,0x10
c0010d7a:	83 f8 01             	cmp    eax,0x1
c0010d7d:	19 c0                	sbb    eax,eax
c0010d7f:	83 e0 46             	and    eax,0x46
c0010d82:	83 c0 1e             	add    eax,0x1e
c0010d85:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d88:	e8 28 d6 ff ff       	call   c000e3b5 <setupTimer(int)>
c0010d8d:	83 c4 10             	add    esp,0x10
c0010d90:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010d96:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010d9d:	74 0c                	je     c0010dab <CPU::open(int, int, void*)+0xff>
c0010d9f:	83 ec 0c             	sub    esp,0xc
c0010da2:	53                   	push   ebx
c0010da3:	e8 38 fe ff ff       	call   c0010be0 <CPU::setupFeatures()>
c0010da8:	83 c4 10             	add    esp,0x10
c0010dab:	83 c4 0c             	add    esp,0xc
c0010dae:	31 c0                	xor    eax,eax
c0010db0:	5b                   	pop    ebx
c0010db1:	5e                   	pop    esi
c0010db2:	5f                   	pop    edi
c0010db3:	5d                   	pop    ebp
c0010db4:	c3                   	ret    

c0010db5 <KeInitialiseAtexit()>:
c0010db5:	83 ec 10             	sub    esp,0x10
c0010db8:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010dc2:	6a 60                	push   0x60
c0010dc4:	6a 00                	push   0x0
c0010dc6:	68 20 be 02 c0       	push   0xc002be20
c0010dcb:	e8 20 f7 fe ff       	call   c00004f0 <memset>
c0010dd0:	83 c4 1c             	add    esp,0x1c
c0010dd3:	c3                   	ret    

c0010dd4 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010dd4:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010dd9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010ddd:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010de4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010de8:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010def:	40                   	inc    eax
c0010df0:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010df5:	83 f8 17             	cmp    eax,0x17
c0010df8:	7e 0d                	jle    c0010e07 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010dfa:	c7 44 24 04 90 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022290
c0010e02:	e9 e0 07 00 00       	jmp    c00115e7 <KePanic(char const*)>
c0010e07:	c3                   	ret    

c0010e08 <KeExecuteAtexit()>:
c0010e08:	53                   	push   ebx
c0010e09:	31 db                	xor    ebx,ebx
c0010e0b:	83 ec 08             	sub    esp,0x8
c0010e0e:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010e14:	7e 50                	jle    c0010e66 <KeExecuteAtexit()+0x5e>
c0010e16:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010e1d:	85 c0                	test   eax,eax
c0010e1f:	74 42                	je     c0010e63 <KeExecuteAtexit()+0x5b>
c0010e21:	51                   	push   ecx
c0010e22:	50                   	push   eax
c0010e23:	53                   	push   ebx
c0010e24:	68 a9 22 02 c0       	push   0xc00222a9
c0010e29:	e8 17 9b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e2e:	58                   	pop    eax
c0010e2f:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010e36:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010e3d:	c7 04 24 cb 22 02 c0 	mov    DWORD PTR [esp],0xc00222cb
c0010e44:	e8 fc 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e49:	c7 04 24 2b 34 02 c0 	mov    DWORD PTR [esp],0xc002342b
c0010e50:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010e5b:	e8 e5 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e60:	83 c4 10             	add    esp,0x10
c0010e63:	43                   	inc    ebx
c0010e64:	eb a8                	jmp    c0010e0e <KeExecuteAtexit()+0x6>
c0010e66:	83 c4 08             	add    esp,0x8
c0010e69:	5b                   	pop    ebx
c0010e6a:	c3                   	ret    

c0010e6b <KeDisplaySplashScreen()>:
c0010e6b:	55                   	push   ebp
c0010e6c:	bd 05 00 00 00       	mov    ebp,0x5
c0010e71:	57                   	push   edi
c0010e72:	bf 0a 00 00 00       	mov    edi,0xa
c0010e77:	56                   	push   esi
c0010e78:	31 f6                	xor    esi,esi
c0010e7a:	53                   	push   ebx
c0010e7b:	31 db                	xor    ebx,ebx
c0010e7d:	83 ec 0c             	sub    esp,0xc
c0010e80:	0f b6 96 80 36 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc980]
c0010e87:	89 d0                	mov    eax,edx
c0010e89:	85 d2                	test   edx,edx
c0010e8b:	74 52                	je     c0010edf <KeDisplaySplashScreen()+0x74>
c0010e8d:	80 bb b6 36 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc94a],0xdb
c0010e94:	75 13                	jne    c0010ea9 <KeDisplaySplashScreen()+0x3e>
c0010e96:	0f b6 8b b5 36 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc94b]
c0010e9d:	83 e1 fe             	and    ecx,0xfffffffe
c0010ea0:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010ea6:	75 01                	jne    c0010ea9 <KeDisplaySplashScreen()+0x3e>
c0010ea8:	47                   	inc    edi
c0010ea9:	83 fa 0d             	cmp    edx,0xd
c0010eac:	74 28                	je     c0010ed6 <KeDisplaySplashScreen()+0x6b>
c0010eae:	83 fa 0a             	cmp    edx,0xa
c0010eb1:	75 0a                	jne    c0010ebd <KeDisplaySplashScreen()+0x52>
c0010eb3:	45                   	inc    ebp
c0010eb4:	bf 0a 00 00 00       	mov    edi,0xa
c0010eb9:	31 db                	xor    ebx,ebx
c0010ebb:	eb 19                	jmp    c0010ed6 <KeDisplaySplashScreen()+0x6b>
c0010ebd:	83 ec 0c             	sub    esp,0xc
c0010ec0:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010ec3:	55                   	push   ebp
c0010ec4:	0f be c0             	movsx  eax,al
c0010ec7:	52                   	push   edx
c0010ec8:	43                   	inc    ebx
c0010ec9:	6a 00                	push   0x0
c0010ecb:	6a 0e                	push   0xe
c0010ecd:	50                   	push   eax
c0010ece:	e8 09 7f 00 00       	call   c0018ddc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010ed3:	83 c4 20             	add    esp,0x20
c0010ed6:	46                   	inc    esi
c0010ed7:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010edd:	75 a1                	jne    c0010e80 <KeDisplaySplashScreen()+0x15>
c0010edf:	83 c4 0c             	add    esp,0xc
c0010ee2:	5b                   	pop    ebx
c0010ee3:	5e                   	pop    esi
c0010ee4:	5f                   	pop    edi
c0010ee5:	5d                   	pop    ebp
c0010ee6:	c3                   	ret    

c0010ee7 <KeSetBootMessage(char const*)>:
c0010ee7:	57                   	push   edi
c0010ee8:	56                   	push   esi
c0010ee9:	53                   	push   ebx
c0010eea:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010ef0:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010ef7:	68 9e 00 00 00       	push   0x9e
c0010efc:	6a 00                	push   0x0
c0010efe:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010f02:	56                   	push   esi
c0010f03:	e8 e8 f5 fe ff       	call   c00004f0 <memset>
c0010f08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f0b:	e8 60 f6 fe ff       	call   c0000570 <strlen>
c0010f10:	ba 50 00 00 00       	mov    edx,0x50
c0010f15:	83 c4 10             	add    esp,0x10
c0010f18:	29 c2                	sub    edx,eax
c0010f1a:	31 c9                	xor    ecx,ecx
c0010f1c:	83 e2 fe             	and    edx,0xfffffffe
c0010f1f:	01 f2                	add    edx,esi
c0010f21:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010f26:	84 c0                	test   al,al
c0010f28:	74 0a                	je     c0010f34 <KeSetBootMessage(char const*)+0x4d>
c0010f2a:	80 cc 0f             	or     ah,0xf
c0010f2d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010f31:	41                   	inc    ecx
c0010f32:	eb ed                	jmp    c0010f21 <KeSetBootMessage(char const*)+0x3a>
c0010f34:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010f39:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010f3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f40:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010f46:	5b                   	pop    ebx
c0010f47:	5e                   	pop    esi
c0010f48:	5f                   	pop    edi
c0010f49:	c3                   	ret    
c0010f4a:	66 90                	xchg   ax,ax

c0010f4c <Krnl::handlePowerButton()>:
c0010f4c:	83 ec 0c             	sub    esp,0xc
c0010f4f:	e8 ee 06 00 00       	call   c0011642 <KeHandlePowerButton()>
c0010f54:	90                   	nop
c0010f55:	83 c4 0c             	add    esp,0xc
c0010f58:	c3                   	ret    
c0010f59:	8d 76 00             	lea    esi,[esi+0x0]

c0010f5c <Krnl::handleSleepButton()>:
c0010f5c:	83 ec 0c             	sub    esp,0xc
c0010f5f:	e8 13 07 00 00       	call   c0011677 <KeHandleSleepButton()>
c0010f64:	90                   	nop
c0010f65:	83 c4 0c             	add    esp,0xc
c0010f68:	c3                   	ret    

c0010f69 <KeCalculateCRC32(unsigned char*, int)>:
c0010f69:	53                   	push   ebx
c0010f6a:	83 c8 ff             	or     eax,0xffffffff
c0010f6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010f71:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f75:	01 cb                	add    ebx,ecx
c0010f77:	39 d9                	cmp    ecx,ebx
c0010f79:	74 15                	je     c0010f90 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010f7b:	41                   	inc    ecx
c0010f7c:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010f7f:	31 c2                	xor    edx,eax
c0010f81:	c1 e8 08             	shr    eax,0x8
c0010f84:	0f b6 d2             	movzx  edx,dl
c0010f87:	33 04 95 e0 37 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc820]
c0010f8e:	eb e7                	jmp    c0010f77 <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010f90:	f7 d0                	not    eax
c0010f92:	5b                   	pop    ebx
c0010f93:	c3                   	ret    

c0010f94 <EnvVarContainer::getEnv(char const*)>:
c0010f94:	57                   	push   edi
c0010f95:	56                   	push   esi
c0010f96:	53                   	push   ebx
c0010f97:	31 db                	xor    ebx,ebx
c0010f99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f9d:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010f9f:	7e 2b                	jle    c0010fcc <EnvVarContainer::getEnv(char const*)+0x38>
c0010fa1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010fa8:	50                   	push   eax
c0010fa9:	50                   	push   eax
c0010faa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010fad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010fb0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010fb4:	e8 97 f7 fe ff       	call   c0000750 <strcmp>
c0010fb9:	83 c4 10             	add    esp,0x10
c0010fbc:	85 c0                	test   eax,eax
c0010fbe:	75 09                	jne    c0010fc9 <EnvVarContainer::getEnv(char const*)+0x35>
c0010fc0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010fc3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010fc7:	eb 05                	jmp    c0010fce <EnvVarContainer::getEnv(char const*)+0x3a>
c0010fc9:	43                   	inc    ebx
c0010fca:	eb d1                	jmp    c0010f9d <EnvVarContainer::getEnv(char const*)+0x9>
c0010fcc:	31 c0                	xor    eax,eax
c0010fce:	5b                   	pop    ebx
c0010fcf:	5e                   	pop    esi
c0010fd0:	5f                   	pop    edi
c0010fd1:	c3                   	ret    

c0010fd2 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010fd2:	55                   	push   ebp
c0010fd3:	57                   	push   edi
c0010fd4:	56                   	push   esi
c0010fd5:	53                   	push   ebx
c0010fd6:	83 ec 28             	sub    esp,0x28
c0010fd9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010fdd:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010fe1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010fe5:	56                   	push   esi
c0010fe6:	e8 85 f5 fe ff       	call   c0000570 <strlen>
c0010feb:	40                   	inc    eax
c0010fec:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fef:	e8 c2 6a ff ff       	call   c0007ab6 <malloc>
c0010ff4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ff7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010ffb:	e8 70 f5 fe ff       	call   c0000570 <strlen>
c0011000:	40                   	inc    eax
c0011001:	89 04 24             	mov    DWORD PTR [esp],eax
c0011004:	e8 ad 6a ff ff       	call   c0007ab6 <malloc>
c0011009:	89 34 24             	mov    DWORD PTR [esp],esi
c001100c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011010:	e8 5b f5 fe ff       	call   c0000570 <strlen>
c0011015:	83 c4 0c             	add    esp,0xc
c0011018:	40                   	inc    eax
c0011019:	50                   	push   eax
c001101a:	6a 00                	push   0x0
c001101c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011020:	e8 cb f4 fe ff       	call   c00004f0 <memset>
c0011025:	89 34 24             	mov    DWORD PTR [esp],esi
c0011028:	e8 43 f5 fe ff       	call   c0000570 <strlen>
c001102d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011031:	8d 48 01             	lea    ecx,[eax+0x1]
c0011034:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011036:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011039:	89 de                	mov    esi,ebx
c001103b:	e8 30 f5 fe ff       	call   c0000570 <strlen>
c0011040:	83 c4 0c             	add    esp,0xc
c0011043:	40                   	inc    eax
c0011044:	50                   	push   eax
c0011045:	6a 00                	push   0x0
c0011047:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001104b:	e8 a0 f4 fe ff       	call   c00004f0 <memset>
c0011050:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011053:	e8 18 f5 fe ff       	call   c0000570 <strlen>
c0011058:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001105c:	8d 48 01             	lea    ecx,[eax+0x1]
c001105f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011061:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011064:	40                   	inc    eax
c0011065:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011068:	c1 e0 03             	shl    eax,0x3
c001106b:	5a                   	pop    edx
c001106c:	59                   	pop    ecx
c001106d:	50                   	push   eax
c001106e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0011071:	e8 2c 6a ff ff       	call   c0007aa2 <realloc>
c0011076:	8d 74 24 18          	lea    esi,[esp+0x18]
c001107a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001107d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011080:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011084:	b9 08 00 00 00       	mov    ecx,0x8
c0011089:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001108b:	83 c4 2c             	add    esp,0x2c
c001108e:	5b                   	pop    ebx
c001108f:	5e                   	pop    esi
c0011090:	5f                   	pop    edi
c0011091:	5d                   	pop    ebp
c0011092:	c3                   	ret    
c0011093:	90                   	nop

c0011094 <EnvVarContainer::deleteEnv(char const*)>:
c0011094:	c3                   	ret    
c0011095:	90                   	nop

c0011096 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0011096:	55                   	push   ebp
c0011097:	57                   	push   edi
c0011098:	56                   	push   esi
c0011099:	53                   	push   ebx
c001109a:	81 ec 38 01 00 00    	sub    esp,0x138
c00110a0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00110a7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00110ae:	68 14 01 00 00       	push   0x114
c00110b3:	e8 fe 69 ff ff       	call   c0007ab6 <malloc>
c00110b8:	83 c4 0c             	add    esp,0xc
c00110bb:	89 c3                	mov    ebx,eax
c00110bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00110c0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00110c7:	50                   	push   eax
c00110c8:	e8 49 aa ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c00110cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110d0:	e8 23 ad ff ff       	call   c000bdf8 <File::exists()>
c00110d5:	83 c4 10             	add    esp,0x10
c00110d8:	84 c0                	test   al,al
c00110da:	75 31                	jne    c001110d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00110dc:	50                   	push   eax
c00110dd:	50                   	push   eax
c00110de:	6a 12                	push   0x12
c00110e0:	53                   	push   ebx
c00110e1:	e8 4e aa ff ff       	call   c000bb34 <File::open(FileOpenMode)>
c00110e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110e8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00110eb:	89 34 24             	mov    DWORD PTR [esp],esi
c00110ee:	e8 7d f4 fe ff       	call   c0000570 <strlen>
c00110f3:	5a                   	pop    edx
c00110f4:	31 d2                	xor    edx,edx
c00110f6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00110fa:	51                   	push   ecx
c00110fb:	56                   	push   esi
c00110fc:	52                   	push   edx
c00110fd:	50                   	push   eax
c00110fe:	53                   	push   ebx
c00110ff:	ff d7                	call   edi
c0011101:	83 c4 14             	add    esp,0x14
c0011104:	53                   	push   ebx
c0011105:	e8 88 aa ff ff       	call   c000bb92 <File::close()>
c001110a:	83 c4 10             	add    esp,0x10
c001110d:	56                   	push   esi
c001110e:	31 f6                	xor    esi,esi
c0011110:	68 00 01 00 00       	push   0x100
c0011115:	6a 00                	push   0x0
c0011117:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001111b:	50                   	push   eax
c001111c:	e8 cf f3 fe ff       	call   c00004f0 <memset>
c0011121:	5f                   	pop    edi
c0011122:	58                   	pop    eax
c0011123:	6a 01                	push   0x1
c0011125:	53                   	push   ebx
c0011126:	e8 09 aa ff ff       	call   c000bb34 <File::open(FileOpenMode)>
c001112b:	83 c4 10             	add    esp,0x10
c001112e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011136:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001113e:	83 ec 0c             	sub    esp,0xc
c0011141:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011143:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0011147:	51                   	push   ecx
c0011148:	8d 54 24 23          	lea    edx,[esp+0x23]
c001114c:	52                   	push   edx
c001114d:	6a 00                	push   0x0
c001114f:	6a 01                	push   0x1
c0011151:	53                   	push   ebx
c0011152:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011155:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001115a:	83 c4 20             	add    esp,0x20
c001115d:	89 c2                	mov    edx,eax
c001115f:	85 c0                	test   eax,eax
c0011161:	0f 84 36 01 00 00    	je     c001129d <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0011167:	83 f8 0d             	cmp    eax,0xd
c001116a:	0f 84 22 01 00 00    	je     c0011292 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011170:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0011175:	0f 84 f0 00 00 00    	je     c001126b <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001117b:	83 f8 0a             	cmp    eax,0xa
c001117e:	74 13                	je     c0011193 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011180:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011185:	74 0c                	je     c0011193 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0011187:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001118d:	0f 8e f6 00 00 00    	jle    c0011289 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0011193:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011197:	83 ec 0c             	sub    esp,0xc
c001119a:	8d 78 01             	lea    edi,[eax+0x1]
c001119d:	57                   	push   edi
c001119e:	e8 13 69 ff ff       	call   c0007ab6 <malloc>
c00111a3:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00111a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00111ab:	8d 56 04             	lea    edx,[esi+0x4]
c00111ae:	89 14 24             	mov    DWORD PTR [esp],edx
c00111b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00111b5:	e8 fc 68 ff ff       	call   c0007ab6 <malloc>
c00111ba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00111be:	83 c4 0c             	add    esp,0xc
c00111c1:	57                   	push   edi
c00111c2:	6a 00                	push   0x0
c00111c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00111c8:	e8 23 f3 fe ff       	call   c00004f0 <memset>
c00111cd:	8d 74 24 30          	lea    esi,[esp+0x30]
c00111d1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00111d5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00111d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111db:	83 c4 0c             	add    esp,0xc
c00111de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00111e2:	52                   	push   edx
c00111e3:	6a 00                	push   0x0
c00111e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00111e9:	e8 02 f3 fe ff       	call   c00004f0 <memset>
c00111ee:	8d 74 24 30          	lea    esi,[esp+0x30]
c00111f2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00111f6:	89 34 24             	mov    DWORD PTR [esp],esi
c00111f9:	e8 72 f3 fe ff       	call   c0000570 <strlen>
c00111fe:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0011202:	89 c1                	mov    ecx,eax
c0011204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011206:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011209:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001120c:	40                   	inc    eax
c001120d:	83 c4 10             	add    esp,0x10
c0011210:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011213:	85 d2                	test   edx,edx
c0011215:	75 0c                	jne    c0011223 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0011217:	83 ec 0c             	sub    esp,0xc
c001121a:	6a 08                	push   0x8
c001121c:	e8 95 68 ff ff       	call   c0007ab6 <malloc>
c0011221:	eb 0c                	jmp    c001122f <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0011223:	c1 e0 03             	shl    eax,0x3
c0011226:	51                   	push   ecx
c0011227:	51                   	push   ecx
c0011228:	50                   	push   eax
c0011229:	52                   	push   edx
c001122a:	e8 73 68 ff ff       	call   c0007aa2 <realloc>
c001122f:	83 c4 10             	add    esp,0x10
c0011232:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011235:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011238:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001123b:	8d 74 24 18          	lea    esi,[esp+0x18]
c001123f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011243:	b9 08 00 00 00       	mov    ecx,0x8
c0011248:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001124a:	31 f6                	xor    esi,esi
c001124c:	50                   	push   eax
c001124d:	68 00 01 00 00       	push   0x100
c0011252:	6a 00                	push   0x0
c0011254:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0011258:	50                   	push   eax
c0011259:	e8 92 f2 fe ff       	call   c00004f0 <memset>
c001125e:	83 c4 10             	add    esp,0x10
c0011261:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011269:	eb 27                	jmp    c0011292 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001126b:	83 f8 3d             	cmp    eax,0x3d
c001126e:	74 1e                	je     c001128e <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011270:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0011276:	7f 07                	jg     c001127f <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0011278:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c001127c:	46                   	inc    esi
c001127d:	eb 13                	jmp    c0011292 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001127f:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0011287:	eb 09                	jmp    c0011292 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011289:	83 f8 3d             	cmp    eax,0x3d
c001128c:	75 ea                	jne    c0011278 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001128e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0011292:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011297:	0f 85 99 fe ff ff    	jne    c0011136 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001129d:	83 ec 0c             	sub    esp,0xc
c00112a0:	53                   	push   ebx
c00112a1:	e8 ec a8 ff ff       	call   c000bb92 <File::close()>
c00112a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112ae:	81 c4 3c 01 00 00    	add    esp,0x13c
c00112b4:	5b                   	pop    ebx
c00112b5:	5e                   	pop    esi
c00112b6:	5f                   	pop    edi
c00112b7:	5d                   	pop    ebp
c00112b8:	c3                   	ret    
c00112b9:	90                   	nop

c00112ba <EnvVarContainer::__loadSystem()>:
c00112ba:	83 ec 10             	sub    esp,0x10
c00112bd:	68 e0 3b 02 c0       	push   0xc0023be0
c00112c2:	68 d0 22 02 c0       	push   0xc00222d0
c00112c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112cb:	e8 c6 fd ff ff       	call   c0011096 <EnvVarContainer::loadFrom(char const*, char const*)>
c00112d0:	83 c4 1c             	add    esp,0x1c
c00112d3:	c3                   	ret    

c00112d4 <EnvVarContainer::__loadUser()>:
c00112d4:	c3                   	ret    
c00112d5:	90                   	nop

c00112d6 <EnvVarContainer::EnvVarContainer(Process*)>:
c00112d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00112e8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00112eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112ef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112f6:	90                   	nop
c00112f7:	c3                   	ret    

c00112f8 <EnvVarContainer::~EnvVarContainer()>:
c00112f8:	83 ec 0c             	sub    esp,0xc
c00112fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011302:	85 c0                	test   eax,eax
c0011304:	74 1d                	je     c0011323 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001130a:	8b 00                	mov    eax,DWORD PTR [eax]
c001130c:	85 c0                	test   eax,eax
c001130e:	74 13                	je     c0011323 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011314:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011317:	83 ec 0c             	sub    esp,0xc
c001131a:	50                   	push   eax
c001131b:	e8 a6 67 ff ff       	call   c0007ac6 <free>
c0011320:	83 c4 10             	add    esp,0x10
c0011323:	90                   	nop
c0011324:	83 c4 0c             	add    esp,0xc
c0011327:	c3                   	ret    

c0011328 <KeGetEnv(Process*, char const*)>:
c0011328:	53                   	push   ebx
c0011329:	83 ec 08             	sub    esp,0x8
c001132c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011330:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011334:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c001133a:	74 04                	je     c0011340 <KeGetEnv(Process*, char const*)+0x18>
c001133c:	85 c0                	test   eax,eax
c001133e:	75 0b                	jne    c001134b <KeGetEnv(Process*, char const*)+0x23>
c0011340:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011345:	85 c0                	test   eax,eax
c0011347:	75 19                	jne    c0011362 <KeGetEnv(Process*, char const*)+0x3a>
c0011349:	eb 27                	jmp    c0011372 <KeGetEnv(Process*, char const*)+0x4a>
c001134b:	52                   	push   edx
c001134c:	52                   	push   edx
c001134d:	53                   	push   ebx
c001134e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011354:	e8 3b fc ff ff       	call   c0010f94 <EnvVarContainer::getEnv(char const*)>
c0011359:	83 c4 10             	add    esp,0x10
c001135c:	85 c0                	test   eax,eax
c001135e:	75 28                	jne    c0011388 <KeGetEnv(Process*, char const*)+0x60>
c0011360:	eb de                	jmp    c0011340 <KeGetEnv(Process*, char const*)+0x18>
c0011362:	52                   	push   edx
c0011363:	52                   	push   edx
c0011364:	53                   	push   ebx
c0011365:	50                   	push   eax
c0011366:	e8 29 fc ff ff       	call   c0010f94 <EnvVarContainer::getEnv(char const*)>
c001136b:	83 c4 10             	add    esp,0x10
c001136e:	85 c0                	test   eax,eax
c0011370:	75 16                	jne    c0011388 <KeGetEnv(Process*, char const*)+0x60>
c0011372:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011376:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c001137b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001137f:	83 c4 08             	add    esp,0x8
c0011382:	5b                   	pop    ebx
c0011383:	e9 0c fc ff ff       	jmp    c0010f94 <EnvVarContainer::getEnv(char const*)>
c0011388:	83 c4 08             	add    esp,0x8
c001138b:	5b                   	pop    ebx
c001138c:	c3                   	ret    

c001138d <KeSetEnvSystem(char const*, char const*)>:
c001138d:	83 ec 10             	sub    esp,0x10
c0011390:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011394:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011398:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c001139e:	e8 2f fc ff ff       	call   c0010fd2 <EnvVarContainer::setEnv(char const*, char const*)>
c00113a3:	83 c4 1c             	add    esp,0x1c
c00113a6:	c3                   	ret    

c00113a7 <KeSetEnvUser(char const*, char const*)>:
c00113a7:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00113ac:	85 c0                	test   eax,eax
c00113ae:	74 15                	je     c00113c5 <KeSetEnvUser(char const*, char const*)+0x1e>
c00113b0:	83 ec 10             	sub    esp,0x10
c00113b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113bb:	50                   	push   eax
c00113bc:	e8 11 fc ff ff       	call   c0010fd2 <EnvVarContainer::setEnv(char const*, char const*)>
c00113c1:	83 c4 1c             	add    esp,0x1c
c00113c4:	c3                   	ret    
c00113c5:	c3                   	ret    

c00113c6 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00113c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113ca:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00113d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113d4:	e9 f9 fb ff ff       	jmp    c0010fd2 <EnvVarContainer::setEnv(char const*, char const*)>

c00113d9 <KeDeleteEnvSystem(char const*)>:
c00113d9:	c3                   	ret    

c00113da <KeDeleteEnvUser(char const*)>:
c00113da:	c3                   	ret    

c00113db <KeDeleteEnvProcess(Process*, char const*)>:
c00113db:	c3                   	ret    

c00113dc <KeNewProcessEnv(Process*)>:
c00113dc:	83 ec 28             	sub    esp,0x28
c00113df:	6a 0c                	push   0xc
c00113e1:	e8 d0 66 ff ff       	call   c0007ab6 <malloc>
c00113e6:	5a                   	pop    edx
c00113e7:	59                   	pop    ecx
c00113e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00113ec:	50                   	push   eax
c00113ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113f1:	e8 e0 fe ff ff       	call   c00112d6 <EnvVarContainer::EnvVarContainer(Process*)>
c00113f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113fa:	83 c4 2c             	add    esp,0x2c
c00113fd:	c3                   	ret    

c00113fe <KeCopyProcessEnv(Process*, Process*)>:
c00113fe:	57                   	push   edi
c00113ff:	56                   	push   esi
c0011400:	53                   	push   ebx
c0011401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011405:	83 ec 0c             	sub    esp,0xc
c0011408:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001140e:	6a 0c                	push   0xc
c0011410:	e8 a1 66 ff ff       	call   c0007ab6 <malloc>
c0011415:	89 c3                	mov    ebx,eax
c0011417:	58                   	pop    eax
c0011418:	5a                   	pop    edx
c0011419:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001141d:	53                   	push   ebx
c001141e:	e8 b3 fe ff ff       	call   c00112d6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011423:	8b 07                	mov    eax,DWORD PTR [edi]
c0011425:	89 03                	mov    DWORD PTR [ebx],eax
c0011427:	c1 e0 03             	shl    eax,0x3
c001142a:	89 04 24             	mov    DWORD PTR [esp],eax
c001142d:	e8 84 66 ff ff       	call   c0007ab6 <malloc>
c0011432:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011435:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011437:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001143a:	c1 e1 03             	shl    ecx,0x3
c001143d:	89 c7                	mov    edi,eax
c001143f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011441:	83 c4 10             	add    esp,0x10
c0011444:	89 d8                	mov    eax,ebx
c0011446:	5b                   	pop    ebx
c0011447:	5e                   	pop    esi
c0011448:	5f                   	pop    edi
c0011449:	c3                   	ret    

c001144a <KeLoadSystemEnv()>:
c001144a:	53                   	push   ebx
c001144b:	83 ec 14             	sub    esp,0x14
c001144e:	6a 0c                	push   0xc
c0011450:	e8 61 66 ff ff       	call   c0007ab6 <malloc>
c0011455:	89 c3                	mov    ebx,eax
c0011457:	58                   	pop    eax
c0011458:	5a                   	pop    edx
c0011459:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001145f:	53                   	push   ebx
c0011460:	e8 71 fe ff ff       	call   c00112d6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011465:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011468:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c001146e:	e8 47 fe ff ff       	call   c00112ba <EnvVarContainer::__loadSystem()>
c0011473:	83 c4 18             	add    esp,0x18
c0011476:	5b                   	pop    ebx
c0011477:	c3                   	ret    

c0011478 <KeLoadUserEnv()>:
c0011478:	53                   	push   ebx
c0011479:	83 ec 14             	sub    esp,0x14
c001147c:	6a 0c                	push   0xc
c001147e:	e8 33 66 ff ff       	call   c0007ab6 <malloc>
c0011483:	89 c3                	mov    ebx,eax
c0011485:	58                   	pop    eax
c0011486:	5a                   	pop    edx
c0011487:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001148d:	53                   	push   ebx
c001148e:	e8 43 fe ff ff       	call   c00112d6 <EnvVarContainer::EnvVarContainer(Process*)>
c0011493:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c0011499:	83 c4 18             	add    esp,0x18
c001149c:	5b                   	pop    ebx
c001149d:	c3                   	ret    

c001149e <KeFlushEnv()>:
c001149e:	c3                   	ret    

c001149f <KeGetProcessTotalEnvCount(Process*)>:
c001149f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114a3:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c00114a9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114af:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00114b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00114b6:	03 01                	add    eax,DWORD PTR [ecx]
c00114b8:	85 d2                	test   edx,edx
c00114ba:	74 02                	je     c00114be <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00114bc:	03 02                	add    eax,DWORD PTR [edx]
c00114be:	c3                   	ret    

c00114bf <KeGetProcessEnvPair(Process*, int)>:
c00114bf:	57                   	push   edi
c00114c0:	56                   	push   esi
c00114c1:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c00114c7:	53                   	push   ebx
c00114c8:	85 f6                	test   esi,esi
c00114ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00114ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114d2:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00114dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00114de:	75 16                	jne    c00114f6 <KeGetProcessEnvPair(Process*, int)+0x37>
c00114e0:	39 c2                	cmp    edx,eax
c00114e2:	7c 16                	jl     c00114fa <KeGetProcessEnvPair(Process*, int)+0x3b>
c00114e4:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c00114ea:	8b 31                	mov    esi,DWORD PTR [ecx]
c00114ec:	01 c6                	add    esi,eax
c00114ee:	39 d6                	cmp    esi,edx
c00114f0:	7e 3c                	jle    c001152e <KeGetProcessEnvPair(Process*, int)+0x6f>
c00114f2:	29 c2                	sub    edx,eax
c00114f4:	eb 04                	jmp    c00114fa <KeGetProcessEnvPair(Process*, int)+0x3b>
c00114f6:	39 c2                	cmp    edx,eax
c00114f8:	7d 05                	jge    c00114ff <KeGetProcessEnvPair(Process*, int)+0x40>
c00114fa:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00114fd:	eb 20                	jmp    c001151f <KeGetProcessEnvPair(Process*, int)+0x60>
c00114ff:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011501:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011504:	39 d1                	cmp    ecx,edx
c0011506:	7e 04                	jle    c001150c <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011508:	29 c2                	sub    edx,eax
c001150a:	eb 10                	jmp    c001151c <KeGetProcessEnvPair(Process*, int)+0x5d>
c001150c:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c0011512:	03 0e                	add    ecx,DWORD PTR [esi]
c0011514:	39 d1                	cmp    ecx,edx
c0011516:	7e 16                	jle    c001152e <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011518:	29 c2                	sub    edx,eax
c001151a:	29 fa                	sub    edx,edi
c001151c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001151f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011522:	8b 02                	mov    eax,DWORD PTR [edx]
c0011524:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011527:	89 03                	mov    DWORD PTR [ebx],eax
c0011529:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001152c:	eb 1d                	jmp    c001154b <KeGetProcessEnvPair(Process*, int)+0x8c>
c001152e:	83 ec 0c             	sub    esp,0xc
c0011531:	68 f2 22 02 c0       	push   0xc00222f2
c0011536:	e8 ac 00 00 00       	call   c00115e7 <KePanic(char const*)>
c001153b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011541:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011548:	83 c4 10             	add    esp,0x10
c001154b:	89 d8                	mov    eax,ebx
c001154d:	5b                   	pop    ebx
c001154e:	5e                   	pop    esi
c001154f:	5f                   	pop    edi
c0011550:	c2 04 00             	ret    0x4

c0011553 <CPU::current()>:
c0011553:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011558:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001155e:	c3                   	ret    

c001155f <operator new(unsigned long)>:
c001155f:	e9 52 65 ff ff       	jmp    c0007ab6 <malloc>

c0011564 <operator delete(void*)>:
c0011564:	e9 6d 65 ff ff       	jmp    c0007ad6 <rfree>

c0011569 <disableIRQs()>:
c0011569:	fa                   	cli    
c001156a:	c3                   	ret    

c001156b <enableIRQs()>:
c001156b:	fb                   	sti    
c001156c:	c3                   	ret    

c001156d <lockScheduler()>:
c001156d:	fa                   	cli    
c001156e:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0011574:	c3                   	ret    

c0011575 <unlockScheduler()>:
c0011575:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001157a:	48                   	dec    eax
c001157b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011580:	75 01                	jne    c0011583 <unlockScheduler()+0xe>
c0011582:	fb                   	sti    
c0011583:	c3                   	ret    

c0011584 <lockStuff()>:
c0011584:	fa                   	cli    
c0011585:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001158b:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c0011591:	c3                   	ret    

c0011592 <unlockStuff()>:
c0011592:	83 ec 0c             	sub    esp,0xc
c0011595:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001159a:	48                   	dec    eax
c001159b:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00115a0:	75 18                	jne    c00115ba <unlockStuff()+0x28>
c00115a2:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c00115a9:	74 0f                	je     c00115ba <unlockStuff()+0x28>
c00115ab:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00115b5:	e8 ce 4a 00 00       	call   c0016088 <schedule()>
c00115ba:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115bf:	48                   	dec    eax
c00115c0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115c5:	75 01                	jne    c00115c8 <unlockStuff()+0x36>
c00115c7:	fb                   	sti    
c00115c8:	83 c4 0c             	add    esp,0xc
c00115cb:	c3                   	ret    

c00115cc <Virt::getAKernelVAS()>:
c00115cc:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c00115d1:	c3                   	ret    

c00115d2 <__not_memcpy>:
c00115d2:	57                   	push   edi
c00115d3:	56                   	push   esi
c00115d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115d8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00115dc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00115e0:	89 c7                	mov    edi,eax
c00115e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115e4:	5e                   	pop    esi
c00115e5:	5f                   	pop    edi
c00115e6:	c3                   	ret    

c00115e7 <KePanic(char const*)>:
c00115e7:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c00115ee:	e9 3b 6a 00 00       	jmp    c001802e <HalPanic(char const*)>

c00115f3 <KePowerThread(void*)>:
c00115f3:	83 ec 0c             	sub    esp,0xc
c00115f6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115fb:	48                   	dec    eax
c00115fc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011601:	75 01                	jne    c0011604 <KePowerThread(void*)+0x11>
c0011603:	fb                   	sti    
c0011604:	83 ec 0c             	sub    esp,0xc
c0011607:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c001160e:	6a 0a                	push   0xa
c0011610:	e8 b7 4d 00 00       	call   c00163cc <sleep(unsigned int)>
c0011615:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c001161c:	83 c4 10             	add    esp,0x10
c001161f:	eb e3                	jmp    c0011604 <KePowerThread(void*)+0x11>

c0011621 <KeChangePowerSettings(PowerSettings)>:
c0011621:	57                   	push   edi
c0011622:	b9 09 00 00 00       	mov    ecx,0x9
c0011627:	56                   	push   esi
c0011628:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c001162d:	fc                   	cld    
c001162e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011632:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011634:	5e                   	pop    esi
c0011635:	5f                   	pop    edi
c0011636:	c3                   	ret    

c0011637 <KeUserIOReceived()>:
c0011637:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011641:	c3                   	ret    

c0011642 <KeHandlePowerButton()>:
c0011642:	83 ec 0c             	sub    esp,0xc
c0011645:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c001164a:	83 f8 02             	cmp    eax,0x2
c001164d:	75 10                	jne    c001165f <KeHandlePowerButton()+0x1d>
c001164f:	83 ec 0c             	sub    esp,0xc
c0011652:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0011658:	e8 cb 5a ff ff       	call   c0007128 <Computer::shutdown()>
c001165d:	eb 11                	jmp    c0011670 <KeHandlePowerButton()+0x2e>
c001165f:	48                   	dec    eax
c0011660:	75 11                	jne    c0011673 <KeHandlePowerButton()+0x31>
c0011662:	83 ec 0c             	sub    esp,0xc
c0011665:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001166b:	e8 e8 5a ff ff       	call   c0007158 <Computer::sleep()>
c0011670:	83 c4 10             	add    esp,0x10
c0011673:	83 c4 0c             	add    esp,0xc
c0011676:	c3                   	ret    

c0011677 <KeHandleSleepButton()>:
c0011677:	83 ec 0c             	sub    esp,0xc
c001167a:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c001167f:	83 f8 02             	cmp    eax,0x2
c0011682:	75 10                	jne    c0011694 <KeHandleSleepButton()+0x1d>
c0011684:	83 ec 0c             	sub    esp,0xc
c0011687:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001168d:	e8 96 5a ff ff       	call   c0007128 <Computer::shutdown()>
c0011692:	eb 11                	jmp    c00116a5 <KeHandleSleepButton()+0x2e>
c0011694:	48                   	dec    eax
c0011695:	75 11                	jne    c00116a8 <KeHandleSleepButton()+0x31>
c0011697:	83 ec 0c             	sub    esp,0xc
c001169a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116a0:	e8 b3 5a ff ff       	call   c0007158 <Computer::sleep()>
c00116a5:	83 c4 10             	add    esp,0x10
c00116a8:	83 c4 0c             	add    esp,0xc
c00116ab:	c3                   	ret    

c00116ac <KeSetupPowerManager()>:
c00116ac:	83 ec 0c             	sub    esp,0xc
c00116af:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00116b9:	68 f0 00 00 00       	push   0xf0
c00116be:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c00116c5:	6a 00                	push   0x0
c00116c7:	68 f3 15 01 c0       	push   0xc00115f3
c00116cc:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00116d2:	e8 61 47 00 00       	call   c0015e38 <Process::createThread(void (*)(void*), void*, int)>
c00116d7:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c00116e1:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c00116eb:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c00116f5:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c00116ff:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c0011709:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c0011713:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c001171d:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c0011727:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011731:	83 c4 1c             	add    esp,0x1c
c0011734:	c3                   	ret    

c0011735 <KeRand()>:
c0011735:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c001173f:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c0011749:	53                   	push   ebx
c001174a:	01 c1                	add    ecx,eax
c001174c:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011751:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c0011757:	01 ca                	add    edx,ecx
c0011759:	05 ef 04 b5 00       	add    eax,0xb504ef
c001175e:	83 d2 00             	adc    edx,0x0
c0011761:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011766:	0f b7 da             	movzx  ebx,dx
c0011769:	89 da                	mov    edx,ebx
c001176b:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c0011771:	0f ac d0 0e          	shrd   eax,edx,0xe
c0011775:	5b                   	pop    ebx
c0011776:	c3                   	ret    

c0011777 <KeSeedRand(unsigned int)>:
c0011777:	53                   	push   ebx
c0011778:	83 ec 08             	sub    esp,0x8
c001177b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001177f:	e8 c9 6b 00 00       	call   c001834d <HalGetRand()>
c0011784:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c001178e:	31 d8                	xor    eax,ebx
c0011790:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c0011795:	e8 9b ff ff ff       	call   c0011735 <KeRand()>
c001179a:	83 c4 08             	add    esp,0x8
c001179d:	5b                   	pop    ebx
c001179e:	eb 95                	jmp    c0011735 <KeRand()>

c00117a0 <KeInitRand()>:
c00117a0:	83 ec 0c             	sub    esp,0xc
c00117a3:	e8 9a 69 00 00       	call   c0018142 <HalQueryPerformanceCounter()>
c00117a8:	0f 20 da             	mov    edx,cr3
c00117ab:	0f 22 da             	mov    cr3,edx
c00117ae:	0f 20 da             	mov    edx,cr3
c00117b1:	0f 22 da             	mov    cr3,edx
c00117b4:	0f 20 da             	mov    edx,cr3
c00117b7:	0f 22 da             	mov    cr3,edx
c00117ba:	0f 20 da             	mov    edx,cr3
c00117bd:	0f 22 da             	mov    cr3,edx
c00117c0:	83 ec 0c             	sub    esp,0xc
c00117c3:	35 03 8a 95 38       	xor    eax,0x38958a03
c00117c8:	50                   	push   eax
c00117c9:	e8 a9 ff ff ff       	call   c0011777 <KeSeedRand(unsigned int)>
c00117ce:	83 c4 1c             	add    esp,0x1c
c00117d1:	c3                   	ret    
c00117d2:	66 90                	xchg   ax,ax

c00117d4 <KeResolveCompatibilitySymbol(char*)>:
c00117d4:	83 ec 0c             	sub    esp,0xc
c00117d7:	83 ec 08             	sub    esp,0x8
c00117da:	68 0c 23 02 c0       	push   0xc002230c
c00117df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117e3:	e8 68 ef fe ff       	call   c0000750 <strcmp>
c00117e8:	83 c4 10             	add    esp,0x10
c00117eb:	85 c0                	test   eax,eax
c00117ed:	0f 94 c0             	sete   al
c00117f0:	0f b6 c0             	movzx  eax,al
c00117f3:	85 c0                	test   eax,eax
c00117f5:	74 0d                	je     c0011804 <KeResolveCompatibilitySymbol(char*)+0x30>
c00117f7:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c00117fc:	e9 8b 01 00 00       	jmp    c001198c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011801:	8d 76 00             	lea    esi,[esi+0x0]
c0011804:	83 ec 08             	sub    esp,0x8
c0011807:	68 15 23 02 c0       	push   0xc0022315
c001180c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011810:	e8 3b ef fe ff       	call   c0000750 <strcmp>
c0011815:	83 c4 10             	add    esp,0x10
c0011818:	85 c0                	test   eax,eax
c001181a:	0f 94 c0             	sete   al
c001181d:	0f b6 c0             	movzx  eax,al
c0011820:	85 c0                	test   eax,eax
c0011822:	74 0c                	je     c0011830 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011824:	b8 00 f7 01 c0       	mov    eax,0xc001f700
c0011829:	e9 5e 01 00 00       	jmp    c001198c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001182e:	66 90                	xchg   ax,ax
c0011830:	83 ec 08             	sub    esp,0x8
c0011833:	68 1f 23 02 c0       	push   0xc002231f
c0011838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001183c:	e8 0f ef fe ff       	call   c0000750 <strcmp>
c0011841:	83 c4 10             	add    esp,0x10
c0011844:	85 c0                	test   eax,eax
c0011846:	0f 94 c0             	sete   al
c0011849:	0f b6 c0             	movzx  eax,al
c001184c:	85 c0                	test   eax,eax
c001184e:	74 0c                	je     c001185c <KeResolveCompatibilitySymbol(char*)+0x88>
c0011850:	b8 34 f4 01 c0       	mov    eax,0xc001f434
c0011855:	e9 32 01 00 00       	jmp    c001198c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001185a:	66 90                	xchg   ax,ax
c001185c:	83 ec 08             	sub    esp,0x8
c001185f:	68 28 23 02 c0       	push   0xc0022328
c0011864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011868:	e8 e3 ee fe ff       	call   c0000750 <strcmp>
c001186d:	83 c4 10             	add    esp,0x10
c0011870:	85 c0                	test   eax,eax
c0011872:	0f 94 c0             	sete   al
c0011875:	0f b6 c0             	movzx  eax,al
c0011878:	85 c0                	test   eax,eax
c001187a:	74 0c                	je     c0011888 <KeResolveCompatibilitySymbol(char*)+0xb4>
c001187c:	b8 e7 15 01 c0       	mov    eax,0xc00115e7
c0011881:	e9 06 01 00 00       	jmp    c001198c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011886:	66 90                	xchg   ax,ax
c0011888:	83 ec 08             	sub    esp,0x8
c001188b:	68 3b 23 02 c0       	push   0xc002233b
c0011890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011894:	e8 b7 ee fe ff       	call   c0000750 <strcmp>
c0011899:	83 c4 10             	add    esp,0x10
c001189c:	85 c0                	test   eax,eax
c001189e:	0f 94 c0             	sete   al
c00118a1:	0f b6 c0             	movzx  eax,al
c00118a4:	85 c0                	test   eax,eax
c00118a6:	74 0c                	je     c00118b4 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00118a8:	b8 e7 0e 01 c0       	mov    eax,0xc0010ee7
c00118ad:	e9 da 00 00 00       	jmp    c001198c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118b2:	66 90                	xchg   ax,ax
c00118b4:	83 ec 08             	sub    esp,0x8
c00118b7:	68 58 23 02 c0       	push   0xc0022358
c00118bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118c0:	e8 8b ee fe ff       	call   c0000750 <strcmp>
c00118c5:	83 c4 10             	add    esp,0x10
c00118c8:	85 c0                	test   eax,eax
c00118ca:	0f 94 c0             	sete   al
c00118cd:	0f b6 c0             	movzx  eax,al
c00118d0:	85 c0                	test   eax,eax
c00118d2:	74 0c                	je     c00118e0 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00118d4:	b8 00 f8 01 c0       	mov    eax,0xc001f800
c00118d9:	e9 ae 00 00 00       	jmp    c001198c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118de:	66 90                	xchg   ax,ax
c00118e0:	83 ec 08             	sub    esp,0x8
c00118e3:	68 62 23 02 c0       	push   0xc0022362
c00118e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ec:	e8 5f ee fe ff       	call   c0000750 <strcmp>
c00118f1:	83 c4 10             	add    esp,0x10
c00118f4:	85 c0                	test   eax,eax
c00118f6:	0f 94 c0             	sete   al
c00118f9:	0f b6 c0             	movzx  eax,al
c00118fc:	85 c0                	test   eax,eax
c00118fe:	74 0c                	je     c001190c <KeResolveCompatibilitySymbol(char*)+0x138>
c0011900:	b8 80 f5 01 c0       	mov    eax,0xc001f580
c0011905:	e9 82 00 00 00       	jmp    c001198c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001190a:	66 90                	xchg   ax,ax
c001190c:	83 ec 08             	sub    esp,0x8
c001190f:	68 6b 23 02 c0       	push   0xc002236b
c0011914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011918:	e8 33 ee fe ff       	call   c0000750 <strcmp>
c001191d:	83 c4 10             	add    esp,0x10
c0011920:	85 c0                	test   eax,eax
c0011922:	0f 94 c0             	sete   al
c0011925:	0f b6 c0             	movzx  eax,al
c0011928:	85 c0                	test   eax,eax
c001192a:	74 08                	je     c0011934 <KeResolveCompatibilitySymbol(char*)+0x160>
c001192c:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011931:	eb 59                	jmp    c001198c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011933:	90                   	nop
c0011934:	83 ec 08             	sub    esp,0x8
c0011937:	68 83 23 02 c0       	push   0xc0022383
c001193c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011940:	e8 0b ee fe ff       	call   c0000750 <strcmp>
c0011945:	83 c4 10             	add    esp,0x10
c0011948:	85 c0                	test   eax,eax
c001194a:	0f 94 c0             	sete   al
c001194d:	0f b6 c0             	movzx  eax,al
c0011950:	85 c0                	test   eax,eax
c0011952:	74 08                	je     c001195c <KeResolveCompatibilitySymbol(char*)+0x188>
c0011954:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011959:	eb 31                	jmp    c001198c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001195b:	90                   	nop
c001195c:	83 ec 08             	sub    esp,0x8
c001195f:	68 90 23 02 c0       	push   0xc0022390
c0011964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011968:	e8 e3 ed fe ff       	call   c0000750 <strcmp>
c001196d:	83 c4 10             	add    esp,0x10
c0011970:	85 c0                	test   eax,eax
c0011972:	0f 94 c0             	sete   al
c0011975:	0f b6 c0             	movzx  eax,al
c0011978:	85 c0                	test   eax,eax
c001197a:	74 08                	je     c0011984 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c001197c:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c0011981:	eb 09                	jmp    c001198c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011983:	90                   	nop
c0011984:	b8 00 00 00 00       	mov    eax,0x0
c0011989:	8d 76 00             	lea    esi,[esi+0x0]
c001198c:	83 c4 0c             	add    esp,0xc
c001198f:	c3                   	ret    

c0011990 <KiSigKill(int)>:
c0011990:	83 ec 0c             	sub    esp,0xc
c0011993:	6a 00                	push   0x0
c0011995:	6a 00                	push   0x0
c0011997:	6a ff                	push   0xffffffff
c0011999:	6a 01                	push   0x1
c001199b:	e8 b2 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119a0:	83 c4 1c             	add    esp,0x1c
c00119a3:	c3                   	ret    

c00119a4 <KiDefaultSignalHandlerIgnore(int)>:
c00119a4:	c3                   	ret    

c00119a5 <KiDefaultSignalHandlerPause(int)>:
c00119a5:	57                   	push   edi
c00119a6:	b9 07 00 00 00       	mov    ecx,0x7
c00119ab:	56                   	push   esi
c00119ac:	be d9 23 02 c0       	mov    esi,0xc00223d9
c00119b1:	83 ec 24             	sub    esp,0x24
c00119b4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00119b8:	fc                   	cld    
c00119b9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00119bb:	8d 44 24 04          	lea    eax,[esp+0x4]
c00119bf:	50                   	push   eax
c00119c0:	6a 00                	push   0x0
c00119c2:	6a 00                	push   0x0
c00119c4:	6a 27                	push   0x27
c00119c6:	e8 87 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119cb:	83 c4 34             	add    esp,0x34
c00119ce:	5e                   	pop    esi
c00119cf:	5f                   	pop    edi
c00119d0:	c3                   	ret    

c00119d1 <KiDefaultSignalHandlerResume(int)>:
c00119d1:	57                   	push   edi
c00119d2:	b9 1d 00 00 00       	mov    ecx,0x1d
c00119d7:	56                   	push   esi
c00119d8:	be f5 23 02 c0       	mov    esi,0xc00223f5
c00119dd:	83 ec 24             	sub    esp,0x24
c00119e0:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00119e4:	fc                   	cld    
c00119e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119e7:	8d 44 24 03          	lea    eax,[esp+0x3]
c00119eb:	50                   	push   eax
c00119ec:	6a 00                	push   0x0
c00119ee:	6a 00                	push   0x0
c00119f0:	6a 27                	push   0x27
c00119f2:	e8 5b 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119f7:	83 c4 34             	add    esp,0x34
c00119fa:	5e                   	pop    esi
c00119fb:	5f                   	pop    edi
c00119fc:	c3                   	ret    

c00119fd <KeDeinitSignals(SigHandlerBlock*)>:
c00119fd:	e9 c4 60 ff ff       	jmp    c0007ac6 <free>

c0011a02 <KeInitSignals()>:
c0011a02:	53                   	push   ebx
c0011a03:	83 ec 14             	sub    esp,0x14
c0011a06:	68 c8 00 00 00       	push   0xc8
c0011a0b:	e8 a6 60 ff ff       	call   c0007ab6 <malloc>
c0011a10:	83 c4 0c             	add    esp,0xc
c0011a13:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011a1d:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011a27:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011a2e:	89 c3                	mov    ebx,eax
c0011a30:	6a 20                	push   0x20
c0011a32:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011a38:	6a 00                	push   0x0
c0011a3a:	50                   	push   eax
c0011a3b:	e8 b0 ea fe ff       	call   c00004f0 <memset>
c0011a40:	83 c4 0c             	add    esp,0xc
c0011a43:	6a 44                	push   0x44
c0011a45:	6a 00                	push   0x0
c0011a47:	53                   	push   ebx
c0011a48:	e8 a3 ea fe ff       	call   c00004f0 <memset>
c0011a4d:	89 d8                	mov    eax,ebx
c0011a4f:	83 c4 18             	add    esp,0x18
c0011a52:	5b                   	pop    ebx
c0011a53:	c3                   	ret    

c0011a54 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011a54:	53                   	push   ebx
c0011a55:	b8 01 00 00 00       	mov    eax,0x1
c0011a5a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011a5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a62:	83 f9 10             	cmp    ecx,0x10
c0011a65:	7f 21                	jg     c0011a88 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011a67:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a6e:	89 03                	mov    DWORD PTR [ebx],eax
c0011a70:	b8 01 00 00 00       	mov    eax,0x1
c0011a75:	d3 e0                	shl    eax,cl
c0011a77:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011a7b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011a7e:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011a86:	31 c0                	xor    eax,eax
c0011a88:	5b                   	pop    ebx
c0011a89:	c3                   	ret    

c0011a8a <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011a8a:	55                   	push   ebp
c0011a8b:	57                   	push   edi
c0011a8c:	bf 08 00 00 00       	mov    edi,0x8
c0011a91:	56                   	push   esi
c0011a92:	53                   	push   ebx
c0011a93:	83 ec 18             	sub    esp,0x18
c0011a96:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a9a:	68 12 24 02 c0       	push   0xc0022412
c0011a9f:	e8 a1 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011aa4:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011aab:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011ab1:	83 c4 10             	add    esp,0x10
c0011ab4:	31 c9                	xor    ecx,ecx
c0011ab6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011aba:	99                   	cdq    
c0011abb:	f7 ff                	idiv   edi
c0011abd:	8d 42 24             	lea    eax,[edx+0x24]
c0011ac0:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011ac4:	85 f6                	test   esi,esi
c0011ac6:	75 1a                	jne    c0011ae2 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011ac8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011acc:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011ad0:	50                   	push   eax
c0011ad1:	50                   	push   eax
c0011ad2:	52                   	push   edx
c0011ad3:	68 23 24 02 c0       	push   0xc0022423
c0011ad8:	e8 68 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011add:	83 c4 10             	add    esp,0x10
c0011ae0:	eb 1b                	jmp    c0011afd <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011ae2:	41                   	inc    ecx
c0011ae3:	83 f9 08             	cmp    ecx,0x8
c0011ae6:	75 ce                	jne    c0011ab6 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011ae8:	83 ec 0c             	sub    esp,0xc
c0011aeb:	be 01 00 00 00       	mov    esi,0x1
c0011af0:	68 44 24 02 c0       	push   0xc0022444
c0011af5:	e8 4b 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011afa:	83 c4 10             	add    esp,0x10
c0011afd:	83 c4 0c             	add    esp,0xc
c0011b00:	89 f0                	mov    eax,esi
c0011b02:	5b                   	pop    ebx
c0011b03:	5e                   	pop    esi
c0011b04:	5f                   	pop    edi
c0011b05:	5d                   	pop    ebp
c0011b06:	c3                   	ret    

c0011b07 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011b07:	55                   	push   ebp
c0011b08:	57                   	push   edi
c0011b09:	56                   	push   esi
c0011b0a:	53                   	push   ebx
c0011b0b:	51                   	push   ecx
c0011b0c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011b10:	85 db                	test   ebx,ebx
c0011b12:	0f 84 bc 00 00 00    	je     c0011bd4 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b18:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011b1f:	0f 84 af 00 00 00    	je     c0011bd4 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b25:	31 c9                	xor    ecx,ecx
c0011b27:	bf 08 00 00 00       	mov    edi,0x8
c0011b2c:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011b32:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011b35:	99                   	cdq    
c0011b36:	f7 ff                	idiv   edi
c0011b38:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011b3f:	85 ed                	test   ebp,ebp
c0011b41:	0f 84 9e 00 00 00    	je     c0011be5 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011b47:	89 e9                	mov    ecx,ebp
c0011b49:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011b4f:	bf 01 00 00 00       	mov    edi,0x1
c0011b54:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b57:	d3 e7                	shl    edi,cl
c0011b59:	31 c9                	xor    ecx,ecx
c0011b5b:	b8 01 00 00 00       	mov    eax,0x1
c0011b60:	d3 e0                	shl    eax,cl
c0011b62:	85 04 24             	test   DWORD PTR [esp],eax
c0011b65:	74 06                	je     c0011b6d <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011b67:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011b6b:	75 67                	jne    c0011bd4 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b6d:	41                   	inc    ecx
c0011b6e:	83 f9 11             	cmp    ecx,0x11
c0011b71:	75 e8                	jne    c0011b5b <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011b73:	46                   	inc    esi
c0011b74:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011b77:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011b7d:	09 f8                	or     eax,edi
c0011b7f:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011b8a:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011b90:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011b97:	31 c0                	xor    eax,eax
c0011b99:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011ba1:	74 09                	je     c0011bac <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011ba3:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011baa:	eb 06                	jmp    c0011bb2 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011bac:	40                   	inc    eax
c0011bad:	83 f8 08             	cmp    eax,0x8
c0011bb0:	75 e7                	jne    c0011b99 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011bb2:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011bb5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011bb9:	83 fd 09             	cmp    ebp,0x9
c0011bbc:	89 2a                	mov    DWORD PTR [edx],ebp
c0011bbe:	75 07                	jne    c0011bc7 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011bc0:	b8 90 19 01 c0       	mov    eax,0xc0011990
c0011bc5:	eb 31                	jmp    c0011bf8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bc7:	83 f8 01             	cmp    eax,0x1
c0011bca:	75 0c                	jne    c0011bd8 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011bcc:	f7 d7                	not    edi
c0011bce:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011bd4:	31 c0                	xor    eax,eax
c0011bd6:	eb 20                	jmp    c0011bf8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bd8:	85 c0                	test   eax,eax
c0011bda:	75 1c                	jne    c0011bf8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011bdc:	8b 04 ad 40 3c 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc3c0]
c0011be3:	eb 13                	jmp    c0011bf8 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011be5:	46                   	inc    esi
c0011be6:	41                   	inc    ecx
c0011be7:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011bed:	83 f9 08             	cmp    ecx,0x8
c0011bf0:	0f 85 36 ff ff ff    	jne    c0011b2c <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011bf6:	eb dc                	jmp    c0011bd4 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011bf8:	5a                   	pop    edx
c0011bf9:	5b                   	pop    ebx
c0011bfa:	5e                   	pop    esi
c0011bfb:	5f                   	pop    edi
c0011bfc:	5d                   	pop    ebp
c0011bfd:	c3                   	ret    

c0011bfe <KiCheckSignalZ>:
c0011bfe:	83 ec 10             	sub    esp,0x10
c0011c01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011c05:	50                   	push   eax
c0011c06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c0b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c0e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c14:	e8 ee fe ff ff       	call   c0011b07 <KeCheckSignal(SigHandlerBlock*, int*)>
c0011c19:	5a                   	pop    edx
c0011c1a:	31 d2                	xor    edx,edx
c0011c1c:	59                   	pop    ecx
c0011c1d:	85 c0                	test   eax,eax
c0011c1f:	74 19                	je     c0011c3a <KiCheckSignalZ+0x3c>
c0011c21:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c27:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011c2a:	89 02                	mov    DWORD PTR [edx],eax
c0011c2c:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011c33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c37:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011c3a:	89 d0                	mov    eax,edx
c0011c3c:	83 c4 10             	add    esp,0x10
c0011c3f:	c3                   	ret    

c0011c40 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011c40:	56                   	push   esi
c0011c41:	53                   	push   ebx
c0011c42:	bb 01 00 00 00       	mov    ebx,0x1
c0011c47:	52                   	push   edx
c0011c48:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011c4c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c50:	d3 e3                	shl    ebx,cl
c0011c52:	83 f9 10             	cmp    ecx,0x10
c0011c55:	7f 08                	jg     c0011c5f <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011c57:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011c5d:	75 10                	jne    c0011c6f <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011c5f:	83 ec 0c             	sub    esp,0xc
c0011c62:	68 55 24 02 c0       	push   0xc0022455
c0011c67:	e8 7b f9 ff ff       	call   c00115e7 <KePanic(char const*)>
c0011c6c:	83 c4 10             	add    esp,0x10
c0011c6f:	f7 d3                	not    ebx
c0011c71:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011c77:	58                   	pop    eax
c0011c78:	5b                   	pop    ebx
c0011c79:	5e                   	pop    esi
c0011c7a:	c3                   	ret    

c0011c7b <KiFinishSignalZ>:
c0011c7b:	53                   	push   ebx
c0011c7c:	83 ec 10             	sub    esp,0x10
c0011c7f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c83:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011c86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c8e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c94:	e8 a7 ff ff ff       	call   c0011c40 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011c99:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011c9f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011ca6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011cad:	83 c4 18             	add    esp,0x18
c0011cb0:	5b                   	pop    ebx
c0011cb1:	c3                   	ret    

c0011cb2 <SysSeekDir(regs*)>:
c0011cb2:	31 c0                	xor    eax,eax
c0011cb4:	31 d2                	xor    edx,edx
c0011cb6:	c3                   	ret    

c0011cb7 <SysTellDir(regs*)>:
c0011cb7:	31 c0                	xor    eax,eax
c0011cb9:	31 d2                	xor    edx,edx
c0011cbb:	c3                   	ret    

c0011cbc <SysVerify(regs*)>:
c0011cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cc0:	31 d2                	xor    edx,edx
c0011cc2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011cc5:	c3                   	ret    

c0011cc6 <SysGetArgc(regs*)>:
c0011cc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ccb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cce:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011cd4:	89 c2                	mov    edx,eax
c0011cd6:	c1 fa 1f             	sar    edx,0x1f
c0011cd9:	c3                   	ret    

c0011cda <SysTTYName(regs*)>:
c0011cda:	b8 01 00 00 00       	mov    eax,0x1
c0011cdf:	31 d2                	xor    edx,edx
c0011ce1:	c3                   	ret    

c0011ce2 <SysFormatDisk(regs*)>:
c0011ce2:	56                   	push   esi
c0011ce3:	53                   	push   ebx
c0011ce4:	83 ec 04             	sub    esp,0x4
c0011ce7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011ceb:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011cf1:	eb 28                	jmp    c0011d1b <SysFormatDisk(regs*)+0x39>
c0011cf3:	83 ec 0c             	sub    esp,0xc
c0011cf6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011cf9:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011cfc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cfe:	51                   	push   ecx
c0011cff:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011d02:	51                   	push   ecx
c0011d03:	50                   	push   eax
c0011d04:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011d0b:	50                   	push   eax
c0011d0c:	53                   	push   ebx
c0011d0d:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011d10:	83 c4 20             	add    esp,0x20
c0011d13:	83 f8 08             	cmp    eax,0x8
c0011d16:	75 14                	jne    c0011d2c <SysFormatDisk(regs*)+0x4a>
c0011d18:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011d1b:	85 db                	test   ebx,ebx
c0011d1d:	75 d4                	jne    c0011cf3 <SysFormatDisk(regs*)+0x11>
c0011d1f:	83 c4 04             	add    esp,0x4
c0011d22:	b8 03 00 00 00       	mov    eax,0x3
c0011d27:	31 d2                	xor    edx,edx
c0011d29:	5b                   	pop    ebx
c0011d2a:	5e                   	pop    esi
c0011d2b:	c3                   	ret    
c0011d2c:	85 c0                	test   eax,eax
c0011d2e:	74 1f                	je     c0011d4f <SysFormatDisk(regs*)+0x6d>
c0011d30:	83 f8 09             	cmp    eax,0x9
c0011d33:	74 0d                	je     c0011d42 <SysFormatDisk(regs*)+0x60>
c0011d35:	83 c4 04             	add    esp,0x4
c0011d38:	b8 02 00 00 00       	mov    eax,0x2
c0011d3d:	31 d2                	xor    edx,edx
c0011d3f:	5b                   	pop    ebx
c0011d40:	5e                   	pop    esi
c0011d41:	c3                   	ret    
c0011d42:	83 c4 04             	add    esp,0x4
c0011d45:	b8 01 00 00 00       	mov    eax,0x1
c0011d4a:	31 d2                	xor    edx,edx
c0011d4c:	5b                   	pop    ebx
c0011d4d:	5e                   	pop    esi
c0011d4e:	c3                   	ret    
c0011d4f:	83 c4 04             	add    esp,0x4
c0011d52:	31 c0                	xor    eax,eax
c0011d54:	31 d2                	xor    edx,edx
c0011d56:	5b                   	pop    ebx
c0011d57:	5e                   	pop    esi
c0011d58:	c3                   	ret    

c0011d59 <SysSetDiskVolumeLabel(regs*)>:
c0011d59:	56                   	push   esi
c0011d5a:	53                   	push   ebx
c0011d5b:	83 ec 04             	sub    esp,0x4
c0011d5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d62:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d65:	83 f8 19             	cmp    eax,0x19
c0011d68:	77 33                	ja     c0011d9d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d6a:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011d71:	85 c9                	test   ecx,ecx
c0011d73:	74 28                	je     c0011d9d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d75:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011d78:	85 db                	test   ebx,ebx
c0011d7a:	74 21                	je     c0011d9d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d7c:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011d82:	85 d2                	test   edx,edx
c0011d84:	74 17                	je     c0011d9d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011d86:	8b 32                	mov    esi,DWORD PTR [edx]
c0011d88:	53                   	push   ebx
c0011d89:	50                   	push   eax
c0011d8a:	51                   	push   ecx
c0011d8b:	52                   	push   edx
c0011d8c:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011d8f:	83 c4 10             	add    esp,0x10
c0011d92:	89 c2                	mov    edx,eax
c0011d94:	83 c4 04             	add    esp,0x4
c0011d97:	c1 fa 1f             	sar    edx,0x1f
c0011d9a:	5b                   	pop    ebx
c0011d9b:	5e                   	pop    esi
c0011d9c:	c3                   	ret    
c0011d9d:	83 c4 04             	add    esp,0x4
c0011da0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011da5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011daa:	5b                   	pop    ebx
c0011dab:	5e                   	pop    esi
c0011dac:	c3                   	ret    

c0011dad <SysGetDiskVolumeLabel(regs*)>:
c0011dad:	57                   	push   edi
c0011dae:	56                   	push   esi
c0011daf:	53                   	push   ebx
c0011db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011db4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011db7:	83 fa 19             	cmp    edx,0x19
c0011dba:	77 3c                	ja     c0011df8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dbc:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011dc3:	85 c9                	test   ecx,ecx
c0011dc5:	74 31                	je     c0011df8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dc7:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011dca:	85 db                	test   ebx,ebx
c0011dcc:	74 2a                	je     c0011df8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dce:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011dd1:	85 f6                	test   esi,esi
c0011dd3:	74 23                	je     c0011df8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011dd5:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011ddb:	85 c0                	test   eax,eax
c0011ddd:	74 19                	je     c0011df8 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ddf:	83 ec 0c             	sub    esp,0xc
c0011de2:	8b 38                	mov    edi,DWORD PTR [eax]
c0011de4:	56                   	push   esi
c0011de5:	53                   	push   ebx
c0011de6:	52                   	push   edx
c0011de7:	51                   	push   ecx
c0011de8:	50                   	push   eax
c0011de9:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011dec:	83 c4 20             	add    esp,0x20
c0011def:	89 c2                	mov    edx,eax
c0011df1:	5b                   	pop    ebx
c0011df2:	c1 fa 1f             	sar    edx,0x1f
c0011df5:	5e                   	pop    esi
c0011df6:	5f                   	pop    edi
c0011df7:	c3                   	ret    
c0011df8:	5b                   	pop    ebx
c0011df9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011dfe:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e03:	5e                   	pop    esi
c0011e04:	5f                   	pop    edi
c0011e05:	c3                   	ret    

c0011e06 <SysShutdown(regs*)>:
c0011e06:	83 ec 0c             	sub    esp,0xc
c0011e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e0d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e10:	85 c0                	test   eax,eax
c0011e12:	74 18                	je     c0011e2c <SysShutdown(regs*)+0x26>
c0011e14:	83 f8 01             	cmp    eax,0x1
c0011e17:	74 38                	je     c0011e51 <SysShutdown(regs*)+0x4b>
c0011e19:	83 f8 02             	cmp    eax,0x2
c0011e1c:	74 24                	je     c0011e42 <SysShutdown(regs*)+0x3c>
c0011e1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e23:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e28:	83 c4 0c             	add    esp,0xc
c0011e2b:	c3                   	ret    
c0011e2c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e31:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e33:	6a 00                	push   0x0
c0011e35:	6a 00                	push   0x0
c0011e37:	6a 00                	push   0x0
c0011e39:	50                   	push   eax
c0011e3a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e3d:	83 c4 10             	add    esp,0x10
c0011e40:	eb dc                	jmp    c0011e1e <SysShutdown(regs*)+0x18>
c0011e42:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e47:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e49:	6a 00                	push   0x0
c0011e4b:	6a 00                	push   0x0
c0011e4d:	6a 01                	push   0x1
c0011e4f:	eb e8                	jmp    c0011e39 <SysShutdown(regs*)+0x33>
c0011e51:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011e56:	85 c0                	test   eax,eax
c0011e58:	74 02                	je     c0011e5c <SysShutdown(regs*)+0x56>
c0011e5a:	ff d0                	call   eax
c0011e5c:	31 c0                	xor    eax,eax
c0011e5e:	31 d2                	xor    edx,edx
c0011e60:	83 c4 0c             	add    esp,0xc
c0011e63:	c3                   	ret    

c0011e64 <SysRealpath(regs*)>:
c0011e64:	83 ec 0c             	sub    esp,0xc
c0011e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e6b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011e6e:	85 d2                	test   edx,edx
c0011e70:	74 07                	je     c0011e79 <SysRealpath(regs*)+0x15>
c0011e72:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011e75:	85 c0                	test   eax,eax
c0011e77:	75 0b                	jne    c0011e84 <SysRealpath(regs*)+0x20>
c0011e79:	b8 01 00 00 00       	mov    eax,0x1
c0011e7e:	31 d2                	xor    edx,edx
c0011e80:	83 c4 0c             	add    esp,0xc
c0011e83:	c3                   	ret    
c0011e84:	6a 00                	push   0x0
c0011e86:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011e8c:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011e8f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011e95:	51                   	push   ecx
c0011e96:	52                   	push   edx
c0011e97:	50                   	push   eax
c0011e98:	e8 81 99 ff ff       	call   c000b81e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011e9d:	83 c4 10             	add    esp,0x10
c0011ea0:	31 c0                	xor    eax,eax
c0011ea2:	31 d2                	xor    edx,edx
c0011ea4:	83 c4 0c             	add    esp,0xc
c0011ea7:	c3                   	ret    

c0011ea8 <SysReadDir(regs*)>:
c0011ea8:	53                   	push   ebx
c0011ea9:	83 ec 18             	sub    esp,0x18
c0011eac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011eb0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011eb3:	83 f8 02             	cmp    eax,0x2
c0011eb6:	76 61                	jbe    c0011f19 <SysReadDir(regs*)+0x71>
c0011eb8:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011ebf:	77 49                	ja     c0011f0a <SysReadDir(regs*)+0x62>
c0011ec1:	83 ec 0c             	sub    esp,0xc
c0011ec4:	50                   	push   eax
c0011ec5:	e8 e9 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011eca:	83 c4 10             	add    esp,0x10
c0011ecd:	85 c0                	test   eax,eax
c0011ecf:	74 39                	je     c0011f0a <SysReadDir(regs*)+0x62>
c0011ed1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ed9:	83 ec 0c             	sub    esp,0xc
c0011edc:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ede:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011ee2:	51                   	push   ecx
c0011ee3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011ee6:	51                   	push   ecx
c0011ee7:	6a 00                	push   0x0
c0011ee9:	68 10 01 00 00       	push   0x110
c0011eee:	50                   	push   eax
c0011eef:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ef2:	83 c4 20             	add    esp,0x20
c0011ef5:	85 c0                	test   eax,eax
c0011ef7:	74 29                	je     c0011f22 <SysReadDir(regs*)+0x7a>
c0011ef9:	83 f8 07             	cmp    eax,0x7
c0011efc:	74 1b                	je     c0011f19 <SysReadDir(regs*)+0x71>
c0011efe:	b8 02 00 00 00       	mov    eax,0x2
c0011f03:	31 d2                	xor    edx,edx
c0011f05:	83 c4 18             	add    esp,0x18
c0011f08:	5b                   	pop    ebx
c0011f09:	c3                   	ret    
c0011f0a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f0f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f14:	83 c4 18             	add    esp,0x18
c0011f17:	5b                   	pop    ebx
c0011f18:	c3                   	ret    
c0011f19:	b8 01 00 00 00       	mov    eax,0x1
c0011f1e:	31 d2                	xor    edx,edx
c0011f20:	eb e3                	jmp    c0011f05 <SysReadDir(regs*)+0x5d>
c0011f22:	31 c0                	xor    eax,eax
c0011f24:	31 d2                	xor    edx,edx
c0011f26:	eb dd                	jmp    c0011f05 <SysReadDir(regs*)+0x5d>

c0011f28 <SysIsATTY(regs*)>:
c0011f28:	83 ec 0c             	sub    esp,0xc
c0011f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f2f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f32:	83 f8 02             	cmp    eax,0x2
c0011f35:	76 07                	jbe    c0011f3e <SysIsATTY(regs*)+0x16>
c0011f37:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011f3c:	75 26                	jne    c0011f64 <SysIsATTY(regs*)+0x3c>
c0011f3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f46:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011f4c:	85 c0                	test   eax,eax
c0011f4e:	74 24                	je     c0011f74 <SysIsATTY(regs*)+0x4c>
c0011f50:	83 ec 0c             	sub    esp,0xc
c0011f53:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f55:	50                   	push   eax
c0011f56:	ff 12                	call   DWORD PTR [edx]
c0011f58:	31 d2                	xor    edx,edx
c0011f5a:	0f b6 c0             	movzx  eax,al
c0011f5d:	83 c4 10             	add    esp,0x10
c0011f60:	83 c4 0c             	add    esp,0xc
c0011f63:	c3                   	ret    
c0011f64:	83 ec 0c             	sub    esp,0xc
c0011f67:	50                   	push   eax
c0011f68:	e8 46 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011f6d:	83 c4 10             	add    esp,0x10
c0011f70:	85 c0                	test   eax,eax
c0011f72:	75 dc                	jne    c0011f50 <SysIsATTY(regs*)+0x28>
c0011f74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f79:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f7e:	83 c4 0c             	add    esp,0xc
c0011f81:	c3                   	ret    

c0011f82 <SysSeek(regs*)>:
c0011f82:	53                   	push   ebx
c0011f83:	83 ec 08             	sub    esp,0x8
c0011f86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011f8a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f8d:	8d 50 fd             	lea    edx,[eax-0x3]
c0011f90:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011f96:	77 32                	ja     c0011fca <SysSeek(regs*)+0x48>
c0011f98:	83 ec 0c             	sub    esp,0xc
c0011f9b:	50                   	push   eax
c0011f9c:	e8 12 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011fa1:	83 c4 0c             	add    esp,0xc
c0011fa4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011fa7:	31 db                	xor    ebx,ebx
c0011fa9:	53                   	push   ebx
c0011faa:	51                   	push   ecx
c0011fab:	50                   	push   eax
c0011fac:	e8 41 9c ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0011fb1:	83 c4 10             	add    esp,0x10
c0011fb4:	85 c0                	test   eax,eax
c0011fb6:	0f 95 c0             	setne  al
c0011fb9:	31 d2                	xor    edx,edx
c0011fbb:	0f b6 c0             	movzx  eax,al
c0011fbe:	f7 d8                	neg    eax
c0011fc0:	83 d2 00             	adc    edx,0x0
c0011fc3:	83 c4 08             	add    esp,0x8
c0011fc6:	f7 da                	neg    edx
c0011fc8:	5b                   	pop    ebx
c0011fc9:	c3                   	ret    
c0011fca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fcf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fd4:	83 c4 08             	add    esp,0x8
c0011fd7:	5b                   	pop    ebx
c0011fd8:	c3                   	ret    

c0011fd9 <SysTell(regs*)>:
c0011fd9:	53                   	push   ebx
c0011fda:	83 ec 08             	sub    esp,0x8
c0011fdd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fe1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011fe4:	83 f8 02             	cmp    eax,0x2
c0011fe7:	76 4e                	jbe    c0012037 <SysTell(regs*)+0x5e>
c0011fe9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011fee:	76 19                	jbe    c0012009 <SysTell(regs*)+0x30>
c0011ff0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ff3:	31 d2                	xor    edx,edx
c0011ff5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011ffb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012002:	31 c0                	xor    eax,eax
c0012004:	83 c4 08             	add    esp,0x8
c0012007:	5b                   	pop    ebx
c0012008:	c3                   	ret    
c0012009:	83 ec 0c             	sub    esp,0xc
c001200c:	50                   	push   eax
c001200d:	e8 a1 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012012:	5a                   	pop    edx
c0012013:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012016:	59                   	pop    ecx
c0012017:	53                   	push   ebx
c0012018:	50                   	push   eax
c0012019:	e8 80 9c ff ff       	call   c000bc9e <File::tell(unsigned long long*)>
c001201e:	83 c4 10             	add    esp,0x10
c0012021:	85 c0                	test   eax,eax
c0012023:	0f 95 c0             	setne  al
c0012026:	31 d2                	xor    edx,edx
c0012028:	0f b6 c0             	movzx  eax,al
c001202b:	f7 d8                	neg    eax
c001202d:	83 d2 00             	adc    edx,0x0
c0012030:	83 c4 08             	add    esp,0x8
c0012033:	f7 da                	neg    edx
c0012035:	5b                   	pop    ebx
c0012036:	c3                   	ret    
c0012037:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001203c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012041:	83 c4 08             	add    esp,0x8
c0012044:	5b                   	pop    ebx
c0012045:	c3                   	ret    

c0012046 <SysSize(regs*)>:
c0012046:	53                   	push   ebx
c0012047:	83 ec 18             	sub    esp,0x18
c001204a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001204e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012051:	83 f8 02             	cmp    eax,0x2
c0012054:	76 54                	jbe    c00120aa <SysSize(regs*)+0x64>
c0012056:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001205b:	76 19                	jbe    c0012076 <SysSize(regs*)+0x30>
c001205d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012060:	31 d2                	xor    edx,edx
c0012062:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012068:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001206f:	31 c0                	xor    eax,eax
c0012071:	83 c4 18             	add    esp,0x18
c0012074:	5b                   	pop    ebx
c0012075:	c3                   	ret    
c0012076:	83 ec 0c             	sub    esp,0xc
c0012079:	50                   	push   eax
c001207a:	e8 34 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001207f:	83 c4 0c             	add    esp,0xc
c0012082:	8d 54 24 13          	lea    edx,[esp+0x13]
c0012086:	52                   	push   edx
c0012087:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001208a:	52                   	push   edx
c001208b:	50                   	push   eax
c001208c:	e8 a5 9d ff ff       	call   c000be36 <File::stat(unsigned long long*, bool*)>
c0012091:	83 c4 10             	add    esp,0x10
c0012094:	85 c0                	test   eax,eax
c0012096:	0f 95 c0             	setne  al
c0012099:	31 d2                	xor    edx,edx
c001209b:	0f b6 c0             	movzx  eax,al
c001209e:	f7 d8                	neg    eax
c00120a0:	83 d2 00             	adc    edx,0x0
c00120a3:	83 c4 18             	add    esp,0x18
c00120a6:	f7 da                	neg    edx
c00120a8:	5b                   	pop    ebx
c00120a9:	c3                   	ret    
c00120aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120af:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120b4:	83 c4 18             	add    esp,0x18
c00120b7:	5b                   	pop    ebx
c00120b8:	c3                   	ret    

c00120b9 <SysSizeFromFilename(regs*)>:
c00120b9:	55                   	push   ebp
c00120ba:	57                   	push   edi
c00120bb:	56                   	push   esi
c00120bc:	53                   	push   ebx
c00120bd:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00120c3:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00120ca:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00120cd:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00120d0:	85 f6                	test   esi,esi
c00120d2:	74 34                	je     c0012108 <SysSizeFromFilename(regs*)+0x4f>
c00120d4:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00120da:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120dd:	83 f8 02             	cmp    eax,0x2
c00120e0:	76 2d                	jbe    c001210f <SysSizeFromFilename(regs*)+0x56>
c00120e2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00120e7:	76 3b                	jbe    c0012124 <SysSizeFromFilename(regs*)+0x6b>
c00120e9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120f9:	81 c4 5c 02 00 00    	add    esp,0x25c
c00120ff:	31 c0                	xor    eax,eax
c0012101:	5b                   	pop    ebx
c0012102:	31 d2                	xor    edx,edx
c0012104:	5e                   	pop    esi
c0012105:	5f                   	pop    edi
c0012106:	5d                   	pop    ebp
c0012107:	c3                   	ret    
c0012108:	89 f8                	mov    eax,edi
c001210a:	83 f8 02             	cmp    eax,0x2
c001210d:	77 d3                	ja     c00120e2 <SysSizeFromFilename(regs*)+0x29>
c001210f:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012115:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001211a:	5b                   	pop    ebx
c001211b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012120:	5e                   	pop    esi
c0012121:	5f                   	pop    edi
c0012122:	5d                   	pop    ebp
c0012123:	c3                   	ret    
c0012124:	83 ec 0c             	sub    esp,0xc
c0012127:	68 14 01 00 00       	push   0x114
c001212c:	e8 85 59 ff ff       	call   c0007ab6 <malloc>
c0012131:	6a 01                	push   0x1
c0012133:	89 c5                	mov    ebp,eax
c0012135:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001213a:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001213d:	51                   	push   ecx
c001213e:	57                   	push   edi
c001213f:	55                   	push   ebp
c0012140:	e8 f3 98 ff ff       	call   c000ba38 <File::File(char const*, Process*, bool)>
c0012145:	83 c4 1c             	add    esp,0x1c
c0012148:	8d 44 24 23          	lea    eax,[esp+0x23]
c001214c:	50                   	push   eax
c001214d:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012150:	53                   	push   ebx
c0012151:	55                   	push   ebp
c0012152:	e8 df 9c ff ff       	call   c000be36 <File::stat(unsigned long long*, bool*)>
c0012157:	83 c4 10             	add    esp,0x10
c001215a:	85 ed                	test   ebp,ebp
c001215c:	74 15                	je     c0012173 <SysSizeFromFilename(regs*)+0xba>
c001215e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012162:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012165:	83 ec 0c             	sub    esp,0xc
c0012168:	55                   	push   ebp
c0012169:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001216c:	83 c4 10             	add    esp,0x10
c001216f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012173:	85 c0                	test   eax,eax
c0012175:	75 98                	jne    c001210f <SysSizeFromFilename(regs*)+0x56>
c0012177:	6a 00                	push   0x0
c0012179:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001217e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012181:	05 0c 01 00 00       	add    eax,0x10c
c0012186:	50                   	push   eax
c0012187:	57                   	push   edi
c0012188:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c001218f:	53                   	push   ebx
c0012190:	e8 89 96 ff ff       	call   c000b81e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012195:	58                   	pop    eax
c0012196:	5a                   	pop    edx
c0012197:	8d 44 24 28          	lea    eax,[esp+0x28]
c001219b:	50                   	push   eax
c001219c:	53                   	push   ebx
c001219d:	e8 7d 8f ff ff       	call   c000b11f <KeDereferenceSymlink(char const*, char*)>
c00121a2:	83 c4 10             	add    esp,0x10
c00121a5:	83 f8 01             	cmp    eax,0x1
c00121a8:	74 1a                	je     c00121c4 <SysSizeFromFilename(regs*)+0x10b>
c00121aa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00121af:	74 26                	je     c00121d7 <SysSizeFromFilename(regs*)+0x11e>
c00121b1:	85 f6                	test   esi,esi
c00121b3:	0f 84 40 ff ff ff    	je     c00120f9 <SysSizeFromFilename(regs*)+0x40>
c00121b9:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00121bf:	e9 35 ff ff ff       	jmp    c00120f9 <SysSizeFromFilename(regs*)+0x40>
c00121c4:	85 f6                	test   esi,esi
c00121c6:	0f 84 2d ff ff ff    	je     c00120f9 <SysSizeFromFilename(regs*)+0x40>
c00121cc:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00121d2:	e9 22 ff ff ff       	jmp    c00120f9 <SysSizeFromFilename(regs*)+0x40>
c00121d7:	85 f6                	test   esi,esi
c00121d9:	0f 84 1a ff ff ff    	je     c00120f9 <SysSizeFromFilename(regs*)+0x40>
c00121df:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00121e5:	e9 0f ff ff ff       	jmp    c00120f9 <SysSizeFromFilename(regs*)+0x40>

c00121ea <SysSizeFromFilenameNoSymlink(regs*)>:
c00121ea:	55                   	push   ebp
c00121eb:	57                   	push   edi
c00121ec:	56                   	push   esi
c00121ed:	53                   	push   ebx
c00121ee:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00121f4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00121fb:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121fe:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012201:	85 f6                	test   esi,esi
c0012203:	74 34                	je     c0012239 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0012205:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001220b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001220e:	83 f8 02             	cmp    eax,0x2
c0012211:	76 2d                	jbe    c0012240 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0012213:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012218:	76 3b                	jbe    c0012255 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c001221a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001221d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012223:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001222a:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012230:	31 c0                	xor    eax,eax
c0012232:	5b                   	pop    ebx
c0012233:	31 d2                	xor    edx,edx
c0012235:	5e                   	pop    esi
c0012236:	5f                   	pop    edi
c0012237:	5d                   	pop    ebp
c0012238:	c3                   	ret    
c0012239:	89 f8                	mov    eax,edi
c001223b:	83 f8 02             	cmp    eax,0x2
c001223e:	77 d3                	ja     c0012213 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0012240:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012246:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001224b:	5b                   	pop    ebx
c001224c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012251:	5e                   	pop    esi
c0012252:	5f                   	pop    edi
c0012253:	5d                   	pop    ebp
c0012254:	c3                   	ret    
c0012255:	83 ec 0c             	sub    esp,0xc
c0012258:	68 14 01 00 00       	push   0x114
c001225d:	e8 54 58 ff ff       	call   c0007ab6 <malloc>
c0012262:	6a 00                	push   0x0
c0012264:	89 c5                	mov    ebp,eax
c0012266:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001226b:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001226e:	51                   	push   ecx
c001226f:	57                   	push   edi
c0012270:	55                   	push   ebp
c0012271:	e8 c2 97 ff ff       	call   c000ba38 <File::File(char const*, Process*, bool)>
c0012276:	83 c4 1c             	add    esp,0x1c
c0012279:	8d 44 24 23          	lea    eax,[esp+0x23]
c001227d:	50                   	push   eax
c001227e:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0012281:	53                   	push   ebx
c0012282:	55                   	push   ebp
c0012283:	e8 ae 9b ff ff       	call   c000be36 <File::stat(unsigned long long*, bool*)>
c0012288:	83 c4 10             	add    esp,0x10
c001228b:	85 ed                	test   ebp,ebp
c001228d:	74 15                	je     c00122a4 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c001228f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012293:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012296:	83 ec 0c             	sub    esp,0xc
c0012299:	55                   	push   ebp
c001229a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001229d:	83 c4 10             	add    esp,0x10
c00122a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122a4:	85 c0                	test   eax,eax
c00122a6:	75 98                	jne    c0012240 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00122a8:	6a 00                	push   0x0
c00122aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122b2:	05 0c 01 00 00       	add    eax,0x10c
c00122b7:	50                   	push   eax
c00122b8:	57                   	push   edi
c00122b9:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c00122c0:	53                   	push   ebx
c00122c1:	e8 58 95 ff ff       	call   c000b81e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00122c6:	58                   	pop    eax
c00122c7:	5a                   	pop    edx
c00122c8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00122cc:	50                   	push   eax
c00122cd:	53                   	push   ebx
c00122ce:	e8 4c 8e ff ff       	call   c000b11f <KeDereferenceSymlink(char const*, char*)>
c00122d3:	83 c4 10             	add    esp,0x10
c00122d6:	83 f8 01             	cmp    eax,0x1
c00122d9:	74 1a                	je     c00122f5 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c00122db:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00122e0:	74 26                	je     c0012308 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c00122e2:	85 f6                	test   esi,esi
c00122e4:	0f 84 40 ff ff ff    	je     c001222a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00122ea:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00122f0:	e9 35 ff ff ff       	jmp    c001222a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00122f5:	85 f6                	test   esi,esi
c00122f7:	0f 84 2d ff ff ff    	je     c001222a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00122fd:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0012303:	e9 22 ff ff ff       	jmp    c001222a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012308:	85 f6                	test   esi,esi
c001230a:	0f 84 1a ff ff ff    	je     c001222a <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012310:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012316:	e9 0f ff ff ff       	jmp    c001222a <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c001231b <SysClose(regs*)>:
c001231b:	53                   	push   ebx
c001231c:	83 ec 08             	sub    esp,0x8
c001231f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012323:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012326:	83 f8 02             	cmp    eax,0x2
c0012329:	76 41                	jbe    c001236c <SysClose(regs*)+0x51>
c001232b:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0012331:	83 fa 01             	cmp    edx,0x1
c0012334:	76 2d                	jbe    c0012363 <SysClose(regs*)+0x48>
c0012336:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001233b:	77 2f                	ja     c001236c <SysClose(regs*)+0x51>
c001233d:	83 ec 0c             	sub    esp,0xc
c0012340:	50                   	push   eax
c0012341:	e8 6d 71 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012346:	89 c3                	mov    ebx,eax
c0012348:	89 04 24             	mov    DWORD PTR [esp],eax
c001234b:	e8 42 98 ff ff       	call   c000bb92 <File::close()>
c0012350:	83 c4 10             	add    esp,0x10
c0012353:	85 db                	test   ebx,ebx
c0012355:	74 0c                	je     c0012363 <SysClose(regs*)+0x48>
c0012357:	83 ec 0c             	sub    esp,0xc
c001235a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001235c:	53                   	push   ebx
c001235d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012360:	83 c4 10             	add    esp,0x10
c0012363:	31 c0                	xor    eax,eax
c0012365:	31 d2                	xor    edx,edx
c0012367:	83 c4 08             	add    esp,0x8
c001236a:	5b                   	pop    ebx
c001236b:	c3                   	ret    
c001236c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012371:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012376:	83 c4 08             	add    esp,0x8
c0012379:	5b                   	pop    ebx
c001237a:	c3                   	ret    

c001237b <SysOpenDir(regs*)>:
c001237b:	56                   	push   esi
c001237c:	53                   	push   ebx
c001237d:	83 ec 04             	sub    esp,0x4
c0012380:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012384:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012387:	85 c9                	test   ecx,ecx
c0012389:	74 5d                	je     c00123e8 <SysOpenDir(regs*)+0x6d>
c001238b:	83 ec 0c             	sub    esp,0xc
c001238e:	68 14 01 00 00       	push   0x114
c0012393:	e8 1e 57 ff ff       	call   c0007ab6 <malloc>
c0012398:	83 c4 0c             	add    esp,0xc
c001239b:	89 c6                	mov    esi,eax
c001239d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123a5:	50                   	push   eax
c00123a6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00123a9:	52                   	push   edx
c00123aa:	56                   	push   esi
c00123ab:	e8 46 9c ff ff       	call   c000bff6 <Directory::Directory(char const*, Process*)>
c00123b0:	83 c4 10             	add    esp,0x10
c00123b3:	85 f6                	test   esi,esi
c00123b5:	74 31                	je     c00123e8 <SysOpenDir(regs*)+0x6d>
c00123b7:	83 ec 0c             	sub    esp,0xc
c00123ba:	56                   	push   esi
c00123bb:	e8 fe 9c ff ff       	call   c000c0be <Directory::open()>
c00123c0:	83 c4 10             	add    esp,0x10
c00123c3:	85 c0                	test   eax,eax
c00123c5:	75 21                	jne    c00123e8 <SysOpenDir(regs*)+0x6d>
c00123c7:	83 ec 0c             	sub    esp,0xc
c00123ca:	56                   	push   esi
c00123cb:	e8 e6 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00123d0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00123d3:	83 c4 10             	add    esp,0x10
c00123d6:	89 02                	mov    DWORD PTR [edx],eax
c00123d8:	c1 f8 1f             	sar    eax,0x1f
c00123db:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00123de:	83 c4 04             	add    esp,0x4
c00123e1:	31 c0                	xor    eax,eax
c00123e3:	31 d2                	xor    edx,edx
c00123e5:	5b                   	pop    ebx
c00123e6:	5e                   	pop    esi
c00123e7:	c3                   	ret    
c00123e8:	83 c4 04             	add    esp,0x4
c00123eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123f0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123f5:	5b                   	pop    ebx
c00123f6:	5e                   	pop    esi
c00123f7:	c3                   	ret    

c00123f8 <SysMakeDir(regs*)>:
c00123f8:	56                   	push   esi
c00123f9:	53                   	push   ebx
c00123fa:	83 ec 10             	sub    esp,0x10
c00123fd:	68 14 01 00 00       	push   0x114
c0012402:	e8 af 56 ff ff       	call   c0007ab6 <malloc>
c0012407:	83 c4 0c             	add    esp,0xc
c001240a:	89 c3                	mov    ebx,eax
c001240c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012411:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012414:	50                   	push   eax
c0012415:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012419:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001241c:	52                   	push   edx
c001241d:	53                   	push   ebx
c001241e:	e8 d3 9b ff ff       	call   c000bff6 <Directory::Directory(char const*, Process*)>
c0012423:	83 c4 10             	add    esp,0x10
c0012426:	85 db                	test   ebx,ebx
c0012428:	74 2c                	je     c0012456 <SysMakeDir(regs*)+0x5e>
c001242a:	83 ec 0c             	sub    esp,0xc
c001242d:	53                   	push   ebx
c001242e:	e8 6b 9e ff ff       	call   c000c29e <Directory::create()>
c0012433:	89 c6                	mov    esi,eax
c0012435:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012437:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001243a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001243d:	83 c4 10             	add    esp,0x10
c0012440:	31 c0                	xor    eax,eax
c0012442:	85 f6                	test   esi,esi
c0012444:	0f 95 c0             	setne  al
c0012447:	31 d2                	xor    edx,edx
c0012449:	f7 d8                	neg    eax
c001244b:	83 d2 00             	adc    edx,0x0
c001244e:	83 c4 04             	add    esp,0x4
c0012451:	f7 da                	neg    edx
c0012453:	5b                   	pop    ebx
c0012454:	5e                   	pop    esi
c0012455:	c3                   	ret    
c0012456:	83 c4 04             	add    esp,0x4
c0012459:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001245e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012463:	5b                   	pop    ebx
c0012464:	5e                   	pop    esi
c0012465:	c3                   	ret    

c0012466 <SysCloseDir(regs*)>:
c0012466:	53                   	push   ebx
c0012467:	83 ec 08             	sub    esp,0x8
c001246a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001246e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012471:	8d 50 fd             	lea    edx,[eax-0x3]
c0012474:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001247a:	77 2f                	ja     c00124ab <SysCloseDir(regs*)+0x45>
c001247c:	83 ec 0c             	sub    esp,0xc
c001247f:	50                   	push   eax
c0012480:	e8 2e 70 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012485:	89 c3                	mov    ebx,eax
c0012487:	89 04 24             	mov    DWORD PTR [esp],eax
c001248a:	e8 8b 9c ff ff       	call   c000c11a <Directory::close()>
c001248f:	83 c4 10             	add    esp,0x10
c0012492:	85 db                	test   ebx,ebx
c0012494:	74 0c                	je     c00124a2 <SysCloseDir(regs*)+0x3c>
c0012496:	83 ec 0c             	sub    esp,0xc
c0012499:	8b 03                	mov    eax,DWORD PTR [ebx]
c001249b:	53                   	push   ebx
c001249c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001249f:	83 c4 10             	add    esp,0x10
c00124a2:	31 c0                	xor    eax,eax
c00124a4:	31 d2                	xor    edx,edx
c00124a6:	83 c4 08             	add    esp,0x8
c00124a9:	5b                   	pop    ebx
c00124aa:	c3                   	ret    
c00124ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124b0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124b5:	83 c4 08             	add    esp,0x8
c00124b8:	5b                   	pop    ebx
c00124b9:	c3                   	ret    

c00124ba <SysWait(regs*)>:
c00124ba:	83 ec 10             	sub    esp,0x10
c00124bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124c1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00124c4:	52                   	push   edx
c00124c5:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00124c8:	51                   	push   ecx
c00124c9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00124cc:	50                   	push   eax
c00124cd:	e8 02 3e 00 00       	call   c00162d4 <waitTask(int, int*, int)>
c00124d2:	83 c4 1c             	add    esp,0x1c
c00124d5:	89 c2                	mov    edx,eax
c00124d7:	c1 fa 1f             	sar    edx,0x1f
c00124da:	c3                   	ret    

c00124db <SysNotImpl(regs*)>:
c00124db:	83 ec 18             	sub    esp,0x18
c00124de:	68 66 24 02 c0       	push   0xc0022466
c00124e3:	e8 ff f0 ff ff       	call   c00115e7 <KePanic(char const*)>
c00124e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124f2:	83 c4 1c             	add    esp,0x1c
c00124f5:	c3                   	ret    

c00124f6 <SysPanic(regs*)>:
c00124f6:	83 ec 18             	sub    esp,0x18
c00124f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00124fd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012500:	50                   	push   eax
c0012501:	e8 e1 f0 ff ff       	call   c00115e7 <KePanic(char const*)>
c0012506:	b8 01 00 00 00       	mov    eax,0x1
c001250b:	31 d2                	xor    edx,edx
c001250d:	83 c4 1c             	add    esp,0x1c
c0012510:	c3                   	ret    

c0012511 <SysRmdir(regs*)>:
c0012511:	56                   	push   esi
c0012512:	53                   	push   ebx
c0012513:	83 ec 20             	sub    esp,0x20
c0012516:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001251a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001251d:	68 14 01 00 00       	push   0x114
c0012522:	e8 8f 55 ff ff       	call   c0007ab6 <malloc>
c0012527:	6a 00                	push   0x0
c0012529:	89 c3                	mov    ebx,eax
c001252b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012530:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012533:	50                   	push   eax
c0012534:	56                   	push   esi
c0012535:	53                   	push   ebx
c0012536:	e8 fd 94 ff ff       	call   c000ba38 <File::File(char const*, Process*, bool)>
c001253b:	83 c4 14             	add    esp,0x14
c001253e:	53                   	push   ebx
c001253f:	e8 be 97 ff ff       	call   c000bd02 <File::unlink()>
c0012544:	83 c4 10             	add    esp,0x10
c0012547:	85 db                	test   ebx,ebx
c0012549:	74 14                	je     c001255f <SysRmdir(regs*)+0x4e>
c001254b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001254f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012551:	83 ec 0c             	sub    esp,0xc
c0012554:	53                   	push   ebx
c0012555:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012558:	83 c4 10             	add    esp,0x10
c001255b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001255f:	85 c0                	test   eax,eax
c0012561:	0f 95 c0             	setne  al
c0012564:	31 d2                	xor    edx,edx
c0012566:	0f b6 c0             	movzx  eax,al
c0012569:	f7 d8                	neg    eax
c001256b:	83 d2 00             	adc    edx,0x0
c001256e:	83 c4 14             	add    esp,0x14
c0012571:	f7 da                	neg    edx
c0012573:	5b                   	pop    ebx
c0012574:	5e                   	pop    esi
c0012575:	c3                   	ret    

c0012576 <SysUnlink(regs*)>:
c0012576:	56                   	push   esi
c0012577:	53                   	push   ebx
c0012578:	83 ec 20             	sub    esp,0x20
c001257b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001257f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012582:	68 14 01 00 00       	push   0x114
c0012587:	e8 2a 55 ff ff       	call   c0007ab6 <malloc>
c001258c:	6a 00                	push   0x0
c001258e:	89 c3                	mov    ebx,eax
c0012590:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012595:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012598:	50                   	push   eax
c0012599:	56                   	push   esi
c001259a:	53                   	push   ebx
c001259b:	e8 98 94 ff ff       	call   c000ba38 <File::File(char const*, Process*, bool)>
c00125a0:	83 c4 14             	add    esp,0x14
c00125a3:	53                   	push   ebx
c00125a4:	e8 59 97 ff ff       	call   c000bd02 <File::unlink()>
c00125a9:	83 c4 10             	add    esp,0x10
c00125ac:	85 db                	test   ebx,ebx
c00125ae:	74 14                	je     c00125c4 <SysUnlink(regs*)+0x4e>
c00125b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125b4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00125b6:	83 ec 0c             	sub    esp,0xc
c00125b9:	53                   	push   ebx
c00125ba:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00125bd:	83 c4 10             	add    esp,0x10
c00125c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125c4:	85 c0                	test   eax,eax
c00125c6:	0f 95 c0             	setne  al
c00125c9:	31 d2                	xor    edx,edx
c00125cb:	0f b6 c0             	movzx  eax,al
c00125ce:	f7 d8                	neg    eax
c00125d0:	83 d2 00             	adc    edx,0x0
c00125d3:	83 c4 14             	add    esp,0x14
c00125d6:	f7 da                	neg    edx
c00125d8:	5b                   	pop    ebx
c00125d9:	5e                   	pop    esi
c00125da:	c3                   	ret    

c00125db <SysGetArgv(regs*)>:
c00125db:	83 ec 0c             	sub    esp,0xc
c00125de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00125e2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00125e5:	85 c0                	test   eax,eax
c00125e7:	78 2c                	js     c0012615 <SysGetArgv(regs*)+0x3a>
c00125e9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00125ef:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00125f2:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00125f8:	7d 1b                	jge    c0012615 <SysGetArgv(regs*)+0x3a>
c00125fa:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012601:	85 c0                	test   eax,eax
c0012603:	74 18                	je     c001261d <SysGetArgv(regs*)+0x42>
c0012605:	83 ec 08             	sub    esp,0x8
c0012608:	50                   	push   eax
c0012609:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001260c:	50                   	push   eax
c001260d:	e8 2e e0 fe ff       	call   c0000640 <strcpy>
c0012612:	83 c4 10             	add    esp,0x10
c0012615:	31 c0                	xor    eax,eax
c0012617:	31 d2                	xor    edx,edx
c0012619:	83 c4 0c             	add    esp,0xc
c001261c:	c3                   	ret    
c001261d:	b8 01 00 00 00       	mov    eax,0x1
c0012622:	31 d2                	xor    edx,edx
c0012624:	83 c4 0c             	add    esp,0xc
c0012627:	c3                   	ret    

c0012628 <SysUSleep(regs*)>:
c0012628:	83 ec 1c             	sub    esp,0x1c
c001262b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001262f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012632:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012635:	6a 00                	push   0x0
c0012637:	6a 64                	push   0x64
c0012639:	52                   	push   edx
c001263a:	50                   	push   eax
c001263b:	e8 c0 d0 00 00       	call   c001f700 <__udivdi3>
c0012640:	83 c4 14             	add    esp,0x14
c0012643:	50                   	push   eax
c0012644:	e8 6f 3d 00 00       	call   c00163b8 <milliTenthSleep(unsigned int)>
c0012649:	31 c0                	xor    eax,eax
c001264b:	31 d2                	xor    edx,edx
c001264d:	83 c4 1c             	add    esp,0x1c
c0012650:	c3                   	ret    

c0012651 <SysSpawn(regs*)>:
c0012651:	56                   	push   esi
c0012652:	53                   	push   ebx
c0012653:	83 ec 04             	sub    esp,0x4
c0012656:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001265a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001265d:	85 f6                	test   esi,esi
c001265f:	75 0a                	jne    c001266b <SysSpawn(regs*)+0x1a>
c0012661:	83 c4 04             	add    esp,0x4
c0012664:	31 c0                	xor    eax,eax
c0012666:	31 d2                	xor    edx,edx
c0012668:	5b                   	pop    ebx
c0012669:	5e                   	pop    esi
c001266a:	c3                   	ret    
c001266b:	83 ec 0c             	sub    esp,0xc
c001266e:	68 24 07 00 00       	push   0x724
c0012673:	e8 3e 54 ff ff       	call   c0007ab6 <malloc>
c0012678:	83 c4 10             	add    esp,0x10
c001267b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001267e:	89 c6                	mov    esi,eax
c0012680:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012683:	85 c9                	test   ecx,ecx
c0012685:	75 39                	jne    c00126c0 <SysSpawn(regs*)+0x6f>
c0012687:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001268c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001268f:	52                   	push   edx
c0012690:	50                   	push   eax
c0012691:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012694:	50                   	push   eax
c0012695:	56                   	push   esi
c0012696:	e8 6d 33 00 00       	call   c0015a08 <Process::Process(char const*, Process*, char**)>
c001269b:	83 c4 10             	add    esp,0x10
c001269e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00126a5:	75 ba                	jne    c0012661 <SysSpawn(regs*)+0x10>
c00126a7:	83 ec 0c             	sub    esp,0xc
c00126aa:	56                   	push   esi
c00126ab:	e8 94 38 00 00       	call   c0015f44 <Process::createUserThread()>
c00126b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00126b2:	83 c4 10             	add    esp,0x10
c00126b5:	89 c2                	mov    edx,eax
c00126b7:	83 c4 04             	add    esp,0x4
c00126ba:	c1 fa 1f             	sar    edx,0x1f
c00126bd:	5b                   	pop    ebx
c00126be:	5e                   	pop    esi
c00126bf:	c3                   	ret    
c00126c0:	31 c0                	xor    eax,eax
c00126c2:	eb cb                	jmp    c001268f <SysSpawn(regs*)+0x3e>

c00126c4 <SysGetEnv(regs*)>:
c00126c4:	57                   	push   edi
c00126c5:	56                   	push   esi
c00126c6:	53                   	push   ebx
c00126c7:	83 ec 1c             	sub    esp,0x1c
c00126ca:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00126ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126d3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00126d6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00126d9:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00126dc:	51                   	push   ecx
c00126dd:	e8 bd ed ff ff       	call   c001149f <KeGetProcessTotalEnvCount(Process*)>
c00126e2:	83 c4 10             	add    esp,0x10
c00126e5:	39 c7                	cmp    edi,eax
c00126e7:	7c 14                	jl     c00126fd <SysGetEnv(regs*)+0x39>
c00126e9:	85 f6                	test   esi,esi
c00126eb:	75 0b                	jne    c00126f8 <SysGetEnv(regs*)+0x34>
c00126ed:	83 c4 10             	add    esp,0x10
c00126f0:	31 c0                	xor    eax,eax
c00126f2:	5b                   	pop    ebx
c00126f3:	31 d2                	xor    edx,edx
c00126f5:	5e                   	pop    esi
c00126f6:	5f                   	pop    edi
c00126f7:	c3                   	ret    
c00126f8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126fb:	eb f0                	jmp    c00126ed <SysGetEnv(regs*)+0x29>
c00126fd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012701:	83 ec 04             	sub    esp,0x4
c0012704:	57                   	push   edi
c0012705:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001270b:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001270e:	57                   	push   edi
c001270f:	50                   	push   eax
c0012710:	e8 aa ed ff ff       	call   c00114bf <KeGetProcessEnvPair(Process*, int)>
c0012715:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001271c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012720:	83 c4 0c             	add    esp,0xc
c0012723:	85 d2                	test   edx,edx
c0012725:	75 23                	jne    c001274a <SysGetEnv(regs*)+0x86>
c0012727:	83 ec 0c             	sub    esp,0xc
c001272a:	50                   	push   eax
c001272b:	e8 40 de fe ff       	call   c0000570 <strlen>
c0012730:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012733:	89 c3                	mov    ebx,eax
c0012735:	e8 36 de fe ff       	call   c0000570 <strlen>
c001273a:	83 c4 10             	add    esp,0x10
c001273d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012741:	83 c4 10             	add    esp,0x10
c0012744:	31 d2                	xor    edx,edx
c0012746:	5b                   	pop    ebx
c0012747:	5e                   	pop    esi
c0012748:	5f                   	pop    edi
c0012749:	c3                   	ret    
c001274a:	83 ec 08             	sub    esp,0x8
c001274d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012750:	50                   	push   eax
c0012751:	56                   	push   esi
c0012752:	e8 e9 de fe ff       	call   c0000640 <strcpy>
c0012757:	58                   	pop    eax
c0012758:	5a                   	pop    edx
c0012759:	68 80 24 02 c0       	push   0xc0022480
c001275e:	56                   	push   esi
c001275f:	e8 dc e0 fe ff       	call   c0000840 <strcat>
c0012764:	59                   	pop    ecx
c0012765:	5b                   	pop    ebx
c0012766:	57                   	push   edi
c0012767:	56                   	push   esi
c0012768:	e8 d3 e0 fe ff       	call   c0000840 <strcat>
c001276d:	83 c4 10             	add    esp,0x10
c0012770:	e9 78 ff ff ff       	jmp    c00126ed <SysGetEnv(regs*)+0x29>

c0012775 <SysSetFatAttrib(regs*)>:
c0012775:	57                   	push   edi
c0012776:	56                   	push   esi
c0012777:	53                   	push   ebx
c0012778:	83 ec 1c             	sub    esp,0x1c
c001277b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001277f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012782:	68 14 01 00 00       	push   0x114
c0012787:	e8 2a 53 ff ff       	call   c0007ab6 <malloc>
c001278c:	83 c4 0c             	add    esp,0xc
c001278f:	89 c3                	mov    ebx,eax
c0012791:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012796:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012799:	50                   	push   eax
c001279a:	57                   	push   edi
c001279b:	53                   	push   ebx
c001279c:	e8 75 93 ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c00127a1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00127a4:	83 c4 0c             	add    esp,0xc
c00127a7:	0f b6 d4             	movzx  edx,ah
c00127aa:	0f b6 c0             	movzx  eax,al
c00127ad:	52                   	push   edx
c00127ae:	50                   	push   eax
c00127af:	53                   	push   ebx
c00127b0:	e8 e7 95 ff ff       	call   c000bd9c <File::chfatattr(unsigned char, unsigned char)>
c00127b5:	83 c4 10             	add    esp,0x10
c00127b8:	85 db                	test   ebx,ebx
c00127ba:	74 14                	je     c00127d0 <SysSetFatAttrib(regs*)+0x5b>
c00127bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127c0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00127c2:	83 ec 0c             	sub    esp,0xc
c00127c5:	53                   	push   ebx
c00127c6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00127c9:	83 c4 10             	add    esp,0x10
c00127cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00127d0:	85 c0                	test   eax,eax
c00127d2:	0f 95 c0             	setne  al
c00127d5:	31 d2                	xor    edx,edx
c00127d7:	0f b6 c0             	movzx  eax,al
c00127da:	f7 d8                	neg    eax
c00127dc:	83 d2 00             	adc    edx,0x0
c00127df:	83 c4 10             	add    esp,0x10
c00127e2:	f7 da                	neg    edx
c00127e4:	5b                   	pop    ebx
c00127e5:	5e                   	pop    esi
c00127e6:	5f                   	pop    edi
c00127e7:	c3                   	ret    

c00127e8 <SysPipe(regs*)>:
c00127e8:	57                   	push   edi
c00127e9:	56                   	push   esi
c00127ea:	53                   	push   ebx
c00127eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ef:	83 ec 0c             	sub    esp,0xc
c00127f2:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00127f5:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00127f8:	6a 20                	push   0x20
c00127fa:	e8 b7 52 ff ff       	call   c0007ab6 <malloc>
c00127ff:	89 c3                	mov    ebx,eax
c0012801:	58                   	pop    eax
c0012802:	5a                   	pop    edx
c0012803:	68 00 50 00 00       	push   0x5000
c0012808:	53                   	push   ebx
c0012809:	e8 1a 5c ff ff       	call   c0008428 <Pipe::Pipe(int)>
c001280e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012811:	e8 a0 69 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012816:	89 07                	mov    DWORD PTR [edi],eax
c0012818:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001281b:	e8 96 69 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012820:	83 c4 10             	add    esp,0x10
c0012823:	89 06                	mov    DWORD PTR [esi],eax
c0012825:	31 d2                	xor    edx,edx
c0012827:	5b                   	pop    ebx
c0012828:	31 c0                	xor    eax,eax
c001282a:	5e                   	pop    esi
c001282b:	5f                   	pop    edi
c001282c:	c3                   	ret    

c001282d <SysGetUnixTime(regs*)>:
c001282d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0012832:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012838:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001283c:	e9 a1 9c ff ff       	jmp    c000c4e2 <Clock::timeInSecondsLocal()>

c0012841 <string_ends_with(char const*, char const*)>:
c0012841:	57                   	push   edi
c0012842:	56                   	push   esi
c0012843:	53                   	push   ebx
c0012844:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012848:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001284c:	83 ec 0c             	sub    esp,0xc
c001284f:	53                   	push   ebx
c0012850:	e8 1b dd fe ff       	call   c0000570 <strlen>
c0012855:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012858:	89 c6                	mov    esi,eax
c001285a:	e8 11 dd fe ff       	call   c0000570 <strlen>
c001285f:	83 c4 10             	add    esp,0x10
c0012862:	39 c6                	cmp    esi,eax
c0012864:	7d 06                	jge    c001286c <string_ends_with(char const*, char const*)+0x2b>
c0012866:	5b                   	pop    ebx
c0012867:	31 c0                	xor    eax,eax
c0012869:	5e                   	pop    esi
c001286a:	5f                   	pop    edi
c001286b:	c3                   	ret    
c001286c:	83 ec 08             	sub    esp,0x8
c001286f:	29 c6                	sub    esi,eax
c0012871:	57                   	push   edi
c0012872:	01 f3                	add    ebx,esi
c0012874:	53                   	push   ebx
c0012875:	e8 d6 de fe ff       	call   c0000750 <strcmp>
c001287a:	83 c4 10             	add    esp,0x10
c001287d:	85 c0                	test   eax,eax
c001287f:	5b                   	pop    ebx
c0012880:	0f 94 c0             	sete   al
c0012883:	5e                   	pop    esi
c0012884:	0f b6 c0             	movzx  eax,al
c0012887:	5f                   	pop    edi
c0012888:	c3                   	ret    

c0012889 <SysOpen(regs*)>:
c0012889:	56                   	push   esi
c001288a:	53                   	push   ebx
c001288b:	81 ec 04 01 00 00    	sub    esp,0x104
c0012891:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012898:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001289b:	85 c0                	test   eax,eax
c001289d:	0f 84 bc 01 00 00    	je     c0012a5f <SysOpen(regs*)+0x1d6>
c00128a3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128a6:	85 c0                	test   eax,eax
c00128a8:	0f 84 b1 01 00 00    	je     c0012a5f <SysOpen(regs*)+0x1d6>
c00128ae:	6a 00                	push   0x0
c00128b0:	68 82 24 02 c0       	push   0xc0022482
c00128b5:	50                   	push   eax
c00128b6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00128ba:	56                   	push   esi
c00128bb:	e8 5e 8f ff ff       	call   c000b81e <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00128c0:	89 34 24             	mov    DWORD PTR [esp],esi
c00128c3:	e8 a8 dc fe ff       	call   c0000570 <strlen>
c00128c8:	83 c4 10             	add    esp,0x10
c00128cb:	83 e8 01             	sub    eax,0x1
c00128ce:	74 21                	je     c00128f1 <SysOpen(regs*)+0x68>
c00128d0:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00128d4:	eb 12                	jmp    c00128e8 <SysOpen(regs*)+0x5f>
c00128d6:	83 fa 3a             	cmp    edx,0x3a
c00128d9:	74 12                	je     c00128ed <SysOpen(regs*)+0x64>
c00128db:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00128df:	83 e8 01             	sub    eax,0x1
c00128e2:	74 0d                	je     c00128f1 <SysOpen(regs*)+0x68>
c00128e4:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00128e8:	83 fa 2e             	cmp    edx,0x2e
c00128eb:	75 e9                	jne    c00128d6 <SysOpen(regs*)+0x4d>
c00128ed:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00128f1:	83 ec 08             	sub    esp,0x8
c00128f4:	68 86 24 02 c0       	push   0xc0022486
c00128f9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128fc:	50                   	push   eax
c00128fd:	e8 3f ff ff ff       	call   c0012841 <string_ends_with(char const*, char const*)>
c0012902:	83 c4 10             	add    esp,0x10
c0012905:	85 c0                	test   eax,eax
c0012907:	74 1d                	je     c0012926 <SysOpen(regs*)+0x9d>
c0012909:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001290c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012912:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012919:	81 c4 04 01 00 00    	add    esp,0x104
c001291f:	31 c0                	xor    eax,eax
c0012921:	31 d2                	xor    edx,edx
c0012923:	5b                   	pop    ebx
c0012924:	5e                   	pop    esi
c0012925:	c3                   	ret    
c0012926:	83 ec 08             	sub    esp,0x8
c0012929:	68 8b 24 02 c0       	push   0xc002248b
c001292e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012931:	50                   	push   eax
c0012932:	e8 0a ff ff ff       	call   c0012841 <string_ends_with(char const*, char const*)>
c0012937:	83 c4 10             	add    esp,0x10
c001293a:	85 c0                	test   eax,eax
c001293c:	75 cb                	jne    c0012909 <SysOpen(regs*)+0x80>
c001293e:	83 ec 08             	sub    esp,0x8
c0012941:	68 87 24 02 c0       	push   0xc0022487
c0012946:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012949:	50                   	push   eax
c001294a:	e8 01 de fe ff       	call   c0000750 <strcmp>
c001294f:	83 c4 10             	add    esp,0x10
c0012952:	85 c0                	test   eax,eax
c0012954:	74 b3                	je     c0012909 <SysOpen(regs*)+0x80>
c0012956:	83 ec 08             	sub    esp,0x8
c0012959:	68 86 24 02 c0       	push   0xc0022486
c001295e:	56                   	push   esi
c001295f:	e8 dd fe ff ff       	call   c0012841 <string_ends_with(char const*, char const*)>
c0012964:	83 c4 10             	add    esp,0x10
c0012967:	85 c0                	test   eax,eax
c0012969:	75 9e                	jne    c0012909 <SysOpen(regs*)+0x80>
c001296b:	83 ec 08             	sub    esp,0x8
c001296e:	68 90 24 02 c0       	push   0xc0022490
c0012973:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012976:	50                   	push   eax
c0012977:	e8 c5 fe ff ff       	call   c0012841 <string_ends_with(char const*, char const*)>
c001297c:	83 c4 10             	add    esp,0x10
c001297f:	85 c0                	test   eax,eax
c0012981:	0f 85 eb 00 00 00    	jne    c0012a72 <SysOpen(regs*)+0x1e9>
c0012987:	83 ec 08             	sub    esp,0x8
c001298a:	68 95 24 02 c0       	push   0xc0022495
c001298f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012992:	50                   	push   eax
c0012993:	e8 a9 fe ff ff       	call   c0012841 <string_ends_with(char const*, char const*)>
c0012998:	83 c4 10             	add    esp,0x10
c001299b:	85 c0                	test   eax,eax
c001299d:	0f 85 cf 00 00 00    	jne    c0012a72 <SysOpen(regs*)+0x1e9>
c00129a3:	83 ec 08             	sub    esp,0x8
c00129a6:	68 91 24 02 c0       	push   0xc0022491
c00129ab:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00129ae:	51                   	push   ecx
c00129af:	e8 9c dd fe ff       	call   c0000750 <strcmp>
c00129b4:	83 c4 10             	add    esp,0x10
c00129b7:	85 c0                	test   eax,eax
c00129b9:	0f 84 b3 00 00 00    	je     c0012a72 <SysOpen(regs*)+0x1e9>
c00129bf:	83 ec 08             	sub    esp,0x8
c00129c2:	68 90 24 02 c0       	push   0xc0022490
c00129c7:	56                   	push   esi
c00129c8:	e8 74 fe ff ff       	call   c0012841 <string_ends_with(char const*, char const*)>
c00129cd:	83 c4 10             	add    esp,0x10
c00129d0:	85 c0                	test   eax,eax
c00129d2:	0f 85 9a 00 00 00    	jne    c0012a72 <SysOpen(regs*)+0x1e9>
c00129d8:	83 ec 0c             	sub    esp,0xc
c00129db:	68 14 01 00 00       	push   0x114
c00129e0:	e8 d1 50 ff ff       	call   c0007ab6 <malloc>
c00129e5:	83 c4 0c             	add    esp,0xc
c00129e8:	89 c6                	mov    esi,eax
c00129ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00129f2:	50                   	push   eax
c00129f3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00129f6:	52                   	push   edx
c00129f7:	56                   	push   esi
c00129f8:	e8 19 91 ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c00129fd:	83 c4 10             	add    esp,0x10
c0012a00:	85 f6                	test   esi,esi
c0012a02:	74 5b                	je     c0012a5f <SysOpen(regs*)+0x1d6>
c0012a04:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012a07:	0f b6 c2             	movzx  eax,dl
c0012a0a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012a0d:	89 d0                	mov    eax,edx
c0012a0f:	83 e0 01             	and    eax,0x1
c0012a12:	f6 c2 02             	test   dl,0x2
c0012a15:	74 03                	je     c0012a1a <SysOpen(regs*)+0x191>
c0012a17:	83 c8 02             	or     eax,0x2
c0012a1a:	f6 c2 04             	test   dl,0x4
c0012a1d:	74 03                	je     c0012a22 <SysOpen(regs*)+0x199>
c0012a1f:	83 c8 04             	or     eax,0x4
c0012a22:	f6 c2 08             	test   dl,0x8
c0012a25:	74 03                	je     c0012a2a <SysOpen(regs*)+0x1a1>
c0012a27:	83 c8 0a             	or     eax,0xa
c0012a2a:	80 e2 10             	and    dl,0x10
c0012a2d:	74 03                	je     c0012a32 <SysOpen(regs*)+0x1a9>
c0012a2f:	83 c8 12             	or     eax,0x12
c0012a32:	83 ec 08             	sub    esp,0x8
c0012a35:	50                   	push   eax
c0012a36:	56                   	push   esi
c0012a37:	e8 f8 90 ff ff       	call   c000bb34 <File::open(FileOpenMode)>
c0012a3c:	83 c4 10             	add    esp,0x10
c0012a3f:	85 c0                	test   eax,eax
c0012a41:	75 1c                	jne    c0012a5f <SysOpen(regs*)+0x1d6>
c0012a43:	83 ec 0c             	sub    esp,0xc
c0012a46:	56                   	push   esi
c0012a47:	e8 6a 67 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012a4c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012a4f:	83 c4 10             	add    esp,0x10
c0012a52:	89 02                	mov    DWORD PTR [edx],eax
c0012a54:	c1 f8 1f             	sar    eax,0x1f
c0012a57:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012a5a:	e9 ba fe ff ff       	jmp    c0012919 <SysOpen(regs*)+0x90>
c0012a5f:	81 c4 04 01 00 00    	add    esp,0x104
c0012a65:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a6a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012a6f:	5b                   	pop    ebx
c0012a70:	5e                   	pop    esi
c0012a71:	c3                   	ret    
c0012a72:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a75:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012a7b:	e9 92 fe ff ff       	jmp    c0012912 <SysOpen(regs*)+0x89>

c0012a80 <KeSystemCall(regs*, void*)>:
c0012a80:	53                   	push   ebx
c0012a81:	83 ec 08             	sub    esp,0x8
c0012a84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012a88:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012a8b:	83 f8 3e             	cmp    eax,0x3e
c0012a8e:	77 16                	ja     c0012aa6 <KeSystemCall(regs*, void*)+0x26>
c0012a90:	8b 14 85 a0 3c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc360]
c0012a97:	85 d2                	test   edx,edx
c0012a99:	74 0b                	je     c0012aa6 <KeSystemCall(regs*, void*)+0x26>
c0012a9b:	83 ec 0c             	sub    esp,0xc
c0012a9e:	53                   	push   ebx
c0012a9f:	ff d2                	call   edx
c0012aa1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012aa4:	eb 0d                	jmp    c0012ab3 <KeSystemCall(regs*, void*)+0x33>
c0012aa6:	52                   	push   edx
c0012aa7:	52                   	push   edx
c0012aa8:	50                   	push   eax
c0012aa9:	68 9a 24 02 c0       	push   0xc002249a
c0012aae:	e8 92 7e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012ab3:	83 c4 10             	add    esp,0x10
c0012ab6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012abb:	31 d2                	xor    edx,edx
c0012abd:	83 c4 08             	add    esp,0x8
c0012ac0:	5b                   	pop    ebx
c0012ac1:	c3                   	ret    
c0012ac2:	66 90                	xchg   ax,ax

c0012ac4 <KeSwitchEndian16(unsigned short)>:
c0012ac4:	83 ec 04             	sub    esp,0x4
c0012ac7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012acb:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012acf:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012ad3:	c1 f8 08             	sar    eax,0x8
c0012ad6:	89 c2                	mov    edx,eax
c0012ad8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012adc:	c1 e0 08             	shl    eax,0x8
c0012adf:	09 d0                	or     eax,edx
c0012ae1:	83 c4 04             	add    esp,0x4
c0012ae4:	c3                   	ret    
c0012ae5:	8d 76 00             	lea    esi,[esi+0x0]

c0012ae8 <KeSwitchEndian32(unsigned int)>:
c0012ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aec:	c1 e8 18             	shr    eax,0x18
c0012aef:	89 c2                	mov    edx,eax
c0012af1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012af5:	c1 e0 08             	shl    eax,0x8
c0012af8:	25 00 00 ff 00       	and    eax,0xff0000
c0012afd:	09 c2                	or     edx,eax
c0012aff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b03:	c1 e8 08             	shr    eax,0x8
c0012b06:	25 00 ff 00 00       	and    eax,0xff00
c0012b0b:	09 c2                	or     edx,eax
c0012b0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b11:	c1 e0 18             	shl    eax,0x18
c0012b14:	09 d0                	or     eax,edx
c0012b16:	c3                   	ret    
c0012b17:	90                   	nop

c0012b18 <EthernetCRC32(unsigned char*, int)>:
c0012b18:	83 ec 10             	sub    esp,0x10
c0012b1b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012b20:	75 0a                	jne    c0012b2c <EthernetCRC32(unsigned char*, int)+0x14>
c0012b22:	b8 00 00 00 00       	mov    eax,0x0
c0012b27:	e9 8c 00 00 00       	jmp    c0012bb8 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b2c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b31:	7f 09                	jg     c0012b3c <EthernetCRC32(unsigned char*, int)+0x24>
c0012b33:	b8 00 00 00 00       	mov    eax,0x0
c0012b38:	eb 7e                	jmp    c0012bb8 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b3a:	66 90                	xchg   ax,ax
c0012b3c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012b44:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012b4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b50:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012b54:	7d 5a                	jge    c0012bb0 <EthernetCRC32(unsigned char*, int)+0x98>
c0012b56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b5e:	01 d0                	add    eax,edx
c0012b60:	8a 00                	mov    al,BYTE PTR [eax]
c0012b62:	0f b6 c0             	movzx  eax,al
c0012b65:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012b69:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012b71:	8d 76 00             	lea    esi,[esi+0x0]
c0012b74:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012b79:	7f 2d                	jg     c0012ba8 <EthernetCRC32(unsigned char*, int)+0x90>
c0012b7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b7f:	83 e0 01             	and    eax,0x1
c0012b82:	74 10                	je     c0012b94 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b88:	d1 e8                	shr    eax,1
c0012b8a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012b8f:	eb 0b                	jmp    c0012b9c <EthernetCRC32(unsigned char*, int)+0x84>
c0012b91:	8d 76 00             	lea    esi,[esi+0x0]
c0012b94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b98:	d1 e8                	shr    eax,1
c0012b9a:	66 90                	xchg   ax,ax
c0012b9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ba0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012ba5:	eb cd                	jmp    c0012b74 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012ba7:	90                   	nop
c0012ba8:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012bad:	eb 9d                	jmp    c0012b4c <EthernetCRC32(unsigned char*, int)+0x34>
c0012baf:	90                   	nop
c0012bb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bb4:	f7 d0                	not    eax
c0012bb6:	66 90                	xchg   ax,ax
c0012bb8:	83 c4 10             	add    esp,0x10
c0012bbb:	c3                   	ret    

c0012bbc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012bbc:	83 ec 2c             	sub    esp,0x2c
c0012bbf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bc3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012bc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bcc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012bd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012bd4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012bd7:	0f b7 c0             	movzx  eax,ax
c0012bda:	3d 06 08 00 00       	cmp    eax,0x806
c0012bdf:	75 13                	jne    c0012bf4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012be1:	83 ec 0c             	sub    esp,0xc
c0012be4:	68 ae 24 02 c0       	push   0xc00224ae
c0012be9:	e8 57 7d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012bee:	83 c4 10             	add    esp,0x10
c0012bf1:	eb 25                	jmp    c0012c18 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012bf3:	90                   	nop
c0012bf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012bf8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012bfb:	0f b7 c0             	movzx  eax,ax
c0012bfe:	3d 00 08 00 00       	cmp    eax,0x800
c0012c03:	75 13                	jne    c0012c18 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c05:	83 ec 0c             	sub    esp,0xc
c0012c08:	68 c4 24 02 c0       	push   0xc00224c4
c0012c0d:	e8 33 7d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012c12:	83 c4 10             	add    esp,0x10
c0012c15:	8d 76 00             	lea    esi,[esi+0x0]
c0012c18:	90                   	nop
c0012c19:	83 c4 2c             	add    esp,0x2c
c0012c1c:	c3                   	ret    

c0012c1d <CmOpen(char const*)>:
c0012c1d:	57                   	push   edi
c0012c1e:	56                   	push   esi
c0012c1f:	53                   	push   ebx
c0012c20:	83 ec 1c             	sub    esp,0x1c
c0012c23:	6a 30                	push   0x30
c0012c25:	e8 8c 4e ff ff       	call   c0007ab6 <malloc>
c0012c2a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c31:	89 c3                	mov    ebx,eax
c0012c33:	e8 7e 4e ff ff       	call   c0007ab6 <malloc>
c0012c38:	83 c4 0c             	add    esp,0xc
c0012c3b:	89 c6                	mov    esi,eax
c0012c3d:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012c43:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012c47:	50                   	push   eax
c0012c48:	e8 c9 8e ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c0012c4d:	83 c4 0c             	add    esp,0xc
c0012c50:	89 33                	mov    DWORD PTR [ebx],esi
c0012c52:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012c56:	50                   	push   eax
c0012c57:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c5b:	50                   	push   eax
c0012c5c:	56                   	push   esi
c0012c5d:	e8 d4 91 ff ff       	call   c000be36 <File::stat(unsigned long long*, bool*)>
c0012c62:	5a                   	pop    edx
c0012c63:	59                   	pop    ecx
c0012c64:	6a 01                	push   0x1
c0012c66:	ff 33                	push   DWORD PTR [ebx]
c0012c68:	e8 c7 8e ff ff       	call   c000bb34 <File::open(FileOpenMode)>
c0012c6d:	5e                   	pop    esi
c0012c6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c72:	e8 3f 4e ff ff       	call   c0007ab6 <malloc>
c0012c77:	5a                   	pop    edx
c0012c78:	89 c7                	mov    edi,eax
c0012c7a:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012c7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c80:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c82:	56                   	push   esi
c0012c83:	57                   	push   edi
c0012c84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c88:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c8c:	50                   	push   eax
c0012c8d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012c90:	83 c4 14             	add    esp,0x14
c0012c93:	ff 33                	push   DWORD PTR [ebx]
c0012c95:	e8 f8 8e ff ff       	call   c000bb92 <File::close()>
c0012c9a:	59                   	pop    ecx
c0012c9b:	58                   	pop    eax
c0012c9c:	6a 13                	push   0x13
c0012c9e:	ff 33                	push   DWORD PTR [ebx]
c0012ca0:	e8 8f 8e ff ff       	call   c000bb34 <File::open(FileOpenMode)>
c0012ca5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ca7:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ca9:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cac:	57                   	push   edi
c0012cad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cb1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cb5:	50                   	push   eax
c0012cb6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012cb9:	83 c4 14             	add    esp,0x14
c0012cbc:	57                   	push   edi
c0012cbd:	e8 04 4e ff ff       	call   c0007ac6 <free>
c0012cc2:	83 c4 10             	add    esp,0x10
c0012cc5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012cc8:	75 10                	jne    c0012cda <CmOpen(char const*)+0xbd>
c0012cca:	83 ec 0c             	sub    esp,0xc
c0012ccd:	68 d9 24 02 c0       	push   0xc00224d9
c0012cd2:	e8 10 e9 ff ff       	call   c00115e7 <KePanic(char const*)>
c0012cd7:	83 c4 10             	add    esp,0x10
c0012cda:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012cdd:	50                   	push   eax
c0012cde:	6a 00                	push   0x0
c0012ce0:	6a 00                	push   0x0
c0012ce2:	ff 33                	push   DWORD PTR [ebx]
c0012ce4:	e8 09 8f ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0012ce9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ceb:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ced:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cf0:	57                   	push   edi
c0012cf1:	6a 00                	push   0x0
c0012cf3:	6a 2b                	push   0x2b
c0012cf5:	50                   	push   eax
c0012cf6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012cf9:	83 c4 1c             	add    esp,0x1c
c0012cfc:	6a 00                	push   0x0
c0012cfe:	6a 00                	push   0x0
c0012d00:	ff 33                	push   DWORD PTR [ebx]
c0012d02:	e8 eb 8e ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0012d07:	83 c4 0c             	add    esp,0xc
c0012d0a:	6a 08                	push   0x8
c0012d0c:	68 ea 24 02 c0       	push   0xc00224ea
c0012d11:	57                   	push   edi
c0012d12:	e8 69 d6 fe ff       	call   c0000380 <memcmp>
c0012d17:	83 c4 10             	add    esp,0x10
c0012d1a:	85 c0                	test   eax,eax
c0012d1c:	74 10                	je     c0012d2e <CmOpen(char const*)+0x111>
c0012d1e:	83 ec 0c             	sub    esp,0xc
c0012d21:	68 f3 24 02 c0       	push   0xc00224f3
c0012d26:	e8 bc e8 ff ff       	call   c00115e7 <KePanic(char const*)>
c0012d2b:	83 c4 10             	add    esp,0x10
c0012d2e:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012d32:	89 d8                	mov    eax,ebx
c0012d34:	83 c4 10             	add    esp,0x10
c0012d37:	5b                   	pop    ebx
c0012d38:	5e                   	pop    esi
c0012d39:	5f                   	pop    edi
c0012d3a:	c3                   	ret    

c0012d3b <CmClose(Reghive_Tag*)>:
c0012d3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d3f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012d43:	74 0b                	je     c0012d50 <CmClose(Reghive_Tag*)+0x15>
c0012d45:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d4b:	e9 42 8e ff ff       	jmp    c000bb92 <File::close()>
c0012d50:	c3                   	ret    

c0012d51 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012d51:	53                   	push   ebx
c0012d52:	83 ec 18             	sub    esp,0x18
c0012d55:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d59:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012d5d:	74 29                	je     c0012d88 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012d5f:	50                   	push   eax
c0012d60:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012d65:	99                   	cdq    
c0012d66:	52                   	push   edx
c0012d67:	50                   	push   eax
c0012d68:	ff 33                	push   DWORD PTR [ebx]
c0012d6a:	e8 83 8e ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0012d6f:	5a                   	pop    edx
c0012d70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d72:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012d76:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d78:	51                   	push   ecx
c0012d79:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012d7d:	6a 00                	push   0x0
c0012d7f:	6a 2b                	push   0x2b
c0012d81:	50                   	push   eax
c0012d82:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d85:	83 c4 20             	add    esp,0x20
c0012d88:	83 c4 18             	add    esp,0x18
c0012d8b:	5b                   	pop    ebx
c0012d8c:	c3                   	ret    

c0012d8d <CmGetString(Reghive_Tag*, int, char*)>:
c0012d8d:	55                   	push   ebp
c0012d8e:	57                   	push   edi
c0012d8f:	56                   	push   esi
c0012d90:	53                   	push   ebx
c0012d91:	31 db                	xor    ebx,ebx
c0012d93:	83 ec 70             	sub    esp,0x70
c0012d96:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012d9d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012da1:	50                   	push   eax
c0012da2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012da9:	55                   	push   ebp
c0012daa:	e8 a2 ff ff ff       	call   c0012d51 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012daf:	83 c4 10             	add    esp,0x10
c0012db2:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012db7:	c1 e0 08             	shl    eax,0x8
c0012dba:	89 c2                	mov    edx,eax
c0012dbc:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012dc1:	09 d0                	or     eax,edx
c0012dc3:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012dc8:	c1 e0 08             	shl    eax,0x8
c0012dcb:	09 d0                	or     eax,edx
c0012dcd:	74 25                	je     c0012df4 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012dcf:	6b fb 0d             	imul   edi,ebx,0xd
c0012dd2:	52                   	push   edx
c0012dd3:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012dd7:	52                   	push   edx
c0012dd8:	50                   	push   eax
c0012dd9:	55                   	push   ebp
c0012dda:	e8 72 ff ff ff       	call   c0012d51 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ddf:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012de3:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012dea:	b9 27 00 00 00       	mov    ecx,0x27
c0012def:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012df1:	83 c4 10             	add    esp,0x10
c0012df4:	83 c3 03             	add    ebx,0x3
c0012df7:	83 fb 15             	cmp    ebx,0x15
c0012dfa:	75 b6                	jne    c0012db2 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012dfc:	83 c4 6c             	add    esp,0x6c
c0012dff:	5b                   	pop    ebx
c0012e00:	5e                   	pop    esi
c0012e01:	5f                   	pop    edi
c0012e02:	5d                   	pop    ebp
c0012e03:	c3                   	ret    

c0012e04 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012e04:	83 ec 40             	sub    esp,0x40
c0012e07:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e0b:	50                   	push   eax
c0012e0c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e10:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e14:	e8 38 ff ff ff       	call   c0012d51 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e19:	83 c4 10             	add    esp,0x10
c0012e1c:	83 c8 ff             	or     eax,0xffffffff
c0012e1f:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012e24:	75 19                	jne    c0012e3f <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012e26:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012e2b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012e30:	c1 e0 08             	shl    eax,0x8
c0012e33:	09 c2                	or     edx,eax
c0012e35:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012e3a:	c1 e0 10             	shl    eax,0x10
c0012e3d:	09 d0                	or     eax,edx
c0012e3f:	83 c4 3c             	add    esp,0x3c
c0012e42:	c3                   	ret    

c0012e43 <CmGetNext(Reghive_Tag*, int)>:
c0012e43:	83 ec 40             	sub    esp,0x40
c0012e46:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e4a:	50                   	push   eax
c0012e4b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e4f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e53:	e8 f9 fe ff ff       	call   c0012d51 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e58:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012e5d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012e62:	c1 e0 08             	shl    eax,0x8
c0012e65:	09 c2                	or     edx,eax
c0012e67:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012e6c:	83 c4 4c             	add    esp,0x4c
c0012e6f:	c1 e0 10             	shl    eax,0x10
c0012e72:	09 d0                	or     eax,edx
c0012e74:	c3                   	ret    

c0012e75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012e75:	53                   	push   ebx
c0012e76:	83 ec 18             	sub    esp,0x18
c0012e79:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012e7d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e81:	74 29                	je     c0012eac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012e83:	50                   	push   eax
c0012e84:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012e89:	99                   	cdq    
c0012e8a:	52                   	push   edx
c0012e8b:	50                   	push   eax
c0012e8c:	ff 33                	push   DWORD PTR [ebx]
c0012e8e:	e8 5f 8d ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0012e93:	5a                   	pop    edx
c0012e94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e96:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012e9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e9c:	51                   	push   ecx
c0012e9d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012ea1:	6a 00                	push   0x0
c0012ea3:	6a 2b                	push   0x2b
c0012ea5:	50                   	push   eax
c0012ea6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ea9:	83 c4 20             	add    esp,0x20
c0012eac:	83 c4 18             	add    esp,0x18
c0012eaf:	5b                   	pop    ebx
c0012eb0:	c3                   	ret    

c0012eb1 <CmFreeExtent(Reghive_Tag*, int)>:
c0012eb1:	53                   	push   ebx
c0012eb2:	83 ec 3c             	sub    esp,0x3c
c0012eb5:	6a 2b                	push   0x2b
c0012eb7:	6a 00                	push   0x0
c0012eb9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012ebd:	53                   	push   ebx
c0012ebe:	e8 2d d6 fe ff       	call   c00004f0 <memset>
c0012ec3:	83 c4 0c             	add    esp,0xc
c0012ec6:	53                   	push   ebx
c0012ec7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ecb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ecf:	e8 a1 ff ff ff       	call   c0012e75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ed4:	83 c4 48             	add    esp,0x48
c0012ed7:	5b                   	pop    ebx
c0012ed8:	c3                   	ret    

c0012ed9 <CmUpdateHeader(Reghive_Tag*)>:
c0012ed9:	83 ec 0c             	sub    esp,0xc
c0012edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ee0:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012ee4:	74 10                	je     c0012ef6 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012ee6:	52                   	push   edx
c0012ee7:	8d 50 05             	lea    edx,[eax+0x5]
c0012eea:	52                   	push   edx
c0012eeb:	6a 00                	push   0x0
c0012eed:	50                   	push   eax
c0012eee:	e8 82 ff ff ff       	call   c0012e75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ef3:	83 c4 10             	add    esp,0x10
c0012ef6:	83 c4 0c             	add    esp,0xc
c0012ef9:	c3                   	ret    

c0012efa <CmExpand(Reghive_Tag*, int)>:
c0012efa:	57                   	push   edi
c0012efb:	56                   	push   esi
c0012efc:	83 ce ff             	or     esi,0xffffffff
c0012eff:	53                   	push   ebx
c0012f00:	83 ec 30             	sub    esp,0x30
c0012f03:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012f07:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f0b:	74 5f                	je     c0012f6c <CmExpand(Reghive_Tag*, int)+0x72>
c0012f0d:	31 d2                	xor    edx,edx
c0012f0f:	31 f6                	xor    esi,esi
c0012f11:	50                   	push   eax
c0012f12:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012f16:	52                   	push   edx
c0012f17:	50                   	push   eax
c0012f18:	ff 33                	push   DWORD PTR [ebx]
c0012f1a:	e8 d3 8c ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0012f1f:	83 c4 0c             	add    esp,0xc
c0012f22:	6a 2b                	push   0x2b
c0012f24:	6a 00                	push   0x0
c0012f26:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012f2a:	57                   	push   edi
c0012f2b:	e8 c0 d5 fe ff       	call   c00004f0 <memset>
c0012f30:	83 c4 10             	add    esp,0x10
c0012f33:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012f37:	7d 1b                	jge    c0012f54 <CmExpand(Reghive_Tag*, int)+0x5a>
c0012f39:	83 ec 0c             	sub    esp,0xc
c0012f3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f3e:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012f42:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f44:	46                   	inc    esi
c0012f45:	51                   	push   ecx
c0012f46:	57                   	push   edi
c0012f47:	6a 00                	push   0x0
c0012f49:	6a 2b                	push   0x2b
c0012f4b:	50                   	push   eax
c0012f4c:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f4f:	83 c4 20             	add    esp,0x20
c0012f52:	eb df                	jmp    c0012f33 <CmExpand(Reghive_Tag*, int)+0x39>
c0012f54:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012f58:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012f5b:	83 ec 0c             	sub    esp,0xc
c0012f5e:	01 f2                	add    edx,esi
c0012f60:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012f63:	53                   	push   ebx
c0012f64:	e8 70 ff ff ff       	call   c0012ed9 <CmUpdateHeader(Reghive_Tag*)>
c0012f69:	83 c4 10             	add    esp,0x10
c0012f6c:	83 c4 30             	add    esp,0x30
c0012f6f:	89 f0                	mov    eax,esi
c0012f71:	5b                   	pop    ebx
c0012f72:	5e                   	pop    esi
c0012f73:	5f                   	pop    edi
c0012f74:	c3                   	ret    

c0012f75 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012f75:	55                   	push   ebp
c0012f76:	57                   	push   edi
c0012f77:	56                   	push   esi
c0012f78:	53                   	push   ebx
c0012f79:	83 cb ff             	or     ebx,0xffffffff
c0012f7c:	83 ec 1c             	sub    esp,0x1c
c0012f7f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012f83:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012f87:	74 68                	je     c0012ff1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012f89:	be 2b 00 00 00       	mov    esi,0x2b
c0012f8e:	51                   	push   ecx
c0012f8f:	31 ff                	xor    edi,edi
c0012f91:	6a 00                	push   0x0
c0012f93:	31 db                	xor    ebx,ebx
c0012f95:	6a 00                	push   0x0
c0012f97:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012f9a:	e8 53 8c ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0012f9f:	83 c4 10             	add    esp,0x10
c0012fa2:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012fa5:	76 3b                	jbe    c0012fe2 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012fa7:	83 ec 0c             	sub    esp,0xc
c0012faa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012fad:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012fb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fb3:	51                   	push   ecx
c0012fb4:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012fb8:	51                   	push   ecx
c0012fb9:	6a 00                	push   0x0
c0012fbb:	6a 01                	push   0x1
c0012fbd:	50                   	push   eax
c0012fbe:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012fc1:	83 c4 20             	add    esp,0x20
c0012fc4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012fc9:	74 26                	je     c0012ff1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012fcb:	43                   	inc    ebx
c0012fcc:	52                   	push   edx
c0012fcd:	57                   	push   edi
c0012fce:	56                   	push   esi
c0012fcf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012fd2:	e8 1b 8c ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0012fd7:	83 c6 2b             	add    esi,0x2b
c0012fda:	83 d7 00             	adc    edi,0x0
c0012fdd:	83 c4 10             	add    esp,0x10
c0012fe0:	eb c0                	jmp    c0012fa2 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012fe2:	50                   	push   eax
c0012fe3:	50                   	push   eax
c0012fe4:	6a 40                	push   0x40
c0012fe6:	55                   	push   ebp
c0012fe7:	e8 0e ff ff ff       	call   c0012efa <CmExpand(Reghive_Tag*, int)>
c0012fec:	83 c4 10             	add    esp,0x10
c0012fef:	89 c3                	mov    ebx,eax
c0012ff1:	83 c4 1c             	add    esp,0x1c
c0012ff4:	89 d8                	mov    eax,ebx
c0012ff6:	5b                   	pop    ebx
c0012ff7:	5e                   	pop    esi
c0012ff8:	5f                   	pop    edi
c0012ff9:	5d                   	pop    ebp
c0012ffa:	c3                   	ret    

c0012ffb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012ffb:	55                   	push   ebp
c0012ffc:	57                   	push   edi
c0012ffd:	56                   	push   esi
c0012ffe:	53                   	push   ebx
c0012fff:	81 ec 88 00 00 00    	sub    esp,0x88
c0013005:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001300c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013013:	e8 5d ff ff ff       	call   c0012f75 <CmFindUnusedExtent(Reghive_Tag*)>
c0013018:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001301c:	83 c4 0c             	add    esp,0xc
c001301f:	6a 2b                	push   0x2b
c0013021:	6a 00                	push   0x0
c0013023:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0013027:	55                   	push   ebp
c0013028:	e8 c3 d4 fe ff       	call   c00004f0 <memset>
c001302d:	83 c4 10             	add    esp,0x10
c0013030:	85 db                	test   ebx,ebx
c0013032:	74 12                	je     c0013046 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0013034:	51                   	push   ecx
c0013035:	55                   	push   ebp
c0013036:	53                   	push   ebx
c0013037:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001303e:	e8 0e fd ff ff       	call   c0012d51 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013043:	83 c4 10             	add    esp,0x10
c0013046:	8d 7c 24 45          	lea    edi,[esp+0x45]
c001304a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013051:	b9 2b 00 00 00       	mov    ecx,0x2b
c0013056:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013058:	85 db                	test   ebx,ebx
c001305a:	74 49                	je     c00130a5 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c001305c:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0013061:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0013066:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001306a:	c1 e0 08             	shl    eax,0x8
c001306d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013073:	09 c8                	or     eax,ecx
c0013075:	74 11                	je     c0013088 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0013077:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001307b:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c001307f:	c1 e8 10             	shr    eax,0x10
c0013082:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0013086:	eb 0f                	jmp    c0013097 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0013088:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c001308d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0013092:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0013097:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c001309b:	c1 ea 08             	shr    edx,0x8
c001309e:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00130a3:	eb 0f                	jmp    c00130b4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00130a5:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130aa:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130af:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130b4:	52                   	push   edx
c00130b5:	8d 44 24 49          	lea    eax,[esp+0x49]
c00130b9:	50                   	push   eax
c00130ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00130be:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130c5:	e8 ab fd ff ff       	call   c0012e75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00130ca:	83 c4 10             	add    esp,0x10
c00130cd:	85 db                	test   ebx,ebx
c00130cf:	74 12                	je     c00130e3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00130d1:	50                   	push   eax
c00130d2:	55                   	push   ebp
c00130d3:	53                   	push   ebx
c00130d4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130db:	e8 95 fd ff ff       	call   c0012e75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00130e0:	83 c4 10             	add    esp,0x10
c00130e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00130e7:	83 c4 7c             	add    esp,0x7c
c00130ea:	5b                   	pop    ebx
c00130eb:	5e                   	pop    esi
c00130ec:	5f                   	pop    edi
c00130ed:	5d                   	pop    ebp
c00130ee:	c3                   	ret    

c00130ef <CmSetString(Reghive_Tag*, int, char const*)>:
c00130ef:	55                   	push   ebp
c00130f0:	57                   	push   edi
c00130f1:	56                   	push   esi
c00130f2:	53                   	push   ebx
c00130f3:	bb 27 00 00 00       	mov    ebx,0x27
c00130f8:	81 ec 88 00 00 00    	sub    esp,0x88
c00130fe:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013105:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c001310c:	e8 5f d4 fe ff       	call   c0000570 <strlen>
c0013111:	8d 48 26             	lea    ecx,[eax+0x26]
c0013114:	89 c8                	mov    eax,ecx
c0013116:	99                   	cdq    
c0013117:	f7 fb                	idiv   ebx
c0013119:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001311d:	83 c4 10             	add    esp,0x10
c0013120:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0013126:	7e 10                	jle    c0013138 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013128:	83 ec 0c             	sub    esp,0xc
c001312b:	68 04 25 02 c0       	push   0xc0022504
c0013130:	e8 b2 e4 ff ff       	call   c00115e7 <KePanic(char const*)>
c0013135:	83 c4 10             	add    esp,0x10
c0013138:	31 ff                	xor    edi,edi
c001313a:	50                   	push   eax
c001313b:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001313f:	53                   	push   ebx
c0013140:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013147:	56                   	push   esi
c0013148:	e8 04 fc ff ff       	call   c0012d51 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001314d:	83 c4 10             	add    esp,0x10
c0013150:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0013154:	89 d0                	mov    eax,edx
c0013156:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c001315a:	c1 e0 08             	shl    eax,0x8
c001315d:	09 c2                	or     edx,eax
c001315f:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0013163:	c1 e2 08             	shl    edx,0x8
c0013166:	09 c2                	or     edx,eax
c0013168:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001316c:	7e 76                	jle    c00131e4 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c001316e:	85 d2                	test   edx,edx
c0013170:	75 25                	jne    c0013197 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0013172:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0013177:	8d 44 24 45          	lea    eax,[esp+0x45]
c001317b:	50                   	push   eax
c001317c:	6a 00                	push   0x0
c001317e:	6a 00                	push   0x0
c0013180:	56                   	push   esi
c0013181:	e8 75 fe ff ff       	call   c0012ffb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013186:	83 c4 10             	add    esp,0x10
c0013189:	89 c2                	mov    edx,eax
c001318b:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c001318e:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0013191:	c1 f8 10             	sar    eax,0x10
c0013194:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0013197:	55                   	push   ebp
c0013198:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c001319c:	55                   	push   ebp
c001319d:	52                   	push   edx
c001319e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00131a2:	56                   	push   esi
c00131a3:	e8 a9 fb ff ff       	call   c0012d51 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131a8:	83 c4 0c             	add    esp,0xc
c00131ab:	6a 27                	push   0x27
c00131ad:	6a 00                	push   0x0
c00131af:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131b3:	51                   	push   ecx
c00131b4:	e8 37 d3 fe ff       	call   c00004f0 <memset>
c00131b9:	83 c4 0c             	add    esp,0xc
c00131bc:	6b c7 27             	imul   eax,edi,0x27
c00131bf:	6a 27                	push   0x27
c00131c1:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00131c8:	50                   	push   eax
c00131c9:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131cd:	51                   	push   ecx
c00131ce:	e8 ad d4 fe ff       	call   c0000680 <strncpy>
c00131d3:	83 c4 0c             	add    esp,0xc
c00131d6:	55                   	push   ebp
c00131d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00131db:	52                   	push   edx
c00131dc:	56                   	push   esi
c00131dd:	e8 93 fc ff ff       	call   c0012e75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131e2:	eb 19                	jmp    c00131fd <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c00131e4:	85 d2                	test   edx,edx
c00131e6:	74 18                	je     c0013200 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c00131e8:	51                   	push   ecx
c00131e9:	51                   	push   ecx
c00131ea:	52                   	push   edx
c00131eb:	56                   	push   esi
c00131ec:	e8 c0 fc ff ff       	call   c0012eb1 <CmFreeExtent(Reghive_Tag*, int)>
c00131f1:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00131f5:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00131f9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	47                   	inc    edi
c0013201:	83 c3 03             	add    ebx,0x3
c0013204:	83 ff 07             	cmp    edi,0x7
c0013207:	0f 85 43 ff ff ff    	jne    c0013150 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c001320d:	50                   	push   eax
c001320e:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0013212:	50                   	push   eax
c0013213:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001321a:	56                   	push   esi
c001321b:	e8 55 fc ff ff       	call   c0012e75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013220:	81 c4 8c 00 00 00    	add    esp,0x8c
c0013226:	5b                   	pop    ebx
c0013227:	5e                   	pop    esi
c0013228:	5f                   	pop    edi
c0013229:	5d                   	pop    ebp
c001322a:	c3                   	ret    

c001322b <CmGetMatch(char*, char*, bool, bool*)>:
c001322b:	56                   	push   esi
c001322c:	53                   	push   ebx
c001322d:	50                   	push   eax
c001322e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013232:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013237:	74 25                	je     c001325e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013239:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001323c:	31 db                	xor    ebx,ebx
c001323e:	50                   	push   eax
c001323f:	50                   	push   eax
c0013240:	8d 04 9d a0 3d 02 c0 	lea    eax,[ebx*4-0x3ffdc260]
c0013247:	50                   	push   eax
c0013248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001324c:	e8 ff d4 fe ff       	call   c0000750 <strcmp>
c0013251:	83 c4 10             	add    esp,0x10
c0013254:	85 c0                	test   eax,eax
c0013256:	74 2e                	je     c0013286 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013258:	43                   	inc    ebx
c0013259:	83 fb 3f             	cmp    ebx,0x3f
c001325c:	75 e0                	jne    c001323e <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001325e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013261:	31 db                	xor    ebx,ebx
c0013263:	8d 04 9d a0 3d 02 c0 	lea    eax,[ebx*4-0x3ffdc260]
c001326a:	51                   	push   ecx
c001326b:	51                   	push   ecx
c001326c:	50                   	push   eax
c001326d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013271:	e8 da d4 fe ff       	call   c0000750 <strcmp>
c0013276:	83 c4 10             	add    esp,0x10
c0013279:	85 c0                	test   eax,eax
c001327b:	74 09                	je     c0013286 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c001327d:	43                   	inc    ebx
c001327e:	83 fb 3f             	cmp    ebx,0x3f
c0013281:	75 e0                	jne    c0013263 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0013283:	83 cb ff             	or     ebx,0xffffffff
c0013286:	89 d8                	mov    eax,ebx
c0013288:	5a                   	pop    edx
c0013289:	5b                   	pop    ebx
c001328a:	5e                   	pop    esi
c001328b:	c3                   	ret    

c001328c <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c001328c:	55                   	push   ebp
c001328d:	31 c0                	xor    eax,eax
c001328f:	57                   	push   edi
c0013290:	56                   	push   esi
c0013291:	53                   	push   ebx
c0013292:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013296:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001329a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001329c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00132a0:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00132a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00132a7:	83 fd 1f             	cmp    ebp,0x1f
c00132aa:	7f 0b                	jg     c00132b7 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00132ac:	0f b6 c2             	movzx  eax,dl
c00132af:	d3 e0                	shl    eax,cl
c00132b1:	09 07                	or     DWORD PTR [edi],eax
c00132b3:	b0 01                	mov    al,0x1
c00132b5:	01 33                	add    DWORD PTR [ebx],esi
c00132b7:	5b                   	pop    ebx
c00132b8:	5e                   	pop    esi
c00132b9:	5f                   	pop    edi
c00132ba:	5d                   	pop    ebp
c00132bb:	c3                   	ret    

c00132bc <CmGetShift(unsigned int*, int*, int, bool*)>:
c00132bc:	57                   	push   edi
c00132bd:	56                   	push   esi
c00132be:	53                   	push   ebx
c00132bf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00132c3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132c7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00132cb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00132cf:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00132d1:	7c 17                	jl     c00132ea <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00132d3:	8b 17                	mov    edx,DWORD PTR [edi]
c00132d5:	b8 01 00 00 00       	mov    eax,0x1
c00132da:	d3 e0                	shl    eax,cl
c00132dc:	48                   	dec    eax
c00132dd:	21 d0                	and    eax,edx
c00132df:	d3 ea                	shr    edx,cl
c00132e1:	89 17                	mov    DWORD PTR [edi],edx
c00132e3:	29 0b                	sub    DWORD PTR [ebx],ecx
c00132e5:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00132e8:	eb 05                	jmp    c00132ef <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00132ea:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00132ed:	31 c0                	xor    eax,eax
c00132ef:	5b                   	pop    ebx
c00132f0:	5e                   	pop    esi
c00132f1:	5f                   	pop    edi
c00132f2:	c3                   	ret    

c00132f3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00132f3:	83 ec 40             	sub    esp,0x40
c00132f6:	8d 44 24 09          	lea    eax,[esp+0x9]
c00132fa:	50                   	push   eax
c00132fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00132ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013303:	e8 49 fa ff ff       	call   c0012d51 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013308:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001330c:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013310:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0013314:	89 10                	mov    DWORD PTR [eax],edx
c0013316:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013319:	83 c4 4c             	add    esp,0x4c
c001331c:	c3                   	ret    

c001331d <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c001331d:	55                   	push   ebp
c001331e:	57                   	push   edi
c001331f:	56                   	push   esi
c0013320:	53                   	push   ebx
c0013321:	83 ec 40             	sub    esp,0x40
c0013324:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013328:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c001332c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0013330:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0013334:	53                   	push   ebx
c0013335:	56                   	push   esi
c0013336:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001333a:	e8 12 fa ff ff       	call   c0012d51 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001333f:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0013343:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0013347:	83 c4 0c             	add    esp,0xc
c001334a:	53                   	push   ebx
c001334b:	56                   	push   esi
c001334c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013350:	e8 20 fb ff ff       	call   c0012e75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013355:	83 c4 4c             	add    esp,0x4c
c0013358:	5b                   	pop    ebx
c0013359:	5e                   	pop    esi
c001335a:	5f                   	pop    edi
c001335b:	5d                   	pop    ebp
c001335c:	c3                   	ret    

c001335d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c001335d:	55                   	push   ebp
c001335e:	57                   	push   edi
c001335f:	56                   	push   esi
c0013360:	31 f6                	xor    esi,esi
c0013362:	53                   	push   ebx
c0013363:	31 db                	xor    ebx,ebx
c0013365:	83 ec 40             	sub    esp,0x40
c0013368:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013370:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013378:	6a 12                	push   0x12
c001337a:	68 ee 00 00 00       	push   0xee
c001337f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013383:	e8 68 d1 fe ff       	call   c00004f0 <memset>
c0013388:	83 c4 10             	add    esp,0x10
c001338b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001338f:	6a 08                	push   0x8
c0013391:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013395:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0013399:	50                   	push   eax
c001339a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001339e:	55                   	push   ebp
c001339f:	57                   	push   edi
c00133a0:	e8 e7 fe ff ff       	call   c001328c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00133a5:	83 c4 10             	add    esp,0x10
c00133a8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00133ac:	50                   	push   eax
c00133ad:	6a 06                	push   0x6
c00133af:	55                   	push   ebp
c00133b0:	57                   	push   edi
c00133b1:	e8 06 ff ff ff       	call   c00132bc <CmGetShift(unsigned int*, int*, int, bool*)>
c00133b6:	83 c4 10             	add    esp,0x10
c00133b9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00133be:	74 07                	je     c00133c7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00133c0:	46                   	inc    esi
c00133c1:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00133c5:	eb e1                	jmp    c00133a8 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00133c7:	43                   	inc    ebx
c00133c8:	83 fb 12             	cmp    ebx,0x12
c00133cb:	75 c2                	jne    c001338f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00133cd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00133d1:	31 db                	xor    ebx,ebx
c00133d3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00133d6:	50                   	push   eax
c00133d7:	50                   	push   eax
c00133d8:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c00133dd:	43                   	inc    ebx
c00133de:	8d 04 85 a0 3d 02 c0 	lea    eax,[eax*4-0x3ffdc260]
c00133e5:	50                   	push   eax
c00133e6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00133ea:	e8 51 d4 fe ff       	call   c0000840 <strcat>
c00133ef:	83 c4 10             	add    esp,0x10
c00133f2:	83 fb 18             	cmp    ebx,0x18
c00133f5:	75 df                	jne    c00133d6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00133f7:	83 c4 3c             	add    esp,0x3c
c00133fa:	31 c0                	xor    eax,eax
c00133fc:	5b                   	pop    ebx
c00133fd:	5e                   	pop    esi
c00133fe:	5f                   	pop    edi
c00133ff:	5d                   	pop    ebp
c0013400:	c3                   	ret    

c0013401 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013401:	83 ec 40             	sub    esp,0x40
c0013404:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013408:	50                   	push   eax
c0013409:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001340d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013411:	e8 3b f9 ff ff       	call   c0012d51 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013416:	58                   	pop    eax
c0013417:	5a                   	pop    edx
c0013418:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001341c:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013420:	50                   	push   eax
c0013421:	e8 37 ff ff ff       	call   c001335d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0013426:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001342b:	83 c4 4c             	add    esp,0x4c
c001342e:	c3                   	ret    

c001342f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001342f:	55                   	push   ebp
c0013430:	57                   	push   edi
c0013431:	56                   	push   esi
c0013432:	53                   	push   ebx
c0013433:	31 db                	xor    ebx,ebx
c0013435:	83 ec 70             	sub    esp,0x70
c0013438:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001343f:	6a 30                	push   0x30
c0013441:	6a 00                	push   0x0
c0013443:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013447:	56                   	push   esi
c0013448:	e8 a3 d0 fe ff       	call   c00004f0 <memset>
c001344d:	83 c4 10             	add    esp,0x10
c0013450:	83 ec 0c             	sub    esp,0xc
c0013453:	57                   	push   edi
c0013454:	e8 17 d1 fe ff       	call   c0000570 <strlen>
c0013459:	83 c4 10             	add    esp,0x10
c001345c:	39 d8                	cmp    eax,ebx
c001345e:	76 16                	jbe    c0013476 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013460:	83 ec 0c             	sub    esp,0xc
c0013463:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0013467:	50                   	push   eax
c0013468:	e8 c3 d4 fe ff       	call   c0000930 <toupper>
c001346d:	83 c4 10             	add    esp,0x10
c0013470:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0013473:	43                   	inc    ebx
c0013474:	eb da                	jmp    c0013450 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0013476:	31 f6                	xor    esi,esi
c0013478:	52                   	push   edx
c0013479:	31 ff                	xor    edi,edi
c001347b:	6a 18                	push   0x18
c001347d:	6a 3f                	push   0x3f
c001347f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013483:	50                   	push   eax
c0013484:	e8 67 d0 fe ff       	call   c00004f0 <memset>
c0013489:	83 c4 10             	add    esp,0x10
c001348c:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0013490:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0013494:	84 c0                	test   al,al
c0013496:	0f 84 b0 00 00 00    	je     c001354c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001349c:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00134a0:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00134a5:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00134a9:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00134ae:	8d 6e 01             	lea    ebp,[esi+0x1]
c00134b1:	83 ec 0c             	sub    esp,0xc
c00134b4:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00134b8:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00134bc:	53                   	push   ebx
c00134bd:	e8 ae d0 fe ff       	call   c0000570 <strlen>
c00134c2:	83 c4 10             	add    esp,0x10
c00134c5:	85 c0                	test   eax,eax
c00134c7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00134cb:	74 0b                	je     c00134d8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00134cd:	50                   	push   eax
c00134ce:	6a 01                	push   0x1
c00134d0:	53                   	push   ebx
c00134d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00134d5:	50                   	push   eax
c00134d6:	eb 0a                	jmp    c00134e2 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00134d8:	50                   	push   eax
c00134d9:	6a 00                	push   0x0
c00134db:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00134df:	50                   	push   eax
c00134e0:	6a 00                	push   0x0
c00134e2:	e8 44 fd ff ff       	call   c001322b <CmGetMatch(char*, char*, bool, bool*)>
c00134e7:	83 c4 10             	add    esp,0x10
c00134ea:	83 f8 ff             	cmp    eax,0xffffffff
c00134ed:	75 1a                	jne    c0013509 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00134ef:	83 ec 0c             	sub    esp,0xc
c00134f2:	68 19 25 02 c0       	push   0xc0022519
c00134f7:	e8 eb e0 ff ff       	call   c00115e7 <KePanic(char const*)>
c00134fc:	83 c4 10             	add    esp,0x10
c00134ff:	b8 02 00 00 00       	mov    eax,0x2
c0013504:	e9 bc 00 00 00       	jmp    c00135c5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013509:	83 ff 18             	cmp    edi,0x18
c001350c:	75 1a                	jne    c0013528 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001350e:	83 ec 0c             	sub    esp,0xc
c0013511:	68 2e 25 02 c0       	push   0xc002252e
c0013516:	e8 cc e0 ff ff       	call   c00115e7 <KePanic(char const*)>
c001351b:	83 c4 10             	add    esp,0x10
c001351e:	b8 01 00 00 00       	mov    eax,0x1
c0013523:	e9 9d 00 00 00       	jmp    c00135c5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013528:	47                   	inc    edi
c0013529:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001352e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0013532:	74 02                	je     c0013536 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0013534:	89 ee                	mov    esi,ebp
c0013536:	83 ec 0c             	sub    esp,0xc
c0013539:	53                   	push   ebx
c001353a:	e8 31 d0 fe ff       	call   c0000570 <strlen>
c001353f:	83 c4 10             	add    esp,0x10
c0013542:	85 c0                	test   eax,eax
c0013544:	74 06                	je     c001354c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0013546:	46                   	inc    esi
c0013547:	e9 40 ff ff ff       	jmp    c001348c <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001354c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013554:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001355c:	31 f6                	xor    esi,esi
c001355e:	50                   	push   eax
c001355f:	31 ff                	xor    edi,edi
c0013561:	6a 12                	push   0x12
c0013563:	68 ee 00 00 00       	push   0xee
c0013568:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001356f:	e8 7c cf fe ff       	call   c00004f0 <memset>
c0013574:	83 c4 10             	add    esp,0x10
c0013577:	83 fe 17             	cmp    esi,0x17
c001357a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001357e:	7e 26                	jle    c00135a6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0013580:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013584:	50                   	push   eax
c0013585:	6a 08                	push   0x8
c0013587:	55                   	push   ebp
c0013588:	53                   	push   ebx
c0013589:	e8 2e fd ff ff       	call   c00132bc <CmGetShift(unsigned int*, int*, int, bool*)>
c001358e:	83 c4 10             	add    esp,0x10
c0013591:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013596:	74 26                	je     c00135be <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0013598:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001359f:	4e                   	dec    esi
c00135a0:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00135a3:	47                   	inc    edi
c00135a4:	eb 1c                	jmp    c00135c2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00135a6:	6a 06                	push   0x6
c00135a8:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00135ad:	50                   	push   eax
c00135ae:	55                   	push   ebp
c00135af:	53                   	push   ebx
c00135b0:	e8 d7 fc ff ff       	call   c001328c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00135b5:	83 c4 10             	add    esp,0x10
c00135b8:	84 c0                	test   al,al
c00135ba:	75 06                	jne    c00135c2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00135bc:	eb c2                	jmp    c0013580 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c00135be:	31 c0                	xor    eax,eax
c00135c0:	eb 03                	jmp    c00135c5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00135c2:	46                   	inc    esi
c00135c3:	eb b2                	jmp    c0013577 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00135c5:	83 c4 6c             	add    esp,0x6c
c00135c8:	5b                   	pop    ebx
c00135c9:	5e                   	pop    esi
c00135ca:	5f                   	pop    edi
c00135cb:	5d                   	pop    ebp
c00135cc:	c3                   	ret    

c00135cd <CmCreateString(Reghive_Tag*, int, char const*)>:
c00135cd:	53                   	push   ebx
c00135ce:	83 ec 3c             	sub    esp,0x3c
c00135d1:	6a 2b                	push   0x2b
c00135d3:	6a 00                	push   0x0
c00135d5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00135d9:	53                   	push   ebx
c00135da:	e8 11 cf fe ff       	call   c00004f0 <memset>
c00135df:	58                   	pop    eax
c00135e0:	5a                   	pop    edx
c00135e1:	8d 44 24 11          	lea    eax,[esp+0x11]
c00135e5:	50                   	push   eax
c00135e6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00135ea:	e8 40 fe ff ff       	call   c001342f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00135ef:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00135f4:	83 c4 0c             	add    esp,0xc
c00135f7:	6a 15                	push   0x15
c00135f9:	6a 00                	push   0x0
c00135fb:	8d 44 24 27          	lea    eax,[esp+0x27]
c00135ff:	50                   	push   eax
c0013600:	e8 eb ce fe ff       	call   c00004f0 <memset>
c0013605:	53                   	push   ebx
c0013606:	6a 00                	push   0x0
c0013608:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001360c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013610:	e8 e6 f9 ff ff       	call   c0012ffb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013615:	83 c4 58             	add    esp,0x58
c0013618:	5b                   	pop    ebx
c0013619:	c3                   	ret    

c001361a <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001361a:	56                   	push   esi
c001361b:	53                   	push   ebx
c001361c:	83 ec 48             	sub    esp,0x48
c001361f:	6a 12                	push   0x12
c0013621:	68 ff 00 00 00       	push   0xff
c0013626:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001362a:	56                   	push   esi
c001362b:	e8 c0 ce fe ff       	call   c00004f0 <memset>
c0013630:	5a                   	pop    edx
c0013631:	59                   	pop    ecx
c0013632:	56                   	push   esi
c0013633:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013637:	e8 f3 fd ff ff       	call   c001342f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001363c:	83 c4 10             	add    esp,0x10
c001363f:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013643:	85 db                	test   ebx,ebx
c0013645:	74 42                	je     c0013689 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0013647:	50                   	push   eax
c0013648:	8d 44 24 19          	lea    eax,[esp+0x19]
c001364c:	50                   	push   eax
c001364d:	53                   	push   ebx
c001364e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013652:	e8 fa f6 ff ff       	call   c0012d51 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013657:	83 c4 0c             	add    esp,0xc
c001365a:	6a 12                	push   0x12
c001365c:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013660:	50                   	push   eax
c0013661:	56                   	push   esi
c0013662:	e8 19 cd fe ff       	call   c0000380 <memcmp>
c0013667:	83 c4 10             	add    esp,0x10
c001366a:	85 c0                	test   eax,eax
c001366c:	74 1e                	je     c001368c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001366e:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0013673:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013678:	c1 e3 08             	shl    ebx,0x8
c001367b:	09 d8                	or     eax,ebx
c001367d:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013682:	c1 e3 10             	shl    ebx,0x10
c0013685:	09 c3                	or     ebx,eax
c0013687:	eb ba                	jmp    c0013643 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013689:	83 cb ff             	or     ebx,0xffffffff
c001368c:	89 d8                	mov    eax,ebx
c001368e:	83 c4 44             	add    esp,0x44
c0013691:	5b                   	pop    ebx
c0013692:	5e                   	pop    esi
c0013693:	c3                   	ret    

c0013694 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013694:	57                   	push   edi
c0013695:	56                   	push   esi
c0013696:	53                   	push   ebx
c0013697:	83 ec 34             	sub    esp,0x34
c001369a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001369e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00136a2:	6a 2b                	push   0x2b
c00136a4:	6a 00                	push   0x0
c00136a6:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00136aa:	53                   	push   ebx
c00136ab:	e8 40 ce fe ff       	call   c00004f0 <memset>
c00136b0:	58                   	pop    eax
c00136b1:	5a                   	pop    edx
c00136b2:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136b6:	50                   	push   eax
c00136b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00136bb:	e8 6f fd ff ff       	call   c001342f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136c0:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00136c4:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00136c8:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00136cc:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00136d0:	53                   	push   ebx
c00136d1:	6a 00                	push   0x0
c00136d3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136d7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136db:	e8 1b f9 ff ff       	call   c0012ffb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00136e0:	83 c4 50             	add    esp,0x50
c00136e3:	5b                   	pop    ebx
c00136e4:	5e                   	pop    esi
c00136e5:	5f                   	pop    edi
c00136e6:	c3                   	ret    

c00136e7 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00136e7:	55                   	push   ebp
c00136e8:	57                   	push   edi
c00136e9:	56                   	push   esi
c00136ea:	53                   	push   ebx
c00136eb:	83 ec 40             	sub    esp,0x40
c00136ee:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00136f2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00136f6:	6a 2b                	push   0x2b
c00136f8:	6a 00                	push   0x0
c00136fa:	8d 74 24 11          	lea    esi,[esp+0x11]
c00136fe:	56                   	push   esi
c00136ff:	e8 ec cd fe ff       	call   c00004f0 <memset>
c0013704:	5f                   	pop    edi
c0013705:	89 ef                	mov    edi,ebp
c0013707:	58                   	pop    eax
c0013708:	8d 44 24 11          	lea    eax,[esp+0x11]
c001370c:	50                   	push   eax
c001370d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013711:	e8 19 fd ff ff       	call   c001342f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013716:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001371b:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013720:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013725:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001372a:	83 c4 10             	add    esp,0x10
c001372d:	85 ed                	test   ebp,ebp
c001372f:	74 14                	je     c0013745 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013731:	51                   	push   ecx
c0013732:	51                   	push   ecx
c0013733:	57                   	push   edi
c0013734:	53                   	push   ebx
c0013735:	e8 09 f7 ff ff       	call   c0012e43 <CmGetNext(Reghive_Tag*, int)>
c001373a:	83 c4 10             	add    esp,0x10
c001373d:	85 c0                	test   eax,eax
c001373f:	74 04                	je     c0013745 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013741:	89 c7                	mov    edi,eax
c0013743:	eb e8                	jmp    c001372d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013745:	56                   	push   esi
c0013746:	6a 00                	push   0x0
c0013748:	57                   	push   edi
c0013749:	53                   	push   ebx
c001374a:	e8 ac f8 ff ff       	call   c0012ffb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001374f:	83 c4 0c             	add    esp,0xc
c0013752:	89 c7                	mov    edi,eax
c0013754:	56                   	push   esi
c0013755:	50                   	push   eax
c0013756:	53                   	push   ebx
c0013757:	e8 f5 f5 ff ff       	call   c0012d51 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001375c:	58                   	pop    eax
c001375d:	5a                   	pop    edx
c001375e:	6a 6c                	push   0x6c
c0013760:	6a 00                	push   0x0
c0013762:	6a 00                	push   0x0
c0013764:	68 3f 25 02 c0       	push   0xc002253f
c0013769:	57                   	push   edi
c001376a:	53                   	push   ebx
c001376b:	e8 24 ff ff ff       	call   c0013694 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013770:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013774:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013778:	c1 e8 10             	shr    eax,0x10
c001377b:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001377f:	83 c4 1c             	add    esp,0x1c
c0013782:	56                   	push   esi
c0013783:	57                   	push   edi
c0013784:	53                   	push   ebx
c0013785:	e8 eb f6 ff ff       	call   c0012e75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001378a:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001378f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013794:	c1 e0 08             	shl    eax,0x8
c0013797:	09 c2                	or     edx,eax
c0013799:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001379e:	83 c4 4c             	add    esp,0x4c
c00137a1:	c1 e0 10             	shl    eax,0x10
c00137a4:	5b                   	pop    ebx
c00137a5:	09 d0                	or     eax,edx
c00137a7:	5e                   	pop    esi
c00137a8:	5f                   	pop    edi
c00137a9:	5d                   	pop    ebp
c00137aa:	c3                   	ret    

c00137ab <zStrtok(char*, char const*)>:
c00137ab:	55                   	push   ebp
c00137ac:	57                   	push   edi
c00137ad:	56                   	push   esi
c00137ae:	53                   	push   ebx
c00137af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137b7:	85 db                	test   ebx,ebx
c00137b9:	74 2f                	je     c00137ea <zStrtok(char*, char const*)+0x3f>
c00137bb:	85 c0                	test   eax,eax
c00137bd:	75 09                	jne    c00137c8 <zStrtok(char*, char const*)+0x1d>
c00137bf:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c00137c4:	85 c0                	test   eax,eax
c00137c6:	74 50                	je     c0013818 <zStrtok(char*, char const*)+0x6d>
c00137c8:	31 c9                	xor    ecx,ecx
c00137ca:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00137ce:	74 03                	je     c00137d3 <zStrtok(char*, char const*)+0x28>
c00137d0:	41                   	inc    ecx
c00137d1:	eb f7                	jmp    c00137ca <zStrtok(char*, char const*)+0x1f>
c00137d3:	31 d2                	xor    edx,edx
c00137d5:	39 ca                	cmp    edx,ecx
c00137d7:	74 15                	je     c00137ee <zStrtok(char*, char const*)+0x43>
c00137d9:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00137dd:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00137e0:	8d 3c 10             	lea    edi,[eax+edx*1]
c00137e3:	39 ee                	cmp    esi,ebp
c00137e5:	74 13                	je     c00137fa <zStrtok(char*, char const*)+0x4f>
c00137e7:	42                   	inc    edx
c00137e8:	eb eb                	jmp    c00137d5 <zStrtok(char*, char const*)+0x2a>
c00137ea:	31 c0                	xor    eax,eax
c00137ec:	eb 2a                	jmp    c0013818 <zStrtok(char*, char const*)+0x6d>
c00137ee:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c00137f8:	eb 1e                	jmp    c0013818 <zStrtok(char*, char const*)+0x6d>
c00137fa:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00137fd:	39 ce                	cmp    esi,ecx
c00137ff:	75 0a                	jne    c001380b <zStrtok(char*, char const*)+0x60>
c0013801:	40                   	inc    eax
c0013802:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c0013807:	89 d8                	mov    eax,ebx
c0013809:	eb 0d                	jmp    c0013818 <zStrtok(char*, char const*)+0x6d>
c001380b:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c001380f:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013812:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c0013818:	5b                   	pop    ebx
c0013819:	5e                   	pop    esi
c001381a:	5f                   	pop    edi
c001381b:	5d                   	pop    ebp
c001381c:	c3                   	ret    

c001381d <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c001381d:	57                   	push   edi
c001381e:	56                   	push   esi
c001381f:	53                   	push   ebx
c0013820:	81 ec 08 01 00 00    	sub    esp,0x108
c0013826:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c001382d:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013834:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013838:	53                   	push   ebx
c0013839:	e8 02 ce fe ff       	call   c0000640 <strcpy>
c001383e:	59                   	pop    ecx
c001383f:	5e                   	pop    esi
c0013840:	68 a3 28 02 c0       	push   0xc00228a3
c0013845:	53                   	push   ebx
c0013846:	bb 01 00 00 00       	mov    ebx,0x1
c001384b:	e8 5b ff ff ff       	call   c00137ab <zStrtok(char*, char const*)>
c0013850:	83 c4 10             	add    esp,0x10
c0013853:	85 c0                	test   eax,eax
c0013855:	74 3b                	je     c0013892 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013857:	52                   	push   edx
c0013858:	50                   	push   eax
c0013859:	6a 01                	push   0x1
c001385b:	57                   	push   edi
c001385c:	e8 b9 fd ff ff       	call   c001361a <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013861:	59                   	pop    ecx
c0013862:	89 c3                	mov    ebx,eax
c0013864:	5e                   	pop    esi
c0013865:	68 a3 28 02 c0       	push   0xc00228a3
c001386a:	6a 00                	push   0x0
c001386c:	e8 3a ff ff ff       	call   c00137ab <zStrtok(char*, char const*)>
c0013871:	83 c4 10             	add    esp,0x10
c0013874:	89 c6                	mov    esi,eax
c0013876:	85 c0                	test   eax,eax
c0013878:	74 18                	je     c0013892 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001387a:	52                   	push   edx
c001387b:	52                   	push   edx
c001387c:	53                   	push   ebx
c001387d:	57                   	push   edi
c001387e:	e8 81 f5 ff ff       	call   c0012e04 <CmEnterDirectory(Reghive_Tag*, int)>
c0013883:	83 c4 10             	add    esp,0x10
c0013886:	89 c3                	mov    ebx,eax
c0013888:	83 f8 ff             	cmp    eax,0xffffffff
c001388b:	74 05                	je     c0013892 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001388d:	50                   	push   eax
c001388e:	56                   	push   esi
c001388f:	53                   	push   ebx
c0013890:	eb c9                	jmp    c001385b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013892:	81 c4 00 01 00 00    	add    esp,0x100
c0013898:	89 d8                	mov    eax,ebx
c001389a:	5b                   	pop    ebx
c001389b:	5e                   	pop    esi
c001389c:	5f                   	pop    edi
c001389d:	c3                   	ret    

c001389e <CmDisplayTree(Reghive_Tag*, int, int)>:
c001389e:	55                   	push   ebp
c001389f:	57                   	push   edi
c00138a0:	56                   	push   esi
c00138a1:	53                   	push   ebx
c00138a2:	83 ec 5c             	sub    esp,0x5c
c00138a5:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00138a9:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00138ad:	85 db                	test   ebx,ebx
c00138af:	0f 8e 84 00 00 00    	jle    c0013939 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00138b5:	31 ed                	xor    ebp,ebp
c00138b7:	57                   	push   edi
c00138b8:	6a 32                	push   0x32
c00138ba:	6a 00                	push   0x0
c00138bc:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00138c0:	57                   	push   edi
c00138c1:	e8 2a cc fe ff       	call   c00004f0 <memset>
c00138c6:	83 c4 0c             	add    esp,0xc
c00138c9:	57                   	push   edi
c00138ca:	53                   	push   ebx
c00138cb:	56                   	push   esi
c00138cc:	e8 30 fb ff ff       	call   c0013401 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00138d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00138d5:	83 c4 10             	add    esp,0x10
c00138d8:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00138dc:	7d 13                	jge    c00138f1 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00138de:	83 ec 0c             	sub    esp,0xc
c00138e1:	45                   	inc    ebp
c00138e2:	68 47 2c 02 c0       	push   0xc0022c47
c00138e7:	e8 59 70 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00138ec:	83 c4 10             	add    esp,0x10
c00138ef:	eb e7                	jmp    c00138d8 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00138f1:	51                   	push   ecx
c00138f2:	57                   	push   edi
c00138f3:	53                   	push   ebx
c00138f4:	68 45 25 02 c0       	push   0xc0022545
c00138f9:	e8 47 70 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00138fe:	83 c4 10             	add    esp,0x10
c0013901:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0013906:	75 1e                	jne    c0013926 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013908:	52                   	push   edx
c0013909:	52                   	push   edx
c001390a:	53                   	push   ebx
c001390b:	56                   	push   esi
c001390c:	e8 f3 f4 ff ff       	call   c0012e04 <CmEnterDirectory(Reghive_Tag*, int)>
c0013911:	83 c4 0c             	add    esp,0xc
c0013914:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013918:	8d 51 04             	lea    edx,[ecx+0x4]
c001391b:	52                   	push   edx
c001391c:	50                   	push   eax
c001391d:	56                   	push   esi
c001391e:	e8 7b ff ff ff       	call   c001389e <CmDisplayTree(Reghive_Tag*, int, int)>
c0013923:	83 c4 10             	add    esp,0x10
c0013926:	50                   	push   eax
c0013927:	50                   	push   eax
c0013928:	53                   	push   ebx
c0013929:	56                   	push   esi
c001392a:	e8 14 f5 ff ff       	call   c0012e43 <CmGetNext(Reghive_Tag*, int)>
c001392f:	83 c4 10             	add    esp,0x10
c0013932:	89 c3                	mov    ebx,eax
c0013934:	e9 74 ff ff ff       	jmp    c00138ad <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013939:	83 c4 5c             	add    esp,0x5c
c001393c:	5b                   	pop    ebx
c001393d:	5e                   	pop    esi
c001393e:	5f                   	pop    edi
c001393f:	5d                   	pop    ebp
c0013940:	c3                   	ret    

c0013941 <CmSplitFinalSlashInPlace(char*)>:
c0013941:	53                   	push   ebx
c0013942:	83 ec 14             	sub    esp,0x14
c0013945:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013949:	53                   	push   ebx
c001394a:	e8 21 cc fe ff       	call   c0000570 <strlen>
c001394f:	83 c4 10             	add    esp,0x10
c0013952:	48                   	dec    eax
c0013953:	85 c0                	test   eax,eax
c0013955:	74 15                	je     c001396c <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013957:	8d 14 03             	lea    edx,[ebx+eax*1]
c001395a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001395e:	75 09                	jne    c0013969 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013960:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013963:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013967:	eb 05                	jmp    c001396e <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013969:	48                   	dec    eax
c001396a:	eb e7                	jmp    c0013953 <CmSplitFinalSlashInPlace(char*)+0x12>
c001396c:	31 c0                	xor    eax,eax
c001396e:	83 c4 08             	add    esp,0x8
c0013971:	5b                   	pop    ebx
c0013972:	c3                   	ret    

c0013973 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013973:	55                   	push   ebp
c0013974:	57                   	push   edi
c0013975:	56                   	push   esi
c0013976:	53                   	push   ebx
c0013977:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001397d:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013984:	8a 13                	mov    dl,BYTE PTR [ebx]
c0013986:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013989:	80 fa 40             	cmp    dl,0x40
c001398c:	75 1c                	jne    c00139aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c001398e:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013991:	85 c9                	test   ecx,ecx
c0013993:	0f 84 09 01 00 00    	je     c0013aa2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013999:	8d 43 01             	lea    eax,[ebx+0x1]
c001399c:	83 f9 3a             	cmp    ecx,0x3a
c001399f:	74 04                	je     c00139a5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c00139a1:	89 c3                	mov    ebx,eax
c00139a3:	eb e9                	jmp    c001398e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00139a5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00139a8:	89 c3                	mov    ebx,eax
c00139aa:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00139ae:	50                   	push   eax
c00139af:	6a 40                	push   0x40
c00139b1:	6a 00                	push   0x0
c00139b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00139b7:	50                   	push   eax
c00139b8:	e8 33 cb fe ff       	call   c00004f0 <memset>
c00139bd:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00139c4:	31 c0                	xor    eax,eax
c00139c6:	83 c4 10             	add    esp,0x10
c00139c9:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c00139ce:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00139d1:	89 d1                	mov    ecx,edx
c00139d3:	85 d2                	test   edx,edx
c00139d5:	0f 84 c7 00 00 00    	je     c0013aa2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00139db:	3d c7 00 00 00       	cmp    eax,0xc7
c00139e0:	0f 8f bc 00 00 00    	jg     c0013aa2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00139e6:	83 fa 0a             	cmp    edx,0xa
c00139e9:	0f 85 a4 00 00 00    	jne    c0013a93 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c00139ef:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00139f4:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00139f9:	89 c8                	mov    eax,ecx
c00139fb:	a8 df                	test   al,0xdf
c00139fd:	0f 94 c2             	sete   dl
c0013a00:	83 f9 23             	cmp    ecx,0x23
c0013a03:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013a08:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013a0c:	80 e2 01             	and    dl,0x1
c0013a0f:	75 4a                	jne    c0013a5b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a11:	83 e8 09             	sub    eax,0x9
c0013a14:	3c 01                	cmp    al,0x1
c0013a16:	76 43                	jbe    c0013a5b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a18:	83 f9 5b             	cmp    ecx,0x5b
c0013a1b:	75 42                	jne    c0013a5f <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013a1d:	83 fe 40             	cmp    esi,0x40
c0013a20:	75 39                	jne    c0013a5b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a22:	83 ec 0c             	sub    esp,0xc
c0013a25:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013a29:	52                   	push   edx
c0013a2a:	e8 41 cb fe ff       	call   c0000570 <strlen>
c0013a2f:	83 c4 10             	add    esp,0x10
c0013a32:	83 f8 3f             	cmp    eax,0x3f
c0013a35:	77 6b                	ja     c0013aa2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a37:	50                   	push   eax
c0013a38:	50                   	push   eax
c0013a39:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013a3d:	52                   	push   edx
c0013a3e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013a42:	52                   	push   edx
c0013a43:	e8 f8 cb fe ff       	call   c0000640 <strcpy>
c0013a48:	58                   	pop    eax
c0013a49:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013a4d:	52                   	push   edx
c0013a4e:	e8 1d cb fe ff       	call   c0000570 <strlen>
c0013a53:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013a58:	83 c4 10             	add    esp,0x10
c0013a5b:	31 d2                	xor    edx,edx
c0013a5d:	eb 3b                	jmp    c0013a9a <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013a5f:	83 fe 40             	cmp    esi,0x40
c0013a62:	74 06                	je     c0013a6a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013a64:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013a68:	eb 20                	jmp    c0013a8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013a6a:	50                   	push   eax
c0013a6b:	50                   	push   eax
c0013a6c:	55                   	push   ebp
c0013a6d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013a71:	50                   	push   eax
c0013a72:	e8 d9 cc fe ff       	call   c0000750 <strcmp>
c0013a77:	83 c4 10             	add    esp,0x10
c0013a7a:	85 c0                	test   eax,eax
c0013a7c:	75 dd                	jne    c0013a5b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a7e:	eb e4                	jmp    c0013a64 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013a80:	8d 50 01             	lea    edx,[eax+0x1]
c0013a83:	83 f9 3d             	cmp    ecx,0x3d
c0013a86:	74 1e                	je     c0013aa6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013a88:	89 d0                	mov    eax,edx
c0013a8a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013a8d:	85 c9                	test   ecx,ecx
c0013a8f:	75 ef                	jne    c0013a80 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013a91:	eb 0f                	jmp    c0013aa2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a93:	8d 50 01             	lea    edx,[eax+0x1]
c0013a96:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013a9a:	47                   	inc    edi
c0013a9b:	89 d0                	mov    eax,edx
c0013a9d:	e9 2c ff ff ff       	jmp    c00139ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013aa2:	31 c0                	xor    eax,eax
c0013aa4:	eb 33                	jmp    c0013ad9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013aa6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013aaa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013aad:	50                   	push   eax
c0013aae:	50                   	push   eax
c0013aaf:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013ab3:	50                   	push   eax
c0013ab4:	53                   	push   ebx
c0013ab5:	e8 96 cc fe ff       	call   c0000750 <strcmp>
c0013aba:	83 c4 10             	add    esp,0x10
c0013abd:	85 c0                	test   eax,eax
c0013abf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ac3:	75 96                	jne    c0013a5b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013ac5:	51                   	push   ecx
c0013ac6:	51                   	push   ecx
c0013ac7:	52                   	push   edx
c0013ac8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013acf:	e8 6c cb fe ff       	call   c0000640 <strcpy>
c0013ad4:	83 c4 10             	add    esp,0x10
c0013ad7:	b0 01                	mov    al,0x1
c0013ad9:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013adf:	5b                   	pop    ebx
c0013ae0:	5e                   	pop    esi
c0013ae1:	5f                   	pop    edi
c0013ae2:	5d                   	pop    ebp
c0013ae3:	c3                   	ret    

c0013ae4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013ae4:	57                   	push   edi
c0013ae5:	56                   	push   esi
c0013ae6:	53                   	push   ebx
c0013ae7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013aed:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013af4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013afb:	53                   	push   ebx
c0013afc:	e8 6f ca fe ff       	call   c0000570 <strlen>
c0013b01:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b04:	89 c7                	mov    edi,eax
c0013b06:	e8 65 ca fe ff       	call   c0000570 <strlen>
c0013b0b:	83 c4 10             	add    esp,0x10
c0013b0e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013b12:	3d ff 00 00 00       	cmp    eax,0xff
c0013b17:	0f 87 d3 00 00 00    	ja     c0013bf0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b1d:	57                   	push   edi
c0013b1e:	57                   	push   edi
c0013b1f:	56                   	push   esi
c0013b20:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013b24:	56                   	push   esi
c0013b25:	e8 16 cb fe ff       	call   c0000640 <strcpy>
c0013b2a:	58                   	pop    eax
c0013b2b:	5a                   	pop    edx
c0013b2c:	68 a3 28 02 c0       	push   0xc00228a3
c0013b31:	56                   	push   esi
c0013b32:	e8 09 cd fe ff       	call   c0000840 <strcat>
c0013b37:	59                   	pop    ecx
c0013b38:	5f                   	pop    edi
c0013b39:	53                   	push   ebx
c0013b3a:	56                   	push   esi
c0013b3b:	e8 00 cd fe ff       	call   c0000840 <strcat>
c0013b40:	58                   	pop    eax
c0013b41:	5a                   	pop    edx
c0013b42:	68 4f 25 02 c0       	push   0xc002254f
c0013b47:	56                   	push   esi
c0013b48:	e8 f3 cc fe ff       	call   c0000840 <strcat>
c0013b4d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013b54:	e8 5d 3f ff ff       	call   c0007ab6 <malloc>
c0013b59:	83 c4 0c             	add    esp,0xc
c0013b5c:	89 c3                	mov    ebx,eax
c0013b5e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013b64:	56                   	push   esi
c0013b65:	50                   	push   eax
c0013b66:	e8 ab 7f ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c0013b6b:	83 c4 10             	add    esp,0x10
c0013b6e:	85 db                	test   ebx,ebx
c0013b70:	74 7e                	je     c0013bf0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b72:	51                   	push   ecx
c0013b73:	51                   	push   ecx
c0013b74:	6a 01                	push   0x1
c0013b76:	53                   	push   ebx
c0013b77:	e8 b8 7f ff ff       	call   c000bb34 <File::open(FileOpenMode)>
c0013b7c:	83 c4 10             	add    esp,0x10
c0013b7f:	85 c0                	test   eax,eax
c0013b81:	74 08                	je     c0013b8b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013b83:	83 ec 0c             	sub    esp,0xc
c0013b86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b88:	53                   	push   ebx
c0013b89:	eb 5f                	jmp    c0013bea <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013b8b:	52                   	push   edx
c0013b8c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013b90:	50                   	push   eax
c0013b91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013b95:	50                   	push   eax
c0013b96:	53                   	push   ebx
c0013b97:	e8 9a 82 ff ff       	call   c000be36 <File::stat(unsigned long long*, bool*)>
c0013b9c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013ba0:	83 c4 10             	add    esp,0x10
c0013ba3:	89 c1                	mov    ecx,eax
c0013ba5:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013ba9:	74 31                	je     c0013bdc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013bab:	83 ec 0c             	sub    esp,0xc
c0013bae:	50                   	push   eax
c0013baf:	e8 02 3f ff ff       	call   c0007ab6 <malloc>
c0013bb4:	89 c6                	mov    esi,eax
c0013bb6:	58                   	pop    eax
c0013bb7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bb9:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013bbd:	52                   	push   edx
c0013bbe:	56                   	push   esi
c0013bbf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013bc3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013bc7:	53                   	push   ebx
c0013bc8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bcb:	83 c4 20             	add    esp,0x20
c0013bce:	85 c0                	test   eax,eax
c0013bd0:	75 0a                	jne    c0013bdc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013bd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bd6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013bda:	74 18                	je     c0013bf4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013bdc:	83 ec 0c             	sub    esp,0xc
c0013bdf:	53                   	push   ebx
c0013be0:	e8 ad 7f ff ff       	call   c000bb92 <File::close()>
c0013be5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013be7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013bed:	83 c4 10             	add    esp,0x10
c0013bf0:	31 c0                	xor    eax,eax
c0013bf2:	eb 3b                	jmp    c0013c2f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013bf4:	83 ec 0c             	sub    esp,0xc
c0013bf7:	53                   	push   ebx
c0013bf8:	e8 95 7f ff ff       	call   c000bb92 <File::close()>
c0013bfd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c05:	83 c4 0c             	add    esp,0xc
c0013c08:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c0f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c16:	56                   	push   esi
c0013c17:	e8 57 fd ff ff       	call   c0013973 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013c1c:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c1f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013c23:	e8 9e 3e ff ff       	call   c0007ac6 <free>
c0013c28:	83 c4 10             	add    esp,0x10
c0013c2b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013c2f:	81 c4 20 01 00 00    	add    esp,0x120
c0013c35:	5b                   	pop    ebx
c0013c36:	5e                   	pop    esi
c0013c37:	5f                   	pop    edi
c0013c38:	c3                   	ret    

c0013c39 <Reg::getLine(char*, char*, char*)>:
c0013c39:	57                   	push   edi
c0013c3a:	56                   	push   esi
c0013c3b:	53                   	push   ebx
c0013c3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c40:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c44:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013c48:	57                   	push   edi
c0013c49:	56                   	push   esi
c0013c4a:	53                   	push   ebx
c0013c4b:	68 54 25 02 c0       	push   0xc0022554
c0013c50:	e8 8f fe ff ff       	call   c0013ae4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c55:	83 c4 10             	add    esp,0x10
c0013c58:	84 c0                	test   al,al
c0013c5a:	75 10                	jne    c0013c6c <Reg::getLine(char*, char*, char*)+0x33>
c0013c5c:	57                   	push   edi
c0013c5d:	56                   	push   esi
c0013c5e:	53                   	push   ebx
c0013c5f:	68 79 25 02 c0       	push   0xc0022579
c0013c64:	e8 7b fe ff ff       	call   c0013ae4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c69:	83 c4 10             	add    esp,0x10
c0013c6c:	5b                   	pop    ebx
c0013c6d:	5e                   	pop    esi
c0013c6e:	5f                   	pop    edi
c0013c6f:	c3                   	ret    

c0013c70 <Reg::readInt(char*, char*, int*)>:
c0013c70:	55                   	push   ebp
c0013c71:	57                   	push   edi
c0013c72:	56                   	push   esi
c0013c73:	53                   	push   ebx
c0013c74:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013c7a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013c7e:	55                   	push   ebp
c0013c7f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013c86:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013c8d:	e8 a7 ff ff ff       	call   c0013c39 <Reg::getLine(char*, char*, char*)>
c0013c92:	83 c4 10             	add    esp,0x10
c0013c95:	84 c0                	test   al,al
c0013c97:	0f 84 b6 00 00 00    	je     c0013d53 <Reg::readInt(char*, char*, int*)+0xe3>
c0013c9d:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013ca2:	83 fa 2b             	cmp    edx,0x2b
c0013ca5:	74 0c                	je     c0013cb3 <Reg::readInt(char*, char*, int*)+0x43>
c0013ca7:	83 fa 2d             	cmp    edx,0x2d
c0013caa:	75 0e                	jne    c0013cba <Reg::readInt(char*, char*, int*)+0x4a>
c0013cac:	ba 01 00 00 00       	mov    edx,0x1
c0013cb1:	eb 0b                	jmp    c0013cbe <Reg::readInt(char*, char*, int*)+0x4e>
c0013cb3:	ba 01 00 00 00       	mov    edx,0x1
c0013cb8:	eb 02                	jmp    c0013cbc <Reg::readInt(char*, char*, int*)+0x4c>
c0013cba:	31 d2                	xor    edx,edx
c0013cbc:	31 c0                	xor    eax,eax
c0013cbe:	be 0a 00 00 00       	mov    esi,0xa
c0013cc3:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013cc8:	75 21                	jne    c0013ceb <Reg::readInt(char*, char*, int*)+0x7b>
c0013cca:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013ccf:	83 f9 78             	cmp    ecx,0x78
c0013cd2:	75 0a                	jne    c0013cde <Reg::readInt(char*, char*, int*)+0x6e>
c0013cd4:	83 c2 02             	add    edx,0x2
c0013cd7:	be 10 00 00 00       	mov    esi,0x10
c0013cdc:	eb 0d                	jmp    c0013ceb <Reg::readInt(char*, char*, int*)+0x7b>
c0013cde:	83 f9 62             	cmp    ecx,0x62
c0013ce1:	75 08                	jne    c0013ceb <Reg::readInt(char*, char*, int*)+0x7b>
c0013ce3:	83 c2 02             	add    edx,0x2
c0013ce6:	be 02 00 00 00       	mov    esi,0x2
c0013ceb:	01 d5                	add    ebp,edx
c0013ced:	31 d2                	xor    edx,edx
c0013cef:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013cf3:	83 f9 0d             	cmp    ecx,0xd
c0013cf6:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013cfa:	0f 94 c3             	sete   bl
c0013cfd:	85 c9                	test   ecx,ecx
c0013cff:	89 df                	mov    edi,ebx
c0013d01:	0f 94 c3             	sete   bl
c0013d04:	09 df                	or     edi,ebx
c0013d06:	89 fb                	mov    ebx,edi
c0013d08:	83 e7 01             	and    edi,0x1
c0013d0b:	75 35                	jne    c0013d42 <Reg::readInt(char*, char*, int*)+0xd2>
c0013d0d:	0f af d6             	imul   edx,esi
c0013d10:	83 fe 10             	cmp    esi,0x10
c0013d13:	75 26                	jne    c0013d3b <Reg::readInt(char*, char*, int*)+0xcb>
c0013d15:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d19:	83 ef 41             	sub    edi,0x41
c0013d1c:	89 fb                	mov    ebx,edi
c0013d1e:	80 fb 05             	cmp    bl,0x5
c0013d21:	77 06                	ja     c0013d29 <Reg::readInt(char*, char*, int*)+0xb9>
c0013d23:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013d27:	eb 16                	jmp    c0013d3f <Reg::readInt(char*, char*, int*)+0xcf>
c0013d29:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013d2d:	83 eb 61             	sub    ebx,0x61
c0013d30:	80 fb 05             	cmp    bl,0x5
c0013d33:	77 06                	ja     c0013d3b <Reg::readInt(char*, char*, int*)+0xcb>
c0013d35:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013d39:	eb 04                	jmp    c0013d3f <Reg::readInt(char*, char*, int*)+0xcf>
c0013d3b:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013d3f:	45                   	inc    ebp
c0013d40:	eb ad                	jmp    c0013cef <Reg::readInt(char*, char*, int*)+0x7f>
c0013d42:	84 c0                	test   al,al
c0013d44:	74 02                	je     c0013d48 <Reg::readInt(char*, char*, int*)+0xd8>
c0013d46:	f7 da                	neg    edx
c0013d48:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013d4f:	89 10                	mov    DWORD PTR [eax],edx
c0013d51:	88 d8                	mov    al,bl
c0013d53:	81 c4 ec 00 00 00    	add    esp,0xec
c0013d59:	5b                   	pop    ebx
c0013d5a:	5e                   	pop    esi
c0013d5b:	5f                   	pop    edi
c0013d5c:	5d                   	pop    ebp
c0013d5d:	c3                   	ret    

c0013d5e <Reg::readString(char*, char*, char*, int)>:
c0013d5e:	57                   	push   edi
c0013d5f:	56                   	push   esi
c0013d60:	53                   	push   ebx
c0013d61:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013d67:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013d6e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013d72:	57                   	push   edi
c0013d73:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013d7a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013d81:	e8 b3 fe ff ff       	call   c0013c39 <Reg::getLine(char*, char*, char*)>
c0013d86:	83 c4 10             	add    esp,0x10
c0013d89:	89 c6                	mov    esi,eax
c0013d8b:	84 c0                	test   al,al
c0013d8d:	74 44                	je     c0013dd3 <Reg::readString(char*, char*, char*, int)+0x75>
c0013d8f:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013d96:	31 c0                	xor    eax,eax
c0013d98:	4a                   	dec    edx
c0013d99:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013d9c:	84 c9                	test   cl,cl
c0013d9e:	74 0f                	je     c0013daf <Reg::readString(char*, char*, char*, int)+0x51>
c0013da0:	39 c2                	cmp    edx,eax
c0013da2:	7e 0b                	jle    c0013daf <Reg::readString(char*, char*, char*, int)+0x51>
c0013da4:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013da7:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013dac:	40                   	inc    eax
c0013dad:	eb ea                	jmp    c0013d99 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013daf:	83 ec 0c             	sub    esp,0xc
c0013db2:	53                   	push   ebx
c0013db3:	e8 b8 c7 fe ff       	call   c0000570 <strlen>
c0013db8:	83 c4 10             	add    esp,0x10
c0013dbb:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013dc0:	75 11                	jne    c0013dd3 <Reg::readString(char*, char*, char*, int)+0x75>
c0013dc2:	83 ec 0c             	sub    esp,0xc
c0013dc5:	53                   	push   ebx
c0013dc6:	e8 a5 c7 fe ff       	call   c0000570 <strlen>
c0013dcb:	83 c4 10             	add    esp,0x10
c0013dce:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013dd3:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013dd9:	89 f0                	mov    eax,esi
c0013ddb:	5b                   	pop    ebx
c0013ddc:	5e                   	pop    esi
c0013ddd:	5f                   	pop    edi
c0013dde:	c3                   	ret    

c0013ddf <Reg::readBool(char*, char*, bool*)>:
c0013ddf:	83 ec 20             	sub    esp,0x20
c0013de2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013de6:	50                   	push   eax
c0013de7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013deb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013def:	e8 7c fe ff ff       	call   c0013c70 <Reg::readInt(char*, char*, int*)>
c0013df4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013df9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013dfd:	0f 95 02             	setne  BYTE PTR [edx]
c0013e00:	83 c4 2c             	add    esp,0x2c
c0013e03:	c3                   	ret    

c0013e04 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013e04:	53                   	push   ebx
c0013e05:	83 ec 1c             	sub    esp,0x1c
c0013e08:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013e0c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013e10:	50                   	push   eax
c0013e11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e19:	e8 c1 ff ff ff       	call   c0013ddf <Reg::readBool(char*, char*, bool*)>
c0013e1e:	83 c4 10             	add    esp,0x10
c0013e21:	84 c0                	test   al,al
c0013e23:	74 04                	je     c0013e29 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013e25:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013e29:	88 d8                	mov    al,bl
c0013e2b:	83 c4 18             	add    esp,0x18
c0013e2e:	5b                   	pop    ebx
c0013e2f:	c3                   	ret    

c0013e30 <Reg::readIntWithDefault(char*, char*, int)>:
c0013e30:	53                   	push   ebx
c0013e31:	83 ec 1c             	sub    esp,0x1c
c0013e34:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013e38:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e3c:	50                   	push   eax
c0013e3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e45:	e8 26 fe ff ff       	call   c0013c70 <Reg::readInt(char*, char*, int*)>
c0013e4a:	83 c4 10             	add    esp,0x10
c0013e4d:	84 c0                	test   al,al
c0013e4f:	74 04                	je     c0013e55 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013e51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e55:	89 d8                	mov    eax,ebx
c0013e57:	83 c4 18             	add    esp,0x18
c0013e5a:	5b                   	pop    ebx
c0013e5b:	c3                   	ret    

c0013e5c <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013e5c:	57                   	push   edi
c0013e5d:	56                   	push   esi
c0013e5e:	56                   	push   esi
c0013e5f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e63:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e67:	56                   	push   esi
c0013e68:	57                   	push   edi
c0013e69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e71:	e8 e8 fe ff ff       	call   c0013d5e <Reg::readString(char*, char*, char*, int)>
c0013e76:	83 c4 10             	add    esp,0x10
c0013e79:	84 c0                	test   al,al
c0013e7b:	75 1a                	jne    c0013e97 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013e7d:	51                   	push   ecx
c0013e7e:	56                   	push   esi
c0013e7f:	6a 00                	push   0x0
c0013e81:	57                   	push   edi
c0013e82:	e8 69 c6 fe ff       	call   c00004f0 <memset>
c0013e87:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013e8a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013e8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e90:	83 c4 10             	add    esp,0x10
c0013e93:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013e97:	89 f8                	mov    eax,edi
c0013e99:	5a                   	pop    edx
c0013e9a:	5e                   	pop    esi
c0013e9b:	5f                   	pop    edi
c0013e9c:	c3                   	ret    

c0013e9d <SysEject(regs*)>:
c0013e9d:	83 ec 0c             	sub    esp,0xc
c0013ea0:	83 ca ff             	or     edx,0xffffffff
c0013ea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea7:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013eaa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013eaf:	83 e9 41             	sub    ecx,0x41
c0013eb2:	83 f9 19             	cmp    ecx,0x19
c0013eb5:	77 18                	ja     c0013ecf <SysEject(regs*)+0x32>
c0013eb7:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013ebe:	85 c9                	test   ecx,ecx
c0013ec0:	74 0d                	je     c0013ecf <SysEject(regs*)+0x32>
c0013ec2:	83 ec 0c             	sub    esp,0xc
c0013ec5:	51                   	push   ecx
c0013ec6:	e8 3b 9e ff ff       	call   c000dd06 <LogicalDisk::eject()>
c0013ecb:	83 c4 10             	add    esp,0x10
c0013ece:	99                   	cdq    
c0013ecf:	83 c4 0c             	add    esp,0xc
c0013ed2:	c3                   	ret    

c0013ed3 <SysExit(regs*)>:
c0013ed3:	83 ec 18             	sub    esp,0x18
c0013ed6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013eda:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013edd:	e8 46 2b 00 00       	call   c0016a28 <terminateTask(int)>
c0013ee2:	83 c8 ff             	or     eax,0xffffffff
c0013ee5:	83 c4 1c             	add    esp,0x1c
c0013ee8:	89 c2                	mov    edx,eax
c0013eea:	c3                   	ret    

c0013eeb <SysGetCwd(regs*)>:
c0013eeb:	83 ec 10             	sub    esp,0x10
c0013eee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ef2:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013ef5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ef8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013efd:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f00:	e8 c5 78 ff ff       	call   c000b7ca <Fs::getcwd(Process*, char*, int)>
c0013f05:	83 c4 1c             	add    esp,0x1c
c0013f08:	99                   	cdq    
c0013f09:	c3                   	ret    

c0013f0a <SysGetPID(regs*)>:
c0013f0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f0f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f12:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f14:	99                   	cdq    
c0013f15:	c3                   	ret    

c0013f16 <SysGetRAMData(regs*)>:
c0013f16:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013f1c:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013f26:	99                   	cdq    
c0013f27:	f7 f9                	idiv   ecx
c0013f29:	c1 e0 18             	shl    eax,0x18
c0013f2c:	09 c8                	or     eax,ecx
c0013f2e:	99                   	cdq    
c0013f2f:	c3                   	ret    

c0013f30 <SysGetVGAPtr(regs*)>:
c0013f30:	55                   	push   ebp
c0013f31:	57                   	push   edi
c0013f32:	56                   	push   esi
c0013f33:	53                   	push   ebx
c0013f34:	83 ec 18             	sub    esp,0x18
c0013f37:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f3b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f3e:	e8 b1 25 00 00       	call   c00164f4 <Thr::processFromPID(int)>
c0013f43:	83 c4 10             	add    esp,0x10
c0013f46:	89 c1                	mov    ecx,eax
c0013f48:	b8 01 00 00 00       	mov    eax,0x1
c0013f4d:	85 c9                	test   ecx,ecx
c0013f4f:	74 57                	je     c0013fa8 <SysGetVGAPtr(regs*)+0x78>
c0013f51:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013f57:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013f5b:	74 0c                	je     c0013f69 <SysGetVGAPtr(regs*)+0x39>
c0013f5d:	83 ec 0c             	sub    esp,0xc
c0013f60:	55                   	push   ebp
c0013f61:	e8 f3 47 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013f66:	83 c4 10             	add    esp,0x10
c0013f69:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013f6c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013f6f:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013f74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f76:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013f79:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f7c:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013f82:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f85:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013f88:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013f8e:	50                   	push   eax
c0013f8f:	50                   	push   eax
c0013f90:	68 94 25 02 c0       	push   0xc0022594
c0013f95:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f98:	05 a8 0f 00 00       	add    eax,0xfa8
c0013f9d:	50                   	push   eax
c0013f9e:	e8 9d c6 fe ff       	call   c0000640 <strcpy>
c0013fa3:	83 c4 10             	add    esp,0x10
c0013fa6:	31 c0                	xor    eax,eax
c0013fa8:	83 c4 0c             	add    esp,0xc
c0013fab:	31 d2                	xor    edx,edx
c0013fad:	5b                   	pop    ebx
c0013fae:	5e                   	pop    esi
c0013faf:	5f                   	pop    edi
c0013fb0:	5d                   	pop    ebp
c0013fb1:	c3                   	ret    
c0013fb2:	66 90                	xchg   ax,ax

c0013fb4 <SysKill(regs*)>:
c0013fb4:	53                   	push   ebx
c0013fb5:	83 ec 08             	sub    esp,0x8
c0013fb8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fbc:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013fc0:	75 16                	jne    c0013fd8 <SysKill(regs*)+0x24>
c0013fc2:	83 ec 0c             	sub    esp,0xc
c0013fc5:	68 9e 25 02 c0       	push   0xc002259e
c0013fca:	e8 18 d6 ff ff       	call   c00115e7 <KePanic(char const*)>
c0013fcf:	83 c4 10             	add    esp,0x10
c0013fd2:	e9 89 00 00 00       	jmp    c0014060 <SysKill(regs*)+0xac>
c0013fd7:	90                   	nop
c0013fd8:	83 ec 0c             	sub    esp,0xc
c0013fdb:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013fe0:	e8 07 bd 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0013fe8:	83 c4 10             	add    esp,0x10
c0013feb:	85 c0                	test   eax,eax
c0013fed:	74 19                	je     c0014008 <SysKill(regs*)+0x54>
c0013fef:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013ff2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013ff5:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013ff7:	74 33                	je     c001402c <SysKill(regs*)+0x78>
c0013ff9:	52                   	push   edx
c0013ffa:	52                   	push   edx
c0013ffb:	50                   	push   eax
c0013ffc:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014001:	e8 06 c0 00 00       	call   c002000c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014006:	eb e0                	jmp    c0013fe8 <SysKill(regs*)+0x34>
c0014008:	83 ec 0c             	sub    esp,0xc
c001400b:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014010:	e8 d7 bc 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014015:	8d 76 00             	lea    esi,[esi+0x0]
c0014018:	83 c4 10             	add    esp,0x10
c001401b:	85 c0                	test   eax,eax
c001401d:	74 41                	je     c0014060 <SysKill(regs*)+0xac>
c001401f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014022:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014025:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014027:	75 27                	jne    c0014050 <SysKill(regs*)+0x9c>
c0014029:	8d 76 00             	lea    esi,[esi+0x0]
c001402c:	51                   	push   ecx
c001402d:	51                   	push   ecx
c001402e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014031:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014036:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014039:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001403f:	e8 46 da ff ff       	call   c0011a8a <KeRaiseSignal(SigHandlerBlock*, int)>
c0014044:	83 c4 10             	add    esp,0x10
c0014047:	31 c0                	xor    eax,eax
c0014049:	31 d2                	xor    edx,edx
c001404b:	eb 1b                	jmp    c0014068 <SysKill(regs*)+0xb4>
c001404d:	8d 76 00             	lea    esi,[esi+0x0]
c0014050:	52                   	push   edx
c0014051:	52                   	push   edx
c0014052:	50                   	push   eax
c0014053:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014058:	e8 af bf 00 00       	call   c002000c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001405d:	eb b9                	jmp    c0014018 <SysKill(regs*)+0x64>
c001405f:	90                   	nop
c0014060:	83 c8 ff             	or     eax,0xffffffff
c0014063:	89 c2                	mov    edx,eax
c0014065:	8d 76 00             	lea    esi,[esi+0x0]
c0014068:	83 c4 08             	add    esp,0x8
c001406b:	5b                   	pop    ebx
c001406c:	c3                   	ret    

c001406d <SysLoadDLL(regs*)>:
c001406d:	56                   	push   esi
c001406e:	53                   	push   ebx
c001406f:	31 d2                	xor    edx,edx
c0014071:	51                   	push   ecx
c0014072:	b8 01 00 00 00       	mov    eax,0x1
c0014077:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001407b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001407f:	0f 84 8c 00 00 00    	je     c0014111 <SysLoadDLL(regs*)+0xa4>
c0014085:	83 ec 0c             	sub    esp,0xc
c0014088:	68 14 01 00 00       	push   0x114
c001408d:	e8 24 3a ff ff       	call   c0007ab6 <malloc>
c0014092:	83 c4 0c             	add    esp,0xc
c0014095:	89 c3                	mov    ebx,eax
c0014097:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001409c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001409f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00140a2:	53                   	push   ebx
c00140a3:	e8 6e 7a ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c00140a8:	83 c4 10             	add    esp,0x10
c00140ab:	31 d2                	xor    edx,edx
c00140ad:	b8 02 00 00 00       	mov    eax,0x2
c00140b2:	85 db                	test   ebx,ebx
c00140b4:	74 5b                	je     c0014111 <SysLoadDLL(regs*)+0xa4>
c00140b6:	83 ec 0c             	sub    esp,0xc
c00140b9:	53                   	push   ebx
c00140ba:	e8 39 7d ff ff       	call   c000bdf8 <File::exists()>
c00140bf:	83 c4 10             	add    esp,0x10
c00140c2:	84 c0                	test   al,al
c00140c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140c6:	75 11                	jne    c00140d9 <SysLoadDLL(regs*)+0x6c>
c00140c8:	83 ec 0c             	sub    esp,0xc
c00140cb:	53                   	push   ebx
c00140cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140cf:	83 c4 10             	add    esp,0x10
c00140d2:	b8 03 00 00 00       	mov    eax,0x3
c00140d7:	eb 36                	jmp    c001410f <SysLoadDLL(regs*)+0xa2>
c00140d9:	83 ec 0c             	sub    esp,0xc
c00140dc:	53                   	push   ebx
c00140dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140e0:	58                   	pop    eax
c00140e1:	5a                   	pop    edx
c00140e2:	6a 00                	push   0x0
c00140e4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00140e7:	e8 3b 15 00 00       	call   c0015627 <Thr::loadDLL(char const*, bool)>
c00140ec:	83 c4 10             	add    esp,0x10
c00140ef:	89 c1                	mov    ecx,eax
c00140f1:	31 d2                	xor    edx,edx
c00140f3:	b8 04 00 00 00       	mov    eax,0x4
c00140f8:	85 c9                	test   ecx,ecx
c00140fa:	74 15                	je     c0014111 <SysLoadDLL(regs*)+0xa4>
c00140fc:	53                   	push   ebx
c00140fd:	53                   	push   ebx
c00140fe:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0014104:	51                   	push   ecx
c0014105:	e8 4e 17 00 00       	call   c0015858 <Thr::executeDLL(unsigned long, void*)>
c001410a:	83 c4 10             	add    esp,0x10
c001410d:	31 c0                	xor    eax,eax
c001410f:	31 d2                	xor    edx,edx
c0014111:	59                   	pop    ecx
c0014112:	5b                   	pop    ebx
c0014113:	5e                   	pop    esi
c0014114:	c3                   	ret    

c0014115 <SysRead(regs*)>:
c0014115:	57                   	push   edi
c0014116:	56                   	push   esi
c0014117:	53                   	push   ebx
c0014118:	83 ec 10             	sub    esp,0x10
c001411b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001411f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014122:	83 f8 02             	cmp    eax,0x2
c0014125:	77 10                	ja     c0014137 <SysRead(regs*)+0x22>
c0014127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001412c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001412f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014135:	eb 0e                	jmp    c0014145 <SysRead(regs*)+0x30>
c0014137:	83 ec 0c             	sub    esp,0xc
c001413a:	50                   	push   eax
c001413b:	e8 73 53 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014140:	83 c4 10             	add    esp,0x10
c0014143:	89 c1                	mov    ecx,eax
c0014145:	83 c8 ff             	or     eax,0xffffffff
c0014148:	85 c9                	test   ecx,ecx
c001414a:	89 c2                	mov    edx,eax
c001414c:	74 28                	je     c0014176 <SysRead(regs*)+0x61>
c001414e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014156:	31 ff                	xor    edi,edi
c0014158:	83 ec 0c             	sub    esp,0xc
c001415b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001415d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014161:	52                   	push   edx
c0014162:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014165:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014168:	57                   	push   edi
c0014169:	56                   	push   esi
c001416a:	51                   	push   ecx
c001416b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001416e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014172:	83 c4 20             	add    esp,0x20
c0014175:	99                   	cdq    
c0014176:	83 c4 10             	add    esp,0x10
c0014179:	5b                   	pop    ebx
c001417a:	5e                   	pop    esi
c001417b:	5f                   	pop    edi
c001417c:	c3                   	ret    

c001417d <SysRegisterSignal(regs*)>:
c001417d:	83 ec 18             	sub    esp,0x18
c0014180:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014184:	6a 00                	push   0x0
c0014186:	6a 00                	push   0x0
c0014188:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001418b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001418e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014193:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014196:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001419c:	e8 b3 d8 ff ff       	call   c0011a54 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00141a1:	83 c4 2c             	add    esp,0x2c
c00141a4:	99                   	cdq    
c00141a5:	c3                   	ret    

c00141a6 <SysRegistryGetTypeFromPath(regs*)>:
c00141a6:	57                   	push   edi
c00141a7:	56                   	push   esi
c00141a8:	53                   	push   ebx
c00141a9:	81 ec 38 01 00 00    	sub    esp,0x138
c00141af:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00141b6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141b9:	68 bf 25 02 c0       	push   0xc00225bf
c00141be:	e8 82 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00141c3:	5a                   	pop    edx
c00141c4:	59                   	pop    ecx
c00141c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141c8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141cb:	e8 4d f6 ff ff       	call   c001381d <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00141d0:	5f                   	pop    edi
c00141d1:	89 c6                	mov    esi,eax
c00141d3:	5a                   	pop    edx
c00141d4:	50                   	push   eax
c00141d5:	68 df 25 02 c0       	push   0xc00225df
c00141da:	e8 66 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00141df:	83 c4 10             	add    esp,0x10
c00141e2:	85 f6                	test   esi,esi
c00141e4:	74 28                	je     c001420e <SysRegistryGetTypeFromPath(regs*)+0x68>
c00141e6:	50                   	push   eax
c00141e7:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00141eb:	57                   	push   edi
c00141ec:	56                   	push   esi
c00141ed:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141f0:	e8 0c f2 ff ff       	call   c0013401 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00141f5:	83 c4 0c             	add    esp,0xc
c00141f8:	89 c3                	mov    ebx,eax
c00141fa:	57                   	push   edi
c00141fb:	50                   	push   eax
c00141fc:	68 e7 25 02 c0       	push   0xc00225e7
c0014201:	e8 3f 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014206:	89 d8                	mov    eax,ebx
c0014208:	83 c4 10             	add    esp,0x10
c001420b:	99                   	cdq    
c001420c:	eb 05                	jmp    c0014213 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c001420e:	83 c8 ff             	or     eax,0xffffffff
c0014211:	89 c2                	mov    edx,eax
c0014213:	81 c4 30 01 00 00    	add    esp,0x130
c0014219:	5b                   	pop    ebx
c001421a:	5e                   	pop    esi
c001421b:	5f                   	pop    edi
c001421c:	c3                   	ret    

c001421d <SysRegistryReadExtent(regs*)>:
c001421d:	83 ec 1c             	sub    esp,0x1c
c0014220:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014224:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014227:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001422a:	85 c0                	test   eax,eax
c001422c:	79 1f                	jns    c001424d <SysRegistryReadExtent(regs*)+0x30>
c001422e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014233:	52                   	push   edx
c0014234:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014238:	52                   	push   edx
c0014239:	50                   	push   eax
c001423a:	51                   	push   ecx
c001423b:	e8 b3 f0 ff ff       	call   c00132f3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014240:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014244:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014248:	83 c4 10             	add    esp,0x10
c001424b:	eb 14                	jmp    c0014261 <SysRegistryReadExtent(regs*)+0x44>
c001424d:	83 ec 04             	sub    esp,0x4
c0014250:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014253:	50                   	push   eax
c0014254:	51                   	push   ecx
c0014255:	e8 33 eb ff ff       	call   c0012d8d <CmGetString(Reghive_Tag*, int, char*)>
c001425a:	83 c4 10             	add    esp,0x10
c001425d:	31 c0                	xor    eax,eax
c001425f:	31 d2                	xor    edx,edx
c0014261:	83 c4 1c             	add    esp,0x1c
c0014264:	c3                   	ret    

c0014265 <SysRegistryPathToExtentLookup(regs*)>:
c0014265:	53                   	push   ebx
c0014266:	83 ec 10             	sub    esp,0x10
c0014269:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001426d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014270:	68 fd 25 02 c0       	push   0xc00225fd
c0014275:	e8 cb 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001427a:	58                   	pop    eax
c001427b:	5a                   	pop    edx
c001427c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001427f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014282:	e8 96 f5 ff ff       	call   c001381d <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014287:	83 c4 18             	add    esp,0x18
c001428a:	99                   	cdq    
c001428b:	5b                   	pop    ebx
c001428c:	c3                   	ret    

c001428d <SysRegistryEnterDirectory(regs*)>:
c001428d:	53                   	push   ebx
c001428e:	83 ec 10             	sub    esp,0x10
c0014291:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014295:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014298:	68 20 26 02 c0       	push   0xc0022620
c001429d:	e8 a3 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142a2:	58                   	pop    eax
c00142a3:	5a                   	pop    edx
c00142a4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142a7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142aa:	e8 55 eb ff ff       	call   c0012e04 <CmEnterDirectory(Reghive_Tag*, int)>
c00142af:	83 c4 18             	add    esp,0x18
c00142b2:	99                   	cdq    
c00142b3:	5b                   	pop    ebx
c00142b4:	c3                   	ret    

c00142b5 <SysRegistryGetNext(regs*)>:
c00142b5:	53                   	push   ebx
c00142b6:	83 ec 10             	sub    esp,0x10
c00142b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142bd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142c0:	68 3e 26 02 c0       	push   0xc002263e
c00142c5:	e8 7b 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142ca:	58                   	pop    eax
c00142cb:	5a                   	pop    edx
c00142cc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142cf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142d2:	e8 6c eb ff ff       	call   c0012e43 <CmGetNext(Reghive_Tag*, int)>
c00142d7:	83 c4 18             	add    esp,0x18
c00142da:	99                   	cdq    
c00142db:	5b                   	pop    ebx
c00142dc:	c3                   	ret    

c00142dd <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00142dd:	57                   	push   edi
c00142de:	56                   	push   esi
c00142df:	53                   	push   ebx
c00142e0:	81 ec 34 01 00 00    	sub    esp,0x134
c00142e6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00142ed:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00142f1:	57                   	push   edi
c00142f2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00142f5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00142f8:	e8 04 f1 ff ff       	call   c0013401 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00142fd:	89 c3                	mov    ebx,eax
c00142ff:	58                   	pop    eax
c0014300:	5a                   	pop    edx
c0014301:	57                   	push   edi
c0014302:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014305:	e8 36 c3 fe ff       	call   c0000640 <strcpy>
c001430a:	89 d8                	mov    eax,ebx
c001430c:	81 c4 40 01 00 00    	add    esp,0x140
c0014312:	99                   	cdq    
c0014313:	5b                   	pop    ebx
c0014314:	5e                   	pop    esi
c0014315:	5f                   	pop    edi
c0014316:	c3                   	ret    

c0014317 <SysRegistryOpen(regs*)>:
c0014317:	83 ec 18             	sub    esp,0x18
c001431a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001431e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014321:	e8 f7 e8 ff ff       	call   c0012c1d <CmOpen(char const*)>
c0014326:	83 c4 1c             	add    esp,0x1c
c0014329:	99                   	cdq    
c001432a:	c3                   	ret    

c001432b <SysRegistryClose(regs*)>:
c001432b:	83 ec 18             	sub    esp,0x18
c001432e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014332:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014335:	e8 01 ea ff ff       	call   c0012d3b <CmClose(Reghive_Tag*)>
c001433a:	31 c0                	xor    eax,eax
c001433c:	31 d2                	xor    edx,edx
c001433e:	83 c4 1c             	add    esp,0x1c
c0014341:	c3                   	ret    

c0014342 <SysSbrk(regs*)>:
c0014342:	56                   	push   esi
c0014343:	53                   	push   ebx
c0014344:	50                   	push   eax
c0014345:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001434a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001434e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014351:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014354:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001435a:	85 db                	test   ebx,ebx
c001435c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001435f:	74 02                	je     c0014363 <SysSbrk(regs*)+0x21>
c0014361:	79 06                	jns    c0014369 <SysSbrk(regs*)+0x27>
c0014363:	89 f0                	mov    eax,esi
c0014365:	31 d2                	xor    edx,edx
c0014367:	eb 2a                	jmp    c0014393 <SysSbrk(regs*)+0x51>
c0014369:	83 c8 ff             	or     eax,0xffffffff
c001436c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014372:	89 c2                	mov    edx,eax
c0014374:	77 1d                	ja     c0014393 <SysSbrk(regs*)+0x51>
c0014376:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001437c:	50                   	push   eax
c001437d:	c1 ea 0c             	shr    edx,0xc
c0014380:	68 07 0c 00 00       	push   0xc07
c0014385:	52                   	push   edx
c0014386:	51                   	push   ecx
c0014387:	e8 98 5a ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c001438c:	89 f0                	mov    eax,esi
c001438e:	31 d2                	xor    edx,edx
c0014390:	83 c4 10             	add    esp,0x10
c0014393:	59                   	pop    ecx
c0014394:	5b                   	pop    ebx
c0014395:	5e                   	pop    esi
c0014396:	c3                   	ret    

c0014397 <SysSetCwd(regs*)>:
c0014397:	83 ec 14             	sub    esp,0x14
c001439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001439e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143a6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00143a9:	e8 e9 7a ff ff       	call   c000be97 <Fs::setcwd(Process*, char*)>
c00143ae:	83 c4 1c             	add    esp,0x1c
c00143b1:	99                   	cdq    
c00143b2:	c3                   	ret    

c00143b3 <SysSetTime(regs*)>:
c00143b3:	55                   	push   ebp
c00143b4:	31 c9                	xor    ecx,ecx
c00143b6:	57                   	push   edi
c00143b7:	bd 0c 00 00 00       	mov    ebp,0xc
c00143bc:	56                   	push   esi
c00143bd:	53                   	push   ebx
c00143be:	31 db                	xor    ebx,ebx
c00143c0:	83 ec 10             	sub    esp,0x10
c00143c3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00143c7:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00143ca:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00143cd:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00143d0:	89 c2                	mov    edx,eax
c00143d2:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00143d8:	83 e2 1f             	and    edx,0x1f
c00143db:	c1 e7 10             	shl    edi,0x10
c00143de:	42                   	inc    edx
c00143df:	c1 e8 05             	shr    eax,0x5
c00143e2:	88 d1                	mov    cl,dl
c00143e4:	31 d2                	xor    edx,edx
c00143e6:	f7 f5                	div    ebp
c00143e8:	89 dd                	mov    ebp,ebx
c00143ea:	88 d5                	mov    ch,dl
c00143ec:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00143f2:	0f b7 c1             	movzx  eax,cx
c00143f5:	31 d2                	xor    edx,edx
c00143f7:	09 f8                	or     eax,edi
c00143f9:	bf 3c 00 00 00       	mov    edi,0x3c
c00143fe:	89 c1                	mov    ecx,eax
c0014400:	89 f0                	mov    eax,esi
c0014402:	f7 f7                	div    edi
c0014404:	c1 e2 10             	shl    edx,0x10
c0014407:	09 d5                	or     ebp,edx
c0014409:	31 d2                	xor    edx,edx
c001440b:	89 eb                	mov    ebx,ebp
c001440d:	f7 f7                	div    edi
c001440f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014414:	88 d7                	mov    bh,dl
c0014416:	89 f0                	mov    eax,esi
c0014418:	31 d2                	xor    edx,edx
c001441a:	f7 f7                	div    edi
c001441c:	bf 18 00 00 00       	mov    edi,0x18
c0014421:	31 d2                	xor    edx,edx
c0014423:	f7 f7                	div    edi
c0014425:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001442a:	88 d3                	mov    bl,dl
c001442c:	53                   	push   ebx
c001442d:	51                   	push   ecx
c001442e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0014434:	e8 69 82 ff ff       	call   c000c6a2 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014439:	83 c4 1c             	add    esp,0x1c
c001443c:	83 f0 01             	xor    eax,0x1
c001443f:	5b                   	pop    ebx
c0014440:	0f b6 c0             	movzx  eax,al
c0014443:	5e                   	pop    esi
c0014444:	31 d2                	xor    edx,edx
c0014446:	5f                   	pop    edi
c0014447:	5d                   	pop    ebp
c0014448:	c3                   	ret    

c0014449 <SysSymlink(regs*)>:
c0014449:	53                   	push   ebx
c001444a:	83 c8 ff             	or     eax,0xffffffff
c001444d:	83 ec 08             	sub    esp,0x8
c0014450:	89 c2                	mov    edx,eax
c0014452:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014456:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014459:	85 c9                	test   ecx,ecx
c001445b:	74 14                	je     c0014471 <SysSymlink(regs*)+0x28>
c001445d:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0014460:	85 db                	test   ebx,ebx
c0014462:	74 0d                	je     c0014471 <SysSymlink(regs*)+0x28>
c0014464:	50                   	push   eax
c0014465:	50                   	push   eax
c0014466:	53                   	push   ebx
c0014467:	51                   	push   ecx
c0014468:	e8 59 6e ff ff       	call   c000b2c6 <KeCreateSymlink(char const*, char const*)>
c001446d:	83 c4 10             	add    esp,0x10
c0014470:	99                   	cdq    
c0014471:	83 c4 08             	add    esp,0x8
c0014474:	5b                   	pop    ebx
c0014475:	c3                   	ret    

c0014476 <SysTimezone(regs*)>:
c0014476:	53                   	push   ebx
c0014477:	83 ec 08             	sub    esp,0x8
c001447a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001447e:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014482:	75 17                	jne    c001449b <SysTimezone(regs*)+0x25>
c0014484:	83 ec 0c             	sub    esp,0xc
c0014487:	68 55 26 02 c0       	push   0xc0022655
c001448c:	e8 b4 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014491:	83 c8 ff             	or     eax,0xffffffff
c0014494:	83 c4 10             	add    esp,0x10
c0014497:	89 c2                	mov    edx,eax
c0014499:	eb 20                	jmp    c00144bb <SysTimezone(regs*)+0x45>
c001449b:	83 ec 0c             	sub    esp,0xc
c001449e:	68 6a 26 02 c0       	push   0xc002266a
c00144a3:	e8 9d 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00144a8:	58                   	pop    eax
c00144a9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00144ac:	e8 5b 7f ff ff       	call   c000c40c <User::loadClockSettings(int)>
c00144b1:	83 c4 10             	add    esp,0x10
c00144b4:	b8 01 00 00 00       	mov    eax,0x1
c00144b9:	31 d2                	xor    edx,edx
c00144bb:	83 c4 08             	add    esp,0x8
c00144be:	5b                   	pop    ebx
c00144bf:	c3                   	ret    

c00144c0 <SysTruncate(regs*)>:
c00144c0:	55                   	push   ebp
c00144c1:	57                   	push   edi
c00144c2:	31 ff                	xor    edi,edi
c00144c4:	56                   	push   esi
c00144c5:	53                   	push   ebx
c00144c6:	83 ec 0c             	sub    esp,0xc
c00144c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144cd:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00144d0:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00144d3:	89 ce                	mov    esi,ecx
c00144d5:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00144d9:	0f 84 9a 00 00 00    	je     c0014579 <SysTruncate(regs*)+0xb9>
c00144df:	83 ec 0c             	sub    esp,0xc
c00144e2:	68 14 01 00 00       	push   0x114
c00144e7:	e8 ca 35 ff ff       	call   c0007ab6 <malloc>
c00144ec:	83 c4 0c             	add    esp,0xc
c00144ef:	89 c3                	mov    ebx,eax
c00144f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144f6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00144f9:	55                   	push   ebp
c00144fa:	53                   	push   ebx
c00144fb:	e8 16 76 ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c0014500:	83 c4 10             	add    esp,0x10
c0014503:	31 d2                	xor    edx,edx
c0014505:	b8 03 00 00 00       	mov    eax,0x3
c001450a:	85 db                	test   ebx,ebx
c001450c:	0f 84 a2 00 00 00    	je     c00145b4 <SysTruncate(regs*)+0xf4>
c0014512:	51                   	push   ecx
c0014513:	51                   	push   ecx
c0014514:	6a 02                	push   0x2
c0014516:	53                   	push   ebx
c0014517:	e8 18 76 ff ff       	call   c000bb34 <File::open(FileOpenMode)>
c001451c:	83 c4 10             	add    esp,0x10
c001451f:	85 c0                	test   eax,eax
c0014521:	74 13                	je     c0014536 <SysTruncate(regs*)+0x76>
c0014523:	83 ec 0c             	sub    esp,0xc
c0014526:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014528:	53                   	push   ebx
c0014529:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001452c:	83 c4 10             	add    esp,0x10
c001452f:	b8 04 00 00 00       	mov    eax,0x4
c0014534:	eb 7c                	jmp    c00145b2 <SysTruncate(regs*)+0xf2>
c0014536:	52                   	push   edx
c0014537:	57                   	push   edi
c0014538:	56                   	push   esi
c0014539:	53                   	push   ebx
c001453a:	e8 09 77 ff ff       	call   c000bc48 <File::truncate(unsigned long long)>
c001453f:	83 c4 10             	add    esp,0x10
c0014542:	85 c0                	test   eax,eax
c0014544:	74 1b                	je     c0014561 <SysTruncate(regs*)+0xa1>
c0014546:	83 ec 0c             	sub    esp,0xc
c0014549:	53                   	push   ebx
c001454a:	e8 43 76 ff ff       	call   c000bb92 <File::close()>
c001454f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014551:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014554:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014557:	83 c4 10             	add    esp,0x10
c001455a:	b8 05 00 00 00       	mov    eax,0x5
c001455f:	eb 51                	jmp    c00145b2 <SysTruncate(regs*)+0xf2>
c0014561:	83 ec 0c             	sub    esp,0xc
c0014564:	53                   	push   ebx
c0014565:	e8 28 76 ff ff       	call   c000bb92 <File::close()>
c001456a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001456c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001456f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014572:	83 c4 10             	add    esp,0x10
c0014575:	31 c0                	xor    eax,eax
c0014577:	eb 39                	jmp    c00145b2 <SysTruncate(regs*)+0xf2>
c0014579:	31 d2                	xor    edx,edx
c001457b:	b8 01 00 00 00       	mov    eax,0x1
c0014580:	83 fd 02             	cmp    ebp,0x2
c0014583:	7e 2f                	jle    c00145b4 <SysTruncate(regs*)+0xf4>
c0014585:	83 ec 0c             	sub    esp,0xc
c0014588:	51                   	push   ecx
c0014589:	e8 25 4f ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001458e:	83 c4 10             	add    esp,0x10
c0014591:	89 c1                	mov    ecx,eax
c0014593:	31 d2                	xor    edx,edx
c0014595:	b8 02 00 00 00       	mov    eax,0x2
c001459a:	85 c9                	test   ecx,ecx
c001459c:	74 16                	je     c00145b4 <SysTruncate(regs*)+0xf4>
c001459e:	50                   	push   eax
c001459f:	57                   	push   edi
c00145a0:	56                   	push   esi
c00145a1:	51                   	push   ecx
c00145a2:	e8 a1 76 ff ff       	call   c000bc48 <File::truncate(unsigned long long)>
c00145a7:	83 c4 10             	add    esp,0x10
c00145aa:	85 c0                	test   eax,eax
c00145ac:	0f 95 c0             	setne  al
c00145af:	0f b6 c0             	movzx  eax,al
c00145b2:	31 d2                	xor    edx,edx
c00145b4:	83 c4 0c             	add    esp,0xc
c00145b7:	5b                   	pop    ebx
c00145b8:	5e                   	pop    esi
c00145b9:	5f                   	pop    edi
c00145ba:	5d                   	pop    ebp
c00145bb:	c3                   	ret    

c00145bc <SysWrite(regs*)>:
c00145bc:	57                   	push   edi
c00145bd:	56                   	push   esi
c00145be:	53                   	push   ebx
c00145bf:	83 ec 10             	sub    esp,0x10
c00145c2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00145c6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00145c9:	83 f8 02             	cmp    eax,0x2
c00145cc:	77 10                	ja     c00145de <SysWrite(regs*)+0x22>
c00145ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145d6:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00145dc:	eb 0e                	jmp    c00145ec <SysWrite(regs*)+0x30>
c00145de:	83 ec 0c             	sub    esp,0xc
c00145e1:	50                   	push   eax
c00145e2:	e8 cc 4e ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00145e7:	83 c4 10             	add    esp,0x10
c00145ea:	89 c1                	mov    ecx,eax
c00145ec:	83 c8 ff             	or     eax,0xffffffff
c00145ef:	85 c9                	test   ecx,ecx
c00145f1:	89 c2                	mov    edx,eax
c00145f3:	74 28                	je     c001461d <SysWrite(regs*)+0x61>
c00145f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00145fd:	31 ff                	xor    edi,edi
c00145ff:	83 ec 0c             	sub    esp,0xc
c0014602:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014604:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014608:	52                   	push   edx
c0014609:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001460c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001460f:	57                   	push   edi
c0014610:	56                   	push   esi
c0014611:	51                   	push   ecx
c0014612:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014615:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014619:	83 c4 20             	add    esp,0x20
c001461c:	99                   	cdq    
c001461d:	83 c4 10             	add    esp,0x10
c0014620:	5b                   	pop    ebx
c0014621:	5e                   	pop    esi
c0014622:	5f                   	pop    edi
c0014623:	c3                   	ret    

c0014624 <SysWsbe(regs*)>:
c0014624:	57                   	push   edi
c0014625:	b9 0b 00 00 00       	mov    ecx,0xb
c001462a:	56                   	push   esi
c001462b:	be a9 26 02 c0       	mov    esi,0xc00226a9
c0014630:	53                   	push   ebx
c0014631:	83 ec 30             	sub    esp,0x30
c0014634:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014638:	fc                   	cld    
c0014639:	83 ec 0c             	sub    esp,0xc
c001463c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001463e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014642:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014647:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001464a:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014650:	8b 06                	mov    eax,DWORD PTR [esi]
c0014652:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014655:	57                   	push   edi
c0014656:	e8 15 bf fe ff       	call   c0000570 <strlen>
c001465b:	5a                   	pop    edx
c001465c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014660:	52                   	push   edx
c0014661:	31 d2                	xor    edx,edx
c0014663:	57                   	push   edi
c0014664:	52                   	push   edx
c0014665:	50                   	push   eax
c0014666:	56                   	push   esi
c0014667:	ff d3                	call   ebx
c0014669:	83 c4 14             	add    esp,0x14
c001466c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014670:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014673:	e8 b0 23 00 00       	call   c0016a28 <terminateTask(int)>
c0014678:	83 c4 40             	add    esp,0x40
c001467b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014680:	5b                   	pop    ebx
c0014681:	31 d2                	xor    edx,edx
c0014683:	5e                   	pop    esi
c0014684:	5f                   	pop    edi
c0014685:	c3                   	ret    

c0014686 <SysYield(regs*)>:
c0014686:	83 ec 0c             	sub    esp,0xc
c0014689:	fa                   	cli    
c001468a:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014690:	e8 f3 19 00 00       	call   c0016088 <schedule()>
c0014695:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001469a:	48                   	dec    eax
c001469b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00146a0:	75 01                	jne    c00146a3 <SysYield(regs*)+0x1d>
c00146a2:	fb                   	sti    
c00146a3:	31 c0                	xor    eax,eax
c00146a5:	31 d2                	xor    edx,edx
c00146a7:	83 c4 0c             	add    esp,0xc
c00146aa:	c3                   	ret    

c00146ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00146ab:	55                   	push   ebp
c00146ac:	57                   	push   edi
c00146ad:	56                   	push   esi
c00146ae:	53                   	push   ebx
c00146af:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00146b5:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00146bd:	0f 95 c0             	setne  al
c00146c0:	31 d2                	xor    edx,edx
c00146c2:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00146ca:	0f 94 c2             	sete   dl
c00146cd:	85 c2                	test   edx,eax
c00146cf:	74 34                	je     c0014705 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00146d1:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00146dc:	74 27                	je     c0014705 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00146de:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00146e5:	05 00 10 00 00       	add    eax,0x1000
c00146ea:	89 c1                	mov    ecx,eax
c00146ec:	25 00 f0 ff ff       	and    eax,0xfffff000
c00146f1:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00146f7:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00146fe:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0014705:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001470c:	83 ec 0c             	sub    esp,0xc
c001470f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014715:	6a 01                	push   0x1
c0014717:	e8 f1 4e ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001471c:	83 c4 10             	add    esp,0x10
c001471f:	89 c3                	mov    ebx,eax
c0014721:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014727:	0f 86 25 01 00 00    	jbe    c0014852 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c001472d:	c1 ee 0c             	shr    esi,0xc
c0014730:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014737:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001473b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014743:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001474a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001474e:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014755:	29 ef                	sub    edi,ebp
c0014757:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001475b:	0f 83 f8 00 00 00    	jae    c0014859 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0014761:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0014767:	76 05                	jbe    c001476e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0014769:	bf 00 10 00 00       	mov    edi,0x1000
c001476e:	83 ec 0c             	sub    esp,0xc
c0014771:	31 d2                	xor    edx,edx
c0014773:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001477a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001477c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014780:	50                   	push   eax
c0014781:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014785:	56                   	push   esi
c0014786:	52                   	push   edx
c0014787:	57                   	push   edi
c0014788:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001478f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014792:	83 c4 20             	add    esp,0x20
c0014795:	85 c0                	test   eax,eax
c0014797:	75 06                	jne    c001479f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0014799:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001479d:	74 13                	je     c00147b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c001479f:	83 ec 0c             	sub    esp,0xc
c00147a2:	53                   	push   ebx
c00147a3:	e8 83 51 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00147a8:	83 c4 10             	add    esp,0x10
c00147ab:	31 c0                	xor    eax,eax
c00147ad:	e9 7c 01 00 00       	jmp    c001492e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00147b2:	fa                   	cli    
c00147b3:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00147b9:	e8 01 36 ff ff       	call   c0007dbf <Phys::allocatePage()>
c00147be:	6a 07                	push   0x7
c00147c0:	89 c7                	mov    edi,eax
c00147c2:	53                   	push   ebx
c00147c3:	50                   	push   eax
c00147c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147cc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147d2:	e8 49 55 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00147d7:	83 c4 0c             	add    esp,0xc
c00147da:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00147e1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147e7:	6a 00                	push   0x0
c00147e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147f1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147f7:	e8 8a 53 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00147fc:	58                   	pop    eax
c00147fd:	5a                   	pop    edx
c00147fe:	68 07 0c 00 00       	push   0xc07
c0014803:	55                   	push   ebp
c0014804:	57                   	push   edi
c0014805:	89 df                	mov    edi,ebx
c0014807:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001480e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014814:	6a 00                	push   0x0
c0014816:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001481b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001481e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014824:	e8 49 57 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014829:	b9 00 10 00 00       	mov    ecx,0x1000
c001482e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014830:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014835:	83 c4 20             	add    esp,0x20
c0014838:	48                   	dec    eax
c0014839:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001483e:	85 c0                	test   eax,eax
c0014840:	75 01                	jne    c0014843 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0014842:	fb                   	sti    
c0014843:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014849:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001484d:	e9 f1 fe ff ff       	jmp    c0014743 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0014852:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014859:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014860:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014866:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001486c:	0f 86 ae 00 00 00    	jbe    c0014920 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014872:	fa                   	cli    
c0014873:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014879:	c1 ee 0c             	shr    esi,0xc
c001487c:	51                   	push   ecx
c001487d:	31 ff                	xor    edi,edi
c001487f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014886:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001488c:	6a 00                	push   0x0
c001488e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014893:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014896:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001489c:	e8 e5 52 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00148a1:	83 c4 10             	add    esp,0x10
c00148a4:	e8 16 35 ff ff       	call   c0007dbf <Phys::allocatePage()>
c00148a9:	47                   	inc    edi
c00148aa:	6a 07                	push   0x7
c00148ac:	53                   	push   ebx
c00148ad:	50                   	push   eax
c00148ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00148b2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148b8:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00148bb:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00148c1:	e8 5a 54 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00148c6:	58                   	pop    eax
c00148c7:	5a                   	pop    edx
c00148c8:	68 07 0c 00 00       	push   0xc07
c00148cd:	55                   	push   ebp
c00148ce:	81 c5 00 10 00 00    	add    ebp,0x1000
c00148d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148d8:	50                   	push   eax
c00148d9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00148e0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148e6:	6a 00                	push   0x0
c00148e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148ed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148f0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148f6:	e8 77 56 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00148fb:	83 c4 1c             	add    esp,0x1c
c00148fe:	68 00 10 00 00       	push   0x1000
c0014903:	6a 00                	push   0x0
c0014905:	53                   	push   ebx
c0014906:	e8 e5 bb fe ff       	call   c00004f0 <memset>
c001490b:	83 c4 10             	add    esp,0x10
c001490e:	39 fe                	cmp    esi,edi
c0014910:	77 92                	ja     c00148a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0014912:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0014917:	48                   	dec    eax
c0014918:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001491d:	75 01                	jne    c0014920 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001491f:	fb                   	sti    
c0014920:	83 ec 0c             	sub    esp,0xc
c0014923:	53                   	push   ebx
c0014924:	e8 02 50 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014929:	83 c4 10             	add    esp,0x10
c001492c:	b0 01                	mov    al,0x1
c001492e:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014934:	5b                   	pop    ebx
c0014935:	5e                   	pop    esi
c0014936:	5f                   	pop    edi
c0014937:	5d                   	pop    ebp
c0014938:	c3                   	ret    

c0014939 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014939:	55                   	push   ebp
c001493a:	57                   	push   edi
c001493b:	56                   	push   esi
c001493c:	53                   	push   ebx
c001493d:	83 ec 48             	sub    esp,0x48
c0014940:	68 14 01 00 00       	push   0x114
c0014945:	e8 6c 31 ff ff       	call   c0007ab6 <malloc>
c001494a:	83 c4 0c             	add    esp,0xc
c001494d:	89 c6                	mov    esi,eax
c001494f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014953:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014957:	50                   	push   eax
c0014958:	e8 b9 71 ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c001495d:	58                   	pop    eax
c001495e:	5a                   	pop    edx
c001495f:	6a 01                	push   0x1
c0014961:	56                   	push   esi
c0014962:	e8 cd 71 ff ff       	call   c000bb34 <File::open(FileOpenMode)>
c0014967:	83 c4 10             	add    esp,0x10
c001496a:	85 c0                	test   eax,eax
c001496c:	0f 85 43 01 00 00    	jne    c0014ab5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014972:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001497a:	83 ec 0c             	sub    esp,0xc
c001497d:	6a 34                	push   0x34
c001497f:	e8 32 31 ff ff       	call   c0007ab6 <malloc>
c0014984:	89 c3                	mov    ebx,eax
c0014986:	58                   	pop    eax
c0014987:	8b 06                	mov    eax,DWORD PTR [esi]
c0014989:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001498d:	57                   	push   edi
c001498e:	53                   	push   ebx
c001498f:	6a 00                	push   0x0
c0014991:	6a 34                	push   0x34
c0014993:	56                   	push   esi
c0014994:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014997:	83 c4 20             	add    esp,0x20
c001499a:	85 c0                	test   eax,eax
c001499c:	0f 85 13 01 00 00    	jne    c0014ab5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149a2:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00149a8:	0f 85 07 01 00 00    	jne    c0014ab5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149ae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00149b1:	85 c0                	test   eax,eax
c00149b3:	0f 84 fc 00 00 00    	je     c0014ab5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149b9:	31 d2                	xor    edx,edx
c00149bb:	55                   	push   ebp
c00149bc:	52                   	push   edx
c00149bd:	50                   	push   eax
c00149be:	56                   	push   esi
c00149bf:	e8 2e 72 ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c00149c4:	83 c4 10             	add    esp,0x10
c00149c7:	85 c0                	test   eax,eax
c00149c9:	0f 85 e6 00 00 00    	jne    c0014ab5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149cf:	83 ec 0c             	sub    esp,0xc
c00149d2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00149d5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00149d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00149dd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00149e1:	0f af c2             	imul   eax,edx
c00149e4:	50                   	push   eax
c00149e5:	e8 cc 30 ff ff       	call   c0007ab6 <malloc>
c00149ea:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00149ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00149f0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00149f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00149f7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00149fb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00149ff:	0f af c2             	imul   eax,edx
c0014a02:	99                   	cdq    
c0014a03:	52                   	push   edx
c0014a04:	50                   	push   eax
c0014a05:	56                   	push   esi
c0014a06:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a09:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014a0c:	83 c4 20             	add    esp,0x20
c0014a0f:	85 c0                	test   eax,eax
c0014a11:	0f 84 9e 00 00 00    	je     c0014ab5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a17:	31 d2                	xor    edx,edx
c0014a19:	51                   	push   ecx
c0014a1a:	52                   	push   edx
c0014a1b:	50                   	push   eax
c0014a1c:	56                   	push   esi
c0014a1d:	e8 d0 71 ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0014a22:	83 c4 10             	add    esp,0x10
c0014a25:	85 c0                	test   eax,eax
c0014a27:	0f 85 88 00 00 00    	jne    c0014ab5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a2d:	83 ec 0c             	sub    esp,0xc
c0014a30:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a34:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a38:	31 ed                	xor    ebp,ebp
c0014a3a:	0f af c2             	imul   eax,edx
c0014a3d:	50                   	push   eax
c0014a3e:	e8 73 30 ff ff       	call   c0007ab6 <malloc>
c0014a43:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014a45:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a49:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a50:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a54:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a58:	0f af c2             	imul   eax,edx
c0014a5b:	99                   	cdq    
c0014a5c:	52                   	push   edx
c0014a5d:	50                   	push   eax
c0014a5e:	56                   	push   esi
c0014a5f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a62:	83 c4 20             	add    esp,0x20
c0014a65:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014a6d:	0f b7 fd             	movzx  edi,bp
c0014a70:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014a74:	73 7d                	jae    c0014af3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014a76:	c1 e7 05             	shl    edi,0x5
c0014a79:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014a7d:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014a80:	75 6b                	jne    c0014aed <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014a82:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014a85:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a89:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014a8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014a90:	52                   	push   edx
c0014a91:	31 d2                	xor    edx,edx
c0014a93:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014a96:	52                   	push   edx
c0014a97:	50                   	push   eax
c0014a98:	56                   	push   esi
c0014a99:	e8 54 71 ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0014a9e:	83 c4 10             	add    esp,0x10
c0014aa1:	85 c0                	test   eax,eax
c0014aa3:	74 17                	je     c0014abc <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014aa5:	83 ec 0c             	sub    esp,0xc
c0014aa8:	68 d5 26 02 c0       	push   0xc00226d5
c0014aad:	e8 93 5e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014ab2:	83 c4 10             	add    esp,0x10
c0014ab5:	31 c0                	xor    eax,eax
c0014ab7:	e9 87 00 00 00       	jmp    c0014b43 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014abc:	83 ec 0c             	sub    esp,0xc
c0014abf:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014ac2:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014ac5:	50                   	push   eax
c0014ac6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014aca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ace:	56                   	push   esi
c0014acf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014ad3:	e8 d3 fb ff ff       	call   c00146ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014ad8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014adc:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014ae0:	83 c4 20             	add    esp,0x20
c0014ae3:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014ae7:	73 04                	jae    c0014aed <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014ae9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014aed:	45                   	inc    ebp
c0014aee:	e9 7a ff ff ff       	jmp    c0014a6d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014af3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014af7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014afb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014aff:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014b05:	83 ec 0c             	sub    esp,0xc
c0014b08:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014b0e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b13:	05 00 10 00 00       	add    eax,0x1000
c0014b18:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014b1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b1f:	e8 a2 2f ff ff       	call   c0007ac6 <free>
c0014b24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b27:	e8 9a 2f ff ff       	call   c0007ac6 <free>
c0014b2c:	58                   	pop    eax
c0014b2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b31:	e8 90 2f ff ff       	call   c0007ac6 <free>
c0014b36:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b39:	e8 54 70 ff ff       	call   c000bb92 <File::close()>
c0014b3e:	83 c4 10             	add    esp,0x10
c0014b41:	b0 01                	mov    al,0x1
c0014b43:	83 c4 3c             	add    esp,0x3c
c0014b46:	5b                   	pop    ebx
c0014b47:	5e                   	pop    esi
c0014b48:	5f                   	pop    edi
c0014b49:	5d                   	pop    ebp
c0014b4a:	c3                   	ret    

c0014b4b <Thr::runtimeReferenceHelper()>:
c0014b4b:	83 ec 18             	sub    esp,0x18
c0014b4e:	68 dd 26 02 c0       	push   0xc00226dd
c0014b53:	e8 ed 5d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014b58:	fa                   	cli    
c0014b59:	83 c4 10             	add    esp,0x10
c0014b5c:	eb fe                	jmp    c0014b5c <Thr::runtimeReferenceHelper()+0x11>

c0014b5e <Thr::getAddressOfKernelSymbol(char const*)>:
c0014b5e:	57                   	push   edi
c0014b5f:	56                   	push   esi
c0014b60:	53                   	push   ebx
c0014b61:	31 db                	xor    ebx,ebx
c0014b63:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014b69:	7e 3c                	jle    c0014ba7 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014b6b:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014b72:	31 ff                	xor    edi,edi
c0014b74:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014b7b:	7e 27                	jle    c0014ba4 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014b7d:	50                   	push   eax
c0014b7e:	50                   	push   eax
c0014b7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b83:	8b 06                	mov    eax,DWORD PTR [esi]
c0014b85:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014b8c:	50                   	push   eax
c0014b8d:	e8 be bb fe ff       	call   c0000750 <strcmp>
c0014b92:	83 c4 10             	add    esp,0x10
c0014b95:	85 c0                	test   eax,eax
c0014b97:	75 05                	jne    c0014b9e <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014b99:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014b9c:	eb 0b                	jmp    c0014ba9 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014b9e:	83 c6 10             	add    esi,0x10
c0014ba1:	47                   	inc    edi
c0014ba2:	eb d0                	jmp    c0014b74 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014ba4:	43                   	inc    ebx
c0014ba5:	eb bc                	jmp    c0014b63 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014ba7:	31 c0                	xor    eax,eax
c0014ba9:	5b                   	pop    ebx
c0014baa:	5e                   	pop    esi
c0014bab:	5f                   	pop    edi
c0014bac:	c3                   	ret    

c0014bad <Thr::loadKernelSymbolTable(char const*)>:
c0014bad:	55                   	push   ebp
c0014bae:	57                   	push   edi
c0014baf:	56                   	push   esi
c0014bb0:	53                   	push   ebx
c0014bb1:	83 ec 68             	sub    esp,0x68
c0014bb4:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014bba:	68 14 01 00 00       	push   0x114
c0014bbf:	e8 f2 2e ff ff       	call   c0007ab6 <malloc>
c0014bc4:	83 c4 0c             	add    esp,0xc
c0014bc7:	89 c3                	mov    ebx,eax
c0014bc9:	56                   	push   esi
c0014bca:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014bce:	50                   	push   eax
c0014bcf:	e8 42 6f ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c0014bd4:	5e                   	pop    esi
c0014bd5:	5f                   	pop    edi
c0014bd6:	6a 01                	push   0x1
c0014bd8:	53                   	push   ebx
c0014bd9:	e8 56 6f ff ff       	call   c000bb34 <File::open(FileOpenMode)>
c0014bde:	83 c4 10             	add    esp,0x10
c0014be1:	85 c0                	test   eax,eax
c0014be3:	74 0a                	je     c0014bef <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014be5:	83 ec 0c             	sub    esp,0xc
c0014be8:	68 ff 26 02 c0       	push   0xc00226ff
c0014bed:	eb 34                	jmp    c0014c23 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014bef:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014bf7:	83 ec 0c             	sub    esp,0xc
c0014bfa:	6a 34                	push   0x34
c0014bfc:	e8 b5 2e ff ff       	call   c0007ab6 <malloc>
c0014c01:	59                   	pop    ecx
c0014c02:	89 c7                	mov    edi,eax
c0014c04:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014c08:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c0a:	56                   	push   esi
c0014c0b:	57                   	push   edi
c0014c0c:	6a 00                	push   0x0
c0014c0e:	6a 34                	push   0x34
c0014c10:	53                   	push   ebx
c0014c11:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c14:	83 c4 20             	add    esp,0x20
c0014c17:	85 c0                	test   eax,eax
c0014c19:	74 17                	je     c0014c32 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014c1b:	83 ec 0c             	sub    esp,0xc
c0014c1e:	68 16 27 02 c0       	push   0xc0022716
c0014c23:	e8 bf c9 ff ff       	call   c00115e7 <KePanic(char const*)>
c0014c28:	83 c4 10             	add    esp,0x10
c0014c2b:	31 c0                	xor    eax,eax
c0014c2d:	e9 31 02 00 00       	jmp    c0014e63 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014c32:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014c38:	75 e1                	jne    c0014c1b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c3a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014c3d:	85 c0                	test   eax,eax
c0014c3f:	74 da                	je     c0014c1b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c41:	52                   	push   edx
c0014c42:	31 d2                	xor    edx,edx
c0014c44:	52                   	push   edx
c0014c45:	50                   	push   eax
c0014c46:	53                   	push   ebx
c0014c47:	e8 a6 6f ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0014c4c:	83 c4 10             	add    esp,0x10
c0014c4f:	85 c0                	test   eax,eax
c0014c51:	75 c8                	jne    c0014c1b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c53:	83 ec 0c             	sub    esp,0xc
c0014c56:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c5a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c5e:	31 ed                	xor    ebp,ebp
c0014c60:	0f af c2             	imul   eax,edx
c0014c63:	50                   	push   eax
c0014c64:	e8 4d 2e ff ff       	call   c0007ab6 <malloc>
c0014c69:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c76:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c7a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c7e:	0f af c2             	imul   eax,edx
c0014c81:	99                   	cdq    
c0014c82:	52                   	push   edx
c0014c83:	50                   	push   eax
c0014c84:	53                   	push   ebx
c0014c85:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c88:	83 c4 20             	add    esp,0x20
c0014c8b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c93:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c9b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014ca3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014cab:	0f b7 f5             	movzx  esi,bp
c0014cae:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014cb2:	0f 83 a7 00 00 00    	jae    c0014d5f <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014cb8:	6b f6 28             	imul   esi,esi,0x28
c0014cbb:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014cbf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014cc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014cc6:	50                   	push   eax
c0014cc7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014ccb:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014ccf:	8b 16                	mov    edx,DWORD PTR [esi]
c0014cd1:	6b c0 28             	imul   eax,eax,0x28
c0014cd4:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014cd8:	89 d0                	mov    eax,edx
c0014cda:	31 d2                	xor    edx,edx
c0014cdc:	52                   	push   edx
c0014cdd:	50                   	push   eax
c0014cde:	53                   	push   ebx
c0014cdf:	e8 0e 6f ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0014ce4:	83 c4 0c             	add    esp,0xc
c0014ce7:	6a 20                	push   0x20
c0014ce9:	6a 00                	push   0x0
c0014ceb:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014cef:	52                   	push   edx
c0014cf0:	e8 fb b7 fe ff       	call   c00004f0 <memset>
c0014cf5:	58                   	pop    eax
c0014cf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014cf8:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014cfc:	51                   	push   ecx
c0014cfd:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014d01:	52                   	push   edx
c0014d02:	6a 00                	push   0x0
c0014d04:	6a 1f                	push   0x1f
c0014d06:	53                   	push   ebx
c0014d07:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d0a:	83 c4 18             	add    esp,0x18
c0014d0d:	68 2d 27 02 c0       	push   0xc002272d
c0014d12:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d16:	52                   	push   edx
c0014d17:	e8 34 ba fe ff       	call   c0000750 <strcmp>
c0014d1c:	83 c4 10             	add    esp,0x10
c0014d1f:	85 c0                	test   eax,eax
c0014d21:	75 0f                	jne    c0014d32 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014d23:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d32:	50                   	push   eax
c0014d33:	50                   	push   eax
c0014d34:	68 35 27 02 c0       	push   0xc0022735
c0014d39:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014d3d:	50                   	push   eax
c0014d3e:	e8 0d ba fe ff       	call   c0000750 <strcmp>
c0014d43:	83 c4 10             	add    esp,0x10
c0014d46:	85 c0                	test   eax,eax
c0014d48:	75 0f                	jne    c0014d59 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014d4a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d59:	45                   	inc    ebp
c0014d5a:	e9 4c ff ff ff       	jmp    c0014cab <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014d5f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014d64:	75 10                	jne    c0014d76 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014d66:	83 ec 0c             	sub    esp,0xc
c0014d69:	68 3d 27 02 c0       	push   0xc002273d
c0014d6e:	e8 74 c8 ff ff       	call   c00115e7 <KePanic(char const*)>
c0014d73:	83 c4 10             	add    esp,0x10
c0014d76:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014d7b:	75 10                	jne    c0014d8d <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014d7d:	83 ec 0c             	sub    esp,0xc
c0014d80:	68 3d 27 02 c0       	push   0xc002273d
c0014d85:	e8 5d c8 ff ff       	call   c00115e7 <KePanic(char const*)>
c0014d8a:	83 c4 10             	add    esp,0x10
c0014d8d:	31 d2                	xor    edx,edx
c0014d8f:	50                   	push   eax
c0014d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d94:	52                   	push   edx
c0014d95:	50                   	push   eax
c0014d96:	53                   	push   ebx
c0014d97:	e8 56 6e ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0014d9c:	5a                   	pop    edx
c0014d9d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014da1:	e8 10 2d ff ff       	call   c0007ab6 <malloc>
c0014da6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014daa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014dae:	31 c9                	xor    ecx,ecx
c0014db0:	5e                   	pop    esi
c0014db1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014db3:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014db7:	55                   	push   ebp
c0014db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dbc:	51                   	push   ecx
c0014dbd:	52                   	push   edx
c0014dbe:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014dc2:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014dc6:	53                   	push   ebx
c0014dc7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014dca:	83 c4 14             	add    esp,0x14
c0014dcd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014dd1:	e8 e0 2c ff ff       	call   c0007ab6 <malloc>
c0014dd6:	89 c6                	mov    esi,eax
c0014dd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014dda:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014ddd:	56                   	push   esi
c0014dde:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014de2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014de6:	51                   	push   ecx
c0014de7:	52                   	push   edx
c0014de8:	53                   	push   ebx
c0014de9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014dec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014df0:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014df6:	83 c4 1c             	add    esp,0x1c
c0014df9:	c1 e8 04             	shr    eax,0x4
c0014dfc:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014e03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e07:	31 d2                	xor    edx,edx
c0014e09:	52                   	push   edx
c0014e0a:	50                   	push   eax
c0014e0b:	53                   	push   ebx
c0014e0c:	e8 e1 6d ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0014e11:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014e13:	31 d2                	xor    edx,edx
c0014e15:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e18:	56                   	push   esi
c0014e19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e1d:	52                   	push   edx
c0014e1e:	50                   	push   eax
c0014e1f:	53                   	push   ebx
c0014e20:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e23:	83 c4 14             	add    esp,0x14
c0014e26:	53                   	push   ebx
c0014e27:	e8 66 6d ff ff       	call   c000bb92 <File::close()>
c0014e2c:	5d                   	pop    ebp
c0014e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e31:	e8 90 2c ff ff       	call   c0007ac6 <free>
c0014e36:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014e39:	e8 88 2c ff ff       	call   c0007ac6 <free>
c0014e3e:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014e43:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014e47:	8d 50 01             	lea    edx,[eax+0x1]
c0014e4a:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014e51:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014e58:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014e5e:	83 c4 10             	add    esp,0x10
c0014e61:	b0 01                	mov    al,0x1
c0014e63:	83 c4 5c             	add    esp,0x5c
c0014e66:	5b                   	pop    ebx
c0014e67:	5e                   	pop    esi
c0014e68:	5f                   	pop    edi
c0014e69:	5d                   	pop    ebp
c0014e6a:	c3                   	ret    

c0014e6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014e6b:	55                   	push   ebp
c0014e6c:	57                   	push   edi
c0014e6d:	56                   	push   esi
c0014e6e:	53                   	push   ebx
c0014e6f:	81 ec 68 03 00 00    	sub    esp,0x368
c0014e75:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014e7c:	8b 1d f0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6f0
c0014e82:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014e86:	68 14 01 00 00       	push   0x114
c0014e8b:	e8 26 2c ff ff       	call   c0007ab6 <malloc>
c0014e90:	83 c4 0c             	add    esp,0xc
c0014e93:	89 c5                	mov    ebp,eax
c0014e95:	53                   	push   ebx
c0014e96:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014e9d:	50                   	push   eax
c0014e9e:	e8 73 6c ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c0014ea3:	5e                   	pop    esi
c0014ea4:	5f                   	pop    edi
c0014ea5:	6a 01                	push   0x1
c0014ea7:	55                   	push   ebp
c0014ea8:	e8 87 6c ff ff       	call   c000bb34 <File::open(FileOpenMode)>
c0014ead:	83 c4 10             	add    esp,0x10
c0014eb0:	85 c0                	test   eax,eax
c0014eb2:	0f 85 aa 06 00 00    	jne    c0015562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014eb8:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014ec0:	83 ec 0c             	sub    esp,0xc
c0014ec3:	6a 34                	push   0x34
c0014ec5:	e8 ec 2b ff ff       	call   c0007ab6 <malloc>
c0014eca:	5b                   	pop    ebx
c0014ecb:	89 c7                	mov    edi,eax
c0014ecd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014ed1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014ed4:	53                   	push   ebx
c0014ed5:	57                   	push   edi
c0014ed6:	6a 00                	push   0x0
c0014ed8:	6a 34                	push   0x34
c0014eda:	55                   	push   ebp
c0014edb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ede:	83 c4 20             	add    esp,0x20
c0014ee1:	85 c0                	test   eax,eax
c0014ee3:	0f 85 79 06 00 00    	jne    c0015562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ee9:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014eef:	0f 85 6d 06 00 00    	jne    c0015562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ef5:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014ef8:	85 c0                	test   eax,eax
c0014efa:	0f 84 62 06 00 00    	je     c0015562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f00:	31 d2                	xor    edx,edx
c0014f02:	51                   	push   ecx
c0014f03:	52                   	push   edx
c0014f04:	50                   	push   eax
c0014f05:	55                   	push   ebp
c0014f06:	e8 e7 6c ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0014f0b:	83 c4 10             	add    esp,0x10
c0014f0e:	85 c0                	test   eax,eax
c0014f10:	0f 85 4c 06 00 00    	jne    c0015562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f16:	83 ec 0c             	sub    esp,0xc
c0014f19:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014f1c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014f20:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014f24:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f28:	0f af c2             	imul   eax,edx
c0014f2b:	50                   	push   eax
c0014f2c:	e8 85 2b ff ff       	call   c0007ab6 <malloc>
c0014f31:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014f34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f3f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014f43:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f47:	0f af c2             	imul   eax,edx
c0014f4a:	99                   	cdq    
c0014f4b:	52                   	push   edx
c0014f4c:	50                   	push   eax
c0014f4d:	55                   	push   ebp
c0014f4e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f51:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014f54:	83 c4 20             	add    esp,0x20
c0014f57:	85 c0                	test   eax,eax
c0014f59:	0f 84 03 06 00 00    	je     c0015562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f5f:	52                   	push   edx
c0014f60:	31 d2                	xor    edx,edx
c0014f62:	52                   	push   edx
c0014f63:	50                   	push   eax
c0014f64:	55                   	push   ebp
c0014f65:	e8 88 6c ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0014f6a:	83 c4 10             	add    esp,0x10
c0014f6d:	85 c0                	test   eax,eax
c0014f6f:	0f 85 ed 05 00 00    	jne    c0015562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f75:	83 ec 0c             	sub    esp,0xc
c0014f78:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014f7c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014f80:	31 f6                	xor    esi,esi
c0014f82:	0f af c2             	imul   eax,edx
c0014f85:	50                   	push   eax
c0014f86:	e8 2b 2b ff ff       	call   c0007ab6 <malloc>
c0014f8b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014f8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014f92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f99:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014f9d:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014fa1:	0f af c2             	imul   eax,edx
c0014fa4:	99                   	cdq    
c0014fa5:	52                   	push   edx
c0014fa6:	50                   	push   eax
c0014fa7:	55                   	push   ebp
c0014fa8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014fab:	83 c4 20             	add    esp,0x20
c0014fae:	0f b7 de             	movzx  ebx,si
c0014fb1:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014fb5:	0f 83 87 00 00 00    	jae    c0015042 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014fbb:	c1 e3 05             	shl    ebx,0x5
c0014fbe:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014fc2:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014fc5:	75 75                	jne    c001503c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014fc7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014fca:	31 d2                	xor    edx,edx
c0014fcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fd0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014fd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014fd7:	50                   	push   eax
c0014fd8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014fdb:	52                   	push   edx
c0014fdc:	50                   	push   eax
c0014fdd:	55                   	push   ebp
c0014fde:	e8 0f 6c ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0014fe3:	83 c4 10             	add    esp,0x10
c0014fe6:	85 c0                	test   eax,eax
c0014fe8:	0f 85 74 05 00 00    	jne    c0015562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014fee:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014ff5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014ff8:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014ffc:	31 d2                	xor    edx,edx
c0014ffe:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0015002:	83 ec 0c             	sub    esp,0xc
c0015005:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015009:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015010:	50                   	push   eax
c0015011:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015019:	52                   	push   edx
c001501a:	50                   	push   eax
c001501b:	55                   	push   ebp
c001501c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001501f:	83 c4 1c             	add    esp,0x1c
c0015022:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015025:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015028:	50                   	push   eax
c0015029:	6a 00                	push   0x0
c001502b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001502f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0015033:	50                   	push   eax
c0015034:	e8 b7 b4 fe ff       	call   c00004f0 <memset>
c0015039:	83 c4 10             	add    esp,0x10
c001503c:	46                   	inc    esi
c001503d:	e9 6c ff ff ff       	jmp    c0014fae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015042:	53                   	push   ebx
c0015043:	31 db                	xor    ebx,ebx
c0015045:	68 00 01 00 00       	push   0x100
c001504a:	6a 00                	push   0x0
c001504c:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015050:	50                   	push   eax
c0015051:	e8 9a b4 fe ff       	call   c00004f0 <memset>
c0015056:	83 c4 0c             	add    esp,0xc
c0015059:	68 00 01 00 00       	push   0x100
c001505e:	6a 00                	push   0x0
c0015060:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015067:	50                   	push   eax
c0015068:	e8 83 b4 fe ff       	call   c00004f0 <memset>
c001506d:	83 c4 10             	add    esp,0x10
c0015070:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015078:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015080:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015088:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015090:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015098:	0f b7 f3             	movzx  esi,bx
c001509b:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c001509f:	0f 83 2d 01 00 00    	jae    c00151d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00150a5:	6b f6 28             	imul   esi,esi,0x28
c00150a8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00150ac:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00150af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150b3:	52                   	push   edx
c00150b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00150b8:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00150bc:	8b 06                	mov    eax,DWORD PTR [esi]
c00150be:	6b d2 28             	imul   edx,edx,0x28
c00150c1:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00150c5:	31 d2                	xor    edx,edx
c00150c7:	52                   	push   edx
c00150c8:	50                   	push   eax
c00150c9:	55                   	push   ebp
c00150ca:	e8 23 6b ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c00150cf:	83 c4 0c             	add    esp,0xc
c00150d2:	6a 20                	push   0x20
c00150d4:	6a 00                	push   0x0
c00150d6:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00150dd:	51                   	push   ecx
c00150de:	e8 0d b4 fe ff       	call   c00004f0 <memset>
c00150e3:	59                   	pop    ecx
c00150e4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00150e7:	8d 54 24 58          	lea    edx,[esp+0x58]
c00150eb:	52                   	push   edx
c00150ec:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00150f3:	51                   	push   ecx
c00150f4:	6a 00                	push   0x0
c00150f6:	6a 1f                	push   0x1f
c00150f8:	55                   	push   ebp
c00150f9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00150fc:	83 c4 1c             	add    esp,0x1c
c00150ff:	6a 09                	push   0x9
c0015101:	68 57 27 02 c0       	push   0xc0022757
c0015106:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001510d:	51                   	push   ecx
c001510e:	e8 6d b2 fe ff       	call   c0000380 <memcmp>
c0015113:	83 c4 10             	add    esp,0x10
c0015116:	85 c0                	test   eax,eax
c0015118:	75 21                	jne    c001513b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001511a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001511e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015122:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015126:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001512a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001512d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015134:	89 d0                	mov    eax,edx
c0015136:	40                   	inc    eax
c0015137:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001513b:	50                   	push   eax
c001513c:	6a 09                	push   0x9
c001513e:	68 61 27 02 c0       	push   0xc0022761
c0015143:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001514a:	50                   	push   eax
c001514b:	e8 30 b2 fe ff       	call   c0000380 <memcmp>
c0015150:	83 c4 10             	add    esp,0x10
c0015153:	85 c0                	test   eax,eax
c0015155:	75 21                	jne    c0015178 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0015157:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001515b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001515f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015163:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0015167:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001516a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015171:	89 d0                	mov    eax,edx
c0015173:	40                   	inc    eax
c0015174:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015178:	50                   	push   eax
c0015179:	50                   	push   eax
c001517a:	68 2d 27 02 c0       	push   0xc002272d
c001517f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015186:	50                   	push   eax
c0015187:	e8 c4 b5 fe ff       	call   c0000750 <strcmp>
c001518c:	83 c4 10             	add    esp,0x10
c001518f:	85 c0                	test   eax,eax
c0015191:	75 0f                	jne    c00151a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0015193:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015196:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001519a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001519e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00151a2:	50                   	push   eax
c00151a3:	50                   	push   eax
c00151a4:	68 35 27 02 c0       	push   0xc0022735
c00151a9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151b0:	50                   	push   eax
c00151b1:	e8 9a b5 fe ff       	call   c0000750 <strcmp>
c00151b6:	83 c4 10             	add    esp,0x10
c00151b9:	85 c0                	test   eax,eax
c00151bb:	75 0f                	jne    c00151cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00151bd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00151c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00151c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00151cc:	43                   	inc    ebx
c00151cd:	e9 c6 fe ff ff       	jmp    c0015098 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00151d2:	31 d2                	xor    edx,edx
c00151d4:	50                   	push   eax
c00151d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151d9:	52                   	push   edx
c00151da:	50                   	push   eax
c00151db:	55                   	push   ebp
c00151dc:	e8 11 6a ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c00151e1:	58                   	pop    eax
c00151e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00151e6:	e8 cb 28 ff ff       	call   c0007ab6 <malloc>
c00151eb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00151ee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00151f2:	31 d2                	xor    edx,edx
c00151f4:	58                   	pop    eax
c00151f5:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00151f9:	53                   	push   ebx
c00151fa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00151fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015202:	52                   	push   edx
c0015203:	50                   	push   eax
c0015204:	55                   	push   ebp
c0015205:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015208:	83 c4 14             	add    esp,0x14
c001520b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001520f:	e8 a2 28 ff ff       	call   c0007ab6 <malloc>
c0015214:	31 d2                	xor    edx,edx
c0015216:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001521a:	83 c4 0c             	add    esp,0xc
c001521d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015221:	52                   	push   edx
c0015222:	50                   	push   eax
c0015223:	55                   	push   ebp
c0015224:	e8 c9 69 ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0015229:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001522c:	31 d2                	xor    edx,edx
c001522e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015231:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015235:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015239:	52                   	push   edx
c001523a:	50                   	push   eax
c001523b:	55                   	push   ebp
c001523c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001523f:	83 c4 20             	add    esp,0x20
c0015242:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0015247:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001524f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015253:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015257:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001525b:	0f 84 05 03 00 00    	je     c0015566 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0015261:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0015268:	31 d2                	xor    edx,edx
c001526a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001526e:	c1 e8 03             	shr    eax,0x3
c0015271:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015275:	51                   	push   ecx
c0015276:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001527a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001527e:	52                   	push   edx
c001527f:	50                   	push   eax
c0015280:	55                   	push   ebp
c0015281:	e8 6c 69 ff ff       	call   c000bbf2 <File::seek(unsigned long long)>
c0015286:	5b                   	pop    ebx
c0015287:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001528b:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015292:	e8 1f 28 ff ff       	call   c0007ab6 <malloc>
c0015297:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001529a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001529e:	31 d2                	xor    edx,edx
c00152a0:	5e                   	pop    esi
c00152a1:	8d 44 24 58          	lea    eax,[esp+0x58]
c00152a5:	50                   	push   eax
c00152a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152ae:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00152b5:	52                   	push   edx
c00152b6:	50                   	push   eax
c00152b7:	55                   	push   ebp
c00152b8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152bb:	83 c4 20             	add    esp,0x20
c00152be:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00152c6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00152ca:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c00152ce:	0f 8d 76 02 00 00    	jge    c001554a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c00152d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00152d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152dc:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c00152e1:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00152e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00152e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152ec:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00152f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00152f4:	c1 e8 08             	shr    eax,0x8
c00152f7:	89 c6                	mov    esi,eax
c00152f9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00152fd:	c1 e6 04             	shl    esi,0x4
c0015300:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015304:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0015307:	85 db                	test   ebx,ebx
c0015309:	0f 85 b3 00 00 00    	jne    c00153c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001530f:	83 ec 0c             	sub    esp,0xc
c0015312:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015316:	03 06                	add    eax,DWORD PTR [esi]
c0015318:	50                   	push   eax
c0015319:	e8 40 f8 ff ff       	call   c0014b5e <Thr::getAddressOfKernelSymbol(char const*)>
c001531e:	83 c4 10             	add    esp,0x10
c0015321:	89 c3                	mov    ebx,eax
c0015323:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0015328:	85 c0                	test   eax,eax
c001532a:	0f 85 92 00 00 00    	jne    c00153c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015330:	83 ec 0c             	sub    esp,0xc
c0015333:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015337:	03 06                	add    eax,DWORD PTR [esi]
c0015339:	50                   	push   eax
c001533a:	e8 95 c4 ff ff       	call   c00117d4 <KeResolveCompatibilitySymbol(char*)>
c001533f:	83 c4 10             	add    esp,0x10
c0015342:	89 c3                	mov    ebx,eax
c0015344:	85 c0                	test   eax,eax
c0015346:	75 7a                	jne    c00153c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015348:	51                   	push   ecx
c0015349:	51                   	push   ecx
c001534a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001534e:	03 06                	add    eax,DWORD PTR [esi]
c0015350:	50                   	push   eax
c0015351:	68 6b 27 02 c0       	push   0xc002276b
c0015356:	e8 ea 55 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001535b:	58                   	pop    eax
c001535c:	5a                   	pop    edx
c001535d:	68 85 27 02 c0       	push   0xc0022785
c0015362:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015369:	50                   	push   eax
c001536a:	e8 d1 b2 fe ff       	call   c0000640 <strcpy>
c001536f:	59                   	pop    ecx
c0015370:	58                   	pop    eax
c0015371:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015375:	03 06                	add    eax,DWORD PTR [esi]
c0015377:	50                   	push   eax
c0015378:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001537f:	50                   	push   eax
c0015380:	e8 bb b4 fe ff       	call   c0000840 <strcat>
c0015385:	58                   	pop    eax
c0015386:	5a                   	pop    edx
c0015387:	68 1b 28 02 c0       	push   0xc002281b
c001538c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015393:	50                   	push   eax
c0015394:	e8 a7 b4 fe ff       	call   c0000840 <strcat>
c0015399:	83 c4 10             	add    esp,0x10
c001539c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00153a1:	0f 84 5d 01 00 00    	je     c0015504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00153a7:	83 ec 0c             	sub    esp,0xc
c00153aa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00153b1:	50                   	push   eax
c00153b2:	e8 30 c2 ff ff       	call   c00115e7 <KePanic(char const*)>
c00153b7:	83 c4 10             	add    esp,0x10
c00153ba:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00153be:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c00153c2:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00153c7:	83 f8 01             	cmp    eax,0x1
c00153ca:	0f 85 8f 00 00 00    	jne    c001545f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c00153d0:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00153d7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00153db:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00153df:	01 ce                	add    esi,ecx
c00153e1:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00153e9:	0f 94 c0             	sete   al
c00153ec:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00153f4:	0f 94 c2             	sete   dl
c00153f7:	09 c2                	or     edx,eax
c00153f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00153fb:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015400:	0f b6 d2             	movzx  edx,dl
c0015403:	74 41                	je     c0015446 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0015405:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0015408:	85 d2                	test   edx,edx
c001540a:	75 15                	jne    c0015421 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c001540c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015410:	66 83 f8 0c          	cmp    ax,0xc
c0015414:	76 05                	jbe    c001541b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0015416:	b8 0c 00 00 00       	mov    eax,0xc
c001541b:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001541f:	76 37                	jbe    c0015458 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015421:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015425:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001542a:	0f 84 d4 00 00 00    	je     c0015504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015430:	83 ec 0c             	sub    esp,0xc
c0015433:	68 9c 27 02 c0       	push   0xc002279c
c0015438:	e8 aa c1 ff ff       	call   c00115e7 <KePanic(char const*)>
c001543d:	83 c4 10             	add    esp,0x10
c0015440:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015444:	eb 12                	jmp    c0015458 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015446:	01 c1                	add    ecx,eax
c0015448:	85 d2                	test   edx,edx
c001544a:	75 0c                	jne    c0015458 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001544c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015450:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015454:	77 02                	ja     c0015458 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015456:	01 d9                	add    ecx,ebx
c0015458:	89 0e                	mov    DWORD PTR [esi],ecx
c001545a:	e9 e2 00 00 00       	jmp    c0015541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001545f:	83 f8 02             	cmp    eax,0x2
c0015462:	75 77                	jne    c00154db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0015464:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001546b:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c001546f:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0015473:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001547b:	74 21                	je     c001549e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001547d:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015485:	74 17                	je     c001549e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015487:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c001548b:	b8 0a 00 00 00       	mov    eax,0xa
c0015490:	83 fa 0e             	cmp    edx,0xe
c0015493:	77 03                	ja     c0015498 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0015495:	8d 42 fc             	lea    eax,[edx-0x4]
c0015498:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001549c:	76 17                	jbe    c00154b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001549e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00154a3:	74 5f                	je     c0015504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00154a5:	83 ec 0c             	sub    esp,0xc
c00154a8:	68 b8 27 02 c0       	push   0xc00227b8
c00154ad:	e8 35 c1 ff ff       	call   c00115e7 <KePanic(char const*)>
c00154b2:	83 c4 10             	add    esp,0x10
c00154b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00154b7:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00154bc:	74 13                	je     c00154d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c00154be:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00154c2:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c00154c9:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c00154cd:	01 d0                	add    eax,edx
c00154cf:	eb 04                	jmp    c00154d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00154d1:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00154d5:	01 c3                	add    ebx,eax
c00154d7:	89 1e                	mov    DWORD PTR [esi],ebx
c00154d9:	eb 66                	jmp    c0015541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00154db:	52                   	push   edx
c00154dc:	52                   	push   edx
c00154dd:	50                   	push   eax
c00154de:	68 d4 27 02 c0       	push   0xc00227d4
c00154e3:	e8 5d 54 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00154e8:	83 c4 10             	add    esp,0x10
c00154eb:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00154f0:	74 12                	je     c0015504 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00154f2:	83 ec 0c             	sub    esp,0xc
c00154f5:	68 df 27 02 c0       	push   0xc00227df
c00154fa:	e8 e8 c0 ff ff       	call   c00115e7 <KePanic(char const*)>
c00154ff:	83 c4 10             	add    esp,0x10
c0015502:	eb 3d                	jmp    c0015541 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015504:	83 ec 0c             	sub    esp,0xc
c0015507:	55                   	push   ebp
c0015508:	e8 85 66 ff ff       	call   c000bb92 <File::close()>
c001550d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015510:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015513:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015516:	59                   	pop    ecx
c0015517:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001551b:	e8 a6 25 ff ff       	call   c0007ac6 <free>
c0015520:	5b                   	pop    ebx
c0015521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015525:	e8 9c 25 ff ff       	call   c0007ac6 <free>
c001552a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001552d:	e8 94 25 ff ff       	call   c0007ac6 <free>
c0015532:	5e                   	pop    esi
c0015533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015537:	e8 8a 25 ff ff       	call   c0007ac6 <free>
c001553c:	83 c4 10             	add    esp,0x10
c001553f:	eb 21                	jmp    c0015562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015541:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0015545:	e9 7c fd ff ff       	jmp    c00152c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c001554a:	83 ec 0c             	sub    esp,0xc
c001554d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015551:	e8 70 25 ff ff       	call   c0007ac6 <free>
c0015556:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001555a:	83 c4 10             	add    esp,0x10
c001555d:	e9 f1 fc ff ff       	jmp    c0015253 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0015562:	31 c0                	xor    eax,eax
c0015564:	eb 33                	jmp    c0015599 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0015566:	83 ec 0c             	sub    esp,0xc
c0015569:	55                   	push   ebp
c001556a:	e8 23 66 ff ff       	call   c000bb92 <File::close()>
c001556f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015572:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015575:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015578:	58                   	pop    eax
c0015579:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001557d:	e8 44 25 ff ff       	call   c0007ac6 <free>
c0015582:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015585:	e8 3c 25 ff ff       	call   c0007ac6 <free>
c001558a:	5a                   	pop    edx
c001558b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001558f:	e8 32 25 ff ff       	call   c0007ac6 <free>
c0015594:	83 c4 10             	add    esp,0x10
c0015597:	b0 01                	mov    al,0x1
c0015599:	81 c4 5c 03 00 00    	add    esp,0x35c
c001559f:	5b                   	pop    ebx
c00155a0:	5e                   	pop    esi
c00155a1:	5f                   	pop    edi
c00155a2:	5d                   	pop    ebp
c00155a3:	c3                   	ret    

c00155a4 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00155a4:	56                   	push   esi
c00155a5:	31 d2                	xor    edx,edx
c00155a7:	53                   	push   ebx
c00155a8:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00155ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00155b2:	39 d3                	cmp    ebx,edx
c00155b4:	7e 1b                	jle    c00155d1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00155b6:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c00155bd:	39 c8                	cmp    eax,ecx
c00155bf:	77 0d                	ja     c00155ce <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00155c1:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c00155c8:	01 c6                	add    esi,eax
c00155ca:	39 ce                	cmp    esi,ecx
c00155cc:	77 05                	ja     c00155d3 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00155ce:	42                   	inc    edx
c00155cf:	eb e1                	jmp    c00155b2 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00155d1:	31 c0                	xor    eax,eax
c00155d3:	5b                   	pop    ebx
c00155d4:	5e                   	pop    esi
c00155d5:	c3                   	ret    

c00155d6 <Thr::getDriverNameFromAddress(unsigned long)>:
c00155d6:	53                   	push   ebx
c00155d7:	31 c0                	xor    eax,eax
c00155d9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00155dd:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00155e3:	39 c3                	cmp    ebx,eax
c00155e5:	7e 22                	jle    c0015609 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00155e7:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c00155ee:	39 ca                	cmp    edx,ecx
c00155f0:	77 14                	ja     c0015606 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00155f2:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c00155f9:	39 ca                	cmp    edx,ecx
c00155fb:	76 09                	jbe    c0015606 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00155fd:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c0015604:	eb 05                	jmp    c001560b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015606:	40                   	inc    eax
c0015607:	eb da                	jmp    c00155e3 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015609:	31 c0                	xor    eax,eax
c001560b:	5b                   	pop    ebx
c001560c:	c3                   	ret    

c001560d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001560d:	53                   	push   ebx
c001560e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015612:	53                   	push   ebx
c0015613:	e8 8c ff ff ff       	call   c00155a4 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015618:	5a                   	pop    edx
c0015619:	31 d2                	xor    edx,edx
c001561b:	85 c0                	test   eax,eax
c001561d:	74 04                	je     c0015623 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001561f:	89 da                	mov    edx,ebx
c0015621:	29 c2                	sub    edx,eax
c0015623:	89 d0                	mov    eax,edx
c0015625:	5b                   	pop    ebx
c0015626:	c3                   	ret    

c0015627 <Thr::loadDLL(char const*, bool)>:
c0015627:	55                   	push   ebp
c0015628:	57                   	push   edi
c0015629:	56                   	push   esi
c001562a:	53                   	push   ebx
c001562b:	81 ec 34 01 00 00    	sub    esp,0x134
c0015631:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015638:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001563f:	56                   	push   esi
c0015640:	68 f7 27 02 c0       	push   0xc00227f7
c0015645:	e8 fb 52 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001564a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015651:	e8 60 24 ff ff       	call   c0007ab6 <malloc>
c0015656:	83 c4 0c             	add    esp,0xc
c0015659:	89 c3                	mov    ebx,eax
c001565b:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0015661:	56                   	push   esi
c0015662:	50                   	push   eax
c0015663:	e8 ae 64 ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c0015668:	83 c4 10             	add    esp,0x10
c001566b:	85 db                	test   ebx,ebx
c001566d:	75 3c                	jne    c00156ab <Thr::loadDLL(char const*, bool)+0x84>
c001566f:	89 f8                	mov    eax,edi
c0015671:	84 c0                	test   al,al
c0015673:	0f 84 d2 01 00 00    	je     c001584b <Thr::loadDLL(char const*, bool)+0x224>
c0015679:	55                   	push   ebp
c001567a:	55                   	push   ebp
c001567b:	68 08 28 02 c0       	push   0xc0022808
c0015680:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0015684:	55                   	push   ebp
c0015685:	e8 b6 af fe ff       	call   c0000640 <strcpy>
c001568a:	58                   	pop    eax
c001568b:	5a                   	pop    edx
c001568c:	56                   	push   esi
c001568d:	55                   	push   ebp
c001568e:	e8 ad b1 fe ff       	call   c0000840 <strcat>
c0015693:	59                   	pop    ecx
c0015694:	58                   	pop    eax
c0015695:	68 1b 28 02 c0       	push   0xc002281b
c001569a:	55                   	push   ebp
c001569b:	e8 a0 b1 fe ff       	call   c0000840 <strcat>
c00156a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00156a3:	e8 3f bf ff ff       	call   c00115e7 <KePanic(char const*)>
c00156a8:	83 c4 10             	add    esp,0x10
c00156ab:	51                   	push   ecx
c00156ac:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00156b0:	50                   	push   eax
c00156b1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00156b5:	50                   	push   eax
c00156b6:	53                   	push   ebx
c00156b7:	e8 7a 67 ff ff       	call   c000be36 <File::stat(unsigned long long*, bool*)>
c00156bc:	83 c4 10             	add    esp,0x10
c00156bf:	85 db                	test   ebx,ebx
c00156c1:	74 0c                	je     c00156cf <Thr::loadDLL(char const*, bool)+0xa8>
c00156c3:	83 ec 0c             	sub    esp,0xc
c00156c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156c8:	53                   	push   ebx
c00156c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156cc:	83 c4 10             	add    esp,0x10
c00156cf:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00156d4:	75 0a                	jne    c00156e0 <Thr::loadDLL(char const*, bool)+0xb9>
c00156d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00156da:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00156de:	75 3c                	jne    c001571c <Thr::loadDLL(char const*, bool)+0xf5>
c00156e0:	89 f8                	mov    eax,edi
c00156e2:	84 c0                	test   al,al
c00156e4:	0f 84 49 01 00 00    	je     c0015833 <Thr::loadDLL(char const*, bool)+0x20c>
c00156ea:	51                   	push   ecx
c00156eb:	51                   	push   ecx
c00156ec:	68 08 28 02 c0       	push   0xc0022808
c00156f1:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00156f5:	53                   	push   ebx
c00156f6:	e8 45 af fe ff       	call   c0000640 <strcpy>
c00156fb:	5d                   	pop    ebp
c00156fc:	58                   	pop    eax
c00156fd:	56                   	push   esi
c00156fe:	53                   	push   ebx
c00156ff:	e8 3c b1 fe ff       	call   c0000840 <strcat>
c0015704:	58                   	pop    eax
c0015705:	5a                   	pop    edx
c0015706:	68 1b 28 02 c0       	push   0xc002281b
c001570b:	53                   	push   ebx
c001570c:	e8 2f b1 fe ff       	call   c0000840 <strcat>
c0015711:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015714:	e8 ce be ff ff       	call   c00115e7 <KePanic(char const*)>
c0015719:	83 c4 10             	add    esp,0x10
c001571c:	52                   	push   edx
c001571d:	6a 03                	push   0x3
c001571f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015723:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015727:	05 ff 0f 00 00       	add    eax,0xfff
c001572c:	83 d2 00             	adc    edx,0x0
c001572f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015733:	50                   	push   eax
c0015734:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001573a:	e8 e5 46 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c001573f:	59                   	pop    ecx
c0015740:	89 c3                	mov    ebx,eax
c0015742:	5d                   	pop    ebp
c0015743:	50                   	push   eax
c0015744:	68 92 0d 02 c0       	push   0xc0020d92
c0015749:	e8 f7 51 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001574e:	89 34 24             	mov    DWORD PTR [esp],esi
c0015751:	e8 1a ae fe ff       	call   c0000570 <strlen>
c0015756:	8b 2d 00 bf 02 c0    	mov    ebp,DWORD PTR ds:0xc002bf00
c001575c:	40                   	inc    eax
c001575d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015760:	e8 51 23 ff ff       	call   c0007ab6 <malloc>
c0015765:	89 04 ad 20 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3ce0],eax
c001576c:	58                   	pop    eax
c001576d:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015772:	5a                   	pop    edx
c0015773:	56                   	push   esi
c0015774:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c001577b:	e8 c0 ae fe ff       	call   c0000640 <strcpy>
c0015780:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c0015785:	8d 50 01             	lea    edx,[eax+0x1]
c0015788:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c001578f:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c0015795:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015799:	83 c4 0c             	add    esp,0xc
c001579c:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c00157a3:	6a 01                	push   0x1
c00157a5:	53                   	push   ebx
c00157a6:	56                   	push   esi
c00157a7:	e8 bf f6 ff ff       	call   c0014e6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00157ac:	83 c4 10             	add    esp,0x10
c00157af:	0f b6 c0             	movzx  eax,al
c00157b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00157b6:	85 c0                	test   eax,eax
c00157b8:	0f 85 89 00 00 00    	jne    c0015847 <Thr::loadDLL(char const*, bool)+0x220>
c00157be:	89 f8                	mov    eax,edi
c00157c0:	84 c0                	test   al,al
c00157c2:	74 73                	je     c0015837 <Thr::loadDLL(char const*, bool)+0x210>
c00157c4:	83 ec 0c             	sub    esp,0xc
c00157c7:	68 1d 28 02 c0       	push   0xc002281d
c00157cc:	e8 16 be ff ff       	call   c00115e7 <KePanic(char const*)>
c00157d1:	83 c4 10             	add    esp,0x10
c00157d4:	eb 61                	jmp    c0015837 <Thr::loadDLL(char const*, bool)+0x210>
c00157d6:	50                   	push   eax
c00157d7:	50                   	push   eax
c00157d8:	89 e8                	mov    eax,ebp
c00157da:	c1 e0 0c             	shl    eax,0xc
c00157dd:	01 d8                	add    eax,ebx
c00157df:	50                   	push   eax
c00157e0:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00157e6:	e8 21 41 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00157eb:	83 c4 10             	add    esp,0x10
c00157ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f0:	a8 60                	test   al,0x60
c00157f2:	75 11                	jne    c0015805 <Thr::loadDLL(char const*, bool)+0x1de>
c00157f4:	83 ec 0c             	sub    esp,0xc
c00157f7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00157fc:	50                   	push   eax
c00157fd:	e8 54 25 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0015802:	83 c4 10             	add    esp,0x10
c0015805:	45                   	inc    ebp
c0015806:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001580a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001580e:	05 ff 0f 00 00       	add    eax,0xfff
c0015813:	bf 00 00 00 00       	mov    edi,0x0
c0015818:	83 d2 00             	adc    edx,0x0
c001581b:	0f ac d0 0c          	shrd   eax,edx,0xc
c001581f:	c1 ea 0c             	shr    edx,0xc
c0015822:	39 c5                	cmp    ebp,eax
c0015824:	89 d1                	mov    ecx,edx
c0015826:	89 f8                	mov    eax,edi
c0015828:	19 c8                	sbb    eax,ecx
c001582a:	72 aa                	jb     c00157d6 <Thr::loadDLL(char const*, bool)+0x1af>
c001582c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015831:	75 18                	jne    c001584b <Thr::loadDLL(char const*, bool)+0x224>
c0015833:	31 db                	xor    ebx,ebx
c0015835:	eb 14                	jmp    c001584b <Thr::loadDLL(char const*, bool)+0x224>
c0015837:	83 ec 0c             	sub    esp,0xc
c001583a:	68 3c 28 02 c0       	push   0xc002283c
c001583f:	e8 a3 bd ff ff       	call   c00115e7 <KePanic(char const*)>
c0015844:	83 c4 10             	add    esp,0x10
c0015847:	31 ed                	xor    ebp,ebp
c0015849:	eb bb                	jmp    c0015806 <Thr::loadDLL(char const*, bool)+0x1df>
c001584b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015851:	89 d8                	mov    eax,ebx
c0015853:	5b                   	pop    ebx
c0015854:	5e                   	pop    esi
c0015855:	5f                   	pop    edi
c0015856:	5d                   	pop    ebp
c0015857:	c3                   	ret    

c0015858 <Thr::executeDLL(unsigned long, void*)>:
c0015858:	56                   	push   esi
c0015859:	53                   	push   ebx
c001585a:	52                   	push   edx
c001585b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001585f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015863:	85 db                	test   ebx,ebx
c0015865:	75 10                	jne    c0015877 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015867:	83 ec 0c             	sub    esp,0xc
c001586a:	68 58 28 02 c0       	push   0xc0022858
c001586f:	e8 73 bd ff ff       	call   c00115e7 <KePanic(char const*)>
c0015874:	83 c4 10             	add    esp,0x10
c0015877:	50                   	push   eax
c0015878:	50                   	push   eax
c0015879:	53                   	push   ebx
c001587a:	68 82 28 02 c0       	push   0xc0022882
c001587f:	e8 c1 50 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015884:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015888:	89 d8                	mov    eax,ebx
c001588a:	83 c4 14             	add    esp,0x14
c001588d:	5b                   	pop    ebx
c001588e:	5e                   	pop    esi
c001588f:	ff e0                	jmp    eax
c0015891:	66 90                	xchg   ax,ax
c0015893:	90                   	nop

c0015894 <userModeEntryPoint(void*)>:
c0015894:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0015899:	83 e8 01             	sub    eax,0x1
c001589c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00158a1:	75 01                	jne    c00158a4 <userModeEntryPoint(void*)+0x10>
c00158a3:	fb                   	sti    
c00158a4:	fb                   	sti    
c00158a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158ad:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00158b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00158b7:	e9 83 a9 fe ff       	jmp    c000023f <goToUsermode>

c00158bc <changeTSS>:
c00158bc:	83 ec 14             	sub    esp,0x14
c00158bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158c7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00158cc:	c1 e2 15             	shl    edx,0x15
c00158cf:	29 d0                	sub    eax,edx
c00158d1:	50                   	push   eax
c00158d2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00158d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00158dd:	05 7c 11 00 00       	add    eax,0x117c
c00158e2:	50                   	push   eax
c00158e3:	e8 6c 36 ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c00158e8:	83 c4 1c             	add    esp,0x1c
c00158eb:	c3                   	ret    

c00158ec <switchToThread(ThreadControlBlock*)>:
c00158ec:	57                   	push   edi
c00158ed:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00158f3:	56                   	push   esi
c00158f4:	85 c9                	test   ecx,ecx
c00158f6:	53                   	push   ebx
c00158f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158fb:	0f 85 8b 00 00 00    	jne    c001598c <switchToThread(ThreadControlBlock*)+0xa0>
c0015901:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015905:	81 fa ff 00 00 00    	cmp    edx,0xff
c001590b:	74 7b                	je     c0015988 <switchToThread(ThreadControlBlock*)+0x9c>
c001590d:	b8 00 04 00 00       	mov    eax,0x400
c0015912:	29 d0                	sub    eax,edx
c0015914:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015917:	d1 f8                	sar    eax,1
c0015919:	01 d0                	add    eax,edx
c001591b:	90                   	nop
c001591c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001591f:	e8 1e 28 00 00       	call   c0018142 <HalQueryPerformanceCounter()>
c0015924:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c0015929:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c001592f:	89 c6                	mov    esi,eax
c0015931:	89 d7                	mov    edi,edx
c0015933:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c0015939:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c001593e:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c0015944:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c001594a:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015950:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015956:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c001595c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001595f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015962:	01 c6                	add    esi,eax
c0015964:	11 d7                	adc    edi,edx
c0015966:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015969:	83 ec 0c             	sub    esp,0xc
c001596c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001596f:	53                   	push   ebx
c0015970:	e8 02 a9 fe ff       	call   c0000277 <switchToThreadASM>
c0015975:	0f 20 c0             	mov    eax,cr0
c0015978:	83 c8 08             	or     eax,0x8
c001597b:	0f 22 c0             	mov    cr0,eax
c001597e:	83 c4 10             	add    esp,0x10
c0015981:	5b                   	pop    ebx
c0015982:	5e                   	pop    esi
c0015983:	5f                   	pop    edi
c0015984:	c3                   	ret    
c0015985:	8d 76 00             	lea    esi,[esi+0x0]
c0015988:	31 c0                	xor    eax,eax
c001598a:	eb 90                	jmp    c001591c <switchToThread(ThreadControlBlock*)+0x30>
c001598c:	5b                   	pop    ebx
c001598d:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c0015997:	5e                   	pop    esi
c0015998:	5f                   	pop    edi
c0015999:	c3                   	ret    
c001599a:	66 90                	xchg   ax,ax

c001599c <Process::addArgs(char**)>:
c001599c:	57                   	push   edi
c001599d:	56                   	push   esi
c001599e:	53                   	push   ebx
c001599f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00159a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00159a7:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00159b1:	85 ff                	test   edi,edi
c00159b3:	74 4f                	je     c0015a04 <Process::addArgs(char**)+0x68>
c00159b5:	8b 07                	mov    eax,DWORD PTR [edi]
c00159b7:	85 c0                	test   eax,eax
c00159b9:	74 49                	je     c0015a04 <Process::addArgs(char**)+0x68>
c00159bb:	31 db                	xor    ebx,ebx
c00159bd:	8d 76 00             	lea    esi,[esi+0x0]
c00159c0:	83 ec 0c             	sub    esp,0xc
c00159c3:	50                   	push   eax
c00159c4:	e8 a7 ab fe ff       	call   c0000570 <strlen>
c00159c9:	83 c0 01             	add    eax,0x1
c00159cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00159cf:	e8 e2 20 ff ff       	call   c0007ab6 <malloc>
c00159d4:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00159db:	5a                   	pop    edx
c00159dc:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00159df:	59                   	pop    ecx
c00159e0:	83 c3 01             	add    ebx,0x1
c00159e3:	52                   	push   edx
c00159e4:	50                   	push   eax
c00159e5:	e8 56 ac fe ff       	call   c0000640 <strcpy>
c00159ea:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c00159f0:	83 c4 10             	add    esp,0x10
c00159f3:	83 c1 01             	add    ecx,0x1
c00159f6:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c00159fc:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00159ff:	85 c0                	test   eax,eax
c0015a01:	75 bd                	jne    c00159c0 <Process::addArgs(char**)+0x24>
c0015a03:	90                   	nop
c0015a04:	5b                   	pop    ebx
c0015a05:	5e                   	pop    esi
c0015a06:	5f                   	pop    edi
c0015a07:	c3                   	ret    

c0015a08 <Process::Process(char const*, Process*, char**)>:
c0015a08:	56                   	push   esi
c0015a09:	53                   	push   ebx
c0015a0a:	83 ec 14             	sub    esp,0x14
c0015a0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a11:	05 0c 02 00 00       	add    eax,0x20c
c0015a16:	bb 07 00 00 00       	mov    ebx,0x7
c0015a1b:	89 c6                	mov    esi,eax
c0015a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a20:	85 db                	test   ebx,ebx
c0015a22:	78 14                	js     c0015a38 <Process::Process(char const*, Process*, char**)+0x30>
c0015a24:	83 ec 0c             	sub    esp,0xc
c0015a27:	56                   	push   esi
c0015a28:	e8 eb a5 00 00       	call   c0020018 <ThreadControlBlock::ThreadControlBlock()>
c0015a2d:	83 c4 10             	add    esp,0x10
c0015a30:	83 c6 5f             	add    esi,0x5f
c0015a33:	83 eb 01             	sub    ebx,0x1
c0015a36:	eb e8                	jmp    c0015a20 <Process::Process(char const*, Process*, char**)+0x18>
c0015a38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a3c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015a43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a47:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015a4e:	83 ec 0c             	sub    esp,0xc
c0015a51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a55:	e8 82 b9 ff ff       	call   c00113dc <KeNewProcessEnv(Process*)>
c0015a5a:	83 c4 10             	add    esp,0x10
c0015a5d:	89 c2                	mov    edx,eax
c0015a5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a63:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a6d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015a76:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c0015a7b:	8d 50 01             	lea    edx,[eax+0x1]
c0015a7e:	89 15 a0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea0,edx
c0015a84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a88:	89 02                	mov    DWORD PTR [edx],eax
c0015a8a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015a92:	83 ec 0c             	sub    esp,0xc
c0015a95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015a99:	e8 18 20 ff ff       	call   c0007ab6 <malloc>
c0015a9e:	83 c4 10             	add    esp,0x10
c0015aa1:	89 c3                	mov    ebx,eax
c0015aa3:	83 ec 08             	sub    esp,0x8
c0015aa6:	6a 00                	push   0x0
c0015aa8:	53                   	push   ebx
c0015aa9:	e8 ba 45 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015aae:	83 c4 10             	add    esp,0x10
c0015ab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ab5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015abb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015abf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015ac9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015acd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ad1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015ad7:	e8 26 bf ff ff       	call   c0011a02 <KeInitSignals()>
c0015adc:	89 c2                	mov    edx,eax
c0015ade:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ae2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015af2:	85 c0                	test   eax,eax
c0015af4:	74 42                	je     c0015b38 <Process::Process(char const*, Process*, char**)+0x130>
c0015af6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015afa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b00:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015b06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b0a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b14:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b1a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b24:	05 0c 01 00 00       	add    eax,0x10c
c0015b29:	83 ec 08             	sub    esp,0x8
c0015b2c:	52                   	push   edx
c0015b2d:	50                   	push   eax
c0015b2e:	e8 0d ab fe ff       	call   c0000640 <strcpy>
c0015b33:	83 c4 10             	add    esp,0x10
c0015b36:	eb 64                	jmp    c0015b9c <Process::Process(char const*, Process*, char**)+0x194>
c0015b38:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015b40:	83 ec 0c             	sub    esp,0xc
c0015b43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015b47:	e8 6a 1f ff ff       	call   c0007ab6 <malloc>
c0015b4c:	83 c4 10             	add    esp,0x10
c0015b4f:	89 c3                	mov    ebx,eax
c0015b51:	83 ec 08             	sub    esp,0x8
c0015b54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b58:	53                   	push   ebx
c0015b59:	e8 08 31 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015b5e:	83 c4 10             	add    esp,0x10
c0015b61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b65:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015b6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b6f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015b75:	83 ec 0c             	sub    esp,0xc
c0015b78:	50                   	push   eax
c0015b79:	e8 86 29 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015b7e:	83 c4 10             	add    esp,0x10
c0015b81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b85:	05 0c 01 00 00       	add    eax,0x10c
c0015b8a:	83 ec 08             	sub    esp,0x8
c0015b8d:	68 a1 28 02 c0       	push   0xc00228a1
c0015b92:	50                   	push   eax
c0015b93:	e8 a8 aa fe ff       	call   c0000640 <strcpy>
c0015b98:	83 c4 10             	add    esp,0x10
c0015b9b:	90                   	nop
c0015b9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ba0:	83 c0 0c             	add    eax,0xc
c0015ba3:	83 ec 08             	sub    esp,0x8
c0015ba6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015baa:	50                   	push   eax
c0015bab:	e8 90 aa fe ff       	call   c0000640 <strcpy>
c0015bb0:	83 c4 10             	add    esp,0x10
c0015bb3:	83 ec 08             	sub    esp,0x8
c0015bb6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015bba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bbe:	e8 d9 fd ff ff       	call   c001599c <Process::addArgs(char**)>
c0015bc3:	83 c4 10             	add    esp,0x10
c0015bc6:	83 ec 08             	sub    esp,0x8
c0015bc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bd1:	e8 63 ed ff ff       	call   c0014939 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015bd6:	83 c4 10             	add    esp,0x10
c0015bd9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015bdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015be1:	83 f0 01             	xor    eax,0x1
c0015be4:	88 c2                	mov    dl,al
c0015be6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bea:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015bf0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015bf5:	83 ec 04             	sub    esp,0x4
c0015bf8:	50                   	push   eax
c0015bf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bfd:	68 f8 28 02 c0       	push   0xc00228f8
c0015c02:	e8 3e 4d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015c07:	83 c4 10             	add    esp,0x10
c0015c0a:	90                   	nop
c0015c0b:	83 c4 14             	add    esp,0x14
c0015c0e:	5b                   	pop    ebx
c0015c0f:	5e                   	pop    esi
c0015c10:	c3                   	ret    
c0015c11:	90                   	nop
c0015c12:	66 90                	xchg   ax,ax

c0015c14 <Process::Process(bool, char const*, Process*, char**)>:
c0015c14:	56                   	push   esi
c0015c15:	53                   	push   ebx
c0015c16:	83 ec 24             	sub    esp,0x24
c0015c19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c1d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015c21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c25:	05 0c 02 00 00       	add    eax,0x20c
c0015c2a:	bb 07 00 00 00       	mov    ebx,0x7
c0015c2f:	89 c6                	mov    esi,eax
c0015c31:	8d 76 00             	lea    esi,[esi+0x0]
c0015c34:	85 db                	test   ebx,ebx
c0015c36:	78 14                	js     c0015c4c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015c38:	83 ec 0c             	sub    esp,0xc
c0015c3b:	56                   	push   esi
c0015c3c:	e8 d7 a3 00 00       	call   c0020018 <ThreadControlBlock::ThreadControlBlock()>
c0015c41:	83 c4 10             	add    esp,0x10
c0015c44:	83 c6 5f             	add    esi,0x5f
c0015c47:	83 eb 01             	sub    ebx,0x1
c0015c4a:	eb e8                	jmp    c0015c34 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015c4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c50:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015c57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c5b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015c62:	83 ec 0c             	sub    esp,0xc
c0015c65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015c69:	e8 6e b7 ff ff       	call   c00113dc <KeNewProcessEnv(Process*)>
c0015c6e:	83 c4 10             	add    esp,0x10
c0015c71:	89 c2                	mov    edx,eax
c0015c73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c77:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015c7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c81:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015c8a:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c0015c8f:	8d 50 01             	lea    edx,[eax+0x1]
c0015c92:	89 15 a0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea0,edx
c0015c98:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015c9c:	89 02                	mov    DWORD PTR [edx],eax
c0015c9e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015ca6:	83 ec 0c             	sub    esp,0xc
c0015ca9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015cad:	e8 04 1e ff ff       	call   c0007ab6 <malloc>
c0015cb2:	83 c4 10             	add    esp,0x10
c0015cb5:	89 c3                	mov    ebx,eax
c0015cb7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015cbc:	83 ec 08             	sub    esp,0x8
c0015cbf:	50                   	push   eax
c0015cc0:	53                   	push   ebx
c0015cc1:	e8 a2 43 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015cc6:	83 c4 10             	add    esp,0x10
c0015cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ccd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015cd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cd7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015ce1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ce5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015ce9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015cef:	e8 0e bd ff ff       	call   c0011a02 <KeInitSignals()>
c0015cf4:	89 c2                	mov    edx,eax
c0015cf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cfa:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015d00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d04:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d0a:	85 c0                	test   eax,eax
c0015d0c:	74 42                	je     c0015d50 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015d0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d12:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d18:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015d1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d22:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015d28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d2c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d32:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015d38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d3c:	05 0c 01 00 00       	add    eax,0x10c
c0015d41:	83 ec 08             	sub    esp,0x8
c0015d44:	52                   	push   edx
c0015d45:	50                   	push   eax
c0015d46:	e8 f5 a8 fe ff       	call   c0000640 <strcpy>
c0015d4b:	83 c4 10             	add    esp,0x10
c0015d4e:	eb 64                	jmp    c0015db4 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015d50:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015d58:	83 ec 0c             	sub    esp,0xc
c0015d5b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015d5f:	e8 52 1d ff ff       	call   c0007ab6 <malloc>
c0015d64:	83 c4 10             	add    esp,0x10
c0015d67:	89 c3                	mov    ebx,eax
c0015d69:	83 ec 08             	sub    esp,0x8
c0015d6c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d70:	53                   	push   ebx
c0015d71:	e8 f0 2e ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015d76:	83 c4 10             	add    esp,0x10
c0015d79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d7d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015d83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d87:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015d8d:	83 ec 0c             	sub    esp,0xc
c0015d90:	50                   	push   eax
c0015d91:	e8 6e 27 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015d96:	83 c4 10             	add    esp,0x10
c0015d99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d9d:	05 0c 01 00 00       	add    eax,0x10c
c0015da2:	83 ec 08             	sub    esp,0x8
c0015da5:	68 a1 28 02 c0       	push   0xc00228a1
c0015daa:	50                   	push   eax
c0015dab:	e8 90 a8 fe ff       	call   c0000640 <strcpy>
c0015db0:	83 c4 10             	add    esp,0x10
c0015db3:	90                   	nop
c0015db4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015db8:	83 c0 0c             	add    eax,0xc
c0015dbb:	83 ec 08             	sub    esp,0x8
c0015dbe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015dc2:	50                   	push   eax
c0015dc3:	e8 78 a8 fe ff       	call   c0000640 <strcpy>
c0015dc8:	83 c4 10             	add    esp,0x10
c0015dcb:	83 ec 08             	sub    esp,0x8
c0015dce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015dd2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015dd6:	e8 c1 fb ff ff       	call   c001599c <Process::addArgs(char**)>
c0015ddb:	83 c4 10             	add    esp,0x10
c0015dde:	90                   	nop
c0015ddf:	83 c4 24             	add    esp,0x24
c0015de2:	5b                   	pop    ebx
c0015de3:	5e                   	pop    esi
c0015de4:	c3                   	ret    
c0015de5:	8d 76 00             	lea    esi,[esi+0x0]

c0015de8 <taskStartupFunction>:
c0015de8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ded:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015df0:	c3                   	ret    
c0015df1:	90                   	nop
c0015df2:	66 90                	xchg   ax,ax

c0015df4 <Semaphore::Semaphore(int)>:
c0015df4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015df8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015dfc:	89 10                	mov    DWORD PTR [eax],edx
c0015dfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e02:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015e09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e0d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e18:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015e1f:	90                   	nop
c0015e20:	c3                   	ret    
c0015e21:	90                   	nop
c0015e22:	66 90                	xchg   ax,ax

c0015e24 <Mutex::Mutex()>:
c0015e24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e28:	6a 01                	push   0x1
c0015e2a:	50                   	push   eax
c0015e2b:	e8 c4 ff ff ff       	call   c0015df4 <Semaphore::Semaphore(int)>
c0015e30:	83 c4 08             	add    esp,0x8
c0015e33:	90                   	nop
c0015e34:	c3                   	ret    
c0015e35:	90                   	nop
c0015e36:	66 90                	xchg   ax,ax

c0015e38 <Process::createThread(void (*)(void*), void*, int)>:
c0015e38:	57                   	push   edi
c0015e39:	31 c9                	xor    ecx,ecx
c0015e3b:	56                   	push   esi
c0015e3c:	53                   	push   ebx
c0015e3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e41:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015e48:	89 f2                	mov    edx,esi
c0015e4a:	66 90                	xchg   ax,ax
c0015e4c:	0f b7 c2             	movzx  eax,dx
c0015e4f:	80 e2 01             	and    dl,0x1
c0015e52:	74 14                	je     c0015e68 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015e54:	d1 f8                	sar    eax,1
c0015e56:	83 c1 01             	add    ecx,0x1
c0015e59:	89 c2                	mov    edx,eax
c0015e5b:	83 f9 10             	cmp    ecx,0x10
c0015e5e:	75 ec                	jne    c0015e4c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015e60:	31 db                	xor    ebx,ebx
c0015e62:	89 d8                	mov    eax,ebx
c0015e64:	5b                   	pop    ebx
c0015e65:	5e                   	pop    esi
c0015e66:	5f                   	pop    edi
c0015e67:	c3                   	ret    
c0015e68:	b8 01 00 00 00       	mov    eax,0x1
c0015e6d:	d3 e0                	shl    eax,cl
c0015e6f:	09 c6                	or     esi,eax
c0015e71:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015e74:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015e7b:	01 c0                	add    eax,eax
c0015e7d:	01 c8                	add    eax,ecx
c0015e7f:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e82:	01 d8                	add    eax,ebx
c0015e84:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015e8b:	75 0b                	jne    c0015e98 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015e8d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015e97:	90                   	nop
c0015e98:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015e9e:	83 ec 0c             	sub    esp,0xc
c0015ea1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015ea4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015ea7:	01 c0                	add    eax,eax
c0015ea9:	01 c8                	add    eax,ecx
c0015eab:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015eae:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015eb1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015eb7:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015ebd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015ec1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015ec7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015ecd:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015ed3:	89 ca                	mov    edx,ecx
c0015ed5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015edc:	f7 da                	neg    edx
c0015ede:	c1 e2 15             	shl    edx,0x15
c0015ee1:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015ee7:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015eed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ef1:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015efb:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015f01:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f05:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015f0b:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015f15:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015f1f:	68 00 01 00 00       	push   0x100
c0015f24:	e8 8d 1b ff ff       	call   c0007ab6 <malloc>
c0015f29:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015f2c:	58                   	pop    eax
c0015f2d:	5a                   	pop    edx
c0015f2e:	53                   	push   ebx
c0015f2f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f34:	e8 77 9e 00 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f39:	83 c4 10             	add    esp,0x10
c0015f3c:	89 d8                	mov    eax,ebx
c0015f3e:	5b                   	pop    ebx
c0015f3f:	5e                   	pop    esi
c0015f40:	5f                   	pop    edi
c0015f41:	c3                   	ret    
c0015f42:	66 90                	xchg   ax,ax

c0015f44 <Process::createUserThread()>:
c0015f44:	83 ec 0c             	sub    esp,0xc
c0015f47:	68 80 00 00 00       	push   0x80
c0015f4c:	6a 00                	push   0x0
c0015f4e:	68 94 58 01 c0       	push   0xc0015894
c0015f53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f57:	50                   	push   eax
c0015f58:	e8 db fe ff ff       	call   c0015e38 <Process::createThread(void (*)(void*), void*, int)>
c0015f5d:	83 c4 1c             	add    esp,0x1c
c0015f60:	c3                   	ret    
c0015f61:	8d 76 00             	lea    esi,[esi+0x0]

c0015f64 <setupMultitasking(void (*)())>:
c0015f64:	56                   	push   esi
c0015f65:	53                   	push   ebx
c0015f66:	83 ec 04             	sub    esp,0x4
c0015f69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f6d:	eb 11                	jmp    c0015f80 <setupMultitasking(void (*)())+0x1c>
c0015f6f:	90                   	nop
c0015f70:	83 ec 0c             	sub    esp,0xc
c0015f73:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f78:	e8 77 9d 00 00       	call   c001fcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f7d:	83 c4 10             	add    esp,0x10
c0015f80:	83 ec 0c             	sub    esp,0xc
c0015f83:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f88:	e8 43 9d 00 00       	call   c001fcd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015f8d:	83 c4 10             	add    esp,0x10
c0015f90:	84 c0                	test   al,al
c0015f92:	74 dc                	je     c0015f70 <setupMultitasking(void (*)())+0xc>
c0015f94:	83 ec 0c             	sub    esp,0xc
c0015f97:	68 24 07 00 00       	push   0x724
c0015f9c:	e8 15 1b ff ff       	call   c0007ab6 <malloc>
c0015fa1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015fa8:	89 c3                	mov    ebx,eax
c0015faa:	6a 00                	push   0x0
c0015fac:	68 a5 28 02 c0       	push   0xc00228a5
c0015fb1:	6a 01                	push   0x1
c0015fb3:	50                   	push   eax
c0015fb4:	e8 5b fc ff ff       	call   c0015c14 <Process::Process(bool, char const*, Process*, char**)>
c0015fb9:	83 c4 14             	add    esp,0x14
c0015fbc:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015fc2:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0015fc8:	50                   	push   eax
c0015fc9:	e8 8b 27 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015fce:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015fd5:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015fdf:	83 c8 01             	or     eax,0x1
c0015fe2:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015fe9:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015fef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015ff2:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015ffc:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016002:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0016008:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016012:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001601c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016026:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001602c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016036:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001603c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016046:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c001604d:	e8 64 1a ff ff       	call   c0007ab6 <malloc>
c0016052:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016058:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001605e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016064:	5a                   	pop    edx
c0016065:	59                   	pop    ecx
c0016066:	68 a1 28 02 c0       	push   0xc00228a1
c001606b:	50                   	push   eax
c001606c:	e8 cf a5 fe ff       	call   c0000640 <strcpy>
c0016071:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0016078:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001607c:	83 c4 14             	add    esp,0x14
c001607f:	5b                   	pop    ebx
c0016080:	5e                   	pop    esi
c0016081:	e9 e3 a1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0016086:	66 90                	xchg   ax,ax

c0016088 <schedule()>:
c0016088:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c001608e:	85 d2                	test   edx,edx
c0016090:	74 0e                	je     c00160a0 <schedule()+0x18>
c0016092:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c001609c:	c3                   	ret    
c001609d:	8d 76 00             	lea    esi,[esi+0x0]
c00160a0:	53                   	push   ebx
c00160a1:	83 ec 14             	sub    esp,0x14
c00160a4:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160a9:	e8 22 9c 00 00       	call   c001fcd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00160ae:	83 c4 10             	add    esp,0x10
c00160b1:	84 c0                	test   al,al
c00160b3:	75 3f                	jne    c00160f4 <schedule()+0x6c>
c00160b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160ba:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00160bd:	83 fa 01             	cmp    edx,0x1
c00160c0:	74 3a                	je     c00160fc <schedule()+0x74>
c00160c2:	66 90                	xchg   ax,ax
c00160c4:	83 ec 0c             	sub    esp,0xc
c00160c7:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160cc:	e8 1b 9c 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00160d1:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00160d8:	89 c3                	mov    ebx,eax
c00160da:	e8 15 9c 00 00       	call   c001fcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00160df:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00160e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160e9:	e8 fe f7 ff ff       	call   c00158ec <switchToThread(ThreadControlBlock*)>
c00160ee:	83 c4 10             	add    esp,0x10
c00160f1:	8d 76 00             	lea    esi,[esi+0x0]
c00160f4:	83 c4 08             	add    esp,0x8
c00160f7:	5b                   	pop    ebx
c00160f8:	c3                   	ret    
c00160f9:	8d 76 00             	lea    esi,[esi+0x0]
c00160fc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016103:	83 ec 08             	sub    esp,0x8
c0016106:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001610b:	50                   	push   eax
c001610c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016111:	e8 9a 9c 00 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016116:	83 c4 10             	add    esp,0x10
c0016119:	eb a9                	jmp    c00160c4 <schedule()+0x3c>
c001611b:	90                   	nop

c001611c <Semaphore::tryAcquire()>:
c001611c:	53                   	push   ebx
c001611d:	83 ec 08             	sub    esp,0x8
c0016120:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016124:	fa                   	cli    
c0016125:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001612a:	8d 50 01             	lea    edx,[eax+0x1]
c001612d:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016133:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016139:	8d 5a 01             	lea    ebx,[edx+0x1]
c001613c:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c0016142:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0016145:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0016147:	7c 33                	jl     c001617c <Semaphore::tryAcquire()+0x60>
c0016149:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c001614f:	85 d2                	test   edx,edx
c0016151:	75 0d                	jne    c0016160 <Semaphore::tryAcquire()+0x44>
c0016153:	8b 15 c0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c0
c0016159:	85 d2                	test   edx,edx
c001615b:	75 6f                	jne    c00161cc <Semaphore::tryAcquire()+0xb0>
c001615d:	8d 76 00             	lea    esi,[esi+0x0]
c0016160:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016165:	85 c0                	test   eax,eax
c0016167:	74 0b                	je     c0016174 <Semaphore::tryAcquire()+0x58>
c0016169:	8d 76 00             	lea    esi,[esi+0x0]
c001616c:	31 c0                	xor    eax,eax
c001616e:	83 c4 08             	add    esp,0x8
c0016171:	5b                   	pop    ebx
c0016172:	c3                   	ret    
c0016173:	90                   	nop
c0016174:	fb                   	sti    
c0016175:	83 c4 08             	add    esp,0x8
c0016178:	5b                   	pop    ebx
c0016179:	c3                   	ret    
c001617a:	66 90                	xchg   ax,ax
c001617c:	83 c3 01             	add    ebx,0x1
c001617f:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c0016185:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0016188:	85 d2                	test   edx,edx
c001618a:	75 24                	jne    c00161b0 <Semaphore::tryAcquire()+0x94>
c001618c:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c0016192:	85 c9                	test   ecx,ecx
c0016194:	74 1a                	je     c00161b0 <Semaphore::tryAcquire()+0x94>
c0016196:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00161a0:	e8 e3 fe ff ff       	call   c0016088 <schedule()>
c00161a5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161aa:	83 e8 01             	sub    eax,0x1
c00161ad:	8d 76 00             	lea    esi,[esi+0x0]
c00161b0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161b5:	85 c0                	test   eax,eax
c00161b7:	75 0b                	jne    c00161c4 <Semaphore::tryAcquire()+0xa8>
c00161b9:	fb                   	sti    
c00161ba:	b0 01                	mov    al,0x1
c00161bc:	83 c4 08             	add    esp,0x8
c00161bf:	5b                   	pop    ebx
c00161c0:	c3                   	ret    
c00161c1:	8d 76 00             	lea    esi,[esi+0x0]
c00161c4:	b0 01                	mov    al,0x1
c00161c6:	83 c4 08             	add    esp,0x8
c00161c9:	5b                   	pop    ebx
c00161ca:	c3                   	ret    
c00161cb:	90                   	nop
c00161cc:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00161d6:	e8 ad fe ff ff       	call   c0016088 <schedule()>
c00161db:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161e0:	83 e8 01             	sub    eax,0x1
c00161e3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161e8:	85 c0                	test   eax,eax
c00161ea:	75 80                	jne    c001616c <Semaphore::tryAcquire()+0x50>
c00161ec:	eb 86                	jmp    c0016174 <Semaphore::tryAcquire()+0x58>
c00161ee:	66 90                	xchg   ax,ax

c00161f0 <Semaphore::assertLocked(char const*)>:
c00161f0:	83 ec 0c             	sub    esp,0xc
c00161f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161f7:	fa                   	cli    
c00161f8:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c00161fe:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016203:	83 c1 01             	add    ecx,0x1
c0016206:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001620c:	8d 48 01             	lea    ecx,[eax+0x1]
c001620f:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016215:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0016217:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001621a:	7c 28                	jl     c0016244 <Semaphore::assertLocked(char const*)+0x54>
c001621c:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016221:	85 c0                	test   eax,eax
c0016223:	75 0b                	jne    c0016230 <Semaphore::assertLocked(char const*)+0x40>
c0016225:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001622a:	85 c0                	test   eax,eax
c001622c:	75 32                	jne    c0016260 <Semaphore::assertLocked(char const*)+0x70>
c001622e:	66 90                	xchg   ax,ax
c0016230:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016235:	83 e8 01             	sub    eax,0x1
c0016238:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001623d:	75 01                	jne    c0016240 <Semaphore::assertLocked(char const*)+0x50>
c001623f:	fb                   	sti    
c0016240:	83 c4 0c             	add    esp,0xc
c0016243:	c3                   	ret    
c0016244:	83 ec 0c             	sub    esp,0xc
c0016247:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001624b:	52                   	push   edx
c001624c:	e8 96 b3 ff ff       	call   c00115e7 <KePanic(char const*)>
c0016251:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016256:	83 c4 10             	add    esp,0x10
c0016259:	83 e8 01             	sub    eax,0x1
c001625c:	eb be                	jmp    c001621c <Semaphore::assertLocked(char const*)+0x2c>
c001625e:	66 90                	xchg   ax,ax
c0016260:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001626a:	e8 19 fe ff ff       	call   c0016088 <schedule()>
c001626f:	eb bf                	jmp    c0016230 <Semaphore::assertLocked(char const*)+0x40>
c0016271:	8d 76 00             	lea    esi,[esi+0x0]

c0016274 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016274:	83 ec 0c             	sub    esp,0xc
c0016277:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001627c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016280:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016283:	e8 00 fe ff ff       	call   c0016088 <schedule()>
c0016288:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001628d:	83 e8 01             	sub    eax,0x1
c0016290:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016295:	75 01                	jne    c0016298 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0016297:	fb                   	sti    
c0016298:	83 c4 0c             	add    esp,0xc
c001629b:	c3                   	ret    

c001629c <blockTask(TaskState)>:
c001629c:	83 ec 0c             	sub    esp,0xc
c001629f:	fa                   	cli    
c00162a0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162a9:	83 c0 01             	add    eax,0x1
c00162ac:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162b6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00162b9:	e8 ca fd ff ff       	call   c0016088 <schedule()>
c00162be:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162c3:	83 e8 01             	sub    eax,0x1
c00162c6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162cb:	75 03                	jne    c00162d0 <blockTask(TaskState)+0x34>
c00162cd:	fb                   	sti    
c00162ce:	66 90                	xchg   ax,ax
c00162d0:	83 c4 0c             	add    esp,0xc
c00162d3:	c3                   	ret    

c00162d4 <waitTask(int, int*, int)>:
c00162d4:	83 ec 18             	sub    esp,0x18
c00162d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00162e0:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00162e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00162e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162ec:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00162ef:	6a 07                	push   0x7
c00162f1:	e8 a6 ff ff ff       	call   c001629c <blockTask(TaskState)>
c00162f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162fb:	83 c4 10             	add    esp,0x10
c00162fe:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016301:	85 d2                	test   edx,edx
c0016303:	74 0b                	je     c0016310 <waitTask(int, int*, int)+0x3c>
c0016305:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016308:	89 02                	mov    DWORD PTR [edx],eax
c001630a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001630f:	90                   	nop
c0016310:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016313:	83 c4 0c             	add    esp,0xc
c0016316:	c3                   	ret    
c0016317:	90                   	nop

c0016318 <milliTenthSleepUntil(unsigned int)>:
c0016318:	83 ec 0c             	sub    esp,0xc
c001631b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001631f:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c0016325:	76 05                	jbe    c001632c <milliTenthSleepUntil(unsigned int)+0x14>
c0016327:	90                   	nop
c0016328:	83 c4 0c             	add    esp,0xc
c001632b:	c3                   	ret    
c001632c:	fa                   	cli    
c001632d:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016333:	83 ec 08             	sub    esp,0x8
c0016336:	83 c2 01             	add    edx,0x1
c0016339:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c001633f:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016345:	83 c1 01             	add    ecx,0x1
c0016348:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001634e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016354:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0016357:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001635c:	50                   	push   eax
c001635d:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016362:	e8 49 9a 00 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016367:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001636e:	e8 29 ff ff ff       	call   c001629c <blockTask(TaskState)>
c0016373:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016378:	83 c4 10             	add    esp,0x10
c001637b:	83 e8 01             	sub    eax,0x1
c001637e:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016383:	85 c0                	test   eax,eax
c0016385:	75 09                	jne    c0016390 <milliTenthSleepUntil(unsigned int)+0x78>
c0016387:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001638c:	85 c0                	test   eax,eax
c001638e:	75 14                	jne    c00163a4 <milliTenthSleepUntil(unsigned int)+0x8c>
c0016390:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016395:	83 e8 01             	sub    eax,0x1
c0016398:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001639d:	75 89                	jne    c0016328 <milliTenthSleepUntil(unsigned int)+0x10>
c001639f:	fb                   	sti    
c00163a0:	83 c4 0c             	add    esp,0xc
c00163a3:	c3                   	ret    
c00163a4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00163ae:	e8 d5 fc ff ff       	call   c0016088 <schedule()>
c00163b3:	eb db                	jmp    c0016390 <milliTenthSleepUntil(unsigned int)+0x78>
c00163b5:	8d 76 00             	lea    esi,[esi+0x0]

c00163b8 <milliTenthSleep(unsigned int)>:
c00163b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00163bc:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c00163c1:	01 c2                	add    edx,eax
c00163c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00163c7:	e9 4c ff ff ff       	jmp    c0016318 <milliTenthSleepUntil(unsigned int)>

c00163cc <sleep(unsigned int)>:
c00163cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163d0:	8d 04 80             	lea    eax,[eax+eax*4]
c00163d3:	8d 04 80             	lea    eax,[eax+eax*4]
c00163d6:	8d 04 80             	lea    eax,[eax+eax*4]
c00163d9:	8d 04 80             	lea    eax,[eax+eax*4]
c00163dc:	c1 e0 04             	shl    eax,0x4
c00163df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00163e3:	eb d3                	jmp    c00163b8 <milliTenthSleep(unsigned int)>
c00163e5:	90                   	nop
c00163e6:	66 90                	xchg   ax,ax

c00163e8 <Semaphore::acquire()>:
c00163e8:	83 ec 0c             	sub    esp,0xc
c00163eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163ef:	fa                   	cli    
c00163f0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163f5:	83 c0 01             	add    eax,0x1
c00163f8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163fd:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016402:	8d 48 01             	lea    ecx,[eax+0x1]
c0016405:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001640b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001640e:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016410:	7d 2e                	jge    c0016440 <Semaphore::acquire()+0x58>
c0016412:	83 c1 01             	add    ecx,0x1
c0016415:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016418:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001641d:	85 c0                	test   eax,eax
c001641f:	75 0b                	jne    c001642c <Semaphore::acquire()+0x44>
c0016421:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016426:	85 c0                	test   eax,eax
c0016428:	75 66                	jne    c0016490 <Semaphore::acquire()+0xa8>
c001642a:	66 90                	xchg   ax,ax
c001642c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016431:	83 e8 01             	sub    eax,0x1
c0016434:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016439:	75 01                	jne    c001643c <Semaphore::acquire()+0x54>
c001643b:	fb                   	sti    
c001643c:	83 c4 0c             	add    esp,0xc
c001643f:	c3                   	ret    
c0016440:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016445:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001644c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001644f:	85 c9                	test   ecx,ecx
c0016451:	74 51                	je     c00164a4 <Semaphore::acquire()+0xbc>
c0016453:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0016456:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001645c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001645f:	90                   	nop
c0016460:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016465:	83 ec 0c             	sub    esp,0xc
c0016468:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001646b:	68 24 29 02 c0       	push   0xc0022924
c0016470:	e8 d0 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016475:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001647c:	e8 1b fe ff ff       	call   c001629c <blockTask(TaskState)>
c0016481:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016486:	83 c4 10             	add    esp,0x10
c0016489:	83 e8 01             	sub    eax,0x1
c001648c:	eb 8a                	jmp    c0016418 <Semaphore::acquire()+0x30>
c001648e:	66 90                	xchg   ax,ax
c0016490:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c001649a:	e8 e9 fb ff ff       	call   c0016088 <schedule()>
c001649f:	eb 8b                	jmp    c001642c <Semaphore::acquire()+0x44>
c00164a1:	8d 76 00             	lea    esi,[esi+0x0]
c00164a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164a9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00164ac:	eb b2                	jmp    c0016460 <Semaphore::acquire()+0x78>
c00164ae:	66 90                	xchg   ax,ax

c00164b0 <taskReturned>:
c00164b0:	83 ec 18             	sub    esp,0x18
c00164b3:	68 44 29 02 c0       	push   0xc0022944
c00164b8:	e8 2a b1 ff ff       	call   c00115e7 <KePanic(char const*)>
c00164bd:	83 c4 10             	add    esp,0x10
c00164c0:	83 ec 0c             	sub    esp,0xc
c00164c3:	6a 02                	push   0x2
c00164c5:	e8 d2 fd ff ff       	call   c001629c <blockTask(TaskState)>
c00164ca:	fa                   	cli    
c00164cb:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164d0:	83 c0 01             	add    eax,0x1
c00164d3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164d8:	e8 ab fb ff ff       	call   c0016088 <schedule()>
c00164dd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164e2:	83 c4 10             	add    esp,0x10
c00164e5:	83 e8 01             	sub    eax,0x1
c00164e8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164ed:	85 c0                	test   eax,eax
c00164ef:	75 cf                	jne    c00164c0 <taskReturned+0x10>
c00164f1:	fb                   	sti    
c00164f2:	eb cc                	jmp    c00164c0 <taskReturned+0x10>

c00164f4 <Thr::processFromPID(int)>:
c00164f4:	57                   	push   edi
c00164f5:	56                   	push   esi
c00164f6:	53                   	push   ebx
c00164f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164fb:	fa                   	cli    
c00164fc:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016502:	83 ec 0c             	sub    esp,0xc
c0016505:	83 c1 01             	add    ecx,0x1
c0016508:	68 e4 c6 02 c0       	push   0xc002c6e4
c001650d:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016513:	e8 d4 97 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016518:	83 c4 10             	add    esp,0x10
c001651b:	89 c7                	mov    edi,eax
c001651d:	eb 15                	jmp    c0016534 <Thr::processFromPID(int)+0x40>
c001651f:	90                   	nop
c0016520:	83 ec 0c             	sub    esp,0xc
c0016523:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016528:	e8 bf 97 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001652d:	83 c4 10             	add    esp,0x10
c0016530:	39 f8                	cmp    eax,edi
c0016532:	74 50                	je     c0016584 <Thr::processFromPID(int)+0x90>
c0016534:	83 ec 0c             	sub    esp,0xc
c0016537:	68 e4 c6 02 c0       	push   0xc002c6e4
c001653c:	e8 ab 97 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016541:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016548:	89 c3                	mov    ebx,eax
c001654a:	e8 a5 97 00 00       	call   c001fcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001654f:	58                   	pop    eax
c0016550:	5a                   	pop    edx
c0016551:	53                   	push   ebx
c0016552:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016557:	e8 54 98 00 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001655c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001655f:	83 c4 10             	add    esp,0x10
c0016562:	39 30                	cmp    DWORD PTR [eax],esi
c0016564:	75 ba                	jne    c0016520 <Thr::processFromPID(int)+0x2c>
c0016566:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001656b:	83 e8 01             	sub    eax,0x1
c001656e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016573:	74 0b                	je     c0016580 <Thr::processFromPID(int)+0x8c>
c0016575:	8d 76 00             	lea    esi,[esi+0x0]
c0016578:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001657b:	5b                   	pop    ebx
c001657c:	5e                   	pop    esi
c001657d:	5f                   	pop    edi
c001657e:	c3                   	ret    
c001657f:	90                   	nop
c0016580:	fb                   	sti    
c0016581:	eb f5                	jmp    c0016578 <Thr::processFromPID(int)+0x84>
c0016583:	90                   	nop
c0016584:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016589:	83 e8 01             	sub    eax,0x1
c001658c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016591:	75 05                	jne    c0016598 <Thr::processFromPID(int)+0xa4>
c0016593:	fb                   	sti    
c0016594:	5b                   	pop    ebx
c0016595:	5e                   	pop    esi
c0016596:	5f                   	pop    edi
c0016597:	c3                   	ret    
c0016598:	5b                   	pop    ebx
c0016599:	31 c0                	xor    eax,eax
c001659b:	5e                   	pop    esi
c001659c:	5f                   	pop    edi
c001659d:	c3                   	ret    
c001659e:	66 90                	xchg   ax,ax

c00165a0 <unblockTask(ThreadControlBlock*)>:
c00165a0:	53                   	push   ebx
c00165a1:	83 ec 08             	sub    esp,0x8
c00165a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165a8:	fa                   	cli    
c00165a9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165ae:	83 c0 01             	add    eax,0x1
c00165b1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165b6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165b9:	85 c0                	test   eax,eax
c00165bb:	74 67                	je     c0016624 <unblockTask(ThreadControlBlock*)+0x84>
c00165bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165c0:	83 f8 01             	cmp    eax,0x1
c00165c3:	74 37                	je     c00165fc <unblockTask(ThreadControlBlock*)+0x5c>
c00165c5:	83 ec 0c             	sub    esp,0xc
c00165c8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165cd:	e8 1a 97 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165d2:	83 c4 10             	add    esp,0x10
c00165d5:	85 c0                	test   eax,eax
c00165d7:	75 1b                	jne    c00165f4 <unblockTask(ThreadControlBlock*)+0x54>
c00165d9:	eb 5d                	jmp    c0016638 <unblockTask(ThreadControlBlock*)+0x98>
c00165db:	90                   	nop
c00165dc:	83 ec 08             	sub    esp,0x8
c00165df:	50                   	push   eax
c00165e0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165e5:	e8 22 9a 00 00       	call   c002000c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00165ea:	83 c4 10             	add    esp,0x10
c00165ed:	85 c0                	test   eax,eax
c00165ef:	74 47                	je     c0016638 <unblockTask(ThreadControlBlock*)+0x98>
c00165f1:	8d 76 00             	lea    esi,[esi+0x0]
c00165f4:	39 c3                	cmp    ebx,eax
c00165f6:	75 e4                	jne    c00165dc <unblockTask(ThreadControlBlock*)+0x3c>
c00165f8:	eb 12                	jmp    c001660c <unblockTask(ThreadControlBlock*)+0x6c>
c00165fa:	66 90                	xchg   ax,ax
c00165fc:	83 ec 0c             	sub    esp,0xc
c00165ff:	68 c3 28 02 c0       	push   0xc00228c3
c0016604:	e8 3c 43 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016609:	83 c4 10             	add    esp,0x10
c001660c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016611:	83 e8 01             	sub    eax,0x1
c0016614:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016619:	75 01                	jne    c001661c <unblockTask(ThreadControlBlock*)+0x7c>
c001661b:	fb                   	sti    
c001661c:	83 c4 08             	add    esp,0x8
c001661f:	5b                   	pop    ebx
c0016620:	c3                   	ret    
c0016621:	8d 76 00             	lea    esi,[esi+0x0]
c0016624:	83 ec 0c             	sub    esp,0xc
c0016627:	68 ac 28 02 c0       	push   0xc00228ac
c001662c:	e8 14 43 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016631:	83 c4 10             	add    esp,0x10
c0016634:	eb d6                	jmp    c001660c <unblockTask(ThreadControlBlock*)+0x6c>
c0016636:	66 90                	xchg   ax,ax
c0016638:	83 ec 08             	sub    esp,0x8
c001663b:	53                   	push   ebx
c001663c:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016641:	e8 6a 97 00 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016646:	83 c4 10             	add    esp,0x10
c0016649:	eb c1                	jmp    c001660c <unblockTask(ThreadControlBlock*)+0x6c>
c001664b:	90                   	nop

c001664c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001664c:	55                   	push   ebp
c001664d:	57                   	push   edi
c001664e:	56                   	push   esi
c001664f:	53                   	push   ebx
c0016650:	83 ec 1c             	sub    esp,0x1c
c0016653:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016657:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001665a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016660:	85 ed                	test   ebp,ebp
c0016662:	7e 28                	jle    c001668c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016664:	31 f6                	xor    esi,esi
c0016666:	66 90                	xchg   ax,ax
c0016668:	83 ec 0c             	sub    esp,0xc
c001666b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016672:	83 c6 01             	add    esi,0x1
c0016675:	57                   	push   edi
c0016676:	e8 4b 14 ff ff       	call   c0007ac6 <free>
c001667b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001667e:	83 c4 10             	add    esp,0x10
c0016681:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016687:	7f df                	jg     c0016668 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016689:	8d 76 00             	lea    esi,[esi+0x0]
c001668c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016696:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001669b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001669e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00166a1:	d3 c0                	rol    eax,cl
c00166a3:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00166aa:	21 c8                	and    eax,ecx
c00166ac:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00166b3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166b6:	89 f7                	mov    edi,esi
c00166b8:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00166c0:	0f 85 72 01 00 00    	jne    c0016838 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00166c6:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00166cc:	85 ed                	test   ebp,ebp
c00166ce:	74 1c                	je     c00166ec <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00166d0:	83 ec 0c             	sub    esp,0xc
c00166d3:	55                   	push   ebp
c00166d4:	e8 1f ac ff ff       	call   c00112f8 <EnvVarContainer::~EnvVarContainer()>
c00166d9:	59                   	pop    ecx
c00166da:	5e                   	pop    esi
c00166db:	6a 0c                	push   0xc
c00166dd:	55                   	push   ebp
c00166de:	e8 35 41 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00166e3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166e6:	83 c4 10             	add    esp,0x10
c00166e9:	89 f7                	mov    edi,esi
c00166eb:	90                   	nop
c00166ec:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00166f2:	85 c0                	test   eax,eax
c00166f4:	0f 84 b2 00 00 00    	je     c00167ac <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00166fa:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00166fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016701:	31 c9                	xor    ecx,ecx
c0016703:	eb 17                	jmp    c001671c <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016705:	8d 76 00             	lea    esi,[esi+0x0]
c0016708:	83 c1 01             	add    ecx,0x1
c001670b:	83 f9 10             	cmp    ecx,0x10
c001670e:	0f 84 98 00 00 00    	je     c00167ac <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016714:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001671a:	66 90                	xchg   ax,ax
c001671c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016723:	d3 fa                	sar    edx,cl
c0016725:	80 e2 01             	and    dl,0x1
c0016728:	74 de                	je     c0016708 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001672a:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001672d:	01 d2                	add    edx,edx
c001672f:	01 ca                	add    edx,ecx
c0016731:	8d 14 92             	lea    edx,[edx+edx*4]
c0016734:	01 d0                	add    eax,edx
c0016736:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001673c:	83 fd 07             	cmp    ebp,0x7
c001673f:	75 c7                	jne    c0016708 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016741:	05 40 02 00 00       	add    eax,0x240
c0016746:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016749:	83 fd ff             	cmp    ebp,0xffffffff
c001674c:	0f 8c ee 00 00 00    	jl     c0016840 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016752:	0f 84 ac 01 00 00    	je     c0016904 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016758:	85 ed                	test   ebp,ebp
c001675a:	0f 84 90 01 00 00    	je     c00168f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016760:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016762:	75 a4                	jne    c0016708 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016764:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001676a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001676e:	01 d0                	add    eax,edx
c0016770:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016774:	83 ec 0c             	sub    esp,0xc
c0016777:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001677d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016780:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016786:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001678d:	50                   	push   eax
c001678e:	e8 0d fe ff ff       	call   c00165a0 <unblockTask(ThreadControlBlock*)>
c0016793:	83 c4 10             	add    esp,0x10
c0016796:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016799:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001679d:	89 f7                	mov    edi,esi
c001679f:	83 c1 01             	add    ecx,0x1
c00167a2:	83 f9 10             	cmp    ecx,0x10
c00167a5:	0f 85 69 ff ff ff    	jne    c0016714 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00167ab:	90                   	nop
c00167ac:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00167b2:	85 c0                	test   eax,eax
c00167b4:	74 62                	je     c0016818 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00167b6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00167bc:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00167c2:	74 54                	je     c0016818 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00167c4:	83 ec 0c             	sub    esp,0xc
c00167c7:	68 e4 c6 02 c0       	push   0xc002c6e4
c00167cc:	e8 1b 95 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167d1:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00167d8:	89 c7                	mov    edi,eax
c00167da:	e8 f1 94 00 00       	call   c001fcd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00167df:	83 c4 10             	add    esp,0x10
c00167e2:	84 c0                	test   al,al
c00167e4:	0f 84 ce 00 00 00    	je     c00168b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00167ea:	66 90                	xchg   ax,ax
c00167ec:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167ef:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00167f5:	85 d2                	test   edx,edx
c00167f7:	74 0f                	je     c0016808 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00167f9:	83 ec 0c             	sub    esp,0xc
c00167fc:	8b 02                	mov    eax,DWORD PTR [edx]
c00167fe:	52                   	push   edx
c00167ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016802:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016805:	83 c4 10             	add    esp,0x10
c0016808:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016812:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016815:	8d 76 00             	lea    esi,[esi+0x0]
c0016818:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001681e:	85 db                	test   ebx,ebx
c0016820:	74 16                	je     c0016838 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016822:	83 ec 0c             	sub    esp,0xc
c0016825:	53                   	push   ebx
c0016826:	e8 87 33 ff ff       	call   c0009bb2 <VAS::~VAS()>
c001682b:	58                   	pop    eax
c001682c:	5a                   	pop    edx
c001682d:	6a 14                	push   0x14
c001682f:	53                   	push   ebx
c0016830:	e8 e3 3f ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0016835:	83 c4 10             	add    esp,0x10
c0016838:	83 c4 1c             	add    esp,0x1c
c001683b:	5b                   	pop    ebx
c001683c:	5e                   	pop    esi
c001683d:	5f                   	pop    edi
c001683e:	5d                   	pop    ebp
c001683f:	c3                   	ret    
c0016840:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016844:	83 ec 0c             	sub    esp,0xc
c0016847:	68 78 29 02 c0       	push   0xc0022978
c001684c:	e8 96 ad ff ff       	call   c00115e7 <KePanic(char const*)>
c0016851:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016854:	83 c4 10             	add    esp,0x10
c0016857:	89 f7                	mov    edi,esi
c0016859:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001685d:	e9 a6 fe ff ff       	jmp    c0016708 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016862:	66 90                	xchg   ax,ax
c0016864:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001686a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016870:	75 1e                	jne    c0016890 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016872:	83 ec 0c             	sub    esp,0xc
c0016875:	68 e0 29 02 c0       	push   0xc00229e0
c001687a:	e8 c6 40 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001687f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016886:	e8 11 fa ff ff       	call   c001629c <blockTask(TaskState)>
c001688b:	83 c4 10             	add    esp,0x10
c001688e:	66 90                	xchg   ax,ax
c0016890:	83 ec 08             	sub    esp,0x8
c0016893:	56                   	push   esi
c0016894:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016899:	e8 12 95 00 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001689e:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168a5:	e8 42 94 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168aa:	83 c4 10             	add    esp,0x10
c00168ad:	39 f8                	cmp    eax,edi
c00168af:	0f 84 37 ff ff ff    	je     c00167ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00168b5:	8d 76 00             	lea    esi,[esi+0x0]
c00168b8:	83 ec 0c             	sub    esp,0xc
c00168bb:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168c0:	e8 27 94 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168c5:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168cc:	89 c6                	mov    esi,eax
c00168ce:	e8 21 94 00 00       	call   c001fcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00168d3:	83 c4 10             	add    esp,0x10
c00168d6:	39 f3                	cmp    ebx,esi
c00168d8:	74 b6                	je     c0016890 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168da:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00168dd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168e0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00168e6:	75 a8                	jne    c0016890 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168e8:	e9 77 ff ff ff       	jmp    c0016864 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00168ed:	8d 76 00             	lea    esi,[esi+0x0]
c00168f0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168f4:	83 ec 0c             	sub    esp,0xc
c00168f7:	68 ac 29 02 c0       	push   0xc00229ac
c00168fc:	e9 4b ff ff ff       	jmp    c001684c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016901:	8d 76 00             	lea    esi,[esi+0x0]
c0016904:	8b 36                	mov    esi,DWORD PTR [esi]
c0016906:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001690a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001690d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016910:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016916:	01 d7                	add    edi,edx
c0016918:	89 f8                	mov    eax,edi
c001691a:	e9 51 fe ff ff       	jmp    c0016770 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001691f:	90                   	nop

c0016920 <cleanerTaskFunction(void*)>:
c0016920:	53                   	push   ebx
c0016921:	83 ec 08             	sub    esp,0x8
c0016924:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016929:	83 e8 01             	sub    eax,0x1
c001692c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016931:	75 01                	jne    c0016934 <cleanerTaskFunction(void*)+0x14>
c0016933:	fb                   	sti    
c0016934:	fa                   	cli    
c0016935:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001693a:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016941:	8d 50 01             	lea    edx,[eax+0x1]
c0016944:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001694a:	0f 84 c4 00 00 00    	je     c0016a14 <cleanerTaskFunction(void*)+0xf4>
c0016950:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016955:	85 c0                	test   eax,eax
c0016957:	75 03                	jne    c001695c <cleanerTaskFunction(void*)+0x3c>
c0016959:	fb                   	sti    
c001695a:	66 90                	xchg   ax,ax
c001695c:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c0016963:	fa                   	cli    
c0016964:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001696a:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016970:	83 c2 01             	add    edx,0x1
c0016973:	83 c1 01             	add    ecx,0x1
c0016976:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001697c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016982:	fa                   	cli    
c0016983:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016989:	83 c3 01             	add    ebx,0x1
c001698c:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c0016992:	eb 28                	jmp    c00169bc <cleanerTaskFunction(void*)+0x9c>
c0016994:	83 ec 0c             	sub    esp,0xc
c0016997:	68 cc c6 02 c0       	push   0xc002c6cc
c001699c:	e8 4b 93 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169a1:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00169a8:	89 c3                	mov    ebx,eax
c00169aa:	e8 45 93 00 00       	call   c001fcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00169af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169b2:	e8 95 fc ff ff       	call   c001664c <cleanupTerminatedTask(ThreadControlBlock*)>
c00169b7:	83 c4 10             	add    esp,0x10
c00169ba:	66 90                	xchg   ax,ax
c00169bc:	83 ec 0c             	sub    esp,0xc
c00169bf:	68 cc c6 02 c0       	push   0xc002c6cc
c00169c4:	e8 07 93 00 00       	call   c001fcd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169c9:	83 c4 10             	add    esp,0x10
c00169cc:	84 c0                	test   al,al
c00169ce:	74 c4                	je     c0016994 <cleanerTaskFunction(void*)+0x74>
c00169d0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169d5:	83 e8 01             	sub    eax,0x1
c00169d8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169dd:	75 01                	jne    c00169e0 <cleanerTaskFunction(void*)+0xc0>
c00169df:	fb                   	sti    
c00169e0:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00169e5:	83 e8 01             	sub    eax,0x1
c00169e8:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00169ed:	0f 85 31 ff ff ff    	jne    c0016924 <cleanerTaskFunction(void*)+0x4>
c00169f3:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c00169f8:	85 c0                	test   eax,eax
c00169fa:	0f 84 24 ff ff ff    	je     c0016924 <cleanerTaskFunction(void*)+0x4>
c0016a00:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016a0a:	e8 79 f6 ff ff       	call   c0016088 <schedule()>
c0016a0f:	e9 10 ff ff ff       	jmp    c0016924 <cleanerTaskFunction(void*)+0x4>
c0016a14:	83 ec 0c             	sub    esp,0xc
c0016a17:	6a 02                	push   0x2
c0016a19:	e8 56 f8 ff ff       	call   c0016274 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016a1e:	83 c4 10             	add    esp,0x10
c0016a21:	e9 36 ff ff ff       	jmp    c001695c <cleanerTaskFunction(void*)+0x3c>
c0016a26:	66 90                	xchg   ax,ax

c0016a28 <terminateTask(int)>:
c0016a28:	83 ec 14             	sub    esp,0x14
c0016a2b:	fa                   	cli    
c0016a2c:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016a32:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a38:	83 c2 01             	add    edx,0x1
c0016a3b:	83 c1 01             	add    ecx,0x1
c0016a3e:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a44:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a4a:	fa                   	cli    
c0016a4b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a50:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016a54:	83 c0 01             	add    eax,0x1
c0016a57:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a61:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016a64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a69:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016a6c:	50                   	push   eax
c0016a6d:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a72:	e8 39 93 00 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a7c:	83 c4 10             	add    esp,0x10
c0016a7f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016a86:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016a8b:	85 c0                	test   eax,eax
c0016a8d:	74 65                	je     c0016af4 <terminateTask(int)+0xcc>
c0016a8f:	83 ec 0c             	sub    esp,0xc
c0016a92:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016a99:	50                   	push   eax
c0016a9a:	e8 01 fb ff ff       	call   c00165a0 <unblockTask(ThreadControlBlock*)>
c0016a9f:	83 c4 10             	add    esp,0x10
c0016aa2:	66 90                	xchg   ax,ax
c0016aa4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016aa9:	83 e8 01             	sub    eax,0x1
c0016aac:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ab1:	75 01                	jne    c0016ab4 <terminateTask(int)+0x8c>
c0016ab3:	fb                   	sti    
c0016ab4:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016ab9:	83 e8 01             	sub    eax,0x1
c0016abc:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016ac1:	75 09                	jne    c0016acc <terminateTask(int)+0xa4>
c0016ac3:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016aca:	75 3c                	jne    c0016b08 <terminateTask(int)+0xe0>
c0016acc:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ad1:	83 e8 01             	sub    eax,0x1
c0016ad4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ad9:	75 01                	jne    c0016adc <terminateTask(int)+0xb4>
c0016adb:	fb                   	sti    
c0016adc:	fa                   	cli    
c0016add:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ae2:	83 c0 01             	add    eax,0x1
c0016ae5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016aea:	66 90                	xchg   ax,ax
c0016aec:	e8 97 f5 ff ff       	call   c0016088 <schedule()>
c0016af1:	eb d9                	jmp    c0016acc <terminateTask(int)+0xa4>
c0016af3:	90                   	nop
c0016af4:	83 ec 0c             	sub    esp,0xc
c0016af7:	68 da 28 02 c0       	push   0xc00228da
c0016afc:	e8 44 3e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016b01:	83 c4 10             	add    esp,0x10
c0016b04:	eb 9e                	jmp    c0016aa4 <terminateTask(int)+0x7c>
c0016b06:	66 90                	xchg   ax,ax
c0016b08:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b12:	eb d8                	jmp    c0016aec <terminateTask(int)+0xc4>

c0016b14 <Thr::terminateFromIRQ(int)>:
c0016b14:	83 ec 18             	sub    esp,0x18
c0016b17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b1b:	50                   	push   eax
c0016b1c:	e8 07 ff ff ff       	call   c0016a28 <terminateTask(int)>
c0016b21:	90                   	nop
c0016b22:	66 90                	xchg   ax,ax

c0016b24 <Semaphore::release()>:
c0016b24:	83 ec 0c             	sub    esp,0xc
c0016b27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016b2b:	fa                   	cli    
c0016b2c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b31:	83 c0 01             	add    eax,0x1
c0016b34:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b39:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b3e:	8d 48 01             	lea    ecx,[eax+0x1]
c0016b41:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016b47:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016b4a:	85 c9                	test   ecx,ecx
c0016b4c:	74 42                	je     c0016b90 <Semaphore::release()+0x6c>
c0016b4e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016b51:	83 ec 0c             	sub    esp,0xc
c0016b54:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b57:	51                   	push   ecx
c0016b58:	e8 43 fa ff ff       	call   c00165a0 <unblockTask(ThreadControlBlock*)>
c0016b5d:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b62:	83 c4 10             	add    esp,0x10
c0016b65:	83 e8 01             	sub    eax,0x1
c0016b68:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b6d:	85 c0                	test   eax,eax
c0016b6f:	75 0b                	jne    c0016b7c <Semaphore::release()+0x58>
c0016b71:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016b76:	85 c0                	test   eax,eax
c0016b78:	75 22                	jne    c0016b9c <Semaphore::release()+0x78>
c0016b7a:	66 90                	xchg   ax,ax
c0016b7c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b81:	83 e8 01             	sub    eax,0x1
c0016b84:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b89:	75 01                	jne    c0016b8c <Semaphore::release()+0x68>
c0016b8b:	fb                   	sti    
c0016b8c:	83 c4 0c             	add    esp,0xc
c0016b8f:	c3                   	ret    
c0016b90:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016b93:	83 e9 01             	sub    ecx,0x1
c0016b96:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016b99:	eb cd                	jmp    c0016b68 <Semaphore::release()+0x44>
c0016b9b:	90                   	nop
c0016b9c:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016ba6:	e8 dd f4 ff ff       	call   c0016088 <schedule()>
c0016bab:	eb cf                	jmp    c0016b7c <Semaphore::release()+0x58>
c0016bad:	8d 76 00             	lea    esi,[esi+0x0]

c0016bb0 <__static_initialization_and_destruction_0(int, int)>:
c0016bb0:	83 ec 0c             	sub    esp,0xc
c0016bb3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016bb8:	0f 85 8e 00 00 00    	jne    c0016c4c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016bbe:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016bc6:	0f 85 80 00 00 00    	jne    c0016c4c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016bcc:	83 ec 0c             	sub    esp,0xc
c0016bcf:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016bd4:	e8 8b 94 00 00       	call   c0020064 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016bd9:	83 c4 10             	add    esp,0x10
c0016bdc:	83 ec 04             	sub    esp,0x4
c0016bdf:	68 b0 35 02 c0       	push   0xc00235b0
c0016be4:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016be9:	68 14 00 02 c0       	push   0xc0020014
c0016bee:	e8 d5 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016bf3:	83 c4 10             	add    esp,0x10
c0016bf6:	83 ec 0c             	sub    esp,0xc
c0016bf9:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016bfe:	e8 61 94 00 00       	call   c0020064 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c03:	83 c4 10             	add    esp,0x10
c0016c06:	83 ec 04             	sub    esp,0x4
c0016c09:	68 b0 35 02 c0       	push   0xc00235b0
c0016c0e:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c13:	68 14 00 02 c0       	push   0xc0020014
c0016c18:	e8 ab 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016c1d:	83 c4 10             	add    esp,0x10
c0016c20:	83 ec 0c             	sub    esp,0xc
c0016c23:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c28:	e8 37 94 00 00       	call   c0020064 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c2d:	83 c4 10             	add    esp,0x10
c0016c30:	83 ec 04             	sub    esp,0x4
c0016c33:	68 b0 35 02 c0       	push   0xc00235b0
c0016c38:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c3d:	68 14 00 02 c0       	push   0xc0020014
c0016c42:	e8 81 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016c47:	83 c4 10             	add    esp,0x10
c0016c4a:	66 90                	xchg   ax,ax
c0016c4c:	90                   	nop
c0016c4d:	83 c4 0c             	add    esp,0xc
c0016c50:	c3                   	ret    
c0016c51:	8d 76 00             	lea    esi,[esi+0x0]

c0016c54 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016c54:	83 ec 0c             	sub    esp,0xc
c0016c57:	83 ec 08             	sub    esp,0x8
c0016c5a:	68 ff ff 00 00       	push   0xffff
c0016c5f:	6a 01                	push   0x1
c0016c61:	e8 4a ff ff ff       	call   c0016bb0 <__static_initialization_and_destruction_0(int, int)>
c0016c66:	83 c4 10             	add    esp,0x10
c0016c69:	83 c4 0c             	add    esp,0xc
c0016c6c:	c3                   	ret    

c0016c6d <Vm::inbv(unsigned short)>:
c0016c6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c71:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c76:	75 06                	jne    c0016c7e <Vm::inbv(unsigned short)+0x11>
c0016c78:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016c7d:	c3                   	ret    
c0016c7e:	ec                   	in     al,dx
c0016c7f:	c3                   	ret    

c0016c80 <Vm::outbv(unsigned short, unsigned char)>:
c0016c80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c88:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c8d:	75 25                	jne    c0016cb4 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016c8f:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016c95:	8d 51 01             	lea    edx,[ecx+0x1]
c0016c98:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016c9e:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016ca4:	83 fa 20             	cmp    edx,0x20
c0016ca7:	75 0c                	jne    c0016cb5 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016ca9:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016cb3:	c3                   	ret    
c0016cb4:	ee                   	out    dx,al
c0016cb5:	c3                   	ret    

c0016cb6 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016cb6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cbb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016cc0:	c1 e0 04             	shl    eax,0x4
c0016cc3:	01 d0                	add    eax,edx
c0016cc5:	c3                   	ret    

c0016cc6 <Vm::getSegment(unsigned int)>:
c0016cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cca:	c1 e8 10             	shr    eax,0x10
c0016ccd:	c3                   	ret    

c0016cce <Vm::getOffset(unsigned int)>:
c0016cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cd2:	c3                   	ret    

c0016cd3 <Vm::mainloop2()>:
c0016cd3:	83 ec 18             	sub    esp,0x18
c0016cd6:	fa                   	cli    
c0016cd7:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016cdd:	6a 02                	push   0x2
c0016cdf:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016ce6:	e8 89 f5 ff ff       	call   c0016274 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016ceb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cf0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016cf4:	52                   	push   edx
c0016cf5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016cf9:	52                   	push   edx
c0016cfa:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016cfe:	52                   	push   edx
c0016cff:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016d03:	50                   	push   eax
c0016d04:	e8 06 95 fe ff       	call   c000020f <goToVM86>
c0016d09:	83 c4 2c             	add    esp,0x2c
c0016d0c:	c3                   	ret    

c0016d0d <Vm::mainVm8086Loop(void*)>:
c0016d0d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d12:	48                   	dec    eax
c0016d13:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d18:	75 01                	jne    c0016d1b <Vm::mainVm8086Loop(void*)+0xe>
c0016d1a:	fb                   	sti    
c0016d1b:	eb b6                	jmp    c0016cd3 <Vm::mainloop2()>

c0016d1d <Vm::mainloop3(unsigned long)>:
c0016d1d:	83 ec 18             	sub    esp,0x18
c0016d20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d24:	fa                   	cli    
c0016d25:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d2b:	6a 02                	push   0x2
c0016d2d:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016d34:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016d39:	e8 36 f5 ff ff       	call   c0016274 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d3e:	83 c4 1c             	add    esp,0x1c
c0016d41:	eb 90                	jmp    c0016cd3 <Vm::mainloop2()>

c0016d43 <Vm::initialise8086()>:
c0016d43:	83 ec 0c             	sub    esp,0xc
c0016d46:	68 80 00 00 00       	push   0x80
c0016d4b:	6a 00                	push   0x0
c0016d4d:	68 0d 6d 01 c0       	push   0xc0016d0d
c0016d52:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016d58:	e8 db f0 ff ff       	call   c0015e38 <Process::createThread(void (*)(void*), void*, int)>
c0016d5d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016d64:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016d69:	68 00 01 00 00       	push   0x100
c0016d6e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016d73:	6a 00                	push   0x0
c0016d75:	6a 00                	push   0x0
c0016d77:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d7d:	e8 98 31 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016d82:	83 c4 2c             	add    esp,0x2c
c0016d85:	c3                   	ret    

c0016d86 <Vm::finish8086()>:
c0016d86:	53                   	push   ebx
c0016d87:	83 ec 08             	sub    esp,0x8
c0016d8a:	fa                   	cli    
c0016d8b:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d91:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016d98:	75 15                	jne    c0016daf <Vm::finish8086()+0x29>
c0016d9a:	e8 e9 f2 ff ff       	call   c0016088 <schedule()>
c0016d9f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016da4:	48                   	dec    eax
c0016da5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016daa:	75 de                	jne    c0016d8a <Vm::finish8086()+0x4>
c0016dac:	fb                   	sti    
c0016dad:	eb db                	jmp    c0016d8a <Vm::finish8086()+0x4>
c0016daf:	83 ec 0c             	sub    esp,0xc
c0016db2:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016db8:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016dbe:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016dc5:	e8 d6 f7 ff ff       	call   c00165a0 <unblockTask(ThreadControlBlock*)>
c0016dca:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016dcf:	83 c4 10             	add    esp,0x10
c0016dd2:	8d 50 ff             	lea    edx,[eax-0x1]
c0016dd5:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016ddb:	85 d2                	test   edx,edx
c0016ddd:	75 01                	jne    c0016de0 <Vm::finish8086()+0x5a>
c0016ddf:	fb                   	sti    
c0016de0:	89 d8                	mov    eax,ebx
c0016de2:	83 c4 08             	add    esp,0x8
c0016de5:	5b                   	pop    ebx
c0016de6:	c3                   	ret    

c0016de7 <Vm::getOutput8086(unsigned char*)>:
c0016de7:	57                   	push   edi
c0016de8:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016dee:	56                   	push   esi
c0016def:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016df4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016df8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016dfa:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016dff:	5e                   	pop    esi
c0016e00:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e0a:	5f                   	pop    edi
c0016e0b:	c3                   	ret    

c0016e0c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e0c:	55                   	push   ebp
c0016e0d:	57                   	push   edi
c0016e0e:	56                   	push   esi
c0016e0f:	53                   	push   ebx
c0016e10:	83 ec 0c             	sub    esp,0xc
c0016e13:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016e17:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016e1b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016e1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016e23:	fa                   	cli    
c0016e24:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e2a:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016e31:	75 15                	jne    c0016e48 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016e33:	e8 50 f2 ff ff       	call   c0016088 <schedule()>
c0016e38:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e3d:	48                   	dec    eax
c0016e3e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e43:	75 de                	jne    c0016e23 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e45:	fb                   	sti    
c0016e46:	eb db                	jmp    c0016e23 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e48:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016e4d:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e57:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016e5b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016e5f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016e63:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016e67:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016e6b:	0f b7 ff             	movzx  edi,di
c0016e6e:	0f b7 f6             	movzx  esi,si
c0016e71:	50                   	push   eax
c0016e72:	6a 20                	push   0x20
c0016e74:	6a 00                	push   0x0
c0016e76:	68 40 c7 02 c0       	push   0xc002c740
c0016e7b:	e8 70 96 fe ff       	call   c00004f0 <memset>
c0016e80:	5a                   	pop    edx
c0016e81:	59                   	pop    ecx
c0016e82:	57                   	push   edi
c0016e83:	56                   	push   esi
c0016e84:	e8 2d fe ff ff       	call   c0016cb6 <Vm::realToLinear(unsigned short, unsigned short)>
c0016e89:	83 c4 10             	add    esp,0x10
c0016e8c:	89 c7                	mov    edi,eax
c0016e8e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016e92:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016e96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e98:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e9d:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016ea4:	48                   	dec    eax
c0016ea5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016eaa:	75 01                	jne    c0016ead <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016eac:	fb                   	sti    
c0016ead:	83 ec 0c             	sub    esp,0xc
c0016eb0:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016eb6:	e8 e5 f6 ff ff       	call   c00165a0 <unblockTask(ThreadControlBlock*)>
c0016ebb:	83 c4 1c             	add    esp,0x1c
c0016ebe:	b0 01                	mov    al,0x1
c0016ec0:	5b                   	pop    ebx
c0016ec1:	5e                   	pop    esi
c0016ec2:	5f                   	pop    edi
c0016ec3:	5d                   	pop    ebp
c0016ec4:	c3                   	ret    

c0016ec5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016ec5:	55                   	push   ebp
c0016ec6:	57                   	push   edi
c0016ec7:	56                   	push   esi
c0016ec8:	53                   	push   ebx
c0016ec9:	83 ec 34             	sub    esp,0x34
c0016ecc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016ed0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016ed4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016ed8:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ee0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016ee4:	68 08 2a 02 c0       	push   0xc0022a08
c0016ee9:	e8 57 3a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016eee:	83 c4 10             	add    esp,0x10
c0016ef1:	fa                   	cli    
c0016ef2:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016ef8:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016efe:	84 db                	test   bl,bl
c0016f00:	75 15                	jne    c0016f17 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016f02:	e8 81 f1 ff ff       	call   c0016088 <schedule()>
c0016f07:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f0c:	48                   	dec    eax
c0016f0d:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f12:	75 dd                	jne    c0016ef1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f14:	fb                   	sti    
c0016f15:	eb da                	jmp    c0016ef1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f1b:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016f20:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f2a:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016f2e:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016f32:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016f36:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016f3a:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016f3e:	50                   	push   eax
c0016f3f:	6a 20                	push   0x20
c0016f41:	6a 00                	push   0x0
c0016f43:	68 40 c7 02 c0       	push   0xc002c740
c0016f48:	e8 a3 95 fe ff       	call   c00004f0 <memset>
c0016f4d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016f54:	e8 5d 0b ff ff       	call   c0007ab6 <malloc>
c0016f59:	83 c4 0c             	add    esp,0xc
c0016f5c:	89 c5                	mov    ebp,eax
c0016f5e:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016f64:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f68:	50                   	push   eax
c0016f69:	e8 a8 4b ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c0016f6e:	83 c4 10             	add    esp,0x10
c0016f71:	85 ed                	test   ebp,ebp
c0016f73:	75 0a                	jne    c0016f7f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016f75:	83 ec 0c             	sub    esp,0xc
c0016f78:	68 2a 2a 02 c0       	push   0xc0022a2a
c0016f7d:	eb 2b                	jmp    c0016faa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016f7f:	50                   	push   eax
c0016f80:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016f84:	50                   	push   eax
c0016f85:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016f89:	50                   	push   eax
c0016f8a:	55                   	push   ebp
c0016f8b:	e8 a6 4e ff ff       	call   c000be36 <File::stat(unsigned long long*, bool*)>
c0016f90:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016f94:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016f98:	83 c4 10             	add    esp,0x10
c0016f9b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016fa0:	74 27                	je     c0016fc9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016fa2:	83 ec 0c             	sub    esp,0xc
c0016fa5:	68 3e 2a 02 c0       	push   0xc0022a3e
c0016faa:	e8 38 a6 ff ff       	call   c00115e7 <KePanic(char const*)>
c0016faf:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fb4:	83 c4 10             	add    esp,0x10
c0016fb7:	48                   	dec    eax
c0016fb8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fbd:	85 c0                	test   eax,eax
c0016fbf:	75 01                	jne    c0016fc2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016fc1:	fb                   	sti    
c0016fc2:	31 db                	xor    ebx,ebx
c0016fc4:	e9 90 00 00 00       	jmp    c0017059 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016fc9:	51                   	push   ecx
c0016fca:	51                   	push   ecx
c0016fcb:	6a 01                	push   0x1
c0016fcd:	55                   	push   ebp
c0016fce:	e8 61 4b ff ff       	call   c000bb34 <File::open(FileOpenMode)>
c0016fd3:	83 c4 10             	add    esp,0x10
c0016fd6:	85 c0                	test   eax,eax
c0016fd8:	74 26                	je     c0017000 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016fda:	83 ec 0c             	sub    esp,0xc
c0016fdd:	68 57 2a 02 c0       	push   0xc0022a57
c0016fe2:	e8 00 a6 ff ff       	call   c00115e7 <KePanic(char const*)>
c0016fe7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fec:	83 c4 10             	add    esp,0x10
c0016fef:	48                   	dec    eax
c0016ff0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ff5:	85 c0                	test   eax,eax
c0016ff7:	75 c9                	jne    c0016fc2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016ff9:	fb                   	sti    
c0016ffa:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016ffe:	eb 59                	jmp    c0017059 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017000:	0f b7 ff             	movzx  edi,di
c0017003:	50                   	push   eax
c0017004:	0f b7 f6             	movzx  esi,si
c0017007:	50                   	push   eax
c0017008:	57                   	push   edi
c0017009:	56                   	push   esi
c001700a:	e8 a7 fc ff ff       	call   c0016cb6 <Vm::realToLinear(unsigned short, unsigned short)>
c001700f:	5a                   	pop    edx
c0017010:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0017013:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0017017:	51                   	push   ecx
c0017018:	50                   	push   eax
c0017019:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001701d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017021:	55                   	push   ebp
c0017022:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0017025:	83 c4 14             	add    esp,0x14
c0017028:	55                   	push   ebp
c0017029:	e8 64 4b ff ff       	call   c000bb92 <File::close()>
c001702e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0017033:	83 c4 10             	add    esp,0x10
c0017036:	48                   	dec    eax
c0017037:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c001703e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0017043:	85 c0                	test   eax,eax
c0017045:	75 01                	jne    c0017048 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0017047:	fb                   	sti    
c0017048:	83 ec 0c             	sub    esp,0xc
c001704b:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0017051:	e8 4a f5 ff ff       	call   c00165a0 <unblockTask(ThreadControlBlock*)>
c0017056:	83 c4 10             	add    esp,0x10
c0017059:	83 c4 2c             	add    esp,0x2c
c001705c:	88 d8                	mov    al,bl
c001705e:	5b                   	pop    ebx
c001705f:	5e                   	pop    esi
c0017060:	5f                   	pop    edi
c0017061:	5d                   	pop    ebp
c0017062:	c3                   	ret    

c0017063 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017063:	57                   	push   edi
c0017064:	56                   	push   esi
c0017065:	53                   	push   ebx
c0017066:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001706a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017072:	83 e8 06             	sub    eax,0x6
c0017075:	0f b7 c0             	movzx  eax,ax
c0017078:	50                   	push   eax
c0017079:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001707e:	50                   	push   eax
c001707f:	e8 32 fc ff ff       	call   c0016cb6 <Vm::realToLinear(unsigned short, unsigned short)>
c0017084:	5a                   	pop    edx
c0017085:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017088:	59                   	pop    ecx
c0017089:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c001708c:	8d 51 fa             	lea    edx,[ecx-0x6]
c001708f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017095:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017098:	8d 56 02             	lea    edx,[esi+0x2]
c001709b:	66 89 10             	mov    WORD PTR [eax],dx
c001709e:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00170a2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00170a6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00170a9:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00170ad:	0f b6 f1             	movzx  esi,cl
c00170b0:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00170b4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00170ba:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00170be:	0f b6 d5             	movzx  edx,ch
c00170c1:	74 0a                	je     c00170cd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c00170c3:	c1 e2 08             	shl    edx,0x8
c00170c6:	09 f2                	or     edx,esi
c00170c8:	80 ce 02             	or     dh,0x2
c00170cb:	eb 08                	jmp    c00170d5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c00170cd:	c1 e2 08             	shl    edx,0x8
c00170d0:	09 f2                	or     edx,esi
c00170d2:	80 e6 fd             	and    dh,0xfd
c00170d5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00170d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170de:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00170e2:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00170ea:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00170ed:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00170f5:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00170f8:	5b                   	pop    ebx
c00170f9:	5e                   	pop    esi
c00170fa:	5f                   	pop    edi
c00170fb:	c3                   	ret    

c00170fc <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00170fc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017101:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017106:	c1 e0 04             	shl    eax,0x4
c0017109:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001710c:	c3                   	ret    

c001710d <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001710d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017112:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017117:	c1 e0 04             	shl    eax,0x4
c001711a:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001711e:	c3                   	ret    

c001711f <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001711f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017124:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017129:	c1 e0 04             	shl    eax,0x4
c001712c:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001712f:	c3                   	ret    

c0017130 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017130:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017135:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001713a:	c1 e0 04             	shl    eax,0x4
c001713d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017141:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017144:	c3                   	ret    

c0017145 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017145:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001714a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001714f:	c1 e0 04             	shl    eax,0x4
c0017152:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017156:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001715a:	c3                   	ret    

c001715b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001715b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017160:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017165:	c1 e0 04             	shl    eax,0x4
c0017168:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001716c:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001716f:	c3                   	ret    

c0017170 <Vm::faultHandler(regs*)>:
c0017170:	55                   	push   ebp
c0017171:	57                   	push   edi
c0017172:	56                   	push   esi
c0017173:	53                   	push   ebx
c0017174:	83 ec 2c             	sub    esp,0x2c
c0017177:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001717b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001717e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017182:	0f b7 f8             	movzx  edi,ax
c0017185:	52                   	push   edx
c0017186:	0f b7 c0             	movzx  eax,ax
c0017189:	50                   	push   eax
c001718a:	e8 27 fb ff ff       	call   c0016cb6 <Vm::realToLinear(unsigned short, unsigned short)>
c001718f:	5a                   	pop    edx
c0017190:	59                   	pop    ecx
c0017191:	89 c1                	mov    ecx,eax
c0017193:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017196:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001719a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001719f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171a3:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00171a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171aa:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00171af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00171bb:	e8 f6 fa ff ff       	call   c0016cb6 <Vm::realToLinear(unsigned short, unsigned short)>
c00171c0:	5e                   	pop    esi
c00171c1:	be 06 00 00 00       	mov    esi,0x6
c00171c6:	5d                   	pop    ebp
c00171c7:	31 ed                	xor    ebp,ebp
c00171c9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00171ce:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00171d1:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00171d7:	0f 84 74 02 00 00    	je     c0017451 <Vm::faultHandler(regs*)+0x2e1>
c00171dd:	0f 87 94 00 00 00    	ja     c0017277 <Vm::faultHandler(regs*)+0x107>
c00171e3:	83 fa 66             	cmp    edx,0x66
c00171e6:	0f 84 e2 01 00 00    	je     c00173ce <Vm::faultHandler(regs*)+0x25e>
c00171ec:	77 47                	ja     c0017235 <Vm::faultHandler(regs*)+0xc5>
c00171ee:	83 fa 36             	cmp    edx,0x36
c00171f1:	0f 84 ca 01 00 00    	je     c00173c1 <Vm::faultHandler(regs*)+0x251>
c00171f7:	77 1a                	ja     c0017213 <Vm::faultHandler(regs*)+0xa3>
c00171f9:	83 fa 26             	cmp    edx,0x26
c00171fc:	0f 84 98 01 00 00    	je     c001739a <Vm::faultHandler(regs*)+0x22a>
c0017202:	83 fa 2e             	cmp    edx,0x2e
c0017205:	0f 85 21 06 00 00    	jne    c001782c <Vm::faultHandler(regs*)+0x6bc>
c001720b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001720e:	31 f6                	xor    esi,esi
c0017210:	41                   	inc    ecx
c0017211:	eb bb                	jmp    c00171ce <Vm::faultHandler(regs*)+0x5e>
c0017213:	83 fa 64             	cmp    edx,0x64
c0017216:	0f 84 8b 01 00 00    	je     c00173a7 <Vm::faultHandler(regs*)+0x237>
c001721c:	0f 87 92 01 00 00    	ja     c00173b4 <Vm::faultHandler(regs*)+0x244>
c0017222:	83 fa 3e             	cmp    edx,0x3e
c0017225:	0f 85 01 06 00 00    	jne    c001782c <Vm::faultHandler(regs*)+0x6bc>
c001722b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001722e:	be 01 00 00 00       	mov    esi,0x1
c0017233:	eb db                	jmp    c0017210 <Vm::faultHandler(regs*)+0xa0>
c0017235:	83 fa 6d             	cmp    edx,0x6d
c0017238:	0f 84 34 03 00 00    	je     c0017572 <Vm::faultHandler(regs*)+0x402>
c001723e:	77 17                	ja     c0017257 <Vm::faultHandler(regs*)+0xe7>
c0017240:	83 fa 67             	cmp    edx,0x67
c0017243:	0f 84 92 01 00 00    	je     c00173db <Vm::faultHandler(regs*)+0x26b>
c0017249:	83 fa 6c             	cmp    edx,0x6c
c001724c:	0f 84 b1 02 00 00    	je     c0017503 <Vm::faultHandler(regs*)+0x393>
c0017252:	e9 d5 05 00 00       	jmp    c001782c <Vm::faultHandler(regs*)+0x6bc>
c0017257:	83 fa 6f             	cmp    edx,0x6f
c001725a:	0f 84 3d 04 00 00    	je     c001769d <Vm::faultHandler(regs*)+0x52d>
c0017260:	0f 82 9f 03 00 00    	jb     c0017605 <Vm::faultHandler(regs*)+0x495>
c0017266:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c001726c:	0f 84 76 01 00 00    	je     c00173e8 <Vm::faultHandler(regs*)+0x278>
c0017272:	e9 b5 05 00 00       	jmp    c001782c <Vm::faultHandler(regs*)+0x6bc>
c0017277:	81 fa ec 00 00 00    	cmp    edx,0xec
c001727d:	0f 84 51 05 00 00    	je     c00177d4 <Vm::faultHandler(regs*)+0x664>
c0017283:	0f 87 a9 00 00 00    	ja     c0017332 <Vm::faultHandler(regs*)+0x1c2>
c0017289:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001728f:	0f 84 d0 04 00 00    	je     c0017765 <Vm::faultHandler(regs*)+0x5f5>
c0017295:	77 78                	ja     c001730f <Vm::faultHandler(regs*)+0x19f>
c0017297:	81 fa cd 00 00 00    	cmp    edx,0xcd
c001729d:	0f 84 0e 02 00 00    	je     c00174b1 <Vm::faultHandler(regs*)+0x341>
c00172a3:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00172a9:	0f 85 7d 05 00 00    	jne    c001782c <Vm::faultHandler(regs*)+0x6bc>
c00172af:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00172b3:	89 d1                	mov    ecx,edx
c00172b5:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00172b8:	c1 e1 08             	shl    ecx,0x8
c00172bb:	09 ca                	or     edx,ecx
c00172bd:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00172c0:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00172c4:	89 d1                	mov    ecx,edx
c00172c6:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00172ca:	c1 e1 08             	shl    ecx,0x8
c00172cd:	09 ca                	or     edx,ecx
c00172cf:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00172d2:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00172d6:	89 d1                	mov    ecx,edx
c00172d8:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00172dc:	c1 e1 08             	shl    ecx,0x8
c00172df:	09 ca                	or     edx,ecx
c00172e1:	81 ca 00 02 02 00    	or     edx,0x20200
c00172e7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00172ea:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00172ee:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00172f4:	d1 e8                	shr    eax,1
c00172f6:	83 e0 01             	and    eax,0x1
c00172f9:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00172fc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00172ff:	83 c0 06             	add    eax,0x6
c0017302:	25 ff ff 00 00       	and    eax,0xffff
c0017307:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001730a:	e9 19 05 00 00       	jmp    c0017828 <Vm::faultHandler(regs*)+0x6b8>
c001730f:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017315:	0f 84 8f 04 00 00    	je     c00177aa <Vm::faultHandler(regs*)+0x63a>
c001731b:	0f 82 60 04 00 00    	jb     c0017781 <Vm::faultHandler(regs*)+0x611>
c0017321:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0017327:	0f 84 94 04 00 00    	je     c00177c1 <Vm::faultHandler(regs*)+0x651>
c001732d:	e9 fa 04 00 00       	jmp    c001782c <Vm::faultHandler(regs*)+0x6bc>
c0017332:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017338:	0f 84 d7 04 00 00    	je     c0017815 <Vm::faultHandler(regs*)+0x6a5>
c001733e:	77 2e                	ja     c001736e <Vm::faultHandler(regs*)+0x1fe>
c0017340:	81 fa ed 00 00 00    	cmp    edx,0xed
c0017346:	0f 84 a4 04 00 00    	je     c00177f0 <Vm::faultHandler(regs*)+0x680>
c001734c:	81 fa ee 00 00 00    	cmp    edx,0xee
c0017352:	0f 85 d4 04 00 00    	jne    c001782c <Vm::faultHandler(regs*)+0x6bc>
c0017358:	50                   	push   eax
c0017359:	50                   	push   eax
c001735a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001735e:	50                   	push   eax
c001735f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017363:	50                   	push   eax
c0017364:	e8 17 f9 ff ff       	call   c0016c80 <Vm::outbv(unsigned short, unsigned char)>
c0017369:	e9 9f 04 00 00       	jmp    c001780d <Vm::faultHandler(regs*)+0x69d>
c001736e:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017374:	0f 84 6d 01 00 00    	je     c00174e7 <Vm::faultHandler(regs*)+0x377>
c001737a:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017380:	0f 84 6f 01 00 00    	je     c00174f5 <Vm::faultHandler(regs*)+0x385>
c0017386:	81 fa f3 00 00 00    	cmp    edx,0xf3
c001738c:	0f 85 9a 04 00 00    	jne    c001782c <Vm::faultHandler(regs*)+0x6bc>
c0017392:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017395:	e9 76 fe ff ff       	jmp    c0017210 <Vm::faultHandler(regs*)+0xa0>
c001739a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001739d:	be 02 00 00 00       	mov    esi,0x2
c00173a2:	e9 69 fe ff ff       	jmp    c0017210 <Vm::faultHandler(regs*)+0xa0>
c00173a7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173aa:	be 03 00 00 00       	mov    esi,0x3
c00173af:	e9 5c fe ff ff       	jmp    c0017210 <Vm::faultHandler(regs*)+0xa0>
c00173b4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173b7:	be 04 00 00 00       	mov    esi,0x4
c00173bc:	e9 4f fe ff ff       	jmp    c0017210 <Vm::faultHandler(regs*)+0xa0>
c00173c1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173c4:	be 05 00 00 00       	mov    esi,0x5
c00173c9:	e9 42 fe ff ff       	jmp    c0017210 <Vm::faultHandler(regs*)+0xa0>
c00173ce:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173d1:	bd 01 00 00 00       	mov    ebp,0x1
c00173d6:	e9 35 fe ff ff       	jmp    c0017210 <Vm::faultHandler(regs*)+0xa0>
c00173db:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173de:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00173e3:	e9 28 fe ff ff       	jmp    c0017210 <Vm::faultHandler(regs*)+0xa0>
c00173e8:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00173eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00173ef:	83 e5 01             	and    ebp,0x1
c00173f2:	74 30                	je     c0017424 <Vm::faultHandler(regs*)+0x2b4>
c00173f4:	83 e9 04             	sub    ecx,0x4
c00173f7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00173fd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017403:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017406:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017409:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001740f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017413:	0f 84 0c 04 00 00    	je     c0017825 <Vm::faultHandler(regs*)+0x6b5>
c0017419:	80 ce 02             	or     dh,0x2
c001741c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001741f:	e9 01 04 00 00       	jmp    c0017825 <Vm::faultHandler(regs*)+0x6b5>
c0017424:	83 e9 02             	sub    ecx,0x2
c0017427:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001742d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017430:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017434:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001743a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001743e:	74 05                	je     c0017445 <Vm::faultHandler(regs*)+0x2d5>
c0017440:	80 ce 02             	or     dh,0x2
c0017443:	eb 03                	jmp    c0017448 <Vm::faultHandler(regs*)+0x2d8>
c0017445:	80 e6 fd             	and    dh,0xfd
c0017448:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001744c:	e9 d4 03 00 00       	jmp    c0017825 <Vm::faultHandler(regs*)+0x6b5>
c0017451:	83 e5 01             	and    ebp,0x1
c0017454:	74 2a                	je     c0017480 <Vm::faultHandler(regs*)+0x310>
c0017456:	8b 10                	mov    edx,DWORD PTR [eax]
c0017458:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001745e:	81 ca 00 02 02 00    	or     edx,0x20200
c0017464:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017467:	8b 00                	mov    eax,DWORD PTR [eax]
c0017469:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001746f:	c1 e8 09             	shr    eax,0x9
c0017472:	83 e0 01             	and    eax,0x1
c0017475:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017478:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001747b:	83 c0 04             	add    eax,0x4
c001747e:	eb 24                	jmp    c00174a4 <Vm::faultHandler(regs*)+0x334>
c0017480:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017483:	81 ca 00 02 02 00    	or     edx,0x20200
c0017489:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001748c:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001748f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017495:	c1 e8 09             	shr    eax,0x9
c0017498:	83 e0 01             	and    eax,0x1
c001749b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001749e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00174a1:	83 c0 02             	add    eax,0x2
c00174a4:	25 ff ff 00 00       	and    eax,0xffff
c00174a9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00174ac:	e9 74 03 00 00       	jmp    c0017825 <Vm::faultHandler(regs*)+0x6b5>
c00174b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174b5:	3d ee 00 00 00       	cmp    eax,0xee
c00174ba:	75 10                	jne    c00174cc <Vm::faultHandler(regs*)+0x35c>
c00174bc:	83 ec 0c             	sub    esp,0xc
c00174bf:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00174c2:	e8 56 f8 ff ff       	call   c0016d1d <Vm::mainloop3(unsigned long)>
c00174c7:	e9 44 03 00 00       	jmp    c0017810 <Vm::faultHandler(regs*)+0x6a0>
c00174cc:	83 ec 0c             	sub    esp,0xc
c00174cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00174d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00174d7:	51                   	push   ecx
c00174d8:	50                   	push   eax
c00174d9:	53                   	push   ebx
c00174da:	e8 84 fb ff ff       	call   c0017063 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00174df:	83 c4 20             	add    esp,0x20
c00174e2:	e9 41 03 00 00       	jmp    c0017828 <Vm::faultHandler(regs*)+0x6b8>
c00174e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174ec:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00174f0:	e9 30 03 00 00       	jmp    c0017825 <Vm::faultHandler(regs*)+0x6b5>
c00174f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174fa:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00174fe:	e9 22 03 00 00       	jmp    c0017825 <Vm::faultHandler(regs*)+0x6b5>
c0017503:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017506:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001750b:	74 2b                	je     c0017538 <Vm::faultHandler(regs*)+0x3c8>
c001750d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017514:	76 22                	jbe    c0017538 <Vm::faultHandler(regs*)+0x3c8>
c0017516:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001751a:	50                   	push   eax
c001751b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001751f:	50                   	push   eax
c0017520:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017524:	50                   	push   eax
c0017525:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017529:	50                   	push   eax
c001752a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001752e:	50                   	push   eax
c001752f:	6a 6c                	push   0x6c
c0017531:	6a 6c                	push   0x6c
c0017533:	e9 bd 01 00 00       	jmp    c00176f5 <Vm::faultHandler(regs*)+0x585>
c0017538:	83 ec 0c             	sub    esp,0xc
c001753b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001753f:	0f b7 f6             	movzx  esi,si
c0017542:	50                   	push   eax
c0017543:	e8 25 f7 ff ff       	call   c0016c6d <Vm::inbv(unsigned short)>
c0017548:	83 c4 0c             	add    esp,0xc
c001754b:	0f b6 c0             	movzx  eax,al
c001754e:	50                   	push   eax
c001754f:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017553:	50                   	push   eax
c0017554:	56                   	push   esi
c0017555:	e8 d6 fb ff ff       	call   c0017130 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001755a:	83 c4 10             	add    esp,0x10
c001755d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017560:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017564:	74 03                	je     c0017569 <Vm::faultHandler(regs*)+0x3f9>
c0017566:	48                   	dec    eax
c0017567:	eb 01                	jmp    c001756a <Vm::faultHandler(regs*)+0x3fa>
c0017569:	40                   	inc    eax
c001756a:	0f b7 c0             	movzx  eax,ax
c001756d:	e9 8b 00 00 00       	jmp    c00175fd <Vm::faultHandler(regs*)+0x48d>
c0017572:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017575:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017578:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001757d:	74 29                	je     c00175a8 <Vm::faultHandler(regs*)+0x438>
c001757f:	3d ff ff 00 00       	cmp    eax,0xffff
c0017584:	76 22                	jbe    c00175a8 <Vm::faultHandler(regs*)+0x438>
c0017586:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001758a:	50                   	push   eax
c001758b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001758f:	50                   	push   eax
c0017590:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017594:	50                   	push   eax
c0017595:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017599:	50                   	push   eax
c001759a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001759e:	50                   	push   eax
c001759f:	6a 6d                	push   0x6d
c00175a1:	6a 6d                	push   0x6d
c00175a3:	e9 4d 01 00 00       	jmp    c00176f5 <Vm::faultHandler(regs*)+0x585>
c00175a8:	0f b7 c8             	movzx  ecx,ax
c00175ab:	0f b7 f6             	movzx  esi,si
c00175ae:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00175b1:	83 e5 01             	and    ebp,0x1
c00175b4:	74 20                	je     c00175d6 <Vm::faultHandler(regs*)+0x466>
c00175b6:	ed                   	in     eax,dx
c00175b7:	55                   	push   ebp
c00175b8:	50                   	push   eax
c00175b9:	51                   	push   ecx
c00175ba:	56                   	push   esi
c00175bb:	e8 9b fb ff ff       	call   c001715b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00175c0:	83 c4 10             	add    esp,0x10
c00175c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175c6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175ca:	74 05                	je     c00175d1 <Vm::faultHandler(regs*)+0x461>
c00175cc:	83 e8 04             	sub    eax,0x4
c00175cf:	eb 27                	jmp    c00175f8 <Vm::faultHandler(regs*)+0x488>
c00175d1:	83 c0 04             	add    eax,0x4
c00175d4:	eb 22                	jmp    c00175f8 <Vm::faultHandler(regs*)+0x488>
c00175d6:	66 ed                	in     ax,dx
c00175d8:	0f b7 c0             	movzx  eax,ax
c00175db:	57                   	push   edi
c00175dc:	50                   	push   eax
c00175dd:	51                   	push   ecx
c00175de:	56                   	push   esi
c00175df:	e8 61 fb ff ff       	call   c0017145 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00175e4:	83 c4 10             	add    esp,0x10
c00175e7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175ea:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175ee:	74 05                	je     c00175f5 <Vm::faultHandler(regs*)+0x485>
c00175f0:	83 e8 02             	sub    eax,0x2
c00175f3:	eb 03                	jmp    c00175f8 <Vm::faultHandler(regs*)+0x488>
c00175f5:	83 c0 02             	add    eax,0x2
c00175f8:	25 ff ff 00 00       	and    eax,0xffff
c00175fd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017600:	e9 20 02 00 00       	jmp    c0017825 <Vm::faultHandler(regs*)+0x6b5>
c0017605:	8d 46 ff             	lea    eax,[esi-0x1]
c0017608:	0f b6 f0             	movzx  esi,al
c001760b:	83 fe 05             	cmp    esi,0x5
c001760e:	77 23                	ja     c0017633 <Vm::faultHandler(regs*)+0x4c3>
c0017610:	ff 24 b5 cc 2a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd534]
c0017617:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001761c:	eb 15                	jmp    c0017633 <Vm::faultHandler(regs*)+0x4c3>
c001761e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017622:	eb 0f                	jmp    c0017633 <Vm::faultHandler(regs*)+0x4c3>
c0017624:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017628:	eb 09                	jmp    c0017633 <Vm::faultHandler(regs*)+0x4c3>
c001762a:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001762e:	eb 03                	jmp    c0017633 <Vm::faultHandler(regs*)+0x4c3>
c0017630:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017633:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017636:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001763b:	74 29                	je     c0017666 <Vm::faultHandler(regs*)+0x4f6>
c001763d:	3d ff ff 00 00       	cmp    eax,0xffff
c0017642:	76 22                	jbe    c0017666 <Vm::faultHandler(regs*)+0x4f6>
c0017644:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017648:	50                   	push   eax
c0017649:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001764d:	50                   	push   eax
c001764e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017652:	50                   	push   eax
c0017653:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017657:	50                   	push   eax
c0017658:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001765c:	50                   	push   eax
c001765d:	6a 6e                	push   0x6e
c001765f:	6a 6e                	push   0x6e
c0017661:	e9 8f 00 00 00       	jmp    c00176f5 <Vm::faultHandler(regs*)+0x585>
c0017666:	0f b7 c0             	movzx  eax,ax
c0017669:	52                   	push   edx
c001766a:	52                   	push   edx
c001766b:	50                   	push   eax
c001766c:	57                   	push   edi
c001766d:	e8 8a fa ff ff       	call   c00170fc <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017672:	59                   	pop    ecx
c0017673:	0f b6 c0             	movzx  eax,al
c0017676:	5e                   	pop    esi
c0017677:	50                   	push   eax
c0017678:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001767c:	50                   	push   eax
c001767d:	e8 fe f5 ff ff       	call   c0016c80 <Vm::outbv(unsigned short, unsigned char)>
c0017682:	83 c4 10             	add    esp,0x10
c0017685:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017688:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001768c:	74 03                	je     c0017691 <Vm::faultHandler(regs*)+0x521>
c001768e:	48                   	dec    eax
c001768f:	eb 01                	jmp    c0017692 <Vm::faultHandler(regs*)+0x522>
c0017691:	40                   	inc    eax
c0017692:	0f b7 c0             	movzx  eax,ax
c0017695:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017698:	e9 88 01 00 00       	jmp    c0017825 <Vm::faultHandler(regs*)+0x6b5>
c001769d:	8d 46 ff             	lea    eax,[esi-0x1]
c00176a0:	0f b6 f0             	movzx  esi,al
c00176a3:	83 fe 05             	cmp    esi,0x5
c00176a6:	77 1e                	ja     c00176c6 <Vm::faultHandler(regs*)+0x556>
c00176a8:	ff 24 b5 e4 2a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd51c]
c00176af:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00176b3:	eb 11                	jmp    c00176c6 <Vm::faultHandler(regs*)+0x556>
c00176b5:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00176b8:	eb 0c                	jmp    c00176c6 <Vm::faultHandler(regs*)+0x556>
c00176ba:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00176bd:	eb 07                	jmp    c00176c6 <Vm::faultHandler(regs*)+0x556>
c00176bf:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00176c2:	eb 02                	jmp    c00176c6 <Vm::faultHandler(regs*)+0x556>
c00176c4:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00176c6:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00176c9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00176ce:	74 37                	je     c0017707 <Vm::faultHandler(regs*)+0x597>
c00176d0:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00176d6:	76 2f                	jbe    c0017707 <Vm::faultHandler(regs*)+0x597>
c00176d8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00176dc:	50                   	push   eax
c00176dd:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00176e1:	50                   	push   eax
c00176e2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00176e6:	50                   	push   eax
c00176e7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00176eb:	50                   	push   eax
c00176ec:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176f0:	50                   	push   eax
c00176f1:	6a 6f                	push   0x6f
c00176f3:	6a 6f                	push   0x6f
c00176f5:	68 70 2a 02 c0       	push   0xc0022a70
c00176fa:	e8 46 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00176ff:	83 c4 20             	add    esp,0x20
c0017702:	e9 83 01 00 00       	jmp    c001788a <Vm::faultHandler(regs*)+0x71a>
c0017707:	0f b7 d7             	movzx  edx,di
c001770a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001770d:	0f b7 c6             	movzx  eax,si
c0017710:	81 e1 00 04 00 00    	and    ecx,0x400
c0017716:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017719:	83 e5 01             	and    ebp,0x1
c001771c:	74 1d                	je     c001773b <Vm::faultHandler(regs*)+0x5cb>
c001771e:	55                   	push   ebp
c001771f:	55                   	push   ebp
c0017720:	50                   	push   eax
c0017721:	52                   	push   edx
c0017722:	e8 f8 f9 ff ff       	call   c001711f <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017727:	83 c4 10             	add    esp,0x10
c001772a:	89 fa                	mov    edx,edi
c001772c:	ef                   	out    dx,eax
c001772d:	85 c9                	test   ecx,ecx
c001772f:	74 05                	je     c0017736 <Vm::faultHandler(regs*)+0x5c6>
c0017731:	83 ee 04             	sub    esi,0x4
c0017734:	eb 21                	jmp    c0017757 <Vm::faultHandler(regs*)+0x5e7>
c0017736:	83 c6 04             	add    esi,0x4
c0017739:	eb 1c                	jmp    c0017757 <Vm::faultHandler(regs*)+0x5e7>
c001773b:	55                   	push   ebp
c001773c:	55                   	push   ebp
c001773d:	50                   	push   eax
c001773e:	52                   	push   edx
c001773f:	e8 c9 f9 ff ff       	call   c001710d <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017744:	83 c4 10             	add    esp,0x10
c0017747:	89 fa                	mov    edx,edi
c0017749:	66 ef                	out    dx,ax
c001774b:	85 c9                	test   ecx,ecx
c001774d:	74 05                	je     c0017754 <Vm::faultHandler(regs*)+0x5e4>
c001774f:	83 ee 02             	sub    esi,0x2
c0017752:	eb 03                	jmp    c0017757 <Vm::faultHandler(regs*)+0x5e7>
c0017754:	83 c6 02             	add    esi,0x2
c0017757:	81 e6 ff ff 00 00    	and    esi,0xffff
c001775d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017760:	e9 c0 00 00 00       	jmp    c0017825 <Vm::faultHandler(regs*)+0x6b5>
c0017765:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001776c:	83 ec 0c             	sub    esp,0xc
c001776f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017773:	50                   	push   eax
c0017774:	e8 f4 f4 ff ff       	call   c0016c6d <Vm::inbv(unsigned short)>
c0017779:	0f b6 c0             	movzx  eax,al
c001777c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001777f:	eb 3a                	jmp    c00177bb <Vm::faultHandler(regs*)+0x64b>
c0017781:	83 e5 01             	and    ebp,0x1
c0017784:	74 07                	je     c001778d <Vm::faultHandler(regs*)+0x61d>
c0017786:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001778a:	ed                   	in     eax,dx
c001778b:	eb 14                	jmp    c00177a1 <Vm::faultHandler(regs*)+0x631>
c001778d:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017790:	66 31 f6             	xor    si,si
c0017793:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017796:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001779a:	66 ed                	in     ax,dx
c001779c:	0f b7 c0             	movzx  eax,ax
c001779f:	09 f0                	or     eax,esi
c00177a1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00177a4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00177a8:	eb 7e                	jmp    c0017828 <Vm::faultHandler(regs*)+0x6b8>
c00177aa:	52                   	push   edx
c00177ab:	52                   	push   edx
c00177ac:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00177b0:	50                   	push   eax
c00177b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177b5:	50                   	push   eax
c00177b6:	e8 c5 f4 ff ff       	call   c0016c80 <Vm::outbv(unsigned short, unsigned char)>
c00177bb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00177bf:	eb 4f                	jmp    c0017810 <Vm::faultHandler(regs*)+0x6a0>
c00177c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00177c4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177c8:	83 e5 01             	and    ebp,0x1
c00177cb:	74 03                	je     c00177d0 <Vm::faultHandler(regs*)+0x660>
c00177cd:	ef                   	out    dx,eax
c00177ce:	eb d4                	jmp    c00177a4 <Vm::faultHandler(regs*)+0x634>
c00177d0:	66 ef                	out    dx,ax
c00177d2:	eb d0                	jmp    c00177a4 <Vm::faultHandler(regs*)+0x634>
c00177d4:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00177db:	83 ec 0c             	sub    esp,0xc
c00177de:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00177e2:	50                   	push   eax
c00177e3:	e8 85 f4 ff ff       	call   c0016c6d <Vm::inbv(unsigned short)>
c00177e8:	0f b6 c0             	movzx  eax,al
c00177eb:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00177ee:	eb 1d                	jmp    c001780d <Vm::faultHandler(regs*)+0x69d>
c00177f0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00177f3:	83 e5 01             	and    ebp,0x1
c00177f6:	74 03                	je     c00177fb <Vm::faultHandler(regs*)+0x68b>
c00177f8:	ed                   	in     eax,dx
c00177f9:	eb 0d                	jmp    c0017808 <Vm::faultHandler(regs*)+0x698>
c00177fb:	66 ed                	in     ax,dx
c00177fd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017800:	0f b7 c0             	movzx  eax,ax
c0017803:	66 31 d2             	xor    dx,dx
c0017806:	09 d0                	or     eax,edx
c0017808:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001780b:	eb 18                	jmp    c0017825 <Vm::faultHandler(regs*)+0x6b5>
c001780d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017810:	83 c4 10             	add    esp,0x10
c0017813:	eb 13                	jmp    c0017828 <Vm::faultHandler(regs*)+0x6b8>
c0017815:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017818:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001781b:	83 e5 01             	and    ebp,0x1
c001781e:	74 03                	je     c0017823 <Vm::faultHandler(regs*)+0x6b3>
c0017820:	ef                   	out    dx,eax
c0017821:	eb 02                	jmp    c0017825 <Vm::faultHandler(regs*)+0x6b5>
c0017823:	66 ef                	out    dx,ax
c0017825:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017828:	b0 01                	mov    al,0x1
c001782a:	eb 60                	jmp    c001788c <Vm::faultHandler(regs*)+0x71c>
c001782c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017830:	50                   	push   eax
c0017831:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017835:	50                   	push   eax
c0017836:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001783a:	50                   	push   eax
c001783b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001783f:	50                   	push   eax
c0017840:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017844:	50                   	push   eax
c0017845:	52                   	push   edx
c0017846:	52                   	push   edx
c0017847:	68 9d 2a 02 c0       	push   0xc0022a9d
c001784c:	e8 f4 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017851:	83 c4 20             	add    esp,0x20
c0017854:	83 ec 0c             	sub    esp,0xc
c0017857:	6a 60                	push   0x60
c0017859:	e8 0f f4 ff ff       	call   c0016c6d <Vm::inbv(unsigned short)>
c001785e:	83 c4 10             	add    esp,0x10
c0017861:	0f b6 d0             	movzx  edx,al
c0017864:	83 fa 1c             	cmp    edx,0x1c
c0017867:	74 05                	je     c001786e <Vm::faultHandler(regs*)+0x6fe>
c0017869:	83 fa 5a             	cmp    edx,0x5a
c001786c:	75 e6                	jne    c0017854 <Vm::faultHandler(regs*)+0x6e4>
c001786e:	0f b6 c0             	movzx  eax,al
c0017871:	83 f8 1c             	cmp    eax,0x1c
c0017874:	74 05                	je     c001787b <Vm::faultHandler(regs*)+0x70b>
c0017876:	83 f8 5a             	cmp    eax,0x5a
c0017879:	75 0f                	jne    c001788a <Vm::faultHandler(regs*)+0x71a>
c001787b:	83 ec 0c             	sub    esp,0xc
c001787e:	6a 60                	push   0x60
c0017880:	e8 e8 f3 ff ff       	call   c0016c6d <Vm::inbv(unsigned short)>
c0017885:	83 c4 10             	add    esp,0x10
c0017888:	eb e4                	jmp    c001786e <Vm::faultHandler(regs*)+0x6fe>
c001788a:	31 c0                	xor    eax,eax
c001788c:	83 c4 2c             	add    esp,0x2c
c001788f:	5b                   	pop    ebx
c0017890:	5e                   	pop    esi
c0017891:	5f                   	pop    edi
c0017892:	5d                   	pop    ebp
c0017893:	c3                   	ret    

c0017894 <noCopro(unsigned long)>:
c0017894:	c3                   	ret    

c0017895 <nmiHandler(regs*, void*)>:
c0017895:	83 ec 0c             	sub    esp,0xc
c0017898:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001789d:	83 ec 0c             	sub    esp,0xc
c00178a0:	50                   	push   eax
c00178a1:	e8 10 fa fe ff       	call   c00072b6 <Computer::handleNMI()>
c00178a6:	83 c4 10             	add    esp,0x10
c00178a9:	90                   	nop
c00178aa:	83 c4 0c             	add    esp,0xc
c00178ad:	c3                   	ret    

c00178ae <doubleFault(regs*, void*)>:
c00178ae:	55                   	push   ebp
c00178af:	89 e5                	mov    ebp,esp
c00178b1:	83 ec 08             	sub    esp,0x8
c00178b4:	83 ec 0c             	sub    esp,0xc
c00178b7:	68 fc 2a 02 c0       	push   0xc0022afc
c00178bc:	e8 26 9d ff ff       	call   c00115e7 <KePanic(char const*)>
c00178c1:	83 c4 10             	add    esp,0x10
c00178c4:	90                   	nop
c00178c5:	c9                   	leave  
c00178c6:	c3                   	ret    

c00178c7 <displayDebugInfo(regs*)>:
c00178c7:	83 ec 1c             	sub    esp,0x1c
c00178ca:	0f 20 c0             	mov    eax,cr0
c00178cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00178d1:	0f 20 d0             	mov    eax,cr2
c00178d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178d8:	0f 20 d8             	mov    eax,cr3
c00178db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00178df:	0f 20 e0             	mov    eax,cr4
c00178e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00178e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178e9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00178ec:	83 ec 08             	sub    esp,0x8
c00178ef:	50                   	push   eax
c00178f0:	68 18 2b 02 c0       	push   0xc0022b18
c00178f5:	e8 4b 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00178fa:	83 c4 10             	add    esp,0x10
c00178fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017901:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017904:	83 ec 08             	sub    esp,0x8
c0017907:	50                   	push   eax
c0017908:	68 09 2b 02 c0       	push   0xc0022b09
c001790d:	e8 33 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017912:	83 c4 10             	add    esp,0x10
c0017915:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017919:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001791c:	83 ec 08             	sub    esp,0x8
c001791f:	50                   	push   eax
c0017920:	68 14 2b 02 c0       	push   0xc0022b14
c0017925:	e8 1b 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001792a:	83 c4 10             	add    esp,0x10
c001792d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017931:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017934:	83 ec 08             	sub    esp,0x8
c0017937:	50                   	push   eax
c0017938:	68 23 2b 02 c0       	push   0xc0022b23
c001793d:	e8 03 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017942:	83 c4 10             	add    esp,0x10
c0017945:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017949:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001794c:	83 ec 08             	sub    esp,0x8
c001794f:	50                   	push   eax
c0017950:	68 2e 2b 02 c0       	push   0xc0022b2e
c0017955:	e8 eb 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001795a:	83 c4 10             	add    esp,0x10
c001795d:	83 ec 08             	sub    esp,0x8
c0017960:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017964:	68 39 2b 02 c0       	push   0xc0022b39
c0017969:	e8 d7 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001796e:	83 c4 10             	add    esp,0x10
c0017971:	83 ec 08             	sub    esp,0x8
c0017974:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017978:	68 44 2b 02 c0       	push   0xc0022b44
c001797d:	e8 c3 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017982:	83 c4 10             	add    esp,0x10
c0017985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017989:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001798c:	c1 e0 05             	shl    eax,0x5
c001798f:	8d 90 c0 3e 02 c0    	lea    edx,[eax-0x3ffdc140]
c0017995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017999:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001799c:	83 ec 04             	sub    esp,0x4
c001799f:	52                   	push   edx
c00179a0:	50                   	push   eax
c00179a1:	68 4f 2b 02 c0       	push   0xc0022b4f
c00179a6:	e8 9a 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179ab:	83 c4 10             	add    esp,0x10
c00179ae:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179b9:	83 ec 0c             	sub    esp,0xc
c00179bc:	50                   	push   eax
c00179bd:	e8 97 0d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c00179c2:	83 c4 10             	add    esp,0x10
c00179c5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179ca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179d0:	83 ec 08             	sub    esp,0x8
c00179d3:	68 5e 2b 02 c0       	push   0xc0022b5e
c00179d8:	50                   	push   eax
c00179d9:	e8 c8 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00179de:	83 c4 10             	add    esp,0x10
c00179e1:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179e6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179f0:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00179f3:	83 ec 08             	sub    esp,0x8
c00179f6:	52                   	push   edx
c00179f7:	50                   	push   eax
c00179f8:	e8 63 10 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00179fd:	83 c4 10             	add    esp,0x10
c0017a00:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a05:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a0b:	83 ec 08             	sub    esp,0x8
c0017a0e:	68 6c 2b 02 c0       	push   0xc0022b6c
c0017a13:	50                   	push   eax
c0017a14:	e8 8d 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a19:	83 c4 10             	add    esp,0x10
c0017a1c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a21:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a27:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017a2c:	8b 12                	mov    edx,DWORD PTR [edx]
c0017a2e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017a31:	83 c2 0c             	add    edx,0xc
c0017a34:	83 ec 08             	sub    esp,0x8
c0017a37:	52                   	push   edx
c0017a38:	50                   	push   eax
c0017a39:	e8 68 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a3e:	83 c4 10             	add    esp,0x10
c0017a41:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a46:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a4c:	83 ec 08             	sub    esp,0x8
c0017a4f:	68 75 2b 02 c0       	push   0xc0022b75
c0017a54:	50                   	push   eax
c0017a55:	e8 4c 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a5a:	83 c4 10             	add    esp,0x10
c0017a5d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a62:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a6c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017a6f:	83 ec 08             	sub    esp,0x8
c0017a72:	52                   	push   edx
c0017a73:	50                   	push   eax
c0017a74:	e8 e7 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017a79:	83 c4 10             	add    esp,0x10
c0017a7c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a81:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a87:	83 ec 08             	sub    esp,0x8
c0017a8a:	68 7d 2b 02 c0       	push   0xc0022b7d
c0017a8f:	50                   	push   eax
c0017a90:	e8 11 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a95:	83 c4 10             	add    esp,0x10
c0017a98:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a9d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aa3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017aa7:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017aaa:	83 ec 08             	sub    esp,0x8
c0017aad:	52                   	push   edx
c0017aae:	50                   	push   eax
c0017aaf:	e8 ac 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017ab4:	83 c4 10             	add    esp,0x10
c0017ab7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017abc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ac2:	83 ec 08             	sub    esp,0x8
c0017ac5:	68 85 2b 02 c0       	push   0xc0022b85
c0017aca:	50                   	push   eax
c0017acb:	e8 d6 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ad0:	83 c4 10             	add    esp,0x10
c0017ad3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ad8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ade:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ae2:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017ae5:	83 ec 08             	sub    esp,0x8
c0017ae8:	52                   	push   edx
c0017ae9:	50                   	push   eax
c0017aea:	e8 71 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017aef:	83 c4 10             	add    esp,0x10
c0017af2:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017af7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017afd:	83 ec 08             	sub    esp,0x8
c0017b00:	68 8d 2b 02 c0       	push   0xc0022b8d
c0017b05:	50                   	push   eax
c0017b06:	e8 9b 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b0b:	83 c4 10             	add    esp,0x10
c0017b0e:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b13:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b19:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b1d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017b20:	83 ec 08             	sub    esp,0x8
c0017b23:	52                   	push   edx
c0017b24:	50                   	push   eax
c0017b25:	e8 36 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b2a:	83 c4 10             	add    esp,0x10
c0017b2d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b32:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b38:	83 ec 08             	sub    esp,0x8
c0017b3b:	68 95 2b 02 c0       	push   0xc0022b95
c0017b40:	50                   	push   eax
c0017b41:	e8 60 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b46:	83 c4 10             	add    esp,0x10
c0017b49:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b4e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b58:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017b5b:	83 ec 08             	sub    esp,0x8
c0017b5e:	52                   	push   edx
c0017b5f:	50                   	push   eax
c0017b60:	e8 fb 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b65:	83 c4 10             	add    esp,0x10
c0017b68:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b6d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b73:	83 ec 08             	sub    esp,0x8
c0017b76:	68 9d 2b 02 c0       	push   0xc0022b9d
c0017b7b:	50                   	push   eax
c0017b7c:	e8 25 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b81:	83 c4 10             	add    esp,0x10
c0017b84:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b89:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b8f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b93:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017b96:	83 ec 08             	sub    esp,0x8
c0017b99:	52                   	push   edx
c0017b9a:	50                   	push   eax
c0017b9b:	e8 c0 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017ba0:	83 c4 10             	add    esp,0x10
c0017ba3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ba8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bae:	83 ec 08             	sub    esp,0x8
c0017bb1:	68 a5 2b 02 c0       	push   0xc0022ba5
c0017bb6:	50                   	push   eax
c0017bb7:	e8 ea 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bbc:	83 c4 10             	add    esp,0x10
c0017bbf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bc4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bca:	83 ec 08             	sub    esp,0x8
c0017bcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bd1:	50                   	push   eax
c0017bd2:	e8 89 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017bd7:	83 c4 10             	add    esp,0x10
c0017bda:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bdf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017be5:	83 ec 08             	sub    esp,0x8
c0017be8:	68 ae 2b 02 c0       	push   0xc0022bae
c0017bed:	50                   	push   eax
c0017bee:	e8 b3 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bf3:	83 c4 10             	add    esp,0x10
c0017bf6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bfb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c01:	83 ec 08             	sub    esp,0x8
c0017c04:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c08:	50                   	push   eax
c0017c09:	e8 52 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c0e:	83 c4 10             	add    esp,0x10
c0017c11:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c16:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c1c:	83 ec 08             	sub    esp,0x8
c0017c1f:	68 b6 2b 02 c0       	push   0xc0022bb6
c0017c24:	50                   	push   eax
c0017c25:	e8 7c 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c2a:	83 c4 10             	add    esp,0x10
c0017c2d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c32:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c38:	83 ec 08             	sub    esp,0x8
c0017c3b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017c3f:	50                   	push   eax
c0017c40:	e8 1b 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c45:	83 c4 10             	add    esp,0x10
c0017c48:	fa                   	cli    
c0017c49:	f4                   	hlt    
c0017c4a:	eb fe                	jmp    c0017c4a <displayDebugInfo(regs*)+0x383>

c0017c4c <HalSystemIdle()>:
c0017c4c:	56                   	push   esi
c0017c4d:	53                   	push   ebx
c0017c4e:	83 ec 14             	sub    esp,0x14
c0017c51:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c5c:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017c62:	83 e0 04             	and    eax,0x4
c0017c65:	0f b6 c0             	movzx  eax,al
c0017c68:	85 c0                	test   eax,eax
c0017c6a:	0f 95 c0             	setne  al
c0017c6d:	0f b6 c0             	movzx  eax,al
c0017c70:	85 c0                	test   eax,eax
c0017c72:	74 4c                	je     c0017cc0 <HalSystemIdle()+0x74>
c0017c74:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c79:	83 ec 08             	sub    esp,0x8
c0017c7c:	68 e1 00 00 00       	push   0xe1
c0017c81:	50                   	push   eax
c0017c82:	e8 39 f4 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017c87:	83 c4 10             	add    esp,0x10
c0017c8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c92:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c9b:	83 e2 02             	and    edx,0x2
c0017c9e:	89 d3                	mov    ebx,edx
c0017ca0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ca4:	83 e2 00             	and    edx,0x0
c0017ca7:	89 d6                	mov    esi,edx
c0017ca9:	56                   	push   esi
c0017caa:	53                   	push   ebx
c0017cab:	68 e1 00 00 00       	push   0xe1
c0017cb0:	50                   	push   eax
c0017cb1:	e8 36 f4 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0017cb6:	83 c4 10             	add    esp,0x10
c0017cb9:	e8 d6 84 fe ff       	call   c0000194 <doTPAUSE>
c0017cbe:	eb 01                	jmp    c0017cc1 <HalSystemIdle()+0x75>
c0017cc0:	f4                   	hlt    
c0017cc1:	90                   	nop
c0017cc2:	83 c4 14             	add    esp,0x14
c0017cc5:	5b                   	pop    ebx
c0017cc6:	5e                   	pop    esi
c0017cc7:	c3                   	ret    

c0017cc8 <displayProgramFault(char const*)>:
c0017cc8:	83 ec 0c             	sub    esp,0xc
c0017ccb:	83 ec 0c             	sub    esp,0xc
c0017cce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cd2:	e8 6e 2c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017cd7:	83 c4 10             	add    esp,0x10
c0017cda:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017cdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ce1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017ce4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cea:	85 c0                	test   eax,eax
c0017cec:	74 21                	je     c0017d0f <displayProgramFault(char const*)+0x47>
c0017cee:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017cf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cf5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017cf8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cfe:	6a 04                	push   0x4
c0017d00:	6a 0f                	push   0xf
c0017d02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d06:	50                   	push   eax
c0017d07:	e8 0c 0e ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017d0c:	83 c4 10             	add    esp,0x10
c0017d0f:	90                   	nop
c0017d10:	83 c4 0c             	add    esp,0xc
c0017d13:	c3                   	ret    

c0017d14 <gpFault(regs*, void*)>:
c0017d14:	83 ec 1c             	sub    esp,0x1c
c0017d17:	c7 05 74 c7 02 c0 70 71 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0017170
c0017d21:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d26:	85 c0                	test   eax,eax
c0017d28:	74 1e                	je     c0017d48 <gpFault(regs*, void*)+0x34>
c0017d2a:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d2f:	83 ec 0c             	sub    esp,0xc
c0017d32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d36:	ff d0                	call   eax
c0017d38:	83 c4 10             	add    esp,0x10
c0017d3b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017d3f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017d44:	85 c0                	test   eax,eax
c0017d46:	75 2e                	jne    c0017d76 <gpFault(regs*, void*)+0x62>
c0017d48:	83 ec 0c             	sub    esp,0xc
c0017d4b:	68 be 2b 02 c0       	push   0xc0022bbe
c0017d50:	e8 73 ff ff ff       	call   c0017cc8 <displayProgramFault(char const*)>
c0017d55:	83 c4 10             	add    esp,0x10
c0017d58:	83 ec 0c             	sub    esp,0xc
c0017d5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d5f:	e8 63 fb ff ff       	call   c00178c7 <displayDebugInfo(regs*)>
c0017d64:	83 c4 10             	add    esp,0x10
c0017d67:	83 ec 0c             	sub    esp,0xc
c0017d6a:	6a 00                	push   0x0
c0017d6c:	e8 a3 ed ff ff       	call   c0016b14 <Thr::terminateFromIRQ(int)>
c0017d71:	83 c4 10             	add    esp,0x10
c0017d74:	eb 01                	jmp    c0017d77 <gpFault(regs*, void*)+0x63>
c0017d76:	90                   	nop
c0017d77:	83 c4 1c             	add    esp,0x1c
c0017d7a:	c3                   	ret    

c0017d7b <pgFault(regs*, void*)>:
c0017d7b:	83 ec 1c             	sub    esp,0x1c
c0017d7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d82:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017d85:	0f 20 d0             	mov    eax,cr2
c0017d88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d90:	83 ec 04             	sub    esp,0x4
c0017d93:	52                   	push   edx
c0017d94:	50                   	push   eax
c0017d95:	68 9c 2c 02 c0       	push   0xc0022c9c
c0017d9a:	e8 a6 2b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017d9f:	83 c4 10             	add    esp,0x10
c0017da2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017da7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017da9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017dac:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017db2:	0f 20 d2             	mov    edx,cr2
c0017db5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017db9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017dbd:	83 ec 08             	sub    esp,0x8
c0017dc0:	52                   	push   edx
c0017dc1:	50                   	push   eax
c0017dc2:	e8 c9 25 ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017dc7:	83 c4 10             	add    esp,0x10
c0017dca:	0f b6 c0             	movzx  eax,al
c0017dcd:	85 c0                	test   eax,eax
c0017dcf:	75 2e                	jne    c0017dff <pgFault(regs*, void*)+0x84>
c0017dd1:	83 ec 0c             	sub    esp,0xc
c0017dd4:	68 d7 2b 02 c0       	push   0xc0022bd7
c0017dd9:	e8 ea fe ff ff       	call   c0017cc8 <displayProgramFault(char const*)>
c0017dde:	83 c4 10             	add    esp,0x10
c0017de1:	83 ec 0c             	sub    esp,0xc
c0017de4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017de8:	e8 da fa ff ff       	call   c00178c7 <displayDebugInfo(regs*)>
c0017ded:	83 c4 10             	add    esp,0x10
c0017df0:	83 ec 0c             	sub    esp,0xc
c0017df3:	6a 00                	push   0x0
c0017df5:	e8 1a ed ff ff       	call   c0016b14 <Thr::terminateFromIRQ(int)>
c0017dfa:	83 c4 10             	add    esp,0x10
c0017dfd:	eb 01                	jmp    c0017e00 <pgFault(regs*, void*)+0x85>
c0017dff:	90                   	nop
c0017e00:	83 c4 1c             	add    esp,0x1c
c0017e03:	c3                   	ret    

c0017e04 <otherISRHandler(regs*, void*)>:
c0017e04:	83 ec 0c             	sub    esp,0xc
c0017e07:	83 ec 0c             	sub    esp,0xc
c0017e0a:	68 c4 2c 02 c0       	push   0xc0022cc4
c0017e0f:	e8 b4 fe ff ff       	call   c0017cc8 <displayProgramFault(char const*)>
c0017e14:	83 c4 10             	add    esp,0x10
c0017e17:	83 ec 0c             	sub    esp,0xc
c0017e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e1e:	e8 a4 fa ff ff       	call   c00178c7 <displayDebugInfo(regs*)>
c0017e23:	83 c4 10             	add    esp,0x10
c0017e26:	83 ec 0c             	sub    esp,0xc
c0017e29:	6a 00                	push   0x0
c0017e2b:	e8 e4 ec ff ff       	call   c0016b14 <Thr::terminateFromIRQ(int)>
c0017e30:	83 c4 10             	add    esp,0x10
c0017e33:	90                   	nop
c0017e34:	83 c4 0c             	add    esp,0xc
c0017e37:	c3                   	ret    

c0017e38 <opcodeFault(regs*, void*)>:
c0017e38:	55                   	push   ebp
c0017e39:	89 e5                	mov    ebp,esp
c0017e3b:	83 ec 08             	sub    esp,0x8
c0017e3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e41:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e44:	83 ec 08             	sub    esp,0x8
c0017e47:	50                   	push   eax
c0017e48:	68 e2 2b 02 c0       	push   0xc0022be2
c0017e4d:	e8 f3 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017e52:	83 c4 10             	add    esp,0x10
c0017e55:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017e5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017e60:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017e66:	0f b6 c0             	movzx  eax,al
c0017e69:	85 c0                	test   eax,eax
c0017e6b:	74 21                	je     c0017e8e <opcodeFault(regs*, void*)+0x56>
c0017e6d:	83 ec 0c             	sub    esp,0xc
c0017e70:	68 ec 2c 02 c0       	push   0xc0022cec
c0017e75:	e8 cb 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017e7a:	83 c4 10             	add    esp,0x10
c0017e7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e80:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e83:	8d 50 19             	lea    edx,[eax+0x19]
c0017e86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e89:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017e8c:	eb 2b                	jmp    c0017eb9 <opcodeFault(regs*, void*)+0x81>
c0017e8e:	83 ec 0c             	sub    esp,0xc
c0017e91:	68 f0 2b 02 c0       	push   0xc0022bf0
c0017e96:	e8 2d fe ff ff       	call   c0017cc8 <displayProgramFault(char const*)>
c0017e9b:	83 c4 10             	add    esp,0x10
c0017e9e:	83 ec 0c             	sub    esp,0xc
c0017ea1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017ea4:	e8 1e fa ff ff       	call   c00178c7 <displayDebugInfo(regs*)>
c0017ea9:	83 c4 10             	add    esp,0x10
c0017eac:	83 ec 0c             	sub    esp,0xc
c0017eaf:	6a 00                	push   0x0
c0017eb1:	e8 5e ec ff ff       	call   c0016b14 <Thr::terminateFromIRQ(int)>
c0017eb6:	83 c4 10             	add    esp,0x10
c0017eb9:	c9                   	leave  
c0017eba:	c3                   	ret    

c0017ebb <i386SaveCoprocessor(void*)>:
c0017ebb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ebf:	83 c0 3f             	add    eax,0x3f
c0017ec2:	83 e0 c0             	and    eax,0xffffffc0
c0017ec5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ec9:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017ecf <i386LoadCoprocessor(void*)>:
c0017ecf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ed3:	83 c0 3f             	add    eax,0x3f
c0017ed6:	83 e0 c0             	and    eax,0xffffffc0
c0017ed9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017edd:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017ee3 <x87EmulHandler(regs*, void*)>:
c0017ee3:	53                   	push   ebx
c0017ee4:	83 ec 08             	sub    esp,0x8
c0017ee7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017eec:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017ef0:	74 10                	je     c0017f02 <x87EmulHandler(regs*, void*)+0x1f>
c0017ef2:	83 ec 0c             	sub    esp,0xc
c0017ef5:	68 fd 2b 02 c0       	push   0xc0022bfd
c0017efa:	e8 e8 96 ff ff       	call   c00115e7 <KePanic(char const*)>
c0017eff:	83 c4 10             	add    esp,0x10
c0017f02:	0f 20 c0             	mov    eax,cr0
c0017f05:	a8 08                	test   al,0x8
c0017f07:	74 59                	je     c0017f62 <x87EmulHandler(regs*, void*)+0x7f>
c0017f09:	0f 06                	clts   
c0017f0b:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f10:	85 c0                	test   eax,eax
c0017f12:	74 0e                	je     c0017f22 <x87EmulHandler(regs*, void*)+0x3f>
c0017f14:	83 ec 0c             	sub    esp,0xc
c0017f17:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f1a:	e8 9c ff ff ff       	call   c0017ebb <i386SaveCoprocessor(void*)>
c0017f1f:	83 c4 10             	add    esp,0x10
c0017f22:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017f28:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017f2c:	75 12                	jne    c0017f40 <x87EmulHandler(regs*, void*)+0x5d>
c0017f2e:	83 ec 0c             	sub    esp,0xc
c0017f31:	68 40 02 00 00       	push   0x240
c0017f36:	e8 7b fb fe ff       	call   c0007ab6 <malloc>
c0017f3b:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017f3e:	eb 10                	jmp    c0017f50 <x87EmulHandler(regs*, void*)+0x6d>
c0017f40:	83 ec 0c             	sub    esp,0xc
c0017f43:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f48:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f4b:	e8 7f ff ff ff       	call   c0017ecf <i386LoadCoprocessor(void*)>
c0017f50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f55:	83 c4 10             	add    esp,0x10
c0017f58:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017f5d:	83 c4 08             	add    esp,0x8
c0017f60:	5b                   	pop    ebx
c0017f61:	c3                   	ret    
c0017f62:	83 ec 0c             	sub    esp,0xc
c0017f65:	68 11 2c 02 c0       	push   0xc0022c11
c0017f6a:	e8 d6 29 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017f6f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017f77:	83 c4 18             	add    esp,0x18
c0017f7a:	5b                   	pop    ebx
c0017f7b:	e9 94 eb ff ff       	jmp    c0016b14 <Thr::terminateFromIRQ(int)>

c0017f80 <HalInitialiseCoprocessor()>:
c0017f80:	83 ec 10             	sub    esp,0x10
c0017f83:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0017f8d:	6a 00                	push   0x0
c0017f8f:	68 e3 7e 01 c0       	push   0xc0017ee3
c0017f94:	6a 07                	push   0x7
c0017f96:	e8 27 4f ff ff       	call   c000cec2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f9b:	e8 50 70 00 00       	call   c001eff0 <avxDetect>
c0017fa0:	83 c4 10             	add    esp,0x10
c0017fa3:	85 c0                	test   eax,eax
c0017fa5:	74 1c                	je     c0017fc3 <HalInitialiseCoprocessor()+0x43>
c0017fa7:	c7 05 70 c7 02 c0 1a f0 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f01a
c0017fb1:	c7 05 6c c7 02 c0 2b f0 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f02b
c0017fbb:	83 c4 0c             	add    esp,0xc
c0017fbe:	e9 79 70 00 00       	jmp    c001f03c <avxInit>
c0017fc3:	e8 b8 73 00 00       	call   c001f380 <absolutelyNoChanceInHell>
c0017fc8:	85 c0                	test   eax,eax
c0017fca:	74 1c                	je     c0017fe8 <HalInitialiseCoprocessor()+0x68>
c0017fcc:	c7 05 70 c7 02 c0 98 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f398
c0017fd6:	c7 05 6c c7 02 c0 a0 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f3a0
c0017fe0:	83 c4 0c             	add    esp,0xc
c0017fe3:	e9 c0 73 00 00       	jmp    c001f3a8 <sseInit>
c0017fe8:	e8 d9 73 00 00       	call   c001f3c6 <x87Detect>
c0017fed:	85 c0                	test   eax,eax
c0017fef:	74 1c                	je     c001800d <HalInitialiseCoprocessor()+0x8d>
c0017ff1:	c7 05 70 c7 02 c0 e1 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f3e1
c0017ffb:	c7 05 6c c7 02 c0 e8 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f3e8
c0018005:	83 c4 0c             	add    esp,0xc
c0018008:	e9 e2 73 00 00       	jmp    c001f3ef <x87Init>
c001800d:	c7 05 70 c7 02 c0 94 78 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc0017894
c0018017:	c7 05 6c c7 02 c0 94 78 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc0017894
c0018021:	0f 20 c0             	mov    eax,cr0
c0018024:	83 c8 04             	or     eax,0x4
c0018027:	0f 22 c0             	mov    cr0,eax
c001802a:	83 c4 0c             	add    esp,0xc
c001802d:	c3                   	ret    

c001802e <HalPanic(char const*)>:
c001802e:	53                   	push   ebx
c001802f:	83 ec 10             	sub    esp,0x10
c0018032:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018036:	fa                   	cli    
c0018037:	53                   	push   ebx
c0018038:	68 27 2c 02 c0       	push   0xc0022c27
c001803d:	e8 03 29 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0018042:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c0018047:	83 c4 10             	add    esp,0x10
c001804a:	85 c0                	test   eax,eax
c001804c:	74 09                	je     c0018057 <HalPanic(char const*)+0x29>
c001804e:	83 ec 0c             	sub    esp,0xc
c0018051:	53                   	push   ebx
c0018052:	ff d0                	call   eax
c0018054:	83 c4 10             	add    esp,0x10
c0018057:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c001805c:	85 c0                	test   eax,eax
c001805e:	0f 84 dc 00 00 00    	je     c0018140 <HalPanic(char const*)+0x112>
c0018064:	52                   	push   edx
c0018065:	6a 01                	push   0x1
c0018067:	6a 0f                	push   0xf
c0018069:	50                   	push   eax
c001806a:	e8 45 05 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001806f:	59                   	pop    ecx
c0018070:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018076:	e8 29 07 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c001807b:	58                   	pop    eax
c001807c:	5a                   	pop    edx
c001807d:	68 44 0e 02 c0       	push   0xc0020e44
c0018082:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018088:	e8 5f 05 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c001808d:	83 c4 0c             	add    esp,0xc
c0018090:	6a 01                	push   0x1
c0018092:	6a 0f                	push   0xf
c0018094:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001809a:	e8 15 05 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001809f:	59                   	pop    ecx
c00180a0:	58                   	pop    eax
c00180a1:	68 40 2c 02 c0       	push   0xc0022c40
c00180a6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180ac:	e8 f5 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00180b1:	83 c4 0c             	add    esp,0xc
c00180b4:	6a 0f                	push   0xf
c00180b6:	6a 01                	push   0x1
c00180b8:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180be:	e8 f1 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180c3:	58                   	pop    eax
c00180c4:	5a                   	pop    edx
c00180c5:	68 49 2c 02 c0       	push   0xc0022c49
c00180ca:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180d0:	e8 d1 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00180d5:	83 c4 0c             	add    esp,0xc
c00180d8:	6a 01                	push   0x1
c00180da:	6a 0f                	push   0xf
c00180dc:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180e2:	e8 cd 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180e7:	59                   	pop    ecx
c00180e8:	58                   	pop    eax
c00180e9:	68 8d 2c 02 c0       	push   0xc0022c8d
c00180ee:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180f4:	e8 ad 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00180f9:	58                   	pop    eax
c00180fa:	5a                   	pop    edx
c00180fb:	68 56 2c 02 c0       	push   0xc0022c56
c0018100:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018106:	e8 9b 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001810b:	59                   	pop    ecx
c001810c:	58                   	pop    eax
c001810d:	68 90 2c 02 c0       	push   0xc0022c90
c0018112:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018118:	e8 89 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001811d:	58                   	pop    eax
c001811e:	5a                   	pop    edx
c001811f:	53                   	push   ebx
c0018120:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018126:	e8 7b 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001812b:	59                   	pop    ecx
c001812c:	5b                   	pop    ebx
c001812d:	68 8d 2c 02 c0       	push   0xc0022c8d
c0018132:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018138:	e8 69 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001813d:	83 c4 10             	add    esp,0x10
c0018140:	eb fe                	jmp    c0018140 <HalPanic(char const*)+0x112>

c0018142 <HalQueryPerformanceCounter()>:
c0018142:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018147:	31 d2                	xor    edx,edx
c0018149:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001814f:	31 c0                	xor    eax,eax
c0018151:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0018158:	74 02                	je     c001815c <HalQueryPerformanceCounter()+0x1a>
c001815a:	0f 31                	rdtsc  
c001815c:	c3                   	ret    

c001815d <HalInitialise()>:
c001815d:	53                   	push   ebx
c001815e:	83 ec 08             	sub    esp,0x8
c0018161:	e8 8c 4f ff ff       	call   c000d0f2 <setupINTS()>
c0018166:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c001816d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018172:	75 0f                	jne    c0018183 <HalInitialise()+0x26>
c0018174:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001817a:	83 e2 fe             	and    edx,0xfffffffe
c001817d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018183:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018189:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c0018190:	83 e2 fe             	and    edx,0xfffffffe
c0018193:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0018199:	e8 9e 02 00 00       	call   c001843c <picOpen()>
c001819e:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00181a5:	74 0a                	je     c00181b1 <HalInitialise()+0x54>
c00181a7:	e8 e0 01 00 00       	call   c001838c <picDisable()>
c00181ac:	e8 ad 67 00 00       	call   c001e95e <apicOpen()>
c00181b1:	bb 0f 00 00 00       	mov    ebx,0xf
c00181b6:	50                   	push   eax
c00181b7:	6a 00                	push   0x0
c00181b9:	68 04 7e 01 c0       	push   0xc0017e04
c00181be:	6a 00                	push   0x0
c00181c0:	e8 fd 4c ff ff       	call   c000cec2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181c5:	83 c4 0c             	add    esp,0xc
c00181c8:	6a 00                	push   0x0
c00181ca:	68 04 7e 01 c0       	push   0xc0017e04
c00181cf:	6a 01                	push   0x1
c00181d1:	e8 ec 4c ff ff       	call   c000cec2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181d6:	83 c4 0c             	add    esp,0xc
c00181d9:	6a 00                	push   0x0
c00181db:	68 95 78 01 c0       	push   0xc0017895
c00181e0:	6a 02                	push   0x2
c00181e2:	e8 db 4c ff ff       	call   c000cec2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181e7:	83 c4 0c             	add    esp,0xc
c00181ea:	6a 00                	push   0x0
c00181ec:	68 04 7e 01 c0       	push   0xc0017e04
c00181f1:	6a 03                	push   0x3
c00181f3:	e8 ca 4c ff ff       	call   c000cec2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181f8:	83 c4 0c             	add    esp,0xc
c00181fb:	6a 00                	push   0x0
c00181fd:	68 04 7e 01 c0       	push   0xc0017e04
c0018202:	6a 04                	push   0x4
c0018204:	e8 b9 4c ff ff       	call   c000cec2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018209:	83 c4 0c             	add    esp,0xc
c001820c:	6a 00                	push   0x0
c001820e:	68 04 7e 01 c0       	push   0xc0017e04
c0018213:	6a 05                	push   0x5
c0018215:	e8 a8 4c ff ff       	call   c000cec2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001821a:	83 c4 0c             	add    esp,0xc
c001821d:	6a 00                	push   0x0
c001821f:	68 38 7e 01 c0       	push   0xc0017e38
c0018224:	6a 06                	push   0x6
c0018226:	e8 97 4c ff ff       	call   c000cec2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001822b:	83 c4 0c             	add    esp,0xc
c001822e:	6a 00                	push   0x0
c0018230:	68 ae 78 01 c0       	push   0xc00178ae
c0018235:	6a 08                	push   0x8
c0018237:	e8 86 4c ff ff       	call   c000cec2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001823c:	83 c4 0c             	add    esp,0xc
c001823f:	6a 00                	push   0x0
c0018241:	68 04 7e 01 c0       	push   0xc0017e04
c0018246:	6a 09                	push   0x9
c0018248:	e8 75 4c ff ff       	call   c000cec2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001824d:	83 c4 0c             	add    esp,0xc
c0018250:	6a 00                	push   0x0
c0018252:	68 04 7e 01 c0       	push   0xc0017e04
c0018257:	6a 0a                	push   0xa
c0018259:	e8 64 4c ff ff       	call   c000cec2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001825e:	83 c4 0c             	add    esp,0xc
c0018261:	6a 00                	push   0x0
c0018263:	68 04 7e 01 c0       	push   0xc0017e04
c0018268:	6a 0b                	push   0xb
c001826a:	e8 53 4c ff ff       	call   c000cec2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001826f:	83 c4 0c             	add    esp,0xc
c0018272:	6a 00                	push   0x0
c0018274:	68 14 7d 01 c0       	push   0xc0017d14
c0018279:	6a 0d                	push   0xd
c001827b:	e8 42 4c ff ff       	call   c000cec2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018280:	83 c4 0c             	add    esp,0xc
c0018283:	6a 00                	push   0x0
c0018285:	68 7b 7d 01 c0       	push   0xc0017d7b
c001828a:	6a 0e                	push   0xe
c001828c:	e8 31 4c ff ff       	call   c000cec2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018291:	83 c4 10             	add    esp,0x10
c0018294:	50                   	push   eax
c0018295:	6a 00                	push   0x0
c0018297:	68 04 7e 01 c0       	push   0xc0017e04
c001829c:	53                   	push   ebx
c001829d:	43                   	inc    ebx
c001829e:	e8 1f 4c ff ff       	call   c000cec2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182a3:	83 c4 10             	add    esp,0x10
c00182a6:	83 fb 1e             	cmp    ebx,0x1e
c00182a9:	75 e9                	jne    c0018294 <HalInitialise()+0x137>
c00182ab:	50                   	push   eax
c00182ac:	6a 00                	push   0x0
c00182ae:	68 80 2a 01 c0       	push   0xc0012a80
c00182b3:	6a 60                	push   0x60
c00182b5:	e8 08 4c ff ff       	call   c000cec2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182ba:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00182bf:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00182c9:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00182d0:	e8 e1 f7 fe ff       	call   c0007ab6 <malloc>
c00182d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00182d8:	89 c3                	mov    ebx,eax
c00182da:	e8 3b 09 00 00       	call   c0018c1a <RTC::RTC()>
c00182df:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00182e9:	5a                   	pop    edx
c00182ea:	59                   	pop    ecx
c00182eb:	53                   	push   ebx
c00182ec:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00182f2:	e8 97 46 ff ff       	call   c000c98e <Device::addChild(Device*)>
c00182f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00182f9:	6a 00                	push   0x0
c00182fb:	6a 00                	push   0x0
c00182fd:	6a 00                	push   0x0
c00182ff:	53                   	push   ebx
c0018300:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018303:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018308:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001830e:	83 c4 28             	add    esp,0x28
c0018311:	5b                   	pop    ebx
c0018312:	c3                   	ret    

c0018313 <HalMakeBeep(int)>:
c0018313:	53                   	push   ebx
c0018314:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018318:	85 db                	test   ebx,ebx
c001831a:	75 07                	jne    c0018323 <HalMakeBeep(int)+0x10>
c001831c:	e4 61                	in     al,0x61
c001831e:	83 e0 fc             	and    eax,0xfffffffc
c0018321:	eb 26                	jmp    c0018349 <HalMakeBeep(int)+0x36>
c0018323:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018328:	99                   	cdq    
c0018329:	f7 fb                	idiv   ebx
c001832b:	89 c1                	mov    ecx,eax
c001832d:	b0 b6                	mov    al,0xb6
c001832f:	e6 43                	out    0x43,al
c0018331:	88 c8                	mov    al,cl
c0018333:	e6 42                	out    0x42,al
c0018335:	89 c8                	mov    eax,ecx
c0018337:	c1 e8 08             	shr    eax,0x8
c001833a:	e6 42                	out    0x42,al
c001833c:	e4 61                	in     al,0x61
c001833e:	89 c2                	mov    edx,eax
c0018340:	83 ca 03             	or     edx,0x3
c0018343:	38 d0                	cmp    al,dl
c0018345:	74 04                	je     c001834b <HalMakeBeep(int)+0x38>
c0018347:	88 d0                	mov    al,dl
c0018349:	e6 61                	out    0x61,al
c001834b:	5b                   	pop    ebx
c001834c:	c3                   	ret    

c001834d <HalGetRand()>:
c001834d:	31 c0                	xor    eax,eax
c001834f:	c3                   	ret    

c0018350 <HalEndOfInterrupt(int)>:
c0018350:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c0018357:	74 23                	je     c001837c <HalEndOfInterrupt(int)+0x2c>
c0018359:	83 ec 14             	sub    esp,0x14
c001835c:	6a 1b                	push   0x1b
c001835e:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018364:	e8 57 ed fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0018369:	25 00 f0 ff ff       	and    eax,0xfffff000
c001836e:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018378:	83 c4 1c             	add    esp,0x1c
c001837b:	c3                   	ret    
c001837c:	e9 3f 02 00 00       	jmp    c00185c0 <picEOI(int)>

c0018381 <HalRestart()>:
c0018381:	c3                   	ret    

c0018382 <HalShutdown()>:
c0018382:	c3                   	ret    

c0018383 <HalSleep()>:
c0018383:	c3                   	ret    

c0018384 <picIoWait()>:
c0018384:	eb 00                	jmp    c0018386 <picIoWait()+0x2>
c0018386:	eb 00                	jmp    c0018388 <picIoWait()+0x4>
c0018388:	90                   	nop
c0018389:	c3                   	ret    
c001838a:	66 90                	xchg   ax,ax

c001838c <picDisable()>:
c001838c:	83 ec 10             	sub    esp,0x10
c001838f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018396:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001839b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001839f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00183a4:	ee                   	out    dx,al
c00183a5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00183ac:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00183b1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00183b5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00183ba:	ee                   	out    dx,al
c00183bb:	90                   	nop
c00183bc:	83 c4 10             	add    esp,0x10
c00183bf:	c3                   	ret    

c00183c0 <picGetIRQReg(int)>:
c00183c0:	83 ec 10             	sub    esp,0x10
c00183c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183c7:	0f b6 c0             	movzx  eax,al
c00183ca:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00183d1:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00183d5:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00183d9:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00183de:	ee                   	out    dx,al
c00183df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183e3:	0f b6 c0             	movzx  eax,al
c00183e6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00183ed:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00183f1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00183f5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00183fa:	ee                   	out    dx,al
c00183fb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018402:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018407:	89 c2                	mov    edx,eax
c0018409:	ec                   	in     al,dx
c001840a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001840e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018412:	0f b6 c0             	movzx  eax,al
c0018415:	c1 e0 08             	shl    eax,0x8
c0018418:	89 c1                	mov    ecx,eax
c001841a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018421:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018426:	89 c2                	mov    edx,eax
c0018428:	ec                   	in     al,dx
c0018429:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001842d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018431:	0f b6 c0             	movzx  eax,al
c0018434:	09 c8                	or     eax,ecx
c0018436:	83 c4 10             	add    esp,0x10
c0018439:	c3                   	ret    
c001843a:	66 90                	xchg   ax,ax

c001843c <picOpen()>:
c001843c:	83 ec 50             	sub    esp,0x50
c001843f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018446:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001844b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001844f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018453:	ee                   	out    dx,al
c0018454:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001845b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018460:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018464:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018468:	ee                   	out    dx,al
c0018469:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018471:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018479:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018480:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018484:	89 c2                	mov    edx,eax
c0018486:	ec                   	in     al,dx
c0018487:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001848b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001848f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018493:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001849a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001849e:	89 c2                	mov    edx,eax
c00184a0:	ec                   	in     al,dx
c00184a1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00184a5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00184a9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00184ad:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00184b4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00184b9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00184bd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184c1:	ee                   	out    dx,al
c00184c2:	e8 bd fe ff ff       	call   c0018384 <picIoWait()>
c00184c7:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00184ce:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00184d3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00184d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00184db:	ee                   	out    dx,al
c00184dc:	e8 a3 fe ff ff       	call   c0018384 <picIoWait()>
c00184e1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00184e5:	0f b6 c0             	movzx  eax,al
c00184e8:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00184ef:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00184f3:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00184f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00184fb:	ee                   	out    dx,al
c00184fc:	e8 83 fe ff ff       	call   c0018384 <picIoWait()>
c0018501:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018505:	0f b6 c0             	movzx  eax,al
c0018508:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001850f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018513:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018517:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001851b:	ee                   	out    dx,al
c001851c:	e8 63 fe ff ff       	call   c0018384 <picIoWait()>
c0018521:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018528:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001852d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018531:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018535:	ee                   	out    dx,al
c0018536:	e8 49 fe ff ff       	call   c0018384 <picIoWait()>
c001853b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018542:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018547:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001854b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001854f:	ee                   	out    dx,al
c0018550:	e8 2f fe ff ff       	call   c0018384 <picIoWait()>
c0018555:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001855c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018561:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018565:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018569:	ee                   	out    dx,al
c001856a:	e8 15 fe ff ff       	call   c0018384 <picIoWait()>
c001856f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018576:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001857b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001857f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018583:	ee                   	out    dx,al
c0018584:	e8 fb fd ff ff       	call   c0018384 <picIoWait()>
c0018589:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001858e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018595:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001859d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00185a1:	ee                   	out    dx,al
c00185a2:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00185a7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00185ae:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00185b2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00185b6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00185ba:	ee                   	out    dx,al
c00185bb:	90                   	nop
c00185bc:	83 c4 50             	add    esp,0x50
c00185bf:	c3                   	ret    

c00185c0 <picEOI(int)>:
c00185c0:	83 ec 10             	sub    esp,0x10
c00185c3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00185c8:	75 1e                	jne    c00185e8 <picEOI(int)+0x28>
c00185ca:	6a 0b                	push   0xb
c00185cc:	e8 ef fd ff ff       	call   c00183c0 <picGetIRQReg(int)>
c00185d1:	83 c4 04             	add    esp,0x4
c00185d4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00185d9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00185de:	25 80 00 00 00       	and    eax,0x80
c00185e3:	74 73                	je     c0018658 <picEOI(int)+0x98>
c00185e5:	8d 76 00             	lea    esi,[esi+0x0]
c00185e8:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00185ed:	75 31                	jne    c0018620 <picEOI(int)+0x60>
c00185ef:	6a 0b                	push   0xb
c00185f1:	e8 ca fd ff ff       	call   c00183c0 <picGetIRQReg(int)>
c00185f6:	83 c4 04             	add    esp,0x4
c00185f9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00185fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018602:	98                   	cwde   
c0018603:	85 c0                	test   eax,eax
c0018605:	78 19                	js     c0018620 <picEOI(int)+0x60>
c0018607:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001860e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018613:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018617:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001861c:	ee                   	out    dx,al
c001861d:	eb 3d                	jmp    c001865c <picEOI(int)+0x9c>
c001861f:	90                   	nop
c0018620:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018625:	7e 19                	jle    c0018640 <picEOI(int)+0x80>
c0018627:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001862e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018633:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018637:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001863c:	ee                   	out    dx,al
c001863d:	8d 76 00             	lea    esi,[esi+0x0]
c0018640:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018647:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001864c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018650:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018655:	ee                   	out    dx,al
c0018656:	eb 04                	jmp    c001865c <picEOI(int)+0x9c>
c0018658:	90                   	nop
c0018659:	8d 76 00             	lea    esi,[esi+0x0]
c001865c:	83 c4 10             	add    esp,0x10
c001865f:	c3                   	ret    

c0018660 <RTC::open(int, int, void*)>:
c0018660:	31 c0                	xor    eax,eax
c0018662:	c3                   	ret    
c0018663:	90                   	nop

c0018664 <RTC::close(int, int, void*)>:
c0018664:	31 c0                	xor    eax,eax
c0018666:	c3                   	ret    
c0018667:	90                   	nop

c0018668 <RTC::timeInSecondsUTC()>:
c0018668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001866c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018672:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018678:	c3                   	ret    
c0018679:	90                   	nop

c001867a <RTC::timeInDatetimeUTC()>:
c001867a:	53                   	push   ebx
c001867b:	83 ec 14             	sub    esp,0x14
c001867e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018686:	8b 10                	mov    edx,DWORD PTR [eax]
c0018688:	50                   	push   eax
c0018689:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001868c:	83 c4 0c             	add    esp,0xc
c001868f:	52                   	push   edx
c0018690:	50                   	push   eax
c0018691:	53                   	push   ebx
c0018692:	e8 6b 40 ff ff       	call   c000c702 <secondsToDatetime(unsigned long long)>
c0018697:	89 d8                	mov    eax,ebx
c0018699:	83 c4 14             	add    esp,0x14
c001869c:	5b                   	pop    ebx
c001869d:	c2 04 00             	ret    0x4

c00186a0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00186a0:	56                   	push   esi
c00186a1:	53                   	push   ebx
c00186a2:	83 ec 14             	sub    esp,0x14
c00186a5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00186a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00186ab:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00186ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186b2:	52                   	push   edx
c00186b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186bb:	50                   	push   eax
c00186bc:	e8 41 40 ff ff       	call   c000c702 <secondsToDatetime(unsigned long long)>
c00186c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00186cd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00186d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00186d5:	89 f0                	mov    eax,esi
c00186d7:	83 c4 20             	add    esp,0x20
c00186da:	5b                   	pop    ebx
c00186db:	5e                   	pop    esi
c00186dc:	ff e0                	jmp    eax

c00186de <RTC::~RTC()>:
c00186de:	83 ec 0c             	sub    esp,0xc
c00186e1:	ba 2c 2d 02 c0       	mov    edx,0xc0022d2c
c00186e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186ea:	89 10                	mov    DWORD PTR [eax],edx
c00186ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186f0:	83 ec 0c             	sub    esp,0xc
c00186f3:	50                   	push   eax
c00186f4:	e8 9b 3d ff ff       	call   c000c494 <Clock::~Clock()>
c00186f9:	83 c4 10             	add    esp,0x10
c00186fc:	90                   	nop
c00186fd:	83 c4 0c             	add    esp,0xc
c0018700:	c3                   	ret    
c0018701:	90                   	nop

c0018702 <RTC::~RTC()>:
c0018702:	83 ec 0c             	sub    esp,0xc
c0018705:	83 ec 0c             	sub    esp,0xc
c0018708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001870c:	e8 cd ff ff ff       	call   c00186de <RTC::~RTC()>
c0018711:	83 c4 10             	add    esp,0x10
c0018714:	83 ec 08             	sub    esp,0x8
c0018717:	68 60 01 00 00       	push   0x160
c001871c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018720:	e8 f3 20 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018725:	83 c4 10             	add    esp,0x10
c0018728:	83 c4 0c             	add    esp,0xc
c001872b:	c3                   	ret    

c001872c <RTC::get_update_in_progress_flag()>:
c001872c:	83 ec 14             	sub    esp,0x14
c001872f:	6a 0a                	push   0xa
c0018731:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018737:	e8 3c ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001873c:	83 c4 1c             	add    esp,0x1c
c001873f:	0f b6 c0             	movzx  eax,al
c0018742:	c1 e8 07             	shr    eax,0x7
c0018745:	c3                   	ret    

c0018746 <RTC::completeRTCRefresh()>:
c0018746:	55                   	push   ebp
c0018747:	57                   	push   edi
c0018748:	56                   	push   esi
c0018749:	53                   	push   ebx
c001874a:	83 ec 3c             	sub    esp,0x3c
c001874d:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c0018753:	83 ec 0c             	sub    esp,0xc
c0018756:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001875a:	e8 cd ff ff ff       	call   c001872c <RTC::get_update_in_progress_flag()>
c001875f:	83 c4 10             	add    esp,0x10
c0018762:	84 c0                	test   al,al
c0018764:	74 0e                	je     c0018774 <RTC::completeRTCRefresh()+0x2e>
c0018766:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001876c:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018772:	73 df                	jae    c0018753 <RTC::completeRTCRefresh()+0xd>
c0018774:	51                   	push   ecx
c0018775:	51                   	push   ecx
c0018776:	6a 00                	push   0x0
c0018778:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001877e:	e8 f5 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018783:	5b                   	pop    ebx
c0018784:	89 c7                	mov    edi,eax
c0018786:	5e                   	pop    esi
c0018787:	6a 02                	push   0x2
c0018789:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001878f:	e8 e4 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018794:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018798:	5d                   	pop    ebp
c0018799:	58                   	pop    eax
c001879a:	6a 04                	push   0x4
c001879c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187a2:	e8 d1 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187a7:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00187ab:	58                   	pop    eax
c00187ac:	5a                   	pop    edx
c00187ad:	6a 07                	push   0x7
c00187af:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187b5:	e8 be e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187ba:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00187be:	59                   	pop    ecx
c00187bf:	5b                   	pop    ebx
c00187c0:	6a 08                	push   0x8
c00187c2:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187c8:	e8 ab e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187cd:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00187d1:	5e                   	pop    esi
c00187d2:	5d                   	pop    ebp
c00187d3:	6a 09                	push   0x9
c00187d5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187db:	e8 98 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187e0:	0f b6 c0             	movzx  eax,al
c00187e3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00187e7:	83 c4 10             	add    esp,0x10
c00187ea:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00187f0:	83 ec 0c             	sub    esp,0xc
c00187f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00187f7:	e8 30 ff ff ff       	call   c001872c <RTC::get_update_in_progress_flag()>
c00187fc:	83 c4 10             	add    esp,0x10
c00187ff:	84 c0                	test   al,al
c0018801:	74 0e                	je     c0018811 <RTC::completeRTCRefresh()+0xcb>
c0018803:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018809:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c001880f:	73 df                	jae    c00187f0 <RTC::completeRTCRefresh()+0xaa>
c0018811:	51                   	push   ecx
c0018812:	51                   	push   ecx
c0018813:	6a 00                	push   0x0
c0018815:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001881b:	e8 58 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018820:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018824:	5b                   	pop    ebx
c0018825:	5e                   	pop    esi
c0018826:	6a 02                	push   0x2
c0018828:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001882e:	e8 45 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018833:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018837:	5d                   	pop    ebp
c0018838:	58                   	pop    eax
c0018839:	6a 04                	push   0x4
c001883b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018841:	e8 32 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018846:	88 c3                	mov    bl,al
c0018848:	58                   	pop    eax
c0018849:	5a                   	pop    edx
c001884a:	6a 07                	push   0x7
c001884c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018852:	e8 21 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018857:	59                   	pop    ecx
c0018858:	89 c6                	mov    esi,eax
c001885a:	5d                   	pop    ebp
c001885b:	6a 08                	push   0x8
c001885d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018863:	e8 10 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018868:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001886c:	58                   	pop    eax
c001886d:	5a                   	pop    edx
c001886e:	6a 09                	push   0x9
c0018870:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018876:	e8 fd e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001887b:	89 f9                	mov    ecx,edi
c001887d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018881:	0f b6 e8             	movzx  ebp,al
c0018884:	83 c4 10             	add    esp,0x10
c0018887:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001888b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018890:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0018895:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001889d:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00188a1:	0f 94 c0             	sete   al
c00188a4:	0f b6 fb             	movzx  edi,bl
c00188a7:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00188ab:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00188b0:	0f 94 c2             	sete   dl
c00188b3:	21 d0                	and    eax,edx
c00188b5:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00188b9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00188bd:	0f 94 c2             	sete   dl
c00188c0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00188c4:	21 c2                	and    edx,eax
c00188c6:	89 f0                	mov    eax,esi
c00188c8:	0f b6 c0             	movzx  eax,al
c00188cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00188cf:	89 f0                	mov    eax,esi
c00188d1:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00188d5:	0f 94 c0             	sete   al
c00188d8:	21 d0                	and    eax,edx
c00188da:	31 d2                	xor    edx,edx
c00188dc:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00188e0:	0f 94 c2             	sete   dl
c00188e3:	85 c2                	test   edx,eax
c00188e5:	75 27                	jne    c001890e <RTC::completeRTCRefresh()+0x1c8>
c00188e7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00188eb:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00188ef:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00188f3:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00188f7:	89 f0                	mov    eax,esi
c00188f9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00188fd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018901:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018905:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018909:	e9 dc fe ff ff       	jmp    c00187ea <RTC::completeRTCRefresh()+0xa4>
c001890e:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018912:	75 d3                	jne    c00188e7 <RTC::completeRTCRefresh()+0x1a1>
c0018914:	52                   	push   edx
c0018915:	52                   	push   edx
c0018916:	6a 0b                	push   0xb
c0018918:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001891e:	e8 55 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018923:	83 c4 10             	add    esp,0x10
c0018926:	a8 04                	test   al,0x4
c0018928:	75 7a                	jne    c00189a4 <RTC::completeRTCRefresh()+0x25e>
c001892a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001892e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018932:	83 e1 0f             	and    ecx,0xf
c0018935:	c1 ea 04             	shr    edx,0x4
c0018938:	c1 ef 04             	shr    edi,0x4
c001893b:	6b d2 0a             	imul   edx,edx,0xa
c001893e:	83 e6 0f             	and    esi,0xf
c0018941:	01 d1                	add    ecx,edx
c0018943:	c1 ed 04             	shr    ebp,0x4
c0018946:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001894a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001894e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018952:	c1 ea 04             	shr    edx,0x4
c0018955:	83 e1 0f             	and    ecx,0xf
c0018958:	6b d2 0a             	imul   edx,edx,0xa
c001895b:	6b ed 0a             	imul   ebp,ebp,0xa
c001895e:	01 d1                	add    ecx,edx
c0018960:	89 fa                	mov    edx,edi
c0018962:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018966:	83 e2 07             	and    edx,0x7
c0018969:	89 d9                	mov    ecx,ebx
c001896b:	6b d2 0a             	imul   edx,edx,0xa
c001896e:	83 e1 0f             	and    ecx,0xf
c0018971:	83 e3 80             	and    ebx,0xffffff80
c0018974:	01 d1                	add    ecx,edx
c0018976:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001897a:	09 cb                	or     ebx,ecx
c001897c:	c1 ea 04             	shr    edx,0x4
c001897f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018983:	6b d2 0a             	imul   edx,edx,0xa
c0018986:	83 e1 0f             	and    ecx,0xf
c0018989:	01 d6                	add    esi,edx
c001898b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001898f:	c1 ea 04             	shr    edx,0x4
c0018992:	6b d2 0a             	imul   edx,edx,0xa
c0018995:	01 d1                	add    ecx,edx
c0018997:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001899b:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001899f:	83 e2 0f             	and    edx,0xf
c00189a2:	01 d5                	add    ebp,edx
c00189a4:	a8 02                	test   al,0x2
c00189a6:	75 15                	jne    c00189bd <RTC::completeRTCRefresh()+0x277>
c00189a8:	f6 c3 80             	test   bl,0x80
c00189ab:	74 10                	je     c00189bd <RTC::completeRTCRefresh()+0x277>
c00189ad:	83 e3 7f             	and    ebx,0x7f
c00189b0:	b9 18 00 00 00       	mov    ecx,0x18
c00189b5:	8d 43 0c             	lea    eax,[ebx+0xc]
c00189b8:	99                   	cdq    
c00189b9:	f7 f9                	idiv   ecx
c00189bb:	88 d3                	mov    bl,dl
c00189bd:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00189c3:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00189c9:	77 06                	ja     c00189d1 <RTC::completeRTCRefresh()+0x28b>
c00189cb:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00189d1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189d6:	31 c9                	xor    ecx,ecx
c00189d8:	c1 e0 10             	shl    eax,0x10
c00189db:	89 cd                	mov    ebp,ecx
c00189dd:	c1 e7 10             	shl    edi,0x10
c00189e0:	31 d2                	xor    edx,edx
c00189e2:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00189e8:	09 c5                	or     ebp,eax
c00189ea:	89 f0                	mov    eax,esi
c00189ec:	89 e9                	mov    ecx,ebp
c00189ee:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00189f2:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00189f6:	88 c2                	mov    dl,al
c00189f8:	88 d9                	mov    cl,bl
c00189fa:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c00189fe:	0f b7 c2             	movzx  eax,dx
c0018a01:	09 f8                	or     eax,edi
c0018a03:	89 c2                	mov    edx,eax
c0018a05:	50                   	push   eax
c0018a06:	50                   	push   eax
c0018a07:	51                   	push   ecx
c0018a08:	52                   	push   edx
c0018a09:	e8 75 3b ff ff       	call   c000c583 <datetimeToSeconds(datetime_t)>
c0018a0e:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018a12:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018a18:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018a1e:	83 c4 4c             	add    esp,0x4c
c0018a21:	5b                   	pop    ebx
c0018a22:	5e                   	pop    esi
c0018a23:	5f                   	pop    edi
c0018a24:	5d                   	pop    ebp
c0018a25:	c3                   	ret    

c0018a26 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018a26:	55                   	push   ebp
c0018a27:	57                   	push   edi
c0018a28:	56                   	push   esi
c0018a29:	53                   	push   ebx
c0018a2a:	83 ec 30             	sub    esp,0x30
c0018a2d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018a31:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018a35:	6a 00                	push   0x0
c0018a37:	6a 00                	push   0x0
c0018a39:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a3f:	e8 4e e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a44:	83 c4 0c             	add    esp,0xc
c0018a47:	6a 00                	push   0x0
c0018a49:	6a 02                	push   0x2
c0018a4b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a51:	e8 3c e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a56:	31 d2                	xor    edx,edx
c0018a58:	89 f9                	mov    ecx,edi
c0018a5a:	89 f8                	mov    eax,edi
c0018a5c:	c1 e9 10             	shr    ecx,0x10
c0018a5f:	0f b6 c4             	movzx  eax,ah
c0018a62:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018a66:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018a6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a6e:	b9 64 00 00 00       	mov    ecx,0x64
c0018a73:	89 f0                	mov    eax,esi
c0018a75:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018a79:	89 f0                	mov    eax,esi
c0018a7b:	0f b6 c4             	movzx  eax,ah
c0018a7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a82:	89 f0                	mov    eax,esi
c0018a84:	c1 e8 10             	shr    eax,0x10
c0018a87:	f7 f1                	div    ecx
c0018a89:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018a8d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018a91:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018a95:	59                   	pop    ecx
c0018a96:	5b                   	pop    ebx
c0018a97:	89 fb                	mov    ebx,edi
c0018a99:	6a 0b                	push   0xb
c0018a9b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018aa1:	e8 d2 e6 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018aa6:	83 c4 10             	add    esp,0x10
c0018aa9:	89 c5                	mov    ebp,eax
c0018aab:	a8 04                	test   al,0x4
c0018aad:	75 6e                	jne    c0018b1d <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018aaf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018ab3:	31 d2                	xor    edx,edx
c0018ab5:	0f b6 c1             	movzx  eax,cl
c0018ab8:	b9 0a 00 00 00       	mov    ecx,0xa
c0018abd:	f7 f1                	div    ecx
c0018abf:	c1 e0 04             	shl    eax,0x4
c0018ac2:	09 d0                	or     eax,edx
c0018ac4:	31 d2                	xor    edx,edx
c0018ac6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018aca:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018acf:	f7 f1                	div    ecx
c0018ad1:	c1 e0 04             	shl    eax,0x4
c0018ad4:	09 d0                	or     eax,edx
c0018ad6:	31 d2                	xor    edx,edx
c0018ad8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018adc:	0f b6 c3             	movzx  eax,bl
c0018adf:	f7 f1                	div    ecx
c0018ae1:	c1 e0 04             	shl    eax,0x4
c0018ae4:	09 d0                	or     eax,edx
c0018ae6:	31 d2                	xor    edx,edx
c0018ae8:	89 c3                	mov    ebx,eax
c0018aea:	89 f0                	mov    eax,esi
c0018aec:	0f b6 c0             	movzx  eax,al
c0018aef:	f7 f1                	div    ecx
c0018af1:	c1 e0 04             	shl    eax,0x4
c0018af4:	09 d0                	or     eax,edx
c0018af6:	31 d2                	xor    edx,edx
c0018af8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018afc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b01:	f7 f1                	div    ecx
c0018b03:	c1 e0 04             	shl    eax,0x4
c0018b06:	09 d0                	or     eax,edx
c0018b08:	31 d2                	xor    edx,edx
c0018b0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018b0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b12:	f7 f1                	div    ecx
c0018b14:	c1 e0 04             	shl    eax,0x4
c0018b17:	09 d0                	or     eax,edx
c0018b19:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b1d:	83 e5 02             	and    ebp,0x2
c0018b20:	75 1e                	jne    c0018b40 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b22:	0f b6 c3             	movzx  eax,bl
c0018b25:	83 f8 0b             	cmp    eax,0xb
c0018b28:	76 10                	jbe    c0018b3a <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018b2a:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018b2d:	88 d3                	mov    bl,dl
c0018b2f:	84 d2                	test   dl,dl
c0018b31:	75 02                	jne    c0018b35 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018b33:	b3 0c                	mov    bl,0xc
c0018b35:	83 cb 80             	or     ebx,0xffffff80
c0018b38:	eb 06                	jmp    c0018b40 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b3a:	85 c0                	test   eax,eax
c0018b3c:	75 02                	jne    c0018b40 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b3e:	b3 0c                	mov    bl,0xc
c0018b40:	0f b6 db             	movzx  ebx,bl
c0018b43:	50                   	push   eax
c0018b44:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018b49:	52                   	push   edx
c0018b4a:	6a 00                	push   0x0
c0018b4c:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b52:	e8 3b e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b57:	83 c4 0c             	add    esp,0xc
c0018b5a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b5f:	50                   	push   eax
c0018b60:	6a 02                	push   0x2
c0018b62:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b68:	e8 25 e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b6d:	83 c4 0c             	add    esp,0xc
c0018b70:	53                   	push   ebx
c0018b71:	6a 04                	push   0x4
c0018b73:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b79:	e8 14 e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b7e:	83 c4 0c             	add    esp,0xc
c0018b81:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018b86:	52                   	push   edx
c0018b87:	6a 07                	push   0x7
c0018b89:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b8f:	e8 fe e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b94:	83 c4 0c             	add    esp,0xc
c0018b97:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018b9c:	50                   	push   eax
c0018b9d:	6a 08                	push   0x8
c0018b9f:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018ba5:	e8 e8 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018baa:	83 c4 0c             	add    esp,0xc
c0018bad:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018bb2:	55                   	push   ebp
c0018bb3:	6a 09                	push   0x9
c0018bb5:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bbb:	e8 d2 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bc0:	5a                   	pop    edx
c0018bc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018bc5:	e8 7c fb ff ff       	call   c0018746 <RTC::completeRTCRefresh()>
c0018bca:	83 c4 3c             	add    esp,0x3c
c0018bcd:	b0 01                	mov    al,0x1
c0018bcf:	5b                   	pop    ebx
c0018bd0:	5e                   	pop    esi
c0018bd1:	5f                   	pop    edi
c0018bd2:	5d                   	pop    ebp
c0018bd3:	c3                   	ret    

c0018bd4 <rtcIRQHandler(regs*, void*)>:
c0018bd4:	53                   	push   ebx
c0018bd5:	83 ec 10             	sub    esp,0x10
c0018bd8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018bdc:	6a 0c                	push   0xc
c0018bde:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018be4:	e8 8f e5 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018be9:	83 c4 10             	add    esp,0x10
c0018bec:	a8 80                	test   al,0x80
c0018bee:	74 24                	je     c0018c14 <rtcIRQHandler(regs*, void*)+0x40>
c0018bf0:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018bf7:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018bfe:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018c05:	75 0d                	jne    c0018c14 <rtcIRQHandler(regs*, void*)+0x40>
c0018c07:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018c0b:	83 c4 08             	add    esp,0x8
c0018c0e:	5b                   	pop    ebx
c0018c0f:	e9 32 fb ff ff       	jmp    c0018746 <RTC::completeRTCRefresh()>
c0018c14:	83 c4 08             	add    esp,0x8
c0018c17:	5b                   	pop    ebx
c0018c18:	c3                   	ret    
c0018c19:	90                   	nop

c0018c1a <RTC::RTC()>:
c0018c1a:	83 ec 1c             	sub    esp,0x1c
c0018c1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c21:	83 ec 08             	sub    esp,0x8
c0018c24:	68 0f 2d 02 c0       	push   0xc0022d0f
c0018c29:	50                   	push   eax
c0018c2a:	e8 2f 38 ff ff       	call   c000c45e <Clock::Clock(char const*)>
c0018c2f:	83 c4 10             	add    esp,0x10
c0018c32:	ba 2c 2d 02 c0       	mov    edx,0xc0022d2c
c0018c37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c3b:	89 10                	mov    DWORD PTR [eax],edx
c0018c3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c41:	83 ec 0c             	sub    esp,0xc
c0018c44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c48:	6a 01                	push   0x1
c0018c4a:	68 d4 8b 01 c0       	push   0xc0018bd4
c0018c4f:	6a 08                	push   0x8
c0018c51:	50                   	push   eax
c0018c52:	e8 e3 3c ff ff       	call   c000c93a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018c57:	83 c4 20             	add    esp,0x20
c0018c5a:	89 c2                	mov    edx,eax
c0018c5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c60:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018c66:	fa                   	cli    
c0018c67:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c6c:	83 c0 01             	add    eax,0x1
c0018c6f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018c74:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018c79:	83 ec 08             	sub    esp,0x8
c0018c7c:	6a 0b                	push   0xb
c0018c7e:	50                   	push   eax
c0018c7f:	e8 f4 e4 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018c84:	83 c4 10             	add    esp,0x10
c0018c87:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018c8b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018c90:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018c94:	83 ca 10             	or     edx,0x10
c0018c97:	0f b6 d2             	movzx  edx,dl
c0018c9a:	83 ec 04             	sub    esp,0x4
c0018c9d:	52                   	push   edx
c0018c9e:	6a 0b                	push   0xb
c0018ca0:	50                   	push   eax
c0018ca1:	e8 ec e5 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018ca6:	83 c4 10             	add    esp,0x10
c0018ca9:	83 ec 0c             	sub    esp,0xc
c0018cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018cb0:	e8 91 fa ff ff       	call   c0018746 <RTC::completeRTCRefresh()>
c0018cb5:	83 c4 10             	add    esp,0x10
c0018cb8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018cbd:	83 e8 01             	sub    eax,0x1
c0018cc0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018cc5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018cca:	85 c0                	test   eax,eax
c0018ccc:	75 01                	jne    c0018ccf <RTC::RTC()+0xb5>
c0018cce:	fb                   	sti    
c0018ccf:	90                   	nop
c0018cd0:	83 c4 1c             	add    esp,0x1c
c0018cd3:	c3                   	ret    

c0018cd4 <HalConsoleScroll(int, int)>:
c0018cd4:	83 ec 10             	sub    esp,0x10
c0018cd7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018cdf:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018ce7:	90                   	nop
c0018ce8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018ced:	0f 8f e1 00 00 00    	jg     c0018dd4 <HalConsoleScroll(int, int)+0x100>
c0018cf3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018cfb:	90                   	nop
c0018cfc:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018d04:	0f 8f be 00 00 00    	jg     c0018dc8 <HalConsoleScroll(int, int)+0xf4>
c0018d0a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d0e:	89 d0                	mov    eax,edx
c0018d10:	c1 e0 02             	shl    eax,0x2
c0018d13:	01 d0                	add    eax,edx
c0018d15:	c1 e0 05             	shl    eax,0x5
c0018d18:	89 c2                	mov    edx,eax
c0018d1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d1e:	01 d0                	add    eax,edx
c0018d20:	89 c2                	mov    edx,eax
c0018d22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d26:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018d29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d2d:	89 d0                	mov    eax,edx
c0018d2f:	c1 e0 02             	shl    eax,0x2
c0018d32:	01 d0                	add    eax,edx
c0018d34:	c1 e0 05             	shl    eax,0x5
c0018d37:	89 c2                	mov    edx,eax
c0018d39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d3d:	01 d0                	add    eax,edx
c0018d3f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018d45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d49:	01 c2                	add    edx,eax
c0018d4b:	8a 01                	mov    al,BYTE PTR [ecx]
c0018d4d:	88 02                	mov    BYTE PTR [edx],al
c0018d4f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d54:	75 66                	jne    c0018dbc <HalConsoleScroll(int, int)+0xe8>
c0018d56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d5a:	83 e0 01             	and    eax,0x1
c0018d5d:	74 39                	je     c0018d98 <HalConsoleScroll(int, int)+0xc4>
c0018d5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d63:	83 e0 0f             	and    eax,0xf
c0018d66:	88 c2                	mov    dl,al
c0018d68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d6c:	c1 e0 04             	shl    eax,0x4
c0018d6f:	09 d0                	or     eax,edx
c0018d71:	88 c1                	mov    cl,al
c0018d73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d77:	89 d0                	mov    eax,edx
c0018d79:	c1 e0 02             	shl    eax,0x2
c0018d7c:	01 d0                	add    eax,edx
c0018d7e:	c1 e0 05             	shl    eax,0x5
c0018d81:	89 c2                	mov    edx,eax
c0018d83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d87:	01 d0                	add    eax,edx
c0018d89:	89 c2                	mov    edx,eax
c0018d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d8f:	01 d0                	add    eax,edx
c0018d91:	88 ca                	mov    dl,cl
c0018d93:	88 10                	mov    BYTE PTR [eax],dl
c0018d95:	eb 25                	jmp    c0018dbc <HalConsoleScroll(int, int)+0xe8>
c0018d97:	90                   	nop
c0018d98:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d9c:	89 d0                	mov    eax,edx
c0018d9e:	c1 e0 02             	shl    eax,0x2
c0018da1:	01 d0                	add    eax,edx
c0018da3:	c1 e0 05             	shl    eax,0x5
c0018da6:	89 c2                	mov    edx,eax
c0018da8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dac:	01 d0                	add    eax,edx
c0018dae:	89 c2                	mov    edx,eax
c0018db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018db4:	01 d0                	add    eax,edx
c0018db6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018db9:	8d 76 00             	lea    esi,[esi+0x0]
c0018dbc:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018dc1:	e9 36 ff ff ff       	jmp    c0018cfc <HalConsoleScroll(int, int)+0x28>
c0018dc6:	66 90                	xchg   ax,ax
c0018dc8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018dcd:	e9 16 ff ff ff       	jmp    c0018ce8 <HalConsoleScroll(int, int)+0x14>
c0018dd2:	66 90                	xchg   ax,ax
c0018dd4:	90                   	nop
c0018dd5:	83 c4 10             	add    esp,0x10
c0018dd8:	c3                   	ret    
c0018dd9:	8d 76 00             	lea    esi,[esi+0x0]

c0018ddc <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018ddc:	83 ec 14             	sub    esp,0x14
c0018ddf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018de3:	88 04 24             	mov    BYTE PTR [esp],al
c0018de6:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018de9:	0f b6 c0             	movzx  eax,al
c0018dec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018df0:	89 d1                	mov    ecx,edx
c0018df2:	83 e1 0f             	and    ecx,0xf
c0018df5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018df9:	c1 e2 04             	shl    edx,0x4
c0018dfc:	0f b6 d2             	movzx  edx,dl
c0018dff:	09 ca                	or     edx,ecx
c0018e01:	c1 e2 08             	shl    edx,0x8
c0018e04:	09 d0                	or     eax,edx
c0018e06:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018e0b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018e13:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e17:	89 d0                	mov    eax,edx
c0018e19:	c1 e0 02             	shl    eax,0x2
c0018e1c:	01 d0                	add    eax,edx
c0018e1e:	c1 e0 04             	shl    eax,0x4
c0018e21:	89 c2                	mov    edx,eax
c0018e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e27:	01 d0                	add    eax,edx
c0018e29:	01 c0                	add    eax,eax
c0018e2b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018e2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e33:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018e38:	66 89 02             	mov    WORD PTR [edx],ax
c0018e3b:	90                   	nop
c0018e3c:	83 c4 14             	add    esp,0x14
c0018e3f:	c3                   	ret    

c0018e40 <HalConsoleCursorUpdate(int, int)>:
c0018e40:	83 ec 20             	sub    esp,0x20
c0018e43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e47:	89 c2                	mov    edx,eax
c0018e49:	c1 e2 02             	shl    edx,0x2
c0018e4c:	01 d0                	add    eax,edx
c0018e4e:	c1 e0 04             	shl    eax,0x4
c0018e51:	89 c2                	mov    edx,eax
c0018e53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e57:	01 d0                	add    eax,edx
c0018e59:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018e5e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018e65:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018e6a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018e6e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e72:	ee                   	out    dx,al
c0018e73:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018e78:	0f b6 c0             	movzx  eax,al
c0018e7b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018e82:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018e86:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018e8a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018e8e:	ee                   	out    dx,al
c0018e8f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018e96:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018e9b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018e9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018ea3:	ee                   	out    dx,al
c0018ea4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018ea9:	c1 e8 08             	shr    eax,0x8
c0018eac:	0f b6 c0             	movzx  eax,al
c0018eaf:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018eb6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018eba:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018ebe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ec2:	ee                   	out    dx,al
c0018ec3:	90                   	nop
c0018ec4:	83 c4 20             	add    esp,0x20
c0018ec7:	c3                   	ret    

c0018ec8 <FAT::getName()>:
c0018ec8:	b8 60 2d 02 c0       	mov    eax,0xc0022d60
c0018ecd:	c3                   	ret    
c0018ece:	66 90                	xchg   ax,ax

c0018ed0 <FAT::tell(void*, unsigned long long*)>:
c0018ed0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ed5:	75 09                	jne    c0018ee0 <FAT::tell(void*, unsigned long long*)+0x10>
c0018ed7:	b8 04 00 00 00       	mov    eax,0x4
c0018edc:	c3                   	ret    
c0018edd:	8d 76 00             	lea    esi,[esi+0x0]
c0018ee0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ee5:	75 09                	jne    c0018ef0 <FAT::tell(void*, unsigned long long*)+0x20>
c0018ee7:	b8 04 00 00 00       	mov    eax,0x4
c0018eec:	c3                   	ret    
c0018eed:	8d 76 00             	lea    esi,[esi+0x0]
c0018ef0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ef4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018ef7:	ba 00 00 00 00       	mov    edx,0x0
c0018efc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f00:	89 01                	mov    DWORD PTR [ecx],eax
c0018f02:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f05:	b8 00 00 00 00       	mov    eax,0x0
c0018f0a:	c3                   	ret    
c0018f0b:	90                   	nop

c0018f0c <FAT::stat(void*, unsigned long long*)>:
c0018f0c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f11:	75 09                	jne    c0018f1c <FAT::stat(void*, unsigned long long*)+0x10>
c0018f13:	b8 04 00 00 00       	mov    eax,0x4
c0018f18:	c3                   	ret    
c0018f19:	8d 76 00             	lea    esi,[esi+0x0]
c0018f1c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f21:	75 09                	jne    c0018f2c <FAT::stat(void*, unsigned long long*)+0x20>
c0018f23:	b8 04 00 00 00       	mov    eax,0x4
c0018f28:	c3                   	ret    
c0018f29:	8d 76 00             	lea    esi,[esi+0x0]
c0018f2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f30:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018f33:	ba 00 00 00 00       	mov    edx,0x0
c0018f38:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f3c:	89 01                	mov    DWORD PTR [ecx],eax
c0018f3e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f41:	b8 00 00 00 00       	mov    eax,0x0
c0018f46:	c3                   	ret    
c0018f47:	90                   	nop

c0018f48 <FAT::~FAT()>:
c0018f48:	83 ec 0c             	sub    esp,0xc
c0018f4b:	ba ac 2d 02 c0       	mov    edx,0xc0022dac
c0018f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f54:	89 10                	mov    DWORD PTR [eax],edx
c0018f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f5a:	83 ec 0c             	sub    esp,0xc
c0018f5d:	50                   	push   eax
c0018f5e:	e8 35 28 ff ff       	call   c000b798 <Filesystem::~Filesystem()>
c0018f63:	83 c4 10             	add    esp,0x10
c0018f66:	90                   	nop
c0018f67:	83 c4 0c             	add    esp,0xc
c0018f6a:	c3                   	ret    
c0018f6b:	90                   	nop

c0018f6c <FAT::~FAT()>:
c0018f6c:	83 ec 0c             	sub    esp,0xc
c0018f6f:	83 ec 0c             	sub    esp,0xc
c0018f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f76:	e8 cd ff ff ff       	call   c0018f48 <FAT::~FAT()>
c0018f7b:	83 c4 10             	add    esp,0x10
c0018f7e:	83 ec 08             	sub    esp,0x8
c0018f81:	6a 08                	push   0x8
c0018f83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f87:	e8 8c 18 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018f8c:	83 c4 10             	add    esp,0x10
c0018f8f:	83 c4 0c             	add    esp,0xc
c0018f92:	c3                   	ret    
c0018f93:	90                   	nop

c0018f94 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018f94:	83 ec 1c             	sub    esp,0x1c
c0018f97:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018f9e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018fa3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fa7:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018fae:	83 f8 ff             	cmp    eax,0xffffffff
c0018fb1:	75 35                	jne    c0018fe8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018fb3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018fb7:	88 c2                	mov    dl,al
c0018fb9:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018fbe:	01 d0                	add    eax,edx
c0018fc0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018fc4:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0018fca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fce:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0018fd5:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018fda:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018fde:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0018fe5:	eb 19                	jmp    c0019000 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018fe7:	90                   	nop
c0018fe8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018fec:	88 c2                	mov    dl,al
c0018fee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ff2:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018ff9:	01 d0                	add    eax,edx
c0018ffb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018fff:	90                   	nop
c0019000:	83 ec 04             	sub    esp,0x4
c0019003:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019007:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001900b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001900f:	50                   	push   eax
c0019010:	e8 ba bf fe ff       	call   c0004fcf <f_getlabel>
c0019015:	83 c4 10             	add    esp,0x10
c0019018:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001901c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019021:	75 09                	jne    c001902c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019023:	b8 00 00 00 00       	mov    eax,0x0
c0019028:	eb 0a                	jmp    c0019034 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001902a:	66 90                	xchg   ax,ax
c001902c:	b8 01 00 00 00       	mov    eax,0x1
c0019031:	8d 76 00             	lea    esi,[esi+0x0]
c0019034:	83 c4 1c             	add    esp,0x1c
c0019037:	c3                   	ret    

c0019038 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019038:	57                   	push   edi
c0019039:	83 ec 58             	sub    esp,0x58
c001903c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019044:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019048:	b8 00 00 00 00       	mov    eax,0x0
c001904d:	b9 0f 00 00 00       	mov    ecx,0xf
c0019052:	fc                   	cld    
c0019053:	89 d7                	mov    edi,edx
c0019055:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019057:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001905b:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019062:	83 f8 ff             	cmp    eax,0xffffffff
c0019065:	75 35                	jne    c001909c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0019067:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001906b:	88 c2                	mov    dl,al
c001906d:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019072:	01 d0                	add    eax,edx
c0019074:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019078:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001907e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019082:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019089:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001908e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019092:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019099:	eb 19                	jmp    c00190b4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001909b:	90                   	nop
c001909c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00190a0:	88 c2                	mov    dl,al
c00190a2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00190a6:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190ad:	01 d0                	add    eax,edx
c00190af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00190b3:	90                   	nop
c00190b4:	83 ec 08             	sub    esp,0x8
c00190b7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00190bb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190bf:	50                   	push   eax
c00190c0:	e8 7b 77 fe ff       	call   c0000840 <strcat>
c00190c5:	83 c4 10             	add    esp,0x10
c00190c8:	83 ec 0c             	sub    esp,0xc
c00190cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190cf:	50                   	push   eax
c00190d0:	e8 4b c0 fe ff       	call   c0005120 <f_setlabel>
c00190d5:	83 c4 10             	add    esp,0x10
c00190d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00190dc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00190e1:	75 09                	jne    c00190ec <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00190e3:	b8 00 00 00 00       	mov    eax,0x0
c00190e8:	eb 0a                	jmp    c00190f4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00190ea:	66 90                	xchg   ax,ax
c00190ec:	b8 01 00 00 00       	mov    eax,0x1
c00190f1:	8d 76 00             	lea    esi,[esi+0x0]
c00190f4:	83 c4 58             	add    esp,0x58
c00190f7:	5f                   	pop    edi
c00190f8:	c3                   	ret    
c00190f9:	90                   	nop
c00190fa:	66 90                	xchg   ax,ax

c00190fc <FAT::format(LogicalDisk*, int, char const*, int)>:
c00190fc:	83 ec 2c             	sub    esp,0x2c
c00190ff:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019107:	83 ec 08             	sub    esp,0x8
c001910a:	68 84 2d 02 c0       	push   0xc0022d84
c001910f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019113:	e8 38 76 fe ff       	call   c0000750 <strcmp>
c0019118:	83 c4 10             	add    esp,0x10
c001911b:	85 c0                	test   eax,eax
c001911d:	0f 94 c0             	sete   al
c0019120:	0f b6 c0             	movzx  eax,al
c0019123:	85 c0                	test   eax,eax
c0019125:	74 0d                	je     c0019134 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019127:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001912f:	e9 c0 00 00 00       	jmp    c00191f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019134:	83 ec 08             	sub    esp,0x8
c0019137:	68 76 2d 02 c0       	push   0xc0022d76
c001913c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019140:	e8 0b 76 fe ff       	call   c0000750 <strcmp>
c0019145:	83 c4 10             	add    esp,0x10
c0019148:	85 c0                	test   eax,eax
c001914a:	0f 94 c0             	sete   al
c001914d:	0f b6 c0             	movzx  eax,al
c0019150:	85 c0                	test   eax,eax
c0019152:	74 10                	je     c0019164 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019154:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001915c:	e9 93 00 00 00       	jmp    c00191f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019161:	8d 76 00             	lea    esi,[esi+0x0]
c0019164:	83 ec 08             	sub    esp,0x8
c0019167:	68 7c 2d 02 c0       	push   0xc0022d7c
c001916c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019170:	e8 db 75 fe ff       	call   c0000750 <strcmp>
c0019175:	83 c4 10             	add    esp,0x10
c0019178:	85 c0                	test   eax,eax
c001917a:	0f 94 c0             	sete   al
c001917d:	0f b6 c0             	movzx  eax,al
c0019180:	85 c0                	test   eax,eax
c0019182:	74 0c                	je     c0019190 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019184:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001918c:	eb 66                	jmp    c00191f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001918e:	66 90                	xchg   ax,ax
c0019190:	83 ec 08             	sub    esp,0x8
c0019193:	68 fc 04 02 c0       	push   0xc00204fc
c0019198:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001919c:	e8 af 75 fe ff       	call   c0000750 <strcmp>
c00191a1:	83 c4 10             	add    esp,0x10
c00191a4:	85 c0                	test   eax,eax
c00191a6:	0f 94 c0             	sete   al
c00191a9:	0f b6 c0             	movzx  eax,al
c00191ac:	85 c0                	test   eax,eax
c00191ae:	74 0c                	je     c00191bc <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00191b0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00191b8:	eb 3a                	jmp    c00191f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191ba:	66 90                	xchg   ax,ax
c00191bc:	83 ec 08             	sub    esp,0x8
c00191bf:	68 82 2d 02 c0       	push   0xc0022d82
c00191c4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191c8:	e8 83 75 fe ff       	call   c0000750 <strcmp>
c00191cd:	83 c4 10             	add    esp,0x10
c00191d0:	85 c0                	test   eax,eax
c00191d2:	0f 94 c0             	sete   al
c00191d5:	0f b6 c0             	movzx  eax,al
c00191d8:	85 c0                	test   eax,eax
c00191da:	74 0c                	je     c00191e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00191dc:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00191e4:	eb 0e                	jmp    c00191f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191e6:	66 90                	xchg   ax,ax
c00191e8:	b8 08 00 00 00       	mov    eax,0x8
c00191ed:	e9 ea 00 00 00       	jmp    c00192dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00191f2:	66 90                	xchg   ax,ax
c00191f4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00191fb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019200:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019204:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001920b:	83 f8 ff             	cmp    eax,0xffffffff
c001920e:	75 34                	jne    c0019244 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019210:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019214:	88 c2                	mov    dl,al
c0019216:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001921b:	01 d0                	add    eax,edx
c001921d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019221:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019227:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001922b:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019232:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019237:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001923b:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0019242:	eb 18                	jmp    c001925c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019244:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019248:	88 c2                	mov    dl,al
c001924a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001924e:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019255:	01 d0                	add    eax,edx
c0019257:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001925b:	90                   	nop
c001925c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019260:	88 04 24             	mov    BYTE PTR [esp],al
c0019263:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019267:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001926b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019273:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019278:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019280:	83 ec 0c             	sub    esp,0xc
c0019283:	68 00 20 00 00       	push   0x2000
c0019288:	e8 29 e8 fe ff       	call   c0007ab6 <malloc>
c001928d:	83 c4 10             	add    esp,0x10
c0019290:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019294:	68 00 20 00 00       	push   0x2000
c0019299:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001929d:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192a1:	50                   	push   eax
c00192a2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00192a6:	50                   	push   eax
c00192a7:	e8 71 c1 fe ff       	call   c000541d <f_mkfs>
c00192ac:	83 c4 10             	add    esp,0x10
c00192af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00192b3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00192b8:	75 0a                	jne    c00192c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00192ba:	b8 00 00 00 00       	mov    eax,0x0
c00192bf:	eb 1b                	jmp    c00192dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192c1:	8d 76 00             	lea    esi,[esi+0x0]
c00192c4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00192c9:	75 09                	jne    c00192d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00192cb:	b8 09 00 00 00       	mov    eax,0x9
c00192d0:	eb 0a                	jmp    c00192dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192d2:	66 90                	xchg   ax,ax
c00192d4:	b8 01 00 00 00       	mov    eax,0x1
c00192d9:	8d 76 00             	lea    esi,[esi+0x0]
c00192dc:	83 c4 2c             	add    esp,0x2c
c00192df:	c3                   	ret    

c00192e0 <FAT::tryMount(LogicalDisk*, int)>:
c00192e0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00192e6:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192eb:	83 f8 14             	cmp    eax,0x14
c00192ee:	75 18                	jne    c0019308 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00192f0:	83 ec 0c             	sub    esp,0xc
c00192f3:	68 88 2d 02 c0       	push   0xc0022d88
c00192f8:	e8 ea 82 ff ff       	call   c00115e7 <KePanic(char const*)>
c00192fd:	83 c4 10             	add    esp,0x10
c0019300:	b0 00                	mov    al,0x0
c0019302:	e9 ed 01 00 00       	jmp    c00194f4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019307:	90                   	nop
c0019308:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001930f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019315:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001931b:	3d 00 02 00 00       	cmp    eax,0x200
c0019320:	74 0a                	je     c001932c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019322:	b0 00                	mov    al,0x0
c0019324:	e9 cb 01 00 00       	jmp    c00194f4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019329:	8d 76 00             	lea    esi,[esi+0x0]
c001932c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019334:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001933b:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019342:	83 f8 ff             	cmp    eax,0xffffffff
c0019345:	74 09                	je     c0019350 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019347:	b0 01                	mov    al,0x1
c0019349:	e9 a6 01 00 00       	jmp    c00194f4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001934e:	66 90                	xchg   ax,ax
c0019350:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001935a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019362:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019369:	88 c2                	mov    dl,al
c001936b:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019370:	01 d0                	add    eax,edx
c0019372:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019379:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001937f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019386:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c001938d:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019392:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019399:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00193a0:	83 ec 0c             	sub    esp,0xc
c00193a3:	68 34 02 00 00       	push   0x234
c00193a8:	e8 09 e7 fe ff       	call   c0007ab6 <malloc>
c00193ad:	83 c4 10             	add    esp,0x10
c00193b0:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00193b7:	83 ec 04             	sub    esp,0x4
c00193ba:	6a 00                	push   0x0
c00193bc:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00193c3:	50                   	push   eax
c00193c4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00193cb:	e8 28 a8 fe ff       	call   c0003bf8 <f_mount>
c00193d0:	83 c4 10             	add    esp,0x10
c00193d3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00193da:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00193e2:	74 1c                	je     c0019400 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00193e4:	83 ec 0c             	sub    esp,0xc
c00193e7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00193ee:	e8 e3 e6 fe ff       	call   c0007ad6 <rfree>
c00193f3:	83 c4 10             	add    esp,0x10
c00193f6:	b0 00                	mov    al,0x0
c00193f8:	e9 f7 00 00 00       	jmp    c00194f4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00193fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019400:	83 ec 04             	sub    esp,0x4
c0019403:	68 00 01 00 00       	push   0x100
c0019408:	6a 00                	push   0x0
c001940a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019411:	50                   	push   eax
c0019412:	e8 d9 70 fe ff       	call   c00004f0 <memset>
c0019417:	83 c4 10             	add    esp,0x10
c001941a:	83 ec 08             	sub    esp,0x8
c001941d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019424:	50                   	push   eax
c0019425:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001942c:	50                   	push   eax
c001942d:	e8 0e 74 fe ff       	call   c0000840 <strcat>
c0019432:	83 c4 10             	add    esp,0x10
c0019435:	83 ec 08             	sub    esp,0x8
c0019438:	68 96 2d 02 c0       	push   0xc0022d96
c001943d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019444:	50                   	push   eax
c0019445:	e8 f6 73 fe ff       	call   c0000840 <strcat>
c001944a:	83 c4 10             	add    esp,0x10
c001944d:	83 ec 04             	sub    esp,0x4
c0019450:	6a 01                	push   0x1
c0019452:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019459:	50                   	push   eax
c001945a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001945e:	50                   	push   eax
c001945f:	e8 f6 a7 fe ff       	call   c0003c5a <f_open>
c0019464:	83 c4 10             	add    esp,0x10
c0019467:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001946e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019475:	85 c0                	test   eax,eax
c0019477:	74 0b                	je     c0019484 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019479:	78 31                	js     c00194ac <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001947b:	83 e8 04             	sub    eax,0x4
c001947e:	83 f8 01             	cmp    eax,0x1
c0019481:	77 29                	ja     c00194ac <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019483:	90                   	nop
c0019484:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001948c:	83 ec 0c             	sub    esp,0xc
c001948f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019493:	50                   	push   eax
c0019494:	e8 90 af fe ff       	call   c0004429 <f_close>
c0019499:	83 c4 10             	add    esp,0x10
c001949c:	90                   	nop
c001949d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00194a5:	85 c0                	test   eax,eax
c00194a7:	74 43                	je     c00194ec <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00194a9:	eb 31                	jmp    c00194dc <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00194ab:	90                   	nop
c00194ac:	83 ec 0c             	sub    esp,0xc
c00194af:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194b6:	e8 1b e6 fe ff       	call   c0007ad6 <rfree>
c00194bb:	83 c4 10             	add    esp,0x10
c00194be:	83 ec 04             	sub    esp,0x4
c00194c1:	6a 00                	push   0x0
c00194c3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194ca:	50                   	push   eax
c00194cb:	6a 00                	push   0x0
c00194cd:	e8 26 a7 fe ff       	call   c0003bf8 <f_mount>
c00194d2:	83 c4 10             	add    esp,0x10
c00194d5:	b0 00                	mov    al,0x0
c00194d7:	eb 1b                	jmp    c00194f4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00194d9:	8d 76 00             	lea    esi,[esi+0x0]
c00194dc:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00194e1:	83 c0 01             	add    eax,0x1
c00194e4:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c00194e9:	8d 76 00             	lea    esi,[esi+0x0]
c00194ec:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00194f3:	90                   	nop
c00194f4:	81 c4 4c 03 00 00    	add    esp,0x34c
c00194fa:	c3                   	ret    
c00194fb:	90                   	nop

c00194fc <FAT::allocateSwapfile(char const*, int)>:
c00194fc:	55                   	push   ebp
c00194fd:	57                   	push   edi
c00194fe:	56                   	push   esi
c00194ff:	53                   	push   ebx
c0019500:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019506:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019511:	83 ec 0c             	sub    esp,0xc
c0019514:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001951b:	e8 96 e5 fe ff       	call   c0007ab6 <malloc>
c0019520:	83 c4 10             	add    esp,0x10
c0019523:	89 c7                	mov    edi,eax
c0019525:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001952a:	83 ec 04             	sub    esp,0x4
c001952d:	50                   	push   eax
c001952e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019535:	57                   	push   edi
c0019536:	e8 db 25 ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c001953b:	83 c4 10             	add    esp,0x10
c001953e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019545:	83 ec 04             	sub    esp,0x4
c0019548:	8d 44 24 13          	lea    eax,[esp+0x13]
c001954c:	50                   	push   eax
c001954d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019551:	50                   	push   eax
c0019552:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019559:	e8 d8 28 ff ff       	call   c000be36 <File::stat(unsigned long long*, bool*)>
c001955e:	83 c4 10             	add    esp,0x10
c0019561:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019568:	c1 e0 14             	shl    eax,0x14
c001956b:	89 c7                	mov    edi,eax
c001956d:	89 c5                	mov    ebp,eax
c001956f:	c1 fd 1f             	sar    ebp,0x1f
c0019572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019576:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001957a:	89 f9                	mov    ecx,edi
c001957c:	31 c1                	xor    ecx,eax
c001957e:	89 cb                	mov    ebx,ecx
c0019580:	89 e9                	mov    ecx,ebp
c0019582:	31 d1                	xor    ecx,edx
c0019584:	89 ce                	mov    esi,ecx
c0019586:	89 f0                	mov    eax,esi
c0019588:	09 d8                	or     eax,ebx
c001958a:	0f 84 9c 00 00 00    	je     c001962c <FAT::allocateSwapfile(char const*, int)+0x130>
c0019590:	83 ec 0c             	sub    esp,0xc
c0019593:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001959a:	e8 63 27 ff ff       	call   c000bd02 <File::unlink()>
c001959f:	83 c4 10             	add    esp,0x10
c00195a2:	83 ec 08             	sub    esp,0x8
c00195a5:	6a 12                	push   0x12
c00195a7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195ae:	e8 81 25 ff ff       	call   c000bb34 <File::open(FileOpenMode)>
c00195b3:	83 c4 10             	add    esp,0x10
c00195b6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195bd:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00195c3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00195ca:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00195d1:	c1 e0 14             	shl    eax,0x14
c00195d4:	83 ec 04             	sub    esp,0x4
c00195d7:	6a 01                	push   0x1
c00195d9:	50                   	push   eax
c00195da:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00195e1:	e8 ca bc fe ff       	call   c00052b0 <f_expand>
c00195e6:	83 c4 10             	add    esp,0x10
c00195e9:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00195f2:	83 c0 10             	add    eax,0x10
c00195f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00195f7:	83 ec 0c             	sub    esp,0xc
c00195fa:	8d 54 24 24          	lea    edx,[esp+0x24]
c00195fe:	52                   	push   edx
c00195ff:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019603:	52                   	push   edx
c0019604:	6a 00                	push   0x0
c0019606:	68 00 04 00 00       	push   0x400
c001960b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019612:	ff d0                	call   eax
c0019614:	83 c4 20             	add    esp,0x20
c0019617:	83 ec 0c             	sub    esp,0xc
c001961a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019621:	e8 6c 25 ff ff       	call   c000bb92 <File::close()>
c0019626:	83 c4 10             	add    esp,0x10
c0019629:	8d 76 00             	lea    esi,[esi+0x0]
c001962c:	83 ec 08             	sub    esp,0x8
c001962f:	6a 01                	push   0x1
c0019631:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019638:	e8 f7 24 ff ff       	call   c000bb34 <File::open(FileOpenMode)>
c001963d:	83 c4 10             	add    esp,0x10
c0019640:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019647:	8b 00                	mov    eax,DWORD PTR [eax]
c0019649:	83 c0 0c             	add    eax,0xc
c001964c:	8b 00                	mov    eax,DWORD PTR [eax]
c001964e:	83 ec 0c             	sub    esp,0xc
c0019651:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019655:	52                   	push   edx
c0019656:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001965a:	52                   	push   edx
c001965b:	6a 00                	push   0x0
c001965d:	6a 04                	push   0x4
c001965f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019666:	ff d0                	call   eax
c0019668:	83 c4 20             	add    esp,0x20
c001966b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019672:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019678:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001967f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019686:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019689:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019690:	83 ec 0c             	sub    esp,0xc
c0019693:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001969a:	e8 f3 24 ff ff       	call   c000bb92 <File::close()>
c001969f:	83 c4 10             	add    esp,0x10
c00196a2:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00196a9:	ba 00 00 00 00       	mov    edx,0x0
c00196ae:	81 c4 3c 04 00 00    	add    esp,0x43c
c00196b4:	5b                   	pop    ebx
c00196b5:	5e                   	pop    esi
c00196b6:	5f                   	pop    edi
c00196b7:	5d                   	pop    ebp
c00196b8:	c3                   	ret    
c00196b9:	90                   	nop
c00196ba:	66 90                	xchg   ax,ax

c00196bc <FAT::readDir(void*, unsigned long, void*, int*)>:
c00196bc:	57                   	push   edi
c00196bd:	56                   	push   esi
c00196be:	53                   	push   ebx
c00196bf:	81 ec 50 02 00 00    	sub    esp,0x250
c00196c5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00196cd:	74 0d                	je     c00196dc <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00196cf:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00196d7:	75 0f                	jne    c00196e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00196d9:	8d 76 00             	lea    esi,[esi+0x0]
c00196dc:	b8 04 00 00 00       	mov    eax,0x4
c00196e1:	e9 3a 01 00 00       	jmp    c0019820 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00196e6:	66 90                	xchg   ax,ax
c00196e8:	83 ec 08             	sub    esp,0x8
c00196eb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00196f2:	50                   	push   eax
c00196f3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00196fa:	e8 f7 af fe ff       	call   c00046f6 <f_readdir>
c00196ff:	83 c4 10             	add    esp,0x10
c0019702:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019709:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019710:	83 ec 0c             	sub    esp,0xc
c0019713:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001971a:	83 c0 16             	add    eax,0x16
c001971d:	50                   	push   eax
c001971e:	e8 4d 6e fe ff       	call   c0000570 <strlen>
c0019723:	83 c4 10             	add    esp,0x10
c0019726:	ba 00 00 00 00       	mov    edx,0x0
c001972b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001972f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019733:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001973a:	0f b6 c0             	movzx  eax,al
c001973d:	83 e0 10             	and    eax,0x10
c0019740:	74 0a                	je     c001974c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019742:	b8 02 00 00 00       	mov    eax,0x2
c0019747:	eb 0b                	jmp    c0019754 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019749:	8d 76 00             	lea    esi,[esi+0x0]
c001974c:	b8 01 00 00 00       	mov    eax,0x1
c0019751:	8d 76 00             	lea    esi,[esi+0x0]
c0019754:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019758:	83 ec 08             	sub    esp,0x8
c001975b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019762:	83 c0 16             	add    eax,0x16
c0019765:	50                   	push   eax
c0019766:	8d 44 24 14          	lea    eax,[esp+0x14]
c001976a:	83 c0 10             	add    eax,0x10
c001976d:	50                   	push   eax
c001976e:	e8 cd 6e fe ff       	call   c0000640 <strcpy>
c0019773:	83 c4 10             	add    esp,0x10
c0019776:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001977d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019784:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019788:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001978f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019796:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001979d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00197a4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00197ab:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00197b2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00197b9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00197c0:	89 c6                	mov    esi,eax
c00197c2:	89 d7                	mov    edi,edx
c00197c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197c6:	89 c8                	mov    eax,ecx
c00197c8:	89 fa                	mov    edx,edi
c00197ca:	89 f3                	mov    ebx,esi
c00197cc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00197d3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00197da:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00197e1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00197e8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00197ee:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00197f5:	0f be c0             	movsx  eax,al
c00197f8:	85 c0                	test   eax,eax
c00197fa:	75 08                	jne    c0019804 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00197fc:	b8 07 00 00 00       	mov    eax,0x7
c0019801:	eb 1d                	jmp    c0019820 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019803:	90                   	nop
c0019804:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001980b:	85 c0                	test   eax,eax
c001980d:	75 09                	jne    c0019818 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001980f:	b8 00 00 00 00       	mov    eax,0x0
c0019814:	eb 0a                	jmp    c0019820 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019816:	66 90                	xchg   ax,ax
c0019818:	b8 01 00 00 00       	mov    eax,0x1
c001981d:	8d 76 00             	lea    esi,[esi+0x0]
c0019820:	81 c4 50 02 00 00    	add    esp,0x250
c0019826:	5b                   	pop    ebx
c0019827:	5e                   	pop    esi
c0019828:	5f                   	pop    edi
c0019829:	c3                   	ret    
c001982a:	66 90                	xchg   ax,ax

c001982c <FAT::read(void*, unsigned long, void*, int*)>:
c001982c:	83 ec 1c             	sub    esp,0x1c
c001982f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019834:	74 0a                	je     c0019840 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019836:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001983b:	75 0b                	jne    c0019848 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001983d:	8d 76 00             	lea    esi,[esi+0x0]
c0019840:	b8 04 00 00 00       	mov    eax,0x4
c0019845:	eb 41                	jmp    c0019888 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019847:	90                   	nop
c0019848:	8d 44 24 08          	lea    eax,[esp+0x8]
c001984c:	50                   	push   eax
c001984d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019851:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019855:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019859:	e8 bf a6 fe ff       	call   c0003f1d <f_read>
c001985e:	83 c4 10             	add    esp,0x10
c0019861:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019865:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019869:	89 c2                	mov    edx,eax
c001986b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001986f:	89 10                	mov    DWORD PTR [eax],edx
c0019871:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019875:	85 c0                	test   eax,eax
c0019877:	75 07                	jne    c0019880 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019879:	b8 00 00 00 00       	mov    eax,0x0
c001987e:	eb 08                	jmp    c0019888 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019880:	b8 01 00 00 00       	mov    eax,0x1
c0019885:	8d 76 00             	lea    esi,[esi+0x0]
c0019888:	83 c4 1c             	add    esp,0x1c
c001988b:	c3                   	ret    

c001988c <FAT::write(void*, unsigned long, void*, int*)>:
c001988c:	83 ec 1c             	sub    esp,0x1c
c001988f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019894:	74 0a                	je     c00198a0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019896:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001989b:	75 0b                	jne    c00198a8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001989d:	8d 76 00             	lea    esi,[esi+0x0]
c00198a0:	b8 04 00 00 00       	mov    eax,0x4
c00198a5:	eb 41                	jmp    c00198e8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00198a7:	90                   	nop
c00198a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198ac:	50                   	push   eax
c00198ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00198b5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198b9:	e8 5e a8 fe ff       	call   c000411c <f_write>
c00198be:	83 c4 10             	add    esp,0x10
c00198c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198c9:	89 c2                	mov    edx,eax
c00198cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198cf:	89 10                	mov    DWORD PTR [eax],edx
c00198d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198d5:	85 c0                	test   eax,eax
c00198d7:	75 07                	jne    c00198e0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00198d9:	b8 00 00 00 00       	mov    eax,0x0
c00198de:	eb 08                	jmp    c00198e8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00198e0:	b8 01 00 00 00       	mov    eax,0x1
c00198e5:	8d 76 00             	lea    esi,[esi+0x0]
c00198e8:	83 c4 1c             	add    esp,0x1c
c00198eb:	c3                   	ret    

c00198ec <FAT::close(void*)>:
c00198ec:	83 ec 1c             	sub    esp,0x1c
c00198ef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198f4:	75 0a                	jne    c0019900 <FAT::close(void*)+0x14>
c00198f6:	b8 04 00 00 00       	mov    eax,0x4
c00198fb:	eb 3f                	jmp    c001993c <FAT::close(void*)+0x50>
c00198fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019900:	83 ec 0c             	sub    esp,0xc
c0019903:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019907:	e8 1d ab fe ff       	call   c0004429 <f_close>
c001990c:	83 c4 10             	add    esp,0x10
c001990f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019913:	83 ec 0c             	sub    esp,0xc
c0019916:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001991a:	e8 a7 e1 fe ff       	call   c0007ac6 <free>
c001991f:	83 c4 10             	add    esp,0x10
c0019922:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019926:	85 c0                	test   eax,eax
c0019928:	75 0a                	jne    c0019934 <FAT::close(void*)+0x48>
c001992a:	b8 00 00 00 00       	mov    eax,0x0
c001992f:	eb 0b                	jmp    c001993c <FAT::close(void*)+0x50>
c0019931:	8d 76 00             	lea    esi,[esi+0x0]
c0019934:	b8 01 00 00 00       	mov    eax,0x1
c0019939:	8d 76 00             	lea    esi,[esi+0x0]
c001993c:	83 c4 1c             	add    esp,0x1c
c001993f:	c3                   	ret    

c0019940 <FAT::closeDir(void*)>:
c0019940:	83 ec 1c             	sub    esp,0x1c
c0019943:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019948:	75 0a                	jne    c0019954 <FAT::closeDir(void*)+0x14>
c001994a:	b8 04 00 00 00       	mov    eax,0x4
c001994f:	eb 3f                	jmp    c0019990 <FAT::closeDir(void*)+0x50>
c0019951:	8d 76 00             	lea    esi,[esi+0x0]
c0019954:	83 ec 0c             	sub    esp,0xc
c0019957:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001995b:	e8 74 ad fe ff       	call   c00046d4 <f_closedir>
c0019960:	83 c4 10             	add    esp,0x10
c0019963:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019967:	83 ec 0c             	sub    esp,0xc
c001996a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001996e:	e8 53 e1 fe ff       	call   c0007ac6 <free>
c0019973:	83 c4 10             	add    esp,0x10
c0019976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001997a:	85 c0                	test   eax,eax
c001997c:	75 0a                	jne    c0019988 <FAT::closeDir(void*)+0x48>
c001997e:	b8 00 00 00 00       	mov    eax,0x0
c0019983:	eb 0b                	jmp    c0019990 <FAT::closeDir(void*)+0x50>
c0019985:	8d 76 00             	lea    esi,[esi+0x0]
c0019988:	b8 01 00 00 00       	mov    eax,0x1
c001998d:	8d 76 00             	lea    esi,[esi+0x0]
c0019990:	83 c4 1c             	add    esp,0x1c
c0019993:	c3                   	ret    

c0019994 <FAT::truncate(void*, unsigned long long)>:
c0019994:	83 ec 2c             	sub    esp,0x2c
c0019997:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001999b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001999f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00199a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199a7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00199ac:	75 0a                	jne    c00199b8 <FAT::truncate(void*, unsigned long long)+0x24>
c00199ae:	b8 04 00 00 00       	mov    eax,0x4
c00199b3:	eb 47                	jmp    c00199fc <FAT::truncate(void*, unsigned long long)+0x68>
c00199b5:	8d 76 00             	lea    esi,[esi+0x0]
c00199b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00199bc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00199bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00199c3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00199cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199cf:	83 ec 08             	sub    esp,0x8
c00199d2:	50                   	push   eax
c00199d3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00199d7:	e8 7c aa fe ff       	call   c0004458 <f_lseek>
c00199dc:	83 c4 10             	add    esp,0x10
c00199df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00199e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199e7:	85 c0                	test   eax,eax
c00199e9:	75 09                	jne    c00199f4 <FAT::truncate(void*, unsigned long long)+0x60>
c00199eb:	b8 00 00 00 00       	mov    eax,0x0
c00199f0:	eb 0a                	jmp    c00199fc <FAT::truncate(void*, unsigned long long)+0x68>
c00199f2:	66 90                	xchg   ax,ax
c00199f4:	b8 01 00 00 00       	mov    eax,0x1
c00199f9:	8d 76 00             	lea    esi,[esi+0x0]
c00199fc:	83 c4 2c             	add    esp,0x2c
c00199ff:	c3                   	ret    

c0019a00 <FAT::seek(void*, unsigned long long)>:
c0019a00:	83 ec 2c             	sub    esp,0x2c
c0019a03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a13:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a18:	75 0a                	jne    c0019a24 <FAT::seek(void*, unsigned long long)+0x24>
c0019a1a:	b8 04 00 00 00       	mov    eax,0x4
c0019a1f:	eb 33                	jmp    c0019a54 <FAT::seek(void*, unsigned long long)+0x54>
c0019a21:	8d 76 00             	lea    esi,[esi+0x0]
c0019a24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a28:	83 ec 08             	sub    esp,0x8
c0019a2b:	50                   	push   eax
c0019a2c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a30:	e8 23 aa fe ff       	call   c0004458 <f_lseek>
c0019a35:	83 c4 10             	add    esp,0x10
c0019a38:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a40:	85 c0                	test   eax,eax
c0019a42:	75 08                	jne    c0019a4c <FAT::seek(void*, unsigned long long)+0x4c>
c0019a44:	b8 00 00 00 00       	mov    eax,0x0
c0019a49:	eb 09                	jmp    c0019a54 <FAT::seek(void*, unsigned long long)+0x54>
c0019a4b:	90                   	nop
c0019a4c:	b8 01 00 00 00       	mov    eax,0x1
c0019a51:	8d 76 00             	lea    esi,[esi+0x0]
c0019a54:	83 c4 2c             	add    esp,0x2c
c0019a57:	c3                   	ret    

c0019a58 <fatWrapperReadDisk>:
c0019a58:	53                   	push   ebx
c0019a59:	83 ec 18             	sub    esp,0x18
c0019a5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a60:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a64:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a69:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019a70:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019a74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a78:	ba 00 00 00 00       	mov    edx,0x0
c0019a7d:	83 ec 0c             	sub    esp,0xc
c0019a80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a84:	53                   	push   ebx
c0019a85:	52                   	push   edx
c0019a86:	50                   	push   eax
c0019a87:	51                   	push   ecx
c0019a88:	e8 e3 42 ff ff       	call   c000dd70 <LogicalDisk::read(unsigned long long, int, void*)>
c0019a8d:	83 c4 20             	add    esp,0x20
c0019a90:	83 c4 18             	add    esp,0x18
c0019a93:	5b                   	pop    ebx
c0019a94:	c3                   	ret    
c0019a95:	8d 76 00             	lea    esi,[esi+0x0]

c0019a98 <fatWrapperWriteDisk>:
c0019a98:	53                   	push   ebx
c0019a99:	83 ec 18             	sub    esp,0x18
c0019a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019aa0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019aa4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019aa9:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019ab0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019ab4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ab8:	ba 00 00 00 00       	mov    edx,0x0
c0019abd:	83 ec 0c             	sub    esp,0xc
c0019ac0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ac4:	53                   	push   ebx
c0019ac5:	52                   	push   edx
c0019ac6:	50                   	push   eax
c0019ac7:	51                   	push   ecx
c0019ac8:	e8 0f 43 ff ff       	call   c000dddc <LogicalDisk::write(unsigned long long, int, void*)>
c0019acd:	83 c4 20             	add    esp,0x20
c0019ad0:	83 c4 18             	add    esp,0x18
c0019ad3:	5b                   	pop    ebx
c0019ad4:	c3                   	ret    
c0019ad5:	8d 76 00             	lea    esi,[esi+0x0]

c0019ad8 <fatWrapperIoctl>:
c0019ad8:	53                   	push   ebx
c0019ad9:	83 ec 28             	sub    esp,0x28
c0019adc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019ae0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019ae4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019ae8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019aec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019af1:	83 f8 02             	cmp    eax,0x2
c0019af4:	75 32                	jne    c0019b28 <fatWrapperIoctl+0x50>
c0019af6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019afa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019afe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b03:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b0a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b10:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019b16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b1a:	66 89 02             	mov    WORD PTR [edx],ax
c0019b1d:	b8 00 00 00 00       	mov    eax,0x0
c0019b22:	e9 c5 00 00 00       	jmp    c0019bec <fatWrapperIoctl+0x114>
c0019b27:	90                   	nop
c0019b28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b2d:	83 f8 01             	cmp    eax,0x1
c0019b30:	75 6a                	jne    c0019b9c <fatWrapperIoctl+0xc4>
c0019b32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019b3a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b3f:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b46:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b4c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019b52:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019b58:	89 c8                	mov    eax,ecx
c0019b5a:	89 da                	mov    edx,ebx
c0019b5c:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019b60:	c1 e0 0a             	shl    eax,0xa
c0019b63:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019b68:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019b6f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019b75:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019b7b:	89 cb                	mov    ebx,ecx
c0019b7d:	c1 fb 1f             	sar    ebx,0x1f
c0019b80:	53                   	push   ebx
c0019b81:	51                   	push   ecx
c0019b82:	52                   	push   edx
c0019b83:	50                   	push   eax
c0019b84:	e8 77 5b 00 00       	call   c001f700 <__udivdi3>
c0019b89:	83 c4 10             	add    esp,0x10
c0019b8c:	89 c2                	mov    edx,eax
c0019b8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b92:	89 10                	mov    DWORD PTR [eax],edx
c0019b94:	b8 00 00 00 00       	mov    eax,0x0
c0019b99:	eb 51                	jmp    c0019bec <fatWrapperIoctl+0x114>
c0019b9b:	90                   	nop
c0019b9c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ba1:	85 c0                	test   eax,eax
c0019ba3:	75 07                	jne    c0019bac <fatWrapperIoctl+0xd4>
c0019ba5:	b8 00 00 00 00       	mov    eax,0x0
c0019baa:	eb 40                	jmp    c0019bec <fatWrapperIoctl+0x114>
c0019bac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bb1:	83 f8 03             	cmp    eax,0x3
c0019bb4:	75 1a                	jne    c0019bd0 <fatWrapperIoctl+0xf8>
c0019bb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019bbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bc2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019bc8:	b8 00 00 00 00       	mov    eax,0x0
c0019bcd:	eb 1d                	jmp    c0019bec <fatWrapperIoctl+0x114>
c0019bcf:	90                   	nop
c0019bd0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bd5:	83 f8 04             	cmp    eax,0x4
c0019bd8:	75 0a                	jne    c0019be4 <fatWrapperIoctl+0x10c>
c0019bda:	b8 00 00 00 00       	mov    eax,0x0
c0019bdf:	eb 0b                	jmp    c0019bec <fatWrapperIoctl+0x114>
c0019be1:	8d 76 00             	lea    esi,[esi+0x0]
c0019be4:	b8 04 00 00 00       	mov    eax,0x4
c0019be9:	8d 76 00             	lea    esi,[esi+0x0]
c0019bec:	83 c4 28             	add    esp,0x28
c0019bef:	5b                   	pop    ebx
c0019bf0:	c3                   	ret    
c0019bf1:	90                   	nop
c0019bf2:	66 90                	xchg   ax,ax

c0019bf4 <FAT::FAT()>:
c0019bf4:	83 ec 1c             	sub    esp,0x1c
c0019bf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bfb:	83 ec 0c             	sub    esp,0xc
c0019bfe:	50                   	push   eax
c0019bff:	e8 70 1b ff ff       	call   c000b774 <Filesystem::Filesystem()>
c0019c04:	83 c4 10             	add    esp,0x10
c0019c07:	ba ac 2d 02 c0       	mov    edx,0xc0022dac
c0019c0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c10:	89 10                	mov    DWORD PTR [eax],edx
c0019c12:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019c1c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c24:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019c29:	7f 19                	jg     c0019c44 <FAT::FAT()+0x50>
c0019c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c2f:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019c3a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019c3f:	eb e3                	jmp    c0019c24 <FAT::FAT()+0x30>
c0019c41:	8d 76 00             	lea    esi,[esi+0x0]
c0019c44:	90                   	nop
c0019c45:	83 c4 1c             	add    esp,0x1c
c0019c48:	c3                   	ret    
c0019c49:	90                   	nop
c0019c4a:	66 90                	xchg   ax,ax

c0019c4c <FAT::fixFilepath(char*)>:
c0019c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c50:	8a 00                	mov    al,BYTE PTR [eax]
c0019c52:	0f be c0             	movsx  eax,al
c0019c55:	83 f8 40             	cmp    eax,0x40
c0019c58:	7e 2e                	jle    c0019c88 <FAT::fixFilepath(char*)+0x3c>
c0019c5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c5e:	8a 00                	mov    al,BYTE PTR [eax]
c0019c60:	83 e8 41             	sub    eax,0x41
c0019c63:	88 c2                	mov    dl,al
c0019c65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c69:	88 10                	mov    BYTE PTR [eax],dl
c0019c6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c6f:	8a 00                	mov    al,BYTE PTR [eax]
c0019c71:	0f be c0             	movsx  eax,al
c0019c74:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019c7b:	83 c0 30             	add    eax,0x30
c0019c7e:	88 c2                	mov    dl,al
c0019c80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c84:	88 10                	mov    BYTE PTR [eax],dl
c0019c86:	66 90                	xchg   ax,ax
c0019c88:	90                   	nop
c0019c89:	c3                   	ret    
c0019c8a:	66 90                	xchg   ax,ax

c0019c8c <FAT::open(char const*, void**, FileOpenMode)>:
c0019c8c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c92:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c9a:	74 0c                	je     c0019ca8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019c9c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019ca4:	75 0e                	jne    c0019cb4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019ca6:	66 90                	xchg   ax,ax
c0019ca8:	b8 04 00 00 00       	mov    eax,0x4
c0019cad:	e9 46 01 00 00       	jmp    c0019df8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019cb2:	66 90                	xchg   ax,ax
c0019cb4:	83 ec 08             	sub    esp,0x8
c0019cb7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cbe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cc2:	50                   	push   eax
c0019cc3:	e8 78 69 fe ff       	call   c0000640 <strcpy>
c0019cc8:	83 c4 10             	add    esp,0x10
c0019ccb:	83 ec 08             	sub    esp,0x8
c0019cce:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019cd2:	50                   	push   eax
c0019cd3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cda:	e8 6d ff ff ff       	call   c0019c4c <FAT::fixFilepath(char*)>
c0019cdf:	83 c4 10             	add    esp,0x10
c0019ce2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019cea:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019cf1:	83 e0 01             	and    eax,0x1
c0019cf4:	74 12                	je     c0019d08 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019cf6:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019cfd:	83 c8 01             	or     eax,0x1
c0019d00:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d07:	90                   	nop
c0019d08:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d0f:	83 e0 04             	and    eax,0x4
c0019d12:	74 24                	je     c0019d38 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019d14:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d1b:	83 c8 30             	or     eax,0x30
c0019d1e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d25:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d2c:	83 c8 02             	or     eax,0x2
c0019d2f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d36:	66 90                	xchg   ax,ax
c0019d38:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d3f:	83 e0 02             	and    eax,0x2
c0019d42:	74 14                	je     c0019d58 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019d44:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d4b:	83 c8 02             	or     eax,0x2
c0019d4e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d55:	8d 76 00             	lea    esi,[esi+0x0]
c0019d58:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d5f:	83 e0 08             	and    eax,0x8
c0019d62:	74 14                	je     c0019d78 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019d64:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d6b:	83 c8 04             	or     eax,0x4
c0019d6e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d75:	8d 76 00             	lea    esi,[esi+0x0]
c0019d78:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d7f:	83 e0 10             	and    eax,0x10
c0019d82:	74 14                	je     c0019d98 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019d84:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d8b:	83 c8 08             	or     eax,0x8
c0019d8e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d95:	8d 76 00             	lea    esi,[esi+0x0]
c0019d98:	83 ec 0c             	sub    esp,0xc
c0019d9b:	68 28 02 00 00       	push   0x228
c0019da0:	e8 11 dd fe ff       	call   c0007ab6 <malloc>
c0019da5:	83 c4 10             	add    esp,0x10
c0019da8:	89 c2                	mov    edx,eax
c0019daa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019db1:	89 10                	mov    DWORD PTR [eax],edx
c0019db3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019dbb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019dc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dc4:	83 ec 04             	sub    esp,0x4
c0019dc7:	52                   	push   edx
c0019dc8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019dcc:	52                   	push   edx
c0019dcd:	50                   	push   eax
c0019dce:	e8 87 9e fe ff       	call   c0003c5a <f_open>
c0019dd3:	83 c4 10             	add    esp,0x10
c0019dd6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019ddd:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019de5:	74 09                	je     c0019df0 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019de7:	b8 01 00 00 00       	mov    eax,0x1
c0019dec:	eb 0a                	jmp    c0019df8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019dee:	66 90                	xchg   ax,ax
c0019df0:	b8 00 00 00 00       	mov    eax,0x0
c0019df5:	8d 76 00             	lea    esi,[esi+0x0]
c0019df8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019dfe:	c3                   	ret    
c0019dff:	90                   	nop

c0019e00 <FAT::openDir(char const*, void**)>:
c0019e00:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e06:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e0e:	74 0c                	je     c0019e1c <FAT::openDir(char const*, void**)+0x1c>
c0019e10:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019e18:	75 0e                	jne    c0019e28 <FAT::openDir(char const*, void**)+0x28>
c0019e1a:	66 90                	xchg   ax,ax
c0019e1c:	b8 04 00 00 00       	mov    eax,0x4
c0019e21:	e9 82 00 00 00       	jmp    c0019ea8 <FAT::openDir(char const*, void**)+0xa8>
c0019e26:	66 90                	xchg   ax,ax
c0019e28:	83 ec 08             	sub    esp,0x8
c0019e2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e32:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e36:	50                   	push   eax
c0019e37:	e8 04 68 fe ff       	call   c0000640 <strcpy>
c0019e3c:	83 c4 10             	add    esp,0x10
c0019e3f:	83 ec 08             	sub    esp,0x8
c0019e42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e46:	50                   	push   eax
c0019e47:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e4e:	e8 f9 fd ff ff       	call   c0019c4c <FAT::fixFilepath(char*)>
c0019e53:	83 c4 10             	add    esp,0x10
c0019e56:	83 ec 0c             	sub    esp,0xc
c0019e59:	6a 30                	push   0x30
c0019e5b:	e8 56 dc fe ff       	call   c0007ab6 <malloc>
c0019e60:	83 c4 10             	add    esp,0x10
c0019e63:	89 c2                	mov    edx,eax
c0019e65:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e6c:	89 10                	mov    DWORD PTR [eax],edx
c0019e6e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e75:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e77:	83 ec 08             	sub    esp,0x8
c0019e7a:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019e7e:	52                   	push   edx
c0019e7f:	50                   	push   eax
c0019e80:	e8 84 a7 fe ff       	call   c0004609 <f_opendir>
c0019e85:	83 c4 10             	add    esp,0x10
c0019e88:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e8f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019e97:	74 07                	je     c0019ea0 <FAT::openDir(char const*, void**)+0xa0>
c0019e99:	b8 01 00 00 00       	mov    eax,0x1
c0019e9e:	eb 08                	jmp    c0019ea8 <FAT::openDir(char const*, void**)+0xa8>
c0019ea0:	b8 00 00 00 00       	mov    eax,0x0
c0019ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ea8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019eae:	c3                   	ret    
c0019eaf:	90                   	nop

c0019eb0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019eb0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019eb6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019ebe:	75 0c                	jne    c0019ecc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019ec0:	b8 04 00 00 00       	mov    eax,0x4
c0019ec5:	e9 d6 00 00 00       	jmp    c0019fa0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019eca:	66 90                	xchg   ax,ax
c0019ecc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019ed4:	75 0a                	jne    c0019ee0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019ed6:	b8 04 00 00 00       	mov    eax,0x4
c0019edb:	e9 c0 00 00 00       	jmp    c0019fa0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ee0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019ee8:	75 0a                	jne    c0019ef4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019eea:	b8 04 00 00 00       	mov    eax,0x4
c0019eef:	e9 ac 00 00 00       	jmp    c0019fa0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ef4:	83 ec 08             	sub    esp,0x8
c0019ef7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019efe:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f05:	50                   	push   eax
c0019f06:	e8 35 67 fe ff       	call   c0000640 <strcpy>
c0019f0b:	83 c4 10             	add    esp,0x10
c0019f0e:	83 ec 08             	sub    esp,0x8
c0019f11:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f18:	50                   	push   eax
c0019f19:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f20:	e8 27 fd ff ff       	call   c0019c4c <FAT::fixFilepath(char*)>
c0019f25:	83 c4 10             	add    esp,0x10
c0019f28:	83 ec 08             	sub    esp,0x8
c0019f2b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f2f:	50                   	push   eax
c0019f30:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f37:	50                   	push   eax
c0019f38:	e8 4b a8 fe ff       	call   c0004788 <f_stat>
c0019f3d:	83 c4 10             	add    esp,0x10
c0019f40:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f47:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f4e:	85 c0                	test   eax,eax
c0019f50:	74 0a                	je     c0019f5c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019f52:	83 f8 04             	cmp    eax,0x4
c0019f55:	74 39                	je     c0019f90 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019f57:	eb 3f                	jmp    c0019f98 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019f59:	8d 76 00             	lea    esi,[esi+0x0]
c0019f5c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f60:	0f b6 c0             	movzx  eax,al
c0019f63:	83 e0 10             	and    eax,0x10
c0019f66:	0f 95 c2             	setne  dl
c0019f69:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019f70:	88 10                	mov    BYTE PTR [eax],dl
c0019f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f76:	ba 00 00 00 00       	mov    edx,0x0
c0019f7b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019f82:	89 01                	mov    DWORD PTR [ecx],eax
c0019f84:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f87:	b8 00 00 00 00       	mov    eax,0x0
c0019f8c:	eb 12                	jmp    c0019fa0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f8e:	66 90                	xchg   ax,ax
c0019f90:	b8 02 00 00 00       	mov    eax,0x2
c0019f95:	eb 09                	jmp    c0019fa0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f97:	90                   	nop
c0019f98:	b8 01 00 00 00       	mov    eax,0x1
c0019f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019fa0:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019fa6:	c3                   	ret    
c0019fa7:	90                   	nop

c0019fa8 <FAT::unlink(char const*)>:
c0019fa8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019fae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019fb6:	75 08                	jne    c0019fc0 <FAT::unlink(char const*)+0x18>
c0019fb8:	b8 04 00 00 00       	mov    eax,0x4
c0019fbd:	eb 61                	jmp    c001a020 <FAT::unlink(char const*)+0x78>
c0019fbf:	90                   	nop
c0019fc0:	83 ec 08             	sub    esp,0x8
c0019fc3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019fca:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fce:	50                   	push   eax
c0019fcf:	e8 6c 66 fe ff       	call   c0000640 <strcpy>
c0019fd4:	83 c4 10             	add    esp,0x10
c0019fd7:	83 ec 08             	sub    esp,0x8
c0019fda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019fde:	50                   	push   eax
c0019fdf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019fe6:	e8 61 fc ff ff       	call   c0019c4c <FAT::fixFilepath(char*)>
c0019feb:	83 c4 10             	add    esp,0x10
c0019fee:	83 ec 0c             	sub    esp,0xc
c0019ff1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ff5:	50                   	push   eax
c0019ff6:	e8 ff a9 fe ff       	call   c00049fa <f_unlink>
c0019ffb:	83 c4 10             	add    esp,0x10
c0019ffe:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a005:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a00c:	85 c0                	test   eax,eax
c001a00e:	75 08                	jne    c001a018 <FAT::unlink(char const*)+0x70>
c001a010:	b8 00 00 00 00       	mov    eax,0x0
c001a015:	eb 09                	jmp    c001a020 <FAT::unlink(char const*)+0x78>
c001a017:	90                   	nop
c001a018:	b8 01 00 00 00       	mov    eax,0x1
c001a01d:	8d 76 00             	lea    esi,[esi+0x0]
c001a020:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a026:	c3                   	ret    
c001a027:	90                   	nop

c001a028 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a028:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a02e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a035:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a03c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a040:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a044:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a04c:	75 0a                	jne    c001a058 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a04e:	b8 04 00 00 00       	mov    eax,0x4
c001a053:	e9 7c 01 00 00       	jmp    c001a1d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a058:	83 ec 08             	sub    esp,0x8
c001a05b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a062:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a066:	50                   	push   eax
c001a067:	e8 d4 65 fe ff       	call   c0000640 <strcpy>
c001a06c:	83 c4 10             	add    esp,0x10
c001a06f:	83 ec 08             	sub    esp,0x8
c001a072:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a076:	50                   	push   eax
c001a077:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a07e:	e8 c9 fb ff ff       	call   c0019c4c <FAT::fixFilepath(char*)>
c001a083:	83 c4 10             	add    esp,0x10
c001a086:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a08e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a096:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a09b:	83 e0 01             	and    eax,0x1
c001a09e:	74 14                	je     c001a0b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a0a0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0a7:	83 c8 01             	or     eax,0x1
c001a0aa:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0b9:	83 e0 02             	and    eax,0x2
c001a0bc:	74 12                	je     c001a0d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a0be:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0c5:	83 c8 20             	or     eax,0x20
c001a0c8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0cf:	90                   	nop
c001a0d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0d5:	83 e0 04             	and    eax,0x4
c001a0d8:	74 12                	je     c001a0ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a0da:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0e1:	83 c8 04             	or     eax,0x4
c001a0e4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0eb:	90                   	nop
c001a0ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0f1:	83 e0 08             	and    eax,0x8
c001a0f4:	74 12                	je     c001a108 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a0f6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0fd:	83 c8 02             	or     eax,0x2
c001a100:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a107:	90                   	nop
c001a108:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a10d:	83 e0 01             	and    eax,0x1
c001a110:	74 12                	je     c001a124 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a112:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a119:	83 c8 01             	or     eax,0x1
c001a11c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a123:	90                   	nop
c001a124:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a129:	83 e0 02             	and    eax,0x2
c001a12c:	74 12                	je     c001a140 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a12e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a135:	83 c8 20             	or     eax,0x20
c001a138:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a13f:	90                   	nop
c001a140:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a145:	83 e0 04             	and    eax,0x4
c001a148:	74 12                	je     c001a15c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a14a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a151:	83 c8 04             	or     eax,0x4
c001a154:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a15b:	90                   	nop
c001a15c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a161:	83 e0 08             	and    eax,0x8
c001a164:	74 12                	je     c001a178 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a166:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a16d:	83 c8 02             	or     eax,0x2
c001a170:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a177:	90                   	nop
c001a178:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a17f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a186:	09 d0                	or     eax,edx
c001a188:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a18f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a197:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a19f:	83 ec 04             	sub    esp,0x4
c001a1a2:	52                   	push   edx
c001a1a3:	50                   	push   eax
c001a1a4:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a1a8:	50                   	push   eax
c001a1a9:	e8 c1 ac fe ff       	call   c0004e6f <f_chmod>
c001a1ae:	83 c4 10             	add    esp,0x10
c001a1b1:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a1b8:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a1bf:	85 c0                	test   eax,eax
c001a1c1:	75 09                	jne    c001a1cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a1c3:	b8 00 00 00 00       	mov    eax,0x0
c001a1c8:	eb 0a                	jmp    c001a1d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a1ca:	66 90                	xchg   ax,ax
c001a1cc:	b8 01 00 00 00       	mov    eax,0x1
c001a1d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1d4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a1da:	c3                   	ret    
c001a1db:	90                   	nop

c001a1dc <FAT::rename(char const*, char const*)>:
c001a1dc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a1e2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a1ea:	74 0c                	je     c001a1f8 <FAT::rename(char const*, char const*)+0x1c>
c001a1ec:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a1f4:	75 0e                	jne    c001a204 <FAT::rename(char const*, char const*)+0x28>
c001a1f6:	66 90                	xchg   ax,ax
c001a1f8:	b8 04 00 00 00       	mov    eax,0x4
c001a1fd:	e9 9e 00 00 00       	jmp    c001a2a0 <FAT::rename(char const*, char const*)+0xc4>
c001a202:	66 90                	xchg   ax,ax
c001a204:	83 ec 08             	sub    esp,0x8
c001a207:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a20e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a215:	50                   	push   eax
c001a216:	e8 25 64 fe ff       	call   c0000640 <strcpy>
c001a21b:	83 c4 10             	add    esp,0x10
c001a21e:	83 ec 08             	sub    esp,0x8
c001a221:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a228:	50                   	push   eax
c001a229:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a230:	e8 17 fa ff ff       	call   c0019c4c <FAT::fixFilepath(char*)>
c001a235:	83 c4 10             	add    esp,0x10
c001a238:	83 ec 08             	sub    esp,0x8
c001a23b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a242:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a246:	50                   	push   eax
c001a247:	e8 f4 63 fe ff       	call   c0000640 <strcpy>
c001a24c:	83 c4 10             	add    esp,0x10
c001a24f:	83 ec 08             	sub    esp,0x8
c001a252:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a256:	50                   	push   eax
c001a257:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a25e:	e8 e9 f9 ff ff       	call   c0019c4c <FAT::fixFilepath(char*)>
c001a263:	83 c4 10             	add    esp,0x10
c001a266:	83 ec 08             	sub    esp,0x8
c001a269:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a26d:	50                   	push   eax
c001a26e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a275:	50                   	push   eax
c001a276:	e8 3c aa fe ff       	call   c0004cb7 <f_rename>
c001a27b:	83 c4 10             	add    esp,0x10
c001a27e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a285:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a28c:	85 c0                	test   eax,eax
c001a28e:	75 08                	jne    c001a298 <FAT::rename(char const*, char const*)+0xbc>
c001a290:	b8 00 00 00 00       	mov    eax,0x0
c001a295:	eb 09                	jmp    c001a2a0 <FAT::rename(char const*, char const*)+0xc4>
c001a297:	90                   	nop
c001a298:	b8 01 00 00 00       	mov    eax,0x1
c001a29d:	8d 76 00             	lea    esi,[esi+0x0]
c001a2a0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a2a6:	c3                   	ret    
c001a2a7:	90                   	nop

c001a2a8 <FAT::mkdir(char const*)>:
c001a2a8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a2ae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a2b6:	75 08                	jne    c001a2c0 <FAT::mkdir(char const*)+0x18>
c001a2b8:	b8 04 00 00 00       	mov    eax,0x4
c001a2bd:	eb 61                	jmp    c001a320 <FAT::mkdir(char const*)+0x78>
c001a2bf:	90                   	nop
c001a2c0:	83 ec 08             	sub    esp,0x8
c001a2c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2ce:	50                   	push   eax
c001a2cf:	e8 6c 63 fe ff       	call   c0000640 <strcpy>
c001a2d4:	83 c4 10             	add    esp,0x10
c001a2d7:	83 ec 08             	sub    esp,0x8
c001a2da:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2de:	50                   	push   eax
c001a2df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2e6:	e8 61 f9 ff ff       	call   c0019c4c <FAT::fixFilepath(char*)>
c001a2eb:	83 c4 10             	add    esp,0x10
c001a2ee:	83 ec 0c             	sub    esp,0xc
c001a2f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2f5:	50                   	push   eax
c001a2f6:	e8 21 a8 fe ff       	call   c0004b1c <f_mkdir>
c001a2fb:	83 c4 10             	add    esp,0x10
c001a2fe:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a305:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a30c:	85 c0                	test   eax,eax
c001a30e:	75 08                	jne    c001a318 <FAT::mkdir(char const*)+0x70>
c001a310:	b8 00 00 00 00       	mov    eax,0x0
c001a315:	eb 09                	jmp    c001a320 <FAT::mkdir(char const*)+0x78>
c001a317:	90                   	nop
c001a318:	b8 01 00 00 00       	mov    eax,0x1
c001a31d:	8d 76 00             	lea    esi,[esi+0x0]
c001a320:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a326:	c3                   	ret    
c001a327:	90                   	nop

c001a328 <FAT::exists(char const*)>:
c001a328:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a32e:	83 ec 08             	sub    esp,0x8
c001a331:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a338:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a33c:	50                   	push   eax
c001a33d:	e8 fe 62 fe ff       	call   c0000640 <strcpy>
c001a342:	83 c4 10             	add    esp,0x10
c001a345:	83 ec 08             	sub    esp,0x8
c001a348:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a34c:	50                   	push   eax
c001a34d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a354:	e8 f3 f8 ff ff       	call   c0019c4c <FAT::fixFilepath(char*)>
c001a359:	83 c4 10             	add    esp,0x10
c001a35c:	83 ec 08             	sub    esp,0x8
c001a35f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a366:	50                   	push   eax
c001a367:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a36b:	50                   	push   eax
c001a36c:	e8 17 a4 fe ff       	call   c0004788 <f_stat>
c001a371:	83 c4 10             	add    esp,0x10
c001a374:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a37b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a382:	85 c0                	test   eax,eax
c001a384:	75 06                	jne    c001a38c <FAT::exists(char const*)+0x64>
c001a386:	b0 01                	mov    al,0x1
c001a388:	eb 06                	jmp    c001a390 <FAT::exists(char const*)+0x68>
c001a38a:	66 90                	xchg   ax,ax
c001a38c:	b0 00                	mov    al,0x0
c001a38e:	66 90                	xchg   ax,ax
c001a390:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a396:	c3                   	ret    
c001a397:	90                   	nop

c001a398 <isoReadDiscSectorHelper>:
c001a398:	83 ec 2c             	sub    esp,0x2c
c001a39b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a39f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a3a3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a3a8:	83 e8 41             	sub    eax,0x41
c001a3ab:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a3b2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a3b6:	ba 00 00 00 00       	mov    edx,0x0
c001a3bb:	83 ec 0c             	sub    esp,0xc
c001a3be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a3c2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a3c6:	52                   	push   edx
c001a3c7:	50                   	push   eax
c001a3c8:	51                   	push   ecx
c001a3c9:	e8 a2 39 ff ff       	call   c000dd70 <LogicalDisk::read(unsigned long long, int, void*)>
c001a3ce:	83 c4 20             	add    esp,0x20
c001a3d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3d5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a3da:	74 0c                	je     c001a3e8 <isoReadDiscSectorHelper+0x50>
c001a3dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3e0:	c1 e0 0b             	shl    eax,0xb
c001a3e3:	eb 0b                	jmp    c001a3f0 <isoReadDiscSectorHelper+0x58>
c001a3e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3e8:	b8 00 00 00 00       	mov    eax,0x0
c001a3ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a3f0:	83 c4 2c             	add    esp,0x2c
c001a3f3:	c3                   	ret    

c001a3f4 <iso_kprintf>:
c001a3f4:	83 ec 0c             	sub    esp,0xc
c001a3f7:	83 ec 08             	sub    esp,0x8
c001a3fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3fe:	68 5a 2b 02 c0       	push   0xc0022b5a
c001a403:	e8 3d 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a408:	83 c4 10             	add    esp,0x10
c001a40b:	90                   	nop
c001a40c:	83 c4 0c             	add    esp,0xc
c001a40f:	c3                   	ret    

c001a410 <iso_kprintfd>:
c001a410:	83 ec 0c             	sub    esp,0xc
c001a413:	83 ec 08             	sub    esp,0x8
c001a416:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a41a:	68 da 12 02 c0       	push   0xc00212da
c001a41f:	e8 21 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a424:	83 c4 10             	add    esp,0x10
c001a427:	90                   	nop
c001a428:	83 c4 0c             	add    esp,0xc
c001a42b:	c3                   	ret    

c001a42c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a42c:	b8 08 00 00 00       	mov    eax,0x8
c001a431:	c3                   	ret    

c001a432 <ISO9660::truncate(void*, unsigned long long)>:
c001a432:	b8 01 00 00 00       	mov    eax,0x1
c001a437:	c3                   	ret    

c001a438 <ISO9660::getName()>:
c001a438:	b8 10 2e 02 c0       	mov    eax,0xc0022e10
c001a43d:	c3                   	ret    

c001a43e <ISO9660::closeDir(void*)>:
c001a43e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a442:	8b 00                	mov    eax,DWORD PTR [eax]
c001a444:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a447:	90                   	nop

c001a448 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a448:	b8 01 00 00 00       	mov    eax,0x1
c001a44d:	c3                   	ret    

c001a44e <ISO9660::unlink(char const*)>:
c001a44e:	b8 01 00 00 00       	mov    eax,0x1
c001a453:	c3                   	ret    

c001a454 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a454:	b8 03 00 00 00       	mov    eax,0x3
c001a459:	c3                   	ret    

c001a45a <ISO9660::rename(char const*, char const*)>:
c001a45a:	b8 01 00 00 00       	mov    eax,0x1
c001a45f:	c3                   	ret    

c001a460 <ISO9660::mkdir(char const*)>:
c001a460:	b8 01 00 00 00       	mov    eax,0x1
c001a465:	c3                   	ret    

c001a466 <ISO9660::~ISO9660()>:
c001a466:	83 ec 0c             	sub    esp,0xc
c001a469:	ba 50 2f 02 c0       	mov    edx,0xc0022f50
c001a46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a472:	89 10                	mov    DWORD PTR [eax],edx
c001a474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a478:	83 ec 0c             	sub    esp,0xc
c001a47b:	50                   	push   eax
c001a47c:	e8 17 13 ff ff       	call   c000b798 <Filesystem::~Filesystem()>
c001a481:	83 c4 10             	add    esp,0x10
c001a484:	90                   	nop
c001a485:	83 c4 0c             	add    esp,0xc
c001a488:	c3                   	ret    
c001a489:	90                   	nop

c001a48a <ISO9660::~ISO9660()>:
c001a48a:	83 ec 0c             	sub    esp,0xc
c001a48d:	83 ec 0c             	sub    esp,0xc
c001a490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a494:	e8 cd ff ff ff       	call   c001a466 <ISO9660::~ISO9660()>
c001a499:	83 c4 10             	add    esp,0x10
c001a49c:	83 ec 08             	sub    esp,0x8
c001a49f:	6a 08                	push   0x8
c001a4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4a5:	e8 6e 03 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a4aa:	83 c4 10             	add    esp,0x10
c001a4ad:	83 c4 0c             	add    esp,0xc
c001a4b0:	c3                   	ret    
c001a4b1:	90                   	nop

c001a4b2 <ISO9660::exists(char const*)>:
c001a4b2:	83 ec 18             	sub    esp,0x18
c001a4b5:	68 2b 2e 02 c0       	push   0xc0022e2b
c001a4ba:	e8 28 71 ff ff       	call   c00115e7 <KePanic(char const*)>
c001a4bf:	31 c0                	xor    eax,eax
c001a4c1:	83 c4 1c             	add    esp,0x1c
c001a4c4:	c3                   	ret    
c001a4c5:	90                   	nop

c001a4c6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a4c6:	56                   	push   esi
c001a4c7:	53                   	push   ebx
c001a4c8:	53                   	push   ebx
c001a4c9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a4cd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a4d1:	85 db                	test   ebx,ebx
c001a4d3:	0f 84 ca 00 00 00    	je     c001a5a3 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a4d9:	85 f6                	test   esi,esi
c001a4db:	0f 84 c2 00 00 00    	je     c001a5a3 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a4e1:	b8 03 00 00 00       	mov    eax,0x3
c001a4e6:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a4eb:	0f 85 b7 00 00 00    	jne    c001a5a8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a4f1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a4f3:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a4fa:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a500:	74 1b                	je     c001a51d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a502:	85 c0                	test   eax,eax
c001a504:	74 10                	je     c001a516 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a506:	83 ec 0c             	sub    esp,0xc
c001a509:	68 49 2e 02 c0       	push   0xc0022e49
c001a50e:	e8 d4 70 ff ff       	call   c00115e7 <KePanic(char const*)>
c001a513:	83 c4 10             	add    esp,0x10
c001a516:	8a 03                	mov    al,BYTE PTR [ebx]
c001a518:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a51d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a520:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a527:	85 c0                	test   eax,eax
c001a529:	74 09                	je     c001a534 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a52b:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a532:	74 48                	je     c001a57c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a534:	83 ec 0c             	sub    esp,0xc
c001a537:	68 59 2e 02 c0       	push   0xc0022e59
c001a53c:	e8 04 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a541:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a544:	83 c4 10             	add    esp,0x10
c001a547:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a54e:	85 c0                	test   eax,eax
c001a550:	74 17                	je     c001a569 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a552:	83 ec 0c             	sub    esp,0xc
c001a555:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a55c:	68 79 2e 02 c0       	push   0xc0022e79
c001a561:	e8 df 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a566:	83 c4 10             	add    esp,0x10
c001a569:	83 ec 0c             	sub    esp,0xc
c001a56c:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a573:	50                   	push   eax
c001a574:	e8 cd c4 fe ff       	call   c0006a46 <init_percd>
c001a579:	83 c4 10             	add    esp,0x10
c001a57c:	83 c3 03             	add    ebx,0x3
c001a57f:	51                   	push   ecx
c001a580:	51                   	push   ecx
c001a581:	6a 00                	push   0x0
c001a583:	53                   	push   ebx
c001a584:	e8 84 bf fe ff       	call   c000650d <iso_open>
c001a589:	83 c4 10             	add    esp,0x10
c001a58c:	89 c2                	mov    edx,eax
c001a58e:	b8 01 00 00 00       	mov    eax,0x1
c001a593:	83 fa ff             	cmp    edx,0xffffffff
c001a596:	74 10                	je     c001a5a8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a598:	83 c2 32             	add    edx,0x32
c001a59b:	31 c0                	xor    eax,eax
c001a59d:	01 d2                	add    edx,edx
c001a59f:	89 16                	mov    DWORD PTR [esi],edx
c001a5a1:	eb 05                	jmp    c001a5a8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a5a3:	b8 04 00 00 00       	mov    eax,0x4
c001a5a8:	5a                   	pop    edx
c001a5a9:	5b                   	pop    ebx
c001a5aa:	5e                   	pop    esi
c001a5ab:	c3                   	ret    

c001a5ac <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a5ac:	53                   	push   ebx
c001a5ad:	83 ec 08             	sub    esp,0x8
c001a5b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a5b8:	85 c0                	test   eax,eax
c001a5ba:	74 2d                	je     c001a5e9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a5bc:	85 db                	test   ebx,ebx
c001a5be:	74 29                	je     c001a5e9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a5c0:	b9 02 00 00 00       	mov    ecx,0x2
c001a5c5:	52                   	push   edx
c001a5c6:	99                   	cdq    
c001a5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5cb:	f7 f9                	idiv   ecx
c001a5cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a5d1:	83 e8 32             	sub    eax,0x32
c001a5d4:	50                   	push   eax
c001a5d5:	e8 db bf fe ff       	call   c00065b5 <iso_read>
c001a5da:	83 c4 10             	add    esp,0x10
c001a5dd:	89 03                	mov    DWORD PTR [ebx],eax
c001a5df:	09 d0                	or     eax,edx
c001a5e1:	0f 94 c0             	sete   al
c001a5e4:	0f b6 c0             	movzx  eax,al
c001a5e7:	eb 05                	jmp    c001a5ee <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a5e9:	b8 04 00 00 00       	mov    eax,0x4
c001a5ee:	83 c4 08             	add    esp,0x8
c001a5f1:	5b                   	pop    ebx
c001a5f2:	c3                   	ret    
c001a5f3:	90                   	nop

c001a5f4 <ISO9660::seek(void*, unsigned long long)>:
c001a5f4:	57                   	push   edi
c001a5f5:	56                   	push   esi
c001a5f6:	b8 04 00 00 00       	mov    eax,0x4
c001a5fb:	51                   	push   ecx
c001a5fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a600:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a604:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a608:	85 d2                	test   edx,edx
c001a60a:	74 26                	je     c001a632 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a60c:	6a 00                	push   0x0
c001a60e:	b9 02 00 00 00       	mov    ecx,0x2
c001a613:	57                   	push   edi
c001a614:	89 d0                	mov    eax,edx
c001a616:	56                   	push   esi
c001a617:	99                   	cdq    
c001a618:	f7 f9                	idiv   ecx
c001a61a:	83 e8 32             	sub    eax,0x32
c001a61d:	50                   	push   eax
c001a61e:	e8 a8 c0 fe ff       	call   c00066cb <iso_seek>
c001a623:	83 c4 10             	add    esp,0x10
c001a626:	31 f0                	xor    eax,esi
c001a628:	31 fa                	xor    edx,edi
c001a62a:	09 d0                	or     eax,edx
c001a62c:	0f 95 c0             	setne  al
c001a62f:	0f b6 c0             	movzx  eax,al
c001a632:	5a                   	pop    edx
c001a633:	5e                   	pop    esi
c001a634:	5f                   	pop    edi
c001a635:	c3                   	ret    

c001a636 <ISO9660::tell(void*, unsigned long long*)>:
c001a636:	53                   	push   ebx
c001a637:	83 ec 08             	sub    esp,0x8
c001a63a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a63e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a642:	85 c0                	test   eax,eax
c001a644:	74 24                	je     c001a66a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a646:	85 db                	test   ebx,ebx
c001a648:	74 20                	je     c001a66a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a64a:	83 ec 0c             	sub    esp,0xc
c001a64d:	b9 02 00 00 00       	mov    ecx,0x2
c001a652:	99                   	cdq    
c001a653:	f7 f9                	idiv   ecx
c001a655:	83 e8 32             	sub    eax,0x32
c001a658:	50                   	push   eax
c001a659:	e8 f1 c0 fe ff       	call   c000674f <iso_tell>
c001a65e:	83 c4 10             	add    esp,0x10
c001a661:	89 03                	mov    DWORD PTR [ebx],eax
c001a663:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a666:	31 c0                	xor    eax,eax
c001a668:	eb 05                	jmp    c001a66f <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a66a:	b8 04 00 00 00       	mov    eax,0x4
c001a66f:	83 c4 08             	add    esp,0x8
c001a672:	5b                   	pop    ebx
c001a673:	c3                   	ret    

c001a674 <ISO9660::stat(void*, unsigned long long*)>:
c001a674:	53                   	push   ebx
c001a675:	83 ec 14             	sub    esp,0x14
c001a678:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a67c:	68 9d 2e 02 c0       	push   0xc0022e9d
c001a681:	e8 bf 02 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a686:	83 c4 10             	add    esp,0x10
c001a689:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a68e:	74 2c                	je     c001a6bc <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a690:	85 db                	test   ebx,ebx
c001a692:	74 28                	je     c001a6bc <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a694:	83 ec 0c             	sub    esp,0xc
c001a697:	b9 02 00 00 00       	mov    ecx,0x2
c001a69c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6a0:	99                   	cdq    
c001a6a1:	f7 f9                	idiv   ecx
c001a6a3:	83 e8 32             	sub    eax,0x32
c001a6a6:	50                   	push   eax
c001a6a7:	e8 d4 c0 fe ff       	call   c0006780 <iso_total>
c001a6ac:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a6b3:	89 03                	mov    DWORD PTR [ebx],eax
c001a6b5:	83 c4 10             	add    esp,0x10
c001a6b8:	31 c0                	xor    eax,eax
c001a6ba:	eb 05                	jmp    c001a6c1 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a6bc:	b8 04 00 00 00       	mov    eax,0x4
c001a6c1:	83 c4 08             	add    esp,0x8
c001a6c4:	5b                   	pop    ebx
c001a6c5:	c3                   	ret    

c001a6c6 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a6c6:	55                   	push   ebp
c001a6c7:	57                   	push   edi
c001a6c8:	56                   	push   esi
c001a6c9:	53                   	push   ebx
c001a6ca:	83 ec 18             	sub    esp,0x18
c001a6cd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a6d1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a6d5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a6d9:	68 a5 2e 02 c0       	push   0xc0022ea5
c001a6de:	e8 62 02 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a6e3:	83 c4 10             	add    esp,0x10
c001a6e6:	85 ff                	test   edi,edi
c001a6e8:	0f 94 c0             	sete   al
c001a6eb:	85 f6                	test   esi,esi
c001a6ed:	0f 94 c2             	sete   dl
c001a6f0:	09 d0                	or     eax,edx
c001a6f2:	a8 01                	test   al,0x1
c001a6f4:	0f 85 dd 00 00 00    	jne    c001a7d7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a6fa:	85 db                	test   ebx,ebx
c001a6fc:	0f 84 d5 00 00 00    	je     c001a7d7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a702:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a705:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a70b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a712:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a719:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a71b:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a721:	74 1b                	je     c001a73e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a723:	85 c0                	test   eax,eax
c001a725:	74 10                	je     c001a737 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a727:	83 ec 0c             	sub    esp,0xc
c001a72a:	68 49 2e 02 c0       	push   0xc0022e49
c001a72f:	e8 b3 6e ff ff       	call   c00115e7 <KePanic(char const*)>
c001a734:	83 c4 10             	add    esp,0x10
c001a737:	8a 03                	mov    al,BYTE PTR [ebx]
c001a739:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a73e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a741:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a748:	85 c0                	test   eax,eax
c001a74a:	74 09                	je     c001a755 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a74c:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a753:	74 51                	je     c001a7a6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a755:	83 ec 0c             	sub    esp,0xc
c001a758:	68 ad 2e 02 c0       	push   0xc0022ead
c001a75d:	e8 e3 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a762:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a765:	83 c4 10             	add    esp,0x10
c001a768:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a770:	74 21                	je     c001a793 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a772:	83 ec 0c             	sub    esp,0xc
c001a775:	68 cd 2e 02 c0       	push   0xc0022ecd
c001a77a:	e8 c6 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a77f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a782:	83 c4 10             	add    esp,0x10
c001a785:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a78c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a793:	83 ec 0c             	sub    esp,0xc
c001a796:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a79d:	50                   	push   eax
c001a79e:	e8 a3 c2 fe ff       	call   c0006a46 <init_percd>
c001a7a3:	83 c4 10             	add    esp,0x10
c001a7a6:	83 c3 03             	add    ebx,0x3
c001a7a9:	52                   	push   edx
c001a7aa:	52                   	push   edx
c001a7ab:	6a 00                	push   0x0
c001a7ad:	53                   	push   ebx
c001a7ae:	e8 5a bd fe ff       	call   c000650d <iso_open>
c001a7b3:	83 c4 10             	add    esp,0x10
c001a7b6:	89 c5                	mov    ebp,eax
c001a7b8:	83 f8 ff             	cmp    eax,0xffffffff
c001a7bb:	75 21                	jne    c001a7de <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a7bd:	50                   	push   eax
c001a7be:	50                   	push   eax
c001a7bf:	6a 01                	push   0x1
c001a7c1:	53                   	push   ebx
c001a7c2:	e8 46 bd fe ff       	call   c000650d <iso_open>
c001a7c7:	83 c4 10             	add    esp,0x10
c001a7ca:	ba 02 00 00 00       	mov    edx,0x2
c001a7cf:	40                   	inc    eax
c001a7d0:	74 2b                	je     c001a7fd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a7d2:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a7d5:	eb 24                	jmp    c001a7fb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a7d7:	ba 04 00 00 00       	mov    edx,0x4
c001a7dc:	eb 1f                	jmp    c001a7fd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a7de:	83 ec 0c             	sub    esp,0xc
c001a7e1:	50                   	push   eax
c001a7e2:	e8 99 bf fe ff       	call   c0006780 <iso_total>
c001a7e7:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a7ee:	89 07                	mov    DWORD PTR [edi],eax
c001a7f0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a7f3:	e8 9f bd fe ff       	call   c0006597 <iso_close>
c001a7f8:	83 c4 10             	add    esp,0x10
c001a7fb:	31 d2                	xor    edx,edx
c001a7fd:	83 c4 0c             	add    esp,0xc
c001a800:	89 d0                	mov    eax,edx
c001a802:	5b                   	pop    ebx
c001a803:	5e                   	pop    esi
c001a804:	5f                   	pop    edi
c001a805:	5d                   	pop    ebp
c001a806:	c3                   	ret    
c001a807:	90                   	nop

c001a808 <ISO9660::close(void*)>:
c001a808:	83 ec 0c             	sub    esp,0xc
c001a80b:	b8 04 00 00 00       	mov    eax,0x4
c001a810:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a814:	85 d2                	test   edx,edx
c001a816:	74 1b                	je     c001a833 <ISO9660::close(void*)+0x2b>
c001a818:	83 ec 0c             	sub    esp,0xc
c001a81b:	b9 02 00 00 00       	mov    ecx,0x2
c001a820:	89 d0                	mov    eax,edx
c001a822:	99                   	cdq    
c001a823:	f7 f9                	idiv   ecx
c001a825:	83 e8 32             	sub    eax,0x32
c001a828:	50                   	push   eax
c001a829:	e8 69 bd fe ff       	call   c0006597 <iso_close>
c001a82e:	83 c4 10             	add    esp,0x10
c001a831:	31 c0                	xor    eax,eax
c001a833:	83 c4 0c             	add    esp,0xc
c001a836:	c3                   	ret    
c001a837:	90                   	nop

c001a838 <ISO9660::openDir(char const*, void**)>:
c001a838:	56                   	push   esi
c001a839:	53                   	push   ebx
c001a83a:	50                   	push   eax
c001a83b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a83f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a843:	85 db                	test   ebx,ebx
c001a845:	0f 84 bd 00 00 00    	je     c001a908 <ISO9660::openDir(char const*, void**)+0xd0>
c001a84b:	85 f6                	test   esi,esi
c001a84d:	0f 84 b5 00 00 00    	je     c001a908 <ISO9660::openDir(char const*, void**)+0xd0>
c001a853:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a855:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a85c:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a862:	74 1b                	je     c001a87f <ISO9660::openDir(char const*, void**)+0x47>
c001a864:	85 c0                	test   eax,eax
c001a866:	74 10                	je     c001a878 <ISO9660::openDir(char const*, void**)+0x40>
c001a868:	83 ec 0c             	sub    esp,0xc
c001a86b:	68 49 2e 02 c0       	push   0xc0022e49
c001a870:	e8 72 6d ff ff       	call   c00115e7 <KePanic(char const*)>
c001a875:	83 c4 10             	add    esp,0x10
c001a878:	8a 03                	mov    al,BYTE PTR [ebx]
c001a87a:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a87f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a882:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a889:	85 c0                	test   eax,eax
c001a88b:	74 10                	je     c001a89d <ISO9660::openDir(char const*, void**)+0x65>
c001a88d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a894:	74 1a                	je     c001a8b0 <ISO9660::openDir(char const*, void**)+0x78>
c001a896:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a89d:	83 ec 0c             	sub    esp,0xc
c001a8a0:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a8a7:	50                   	push   eax
c001a8a8:	e8 99 c1 fe ff       	call   c0006a46 <init_percd>
c001a8ad:	83 c4 10             	add    esp,0x10
c001a8b0:	83 c3 03             	add    ebx,0x3
c001a8b3:	50                   	push   eax
c001a8b4:	50                   	push   eax
c001a8b5:	6a 01                	push   0x1
c001a8b7:	53                   	push   ebx
c001a8b8:	e8 50 bc fe ff       	call   c000650d <iso_open>
c001a8bd:	83 c4 10             	add    esp,0x10
c001a8c0:	89 c3                	mov    ebx,eax
c001a8c2:	83 f8 ff             	cmp    eax,0xffffffff
c001a8c5:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a8ca:	75 1c                	jne    c001a8e8 <ISO9660::openDir(char const*, void**)+0xb0>
c001a8cc:	53                   	push   ebx
c001a8cd:	53                   	push   ebx
c001a8ce:	68 f1 2e 02 c0       	push   0xc0022ef1
c001a8d3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a8d9:	e8 c8 e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a8de:	83 c4 10             	add    esp,0x10
c001a8e1:	b8 01 00 00 00       	mov    eax,0x1
c001a8e6:	eb 25                	jmp    c001a90d <ISO9660::openDir(char const*, void**)+0xd5>
c001a8e8:	01 db                	add    ebx,ebx
c001a8ea:	51                   	push   ecx
c001a8eb:	83 c3 65             	add    ebx,0x65
c001a8ee:	51                   	push   ecx
c001a8ef:	68 04 2f 02 c0       	push   0xc0022f04
c001a8f4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a8fa:	e8 a7 e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a8ff:	89 1e                	mov    DWORD PTR [esi],ebx
c001a901:	83 c4 10             	add    esp,0x10
c001a904:	31 c0                	xor    eax,eax
c001a906:	eb 05                	jmp    c001a90d <ISO9660::openDir(char const*, void**)+0xd5>
c001a908:	b8 04 00 00 00       	mov    eax,0x4
c001a90d:	5a                   	pop    edx
c001a90e:	5b                   	pop    ebx
c001a90f:	5e                   	pop    esi
c001a910:	c3                   	ret    
c001a911:	90                   	nop

c001a912 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a912:	55                   	push   ebp
c001a913:	57                   	push   edi
c001a914:	56                   	push   esi
c001a915:	53                   	push   ebx
c001a916:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a91c:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a923:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a92a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a932:	0f 84 e7 00 00 00    	je     c001aa1f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a938:	85 db                	test   ebx,ebx
c001a93a:	0f 84 df 00 00 00    	je     c001aa1f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a940:	83 ec 0c             	sub    esp,0xc
c001a943:	68 17 2f 02 c0       	push   0xc0022f17
c001a948:	e8 f8 ff fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a94d:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a954:	b9 02 00 00 00       	mov    ecx,0x2
c001a959:	99                   	cdq    
c001a95a:	f7 f9                	idiv   ecx
c001a95c:	83 e8 32             	sub    eax,0x32
c001a95f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a962:	e8 6b be fe ff       	call   c00067d2 <iso_readdir>
c001a967:	83 c4 10             	add    esp,0x10
c001a96a:	89 c6                	mov    esi,eax
c001a96c:	85 c0                	test   eax,eax
c001a96e:	75 37                	jne    c001a9a7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a970:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a975:	56                   	push   esi
c001a976:	56                   	push   esi
c001a977:	68 22 2f 02 c0       	push   0xc0022f22
c001a97c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a982:	e8 1f e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a987:	83 c4 0c             	add    esp,0xc
c001a98a:	68 10 01 00 00       	push   0x110
c001a98f:	6a 00                	push   0x0
c001a991:	57                   	push   edi
c001a992:	e8 59 5b fe ff       	call   c00004f0 <memset>
c001a997:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a99d:	83 c4 10             	add    esp,0x10
c001a9a0:	b8 01 00 00 00       	mov    eax,0x1
c001a9a5:	eb 7d                	jmp    c001aa24 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a9a7:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a9ad:	8d 68 08             	lea    ebp,[eax+0x8]
c001a9b0:	83 ec 0c             	sub    esp,0xc
c001a9b3:	55                   	push   ebp
c001a9b4:	e8 b7 5b fe ff       	call   c0000570 <strlen>
c001a9b9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a9c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a9c5:	83 c4 10             	add    esp,0x10
c001a9c8:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a9cc:	75 0a                	jne    c001a9d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a9ce:	b8 02 00 00 00       	mov    eax,0x2
c001a9d3:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a9d6:	74 05                	je     c001a9dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a9d8:	b8 01 00 00 00       	mov    eax,0x1
c001a9dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a9e1:	50                   	push   eax
c001a9e2:	50                   	push   eax
c001a9e3:	55                   	push   ebp
c001a9e4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a9e8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a9ec:	50                   	push   eax
c001a9ed:	e8 4e 5c fe ff       	call   c0000640 <strcpy>
c001a9f2:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a9f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a9fb:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001aa01:	5a                   	pop    edx
c001aa02:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa07:	59                   	pop    ecx
c001aa08:	68 35 2f 02 c0       	push   0xc0022f35
c001aa0d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa13:	e8 8e e0 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001aa18:	83 c4 10             	add    esp,0x10
c001aa1b:	31 c0                	xor    eax,eax
c001aa1d:	eb 05                	jmp    c001aa24 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001aa1f:	b8 04 00 00 00       	mov    eax,0x4
c001aa24:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa2a:	5b                   	pop    ebx
c001aa2b:	5e                   	pop    esi
c001aa2c:	5f                   	pop    edi
c001aa2d:	5d                   	pop    ebp
c001aa2e:	c3                   	ret    

c001aa2f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001aa2f:	57                   	push   edi
c001aa30:	56                   	push   esi
c001aa31:	53                   	push   ebx
c001aa32:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aa36:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa3a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001aa3e:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001aa44:	0f be cb             	movsx  ecx,bl
c001aa47:	75 0b                	jne    c001aa54 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001aa49:	0f be 05 60 41 02 c0 	movsx  eax,BYTE PTR ds:0xc0024160
c001aa50:	39 c8                	cmp    eax,ecx
c001aa52:	74 47                	je     c001aa9b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa54:	83 ec 0c             	sub    esp,0xc
c001aa57:	31 d2                	xor    edx,edx
c001aa59:	68 a0 c8 02 c0       	push   0xc002c8a0
c001aa5e:	6a 01                	push   0x1
c001aa60:	52                   	push   edx
c001aa61:	56                   	push   esi
c001aa62:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001aa69:	e8 02 33 ff ff       	call   c000dd70 <LogicalDisk::read(unsigned long long, int, void*)>
c001aa6e:	83 c4 20             	add    esp,0x20
c001aa71:	85 c0                	test   eax,eax
c001aa73:	75 0e                	jne    c001aa83 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001aa75:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001aa7b:	88 1d 60 41 02 c0    	mov    BYTE PTR ds:0xc0024160,bl
c001aa81:	eb 18                	jmp    c001aa9b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa83:	50                   	push   eax
c001aa84:	68 00 08 00 00       	push   0x800
c001aa89:	6a 00                	push   0x0
c001aa8b:	57                   	push   edi
c001aa8c:	e8 5f 5a fe ff       	call   c00004f0 <memset>
c001aa91:	83 c4 10             	add    esp,0x10
c001aa94:	b8 01 00 00 00       	mov    eax,0x1
c001aa99:	eb 0e                	jmp    c001aaa9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001aa9b:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001aaa0:	b9 00 08 00 00       	mov    ecx,0x800
c001aaa5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aaa7:	31 c0                	xor    eax,eax
c001aaa9:	5b                   	pop    ebx
c001aaaa:	5e                   	pop    esi
c001aaab:	5f                   	pop    edi
c001aaac:	c3                   	ret    
c001aaad:	90                   	nop

c001aaae <ISO9660::tryMount(LogicalDisk*, int)>:
c001aaae:	53                   	push   ebx
c001aaaf:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001aab5:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001aabf:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001aac6:	8d 58 41             	lea    ebx,[eax+0x41]
c001aac9:	0f be db             	movsx  ebx,bl
c001aacc:	53                   	push   ebx
c001aacd:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aad1:	50                   	push   eax
c001aad2:	6a 10                	push   0x10
c001aad4:	e8 56 ff ff ff       	call   c001aa2f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aad9:	83 c4 10             	add    esp,0x10
c001aadc:	31 d2                	xor    edx,edx
c001aade:	85 c0                	test   eax,eax
c001aae0:	75 33                	jne    c001ab15 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aae2:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001aae7:	75 2c                	jne    c001ab15 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aae9:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001aaee:	75 25                	jne    c001ab15 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aaf0:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001aaf5:	75 1e                	jne    c001ab15 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aaf7:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001aafc:	75 17                	jne    c001ab15 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aafe:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ab03:	75 10                	jne    c001ab15 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab05:	83 ec 0c             	sub    esp,0xc
c001ab08:	53                   	push   ebx
c001ab09:	e8 38 bf fe ff       	call   c0006a46 <init_percd>
c001ab0e:	83 c4 10             	add    esp,0x10
c001ab11:	40                   	inc    eax
c001ab12:	0f 95 c2             	setne  dl
c001ab15:	88 d0                	mov    al,dl
c001ab17:	81 c4 08 08 00 00    	add    esp,0x808
c001ab1d:	5b                   	pop    ebx
c001ab1e:	c3                   	ret    
c001ab1f:	90                   	nop

c001ab20 <ISO9660::ISO9660()>:
c001ab20:	83 ec 0c             	sub    esp,0xc
c001ab23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab27:	83 ec 0c             	sub    esp,0xc
c001ab2a:	50                   	push   eax
c001ab2b:	e8 44 0c ff ff       	call   c000b774 <Filesystem::Filesystem()>
c001ab30:	83 c4 10             	add    esp,0x10
c001ab33:	ba 50 2f 02 c0       	mov    edx,0xc0022f50
c001ab38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab3c:	89 10                	mov    DWORD PTR [eax],edx
c001ab3e:	e8 15 c0 fe ff       	call   c0006b58 <fs_iso9660_init>
c001ab43:	90                   	nop
c001ab44:	83 c4 0c             	add    esp,0xc
c001ab47:	c3                   	ret    

c001ab48 <SoundCard::beginPlayback()>:
c001ab48:	c7 44 24 04 b4 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022fb4
c001ab50:	e9 92 6a ff ff       	jmp    c00115e7 <KePanic(char const*)>
c001ab55:	90                   	nop

c001ab56 <SoundCard::stopPlayback()>:
c001ab56:	c7 44 24 04 b4 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022fb4
c001ab5e:	e9 84 6a ff ff       	jmp    c00115e7 <KePanic(char const*)>
c001ab63:	90                   	nop

c001ab64 <SoundCard::SoundCard(char const*)>:
c001ab64:	83 ec 1c             	sub    esp,0x1c
c001ab67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab6b:	83 ec 08             	sub    esp,0x8
c001ab6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab72:	50                   	push   eax
c001ab73:	e8 ae 1f ff ff       	call   c000cb26 <Device::Device(char const*)>
c001ab78:	83 c4 10             	add    esp,0x10
c001ab7b:	ba 00 30 02 c0       	mov    edx,0xc0023000
c001ab80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab84:	89 10                	mov    DWORD PTR [eax],edx
c001ab86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab8a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ab91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab95:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001ab9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aba3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001abad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abb1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001abbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abbf:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001abc9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001abd1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001abd6:	7f 1a                	jg     c001abf2 <SoundCard::SoundCard(char const*)+0x8e>
c001abd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abdc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001abe0:	83 c2 54             	add    edx,0x54
c001abe3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001abeb:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001abf0:	eb df                	jmp    c001abd1 <SoundCard::SoundCard(char const*)+0x6d>
c001abf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abf6:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001abfd:	90                   	nop
c001abfe:	83 c4 1c             	add    esp,0x1c
c001ac01:	c3                   	ret    

c001ac02 <SoundCard::~SoundCard()>:
c001ac02:	83 ec 0c             	sub    esp,0xc
c001ac05:	ba 00 30 02 c0       	mov    edx,0xc0023000
c001ac0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac0e:	89 10                	mov    DWORD PTR [eax],edx
c001ac10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac14:	83 ec 0c             	sub    esp,0xc
c001ac17:	50                   	push   eax
c001ac18:	e8 73 1c ff ff       	call   c000c890 <Device::~Device()>
c001ac1d:	83 c4 10             	add    esp,0x10
c001ac20:	90                   	nop
c001ac21:	83 c4 0c             	add    esp,0xc
c001ac24:	c3                   	ret    
c001ac25:	90                   	nop

c001ac26 <SoundCard::~SoundCard()>:
c001ac26:	83 ec 0c             	sub    esp,0xc
c001ac29:	83 ec 0c             	sub    esp,0xc
c001ac2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac30:	e8 cd ff ff ff       	call   c001ac02 <SoundCard::~SoundCard()>
c001ac35:	83 c4 10             	add    esp,0x10
c001ac38:	83 ec 08             	sub    esp,0x8
c001ac3b:	68 e8 01 00 00       	push   0x1e8
c001ac40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac44:	e8 cf fb fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ac49:	83 c4 10             	add    esp,0x10
c001ac4c:	83 c4 0c             	add    esp,0xc
c001ac4f:	c3                   	ret    

c001ac50 <SoundCard::configureRates(int, int, int)>:
c001ac50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac54:	31 c0                	xor    eax,eax
c001ac56:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ac5d:	75 20                	jne    c001ac7f <SoundCard::configureRates(int, int, int)+0x2f>
c001ac5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac63:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ac69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac6d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ac73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac77:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ac7d:	b0 01                	mov    al,0x1
c001ac7f:	c3                   	ret    

c001ac80 <SoundCard::getSamples16(int, short*)>:
c001ac80:	55                   	push   ebp
c001ac81:	57                   	push   edi
c001ac82:	31 ff                	xor    edi,edi
c001ac84:	56                   	push   esi
c001ac85:	53                   	push   ebx
c001ac86:	31 db                	xor    ebx,ebx
c001ac88:	83 ec 10             	sub    esp,0x10
c001ac8b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ac8f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac93:	8d 04 36             	lea    eax,[esi+esi*1]
c001ac96:	50                   	push   eax
c001ac97:	6a 00                	push   0x0
c001ac99:	55                   	push   ebp
c001ac9a:	e8 51 58 fe ff       	call   c00004f0 <memset>
c001ac9f:	83 c4 10             	add    esp,0x10
c001aca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aca6:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001acad:	85 c0                	test   eax,eax
c001acaf:	74 1b                	je     c001accc <SoundCard::getSamples16(int, short*)+0x4c>
c001acb1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001acb5:	75 15                	jne    c001accc <SoundCard::getSamples16(int, short*)+0x4c>
c001acb7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001acbb:	55                   	push   ebp
c001acbc:	56                   	push   esi
c001acbd:	50                   	push   eax
c001acbe:	e8 f1 02 00 00       	call   c001afb4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001acc3:	83 c4 10             	add    esp,0x10
c001acc6:	39 c7                	cmp    edi,eax
c001acc8:	7d 02                	jge    c001accc <SoundCard::getSamples16(int, short*)+0x4c>
c001acca:	89 c7                	mov    edi,eax
c001accc:	43                   	inc    ebx
c001accd:	83 fb 20             	cmp    ebx,0x20
c001acd0:	75 d0                	jne    c001aca2 <SoundCard::getSamples16(int, short*)+0x22>
c001acd2:	83 c4 0c             	add    esp,0xc
c001acd5:	89 f8                	mov    eax,edi
c001acd7:	5b                   	pop    ebx
c001acd8:	5e                   	pop    esi
c001acd9:	5f                   	pop    edi
c001acda:	5d                   	pop    ebp
c001acdb:	c3                   	ret    

c001acdc <SoundCard::getSamples32(int, int*)>:
c001acdc:	55                   	push   ebp
c001acdd:	57                   	push   edi
c001acde:	31 ff                	xor    edi,edi
c001ace0:	56                   	push   esi
c001ace1:	31 f6                	xor    esi,esi
c001ace3:	53                   	push   ebx
c001ace4:	83 ec 10             	sub    esp,0x10
c001ace7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aceb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001acef:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001acf3:	c1 e0 02             	shl    eax,0x2
c001acf6:	50                   	push   eax
c001acf7:	6a 00                	push   0x0
c001acf9:	55                   	push   ebp
c001acfa:	e8 f1 57 fe ff       	call   c00004f0 <memset>
c001acff:	83 c4 10             	add    esp,0x10
c001ad02:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ad09:	85 c0                	test   eax,eax
c001ad0b:	74 1b                	je     c001ad28 <SoundCard::getSamples32(int, int*)+0x4c>
c001ad0d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad11:	75 15                	jne    c001ad28 <SoundCard::getSamples32(int, int*)+0x4c>
c001ad13:	53                   	push   ebx
c001ad14:	55                   	push   ebp
c001ad15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad19:	50                   	push   eax
c001ad1a:	e8 61 03 00 00       	call   c001b080 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ad1f:	83 c4 10             	add    esp,0x10
c001ad22:	39 c6                	cmp    esi,eax
c001ad24:	7d 02                	jge    c001ad28 <SoundCard::getSamples32(int, int*)+0x4c>
c001ad26:	89 c6                	mov    esi,eax
c001ad28:	47                   	inc    edi
c001ad29:	83 ff 20             	cmp    edi,0x20
c001ad2c:	75 d4                	jne    c001ad02 <SoundCard::getSamples32(int, int*)+0x26>
c001ad2e:	85 f6                	test   esi,esi
c001ad30:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ad37:	75 0f                	jne    c001ad48 <SoundCard::getSamples32(int, int*)+0x6c>
c001ad39:	85 c0                	test   eax,eax
c001ad3b:	74 1b                	je     c001ad58 <SoundCard::getSamples32(int, int*)+0x7c>
c001ad3d:	83 ec 0c             	sub    esp,0xc
c001ad40:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad42:	53                   	push   ebx
c001ad43:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ad46:	eb 0d                	jmp    c001ad55 <SoundCard::getSamples32(int, int*)+0x79>
c001ad48:	85 c0                	test   eax,eax
c001ad4a:	75 0c                	jne    c001ad58 <SoundCard::getSamples32(int, int*)+0x7c>
c001ad4c:	83 ec 0c             	sub    esp,0xc
c001ad4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad51:	53                   	push   ebx
c001ad52:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ad55:	83 c4 10             	add    esp,0x10
c001ad58:	83 c4 0c             	add    esp,0xc
c001ad5b:	89 f0                	mov    eax,esi
c001ad5d:	5b                   	pop    ebx
c001ad5e:	5e                   	pop    esi
c001ad5f:	5f                   	pop    edi
c001ad60:	5d                   	pop    ebp
c001ad61:	c3                   	ret    

c001ad62 <SoundCard::addChannel(SoundPort*)>:
c001ad62:	83 ec 0c             	sub    esp,0xc
c001ad65:	31 c0                	xor    eax,eax
c001ad67:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad6b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ad73:	74 1b                	je     c001ad90 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ad75:	40                   	inc    eax
c001ad76:	83 f8 20             	cmp    eax,0x20
c001ad79:	75 f0                	jne    c001ad6b <SoundCard::addChannel(SoundPort*)+0x9>
c001ad7b:	83 ec 0c             	sub    esp,0xc
c001ad7e:	68 d9 2f 02 c0       	push   0xc0022fd9
c001ad83:	e8 5f 68 ff ff       	call   c00115e7 <KePanic(char const*)>
c001ad88:	83 c4 10             	add    esp,0x10
c001ad8b:	83 c8 ff             	or     eax,0xffffffff
c001ad8e:	eb 0b                	jmp    c001ad9b <SoundCard::addChannel(SoundPort*)+0x39>
c001ad90:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad94:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ad9b:	83 c4 0c             	add    esp,0xc
c001ad9e:	c3                   	ret    
c001ad9f:	90                   	nop

c001ada0 <SoundCard::removeChannel(int)>:
c001ada0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ada4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ada8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001adb3:	c3                   	ret    

c001adb4 <SoundPort::SoundPort(int, int, int, int)>:
c001adb4:	83 ec 0c             	sub    esp,0xc
c001adb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adbb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001adc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adc6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001adca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001add2:	89 10                	mov    DWORD PTR [eax],edx
c001add4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001add8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001addc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001addf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ade7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001adea:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001adef:	75 13                	jne    c001ae04 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001adf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adf5:	8b 00                	mov    eax,DWORD PTR [eax]
c001adf7:	05 a0 0f 00 00       	add    eax,0xfa0
c001adfc:	01 c0                	add    eax,eax
c001adfe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ae02:	66 90                	xchg   ax,ax
c001ae04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae08:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae0c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ae0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae13:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ae1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae1e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae21:	c1 e0 02             	shl    eax,0x2
c001ae24:	83 ec 0c             	sub    esp,0xc
c001ae27:	50                   	push   eax
c001ae28:	e8 89 cc fe ff       	call   c0007ab6 <malloc>
c001ae2d:	83 c4 10             	add    esp,0x10
c001ae30:	89 c2                	mov    edx,eax
c001ae32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae36:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ae39:	90                   	nop
c001ae3a:	83 c4 0c             	add    esp,0xc
c001ae3d:	c3                   	ret    
c001ae3e:	66 90                	xchg   ax,ax

c001ae40 <SoundPort::~SoundPort()>:
c001ae40:	83 ec 0c             	sub    esp,0xc
c001ae43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae47:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae4a:	85 c0                	test   eax,eax
c001ae4c:	74 1e                	je     c001ae6c <SoundPort::~SoundPort()+0x2c>
c001ae4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae52:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae55:	83 ec 0c             	sub    esp,0xc
c001ae58:	50                   	push   eax
c001ae59:	e8 68 cc fe ff       	call   c0007ac6 <free>
c001ae5e:	83 c4 10             	add    esp,0x10
c001ae61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae65:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae6c:	90                   	nop
c001ae6d:	83 c4 0c             	add    esp,0xc
c001ae70:	c3                   	ret    
c001ae71:	90                   	nop
c001ae72:	66 90                	xchg   ax,ax

c001ae74 <SoundPort::unpause()>:
c001ae74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae78:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ae7c:	c3                   	ret    
c001ae7d:	90                   	nop
c001ae7e:	66 90                	xchg   ax,ax

c001ae80 <SoundPort::pause()>:
c001ae80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae84:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ae88:	c3                   	ret    
c001ae89:	90                   	nop
c001ae8a:	66 90                	xchg   ax,ax

c001ae8c <SoundPort::getBufferUsed()>:
c001ae8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae90:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae93:	c3                   	ret    

c001ae94 <SoundPort::getBufferSize()>:
c001ae94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae98:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae9b:	c3                   	ret    

c001ae9c <SoundPort::buffer16(short*, int)>:
c001ae9c:	55                   	push   ebp
c001ae9d:	57                   	push   edi
c001ae9e:	56                   	push   esi
c001ae9f:	53                   	push   ebx
c001aea0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aea4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001aea8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001aeab:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001aeae:	74 68                	je     c001af18 <SoundPort::buffer16(short*, int)+0x7c>
c001aeb0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aeb4:	85 c9                	test   ecx,ecx
c001aeb6:	7e 60                	jle    c001af18 <SoundPort::buffer16(short*, int)+0x7c>
c001aeb8:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001aebc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aebf:	c1 e1 0f             	shl    ecx,0xf
c001aec2:	8d 70 01             	lea    esi,[eax+0x1]
c001aec5:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aec8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001aecb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aece:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aed1:	74 4d                	je     c001af20 <SoundPort::buffer16(short*, int)+0x84>
c001aed3:	31 f6                	xor    esi,esi
c001aed5:	eb 21                	jmp    c001aef8 <SoundPort::buffer16(short*, int)+0x5c>
c001aed7:	90                   	nop
c001aed8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001aedd:	8d 79 01             	lea    edi,[ecx+0x1]
c001aee0:	c1 e3 0f             	shl    ebx,0xf
c001aee3:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001aee6:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001aee9:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001aeec:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aeef:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aef2:	74 1c                	je     c001af10 <SoundPort::buffer16(short*, int)+0x74>
c001aef4:	89 c6                	mov    esi,eax
c001aef6:	66 90                	xchg   ax,ax
c001aef8:	8d 46 01             	lea    eax,[esi+0x1]
c001aefb:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001aeff:	75 d7                	jne    c001aed8 <SoundPort::buffer16(short*, int)+0x3c>
c001af01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af05:	8d 76 00             	lea    esi,[esi+0x0]
c001af08:	5b                   	pop    ebx
c001af09:	5e                   	pop    esi
c001af0a:	5f                   	pop    edi
c001af0b:	5d                   	pop    ebp
c001af0c:	c3                   	ret    
c001af0d:	8d 76 00             	lea    esi,[esi+0x0]
c001af10:	5b                   	pop    ebx
c001af11:	8d 46 02             	lea    eax,[esi+0x2]
c001af14:	5e                   	pop    esi
c001af15:	5f                   	pop    edi
c001af16:	5d                   	pop    ebp
c001af17:	c3                   	ret    
c001af18:	5b                   	pop    ebx
c001af19:	31 c0                	xor    eax,eax
c001af1b:	5e                   	pop    esi
c001af1c:	5f                   	pop    edi
c001af1d:	5d                   	pop    ebp
c001af1e:	c3                   	ret    
c001af1f:	90                   	nop
c001af20:	b8 01 00 00 00       	mov    eax,0x1
c001af25:	eb e1                	jmp    c001af08 <SoundPort::buffer16(short*, int)+0x6c>
c001af27:	90                   	nop

c001af28 <SoundPort::buffer32(int*, int)>:
c001af28:	55                   	push   ebp
c001af29:	57                   	push   edi
c001af2a:	56                   	push   esi
c001af2b:	53                   	push   ebx
c001af2c:	83 ec 04             	sub    esp,0x4
c001af2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af37:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af3a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001af3e:	89 04 24             	mov    DWORD PTR [esp],eax
c001af41:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af44:	74 5a                	je     c001afa0 <SoundPort::buffer32(int*, int)+0x78>
c001af46:	85 c0                	test   eax,eax
c001af48:	7e 56                	jle    c001afa0 <SoundPort::buffer32(int*, int)+0x78>
c001af4a:	8d 71 01             	lea    esi,[ecx+0x1]
c001af4d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af50:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001af53:	8b 37                	mov    esi,DWORD PTR [edi]
c001af55:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001af58:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af5b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af5e:	74 4c                	je     c001afac <SoundPort::buffer32(int*, int)+0x84>
c001af60:	31 f6                	xor    esi,esi
c001af62:	eb 1c                	jmp    c001af80 <SoundPort::buffer32(int*, int)+0x58>
c001af64:	8d 69 01             	lea    ebp,[ecx+0x1]
c001af67:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001af6a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001af6d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001af70:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001af74:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af77:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af7a:	74 18                	je     c001af94 <SoundPort::buffer32(int*, int)+0x6c>
c001af7c:	89 de                	mov    esi,ebx
c001af7e:	66 90                	xchg   ax,ax
c001af80:	8d 5e 01             	lea    ebx,[esi+0x1]
c001af83:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001af86:	75 dc                	jne    c001af64 <SoundPort::buffer32(int*, int)+0x3c>
c001af88:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001af8b:	90                   	nop
c001af8c:	83 c4 04             	add    esp,0x4
c001af8f:	5b                   	pop    ebx
c001af90:	5e                   	pop    esi
c001af91:	5f                   	pop    edi
c001af92:	5d                   	pop    ebp
c001af93:	c3                   	ret    
c001af94:	83 c4 04             	add    esp,0x4
c001af97:	8d 46 02             	lea    eax,[esi+0x2]
c001af9a:	5b                   	pop    ebx
c001af9b:	5e                   	pop    esi
c001af9c:	5f                   	pop    edi
c001af9d:	5d                   	pop    ebp
c001af9e:	c3                   	ret    
c001af9f:	90                   	nop
c001afa0:	83 c4 04             	add    esp,0x4
c001afa3:	31 c0                	xor    eax,eax
c001afa5:	5b                   	pop    ebx
c001afa6:	5e                   	pop    esi
c001afa7:	5f                   	pop    edi
c001afa8:	5d                   	pop    ebp
c001afa9:	c3                   	ret    
c001afaa:	66 90                	xchg   ax,ax
c001afac:	b8 01 00 00 00       	mov    eax,0x1
c001afb1:	eb d9                	jmp    c001af8c <SoundPort::buffer32(int*, int)+0x64>
c001afb3:	90                   	nop

c001afb4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001afb4:	57                   	push   edi
c001afb5:	56                   	push   esi
c001afb6:	53                   	push   ebx
c001afb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afbb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001afbf:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001afc5:	39 03                	cmp    DWORD PTR [ebx],eax
c001afc7:	74 13                	je     c001afdc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001afc9:	83 ec 0c             	sub    esp,0xc
c001afcc:	68 2c 30 02 c0       	push   0xc002302c
c001afd1:	e8 11 66 ff ff       	call   c00115e7 <KePanic(char const*)>
c001afd6:	83 c4 10             	add    esp,0x10
c001afd9:	8d 76 00             	lea    esi,[esi+0x0]
c001afdc:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001afe2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001afe5:	74 11                	je     c001aff8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001afe7:	83 ec 0c             	sub    esp,0xc
c001afea:	68 6b 30 02 c0       	push   0xc002306b
c001afef:	e8 f3 65 ff ff       	call   c00115e7 <KePanic(char const*)>
c001aff4:	83 c4 10             	add    esp,0x10
c001aff7:	90                   	nop
c001aff8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001affe:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b001:	74 11                	je     c001b014 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b003:	83 ec 0c             	sub    esp,0xc
c001b006:	68 6b 30 02 c0       	push   0xc002306b
c001b00b:	e8 d7 65 ff ff       	call   c00115e7 <KePanic(char const*)>
c001b010:	83 c4 10             	add    esp,0x10
c001b013:	90                   	nop
c001b014:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b017:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b01b:	7e 07                	jle    c001b024 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b01d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b021:	8d 76 00             	lea    esi,[esi+0x0]
c001b024:	85 f6                	test   esi,esi
c001b026:	7e 2c                	jle    c001b054 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b028:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b02c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b02f:	31 c9                	xor    ecx,ecx
c001b031:	01 d7                	add    edi,edx
c001b033:	90                   	nop
c001b034:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b037:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b03a:	85 c0                	test   eax,eax
c001b03c:	79 06                	jns    c001b044 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b03e:	05 ff 7f 00 00       	add    eax,0x7fff
c001b043:	90                   	nop
c001b044:	c1 f8 0f             	sar    eax,0xf
c001b047:	83 c1 04             	add    ecx,0x4
c001b04a:	66 01 02             	add    WORD PTR [edx],ax
c001b04d:	83 c2 02             	add    edx,0x2
c001b050:	39 d7                	cmp    edi,edx
c001b052:	75 e0                	jne    c001b034 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b054:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b057:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b05a:	83 ec 04             	sub    esp,0x4
c001b05d:	29 f0                	sub    eax,esi
c001b05f:	c1 e0 02             	shl    eax,0x2
c001b062:	50                   	push   eax
c001b063:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b066:	50                   	push   eax
c001b067:	52                   	push   edx
c001b068:	e8 63 53 fe ff       	call   c00003d0 <memmove>
c001b06d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b070:	83 c4 10             	add    esp,0x10
c001b073:	29 f0                	sub    eax,esi
c001b075:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b078:	89 f0                	mov    eax,esi
c001b07a:	5b                   	pop    ebx
c001b07b:	5e                   	pop    esi
c001b07c:	5f                   	pop    edi
c001b07d:	c3                   	ret    
c001b07e:	66 90                	xchg   ax,ax

c001b080 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b080:	57                   	push   edi
c001b081:	56                   	push   esi
c001b082:	53                   	push   ebx
c001b083:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b087:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b08b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b08f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b095:	39 06                	cmp    DWORD PTR [esi],eax
c001b097:	74 13                	je     c001b0ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b099:	83 ec 0c             	sub    esp,0xc
c001b09c:	68 4c 30 02 c0       	push   0xc002304c
c001b0a1:	e8 41 65 ff ff       	call   c00115e7 <KePanic(char const*)>
c001b0a6:	83 c4 10             	add    esp,0x10
c001b0a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0ac:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b0b2:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b0b5:	74 11                	je     c001b0c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b0b7:	83 ec 0c             	sub    esp,0xc
c001b0ba:	68 87 30 02 c0       	push   0xc0023087
c001b0bf:	e8 23 65 ff ff       	call   c00115e7 <KePanic(char const*)>
c001b0c4:	83 c4 10             	add    esp,0x10
c001b0c7:	90                   	nop
c001b0c8:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b0ce:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b0d1:	74 11                	je     c001b0e4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b0d3:	83 ec 0c             	sub    esp,0xc
c001b0d6:	68 87 30 02 c0       	push   0xc0023087
c001b0db:	e8 07 65 ff ff       	call   c00115e7 <KePanic(char const*)>
c001b0e0:	83 c4 10             	add    esp,0x10
c001b0e3:	90                   	nop
c001b0e4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b0e7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b0eb:	7e 07                	jle    c001b0f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b0ed:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b0f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b0f4:	85 ff                	test   edi,edi
c001b0f6:	7e 1c                	jle    c001b114 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b0f8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b0ff:	31 c0                	xor    eax,eax
c001b101:	8d 76 00             	lea    esi,[esi+0x0]
c001b104:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b107:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b10a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b10d:	83 c0 04             	add    eax,0x4
c001b110:	39 c1                	cmp    ecx,eax
c001b112:	75 f0                	jne    c001b104 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b114:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b117:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b11a:	83 ec 04             	sub    esp,0x4
c001b11d:	29 f8                	sub    eax,edi
c001b11f:	c1 e0 02             	shl    eax,0x2
c001b122:	50                   	push   eax
c001b123:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b126:	50                   	push   eax
c001b127:	52                   	push   edx
c001b128:	e8 a3 52 fe ff       	call   c00003d0 <memmove>
c001b12d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b130:	83 c4 10             	add    esp,0x10
c001b133:	29 f8                	sub    eax,edi
c001b135:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b138:	89 f8                	mov    eax,edi
c001b13a:	5b                   	pop    ebx
c001b13b:	5e                   	pop    esi
c001b13c:	5f                   	pop    edi
c001b13d:	c3                   	ret    

c001b13e <PCI::open(int, int, void*)>:
c001b13e:	83 ec 18             	sub    esp,0x18
c001b141:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b145:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b149:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b14f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b151:	50                   	push   eax
c001b152:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b155:	31 c0                	xor    eax,eax
c001b157:	83 c4 1c             	add    esp,0x1c
c001b15a:	c3                   	ret    
c001b15b:	90                   	nop

c001b15c <PCI::close(int, int, void*)>:
c001b15c:	31 c0                	xor    eax,eax
c001b15e:	c3                   	ret    
c001b15f:	90                   	nop

c001b160 <PCI::PCI()>:
c001b160:	83 ec 0c             	sub    esp,0xc
c001b163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b167:	83 ec 08             	sub    esp,0x8
c001b16a:	68 a3 30 02 c0       	push   0xc00230a3
c001b16f:	50                   	push   eax
c001b170:	e8 7b 11 ff ff       	call   c000c2f0 <Bus::Bus(char const*)>
c001b175:	83 c4 10             	add    esp,0x10
c001b178:	ba 4c 31 02 c0       	mov    edx,0xc002314c
c001b17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b181:	89 10                	mov    DWORD PTR [eax],edx
c001b183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b187:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b195:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b19e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1a4:	0f b6 d0             	movzx  edx,al
c001b1a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1ab:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1bc:	0f b6 d0             	movzx  edx,al
c001b1bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1c3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1d2:	8d 50 01             	lea    edx,[eax+0x1]
c001b1d5:	88 d1                	mov    cl,dl
c001b1d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b1db:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b1e1:	0f b6 d0             	movzx  edx,al
c001b1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1e8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b1ec:	83 c9 c0             	or     ecx,0xffffffc0
c001b1ef:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b1f3:	90                   	nop
c001b1f4:	83 c4 0c             	add    esp,0xc
c001b1f7:	c3                   	ret    

c001b1f8 <PCI::readBAR8(unsigned int, int)>:
c001b1f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b1fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b200:	f6 c2 01             	test   dl,0x1
c001b203:	74 07                	je     c001b20c <PCI::readBAR8(unsigned int, int)+0x14>
c001b205:	83 e2 fc             	and    edx,0xfffffffc
c001b208:	01 c2                	add    edx,eax
c001b20a:	ec                   	in     al,dx
c001b20b:	c3                   	ret    
c001b20c:	83 e2 f0             	and    edx,0xfffffff0
c001b20f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b212:	c3                   	ret    
c001b213:	90                   	nop

c001b214 <PCI::readBAR16(unsigned int, int)>:
c001b214:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b218:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b21c:	f6 c2 01             	test   dl,0x1
c001b21f:	74 08                	je     c001b229 <PCI::readBAR16(unsigned int, int)+0x15>
c001b221:	83 e2 fc             	and    edx,0xfffffffc
c001b224:	01 c2                	add    edx,eax
c001b226:	66 ed                	in     ax,dx
c001b228:	c3                   	ret    
c001b229:	83 e2 f0             	and    edx,0xfffffff0
c001b22c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b230:	c3                   	ret    
c001b231:	90                   	nop

c001b232 <PCI::readBAR32(unsigned int, int)>:
c001b232:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b236:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b23a:	f6 c2 01             	test   dl,0x1
c001b23d:	74 07                	je     c001b246 <PCI::readBAR32(unsigned int, int)+0x14>
c001b23f:	83 e2 fc             	and    edx,0xfffffffc
c001b242:	01 c2                	add    edx,eax
c001b244:	ed                   	in     eax,dx
c001b245:	c3                   	ret    
c001b246:	83 e2 f0             	and    edx,0xfffffff0
c001b249:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b24c:	c3                   	ret    
c001b24d:	90                   	nop

c001b24e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b24e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b252:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b256:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b25a:	f6 c2 01             	test   dl,0x1
c001b25d:	74 07                	je     c001b266 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b25f:	83 e2 fc             	and    edx,0xfffffffc
c001b262:	01 ca                	add    edx,ecx
c001b264:	ee                   	out    dx,al
c001b265:	c3                   	ret    
c001b266:	83 e2 f0             	and    edx,0xfffffff0
c001b269:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b26c:	c3                   	ret    
c001b26d:	90                   	nop

c001b26e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b26e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b272:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b276:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b27a:	f6 c2 01             	test   dl,0x1
c001b27d:	74 08                	je     c001b287 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b27f:	83 e2 fc             	and    edx,0xfffffffc
c001b282:	01 ca                	add    edx,ecx
c001b284:	66 ef                	out    dx,ax
c001b286:	c3                   	ret    
c001b287:	83 e2 f0             	and    edx,0xfffffff0
c001b28a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b28e:	c3                   	ret    
c001b28f:	90                   	nop

c001b290 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b290:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b294:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b298:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b29c:	f6 c2 01             	test   dl,0x1
c001b29f:	74 07                	je     c001b2a8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b2a1:	83 e2 fc             	and    edx,0xfffffffc
c001b2a4:	01 ca                	add    edx,ecx
c001b2a6:	ef                   	out    dx,eax
c001b2a7:	c3                   	ret    
c001b2a8:	83 e2 f0             	and    edx,0xfffffff0
c001b2ab:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b2ae:	c3                   	ret    
c001b2af:	90                   	nop

c001b2b0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b2b0:	55                   	push   ebp
c001b2b1:	57                   	push   edi
c001b2b2:	56                   	push   esi
c001b2b3:	53                   	push   ebx
c001b2b4:	83 ec 0c             	sub    esp,0xc
c001b2b7:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b2bc:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b2c0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b2c4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b2c8:	83 fe 07             	cmp    esi,0x7
c001b2cb:	76 10                	jbe    c001b2dd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b2cd:	83 ec 0c             	sub    esp,0xc
c001b2d0:	68 ab 30 02 c0       	push   0xc00230ab
c001b2d5:	e8 0d 63 ff ff       	call   c00115e7 <KePanic(char const*)>
c001b2da:	83 c4 10             	add    esp,0x10
c001b2dd:	0f b6 db             	movzx  ebx,bl
c001b2e0:	83 fb 0f             	cmp    ebx,0xf
c001b2e3:	76 10                	jbe    c001b2f5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b2e5:	83 ec 0c             	sub    esp,0xc
c001b2e8:	68 db 30 02 c0       	push   0xc00230db
c001b2ed:	e8 f5 62 ff ff       	call   c00115e7 <KePanic(char const*)>
c001b2f2:	83 c4 10             	add    esp,0x10
c001b2f5:	8d 04 36             	lea    eax,[esi+esi*1]
c001b2f8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b2fd:	83 c8 f0             	or     eax,0xfffffff0
c001b300:	ee                   	out    dx,al
c001b301:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b306:	89 e8                	mov    eax,ebp
c001b308:	ee                   	out    dx,al
c001b309:	83 c4 0c             	add    esp,0xc
c001b30c:	89 d8                	mov    eax,ebx
c001b30e:	89 f9                	mov    ecx,edi
c001b310:	c1 e0 08             	shl    eax,0x8
c001b313:	0f b6 d9             	movzx  ebx,cl
c001b316:	83 e3 fc             	and    ebx,0xfffffffc
c001b319:	09 d8                	or     eax,ebx
c001b31b:	5b                   	pop    ebx
c001b31c:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b321:	5e                   	pop    esi
c001b322:	5f                   	pop    edi
c001b323:	5d                   	pop    ebp
c001b324:	c3                   	ret    
c001b325:	90                   	nop

c001b326 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b326:	57                   	push   edi
c001b327:	56                   	push   esi
c001b328:	53                   	push   ebx
c001b329:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b32d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b331:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b337:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b33b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b33f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b343:	83 ff 01             	cmp    edi,0x1
c001b346:	75 3f                	jne    c001b387 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b348:	89 de                	mov    esi,ebx
c001b34a:	0f b6 c0             	movzx  eax,al
c001b34d:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b353:	c1 e0 10             	shl    eax,0x10
c001b356:	0f b6 c9             	movzx  ecx,cl
c001b359:	09 f0                	or     eax,esi
c001b35b:	c1 e1 08             	shl    ecx,0x8
c001b35e:	0f b6 d2             	movzx  edx,dl
c001b361:	09 c8                	or     eax,ecx
c001b363:	c1 e2 0b             	shl    edx,0xb
c001b366:	09 d0                	or     eax,edx
c001b368:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b36d:	0d 00 00 00 80       	or     eax,0x80000000
c001b372:	ef                   	out    dx,eax
c001b373:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b378:	ed                   	in     eax,dx
c001b379:	83 e3 02             	and    ebx,0x2
c001b37c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b383:	d3 e8                	shr    eax,cl
c001b385:	eb 44                	jmp    c001b3cb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b387:	83 ff 02             	cmp    edi,0x2
c001b38a:	75 2d                	jne    c001b3b9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b38c:	83 ec 0c             	sub    esp,0xc
c001b38f:	0f b6 c9             	movzx  ecx,cl
c001b392:	0f b6 d2             	movzx  edx,dl
c001b395:	0f b6 fb             	movzx  edi,bl
c001b398:	0f b6 c0             	movzx  eax,al
c001b39b:	57                   	push   edi
c001b39c:	51                   	push   ecx
c001b39d:	52                   	push   edx
c001b39e:	50                   	push   eax
c001b39f:	56                   	push   esi
c001b3a0:	e8 0b ff ff ff       	call   c001b2b0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3a5:	89 c2                	mov    edx,eax
c001b3a7:	ed                   	in     eax,dx
c001b3a8:	83 e3 02             	and    ebx,0x2
c001b3ab:	83 c4 20             	add    esp,0x20
c001b3ae:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b3b5:	d3 e8                	shr    eax,cl
c001b3b7:	eb 12                	jmp    c001b3cb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b3b9:	83 ec 0c             	sub    esp,0xc
c001b3bc:	68 0b 31 02 c0       	push   0xc002310b
c001b3c1:	e8 21 62 ff ff       	call   c00115e7 <KePanic(char const*)>
c001b3c6:	83 c4 10             	add    esp,0x10
c001b3c9:	31 c0                	xor    eax,eax
c001b3cb:	5b                   	pop    ebx
c001b3cc:	5e                   	pop    esi
c001b3cd:	5f                   	pop    edi
c001b3ce:	c3                   	ret    
c001b3cf:	90                   	nop

c001b3d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b3d0:	83 ec 18             	sub    esp,0x18
c001b3d3:	6a 00                	push   0x0
c001b3d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3da:	50                   	push   eax
c001b3db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3e0:	50                   	push   eax
c001b3e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3e6:	50                   	push   eax
c001b3e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3eb:	e8 36 ff ff ff       	call   c001b326 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3f0:	83 c4 2c             	add    esp,0x2c
c001b3f3:	c3                   	ret    

c001b3f4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b3f4:	83 ec 18             	sub    esp,0x18
c001b3f7:	6a 0e                	push   0xe
c001b3f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3fe:	50                   	push   eax
c001b3ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b404:	50                   	push   eax
c001b405:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b40a:	50                   	push   eax
c001b40b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b40f:	e8 12 ff ff ff       	call   c001b326 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b414:	83 c4 2c             	add    esp,0x2c
c001b417:	0f b6 c0             	movzx  eax,al
c001b41a:	c3                   	ret    
c001b41b:	90                   	nop

c001b41c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b41c:	55                   	push   ebp
c001b41d:	57                   	push   edi
c001b41e:	56                   	push   esi
c001b41f:	53                   	push   ebx
c001b420:	83 ec 18             	sub    esp,0x18
c001b423:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b428:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b42d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b432:	6a 0a                	push   0xa
c001b434:	56                   	push   esi
c001b435:	55                   	push   ebp
c001b436:	57                   	push   edi
c001b437:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b43b:	e8 e6 fe ff ff       	call   c001b326 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b440:	83 c4 14             	add    esp,0x14
c001b443:	89 c3                	mov    ebx,eax
c001b445:	6a 0a                	push   0xa
c001b447:	0f b6 db             	movzx  ebx,bl
c001b44a:	56                   	push   esi
c001b44b:	55                   	push   ebp
c001b44c:	57                   	push   edi
c001b44d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b451:	e8 d0 fe ff ff       	call   c001b326 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b456:	83 c4 2c             	add    esp,0x2c
c001b459:	25 00 ff 00 00       	and    eax,0xff00
c001b45e:	09 d8                	or     eax,ebx
c001b460:	5b                   	pop    ebx
c001b461:	5e                   	pop    esi
c001b462:	5f                   	pop    edi
c001b463:	5d                   	pop    ebp
c001b464:	c3                   	ret    
c001b465:	90                   	nop

c001b466 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b466:	83 ec 18             	sub    esp,0x18
c001b469:	6a 08                	push   0x8
c001b46b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b470:	50                   	push   eax
c001b471:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b476:	50                   	push   eax
c001b477:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b47c:	50                   	push   eax
c001b47d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b481:	e8 a0 fe ff ff       	call   c001b326 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b486:	83 c4 2c             	add    esp,0x2c
c001b489:	0f b6 c4             	movzx  eax,ah
c001b48c:	c3                   	ret    
c001b48d:	90                   	nop

c001b48e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b48e:	83 ec 18             	sub    esp,0x18
c001b491:	6a 08                	push   0x8
c001b493:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b498:	50                   	push   eax
c001b499:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b49e:	50                   	push   eax
c001b49f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4a4:	50                   	push   eax
c001b4a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4a9:	e8 78 fe ff ff       	call   c001b326 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4ae:	83 c4 2c             	add    esp,0x2c
c001b4b1:	c3                   	ret    

c001b4b2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b4b2:	83 ec 18             	sub    esp,0x18
c001b4b5:	6a 3c                	push   0x3c
c001b4b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4bc:	50                   	push   eax
c001b4bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4c2:	50                   	push   eax
c001b4c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4c8:	50                   	push   eax
c001b4c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4cd:	e8 54 fe ff ff       	call   c001b326 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4d2:	83 c4 2c             	add    esp,0x2c
c001b4d5:	c3                   	ret    

c001b4d6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b4d6:	83 ec 18             	sub    esp,0x18
c001b4d9:	6a 18                	push   0x18
c001b4db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4e0:	50                   	push   eax
c001b4e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4e6:	50                   	push   eax
c001b4e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ec:	50                   	push   eax
c001b4ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4f1:	e8 30 fe ff ff       	call   c001b326 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4f6:	83 c4 2c             	add    esp,0x2c
c001b4f9:	0f b6 c4             	movzx  eax,ah
c001b4fc:	c3                   	ret    
c001b4fd:	90                   	nop

c001b4fe <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b4fe:	55                   	push   ebp
c001b4ff:	57                   	push   edi
c001b500:	56                   	push   esi
c001b501:	53                   	push   ebx
c001b502:	83 ec 28             	sub    esp,0x28
c001b505:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b509:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b50e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b513:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b518:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b51f:	8d 43 12             	lea    eax,[ebx+0x12]
c001b522:	83 c3 10             	add    ebx,0x10
c001b525:	0f b6 c0             	movzx  eax,al
c001b528:	0f b6 db             	movzx  ebx,bl
c001b52b:	50                   	push   eax
c001b52c:	51                   	push   ecx
c001b52d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b531:	57                   	push   edi
c001b532:	55                   	push   ebp
c001b533:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b537:	e8 ea fd ff ff       	call   c001b326 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b53c:	83 c4 14             	add    esp,0x14
c001b53f:	89 c6                	mov    esi,eax
c001b541:	53                   	push   ebx
c001b542:	c1 e6 10             	shl    esi,0x10
c001b545:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b549:	51                   	push   ecx
c001b54a:	57                   	push   edi
c001b54b:	55                   	push   ebp
c001b54c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b550:	e8 d1 fd ff ff       	call   c001b326 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b555:	83 c4 3c             	add    esp,0x3c
c001b558:	0f b7 c0             	movzx  eax,ax
c001b55b:	5b                   	pop    ebx
c001b55c:	09 f0                	or     eax,esi
c001b55e:	5e                   	pop    esi
c001b55f:	5f                   	pop    edi
c001b560:	5d                   	pop    ebp
c001b561:	c3                   	ret    

c001b562 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b562:	55                   	push   ebp
c001b563:	57                   	push   edi
c001b564:	56                   	push   esi
c001b565:	53                   	push   ebx
c001b566:	83 ec 0c             	sub    esp,0xc
c001b569:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b56d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b571:	89 f5                	mov    ebp,esi
c001b573:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b57d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b581:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b585:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b589:	83 f9 01             	cmp    ecx,0x1
c001b58c:	75 5d                	jne    c001b5eb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b58e:	0f b6 c8             	movzx  ecx,al
c001b591:	0f b6 d2             	movzx  edx,dl
c001b594:	c1 e1 10             	shl    ecx,0x10
c001b597:	c1 e2 0b             	shl    edx,0xb
c001b59a:	89 f0                	mov    eax,esi
c001b59c:	25 fc 00 00 00       	and    eax,0xfc
c001b5a1:	09 c1                	or     ecx,eax
c001b5a3:	89 e8                	mov    eax,ebp
c001b5a5:	0f b6 c0             	movzx  eax,al
c001b5a8:	c1 e0 08             	shl    eax,0x8
c001b5ab:	09 c1                	or     ecx,eax
c001b5ad:	09 d1                	or     ecx,edx
c001b5af:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b5b4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b5ba:	89 c8                	mov    eax,ecx
c001b5bc:	ef                   	out    dx,eax
c001b5bd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b5c2:	ed                   	in     eax,dx
c001b5c3:	0f b7 db             	movzx  ebx,bx
c001b5c6:	83 e6 02             	and    esi,0x2
c001b5c9:	74 0a                	je     c001b5d5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b5cb:	0f b7 d0             	movzx  edx,ax
c001b5ce:	c1 e3 10             	shl    ebx,0x10
c001b5d1:	09 d3                	or     ebx,edx
c001b5d3:	eb 05                	jmp    c001b5da <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b5d5:	66 31 c0             	xor    ax,ax
c001b5d8:	09 c3                	or     ebx,eax
c001b5da:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b5df:	89 c8                	mov    eax,ecx
c001b5e1:	ef                   	out    dx,eax
c001b5e2:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b5e7:	89 d8                	mov    eax,ebx
c001b5e9:	eb 41                	jmp    c001b62c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b5eb:	83 f9 02             	cmp    ecx,0x2
c001b5ee:	75 45                	jne    c001b635 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b5f0:	83 ec 0c             	sub    esp,0xc
c001b5f3:	0f b6 d2             	movzx  edx,dl
c001b5f6:	89 f1                	mov    ecx,esi
c001b5f8:	0f b6 c0             	movzx  eax,al
c001b5fb:	0f b6 f1             	movzx  esi,cl
c001b5fe:	89 e9                	mov    ecx,ebp
c001b600:	56                   	push   esi
c001b601:	0f b6 c9             	movzx  ecx,cl
c001b604:	51                   	push   ecx
c001b605:	52                   	push   edx
c001b606:	50                   	push   eax
c001b607:	57                   	push   edi
c001b608:	e8 a3 fc ff ff       	call   c001b2b0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b60d:	89 c2                	mov    edx,eax
c001b60f:	ed                   	in     eax,dx
c001b610:	83 c4 20             	add    esp,0x20
c001b613:	0f b7 db             	movzx  ebx,bx
c001b616:	f6 c2 02             	test   dl,0x2
c001b619:	74 0c                	je     c001b627 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b61b:	0f b7 c8             	movzx  ecx,ax
c001b61e:	89 d8                	mov    eax,ebx
c001b620:	c1 e0 10             	shl    eax,0x10
c001b623:	09 c8                	or     eax,ecx
c001b625:	eb 05                	jmp    c001b62c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b627:	66 31 c0             	xor    ax,ax
c001b62a:	09 d8                	or     eax,ebx
c001b62c:	ef                   	out    dx,eax
c001b62d:	83 c4 0c             	add    esp,0xc
c001b630:	5b                   	pop    ebx
c001b631:	5e                   	pop    esi
c001b632:	5f                   	pop    edi
c001b633:	5d                   	pop    ebp
c001b634:	c3                   	ret    
c001b635:	c7 44 24 20 0b 31 02 c0 	mov    DWORD PTR [esp+0x20],0xc002310b
c001b63d:	83 c4 0c             	add    esp,0xc
c001b640:	5b                   	pop    ebx
c001b641:	5e                   	pop    esi
c001b642:	5f                   	pop    edi
c001b643:	5d                   	pop    ebp
c001b644:	e9 9e 5f ff ff       	jmp    c00115e7 <KePanic(char const*)>
c001b649:	90                   	nop

c001b64a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b64a:	55                   	push   ebp
c001b64b:	57                   	push   edi
c001b64c:	56                   	push   esi
c001b64d:	53                   	push   ebx
c001b64e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b654:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b65b:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b662:	0f 85 bd 00 00 00    	jne    c001b725 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b668:	83 ec 0c             	sub    esp,0xc
c001b66b:	68 14 01 00 00       	push   0x114
c001b670:	e8 41 c4 fe ff       	call   c0007ab6 <malloc>
c001b675:	83 c4 0c             	add    esp,0xc
c001b678:	89 c3                	mov    ebx,eax
c001b67a:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b680:	68 11 31 02 c0       	push   0xc0023111
c001b685:	50                   	push   eax
c001b686:	e8 8b 04 ff ff       	call   c000bb16 <File::File(char const*, Process*)>
c001b68b:	83 c4 10             	add    esp,0x10
c001b68e:	85 db                	test   ebx,ebx
c001b690:	0f 84 67 02 00 00    	je     c001b8fd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b696:	56                   	push   esi
c001b697:	56                   	push   esi
c001b698:	6a 01                	push   0x1
c001b69a:	53                   	push   ebx
c001b69b:	e8 94 04 ff ff       	call   c000bb34 <File::open(FileOpenMode)>
c001b6a0:	83 c4 10             	add    esp,0x10
c001b6a3:	85 c0                	test   eax,eax
c001b6a5:	0f 85 52 02 00 00    	jne    c001b8fd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b6ab:	52                   	push   edx
c001b6ac:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b6b0:	50                   	push   eax
c001b6b1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b6b5:	50                   	push   eax
c001b6b6:	53                   	push   ebx
c001b6b7:	e8 7a 07 ff ff       	call   c000be36 <File::stat(unsigned long long*, bool*)>
c001b6bc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b6c0:	40                   	inc    eax
c001b6c1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6c4:	e8 ed c3 fe ff       	call   c0007ab6 <malloc>
c001b6c9:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b6cd:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b6d2:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b6d6:	59                   	pop    ecx
c001b6d7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b6d9:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b6dd:	51                   	push   ecx
c001b6de:	50                   	push   eax
c001b6df:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b6e3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b6e7:	53                   	push   ebx
c001b6e8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b6eb:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b6ef:	83 c4 20             	add    esp,0x20
c001b6f2:	89 c8                	mov    eax,ecx
c001b6f4:	99                   	cdq    
c001b6f5:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b6f9:	0f 85 fe 01 00 00    	jne    c001b8fd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b6ff:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b703:	0f 85 f4 01 00 00    	jne    c001b8fd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b709:	83 ec 0c             	sub    esp,0xc
c001b70c:	53                   	push   ebx
c001b70d:	e8 80 04 ff ff       	call   c000bb92 <File::close()>
c001b712:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b716:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b71d:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b722:	83 c4 10             	add    esp,0x10
c001b725:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c001b72a:	8b 1d a8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0a8
c001b730:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b734:	31 f6                	xor    esi,esi
c001b736:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b73e:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b745:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b74a:	31 c9                	xor    ecx,ecx
c001b74c:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b754:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b759:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b761:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b765:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b76d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b771:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b775:	0f 8e 82 01 00 00    	jle    c001b8fd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b77b:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b77e:	d4 40                	aam    0x40
c001b780:	d5 39                	aad    0x39
c001b782:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b786:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b78a:	d4 40                	aam    0x40
c001b78c:	d5 39                	aad    0x39
c001b78e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b792:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b796:	d4 40                	aam    0x40
c001b798:	d5 39                	aad    0x39
c001b79a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b79e:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b7a2:	d4 40                	aam    0x40
c001b7a4:	d5 39                	aad    0x39
c001b7a6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b7aa:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b7ae:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b7b2:	3c 56                	cmp    al,0x56
c001b7b4:	74 43                	je     c001b7f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b7b6:	d4 40                	aam    0x40
c001b7b8:	d5 39                	aad    0x39
c001b7ba:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b7bd:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b7c1:	0f b6 c9             	movzx  ecx,cl
c001b7c4:	c1 e1 04             	shl    ecx,0x4
c001b7c7:	d4 40                	aam    0x40
c001b7c9:	d5 39                	aad    0x39
c001b7cb:	83 e8 30             	sub    eax,0x30
c001b7ce:	0f b6 c0             	movzx  eax,al
c001b7d1:	09 c1                	or     ecx,eax
c001b7d3:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b7d7:	c1 e1 04             	shl    ecx,0x4
c001b7da:	d4 40                	aam    0x40
c001b7dc:	d5 39                	aad    0x39
c001b7de:	83 e8 30             	sub    eax,0x30
c001b7e1:	0f b6 c0             	movzx  eax,al
c001b7e4:	09 c1                	or     ecx,eax
c001b7e6:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b7ea:	c1 e1 04             	shl    ecx,0x4
c001b7ed:	d4 40                	aam    0x40
c001b7ef:	d5 39                	aad    0x39
c001b7f1:	83 e8 30             	sub    eax,0x30
c001b7f4:	0f b6 c0             	movzx  eax,al
c001b7f7:	09 c1                	or     ecx,eax
c001b7f9:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b7fd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b801:	3c 58                	cmp    al,0x58
c001b803:	74 47                	je     c001b84c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b805:	d4 40                	aam    0x40
c001b807:	d5 39                	aad    0x39
c001b809:	8d 50 d0             	lea    edx,[eax-0x30]
c001b80c:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b810:	0f b6 d2             	movzx  edx,dl
c001b813:	c1 e2 04             	shl    edx,0x4
c001b816:	d4 40                	aam    0x40
c001b818:	d5 39                	aad    0x39
c001b81a:	83 e8 30             	sub    eax,0x30
c001b81d:	0f b6 c0             	movzx  eax,al
c001b820:	09 c2                	or     edx,eax
c001b822:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b826:	c1 e2 04             	shl    edx,0x4
c001b829:	d4 40                	aam    0x40
c001b82b:	d5 39                	aad    0x39
c001b82d:	83 e8 30             	sub    eax,0x30
c001b830:	0f b6 c0             	movzx  eax,al
c001b833:	09 c2                	or     edx,eax
c001b835:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b839:	c1 e2 04             	shl    edx,0x4
c001b83c:	d4 40                	aam    0x40
c001b83e:	d5 39                	aad    0x39
c001b840:	83 e8 30             	sub    eax,0x30
c001b843:	0f b6 c0             	movzx  eax,al
c001b846:	09 c2                	or     edx,eax
c001b848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b84c:	83 c6 10             	add    esi,0x10
c001b84f:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b853:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b857:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b85b:	83 fa 0a             	cmp    edx,0xa
c001b85e:	74 0b                	je     c001b86b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b860:	47                   	inc    edi
c001b861:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b865:	75 19                	jne    c001b880 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b867:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b86b:	31 c0                	xor    eax,eax
c001b86d:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b872:	0f 94 c0             	sete   al
c001b875:	01 c6                	add    esi,eax
c001b877:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b87c:	75 0b                	jne    c001b889 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b87e:	eb 14                	jmp    c001b894 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b880:	46                   	inc    esi
c001b881:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b884:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b887:	eb ca                	jmp    c001b853 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b889:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b88e:	0f 85 dd fe ff ff    	jne    c001b771 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b894:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b899:	74 10                	je     c001b8ab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b89b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b8a0:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b8a5:	0f 85 c6 fe ff ff    	jne    c001b771 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b8ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8af:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b8b3:	83 e8 30             	sub    eax,0x30
c001b8b6:	83 ef 30             	sub    edi,0x30
c001b8b9:	c1 e0 04             	shl    eax,0x4
c001b8bc:	09 f8                	or     eax,edi
c001b8be:	0f b6 c0             	movzx  eax,al
c001b8c1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b8c5:	0f 85 a6 fe ff ff    	jne    c001b771 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b8cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8cf:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b8d3:	83 e8 30             	sub    eax,0x30
c001b8d6:	83 ef 30             	sub    edi,0x30
c001b8d9:	c1 e0 04             	shl    eax,0x4
c001b8dc:	09 f8                	or     eax,edi
c001b8de:	0f b6 c0             	movzx  eax,al
c001b8e1:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b8e5:	0f 85 86 fe ff ff    	jne    c001b771 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b8eb:	50                   	push   eax
c001b8ec:	50                   	push   eax
c001b8ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b8f1:	50                   	push   eax
c001b8f2:	55                   	push   ebp
c001b8f3:	e8 48 4d fe ff       	call   c0000640 <strcpy>
c001b8f8:	83 c4 10             	add    esp,0x10
c001b8fb:	eb 06                	jmp    c001b903 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b8fd:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b901:	31 ed                	xor    ebp,ebp
c001b903:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b909:	89 e8                	mov    eax,ebp
c001b90b:	5b                   	pop    ebx
c001b90c:	5e                   	pop    esi
c001b90d:	5f                   	pop    edi
c001b90e:	5d                   	pop    ebp
c001b90f:	c3                   	ret    

c001b910 <PCI::checkBus(unsigned char)>:
c001b910:	56                   	push   esi
c001b911:	53                   	push   ebx
c001b912:	31 db                	xor    ebx,ebx
c001b914:	51                   	push   ecx
c001b915:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b91a:	52                   	push   edx
c001b91b:	53                   	push   ebx
c001b91c:	43                   	inc    ebx
c001b91d:	56                   	push   esi
c001b91e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b922:	e8 03 03 00 00       	call   c001bc2a <PCI::checkDevice(unsigned char, unsigned char)>
c001b927:	83 c4 10             	add    esp,0x10
c001b92a:	83 fb 20             	cmp    ebx,0x20
c001b92d:	75 eb                	jne    c001b91a <PCI::checkBus(unsigned char)+0xa>
c001b92f:	58                   	pop    eax
c001b930:	5b                   	pop    ebx
c001b931:	5e                   	pop    esi
c001b932:	c3                   	ret    
c001b933:	90                   	nop

c001b934 <PCI::foundDevice(PCIDeviceInfo)>:
c001b934:	55                   	push   ebp
c001b935:	57                   	push   edi
c001b936:	56                   	push   esi
c001b937:	53                   	push   ebx
c001b938:	83 ec 1c             	sub    esp,0x1c
c001b93b:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b940:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b944:	3d ff ff 00 00       	cmp    eax,0xffff
c001b949:	0f 84 57 01 00 00    	je     c001baa6 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b94f:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b954:	66 3d 06 04          	cmp    ax,0x406
c001b958:	75 2c                	jne    c001b986 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b95a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b95f:	50                   	push   eax
c001b960:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b965:	50                   	push   eax
c001b966:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b96b:	50                   	push   eax
c001b96c:	53                   	push   ebx
c001b96d:	e8 64 fb ff ff       	call   c001b4d6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b972:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b976:	0f b6 c0             	movzx  eax,al
c001b979:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b97d:	83 c4 2c             	add    esp,0x2c
c001b980:	5b                   	pop    ebx
c001b981:	5e                   	pop    esi
c001b982:	5f                   	pop    edi
c001b983:	5d                   	pop    ebp
c001b984:	eb 8a                	jmp    c001b910 <PCI::checkBus(unsigned char)>
c001b986:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b98a:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b990:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b994:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b998:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b99d:	85 d2                	test   edx,edx
c001b99f:	74 36                	je     c001b9d7 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b9a1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b9a4:	85 c9                	test   ecx,ecx
c001b9a6:	74 2b                	je     c001b9d3 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b9a8:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b9ae:	31 ee                	xor    esi,ebp
c001b9b0:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b9b6:	75 1b                	jne    c001b9d3 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b9b8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b9bc:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b9c2:	75 0f                	jne    c001b9d3 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b9c4:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b9cb:	39 f9                	cmp    ecx,edi
c001b9cd:	0f 84 d3 00 00 00    	je     c001baa6 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b9d3:	8b 12                	mov    edx,DWORD PTR [edx]
c001b9d5:	eb c6                	jmp    c001b99d <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b9d7:	3d 01 06 00 00       	cmp    eax,0x601
c001b9dc:	75 19                	jne    c001b9f7 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b9de:	83 ec 0c             	sub    esp,0xc
c001b9e1:	68 64 01 00 00       	push   0x164
c001b9e6:	e8 cb c0 fe ff       	call   c0007ab6 <malloc>
c001b9eb:	89 c5                	mov    ebp,eax
c001b9ed:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9f0:	e8 a1 0e 00 00       	call   c001c896 <SATABus::SATABus()>
c001b9f5:	eb 1e                	jmp    c001ba15 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b9f7:	3d 01 01 00 00       	cmp    eax,0x101
c001b9fc:	75 62                	jne    c001ba60 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b9fe:	83 ec 0c             	sub    esp,0xc
c001ba01:	68 70 02 00 00       	push   0x270
c001ba06:	e8 ab c0 fe ff       	call   c0007ab6 <malloc>
c001ba0b:	89 c5                	mov    ebp,eax
c001ba0d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba10:	e8 e5 02 00 00       	call   c001bcfa <IDE::IDE()>
c001ba15:	5f                   	pop    edi
c001ba16:	58                   	pop    eax
c001ba17:	55                   	push   ebp
c001ba18:	53                   	push   ebx
c001ba19:	e8 70 0f ff ff       	call   c000c98e <Device::addChild(Device*)>
c001ba1e:	83 ec 1c             	sub    esp,0x1c
c001ba21:	b9 09 00 00 00       	mov    ecx,0x9
c001ba26:	fc                   	cld    
c001ba27:	89 e7                	mov    edi,esp
c001ba29:	8d 74 24 60          	lea    esi,[esp+0x60]
c001ba2d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba2f:	55                   	push   ebp
c001ba30:	e8 9f 0e ff ff       	call   c000c8d4 <Device::preOpenPCI(PCIDeviceInfo)>
c001ba35:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ba38:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001ba3c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001ba44:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001ba4c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001ba54:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ba57:	83 c4 4c             	add    esp,0x4c
c001ba5a:	5b                   	pop    ebx
c001ba5b:	5e                   	pop    esi
c001ba5c:	5f                   	pop    edi
c001ba5d:	5d                   	pop    ebp
c001ba5e:	ff e0                	jmp    eax
c001ba60:	83 ec 0c             	sub    esp,0xc
c001ba63:	68 58 01 00 00       	push   0x158
c001ba68:	e8 49 c0 fe ff       	call   c0007ab6 <malloc>
c001ba6d:	89 c5                	mov    ebp,eax
c001ba6f:	58                   	pop    eax
c001ba70:	5a                   	pop    edx
c001ba71:	68 2a 31 02 c0       	push   0xc002312a
c001ba76:	55                   	push   ebp
c001ba77:	e8 b0 11 ff ff       	call   c000cc2c <DriverlessDevice::DriverlessDevice(char const*)>
c001ba7c:	59                   	pop    ecx
c001ba7d:	5e                   	pop    esi
c001ba7e:	55                   	push   ebp
c001ba7f:	53                   	push   ebx
c001ba80:	e8 09 0f ff ff       	call   c000c98e <Device::addChild(Device*)>
c001ba85:	83 c4 10             	add    esp,0x10
c001ba88:	b9 09 00 00 00       	mov    ecx,0x9
c001ba8d:	fc                   	cld    
c001ba8e:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001ba92:	89 fe                	mov    esi,edi
c001ba94:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba96:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001ba9a:	83 c4 1c             	add    esp,0x1c
c001ba9d:	5b                   	pop    ebx
c001ba9e:	5e                   	pop    esi
c001ba9f:	5f                   	pop    edi
c001baa0:	5d                   	pop    ebp
c001baa1:	e9 2e 0e ff ff       	jmp    c000c8d4 <Device::preOpenPCI(PCIDeviceInfo)>
c001baa6:	83 c4 1c             	add    esp,0x1c
c001baa9:	5b                   	pop    ebx
c001baaa:	5e                   	pop    esi
c001baab:	5f                   	pop    edi
c001baac:	5d                   	pop    ebp
c001baad:	c3                   	ret    

c001baae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001baae:	55                   	push   ebp
c001baaf:	57                   	push   edi
c001bab0:	56                   	push   esi
c001bab1:	53                   	push   ebx
c001bab2:	83 ec 68             	sub    esp,0x68
c001bab5:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bab9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bac0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bac4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bacb:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bad0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bad4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001badb:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bae0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bae4:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001bae9:	6a 0c                	push   0xc
c001baeb:	57                   	push   edi
c001baec:	53                   	push   ebx
c001baed:	56                   	push   esi
c001baee:	55                   	push   ebp
c001baef:	e8 32 f8 ff ff       	call   c001b326 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001baf4:	83 c4 20             	add    esp,0x20
c001baf7:	57                   	push   edi
c001baf8:	53                   	push   ebx
c001baf9:	56                   	push   esi
c001bafa:	55                   	push   ebp
c001bafb:	e8 1c f9 ff ff       	call   c001b41c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bb00:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bb05:	57                   	push   edi
c001bb06:	53                   	push   ebx
c001bb07:	56                   	push   esi
c001bb08:	55                   	push   ebp
c001bb09:	e8 a4 f9 ff ff       	call   c001b4b2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bb0e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bb12:	83 c4 14             	add    esp,0x14
c001bb15:	6a 3c                	push   0x3c
c001bb17:	57                   	push   edi
c001bb18:	53                   	push   ebx
c001bb19:	56                   	push   esi
c001bb1a:	55                   	push   ebp
c001bb1b:	e8 06 f8 ff ff       	call   c001b326 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb20:	0f b6 c4             	movzx  eax,ah
c001bb23:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bb27:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bb2b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bb2f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bb34:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bb3a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bb40:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb44:	83 c4 20             	add    esp,0x20
c001bb47:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bb4c:	74 30                	je     c001bb7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb4e:	31 c0                	xor    eax,eax
c001bb50:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bb54:	7e 28                	jle    c001bb7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb56:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bb5e:	39 cb                	cmp    ebx,ecx
c001bb60:	75 19                	jne    c001bb7b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb62:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bb6a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bb6e:	75 0b                	jne    c001bb7b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb70:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bb77:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bb7b:	40                   	inc    eax
c001bb7c:	eb d2                	jmp    c001bb50 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bb7e:	31 d2                	xor    edx,edx
c001bb80:	83 ec 0c             	sub    esp,0xc
c001bb83:	57                   	push   edi
c001bb84:	53                   	push   ebx
c001bb85:	56                   	push   esi
c001bb86:	52                   	push   edx
c001bb87:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bb8b:	55                   	push   ebp
c001bb8c:	e8 6d f9 ff ff       	call   c001b4fe <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bb95:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bb99:	42                   	inc    edx
c001bb9a:	83 c4 20             	add    esp,0x20
c001bb9d:	83 fa 06             	cmp    edx,0x6
c001bba0:	75 de                	jne    c001bb80 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bba2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bba6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbaa:	c1 e2 08             	shl    edx,0x8
c001bbad:	83 ec 0c             	sub    esp,0xc
c001bbb0:	0f b6 c4             	movzx  eax,ah
c001bbb3:	09 d0                	or     eax,edx
c001bbb5:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bbba:	6a 02                	push   0x2
c001bbbc:	57                   	push   edi
c001bbbd:	53                   	push   ebx
c001bbbe:	56                   	push   esi
c001bbbf:	55                   	push   ebp
c001bbc0:	e8 61 f7 ff ff       	call   c001b326 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbc5:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bbca:	83 c4 20             	add    esp,0x20
c001bbcd:	57                   	push   edi
c001bbce:	53                   	push   ebx
c001bbcf:	56                   	push   esi
c001bbd0:	55                   	push   ebp
c001bbd1:	e8 90 f8 ff ff       	call   c001b466 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bbd6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bbda:	57                   	push   edi
c001bbdb:	53                   	push   ebx
c001bbdc:	56                   	push   esi
c001bbdd:	55                   	push   ebp
c001bbde:	e8 ed f7 ff ff       	call   c001b3d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bbe3:	b9 09 00 00 00       	mov    ecx,0x9
c001bbe8:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bbed:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bbf1:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bbf5:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bbf9:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bbfd:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bc01:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bc05:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bc09:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bc0d:	83 ec 0c             	sub    esp,0xc
c001bc10:	fc                   	cld    
c001bc11:	89 e7                	mov    edi,esp
c001bc13:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bc17:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bc19:	55                   	push   ebp
c001bc1a:	e8 15 fd ff ff       	call   c001b934 <PCI::foundDevice(PCIDeviceInfo)>
c001bc1f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bc25:	5b                   	pop    ebx
c001bc26:	5e                   	pop    esi
c001bc27:	5f                   	pop    edi
c001bc28:	5d                   	pop    ebp
c001bc29:	c3                   	ret    

c001bc2a <PCI::checkDevice(unsigned char, unsigned char)>:
c001bc2a:	55                   	push   ebp
c001bc2b:	57                   	push   edi
c001bc2c:	56                   	push   esi
c001bc2d:	53                   	push   ebx
c001bc2e:	83 ec 0c             	sub    esp,0xc
c001bc31:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bc35:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bc3a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bc3f:	6a 00                	push   0x0
c001bc41:	56                   	push   esi
c001bc42:	57                   	push   edi
c001bc43:	55                   	push   ebp
c001bc44:	e8 87 f7 ff ff       	call   c001b3d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc49:	6a 00                	push   0x0
c001bc4b:	56                   	push   esi
c001bc4c:	57                   	push   edi
c001bc4d:	55                   	push   ebp
c001bc4e:	e8 5b fe ff ff       	call   c001baae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc53:	83 c4 20             	add    esp,0x20
c001bc56:	6a 00                	push   0x0
c001bc58:	56                   	push   esi
c001bc59:	57                   	push   edi
c001bc5a:	55                   	push   ebp
c001bc5b:	e8 94 f7 ff ff       	call   c001b3f4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bc60:	83 c4 10             	add    esp,0x10
c001bc63:	a8 80                	test   al,0x80
c001bc65:	74 2d                	je     c001bc94 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bc67:	bb 01 00 00 00       	mov    ebx,0x1
c001bc6c:	53                   	push   ebx
c001bc6d:	56                   	push   esi
c001bc6e:	57                   	push   edi
c001bc6f:	55                   	push   ebp
c001bc70:	e8 5b f7 ff ff       	call   c001b3d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc75:	83 c4 10             	add    esp,0x10
c001bc78:	0f b7 c0             	movzx  eax,ax
c001bc7b:	3d ff ff 00 00       	cmp    eax,0xffff
c001bc80:	74 0c                	je     c001bc8e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bc82:	53                   	push   ebx
c001bc83:	56                   	push   esi
c001bc84:	57                   	push   edi
c001bc85:	55                   	push   ebp
c001bc86:	e8 23 fe ff ff       	call   c001baae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc8b:	83 c4 10             	add    esp,0x10
c001bc8e:	43                   	inc    ebx
c001bc8f:	83 fb 08             	cmp    ebx,0x8
c001bc92:	75 d8                	jne    c001bc6c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bc94:	83 c4 0c             	add    esp,0xc
c001bc97:	5b                   	pop    ebx
c001bc98:	5e                   	pop    esi
c001bc99:	5f                   	pop    edi
c001bc9a:	5d                   	pop    ebp
c001bc9b:	c3                   	ret    

c001bc9c <PCI::detect()>:
c001bc9c:	56                   	push   esi
c001bc9d:	53                   	push   ebx
c001bc9e:	53                   	push   ebx
c001bc9f:	31 db                	xor    ebx,ebx
c001bca1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bca5:	6a 00                	push   0x0
c001bca7:	6a 00                	push   0x0
c001bca9:	6a 00                	push   0x0
c001bcab:	56                   	push   esi
c001bcac:	e8 43 f7 ff ff       	call   c001b3f4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bcb1:	83 c4 10             	add    esp,0x10
c001bcb4:	a8 80                	test   al,0x80
c001bcb6:	75 21                	jne    c001bcd9 <PCI::detect()+0x3d>
c001bcb8:	51                   	push   ecx
c001bcb9:	51                   	push   ecx
c001bcba:	6a 00                	push   0x0
c001bcbc:	56                   	push   esi
c001bcbd:	e8 4e fc ff ff       	call   c001b910 <PCI::checkBus(unsigned char)>
c001bcc2:	83 c4 10             	add    esp,0x10
c001bcc5:	eb 2a                	jmp    c001bcf1 <PCI::detect()+0x55>
c001bcc7:	52                   	push   edx
c001bcc8:	52                   	push   edx
c001bcc9:	53                   	push   ebx
c001bcca:	43                   	inc    ebx
c001bccb:	56                   	push   esi
c001bccc:	e8 3f fc ff ff       	call   c001b910 <PCI::checkBus(unsigned char)>
c001bcd1:	83 c4 10             	add    esp,0x10
c001bcd4:	83 fb 08             	cmp    ebx,0x8
c001bcd7:	74 18                	je     c001bcf1 <PCI::detect()+0x55>
c001bcd9:	53                   	push   ebx
c001bcda:	6a 00                	push   0x0
c001bcdc:	6a 00                	push   0x0
c001bcde:	56                   	push   esi
c001bcdf:	e8 ec f6 ff ff       	call   c001b3d0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bce4:	83 c4 10             	add    esp,0x10
c001bce7:	0f b7 c0             	movzx  eax,ax
c001bcea:	3d ff ff 00 00       	cmp    eax,0xffff
c001bcef:	74 d6                	je     c001bcc7 <PCI::detect()+0x2b>
c001bcf1:	58                   	pop    eax
c001bcf2:	5b                   	pop    ebx
c001bcf3:	5e                   	pop    esi
c001bcf4:	c3                   	ret    
c001bcf5:	90                   	nop

c001bcf6 <IDE::close(int, int, void*)>:
c001bcf6:	83 c8 ff             	or     eax,0xffffffff
c001bcf9:	c3                   	ret    

c001bcfa <IDE::IDE()>:
c001bcfa:	83 ec 0c             	sub    esp,0xc
c001bcfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd01:	83 ec 08             	sub    esp,0x8
c001bd04:	68 70 31 02 c0       	push   0xc0023170
c001bd09:	50                   	push   eax
c001bd0a:	e8 c1 0f ff ff       	call   c000ccd0 <HardDiskController::HardDiskController(char const*)>
c001bd0f:	83 c4 10             	add    esp,0x10
c001bd12:	ba 00 32 02 c0       	mov    edx,0xc0023200
c001bd17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd1b:	89 10                	mov    DWORD PTR [eax],edx
c001bd1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd21:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bd28:	90                   	nop
c001bd29:	83 c4 0c             	add    esp,0xc
c001bd2c:	c3                   	ret    
c001bd2d:	90                   	nop

c001bd2e <IDE::prepareInterrupt(unsigned char)>:
c001bd2e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd37:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bd3f:	c3                   	ret    

c001bd40 <selectDrive(unsigned char, unsigned char)>:
c001bd40:	c3                   	ret    
c001bd41:	90                   	nop

c001bd42 <IDE::getBase(unsigned char)>:
c001bd42:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bd47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd4b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bd53:	c3                   	ret    

c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bd54:	55                   	push   ebp
c001bd55:	57                   	push   edi
c001bd56:	56                   	push   esi
c001bd57:	53                   	push   ebx
c001bd58:	83 ec 1c             	sub    esp,0x1c
c001bd5b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bd5f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd63:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bd66:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bd6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd6e:	80 f9 03             	cmp    cl,0x3
c001bd71:	77 4f                	ja     c001bdc2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bd73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd77:	0f b6 fa             	movzx  edi,dl
c001bd7a:	0f b6 db             	movzx  ebx,bl
c001bd7d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bd80:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bd85:	80 ca 80             	or     dl,0x80
c001bd88:	52                   	push   edx
c001bd89:	6a 0c                	push   0xc
c001bd8b:	57                   	push   edi
c001bd8c:	56                   	push   esi
c001bd8d:	e8 c2 ff ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd92:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001bd97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd9b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bd9f:	ee                   	out    dx,al
c001bda0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bda5:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001bda9:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bdad:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bdb1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bdb9:	83 c4 2c             	add    esp,0x2c
c001bdbc:	5b                   	pop    ebx
c001bdbd:	5e                   	pop    esi
c001bdbe:	5f                   	pop    edi
c001bdbf:	5d                   	pop    ebp
c001bdc0:	eb 92                	jmp    c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdc2:	0f b6 cb             	movzx  ecx,bl
c001bdc5:	83 f9 07             	cmp    ecx,0x7
c001bdc8:	77 12                	ja     c001bddc <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bdca:	0f b6 d2             	movzx  edx,dl
c001bdcd:	0f b6 db             	movzx  ebx,bl
c001bdd0:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001bdd8:	01 da                	add    edx,ebx
c001bdda:	eb 2f                	jmp    c001be0b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bddc:	83 f9 0d             	cmp    ecx,0xd
c001bddf:	77 13                	ja     c001bdf4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bde1:	0f b6 d2             	movzx  edx,dl
c001bde4:	0f b6 db             	movzx  ebx,bl
c001bde7:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001bdee:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bdf2:	eb 17                	jmp    c001be0b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bdf4:	83 f9 15             	cmp    ecx,0x15
c001bdf7:	77 13                	ja     c001be0c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bdf9:	0f b6 d2             	movzx  edx,dl
c001bdfc:	0f b6 db             	movzx  ebx,bl
c001bdff:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001be07:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001be0b:	ee                   	out    dx,al
c001be0c:	83 c4 1c             	add    esp,0x1c
c001be0f:	5b                   	pop    ebx
c001be10:	5e                   	pop    esi
c001be11:	5f                   	pop    edi
c001be12:	5d                   	pop    ebp
c001be13:	c3                   	ret    

c001be14 <IDE::read(unsigned char, unsigned char)>:
c001be14:	55                   	push   ebp
c001be15:	57                   	push   edi
c001be16:	56                   	push   esi
c001be17:	53                   	push   ebx
c001be18:	83 ec 1c             	sub    esp,0x1c
c001be1b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001be1f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be23:	8d 43 f8             	lea    eax,[ebx-0x8]
c001be26:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001be2a:	3c 03                	cmp    al,0x3
c001be2c:	77 40                	ja     c001be6e <IDE::read(unsigned char, unsigned char)+0x5a>
c001be2e:	0f b6 f9             	movzx  edi,cl
c001be31:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001be34:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be39:	0c 80                	or     al,0x80
c001be3b:	50                   	push   eax
c001be3c:	6a 0c                	push   0xc
c001be3e:	57                   	push   edi
c001be3f:	56                   	push   esi
c001be40:	e8 0f ff ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be45:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001be4a:	0f b6 d3             	movzx  edx,bl
c001be4d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be51:	ec                   	in     al,dx
c001be52:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001be56:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001be5b:	52                   	push   edx
c001be5c:	6a 0c                	push   0xc
c001be5e:	57                   	push   edi
c001be5f:	56                   	push   esi
c001be60:	e8 ef fe ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be65:	83 c4 20             	add    esp,0x20
c001be68:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001be6c:	eb 4c                	jmp    c001beba <IDE::read(unsigned char, unsigned char)+0xa6>
c001be6e:	0f b6 d3             	movzx  edx,bl
c001be71:	83 fa 07             	cmp    edx,0x7
c001be74:	77 12                	ja     c001be88 <IDE::read(unsigned char, unsigned char)+0x74>
c001be76:	0f b6 c9             	movzx  ecx,cl
c001be79:	0f b6 d3             	movzx  edx,bl
c001be7c:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001be84:	01 c2                	add    edx,eax
c001be86:	eb 31                	jmp    c001beb9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001be88:	83 fa 0d             	cmp    edx,0xd
c001be8b:	77 13                	ja     c001bea0 <IDE::read(unsigned char, unsigned char)+0x8c>
c001be8d:	0f b6 c9             	movzx  ecx,cl
c001be90:	0f b6 d3             	movzx  edx,bl
c001be93:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001be9a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001be9e:	eb 19                	jmp    c001beb9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bea0:	31 c0                	xor    eax,eax
c001bea2:	83 fa 15             	cmp    edx,0x15
c001bea5:	77 13                	ja     c001beba <IDE::read(unsigned char, unsigned char)+0xa6>
c001bea7:	0f b6 c9             	movzx  ecx,cl
c001beaa:	0f b6 d3             	movzx  edx,bl
c001bead:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001beb5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001beb9:	ec                   	in     al,dx
c001beba:	83 c4 1c             	add    esp,0x1c
c001bebd:	5b                   	pop    ebx
c001bebe:	5e                   	pop    esi
c001bebf:	5f                   	pop    edi
c001bec0:	5d                   	pop    ebp
c001bec1:	c3                   	ret    

c001bec2 <IDE::waitInterrupt(unsigned char)>:
c001bec2:	55                   	push   ebp
c001bec3:	57                   	push   edi
c001bec4:	56                   	push   esi
c001bec5:	53                   	push   ebx
c001bec6:	31 db                	xor    ebx,ebx
c001bec8:	83 ec 0c             	sub    esp,0xc
c001becb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001becf:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bed4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bedc:	89 e8                	mov    eax,ebp
c001bede:	84 c0                	test   al,al
c001bee0:	75 30                	jne    c001bf12 <IDE::waitInterrupt(unsigned char)+0x50>
c001bee2:	50                   	push   eax
c001bee3:	6a 0c                	push   0xc
c001bee5:	56                   	push   esi
c001bee6:	57                   	push   edi
c001bee7:	e8 28 ff ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001beec:	83 c4 10             	add    esp,0x10
c001beef:	a8 01                	test   al,0x1
c001bef1:	75 27                	jne    c001bf1a <IDE::waitInterrupt(unsigned char)+0x58>
c001bef3:	f6 c3 04             	test   bl,0x4
c001bef6:	75 12                	jne    c001bf0a <IDE::waitInterrupt(unsigned char)+0x48>
c001bef8:	83 fb 32             	cmp    ebx,0x32
c001befb:	7e 0d                	jle    c001bf0a <IDE::waitInterrupt(unsigned char)+0x48>
c001befd:	83 ec 0c             	sub    esp,0xc
c001bf00:	6a 64                	push   0x64
c001bf02:	e8 b1 a4 ff ff       	call   c00163b8 <milliTenthSleep(unsigned int)>
c001bf07:	83 c4 10             	add    esp,0x10
c001bf0a:	83 fb 3c             	cmp    ebx,0x3c
c001bf0d:	74 0b                	je     c001bf1a <IDE::waitInterrupt(unsigned char)+0x58>
c001bf0f:	43                   	inc    ebx
c001bf10:	eb c2                	jmp    c001bed4 <IDE::waitInterrupt(unsigned char)+0x12>
c001bf12:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bf1a:	83 c4 0c             	add    esp,0xc
c001bf1d:	89 e8                	mov    eax,ebp
c001bf1f:	5b                   	pop    ebx
c001bf20:	5e                   	pop    esi
c001bf21:	5f                   	pop    edi
c001bf22:	5d                   	pop    ebp
c001bf23:	c3                   	ret    

c001bf24 <ideChannel0IRQHandler(regs*, void*)>:
c001bf24:	83 ec 10             	sub    esp,0x10
c001bf27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf2b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bf32:	6a 07                	push   0x7
c001bf34:	6a 00                	push   0x0
c001bf36:	50                   	push   eax
c001bf37:	e8 d8 fe ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001bf3c:	83 c4 1c             	add    esp,0x1c
c001bf3f:	c3                   	ret    

c001bf40 <ideChannel1IRQHandler(regs*, void*)>:
c001bf40:	83 ec 10             	sub    esp,0x10
c001bf43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf47:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bf4e:	6a 07                	push   0x7
c001bf50:	6a 01                	push   0x1
c001bf52:	50                   	push   eax
c001bf53:	e8 bc fe ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001bf58:	83 c4 1c             	add    esp,0x1c
c001bf5b:	c3                   	ret    

c001bf5c <IDE::enableIRQs(unsigned char, bool)>:
c001bf5c:	57                   	push   edi
c001bf5d:	b8 02 00 00 00       	mov    eax,0x2
c001bf62:	56                   	push   esi
c001bf63:	53                   	push   ebx
c001bf64:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bf6c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bf71:	74 02                	je     c001bf75 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bf73:	31 c0                	xor    eax,eax
c001bf75:	0f b6 db             	movzx  ebx,bl
c001bf78:	bf 04 00 00 00       	mov    edi,0x4
c001bf7d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bf84:	50                   	push   eax
c001bf85:	6a 0c                	push   0xc
c001bf87:	53                   	push   ebx
c001bf88:	56                   	push   esi
c001bf89:	e8 c6 fd ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf8e:	83 c4 10             	add    esp,0x10
c001bf91:	50                   	push   eax
c001bf92:	6a 0c                	push   0xc
c001bf94:	53                   	push   ebx
c001bf95:	56                   	push   esi
c001bf96:	e8 79 fe ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001bf9b:	83 c4 10             	add    esp,0x10
c001bf9e:	4f                   	dec    edi
c001bf9f:	75 f0                	jne    c001bf91 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bfa1:	5b                   	pop    ebx
c001bfa2:	5e                   	pop    esi
c001bfa3:	5f                   	pop    edi
c001bfa4:	c3                   	ret    
c001bfa5:	90                   	nop

c001bfa6 <IDE::open(int, int, void*)>:
c001bfa6:	55                   	push   ebp
c001bfa7:	57                   	push   edi
c001bfa8:	56                   	push   esi
c001bfa9:	53                   	push   ebx
c001bfaa:	83 ec 1c             	sub    esp,0x1c
c001bfad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bfb1:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bfba:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bfc3:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bfca:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bfd1:	0f 85 de 02 00 00    	jne    c001c2b5 <IDE::open(int, int, void*)+0x30f>
c001bfd7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bfdd:	88 04 24             	mov    BYTE PTR [esp],al
c001bfe0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bfe3:	83 e0 7f             	and    eax,0x7f
c001bfe6:	83 f8 05             	cmp    eax,0x5
c001bfe9:	74 05                	je     c001bff0 <IDE::open(int, int, void*)+0x4a>
c001bfeb:	83 f8 0f             	cmp    eax,0xf
c001bfee:	75 32                	jne    c001c022 <IDE::open(int, int, void*)+0x7c>
c001bff0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bff6:	83 e0 fc             	and    eax,0xfffffffc
c001bff9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c000:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c006:	83 e0 fc             	and    eax,0xfffffffc
c001c009:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c010:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c016:	83 e0 fc             	and    eax,0xfffffffc
c001c019:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c020:	eb 14                	jmp    c001c036 <IDE::open(int, int, void*)+0x90>
c001c022:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c02c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c036:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c03d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c044:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c048:	89 c6                	mov    esi,eax
c001c04a:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c04f:	c1 e6 10             	shl    esi,0x10
c001c052:	89 e8                	mov    eax,ebp
c001c054:	89 fa                	mov    edx,edi
c001c056:	c1 e0 0b             	shl    eax,0xb
c001c059:	09 f0                	or     eax,esi
c001c05b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c062:	c1 e6 08             	shl    esi,0x8
c001c065:	09 c6                	or     esi,eax
c001c067:	89 f0                	mov    eax,esi
c001c069:	0d 08 00 00 80       	or     eax,0x80000008
c001c06e:	ef                   	out    dx,eax
c001c06f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c074:	89 ca                	mov    edx,ecx
c001c076:	ed                   	in     eax,dx
c001c077:	c1 e8 10             	shr    eax,0x10
c001c07a:	3d ff ff 00 00       	cmp    eax,0xffff
c001c07f:	0f 84 f9 00 00 00    	je     c001c17e <IDE::open(int, int, void*)+0x1d8>
c001c085:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c08b:	89 fa                	mov    edx,edi
c001c08d:	89 f0                	mov    eax,esi
c001c08f:	ef                   	out    dx,eax
c001c090:	b0 fe                	mov    al,0xfe
c001c092:	89 ca                	mov    edx,ecx
c001c094:	ee                   	out    dx,al
c001c095:	89 f0                	mov    eax,esi
c001c097:	89 fa                	mov    edx,edi
c001c099:	ef                   	out    dx,eax
c001c09a:	89 ca                	mov    edx,ecx
c001c09c:	ed                   	in     eax,dx
c001c09d:	3c fe                	cmp    al,0xfe
c001c09f:	0f 85 a9 00 00 00    	jne    c001c14e <IDE::open(int, int, void*)+0x1a8>
c001c0a5:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c0ab:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c0b2:	74 33                	je     c001c0e7 <IDE::open(int, int, void*)+0x141>
c001c0b4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c0ba:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c0be:	40                   	inc    eax
c001c0bf:	83 ec 0c             	sub    esp,0xc
c001c0c2:	0f b6 c0             	movzx  eax,al
c001c0c5:	50                   	push   eax
c001c0c6:	55                   	push   ebp
c001c0c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c0cb:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c0d1:	51                   	push   ecx
c001c0d2:	e8 29 38 ff ff       	call   c000f900 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c0d7:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c0dc:	83 c4 1c             	add    esp,0x1c
c001c0df:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c0e5:	eb 0a                	jmp    c001c0f1 <IDE::open(int, int, void*)+0x14b>
c001c0e7:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c0f1:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c0f8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c0ff:	c1 e1 10             	shl    ecx,0x10
c001c102:	c1 e0 08             	shl    eax,0x8
c001c105:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c10a:	09 c1                	or     ecx,eax
c001c10c:	89 fa                	mov    edx,edi
c001c10e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c115:	c1 e0 0b             	shl    eax,0xb
c001c118:	09 c1                	or     ecx,eax
c001c11a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c120:	89 c8                	mov    eax,ecx
c001c122:	ef                   	out    dx,eax
c001c123:	be fc 0c 00 00       	mov    esi,0xcfc
c001c128:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c12e:	89 f2                	mov    edx,esi
c001c130:	ee                   	out    dx,al
c001c131:	89 c8                	mov    eax,ecx
c001c133:	89 fa                	mov    edx,edi
c001c135:	ef                   	out    dx,eax
c001c136:	89 f2                	mov    edx,esi
c001c138:	ed                   	in     eax,dx
c001c139:	0f b6 c0             	movzx  eax,al
c001c13c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c142:	74 4a                	je     c001c18e <IDE::open(int, int, void*)+0x1e8>
c001c144:	83 ec 0c             	sub    esp,0xc
c001c147:	68 88 31 02 c0       	push   0xc0023188
c001c14c:	eb 38                	jmp    c001c186 <IDE::open(int, int, void*)+0x1e0>
c001c14e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c157:	75 1b                	jne    c001c174 <IDE::open(int, int, void*)+0x1ce>
c001c159:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c15d:	3d 80 00 00 00       	cmp    eax,0x80
c001c162:	74 07                	je     c001c16b <IDE::open(int, int, void*)+0x1c5>
c001c164:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c169:	75 09                	jne    c001c174 <IDE::open(int, int, void*)+0x1ce>
c001c16b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c172:	eb 1a                	jmp    c001c18e <IDE::open(int, int, void*)+0x1e8>
c001c174:	83 ec 0c             	sub    esp,0xc
c001c177:	68 90 31 02 c0       	push   0xc0023190
c001c17c:	eb 08                	jmp    c001c186 <IDE::open(int, int, void*)+0x1e0>
c001c17e:	83 ec 0c             	sub    esp,0xc
c001c181:	68 c1 31 02 c0       	push   0xc00231c1
c001c186:	e8 5c 54 ff ff       	call   c00115e7 <KePanic(char const*)>
c001c18b:	83 c4 10             	add    esp,0x10
c001c18e:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c195:	74 1a                	je     c001c1b1 <IDE::open(int, int, void*)+0x20b>
c001c197:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c19d:	83 e0 fc             	and    eax,0xfffffffc
c001c1a0:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c1a7:	83 c0 08             	add    eax,0x8
c001c1aa:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c1b1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c1b7:	89 c2                	mov    edx,eax
c001c1b9:	83 e2 0f             	and    edx,0xf
c001c1bc:	83 fa 08             	cmp    edx,0x8
c001c1bf:	75 0a                	jne    c001c1cb <IDE::open(int, int, void*)+0x225>
c001c1c1:	83 e8 02             	sub    eax,0x2
c001c1c4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c1cb:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c1d1:	89 c2                	mov    edx,eax
c001c1d3:	83 e2 0f             	and    edx,0xf
c001c1d6:	83 fa 08             	cmp    edx,0x8
c001c1d9:	75 0a                	jne    c001c1e5 <IDE::open(int, int, void*)+0x23f>
c001c1db:	83 e8 02             	sub    eax,0x2
c001c1de:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c1e5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c1ec:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c1f3:	89 d0                	mov    eax,edx
c001c1f5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c1f8:	8d 7a 01             	lea    edi,[edx+0x1]
c001c1fb:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c1ff:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c203:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c207:	83 e1 3f             	and    ecx,0x3f
c001c20a:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c20e:	89 f9                	mov    ecx,edi
c001c210:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c217:	0f b6 c9             	movzx  ecx,cl
c001c21a:	8d 78 02             	lea    edi,[eax+0x2]
c001c21d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c220:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c224:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c228:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c22c:	83 e2 3f             	and    edx,0x3f
c001c22f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c233:	89 f9                	mov    ecx,edi
c001c235:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c23b:	0f b6 d1             	movzx  edx,cl
c001c23e:	8d 78 03             	lea    edi,[eax+0x3]
c001c241:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c244:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c248:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c24c:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c250:	83 e1 3f             	and    ecx,0x3f
c001c253:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c257:	89 f9                	mov    ecx,edi
c001c259:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c25f:	0f b6 c9             	movzx  ecx,cl
c001c262:	8d 78 04             	lea    edi,[eax+0x4]
c001c265:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c268:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c26c:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c270:	89 fa                	mov    edx,edi
c001c272:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c278:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c27c:	83 e2 3f             	and    edx,0x3f
c001c27f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c283:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c28a:	66 85 f6             	test   si,si
c001c28d:	74 65                	je     c001c2f4 <IDE::open(int, int, void*)+0x34e>
c001c28f:	89 f9                	mov    ecx,edi
c001c291:	83 c0 05             	add    eax,0x5
c001c294:	0f b6 d1             	movzx  edx,cl
c001c297:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c29a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c29e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c2a2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c2a8:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c2ac:	83 e0 3f             	and    eax,0x3f
c001c2af:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c2b3:	eb 3f                	jmp    c001c2f4 <IDE::open(int, int, void*)+0x34e>
c001c2b5:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c2bb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c2c2:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c2c9:	05 06 02 00 00       	add    eax,0x206
c001c2ce:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c2d5:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c2dc:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c2e3:	05 06 02 00 00       	add    eax,0x206
c001c2e8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c2ef:	e9 bd fe ff ff       	jmp    c001c1b1 <IDE::open(int, int, void*)+0x20b>
c001c2f4:	50                   	push   eax
c001c2f5:	50                   	push   eax
c001c2f6:	6a 00                	push   0x0
c001c2f8:	53                   	push   ebx
c001c2f9:	e8 30 fa ff ff       	call   c001bd2e <IDE::prepareInterrupt(unsigned char)>
c001c2fe:	5a                   	pop    edx
c001c2ff:	59                   	pop    ecx
c001c300:	6a 01                	push   0x1
c001c302:	53                   	push   ebx
c001c303:	e8 26 fa ff ff       	call   c001bd2e <IDE::prepareInterrupt(unsigned char)>
c001c308:	83 c4 0c             	add    esp,0xc
c001c30b:	6a 00                	push   0x0
c001c30d:	6a 00                	push   0x0
c001c30f:	53                   	push   ebx
c001c310:	e8 47 fc ff ff       	call   c001bf5c <IDE::enableIRQs(unsigned char, bool)>
c001c315:	83 c4 0c             	add    esp,0xc
c001c318:	6a 00                	push   0x0
c001c31a:	6a 01                	push   0x1
c001c31c:	53                   	push   ebx
c001c31d:	e8 3a fc ff ff       	call   c001bf5c <IDE::enableIRQs(unsigned char, bool)>
c001c322:	83 c4 10             	add    esp,0x10
c001c325:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c32c:	74 34                	je     c001c362 <IDE::open(int, int, void*)+0x3bc>
c001c32e:	83 ec 0c             	sub    esp,0xc
c001c331:	53                   	push   ebx
c001c332:	6a 01                	push   0x1
c001c334:	68 24 bf 01 c0       	push   0xc001bf24
c001c339:	6a 0e                	push   0xe
c001c33b:	53                   	push   ebx
c001c33c:	e8 f9 05 ff ff       	call   c000c93a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c341:	83 c4 14             	add    esp,0x14
c001c344:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c34a:	53                   	push   ebx
c001c34b:	6a 01                	push   0x1
c001c34d:	68 40 bf 01 c0       	push   0xc001bf40
c001c352:	6a 0f                	push   0xf
c001c354:	53                   	push   ebx
c001c355:	e8 e0 05 ff ff       	call   c000c93a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c35a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c360:	eb 38                	jmp    c001c39a <IDE::open(int, int, void*)+0x3f4>
c001c362:	83 ec 0c             	sub    esp,0xc
c001c365:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c36f:	53                   	push   ebx
c001c370:	6a 00                	push   0x0
c001c372:	68 24 bf 01 c0       	push   0xc001bf24
c001c377:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c37d:	53                   	push   ebx
c001c37e:	e8 b7 05 ff ff       	call   c000c93a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c383:	83 c4 14             	add    esp,0x14
c001c386:	53                   	push   ebx
c001c387:	6a 00                	push   0x0
c001c389:	68 40 bf 01 c0       	push   0xc001bf40
c001c38e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c394:	53                   	push   ebx
c001c395:	e8 a0 05 ff ff       	call   c000c93a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c39a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c39c:	83 c4 20             	add    esp,0x20
c001c39f:	83 ec 0c             	sub    esp,0xc
c001c3a2:	53                   	push   ebx
c001c3a3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c3a6:	83 c4 0c             	add    esp,0xc
c001c3a9:	6a 07                	push   0x7
c001c3ab:	6a 00                	push   0x0
c001c3ad:	53                   	push   ebx
c001c3ae:	e8 61 fa ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001c3b3:	83 c4 0c             	add    esp,0xc
c001c3b6:	6a 07                	push   0x7
c001c3b8:	6a 01                	push   0x1
c001c3ba:	53                   	push   ebx
c001c3bb:	e8 54 fa ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001c3c0:	83 c4 0c             	add    esp,0xc
c001c3c3:	6a 01                	push   0x1
c001c3c5:	6a 00                	push   0x0
c001c3c7:	53                   	push   ebx
c001c3c8:	e8 8f fb ff ff       	call   c001bf5c <IDE::enableIRQs(unsigned char, bool)>
c001c3cd:	83 c4 0c             	add    esp,0xc
c001c3d0:	6a 01                	push   0x1
c001c3d2:	6a 01                	push   0x1
c001c3d4:	53                   	push   ebx
c001c3d5:	e8 82 fb ff ff       	call   c001bf5c <IDE::enableIRQs(unsigned char, bool)>
c001c3da:	83 c4 2c             	add    esp,0x2c
c001c3dd:	31 c0                	xor    eax,eax
c001c3df:	5b                   	pop    ebx
c001c3e0:	5e                   	pop    esi
c001c3e1:	5f                   	pop    edi
c001c3e2:	5d                   	pop    ebp
c001c3e3:	c3                   	ret    

c001c3e4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c3e4:	55                   	push   ebp
c001c3e5:	57                   	push   edi
c001c3e6:	56                   	push   esi
c001c3e7:	53                   	push   ebx
c001c3e8:	83 ec 1c             	sub    esp,0x1c
c001c3eb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c3ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c3f3:	8d 42 f8             	lea    eax,[edx-0x8]
c001c3f6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c3fa:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c3fe:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c402:	3c 03                	cmp    al,0x3
c001c404:	77 5a                	ja     c001c460 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c406:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c40a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c40e:	0f b6 db             	movzx  ebx,bl
c001c411:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c414:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c419:	0c 80                	or     al,0x80
c001c41b:	50                   	push   eax
c001c41c:	6a 0c                	push   0xc
c001c41e:	53                   	push   ebx
c001c41f:	56                   	push   esi
c001c420:	e8 2f f9 ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c425:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c42a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c42e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c432:	0f b6 d2             	movzx  edx,dl
c001c435:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c439:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c43b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c440:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c444:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c448:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c44c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c454:	83 c4 2c             	add    esp,0x2c
c001c457:	5b                   	pop    ebx
c001c458:	5e                   	pop    esi
c001c459:	5f                   	pop    edi
c001c45a:	5d                   	pop    ebp
c001c45b:	e9 f4 f8 ff ff       	jmp    c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c460:	0f b6 c2             	movzx  eax,dl
c001c463:	83 f8 07             	cmp    eax,0x7
c001c466:	77 12                	ja     c001c47a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c468:	0f b6 c2             	movzx  eax,dl
c001c46b:	0f b6 db             	movzx  ebx,bl
c001c46e:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c476:	01 c2                	add    edx,eax
c001c478:	eb 2f                	jmp    c001c4a9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c47a:	83 f8 0d             	cmp    eax,0xd
c001c47d:	77 13                	ja     c001c492 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c47f:	0f b6 db             	movzx  ebx,bl
c001c482:	0f b6 d2             	movzx  edx,dl
c001c485:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c48c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c490:	eb 17                	jmp    c001c4a9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c492:	83 f8 15             	cmp    eax,0x15
c001c495:	77 14                	ja     c001c4ab <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c497:	0f b6 db             	movzx  ebx,bl
c001c49a:	0f b6 d2             	movzx  edx,dl
c001c49d:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c4a5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c4a9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c4ab:	83 c4 1c             	add    esp,0x1c
c001c4ae:	5b                   	pop    ebx
c001c4af:	5e                   	pop    esi
c001c4b0:	5f                   	pop    edi
c001c4b1:	5d                   	pop    ebp
c001c4b2:	c3                   	ret    
c001c4b3:	90                   	nop

c001c4b4 <IDE::detect()>:
c001c4b4:	55                   	push   ebp
c001c4b5:	57                   	push   edi
c001c4b6:	56                   	push   esi
c001c4b7:	53                   	push   ebx
c001c4b8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c4be:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c4c5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c4cc:	0f 85 a4 02 00 00    	jne    c001c776 <IDE::detect()+0x2c2>
c001c4d2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c4d9:	31 f6                	xor    esi,esi
c001c4db:	31 ed                	xor    ebp,ebp
c001c4dd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c4e5:	89 e8                	mov    eax,ebp
c001c4e7:	c1 e0 06             	shl    eax,0x6
c001c4ea:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c4f2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c4f6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c4fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4fe:	c1 e0 04             	shl    eax,0x4
c001c501:	83 c8 a0             	or     eax,0xffffffa0
c001c504:	0f b6 c0             	movzx  eax,al
c001c507:	50                   	push   eax
c001c508:	6a 06                	push   0x6
c001c50a:	56                   	push   esi
c001c50b:	53                   	push   ebx
c001c50c:	e8 43 f8 ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c511:	83 c4 0c             	add    esp,0xc
c001c514:	6a 0c                	push   0xc
c001c516:	56                   	push   esi
c001c517:	53                   	push   ebx
c001c518:	e8 f7 f8 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001c51d:	83 c4 0c             	add    esp,0xc
c001c520:	6a 0c                	push   0xc
c001c522:	56                   	push   esi
c001c523:	53                   	push   ebx
c001c524:	e8 eb f8 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001c529:	83 c4 0c             	add    esp,0xc
c001c52c:	6a 0c                	push   0xc
c001c52e:	56                   	push   esi
c001c52f:	53                   	push   ebx
c001c530:	e8 df f8 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001c535:	83 c4 0c             	add    esp,0xc
c001c538:	6a 0c                	push   0xc
c001c53a:	56                   	push   esi
c001c53b:	53                   	push   ebx
c001c53c:	e8 d3 f8 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001c541:	68 ec 00 00 00       	push   0xec
c001c546:	6a 07                	push   0x7
c001c548:	56                   	push   esi
c001c549:	53                   	push   ebx
c001c54a:	e8 05 f8 ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c54f:	83 c4 1c             	add    esp,0x1c
c001c552:	6a 0c                	push   0xc
c001c554:	56                   	push   esi
c001c555:	53                   	push   ebx
c001c556:	e8 b9 f8 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001c55b:	83 c4 0c             	add    esp,0xc
c001c55e:	6a 0c                	push   0xc
c001c560:	56                   	push   esi
c001c561:	53                   	push   ebx
c001c562:	e8 ad f8 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001c567:	83 c4 0c             	add    esp,0xc
c001c56a:	6a 0c                	push   0xc
c001c56c:	56                   	push   esi
c001c56d:	53                   	push   ebx
c001c56e:	e8 a1 f8 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001c573:	83 c4 0c             	add    esp,0xc
c001c576:	6a 0c                	push   0xc
c001c578:	56                   	push   esi
c001c579:	53                   	push   ebx
c001c57a:	e8 95 f8 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001c57f:	83 c4 0c             	add    esp,0xc
c001c582:	6a 0c                	push   0xc
c001c584:	56                   	push   esi
c001c585:	53                   	push   ebx
c001c586:	e8 89 f8 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001c58b:	83 c4 10             	add    esp,0x10
c001c58e:	84 c0                	test   al,al
c001c590:	0f 84 60 01 00 00    	je     c001c6f6 <IDE::detect()+0x242>
c001c596:	31 ff                	xor    edi,edi
c001c598:	50                   	push   eax
c001c599:	6a 0c                	push   0xc
c001c59b:	56                   	push   esi
c001c59c:	53                   	push   ebx
c001c59d:	e8 72 f8 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001c5a2:	83 c4 10             	add    esp,0x10
c001c5a5:	a8 01                	test   al,0x1
c001c5a7:	0f 85 6a 01 00 00    	jne    c001c717 <IDE::detect()+0x263>
c001c5ad:	a8 80                	test   al,0x80
c001c5af:	75 04                	jne    c001c5b5 <IDE::detect()+0x101>
c001c5b1:	a8 08                	test   al,0x8
c001c5b3:	75 23                	jne    c001c5d8 <IDE::detect()+0x124>
c001c5b5:	47                   	inc    edi
c001c5b6:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c5bc:	7e da                	jle    c001c598 <IDE::detect()+0xe4>
c001c5be:	83 ec 0c             	sub    esp,0xc
c001c5c1:	6a 32                	push   0x32
c001c5c3:	e8 f0 9d ff ff       	call   c00163b8 <milliTenthSleep(unsigned int)>
c001c5c8:	83 c4 10             	add    esp,0x10
c001c5cb:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c5d1:	75 c5                	jne    c001c598 <IDE::detect()+0xe4>
c001c5d3:	e9 3f 01 00 00       	jmp    c001c717 <IDE::detect()+0x263>
c001c5d8:	31 c9                	xor    ecx,ecx
c001c5da:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c5de:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c5e2:	83 ec 0c             	sub    esp,0xc
c001c5e5:	68 80 00 00 00       	push   0x80
c001c5ea:	57                   	push   edi
c001c5eb:	6a 00                	push   0x0
c001c5ed:	56                   	push   esi
c001c5ee:	53                   	push   ebx
c001c5ef:	e8 f0 fd ff ff       	call   c001c3e4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c5f4:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c5f9:	89 e8                	mov    eax,ebp
c001c5fb:	89 d1                	mov    ecx,edx
c001c5fd:	c1 e0 06             	shl    eax,0x6
c001c600:	01 d8                	add    eax,ebx
c001c602:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c609:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c610:	89 f2                	mov    edx,esi
c001c612:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c618:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c61c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c622:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c626:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c62d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c635:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c63c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c644:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c64a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c651:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c657:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c65b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c65f:	83 c4 20             	add    esp,0x20
c001c662:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c665:	83 c0 02             	add    eax,0x2
c001c668:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c66e:	83 c7 02             	add    edi,0x2
c001c671:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c674:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c67a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c67e:	75 e2                	jne    c001c662 <IDE::detect()+0x1ae>
c001c680:	89 e8                	mov    eax,ebp
c001c682:	c1 e0 06             	shl    eax,0x6
c001c685:	01 d8                	add    eax,ebx
c001c687:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c68e:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c695:	c1 ea 09             	shr    edx,0x9
c001c698:	83 e2 01             	and    edx,0x1
c001c69b:	80 e1 01             	and    cl,0x1
c001c69e:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c6a4:	75 22                	jne    c001c6c8 <IDE::detect()+0x214>
c001c6a6:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c6ad:	74 46                	je     c001c6f5 <IDE::detect()+0x241>
c001c6af:	83 ec 0c             	sub    esp,0xc
c001c6b2:	68 7c 01 00 00       	push   0x17c
c001c6b7:	e8 fa b3 fe ff       	call   c0007ab6 <malloc>
c001c6bc:	89 c7                	mov    edi,eax
c001c6be:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6c1:	e8 1a 05 00 00       	call   c001cbe0 <ATA::ATA()>
c001c6c6:	eb 17                	jmp    c001c6df <IDE::detect()+0x22b>
c001c6c8:	83 ec 0c             	sub    esp,0xc
c001c6cb:	68 84 01 00 00       	push   0x184
c001c6d0:	e8 e1 b3 fe ff       	call   c0007ab6 <malloc>
c001c6d5:	89 c7                	mov    edi,eax
c001c6d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6da:	e8 45 0e 00 00       	call   c001d524 <ATAPI::ATAPI()>
c001c6df:	5a                   	pop    edx
c001c6e0:	59                   	pop    ecx
c001c6e1:	57                   	push   edi
c001c6e2:	53                   	push   ebx
c001c6e3:	e8 a6 02 ff ff       	call   c000c98e <Device::addChild(Device*)>
c001c6e8:	8b 07                	mov    eax,DWORD PTR [edi]
c001c6ea:	53                   	push   ebx
c001c6eb:	55                   	push   ebp
c001c6ec:	6a 00                	push   0x0
c001c6ee:	57                   	push   edi
c001c6ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c6f2:	83 c4 20             	add    esp,0x20
c001c6f5:	45                   	inc    ebp
c001c6f6:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c6fb:	74 0d                	je     c001c70a <IDE::detect()+0x256>
c001c6fd:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c705:	e9 db fd ff ff       	jmp    c001c4e5 <IDE::detect()+0x31>
c001c70a:	4e                   	dec    esi
c001c70b:	74 69                	je     c001c776 <IDE::detect()+0x2c2>
c001c70d:	be 01 00 00 00       	mov    esi,0x1
c001c712:	e9 c6 fd ff ff       	jmp    c001c4dd <IDE::detect()+0x29>
c001c717:	50                   	push   eax
c001c718:	6a 04                	push   0x4
c001c71a:	56                   	push   esi
c001c71b:	53                   	push   ebx
c001c71c:	e8 f3 f6 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001c721:	83 c4 0c             	add    esp,0xc
c001c724:	89 c7                	mov    edi,eax
c001c726:	6a 05                	push   0x5
c001c728:	56                   	push   esi
c001c729:	53                   	push   ebx
c001c72a:	e8 e5 f6 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001c72f:	83 c4 10             	add    esp,0x10
c001c732:	89 f9                	mov    ecx,edi
c001c734:	0f b6 c0             	movzx  eax,al
c001c737:	0f b6 f9             	movzx  edi,cl
c001c73a:	83 ff 14             	cmp    edi,0x14
c001c73d:	75 07                	jne    c001c746 <IDE::detect()+0x292>
c001c73f:	3d eb 00 00 00       	cmp    eax,0xeb
c001c744:	eb 0a                	jmp    c001c750 <IDE::detect()+0x29c>
c001c746:	3d 96 00 00 00       	cmp    eax,0x96
c001c74b:	75 a9                	jne    c001c6f6 <IDE::detect()+0x242>
c001c74d:	83 ff 69             	cmp    edi,0x69
c001c750:	75 a4                	jne    c001c6f6 <IDE::detect()+0x242>
c001c752:	68 a1 00 00 00       	push   0xa1
c001c757:	6a 07                	push   0x7
c001c759:	56                   	push   esi
c001c75a:	53                   	push   ebx
c001c75b:	e8 f4 f5 ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c760:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c767:	e8 4c 9c ff ff       	call   c00163b8 <milliTenthSleep(unsigned int)>
c001c76c:	83 c4 10             	add    esp,0x10
c001c76f:	b1 01                	mov    cl,0x1
c001c771:	e9 64 fe ff ff       	jmp    c001c5da <IDE::detect()+0x126>
c001c776:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c77c:	5b                   	pop    ebx
c001c77d:	5e                   	pop    esi
c001c77e:	5f                   	pop    edi
c001c77f:	5d                   	pop    ebp
c001c780:	c3                   	ret    
c001c781:	90                   	nop

c001c782 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c782:	55                   	push   ebp
c001c783:	57                   	push   edi
c001c784:	56                   	push   esi
c001c785:	53                   	push   ebx
c001c786:	83 ec 1c             	sub    esp,0x1c
c001c789:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c78d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c791:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c795:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c799:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c79d:	88 c3                	mov    bl,al
c001c79f:	25 ff 00 00 00       	and    eax,0xff
c001c7a4:	0f 84 88 00 00 00    	je     c001c832 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7aa:	83 ec 0c             	sub    esp,0xc
c001c7ad:	89 c7                	mov    edi,eax
c001c7af:	68 eb 31 02 c0       	push   0xc00231eb
c001c7b4:	e8 8c e1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c7b9:	83 c4 10             	add    esp,0x10
c001c7bc:	83 ff 01             	cmp    edi,0x1
c001c7bf:	74 6b                	je     c001c82c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c7c1:	83 ff 02             	cmp    edi,0x2
c001c7c4:	75 58                	jne    c001c81e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c7c6:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c7cb:	01 ff                	add    edi,edi
c001c7cd:	50                   	push   eax
c001c7ce:	09 fe                	or     esi,edi
c001c7d0:	6a 01                	push   0x1
c001c7d2:	89 f0                	mov    eax,esi
c001c7d4:	0f b6 f0             	movzx  esi,al
c001c7d7:	c1 e6 06             	shl    esi,0x6
c001c7da:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c7e2:	50                   	push   eax
c001c7e3:	55                   	push   ebp
c001c7e4:	e8 2b f6 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001c7e9:	83 c4 10             	add    esp,0x10
c001c7ec:	a8 01                	test   al,0x1
c001c7ee:	74 02                	je     c001c7f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c7f0:	b3 07                	mov    bl,0x7
c001c7f2:	a8 02                	test   al,0x2
c001c7f4:	74 02                	je     c001c7f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c7f6:	b3 03                	mov    bl,0x3
c001c7f8:	a8 04                	test   al,0x4
c001c7fa:	74 02                	je     c001c7fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c7fc:	b3 14                	mov    bl,0x14
c001c7fe:	a8 08                	test   al,0x8
c001c800:	74 02                	je     c001c804 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c802:	b3 03                	mov    bl,0x3
c001c804:	a8 10                	test   al,0x10
c001c806:	74 02                	je     c001c80a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c808:	b3 15                	mov    bl,0x15
c001c80a:	a8 20                	test   al,0x20
c001c80c:	74 02                	je     c001c810 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c80e:	b3 03                	mov    bl,0x3
c001c810:	a8 40                	test   al,0x40
c001c812:	74 02                	je     c001c816 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c814:	b3 16                	mov    bl,0x16
c001c816:	a8 80                	test   al,0x80
c001c818:	74 18                	je     c001c832 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c81a:	b3 0d                	mov    bl,0xd
c001c81c:	eb 14                	jmp    c001c832 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c81e:	83 ff 03             	cmp    edi,0x3
c001c821:	74 0d                	je     c001c830 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c823:	83 ff 04             	cmp    edi,0x4
c001c826:	75 0a                	jne    c001c832 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c828:	b3 08                	mov    bl,0x8
c001c82a:	eb 06                	jmp    c001c832 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c82c:	b3 13                	mov    bl,0x13
c001c82e:	eb 02                	jmp    c001c832 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c830:	b3 17                	mov    bl,0x17
c001c832:	83 c4 1c             	add    esp,0x1c
c001c835:	88 d8                	mov    al,bl
c001c837:	5b                   	pop    ebx
c001c838:	5e                   	pop    esi
c001c839:	5f                   	pop    edi
c001c83a:	5d                   	pop    ebp
c001c83b:	c3                   	ret    

c001c83c <IDE::polling(unsigned char, unsigned int)>:
c001c83c:	57                   	push   edi
c001c83d:	56                   	push   esi
c001c83e:	53                   	push   ebx
c001c83f:	bb 04 00 00 00       	mov    ebx,0x4
c001c844:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c848:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c84d:	52                   	push   edx
c001c84e:	6a 0c                	push   0xc
c001c850:	56                   	push   esi
c001c851:	57                   	push   edi
c001c852:	e8 bd f5 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001c857:	83 c4 10             	add    esp,0x10
c001c85a:	4b                   	dec    ebx
c001c85b:	75 f0                	jne    c001c84d <IDE::polling(unsigned char, unsigned int)+0x11>
c001c85d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c862:	50                   	push   eax
c001c863:	6a 0c                	push   0xc
c001c865:	56                   	push   esi
c001c866:	57                   	push   edi
c001c867:	e8 a8 f5 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001c86c:	83 c4 10             	add    esp,0x10
c001c86f:	a8 01                	test   al,0x1
c001c871:	75 17                	jne    c001c88a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c873:	a8 20                	test   al,0x20
c001c875:	75 0f                	jne    c001c886 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c877:	4b                   	dec    ebx
c001c878:	74 10                	je     c001c88a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c87a:	a8 80                	test   al,0x80
c001c87c:	75 e4                	jne    c001c862 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c87e:	a8 08                	test   al,0x8
c001c880:	74 e0                	je     c001c862 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c882:	31 c0                	xor    eax,eax
c001c884:	eb 06                	jmp    c001c88c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c886:	b0 01                	mov    al,0x1
c001c888:	eb 02                	jmp    c001c88c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c88a:	b0 02                	mov    al,0x2
c001c88c:	5b                   	pop    ebx
c001c88d:	5e                   	pop    esi
c001c88e:	5f                   	pop    edi
c001c88f:	c3                   	ret    

c001c890 <SATABus::close(int, int, void*)>:
c001c890:	31 c0                	xor    eax,eax
c001c892:	c3                   	ret    
c001c893:	90                   	nop

c001c894 <SATABus::detect()>:
c001c894:	c3                   	ret    
c001c895:	90                   	nop

c001c896 <SATABus::SATABus()>:
c001c896:	83 ec 0c             	sub    esp,0xc
c001c899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89d:	83 ec 08             	sub    esp,0x8
c001c8a0:	68 24 32 02 c0       	push   0xc0023224
c001c8a5:	50                   	push   eax
c001c8a6:	e8 25 04 ff ff       	call   c000ccd0 <HardDiskController::HardDiskController(char const*)>
c001c8ab:	83 c4 10             	add    esp,0x10
c001c8ae:	ba 50 32 02 c0       	mov    edx,0xc0023250
c001c8b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b7:	89 10                	mov    DWORD PTR [eax],edx
c001c8b9:	83 ec 0c             	sub    esp,0xc
c001c8bc:	6a 50                	push   0x50
c001c8be:	e8 cb b5 fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c8c3:	83 c4 10             	add    esp,0x10
c001c8c6:	89 c2                	mov    edx,eax
c001c8c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8cc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c8d2:	83 ec 0c             	sub    esp,0xc
c001c8d5:	6a 50                	push   0x50
c001c8d7:	e8 31 cd fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c8dc:	83 c4 10             	add    esp,0x10
c001c8df:	89 c2                	mov    edx,eax
c001c8e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c8eb:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c8f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c8f4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c8fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c8fe:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c904:	83 ec 0c             	sub    esp,0xc
c001c907:	6a 03                	push   0x3
c001c909:	6a 50                	push   0x50
c001c90b:	51                   	push   ecx
c001c90c:	52                   	push   edx
c001c90d:	50                   	push   eax
c001c90e:	e8 07 d6 fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c913:	83 c4 20             	add    esp,0x20
c001c916:	90                   	nop
c001c917:	83 c4 0c             	add    esp,0xc
c001c91a:	c3                   	ret    
c001c91b:	90                   	nop

c001c91c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c91c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c920:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c923:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c926:	09 c2                	or     edx,eax
c001c928:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c92c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c932:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c934:	31 c0                	xor    eax,eax
c001c936:	c1 e9 08             	shr    ecx,0x8
c001c939:	83 e1 0f             	and    ecx,0xf
c001c93c:	39 c8                	cmp    eax,ecx
c001c93e:	74 0a                	je     c001c94a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c940:	f6 c2 01             	test   dl,0x1
c001c943:	74 08                	je     c001c94d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c945:	d1 ea                	shr    edx,1
c001c947:	40                   	inc    eax
c001c948:	eb f2                	jmp    c001c93c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c94a:	83 c8 ff             	or     eax,0xffffffff
c001c94d:	c3                   	ret    

c001c94e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c94e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c952:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c955:	89 c2                	mov    edx,eax
c001c957:	c1 ea 08             	shr    edx,0x8
c001c95a:	83 e2 0f             	and    edx,0xf
c001c95d:	4a                   	dec    edx
c001c95e:	75 32                	jne    c001c992 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c960:	83 e0 0f             	and    eax,0xf
c001c963:	83 f8 03             	cmp    eax,0x3
c001c966:	75 2a                	jne    c001c992 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c968:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c96b:	b8 02 00 00 00       	mov    eax,0x2
c001c970:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c976:	74 1c                	je     c001c994 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c978:	b8 04 00 00 00       	mov    eax,0x4
c001c97d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c983:	74 0f                	je     c001c994 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c985:	31 c0                	xor    eax,eax
c001c987:	83 fa 03             	cmp    edx,0x3
c001c98a:	0f 94 c0             	sete   al
c001c98d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c991:	c3                   	ret    
c001c992:	31 c0                	xor    eax,eax
c001c994:	c3                   	ret    
c001c995:	90                   	nop

c001c996 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c996:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c99a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c99d:	0f ba e2 0f          	bt     edx,0xf
c001c9a1:	72 f7                	jb     c001c99a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c9a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9a6:	83 ca 10             	or     edx,0x10
c001c9a9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9af:	83 ca 01             	or     edx,0x1
c001c9b2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9b5:	c3                   	ret    

c001c9b6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c9b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9ba:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9bd:	83 e2 fe             	and    edx,0xfffffffe
c001c9c0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9c3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9c6:	83 e2 ef             	and    edx,0xffffffef
c001c9c9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9cc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9cf:	0f ba e2 0e          	bt     edx,0xe
c001c9d3:	72 f7                	jb     c001c9cc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c9d5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9d8:	0f ba e2 0f          	bt     edx,0xf
c001c9dc:	72 ee                	jb     c001c9cc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c9de:	c3                   	ret    
c001c9df:	90                   	nop

c001c9e0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c9e0:	55                   	push   ebp
c001c9e1:	57                   	push   edi
c001c9e2:	56                   	push   esi
c001c9e3:	53                   	push   ebx
c001c9e4:	83 ec 1c             	sub    esp,0x1c
c001c9e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c9eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c9ef:	53                   	push   ebx
c001c9f0:	56                   	push   esi
c001c9f1:	e8 c0 ff ff ff       	call   c001c9b6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c9f6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c9fa:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ca00:	83 ec 0c             	sub    esp,0xc
c001ca03:	c1 e5 0a             	shl    ebp,0xa
c001ca06:	01 e8                	add    eax,ebp
c001ca08:	89 03                	mov    DWORD PTR [ebx],eax
c001ca0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca0c:	68 00 04 00 00       	push   0x400
c001ca11:	6a 00                	push   0x0
c001ca13:	50                   	push   eax
c001ca14:	e8 d7 3a fe ff       	call   c00004f0 <memset>
c001ca19:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001ca1f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ca23:	01 e8                	add    eax,ebp
c001ca25:	83 c4 1c             	add    esp,0x1c
c001ca28:	89 03                	mov    DWORD PTR [ebx],eax
c001ca2a:	c1 e2 08             	shl    edx,0x8
c001ca2d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca34:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001ca3a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ca40:	01 f8                	add    eax,edi
c001ca42:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ca45:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ca48:	68 00 01 00 00       	push   0x100
c001ca4d:	6a 00                	push   0x0
c001ca4f:	50                   	push   eax
c001ca50:	e8 9b 3a fe ff       	call   c00004f0 <memset>
c001ca55:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001ca5b:	01 fa                	add    edx,edi
c001ca5d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ca61:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001ca64:	c1 e7 0d             	shl    edi,0xd
c001ca67:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ca6e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001ca74:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001ca7a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ca7e:	31 ff                	xor    edi,edi
c001ca80:	83 c4 10             	add    esp,0x10
c001ca83:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001ca89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca8d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001ca93:	83 c5 20             	add    ebp,0x20
c001ca96:	01 f8                	add    eax,edi
c001ca98:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ca9b:	52                   	push   edx
c001ca9c:	68 00 01 00 00       	push   0x100
c001caa1:	6a 00                	push   0x0
c001caa3:	50                   	push   eax
c001caa4:	e8 47 3a fe ff       	call   c00004f0 <memset>
c001caa9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001caad:	83 c4 10             	add    esp,0x10
c001cab0:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001cab6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001cabd:	01 f8                	add    eax,edi
c001cabf:	81 c7 00 01 00 00    	add    edi,0x100
c001cac5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cac8:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001cace:	75 b3                	jne    c001ca83 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001cad0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cad7:	50                   	push   eax
c001cad8:	50                   	push   eax
c001cad9:	53                   	push   ebx
c001cada:	56                   	push   esi
c001cadb:	e8 b6 fe ff ff       	call   c001c996 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cae0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cae7:	83 c4 2c             	add    esp,0x2c
c001caea:	5b                   	pop    ebx
c001caeb:	5e                   	pop    esi
c001caec:	5f                   	pop    edi
c001caed:	5d                   	pop    ebp
c001caee:	c3                   	ret    
c001caef:	90                   	nop

c001caf0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001caf0:	55                   	push   ebp
c001caf1:	57                   	push   edi
c001caf2:	56                   	push   esi
c001caf3:	53                   	push   ebx
c001caf4:	31 db                	xor    ebx,ebx
c001caf6:	83 ec 0c             	sub    esp,0xc
c001caf9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cafd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cb01:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cb04:	f7 c7 01 00 00 00    	test   edi,0x1
c001cb0a:	74 7a                	je     c001cb86 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb0c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cb10:	89 d8                	mov    eax,ebx
c001cb12:	c1 e0 07             	shl    eax,0x7
c001cb15:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cb1c:	55                   	push   ebp
c001cb1d:	56                   	push   esi
c001cb1e:	e8 2b fe ff ff       	call   c001c94e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cb23:	5a                   	pop    edx
c001cb24:	83 f8 01             	cmp    eax,0x1
c001cb27:	59                   	pop    ecx
c001cb28:	75 21                	jne    c001cb4b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cb2a:	50                   	push   eax
c001cb2b:	53                   	push   ebx
c001cb2c:	55                   	push   ebp
c001cb2d:	56                   	push   esi
c001cb2e:	e8 ad fe ff ff       	call   c001c9e0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb33:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cb3a:	e8 77 af fe ff       	call   c0007ab6 <malloc>
c001cb3f:	89 c5                	mov    ebp,eax
c001cb41:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb44:	e8 99 10 00 00       	call   c001dbe2 <SATA::SATA()>
c001cb49:	eb 24                	jmp    c001cb6f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cb4b:	83 f8 04             	cmp    eax,0x4
c001cb4e:	75 36                	jne    c001cb86 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb50:	51                   	push   ecx
c001cb51:	53                   	push   ebx
c001cb52:	55                   	push   ebp
c001cb53:	56                   	push   esi
c001cb54:	e8 87 fe ff ff       	call   c001c9e0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb59:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cb60:	e8 51 af fe ff       	call   c0007ab6 <malloc>
c001cb65:	89 c5                	mov    ebp,eax
c001cb67:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb6a:	e8 d5 17 00 00       	call   c001e344 <SATAPI::SATAPI()>
c001cb6f:	58                   	pop    eax
c001cb70:	5a                   	pop    edx
c001cb71:	55                   	push   ebp
c001cb72:	56                   	push   esi
c001cb73:	e8 16 fe fe ff       	call   c000c98e <Device::addChild(Device*)>
c001cb78:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cb7b:	56                   	push   esi
c001cb7c:	6a 00                	push   0x0
c001cb7e:	53                   	push   ebx
c001cb7f:	55                   	push   ebp
c001cb80:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cb83:	83 c4 20             	add    esp,0x20
c001cb86:	d1 ef                	shr    edi,1
c001cb88:	43                   	inc    ebx
c001cb89:	83 fb 20             	cmp    ebx,0x20
c001cb8c:	0f 85 72 ff ff ff    	jne    c001cb04 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cb92:	83 c4 0c             	add    esp,0xc
c001cb95:	5b                   	pop    ebx
c001cb96:	5e                   	pop    esi
c001cb97:	5f                   	pop    edi
c001cb98:	5d                   	pop    ebp
c001cb99:	c3                   	ret    

c001cb9a <SATABus::open(int, int, void*)>:
c001cb9a:	83 ec 14             	sub    esp,0x14
c001cb9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cba1:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cba7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cbad:	52                   	push   edx
c001cbae:	50                   	push   eax
c001cbaf:	e8 3c ff ff ff       	call   c001caf0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cbb4:	31 c0                	xor    eax,eax
c001cbb6:	83 c4 1c             	add    esp,0x1c
c001cbb9:	c3                   	ret    

c001cbba <ATA::close(int, int, void*)>:
c001cbba:	83 ec 0c             	sub    esp,0xc
c001cbbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cbc7:	85 c0                	test   eax,eax
c001cbc9:	74 0c                	je     c001cbd7 <ATA::close(int, int, void*)+0x1d>
c001cbcb:	83 ec 0c             	sub    esp,0xc
c001cbce:	8b 10                	mov    edx,DWORD PTR [eax]
c001cbd0:	50                   	push   eax
c001cbd1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cbd4:	83 c4 10             	add    esp,0x10
c001cbd7:	31 c0                	xor    eax,eax
c001cbd9:	83 c4 0c             	add    esp,0xc
c001cbdc:	c3                   	ret    
c001cbdd:	90                   	nop

c001cbde <ATA::powerSaving(PowerSavingLevel)>:
c001cbde:	c3                   	ret    
c001cbdf:	90                   	nop

c001cbe0 <ATA::ATA()>:
c001cbe0:	83 ec 0c             	sub    esp,0xc
c001cbe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe7:	83 ec 04             	sub    esp,0x4
c001cbea:	68 00 02 00 00       	push   0x200
c001cbef:	68 1d 33 02 c0       	push   0xc002331d
c001cbf4:	50                   	push   eax
c001cbf5:	e8 60 01 ff ff       	call   c000cd5a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cbfa:	83 c4 10             	add    esp,0x10
c001cbfd:	ba 90 32 02 c0       	mov    edx,0xc0023290
c001cc02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc06:	89 10                	mov    DWORD PTR [eax],edx
c001cc08:	90                   	nop
c001cc09:	83 c4 0c             	add    esp,0xc
c001cc0c:	c3                   	ret    
c001cc0d:	90                   	nop

c001cc0e <ATA::flush(bool)>:
c001cc0e:	53                   	push   ebx
c001cc0f:	83 ec 08             	sub    esp,0x8
c001cc12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc16:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cc1b:	83 f8 01             	cmp    eax,0x1
c001cc1e:	19 c0                	sbb    eax,eax
c001cc20:	83 e0 fd             	and    eax,0xfffffffd
c001cc23:	05 ea 00 00 00       	add    eax,0xea
c001cc28:	50                   	push   eax
c001cc29:	6a 07                	push   0x7
c001cc2b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc32:	50                   	push   eax
c001cc33:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc39:	e8 16 f1 ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc3e:	83 c4 0c             	add    esp,0xc
c001cc41:	6a 00                	push   0x0
c001cc43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc4a:	50                   	push   eax
c001cc4b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc51:	e8 e6 fb ff ff       	call   c001c83c <IDE::polling(unsigned char, unsigned int)>
c001cc56:	83 c4 18             	add    esp,0x18
c001cc59:	5b                   	pop    ebx
c001cc5a:	c3                   	ret    
c001cc5b:	90                   	nop

c001cc5c <ATA::readyForCommand()>:
c001cc5c:	56                   	push   esi
c001cc5d:	53                   	push   ebx
c001cc5e:	53                   	push   ebx
c001cc5f:	31 db                	xor    ebx,ebx
c001cc61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc65:	51                   	push   ecx
c001cc66:	6a 0c                	push   0xc
c001cc68:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cc6f:	50                   	push   eax
c001cc70:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cc76:	e8 99 f1 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001cc7b:	83 c4 10             	add    esp,0x10
c001cc7e:	a8 88                	test   al,0x88
c001cc80:	74 1f                	je     c001cca1 <ATA::readyForCommand()+0x45>
c001cc82:	43                   	inc    ebx
c001cc83:	83 fb 63             	cmp    ebx,0x63
c001cc86:	7e dd                	jle    c001cc65 <ATA::readyForCommand()+0x9>
c001cc88:	83 ec 0c             	sub    esp,0xc
c001cc8b:	6a 0a                	push   0xa
c001cc8d:	e8 26 97 ff ff       	call   c00163b8 <milliTenthSleep(unsigned int)>
c001cc92:	83 c4 10             	add    esp,0x10
c001cc95:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cc9b:	75 c8                	jne    c001cc65 <ATA::readyForCommand()+0x9>
c001cc9d:	31 c0                	xor    eax,eax
c001cc9f:	eb 02                	jmp    c001cca3 <ATA::readyForCommand()+0x47>
c001cca1:	b0 01                	mov    al,0x1
c001cca3:	5a                   	pop    edx
c001cca4:	5b                   	pop    ebx
c001cca5:	5e                   	pop    esi
c001cca6:	c3                   	ret    
c001cca7:	90                   	nop

c001cca8 <ATA::access(unsigned long long, int, void*, bool)>:
c001cca8:	55                   	push   ebp
c001cca9:	57                   	push   edi
c001ccaa:	56                   	push   esi
c001ccab:	53                   	push   ebx
c001ccac:	83 ec 2c             	sub    esp,0x2c
c001ccaf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ccb3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ccb7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ccbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccbf:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ccc3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ccc7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cccb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ccd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccd5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ccdb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ccdf:	c1 e0 06             	shl    eax,0x6
c001cce2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001ccea:	74 5d                	je     c001cd49 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001ccec:	89 fa                	mov    edx,edi
c001ccee:	89 f0                	mov    eax,esi
c001ccf0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001ccf4:	c1 ea 1c             	shr    edx,0x1c
c001ccf7:	89 d1                	mov    ecx,edx
c001ccf9:	09 c1                	or     ecx,eax
c001ccfb:	74 25                	je     c001cd22 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001ccfd:	31 ed                	xor    ebp,ebp
c001ccff:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cd06:	89 fa                	mov    edx,edi
c001cd08:	89 f0                	mov    eax,esi
c001cd0a:	0f ad d0             	shrd   eax,edx,cl
c001cd0d:	d3 ea                	shr    edx,cl
c001cd0f:	f6 c1 20             	test   cl,0x20
c001cd12:	74 02                	je     c001cd16 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cd14:	89 d0                	mov    eax,edx
c001cd16:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cd1a:	45                   	inc    ebp
c001cd1b:	83 fd 06             	cmp    ebp,0x6
c001cd1e:	75 df                	jne    c001ccff <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cd20:	eb 76                	jmp    c001cd98 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001cd22:	89 f0                	mov    eax,esi
c001cd24:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cd29:	89 fa                	mov    edx,edi
c001cd2b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd32:	0f ac d0 10          	shrd   eax,edx,0x10
c001cd36:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd3b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cd3f:	c1 ee 18             	shr    esi,0x18
c001cd42:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001cd47:	eb 56                	jmp    c001cd9f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cd49:	6a 00                	push   0x0
c001cd4b:	6a 3f                	push   0x3f
c001cd4d:	57                   	push   edi
c001cd4e:	56                   	push   esi
c001cd4f:	e8 ac 2a 00 00       	call   c001f800 <__umoddi3>
c001cd54:	83 c4 10             	add    esp,0x10
c001cd57:	40                   	inc    eax
c001cd58:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cd5c:	6a 00                	push   0x0
c001cd5e:	68 f0 03 00 00       	push   0x3f0
c001cd63:	57                   	push   edi
c001cd64:	56                   	push   esi
c001cd65:	e8 96 29 00 00       	call   c001f700 <__udivdi3>
c001cd6a:	83 c4 10             	add    esp,0x10
c001cd6d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cd72:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd79:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd7e:	6a 00                	push   0x0
c001cd80:	6a 3f                	push   0x3f
c001cd82:	57                   	push   edi
c001cd83:	56                   	push   esi
c001cd84:	e8 77 29 00 00       	call   c001f700 <__udivdi3>
c001cd89:	83 c4 10             	add    esp,0x10
c001cd8c:	83 e0 0f             	and    eax,0xf
c001cd8f:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001cd94:	89 c6                	mov    esi,eax
c001cd96:	eb 07                	jmp    c001cd9f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cd98:	31 f6                	xor    esi,esi
c001cd9a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001cd9f:	bf 01 00 00 00       	mov    edi,0x1
c001cda4:	50                   	push   eax
c001cda5:	6a 00                	push   0x0
c001cda7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdae:	50                   	push   eax
c001cdaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdb3:	e8 a4 f1 ff ff       	call   c001bf5c <IDE::enableIRQs(unsigned char, bool)>
c001cdb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdbb:	e8 9c fe ff ff       	call   c001cc5c <ATA::readyForCommand()>
c001cdc0:	83 c4 10             	add    esp,0x10
c001cdc3:	84 c0                	test   al,al
c001cdc5:	0f 84 69 02 00 00    	je     c001d034 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cdcb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cdd1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cdd7:	c1 e0 04             	shl    eax,0x4
c001cdda:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cde1:	09 c6                	or     esi,eax
c001cde3:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001cde8:	75 05                	jne    c001cdef <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cdea:	83 ce a0             	or     esi,0xffffffa0
c001cded:	eb 03                	jmp    c001cdf2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001cdef:	83 ce e0             	or     esi,0xffffffe0
c001cdf2:	89 f0                	mov    eax,esi
c001cdf4:	0f b6 f0             	movzx  esi,al
c001cdf7:	56                   	push   esi
c001cdf8:	6a 06                	push   0x6
c001cdfa:	51                   	push   ecx
c001cdfb:	52                   	push   edx
c001cdfc:	e8 53 ef ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce01:	83 c4 10             	add    esp,0x10
c001ce04:	6a 00                	push   0x0
c001ce06:	6a 01                	push   0x1
c001ce08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce0f:	50                   	push   eax
c001ce10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce16:	e8 39 ef ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce1b:	83 c4 10             	add    esp,0x10
c001ce1e:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001ce23:	83 f8 02             	cmp    eax,0x2
c001ce26:	75 6e                	jne    c001ce96 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001ce28:	6a 00                	push   0x0
c001ce2a:	6a 08                	push   0x8
c001ce2c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce33:	50                   	push   eax
c001ce34:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce3a:	e8 15 ef ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce3f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ce44:	50                   	push   eax
c001ce45:	6a 09                	push   0x9
c001ce47:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce4e:	50                   	push   eax
c001ce4f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce55:	e8 fa ee ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce5a:	83 c4 20             	add    esp,0x20
c001ce5d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ce62:	50                   	push   eax
c001ce63:	6a 0a                	push   0xa
c001ce65:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce6c:	50                   	push   eax
c001ce6d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce73:	e8 dc ee ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce78:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ce7d:	50                   	push   eax
c001ce7e:	6a 0b                	push   0xb
c001ce80:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce87:	50                   	push   eax
c001ce88:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce8e:	e8 c1 ee ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce93:	83 c4 20             	add    esp,0x20
c001ce96:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ce9b:	50                   	push   eax
c001ce9c:	6a 02                	push   0x2
c001ce9e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cea5:	50                   	push   eax
c001cea6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ceac:	e8 a3 ee ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceb1:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ceb6:	50                   	push   eax
c001ceb7:	6a 03                	push   0x3
c001ceb9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cec0:	50                   	push   eax
c001cec1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cec7:	e8 88 ee ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cecc:	83 c4 20             	add    esp,0x20
c001cecf:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ced4:	50                   	push   eax
c001ced5:	6a 04                	push   0x4
c001ced7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cede:	50                   	push   eax
c001cedf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cee5:	e8 6a ee ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceea:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ceef:	50                   	push   eax
c001cef0:	6a 05                	push   0x5
c001cef2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cef9:	50                   	push   eax
c001cefa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf00:	e8 4f ee ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf05:	83 c4 20             	add    esp,0x20
c001cf08:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cf0d:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001cf12:	74 11                	je     c001cf25 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001cf14:	b8 30 00 00 00       	mov    eax,0x30
c001cf19:	83 fa 02             	cmp    edx,0x2
c001cf1c:	75 16                	jne    c001cf34 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cf1e:	b8 34 00 00 00       	mov    eax,0x34
c001cf23:	eb 0f                	jmp    c001cf34 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cf25:	b8 20 00 00 00       	mov    eax,0x20
c001cf2a:	83 fa 02             	cmp    edx,0x2
c001cf2d:	75 05                	jne    c001cf34 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cf2f:	b8 24 00 00 00       	mov    eax,0x24
c001cf34:	50                   	push   eax
c001cf35:	6a 07                	push   0x7
c001cf37:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf3e:	50                   	push   eax
c001cf3f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf45:	e8 0a ee ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf4a:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cf4e:	83 c4 10             	add    esp,0x10
c001cf51:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cf56:	85 f6                	test   esi,esi
c001cf58:	0f 84 b3 00 00 00    	je     c001d011 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001cf5e:	50                   	push   eax
c001cf5f:	6a 01                	push   0x1
c001cf61:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf68:	50                   	push   eax
c001cf69:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf6f:	e8 c8 f8 ff ff       	call   c001c83c <IDE::polling(unsigned char, unsigned int)>
c001cf74:	83 c4 10             	add    esp,0x10
c001cf77:	0f b6 f8             	movzx  edi,al
c001cf7a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cf80:	85 ff                	test   edi,edi
c001cf82:	74 1d                	je     c001cfa1 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001cf84:	57                   	push   edi
c001cf85:	0f b6 d2             	movzx  edx,dl
c001cf88:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cf8f:	50                   	push   eax
c001cf90:	52                   	push   edx
c001cf91:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf97:	e8 e6 f7 ff ff       	call   c001c782 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cf9c:	e9 90 00 00 00       	jmp    c001d031 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001cfa1:	85 ed                	test   ebp,ebp
c001cfa3:	74 3b                	je     c001cfe0 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001cfa5:	31 c9                	xor    ecx,ecx
c001cfa7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cfab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cfaf:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001cfb3:	50                   	push   eax
c001cfb4:	50                   	push   eax
c001cfb5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfbc:	50                   	push   eax
c001cfbd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfc3:	e8 7a ed ff ff       	call   c001bd42 <IDE::getBase(unsigned char)>
c001cfc8:	89 c2                	mov    edx,eax
c001cfca:	89 f8                	mov    eax,edi
c001cfcc:	66 ef                	out    dx,ax
c001cfce:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cfd2:	83 c4 10             	add    esp,0x10
c001cfd5:	41                   	inc    ecx
c001cfd6:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cfdc:	75 c9                	jne    c001cfa7 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001cfde:	eb 23                	jmp    c001d003 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001cfe0:	0f b6 d2             	movzx  edx,dl
c001cfe3:	51                   	push   ecx
c001cfe4:	51                   	push   ecx
c001cfe5:	52                   	push   edx
c001cfe6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfec:	e8 51 ed ff ff       	call   c001bd42 <IDE::getBase(unsigned char)>
c001cff1:	b9 00 01 00 00       	mov    ecx,0x100
c001cff6:	89 c2                	mov    edx,eax
c001cff8:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cffc:	fc                   	cld    
c001cffd:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d000:	83 c4 10             	add    esp,0x10
c001d003:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d00b:	4e                   	dec    esi
c001d00c:	e9 45 ff ff ff       	jmp    c001cf56 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001d011:	31 ff                	xor    edi,edi
c001d013:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d018:	74 1a                	je     c001d034 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001d01a:	50                   	push   eax
c001d01b:	50                   	push   eax
c001d01c:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d021:	83 f8 02             	cmp    eax,0x2
c001d024:	0f 94 c0             	sete   al
c001d027:	0f b6 c0             	movzx  eax,al
c001d02a:	50                   	push   eax
c001d02b:	53                   	push   ebx
c001d02c:	e8 dd fb ff ff       	call   c001cc0e <ATA::flush(bool)>
c001d031:	83 c4 10             	add    esp,0x10
c001d034:	83 c4 2c             	add    esp,0x2c
c001d037:	89 f8                	mov    eax,edi
c001d039:	5b                   	pop    ebx
c001d03a:	5e                   	pop    esi
c001d03b:	5f                   	pop    edi
c001d03c:	5d                   	pop    ebp
c001d03d:	c3                   	ret    

c001d03e <ATA::detectCHS()>:
c001d03e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d042:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d048:	c1 e0 06             	shl    eax,0x6
c001d04b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d051:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d05b:	c7 44 24 04 74 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023274
c001d063:	e9 7f 45 ff ff       	jmp    c00115e7 <KePanic(char const*)>

c001d068 <ATA::open(int, int, void*)>:
c001d068:	53                   	push   ebx
c001d069:	83 ec 08             	sub    esp,0x8
c001d06c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d070:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d074:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d078:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d07e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d084:	c1 e0 06             	shl    eax,0x6
c001d087:	01 d0                	add    eax,edx
c001d089:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d090:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d096:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d09d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d0a7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d0ad:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d0b4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d0bb:	75 0c                	jne    c001d0c9 <ATA::open(int, int, void*)+0x61>
c001d0bd:	83 ec 0c             	sub    esp,0xc
c001d0c0:	53                   	push   ebx
c001d0c1:	e8 78 ff ff ff       	call   c001d03e <ATA::detectCHS()>
c001d0c6:	83 c4 10             	add    esp,0x10
c001d0c9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d0cf:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d0d5:	c1 e0 06             	shl    eax,0x6
c001d0d8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d0df:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d0e9:	d1 e8                	shr    eax,1
c001d0eb:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d0f1:	6a 04                	push   0x4
c001d0f3:	6a 0c                	push   0xc
c001d0f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0fc:	50                   	push   eax
c001d0fd:	52                   	push   edx
c001d0fe:	e8 51 ec ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d103:	90                   	nop
c001d104:	90                   	nop
c001d105:	6a 00                	push   0x0
c001d107:	6a 0c                	push   0xc
c001d109:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d110:	50                   	push   eax
c001d111:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d117:	e8 38 ec ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d11c:	83 c4 14             	add    esp,0x14
c001d11f:	53                   	push   ebx
c001d120:	e8 9d fc fe ff       	call   c000cdc2 <PhysicalDisk::startCache()>
c001d125:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d128:	e8 d9 0e ff ff       	call   c000e006 <createPartitionsForDisk(PhysicalDisk*)>
c001d12d:	31 c0                	xor    eax,eax
c001d12f:	83 c4 18             	add    esp,0x18
c001d132:	5b                   	pop    ebx
c001d133:	c3                   	ret    

c001d134 <combineCharAndColour(char, unsigned char)>:
c001d134:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d139:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d13f:	c1 e0 08             	shl    eax,0x8
c001d142:	09 d0                	or     eax,edx
c001d144:	c3                   	ret    

c001d145 <combineColours(unsigned char, unsigned char)>:
c001d145:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d14a:	c1 e0 04             	shl    eax,0x4
c001d14d:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d151:	c3                   	ret    

c001d152 <ATA::read(unsigned long long, int, void*)>:
c001d152:	55                   	push   ebp
c001d153:	57                   	push   edi
c001d154:	56                   	push   esi
c001d155:	be 04 00 00 00       	mov    esi,0x4
c001d15a:	53                   	push   ebx
c001d15b:	83 ec 0c             	sub    esp,0xc
c001d15e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d162:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d166:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d169:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d16d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d171:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d177:	0f 87 a1 01 00 00    	ja     c001d31e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d17d:	be 06 00 00 00       	mov    esi,0x6
c001d182:	85 c9                	test   ecx,ecx
c001d184:	0f 84 94 01 00 00    	je     c001d31e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d18a:	55                   	push   ebp
c001d18b:	55                   	push   ebp
c001d18c:	6a 00                	push   0x0
c001d18e:	51                   	push   ecx
c001d18f:	53                   	push   ebx
c001d190:	52                   	push   edx
c001d191:	50                   	push   eax
c001d192:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d196:	e8 0d fb ff ff       	call   c001cca8 <ATA::access(unsigned long long, int, void*, bool)>
c001d19b:	83 c4 20             	add    esp,0x20
c001d19e:	89 c6                	mov    esi,eax
c001d1a0:	85 c0                	test   eax,eax
c001d1a2:	0f 85 71 01 00 00    	jne    c001d319 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d1a8:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d1ae:	89 da                	mov    edx,ebx
c001d1b0:	50                   	push   eax
c001d1b1:	bd 10 27 00 00       	mov    ebp,0x2710
c001d1b6:	50                   	push   eax
c001d1b7:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d1bd:	6a 0f                	push   0xf
c001d1bf:	6a 00                	push   0x0
c001d1c1:	e8 7f ff ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001d1c6:	59                   	pop    ecx
c001d1c7:	b9 0a 00 00 00       	mov    ecx,0xa
c001d1cc:	5b                   	pop    ebx
c001d1cd:	0f b6 d8             	movzx  ebx,al
c001d1d0:	89 d0                	mov    eax,edx
c001d1d2:	53                   	push   ebx
c001d1d3:	99                   	cdq    
c001d1d4:	f7 fd                	idiv   ebp
c001d1d6:	99                   	cdq    
c001d1d7:	f7 f9                	idiv   ecx
c001d1d9:	83 c2 30             	add    edx,0x30
c001d1dc:	0f b6 d2             	movzx  edx,dl
c001d1df:	52                   	push   edx
c001d1e0:	e8 4f ff ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d1e5:	5f                   	pop    edi
c001d1e6:	bf e8 03 00 00       	mov    edi,0x3e8
c001d1eb:	5a                   	pop    edx
c001d1ec:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d1f2:	53                   	push   ebx
c001d1f3:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d1f8:	99                   	cdq    
c001d1f9:	f7 ff                	idiv   edi
c001d1fb:	99                   	cdq    
c001d1fc:	f7 f9                	idiv   ecx
c001d1fe:	8d 42 30             	lea    eax,[edx+0x30]
c001d201:	0f b6 c0             	movzx  eax,al
c001d204:	50                   	push   eax
c001d205:	e8 2a ff ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d20a:	5f                   	pop    edi
c001d20b:	bf 64 00 00 00       	mov    edi,0x64
c001d210:	5a                   	pop    edx
c001d211:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d217:	53                   	push   ebx
c001d218:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d21d:	99                   	cdq    
c001d21e:	f7 ff                	idiv   edi
c001d220:	99                   	cdq    
c001d221:	f7 f9                	idiv   ecx
c001d223:	8d 42 30             	lea    eax,[edx+0x30]
c001d226:	0f b6 c0             	movzx  eax,al
c001d229:	50                   	push   eax
c001d22a:	e8 05 ff ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d22f:	5a                   	pop    edx
c001d230:	5a                   	pop    edx
c001d231:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d237:	53                   	push   ebx
c001d238:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d23d:	99                   	cdq    
c001d23e:	f7 f9                	idiv   ecx
c001d240:	99                   	cdq    
c001d241:	f7 f9                	idiv   ecx
c001d243:	8d 42 30             	lea    eax,[edx+0x30]
c001d246:	0f b6 c0             	movzx  eax,al
c001d249:	50                   	push   eax
c001d24a:	e8 e5 fe ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d24f:	5a                   	pop    edx
c001d250:	5a                   	pop    edx
c001d251:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d257:	53                   	push   ebx
c001d258:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d25d:	99                   	cdq    
c001d25e:	f7 f9                	idiv   ecx
c001d260:	83 c2 30             	add    edx,0x30
c001d263:	0f b6 d2             	movzx  edx,dl
c001d266:	52                   	push   edx
c001d267:	e8 c8 fe ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d26c:	5a                   	pop    edx
c001d26d:	5a                   	pop    edx
c001d26e:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d274:	53                   	push   ebx
c001d275:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d27a:	99                   	cdq    
c001d27b:	f7 fd                	idiv   ebp
c001d27d:	99                   	cdq    
c001d27e:	f7 f9                	idiv   ecx
c001d280:	8d 42 30             	lea    eax,[edx+0x30]
c001d283:	0f b6 c0             	movzx  eax,al
c001d286:	50                   	push   eax
c001d287:	e8 a8 fe ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d28c:	5d                   	pop    ebp
c001d28d:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d292:	5a                   	pop    edx
c001d293:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d299:	53                   	push   ebx
c001d29a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d29f:	99                   	cdq    
c001d2a0:	f7 fd                	idiv   ebp
c001d2a2:	99                   	cdq    
c001d2a3:	f7 f9                	idiv   ecx
c001d2a5:	8d 42 30             	lea    eax,[edx+0x30]
c001d2a8:	0f b6 c0             	movzx  eax,al
c001d2ab:	50                   	push   eax
c001d2ac:	e8 83 fe ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d2b1:	5d                   	pop    ebp
c001d2b2:	5a                   	pop    edx
c001d2b3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d2b9:	53                   	push   ebx
c001d2ba:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2bf:	99                   	cdq    
c001d2c0:	f7 ff                	idiv   edi
c001d2c2:	99                   	cdq    
c001d2c3:	f7 f9                	idiv   ecx
c001d2c5:	8d 42 30             	lea    eax,[edx+0x30]
c001d2c8:	0f b6 c0             	movzx  eax,al
c001d2cb:	50                   	push   eax
c001d2cc:	e8 63 fe ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d2d1:	5f                   	pop    edi
c001d2d2:	5d                   	pop    ebp
c001d2d3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d2d9:	53                   	push   ebx
c001d2da:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2df:	99                   	cdq    
c001d2e0:	f7 f9                	idiv   ecx
c001d2e2:	99                   	cdq    
c001d2e3:	f7 f9                	idiv   ecx
c001d2e5:	8d 42 30             	lea    eax,[edx+0x30]
c001d2e8:	0f b6 c0             	movzx  eax,al
c001d2eb:	50                   	push   eax
c001d2ec:	e8 43 fe ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d2f1:	5a                   	pop    edx
c001d2f2:	5f                   	pop    edi
c001d2f3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d2f9:	53                   	push   ebx
c001d2fa:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2ff:	99                   	cdq    
c001d300:	f7 f9                	idiv   ecx
c001d302:	83 c2 30             	add    edx,0x30
c001d305:	0f b6 d2             	movzx  edx,dl
c001d308:	52                   	push   edx
c001d309:	e8 26 fe ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d30e:	83 c4 10             	add    esp,0x10
c001d311:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d317:	eb 05                	jmp    c001d31e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d319:	be 01 00 00 00       	mov    esi,0x1
c001d31e:	83 c4 0c             	add    esp,0xc
c001d321:	89 f0                	mov    eax,esi
c001d323:	5b                   	pop    ebx
c001d324:	5e                   	pop    esi
c001d325:	5f                   	pop    edi
c001d326:	5d                   	pop    ebp
c001d327:	c3                   	ret    

c001d328 <ATA::write(unsigned long long, int, void*)>:
c001d328:	55                   	push   ebp
c001d329:	57                   	push   edi
c001d32a:	56                   	push   esi
c001d32b:	be 04 00 00 00       	mov    esi,0x4
c001d330:	53                   	push   ebx
c001d331:	83 ec 0c             	sub    esp,0xc
c001d334:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d338:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d33c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d33f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d343:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d347:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d34d:	0f 87 9c 01 00 00    	ja     c001d4ef <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d353:	be 06 00 00 00       	mov    esi,0x6
c001d358:	85 c9                	test   ecx,ecx
c001d35a:	0f 84 8f 01 00 00    	je     c001d4ef <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d360:	55                   	push   ebp
c001d361:	55                   	push   ebp
c001d362:	6a 01                	push   0x1
c001d364:	51                   	push   ecx
c001d365:	53                   	push   ebx
c001d366:	52                   	push   edx
c001d367:	50                   	push   eax
c001d368:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d36c:	e8 37 f9 ff ff       	call   c001cca8 <ATA::access(unsigned long long, int, void*, bool)>
c001d371:	83 c4 20             	add    esp,0x20
c001d374:	89 c6                	mov    esi,eax
c001d376:	85 c0                	test   eax,eax
c001d378:	0f 85 6c 01 00 00    	jne    c001d4ea <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d37e:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d384:	bd 10 27 00 00       	mov    ebp,0x2710
c001d389:	50                   	push   eax
c001d38a:	50                   	push   eax
c001d38b:	6a 0f                	push   0xf
c001d38d:	6a 00                	push   0x0
c001d38f:	e8 b1 fd ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001d394:	5a                   	pop    edx
c001d395:	0f b6 d8             	movzx  ebx,al
c001d398:	59                   	pop    ecx
c001d399:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d39e:	53                   	push   ebx
c001d39f:	b9 0a 00 00 00       	mov    ecx,0xa
c001d3a4:	99                   	cdq    
c001d3a5:	f7 fd                	idiv   ebp
c001d3a7:	99                   	cdq    
c001d3a8:	f7 f9                	idiv   ecx
c001d3aa:	8d 42 30             	lea    eax,[edx+0x30]
c001d3ad:	0f b6 c0             	movzx  eax,al
c001d3b0:	50                   	push   eax
c001d3b1:	e8 7e fd ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d3b6:	5f                   	pop    edi
c001d3b7:	bf e8 03 00 00       	mov    edi,0x3e8
c001d3bc:	5a                   	pop    edx
c001d3bd:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d3c3:	53                   	push   ebx
c001d3c4:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3c9:	99                   	cdq    
c001d3ca:	f7 ff                	idiv   edi
c001d3cc:	99                   	cdq    
c001d3cd:	f7 f9                	idiv   ecx
c001d3cf:	8d 42 30             	lea    eax,[edx+0x30]
c001d3d2:	0f b6 c0             	movzx  eax,al
c001d3d5:	50                   	push   eax
c001d3d6:	e8 59 fd ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d3db:	5f                   	pop    edi
c001d3dc:	bf 64 00 00 00       	mov    edi,0x64
c001d3e1:	5a                   	pop    edx
c001d3e2:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d3e8:	53                   	push   ebx
c001d3e9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3ee:	99                   	cdq    
c001d3ef:	f7 ff                	idiv   edi
c001d3f1:	99                   	cdq    
c001d3f2:	f7 f9                	idiv   ecx
c001d3f4:	8d 42 30             	lea    eax,[edx+0x30]
c001d3f7:	0f b6 c0             	movzx  eax,al
c001d3fa:	50                   	push   eax
c001d3fb:	e8 34 fd ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d400:	5a                   	pop    edx
c001d401:	5a                   	pop    edx
c001d402:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d408:	53                   	push   ebx
c001d409:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d40e:	99                   	cdq    
c001d40f:	f7 f9                	idiv   ecx
c001d411:	99                   	cdq    
c001d412:	f7 f9                	idiv   ecx
c001d414:	8d 42 30             	lea    eax,[edx+0x30]
c001d417:	0f b6 c0             	movzx  eax,al
c001d41a:	50                   	push   eax
c001d41b:	e8 14 fd ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d420:	5a                   	pop    edx
c001d421:	5a                   	pop    edx
c001d422:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d428:	53                   	push   ebx
c001d429:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d42e:	99                   	cdq    
c001d42f:	f7 f9                	idiv   ecx
c001d431:	8d 42 30             	lea    eax,[edx+0x30]
c001d434:	0f b6 c0             	movzx  eax,al
c001d437:	50                   	push   eax
c001d438:	e8 f7 fc ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d43d:	5a                   	pop    edx
c001d43e:	5a                   	pop    edx
c001d43f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d445:	53                   	push   ebx
c001d446:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d44b:	99                   	cdq    
c001d44c:	f7 fd                	idiv   ebp
c001d44e:	99                   	cdq    
c001d44f:	f7 f9                	idiv   ecx
c001d451:	8d 42 30             	lea    eax,[edx+0x30]
c001d454:	0f b6 c0             	movzx  eax,al
c001d457:	50                   	push   eax
c001d458:	e8 d7 fc ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d45d:	5d                   	pop    ebp
c001d45e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d463:	5a                   	pop    edx
c001d464:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d46a:	53                   	push   ebx
c001d46b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d470:	99                   	cdq    
c001d471:	f7 fd                	idiv   ebp
c001d473:	99                   	cdq    
c001d474:	f7 f9                	idiv   ecx
c001d476:	8d 42 30             	lea    eax,[edx+0x30]
c001d479:	0f b6 c0             	movzx  eax,al
c001d47c:	50                   	push   eax
c001d47d:	e8 b2 fc ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d482:	5d                   	pop    ebp
c001d483:	5a                   	pop    edx
c001d484:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d48a:	53                   	push   ebx
c001d48b:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d490:	99                   	cdq    
c001d491:	f7 ff                	idiv   edi
c001d493:	99                   	cdq    
c001d494:	f7 f9                	idiv   ecx
c001d496:	8d 42 30             	lea    eax,[edx+0x30]
c001d499:	0f b6 c0             	movzx  eax,al
c001d49c:	50                   	push   eax
c001d49d:	e8 92 fc ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d4a2:	5f                   	pop    edi
c001d4a3:	5d                   	pop    ebp
c001d4a4:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d4aa:	53                   	push   ebx
c001d4ab:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4b0:	99                   	cdq    
c001d4b1:	f7 f9                	idiv   ecx
c001d4b3:	99                   	cdq    
c001d4b4:	f7 f9                	idiv   ecx
c001d4b6:	8d 42 30             	lea    eax,[edx+0x30]
c001d4b9:	0f b6 c0             	movzx  eax,al
c001d4bc:	50                   	push   eax
c001d4bd:	e8 72 fc ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d4c2:	5a                   	pop    edx
c001d4c3:	5f                   	pop    edi
c001d4c4:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d4ca:	53                   	push   ebx
c001d4cb:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4d0:	99                   	cdq    
c001d4d1:	f7 f9                	idiv   ecx
c001d4d3:	83 c2 30             	add    edx,0x30
c001d4d6:	0f b6 d2             	movzx  edx,dl
c001d4d9:	52                   	push   edx
c001d4da:	e8 55 fc ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001d4df:	83 c4 10             	add    esp,0x10
c001d4e2:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d4e8:	eb 05                	jmp    c001d4ef <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d4ea:	be 01 00 00 00       	mov    esi,0x1
c001d4ef:	83 c4 0c             	add    esp,0xc
c001d4f2:	89 f0                	mov    eax,esi
c001d4f4:	5b                   	pop    ebx
c001d4f5:	5e                   	pop    esi
c001d4f6:	5f                   	pop    edi
c001d4f7:	5d                   	pop    ebp
c001d4f8:	c3                   	ret    
c001d4f9:	90                   	nop

c001d4fa <ATAPI::write(unsigned long long, int, void*)>:
c001d4fa:	b8 03 00 00 00       	mov    eax,0x3
c001d4ff:	c3                   	ret    

c001d500 <ATAPI::close(int, int, void*)>:
c001d500:	83 ec 0c             	sub    esp,0xc
c001d503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d507:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d50d:	85 c0                	test   eax,eax
c001d50f:	74 0c                	je     c001d51d <ATAPI::close(int, int, void*)+0x1d>
c001d511:	83 ec 0c             	sub    esp,0xc
c001d514:	8b 10                	mov    edx,DWORD PTR [eax]
c001d516:	50                   	push   eax
c001d517:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d51a:	83 c4 10             	add    esp,0x10
c001d51d:	31 c0                	xor    eax,eax
c001d51f:	83 c4 0c             	add    esp,0xc
c001d522:	c3                   	ret    
c001d523:	90                   	nop

c001d524 <ATAPI::ATAPI()>:
c001d524:	83 ec 0c             	sub    esp,0xc
c001d527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d52b:	83 ec 04             	sub    esp,0x4
c001d52e:	68 00 08 00 00       	push   0x800
c001d533:	68 bd 33 02 c0       	push   0xc00233bd
c001d538:	50                   	push   eax
c001d539:	e8 1c f8 fe ff       	call   c000cd5a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d53e:	83 c4 10             	add    esp,0x10
c001d541:	ba d8 32 02 c0       	mov    edx,0xc00232d8
c001d546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d54a:	89 10                	mov    DWORD PTR [eax],edx
c001d54c:	90                   	nop
c001d54d:	83 c4 0c             	add    esp,0xc
c001d550:	c3                   	ret    
c001d551:	90                   	nop

c001d552 <ATAPI::readyForCommand()>:
c001d552:	56                   	push   esi
c001d553:	53                   	push   ebx
c001d554:	53                   	push   ebx
c001d555:	31 db                	xor    ebx,ebx
c001d557:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d55b:	51                   	push   ecx
c001d55c:	6a 0c                	push   0xc
c001d55e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d565:	50                   	push   eax
c001d566:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d56c:	e8 a3 e8 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001d571:	83 c4 10             	add    esp,0x10
c001d574:	a8 88                	test   al,0x88
c001d576:	74 25                	je     c001d59d <ATAPI::readyForCommand()+0x4b>
c001d578:	43                   	inc    ebx
c001d579:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d57f:	7e da                	jle    c001d55b <ATAPI::readyForCommand()+0x9>
c001d581:	83 ec 0c             	sub    esp,0xc
c001d584:	68 5e 01 00 00       	push   0x15e
c001d589:	e8 2a 8e ff ff       	call   c00163b8 <milliTenthSleep(unsigned int)>
c001d58e:	83 c4 10             	add    esp,0x10
c001d591:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d597:	75 c2                	jne    c001d55b <ATAPI::readyForCommand()+0x9>
c001d599:	31 c0                	xor    eax,eax
c001d59b:	eb 02                	jmp    c001d59f <ATAPI::readyForCommand()+0x4d>
c001d59d:	b0 01                	mov    al,0x1
c001d59f:	5a                   	pop    edx
c001d5a0:	5b                   	pop    ebx
c001d5a1:	5e                   	pop    esi
c001d5a2:	c3                   	ret    
c001d5a3:	90                   	nop

c001d5a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d5a4:	55                   	push   ebp
c001d5a5:	57                   	push   edi
c001d5a6:	56                   	push   esi
c001d5a7:	53                   	push   ebx
c001d5a8:	83 ec 20             	sub    esp,0x20
c001d5ab:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d5af:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d5b3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d5b7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d5bb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d5bf:	6a 01                	push   0x1
c001d5c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5c8:	50                   	push   eax
c001d5c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5cf:	e8 88 e9 ff ff       	call   c001bf5c <IDE::enableIRQs(unsigned char, bool)>
c001d5d4:	5e                   	pop    esi
c001d5d5:	58                   	pop    eax
c001d5d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5dd:	50                   	push   eax
c001d5de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5e4:	e8 45 e7 ff ff       	call   c001bd2e <IDE::prepareInterrupt(unsigned char)>
c001d5e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5ec:	e8 61 ff ff ff       	call   c001d552 <ATAPI::readyForCommand()>
c001d5f1:	83 c4 10             	add    esp,0x10
c001d5f4:	84 c0                	test   al,al
c001d5f6:	75 0a                	jne    c001d602 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d5f8:	bb 01 00 00 00       	mov    ebx,0x1
c001d5fd:	e9 60 02 00 00       	jmp    c001d862 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d602:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d608:	c1 e0 04             	shl    eax,0x4
c001d60b:	0f b6 c0             	movzx  eax,al
c001d60e:	50                   	push   eax
c001d60f:	6a 06                	push   0x6
c001d611:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d618:	50                   	push   eax
c001d619:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d61f:	e8 30 e7 ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d624:	6a 00                	push   0x0
c001d626:	6a 01                	push   0x1
c001d628:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d62f:	50                   	push   eax
c001d630:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d636:	e8 19 e7 ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d63b:	83 c4 20             	add    esp,0x20
c001d63e:	0f b6 c3             	movzx  eax,bl
c001d641:	0f b6 df             	movzx  ebx,bh
c001d644:	50                   	push   eax
c001d645:	6a 04                	push   0x4
c001d647:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d64e:	50                   	push   eax
c001d64f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d655:	e8 fa e6 ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d65a:	53                   	push   ebx
c001d65b:	6a 05                	push   0x5
c001d65d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d664:	50                   	push   eax
c001d665:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d66b:	e8 e4 e6 ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d670:	83 c4 20             	add    esp,0x20
c001d673:	68 a0 00 00 00       	push   0xa0
c001d678:	6a 07                	push   0x7
c001d67a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d681:	50                   	push   eax
c001d682:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d688:	e8 c7 e6 ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d68d:	83 c4 0c             	add    esp,0xc
c001d690:	6a 01                	push   0x1
c001d692:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d699:	50                   	push   eax
c001d69a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6a0:	e8 97 f1 ff ff       	call   c001c83c <IDE::polling(unsigned char, unsigned int)>
c001d6a5:	83 c4 10             	add    esp,0x10
c001d6a8:	0f b6 d8             	movzx  ebx,al
c001d6ab:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d6b1:	85 db                	test   ebx,ebx
c001d6b3:	74 20                	je     c001d6d5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d6b5:	53                   	push   ebx
c001d6b6:	0f b6 c0             	movzx  eax,al
c001d6b9:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d6c0:	52                   	push   edx
c001d6c1:	50                   	push   eax
c001d6c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6c8:	e8 b5 f0 ff ff       	call   c001c782 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d6cd:	83 c4 10             	add    esp,0x10
c001d6d0:	e9 8d 01 00 00       	jmp    c001d862 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d6d5:	0f b6 c0             	movzx  eax,al
c001d6d8:	53                   	push   ebx
c001d6d9:	53                   	push   ebx
c001d6da:	50                   	push   eax
c001d6db:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6e1:	e8 5c e6 ff ff       	call   c001bd42 <IDE::getBase(unsigned char)>
c001d6e6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d6ea:	b9 06 00 00 00       	mov    ecx,0x6
c001d6ef:	89 c2                	mov    edx,eax
c001d6f1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d6f4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d6f8:	83 c4 10             	add    esp,0x10
c001d6fb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d700:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d704:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d70a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d711:	85 db                	test   ebx,ebx
c001d713:	0f 84 ec 00 00 00    	je     c001d805 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d719:	51                   	push   ecx
c001d71a:	51                   	push   ecx
c001d71b:	52                   	push   edx
c001d71c:	50                   	push   eax
c001d71d:	e8 a0 e7 ff ff       	call   c001bec2 <IDE::waitInterrupt(unsigned char)>
c001d722:	83 c4 10             	add    esp,0x10
c001d725:	84 c0                	test   al,al
c001d727:	0f 84 cb fe ff ff    	je     c001d5f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d72d:	56                   	push   esi
c001d72e:	56                   	push   esi
c001d72f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d736:	50                   	push   eax
c001d737:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d73d:	e8 ec e5 ff ff       	call   c001bd2e <IDE::prepareInterrupt(unsigned char)>
c001d742:	83 c4 0c             	add    esp,0xc
c001d745:	6a 04                	push   0x4
c001d747:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d74e:	50                   	push   eax
c001d74f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d755:	e8 ba e6 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001d75a:	83 c4 0c             	add    esp,0xc
c001d75d:	89 c6                	mov    esi,eax
c001d75f:	6a 05                	push   0x5
c001d761:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d768:	50                   	push   eax
c001d769:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d76f:	e8 a0 e6 ff ff       	call   c001be14 <IDE::read(unsigned char, unsigned char)>
c001d774:	89 f1                	mov    ecx,esi
c001d776:	0f b6 c0             	movzx  eax,al
c001d779:	0f b6 f1             	movzx  esi,cl
c001d77c:	c1 e0 08             	shl    eax,0x8
c001d77f:	09 c6                	or     esi,eax
c001d781:	d1 fe                	sar    esi,1
c001d783:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d787:	83 c4 10             	add    esp,0x10
c001d78a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d78f:	74 41                	je     c001d7d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d791:	31 c9                	xor    ecx,ecx
c001d793:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d799:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7a0:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d7a4:	75 0a                	jne    c001d7b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d7a6:	01 c9                	add    ecx,ecx
c001d7a8:	01 cd                	add    ebp,ecx
c001d7aa:	4b                   	dec    ebx
c001d7ab:	e9 54 ff ff ff       	jmp    c001d704 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d7b0:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d7b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d7b9:	51                   	push   ecx
c001d7ba:	51                   	push   ecx
c001d7bb:	52                   	push   edx
c001d7bc:	50                   	push   eax
c001d7bd:	e8 80 e5 ff ff       	call   c001bd42 <IDE::getBase(unsigned char)>
c001d7c2:	89 c2                	mov    edx,eax
c001d7c4:	89 f0                	mov    eax,esi
c001d7c6:	66 ef                	out    dx,ax
c001d7c8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d7cc:	83 c4 10             	add    esp,0x10
c001d7cf:	41                   	inc    ecx
c001d7d0:	eb c1                	jmp    c001d793 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d7d2:	31 f6                	xor    esi,esi
c001d7d4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7da:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7e1:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d7e5:	75 06                	jne    c001d7ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d7e7:	01 f6                	add    esi,esi
c001d7e9:	01 f5                	add    ebp,esi
c001d7eb:	eb bd                	jmp    c001d7aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d7ed:	51                   	push   ecx
c001d7ee:	51                   	push   ecx
c001d7ef:	52                   	push   edx
c001d7f0:	50                   	push   eax
c001d7f1:	e8 4c e5 ff ff       	call   c001bd42 <IDE::getBase(unsigned char)>
c001d7f6:	89 c2                	mov    edx,eax
c001d7f8:	66 ed                	in     ax,dx
c001d7fa:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d7ff:	83 c4 10             	add    esp,0x10
c001d802:	46                   	inc    esi
c001d803:	eb cf                	jmp    c001d7d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d805:	51                   	push   ecx
c001d806:	51                   	push   ecx
c001d807:	52                   	push   edx
c001d808:	50                   	push   eax
c001d809:	e8 b4 e6 ff ff       	call   c001bec2 <IDE::waitInterrupt(unsigned char)>
c001d80e:	83 c4 10             	add    esp,0x10
c001d811:	84 c0                	test   al,al
c001d813:	0f 84 df fd ff ff    	je     c001d5f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d819:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d81e:	52                   	push   edx
c001d81f:	52                   	push   edx
c001d820:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d827:	50                   	push   eax
c001d828:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d82e:	e8 fb e4 ff ff       	call   c001bd2e <IDE::prepareInterrupt(unsigned char)>
c001d833:	83 c4 10             	add    esp,0x10
c001d836:	50                   	push   eax
c001d837:	50                   	push   eax
c001d838:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d83f:	50                   	push   eax
c001d840:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d846:	e8 f7 e4 ff ff       	call   c001bd42 <IDE::getBase(unsigned char)>
c001d84b:	8d 50 07             	lea    edx,[eax+0x7]
c001d84e:	ec                   	in     al,dx
c001d84f:	83 c4 10             	add    esp,0x10
c001d852:	a8 88                	test   al,0x88
c001d854:	74 0a                	je     c001d860 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d856:	4b                   	dec    ebx
c001d857:	75 dd                	jne    c001d836 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d859:	bb 02 00 00 00       	mov    ebx,0x2
c001d85e:	eb 02                	jmp    c001d862 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d860:	31 db                	xor    ebx,ebx
c001d862:	83 c4 1c             	add    esp,0x1c
c001d865:	89 d8                	mov    eax,ebx
c001d867:	5b                   	pop    ebx
c001d868:	5e                   	pop    esi
c001d869:	5f                   	pop    edi
c001d86a:	5d                   	pop    ebp
c001d86b:	c3                   	ret    

c001d86c <ATAPI::diskRemoved()>:
c001d86c:	53                   	push   ebx
c001d86d:	83 ec 14             	sub    esp,0x14
c001d870:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d874:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d87b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d881:	e8 70 04 ff ff       	call   c000dcf6 <LogicalDisk::unmount()>
c001d886:	58                   	pop    eax
c001d887:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d88d:	e8 46 0e ff ff       	call   c000e6d8 <VCache::writeWriteBuffer()>
c001d892:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d898:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d89c:	83 c4 18             	add    esp,0x18
c001d89f:	5b                   	pop    ebx
c001d8a0:	e9 23 0e ff ff       	jmp    c000e6c8 <VCache::invalidateReadBuffer()>
c001d8a5:	90                   	nop

c001d8a6 <ATAPI::eject()>:
c001d8a6:	57                   	push   edi
c001d8a7:	b9 03 00 00 00       	mov    ecx,0x3
c001d8ac:	53                   	push   ebx
c001d8ad:	83 ec 14             	sub    esp,0x14
c001d8b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d8b4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d8b8:	fc                   	cld    
c001d8b9:	31 c0                	xor    eax,eax
c001d8bb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d8bd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d8c2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d8c7:	50                   	push   eax
c001d8c8:	50                   	push   eax
c001d8c9:	6a 00                	push   0x0
c001d8cb:	6a 00                	push   0x0
c001d8cd:	6a 00                	push   0x0
c001d8cf:	6a 02                	push   0x2
c001d8d1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d8d5:	50                   	push   eax
c001d8d6:	53                   	push   ebx
c001d8d7:	e8 c8 fc ff ff       	call   c001d5a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d8dc:	83 c4 14             	add    esp,0x14
c001d8df:	53                   	push   ebx
c001d8e0:	e8 87 ff ff ff       	call   c001d86c <ATAPI::diskRemoved()>
c001d8e5:	83 c4 24             	add    esp,0x24
c001d8e8:	31 c0                	xor    eax,eax
c001d8ea:	5b                   	pop    ebx
c001d8eb:	5f                   	pop    edi
c001d8ec:	c3                   	ret    
c001d8ed:	90                   	nop

c001d8ee <ATAPI::diskInserted()>:
c001d8ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8f2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d8f9:	c3                   	ret    

c001d8fa <ATAPI::detectMedia()>:
c001d8fa:	56                   	push   esi
c001d8fb:	53                   	push   ebx
c001d8fc:	83 ec 28             	sub    esp,0x28
c001d8ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d903:	6a 0c                	push   0xc
c001d905:	6a 00                	push   0x0
c001d907:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d90b:	56                   	push   esi
c001d90c:	e8 df 2b fe ff       	call   c00004f0 <memset>
c001d911:	58                   	pop    eax
c001d912:	5a                   	pop    edx
c001d913:	6a 00                	push   0x0
c001d915:	6a 00                	push   0x0
c001d917:	6a 00                	push   0x0
c001d919:	6a 00                	push   0x0
c001d91b:	56                   	push   esi
c001d91c:	53                   	push   ebx
c001d91d:	e8 82 fc ff ff       	call   c001d5a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d922:	83 c4 1c             	add    esp,0x1c
c001d925:	6a 0c                	push   0xc
c001d927:	6a 00                	push   0x0
c001d929:	56                   	push   esi
c001d92a:	e8 c1 2b fe ff       	call   c00004f0 <memset>
c001d92f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d934:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d939:	59                   	pop    ecx
c001d93a:	58                   	pop    eax
c001d93b:	6a 01                	push   0x1
c001d93d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d941:	50                   	push   eax
c001d942:	6a 00                	push   0x0
c001d944:	6a 12                	push   0x12
c001d946:	56                   	push   esi
c001d947:	53                   	push   ebx
c001d948:	e8 57 fc ff ff       	call   c001d5a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d94d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d951:	83 c4 20             	add    esp,0x20
c001d954:	83 e0 7f             	and    eax,0x7f
c001d957:	83 f8 70             	cmp    eax,0x70
c001d95a:	74 15                	je     c001d971 <ATAPI::detectMedia()+0x77>
c001d95c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d963:	75 0c                	jne    c001d971 <ATAPI::detectMedia()+0x77>
c001d965:	83 ec 0c             	sub    esp,0xc
c001d968:	53                   	push   ebx
c001d969:	e8 80 ff ff ff       	call   c001d8ee <ATAPI::diskInserted()>
c001d96e:	83 c4 10             	add    esp,0x10
c001d971:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d975:	83 e0 0f             	and    eax,0xf
c001d978:	83 f8 02             	cmp    eax,0x2
c001d97b:	75 1b                	jne    c001d998 <ATAPI::detectMedia()+0x9e>
c001d97d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d982:	75 2d                	jne    c001d9b1 <ATAPI::detectMedia()+0xb7>
c001d984:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d98b:	74 24                	je     c001d9b1 <ATAPI::detectMedia()+0xb7>
c001d98d:	83 ec 0c             	sub    esp,0xc
c001d990:	53                   	push   ebx
c001d991:	e8 d6 fe ff ff       	call   c001d86c <ATAPI::diskRemoved()>
c001d996:	eb 16                	jmp    c001d9ae <ATAPI::detectMedia()+0xb4>
c001d998:	85 c0                	test   eax,eax
c001d99a:	75 15                	jne    c001d9b1 <ATAPI::detectMedia()+0xb7>
c001d99c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d9a3:	75 0c                	jne    c001d9b1 <ATAPI::detectMedia()+0xb7>
c001d9a5:	83 ec 0c             	sub    esp,0xc
c001d9a8:	53                   	push   ebx
c001d9a9:	e8 40 ff ff ff       	call   c001d8ee <ATAPI::diskInserted()>
c001d9ae:	83 c4 10             	add    esp,0x10
c001d9b1:	83 c4 24             	add    esp,0x24
c001d9b4:	5b                   	pop    ebx
c001d9b5:	5e                   	pop    esi
c001d9b6:	c3                   	ret    
c001d9b7:	90                   	nop

c001d9b8 <ATAPI::open(int, int, void*)>:
c001d9b8:	56                   	push   esi
c001d9b9:	53                   	push   ebx
c001d9ba:	50                   	push   eax
c001d9bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9c7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d9cd:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d9d3:	c1 e0 06             	shl    eax,0x6
c001d9d6:	01 d0                	add    eax,edx
c001d9d8:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d9df:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d9e5:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d9ec:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d9f6:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d9fc:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001da03:	6a 04                	push   0x4
c001da05:	6a 0c                	push   0xc
c001da07:	51                   	push   ecx
c001da08:	52                   	push   edx
c001da09:	e8 46 e3 ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da0e:	90                   	nop
c001da0f:	90                   	nop
c001da10:	6a 00                	push   0x0
c001da12:	6a 0c                	push   0xc
c001da14:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da1b:	50                   	push   eax
c001da1c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da22:	e8 2d e3 ff ff       	call   c001bd54 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da27:	83 c4 14             	add    esp,0x14
c001da2a:	68 78 01 00 00       	push   0x178
c001da2f:	e8 82 a0 fe ff       	call   c0007ab6 <malloc>
c001da34:	83 c4 0c             	add    esp,0xc
c001da37:	89 c6                	mov    esi,eax
c001da39:	6a 00                	push   0x0
c001da3b:	68 ff ff ff 7f       	push   0x7fffffff
c001da40:	6a 00                	push   0x0
c001da42:	6a 00                	push   0x0
c001da44:	53                   	push   ebx
c001da45:	68 6f 34 02 c0       	push   0xc002346f
c001da4a:	50                   	push   eax
c001da4b:	e8 e4 00 ff ff       	call   c000db34 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001da50:	83 c4 14             	add    esp,0x14
c001da53:	56                   	push   esi
c001da54:	e8 9b 01 ff ff       	call   c000dbf4 <LogicalDisk::assignDriveLetter()>
c001da59:	5a                   	pop    edx
c001da5a:	0f be c0             	movsx  eax,al
c001da5d:	59                   	pop    ecx
c001da5e:	50                   	push   eax
c001da5f:	68 c0 32 02 c0       	push   0xc00232c0
c001da64:	e8 dc ce fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001da69:	58                   	pop    eax
c001da6a:	5a                   	pop    edx
c001da6b:	56                   	push   esi
c001da6c:	53                   	push   ebx
c001da6d:	e8 1c ef fe ff       	call   c000c98e <Device::addChild(Device*)>
c001da72:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001da78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da7b:	e8 42 f3 fe ff       	call   c000cdc2 <PhysicalDisk::startCache()>
c001da80:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001da87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da8a:	e8 6b fe ff ff       	call   c001d8fa <ATAPI::detectMedia()>
c001da8f:	83 c4 14             	add    esp,0x14
c001da92:	31 c0                	xor    eax,eax
c001da94:	5b                   	pop    ebx
c001da95:	5e                   	pop    esi
c001da96:	c3                   	ret    
c001da97:	90                   	nop

c001da98 <ATAPI::read(unsigned long long, int, void*)>:
c001da98:	55                   	push   ebp
c001da99:	57                   	push   edi
c001da9a:	56                   	push   esi
c001da9b:	53                   	push   ebx
c001da9c:	83 ec 1c             	sub    esp,0x1c
c001da9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001daa3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001daa7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001daab:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dab2:	74 3c                	je     c001daf0 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001dab4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dab8:	b9 03 00 00 00       	mov    ecx,0x3
c001dabd:	fc                   	cld    
c001dabe:	31 c0                	xor    eax,eax
c001dac0:	0f ce                	bswap  esi
c001dac2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dac4:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dac9:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dacd:	89 e8                	mov    eax,ebp
c001dacf:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dad3:	50                   	push   eax
c001dad4:	50                   	push   eax
c001dad5:	55                   	push   ebp
c001dad6:	c1 e5 0b             	shl    ebp,0xb
c001dad9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dadd:	6a 00                	push   0x0
c001dadf:	55                   	push   ebp
c001dae0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001dae4:	50                   	push   eax
c001dae5:	53                   	push   ebx
c001dae6:	e8 b9 fa ff ff       	call   c001d5a4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001daeb:	83 c4 20             	add    esp,0x20
c001daee:	eb 1a                	jmp    c001db0a <ATAPI::read(unsigned long long, int, void*)+0x72>
c001daf0:	83 ec 0c             	sub    esp,0xc
c001daf3:	53                   	push   ebx
c001daf4:	e8 01 fe ff ff       	call   c001d8fa <ATAPI::detectMedia()>
c001daf9:	83 c4 10             	add    esp,0x10
c001dafc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db03:	75 af                	jne    c001dab4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001db05:	b8 02 00 00 00       	mov    eax,0x2
c001db0a:	83 c4 1c             	add    esp,0x1c
c001db0d:	5b                   	pop    ebx
c001db0e:	5e                   	pop    esi
c001db0f:	5f                   	pop    edi
c001db10:	5d                   	pop    ebp
c001db11:	c3                   	ret    

c001db12 <SATA::close(int, int, void*)>:
c001db12:	83 ec 0c             	sub    esp,0xc
c001db15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db19:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db1f:	85 c0                	test   eax,eax
c001db21:	74 0c                	je     c001db2f <SATA::close(int, int, void*)+0x1d>
c001db23:	83 ec 0c             	sub    esp,0xc
c001db26:	8b 10                	mov    edx,DWORD PTR [eax]
c001db28:	50                   	push   eax
c001db29:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db2c:	83 c4 10             	add    esp,0x10
c001db2f:	31 c0                	xor    eax,eax
c001db31:	83 c4 0c             	add    esp,0xc
c001db34:	c3                   	ret    
c001db35:	90                   	nop

c001db36 <SATA::powerSaving(PowerSavingLevel)>:
c001db36:	c3                   	ret    
c001db37:	90                   	nop

c001db38 <SATA::open(int, int, void*)>:
c001db38:	56                   	push   esi
c001db39:	53                   	push   ebx
c001db3a:	50                   	push   eax
c001db3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db43:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001db4d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001db53:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001db5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db61:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001db6b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001db71:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001db78:	e8 42 a2 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001db7d:	89 c6                	mov    esi,eax
c001db7f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001db85:	81 c6 00 10 00 00    	add    esi,0x1000
c001db8b:	e8 2f a2 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001db90:	39 c6                	cmp    esi,eax
c001db92:	74 10                	je     c001dba4 <SATA::open(int, int, void*)+0x6c>
c001db94:	83 ec 0c             	sub    esp,0xc
c001db97:	68 08 33 02 c0       	push   0xc0023308
c001db9c:	e8 46 3a ff ff       	call   c00115e7 <KePanic(char const*)>
c001dba1:	83 c4 10             	add    esp,0x10
c001dba4:	83 ec 0c             	sub    esp,0xc
c001dba7:	6a 02                	push   0x2
c001dba9:	e8 5f ba fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001dbae:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dbb4:	6a 03                	push   0x3
c001dbb6:	50                   	push   eax
c001dbb7:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dbbd:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dbc3:	e8 58 c1 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dbc8:	83 c4 14             	add    esp,0x14
c001dbcb:	53                   	push   ebx
c001dbcc:	e8 f1 f1 fe ff       	call   c000cdc2 <PhysicalDisk::startCache()>
c001dbd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbd4:	e8 2d 04 ff ff       	call   c000e006 <createPartitionsForDisk(PhysicalDisk*)>
c001dbd9:	83 c4 14             	add    esp,0x14
c001dbdc:	31 c0                	xor    eax,eax
c001dbde:	5b                   	pop    ebx
c001dbdf:	5e                   	pop    esi
c001dbe0:	c3                   	ret    
c001dbe1:	90                   	nop

c001dbe2 <SATA::SATA()>:
c001dbe2:	83 ec 0c             	sub    esp,0xc
c001dbe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbe9:	83 ec 04             	sub    esp,0x4
c001dbec:	68 00 02 00 00       	push   0x200
c001dbf1:	68 1c 33 02 c0       	push   0xc002331c
c001dbf6:	50                   	push   eax
c001dbf7:	e8 5e f1 fe ff       	call   c000cd5a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dbfc:	83 c4 10             	add    esp,0x10
c001dbff:	ba 8c 33 02 c0       	mov    edx,0xc002338c
c001dc04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc08:	89 10                	mov    DWORD PTR [eax],edx
c001dc0a:	90                   	nop
c001dc0b:	83 c4 0c             	add    esp,0xc
c001dc0e:	c3                   	ret    
c001dc0f:	90                   	nop

c001dc10 <SATA::access(unsigned long long, int, void*, bool)>:
c001dc10:	55                   	push   ebp
c001dc11:	57                   	push   edi
c001dc12:	56                   	push   esi
c001dc13:	53                   	push   ebx
c001dc14:	83 ec 2c             	sub    esp,0x2c
c001dc17:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dc1b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dc1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dc23:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dc27:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc2b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dc30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dc34:	7e 10                	jle    c001dc46 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001dc36:	83 ec 0c             	sub    esp,0xc
c001dc39:	68 2c 33 02 c0       	push   0xc002332c
c001dc3e:	e8 a4 39 ff ff       	call   c00115e7 <KePanic(char const*)>
c001dc43:	83 c4 10             	add    esp,0x10
c001dc46:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dc4c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dc52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dc58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc5c:	89 d0                	mov    eax,edx
c001dc5e:	c1 e0 07             	shl    eax,0x7
c001dc61:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dc65:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dc6f:	51                   	push   ecx
c001dc70:	8d 42 02             	lea    eax,[edx+0x2]
c001dc73:	51                   	push   ecx
c001dc74:	c1 e0 07             	shl    eax,0x7
c001dc77:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dc7b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dc7f:	50                   	push   eax
c001dc80:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dc86:	e8 91 ec ff ff       	call   c001c91c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dc8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dc8f:	83 c4 10             	add    esp,0x10
c001dc92:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001dc97:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc9b:	0f 84 57 01 00 00    	je     c001ddf8 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dca1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dca5:	c1 e0 09             	shl    eax,0x9
c001dca8:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dcad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dcb1:	74 0e                	je     c001dcc1 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001dcb3:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dcb9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dcbd:	89 c1                	mov    ecx,eax
c001dcbf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dcc1:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dcc7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dccb:	8d 42 02             	lea    eax,[edx+0x2]
c001dcce:	c1 e0 07             	shl    eax,0x7
c001dcd1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dcd5:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcd7:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dcdd:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dce3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dce7:	c1 e1 05             	shl    ecx,0x5
c001dcea:	01 c8                	add    eax,ecx
c001dcec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dcf0:	83 e1 01             	and    ecx,0x1
c001dcf3:	89 ce                	mov    esi,ecx
c001dcf5:	8a 08                	mov    cl,BYTE PTR [eax]
c001dcf7:	c1 e6 06             	shl    esi,0x6
c001dcfa:	83 e1 bf             	and    ecx,0xffffffbf
c001dcfd:	09 f1                	or     ecx,esi
c001dcff:	88 08                	mov    BYTE PTR [eax],cl
c001dd01:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dd03:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dd09:	81 c9 05 00 01 00    	or     ecx,0x10005
c001dd0f:	89 08                	mov    DWORD PTR [eax],ecx
c001dd11:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd17:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001dd1d:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001dd23:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001dd26:	50                   	push   eax
c001dd27:	68 90 00 00 00       	push   0x90
c001dd2c:	6a 00                	push   0x0
c001dd2e:	56                   	push   esi
c001dd2f:	e8 bc 27 fe ff       	call   c00004f0 <memset>
c001dd34:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001dd3a:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001dd40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dd44:	83 c4 10             	add    esp,0x10
c001dd47:	48                   	dec    eax
c001dd48:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dd4d:	89 c1                	mov    ecx,eax
c001dd4f:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001dd55:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dd5a:	09 c8                	or     eax,ecx
c001dd5c:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001dd62:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001dd68:	83 c8 80             	or     eax,0xffffff80
c001dd6b:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001dd71:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dd74:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd78:	25 00 7f 00 00       	and    eax,0x7f00
c001dd7d:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dd82:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dd87:	66 89 06             	mov    WORD PTR [esi],ax
c001dd8a:	b0 35                	mov    al,0x35
c001dd8c:	75 02                	jne    c001dd90 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001dd8e:	b0 25                	mov    al,0x25
c001dd90:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001dd93:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001dd97:	89 e8                	mov    eax,ebp
c001dd99:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001dd9d:	c1 e8 10             	shr    eax,0x10
c001dda0:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001dda3:	89 e8                	mov    eax,ebp
c001dda5:	c1 e8 18             	shr    eax,0x18
c001dda8:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ddab:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ddaf:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ddb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ddb6:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ddb9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ddbd:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ddc1:	89 d6                	mov    esi,edx
c001ddc3:	31 c0                	xor    eax,eax
c001ddc5:	c1 e6 07             	shl    esi,0x7
c001ddc8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ddcc:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ddd2:	80 e1 88             	and    cl,0x88
c001ddd5:	74 0a                	je     c001dde1 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001ddd7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dddc:	74 0a                	je     c001dde8 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ddde:	40                   	inc    eax
c001dddf:	eb eb                	jmp    c001ddcc <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001dde1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dde6:	75 17                	jne    c001ddff <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001dde8:	83 ec 0c             	sub    esp,0xc
c001ddeb:	68 65 33 02 c0       	push   0xc0023365
c001ddf0:	e8 50 cb fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001ddf5:	83 c4 10             	add    esp,0x10
c001ddf8:	b8 01 00 00 00       	mov    eax,0x1
c001ddfd:	eb 5d                	jmp    c001de5c <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001ddff:	b8 01 00 00 00       	mov    eax,0x1
c001de04:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001de08:	c1 e2 07             	shl    edx,0x7
c001de0b:	d3 e0                	shl    eax,cl
c001de0d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001de11:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001de17:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001de1d:	85 c8                	test   eax,ecx
c001de1f:	74 16                	je     c001de37 <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001de21:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001de27:	0f ba e1 1e          	bt     ecx,0x1e
c001de2b:	73 ea                	jae    c001de17 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001de2d:	83 ec 0c             	sub    esp,0xc
c001de30:	68 73 33 02 c0       	push   0xc0023373
c001de35:	eb b9                	jmp    c001ddf0 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001de37:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001de3d:	0f ba e0 1e          	bt     eax,0x1e
c001de41:	72 b5                	jb     c001ddf8 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001de43:	31 c0                	xor    eax,eax
c001de45:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001de4a:	75 10                	jne    c001de5c <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001de4c:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001de52:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001de56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001de5a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de5c:	83 c4 2c             	add    esp,0x2c
c001de5f:	5b                   	pop    ebx
c001de60:	5e                   	pop    esi
c001de61:	5f                   	pop    edi
c001de62:	5d                   	pop    ebp
c001de63:	c3                   	ret    

c001de64 <SATA::read(unsigned long long, int, void*)>:
c001de64:	55                   	push   ebp
c001de65:	57                   	push   edi
c001de66:	56                   	push   esi
c001de67:	be 04 00 00 00       	mov    esi,0x4
c001de6c:	53                   	push   ebx
c001de6d:	83 ec 0c             	sub    esp,0xc
c001de70:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001de74:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de78:	8d 7b ff             	lea    edi,[ebx-0x1]
c001de7b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de7f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001de83:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001de89:	0f 87 1a 02 00 00    	ja     c001e0a9 <SATA::read(unsigned long long, int, void*)+0x245>
c001de8f:	be 06 00 00 00       	mov    esi,0x6
c001de94:	85 c9                	test   ecx,ecx
c001de96:	0f 84 0d 02 00 00    	je     c001e0a9 <SATA::read(unsigned long long, int, void*)+0x245>
c001de9c:	56                   	push   esi
c001de9d:	56                   	push   esi
c001de9e:	6a 00                	push   0x0
c001dea0:	51                   	push   ecx
c001dea1:	53                   	push   ebx
c001dea2:	52                   	push   edx
c001dea3:	50                   	push   eax
c001dea4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dea8:	e8 63 fd ff ff       	call   c001dc10 <SATA::access(unsigned long long, int, void*, bool)>
c001dead:	83 c4 20             	add    esp,0x20
c001deb0:	89 c6                	mov    esi,eax
c001deb2:	85 c0                	test   eax,eax
c001deb4:	0f 85 ea 01 00 00    	jne    c001e0a4 <SATA::read(unsigned long long, int, void*)+0x240>
c001deba:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001dec0:	bb 0a 00 00 00       	mov    ebx,0xa
c001dec5:	50                   	push   eax
c001dec6:	50                   	push   eax
c001dec7:	6a 0f                	push   0xf
c001dec9:	6a 00                	push   0x0
c001decb:	e8 75 f2 ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001ded0:	5a                   	pop    edx
c001ded1:	0f b6 c0             	movzx  eax,al
c001ded4:	59                   	pop    ecx
c001ded5:	b9 10 27 00 00       	mov    ecx,0x2710
c001deda:	50                   	push   eax
c001dedb:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dee0:	99                   	cdq    
c001dee1:	f7 f9                	idiv   ecx
c001dee3:	99                   	cdq    
c001dee4:	f7 fb                	idiv   ebx
c001dee6:	8d 42 30             	lea    eax,[edx+0x30]
c001dee9:	0f b6 c0             	movzx  eax,al
c001deec:	50                   	push   eax
c001deed:	e8 42 f2 ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001def2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001def8:	5f                   	pop    edi
c001def9:	5d                   	pop    ebp
c001defa:	bd e8 03 00 00       	mov    ebp,0x3e8
c001deff:	6a 0f                	push   0xf
c001df01:	6a 00                	push   0x0
c001df03:	e8 3d f2 ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001df08:	5a                   	pop    edx
c001df09:	0f b6 c0             	movzx  eax,al
c001df0c:	59                   	pop    ecx
c001df0d:	50                   	push   eax
c001df0e:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df13:	99                   	cdq    
c001df14:	f7 fd                	idiv   ebp
c001df16:	99                   	cdq    
c001df17:	f7 fb                	idiv   ebx
c001df19:	8d 42 30             	lea    eax,[edx+0x30]
c001df1c:	0f b6 c0             	movzx  eax,al
c001df1f:	50                   	push   eax
c001df20:	e8 0f f2 ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001df25:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001df2b:	5f                   	pop    edi
c001df2c:	bf 64 00 00 00       	mov    edi,0x64
c001df31:	58                   	pop    eax
c001df32:	6a 0f                	push   0xf
c001df34:	6a 00                	push   0x0
c001df36:	e8 0a f2 ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001df3b:	5a                   	pop    edx
c001df3c:	0f b6 c0             	movzx  eax,al
c001df3f:	59                   	pop    ecx
c001df40:	50                   	push   eax
c001df41:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df46:	99                   	cdq    
c001df47:	f7 ff                	idiv   edi
c001df49:	99                   	cdq    
c001df4a:	f7 fb                	idiv   ebx
c001df4c:	8d 42 30             	lea    eax,[edx+0x30]
c001df4f:	0f b6 c0             	movzx  eax,al
c001df52:	50                   	push   eax
c001df53:	e8 dc f1 ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001df58:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001df5e:	58                   	pop    eax
c001df5f:	5a                   	pop    edx
c001df60:	6a 0f                	push   0xf
c001df62:	6a 00                	push   0x0
c001df64:	e8 dc f1 ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001df69:	59                   	pop    ecx
c001df6a:	0f b6 c0             	movzx  eax,al
c001df6d:	5a                   	pop    edx
c001df6e:	50                   	push   eax
c001df6f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df74:	99                   	cdq    
c001df75:	f7 fb                	idiv   ebx
c001df77:	99                   	cdq    
c001df78:	f7 fb                	idiv   ebx
c001df7a:	8d 42 30             	lea    eax,[edx+0x30]
c001df7d:	0f b6 c0             	movzx  eax,al
c001df80:	50                   	push   eax
c001df81:	e8 ae f1 ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001df86:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001df8c:	59                   	pop    ecx
c001df8d:	58                   	pop    eax
c001df8e:	6a 0f                	push   0xf
c001df90:	6a 00                	push   0x0
c001df92:	e8 ae f1 ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001df97:	5a                   	pop    edx
c001df98:	0f b6 c0             	movzx  eax,al
c001df9b:	59                   	pop    ecx
c001df9c:	50                   	push   eax
c001df9d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfa2:	99                   	cdq    
c001dfa3:	f7 fb                	idiv   ebx
c001dfa5:	8d 42 30             	lea    eax,[edx+0x30]
c001dfa8:	0f b6 c0             	movzx  eax,al
c001dfab:	50                   	push   eax
c001dfac:	e8 83 f1 ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001dfb1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dfb7:	58                   	pop    eax
c001dfb8:	5a                   	pop    edx
c001dfb9:	6a 0f                	push   0xf
c001dfbb:	6a 00                	push   0x0
c001dfbd:	e8 83 f1 ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001dfc2:	59                   	pop    ecx
c001dfc3:	0f b6 c0             	movzx  eax,al
c001dfc6:	5a                   	pop    edx
c001dfc7:	b9 10 27 00 00       	mov    ecx,0x2710
c001dfcc:	50                   	push   eax
c001dfcd:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001dfd2:	99                   	cdq    
c001dfd3:	f7 f9                	idiv   ecx
c001dfd5:	99                   	cdq    
c001dfd6:	f7 fb                	idiv   ebx
c001dfd8:	8d 42 30             	lea    eax,[edx+0x30]
c001dfdb:	0f b6 c0             	movzx  eax,al
c001dfde:	50                   	push   eax
c001dfdf:	e8 50 f1 ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001dfe4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dfea:	59                   	pop    ecx
c001dfeb:	58                   	pop    eax
c001dfec:	6a 0f                	push   0xf
c001dfee:	6a 00                	push   0x0
c001dff0:	e8 50 f1 ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001dff5:	5a                   	pop    edx
c001dff6:	0f b6 c0             	movzx  eax,al
c001dff9:	59                   	pop    ecx
c001dffa:	50                   	push   eax
c001dffb:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e000:	99                   	cdq    
c001e001:	f7 fd                	idiv   ebp
c001e003:	99                   	cdq    
c001e004:	f7 fb                	idiv   ebx
c001e006:	8d 42 30             	lea    eax,[edx+0x30]
c001e009:	0f b6 c0             	movzx  eax,al
c001e00c:	50                   	push   eax
c001e00d:	e8 22 f1 ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001e012:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e018:	5d                   	pop    ebp
c001e019:	58                   	pop    eax
c001e01a:	6a 0f                	push   0xf
c001e01c:	6a 00                	push   0x0
c001e01e:	e8 22 f1 ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001e023:	5a                   	pop    edx
c001e024:	0f b6 c0             	movzx  eax,al
c001e027:	59                   	pop    ecx
c001e028:	50                   	push   eax
c001e029:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e02e:	99                   	cdq    
c001e02f:	f7 ff                	idiv   edi
c001e031:	99                   	cdq    
c001e032:	f7 fb                	idiv   ebx
c001e034:	8d 42 30             	lea    eax,[edx+0x30]
c001e037:	0f b6 c0             	movzx  eax,al
c001e03a:	50                   	push   eax
c001e03b:	e8 f4 f0 ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001e040:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e046:	5f                   	pop    edi
c001e047:	5d                   	pop    ebp
c001e048:	6a 0f                	push   0xf
c001e04a:	6a 00                	push   0x0
c001e04c:	e8 f4 f0 ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001e051:	5a                   	pop    edx
c001e052:	0f b6 c0             	movzx  eax,al
c001e055:	59                   	pop    ecx
c001e056:	50                   	push   eax
c001e057:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e05c:	99                   	cdq    
c001e05d:	f7 fb                	idiv   ebx
c001e05f:	99                   	cdq    
c001e060:	f7 fb                	idiv   ebx
c001e062:	8d 42 30             	lea    eax,[edx+0x30]
c001e065:	0f b6 c0             	movzx  eax,al
c001e068:	50                   	push   eax
c001e069:	e8 c6 f0 ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001e06e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e074:	5f                   	pop    edi
c001e075:	5d                   	pop    ebp
c001e076:	6a 0f                	push   0xf
c001e078:	6a 00                	push   0x0
c001e07a:	e8 c6 f0 ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001e07f:	5a                   	pop    edx
c001e080:	0f b6 c0             	movzx  eax,al
c001e083:	59                   	pop    ecx
c001e084:	50                   	push   eax
c001e085:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e08a:	99                   	cdq    
c001e08b:	f7 fb                	idiv   ebx
c001e08d:	83 c2 30             	add    edx,0x30
c001e090:	0f b6 d2             	movzx  edx,dl
c001e093:	52                   	push   edx
c001e094:	e8 9b f0 ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001e099:	83 c4 10             	add    esp,0x10
c001e09c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e0a2:	eb 05                	jmp    c001e0a9 <SATA::read(unsigned long long, int, void*)+0x245>
c001e0a4:	be 01 00 00 00       	mov    esi,0x1
c001e0a9:	83 c4 0c             	add    esp,0xc
c001e0ac:	89 f0                	mov    eax,esi
c001e0ae:	5b                   	pop    ebx
c001e0af:	5e                   	pop    esi
c001e0b0:	5f                   	pop    edi
c001e0b1:	5d                   	pop    ebp
c001e0b2:	c3                   	ret    
c001e0b3:	90                   	nop

c001e0b4 <SATA::write(unsigned long long, int, void*)>:
c001e0b4:	55                   	push   ebp
c001e0b5:	b8 04 00 00 00       	mov    eax,0x4
c001e0ba:	57                   	push   edi
c001e0bb:	56                   	push   esi
c001e0bc:	53                   	push   ebx
c001e0bd:	83 ec 1c             	sub    esp,0x1c
c001e0c0:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e0c4:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e0c8:	8d 75 ff             	lea    esi,[ebp-0x1]
c001e0cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e0cf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001e0d3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e0d9:	0f 87 32 02 00 00    	ja     c001e311 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e0df:	b8 06 00 00 00       	mov    eax,0x6
c001e0e4:	85 ff                	test   edi,edi
c001e0e6:	0f 84 25 02 00 00    	je     c001e311 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e0ec:	89 ee                	mov    esi,ebp
c001e0ee:	c1 e6 09             	shl    esi,0x9
c001e0f1:	01 fe                	add    esi,edi
c001e0f3:	89 c8                	mov    eax,ecx
c001e0f5:	89 da                	mov    edx,ebx
c001e0f7:	83 c0 01             	add    eax,0x1
c001e0fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e0fe:	83 d2 00             	adc    edx,0x0
c001e101:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e105:	50                   	push   eax
c001e106:	50                   	push   eax
c001e107:	6a 01                	push   0x1
c001e109:	57                   	push   edi
c001e10a:	81 c7 00 02 00 00    	add    edi,0x200
c001e110:	6a 01                	push   0x1
c001e112:	53                   	push   ebx
c001e113:	51                   	push   ecx
c001e114:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e118:	e8 f3 fa ff ff       	call   c001dc10 <SATA::access(unsigned long long, int, void*, bool)>
c001e11d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e121:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e125:	83 c4 20             	add    esp,0x20
c001e128:	39 f7                	cmp    edi,esi
c001e12a:	75 c7                	jne    c001e0f3 <SATA::write(unsigned long long, int, void*)+0x3f>
c001e12c:	bb 0a 00 00 00       	mov    ebx,0xa
c001e131:	01 2d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebp
c001e137:	bd 10 27 00 00       	mov    ebp,0x2710
c001e13c:	50                   	push   eax
c001e13d:	50                   	push   eax
c001e13e:	6a 0f                	push   0xf
c001e140:	6a 00                	push   0x0
c001e142:	e8 fe ef ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001e147:	5a                   	pop    edx
c001e148:	0f b6 c0             	movzx  eax,al
c001e14b:	59                   	pop    ecx
c001e14c:	50                   	push   eax
c001e14d:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e152:	99                   	cdq    
c001e153:	f7 fd                	idiv   ebp
c001e155:	99                   	cdq    
c001e156:	f7 fb                	idiv   ebx
c001e158:	8d 42 30             	lea    eax,[edx+0x30]
c001e15b:	0f b6 c0             	movzx  eax,al
c001e15e:	50                   	push   eax
c001e15f:	e8 d0 ef ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001e164:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e16a:	5e                   	pop    esi
c001e16b:	5f                   	pop    edi
c001e16c:	bf e8 03 00 00       	mov    edi,0x3e8
c001e171:	6a 0f                	push   0xf
c001e173:	6a 00                	push   0x0
c001e175:	e8 cb ef ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001e17a:	5a                   	pop    edx
c001e17b:	0f b6 c0             	movzx  eax,al
c001e17e:	59                   	pop    ecx
c001e17f:	50                   	push   eax
c001e180:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e185:	99                   	cdq    
c001e186:	f7 ff                	idiv   edi
c001e188:	99                   	cdq    
c001e189:	f7 fb                	idiv   ebx
c001e18b:	8d 42 30             	lea    eax,[edx+0x30]
c001e18e:	0f b6 c0             	movzx  eax,al
c001e191:	50                   	push   eax
c001e192:	e8 9d ef ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001e197:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e19d:	5e                   	pop    esi
c001e19e:	be 64 00 00 00       	mov    esi,0x64
c001e1a3:	58                   	pop    eax
c001e1a4:	6a 0f                	push   0xf
c001e1a6:	6a 00                	push   0x0
c001e1a8:	e8 98 ef ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001e1ad:	5a                   	pop    edx
c001e1ae:	0f b6 c0             	movzx  eax,al
c001e1b1:	59                   	pop    ecx
c001e1b2:	50                   	push   eax
c001e1b3:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1b8:	99                   	cdq    
c001e1b9:	f7 fe                	idiv   esi
c001e1bb:	99                   	cdq    
c001e1bc:	f7 fb                	idiv   ebx
c001e1be:	8d 42 30             	lea    eax,[edx+0x30]
c001e1c1:	0f b6 c0             	movzx  eax,al
c001e1c4:	50                   	push   eax
c001e1c5:	e8 6a ef ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001e1ca:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e1d0:	58                   	pop    eax
c001e1d1:	5a                   	pop    edx
c001e1d2:	6a 0f                	push   0xf
c001e1d4:	6a 00                	push   0x0
c001e1d6:	e8 6a ef ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001e1db:	59                   	pop    ecx
c001e1dc:	0f b6 c0             	movzx  eax,al
c001e1df:	5a                   	pop    edx
c001e1e0:	50                   	push   eax
c001e1e1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1e6:	99                   	cdq    
c001e1e7:	f7 fb                	idiv   ebx
c001e1e9:	99                   	cdq    
c001e1ea:	f7 fb                	idiv   ebx
c001e1ec:	8d 42 30             	lea    eax,[edx+0x30]
c001e1ef:	0f b6 c0             	movzx  eax,al
c001e1f2:	50                   	push   eax
c001e1f3:	e8 3c ef ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001e1f8:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e1fe:	59                   	pop    ecx
c001e1ff:	58                   	pop    eax
c001e200:	6a 0f                	push   0xf
c001e202:	6a 00                	push   0x0
c001e204:	e8 3c ef ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001e209:	5a                   	pop    edx
c001e20a:	0f b6 c0             	movzx  eax,al
c001e20d:	59                   	pop    ecx
c001e20e:	50                   	push   eax
c001e20f:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e214:	99                   	cdq    
c001e215:	f7 fb                	idiv   ebx
c001e217:	83 c2 30             	add    edx,0x30
c001e21a:	0f b6 d2             	movzx  edx,dl
c001e21d:	52                   	push   edx
c001e21e:	e8 11 ef ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001e223:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e229:	58                   	pop    eax
c001e22a:	5a                   	pop    edx
c001e22b:	6a 0f                	push   0xf
c001e22d:	6a 00                	push   0x0
c001e22f:	e8 11 ef ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001e234:	59                   	pop    ecx
c001e235:	0f b6 c0             	movzx  eax,al
c001e238:	5a                   	pop    edx
c001e239:	50                   	push   eax
c001e23a:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e23f:	99                   	cdq    
c001e240:	f7 fd                	idiv   ebp
c001e242:	99                   	cdq    
c001e243:	f7 fb                	idiv   ebx
c001e245:	8d 42 30             	lea    eax,[edx+0x30]
c001e248:	0f b6 c0             	movzx  eax,al
c001e24b:	50                   	push   eax
c001e24c:	e8 e3 ee ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001e251:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e257:	59                   	pop    ecx
c001e258:	5d                   	pop    ebp
c001e259:	6a 0f                	push   0xf
c001e25b:	6a 00                	push   0x0
c001e25d:	e8 e3 ee ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001e262:	5a                   	pop    edx
c001e263:	0f b6 c0             	movzx  eax,al
c001e266:	59                   	pop    ecx
c001e267:	50                   	push   eax
c001e268:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e26d:	99                   	cdq    
c001e26e:	f7 ff                	idiv   edi
c001e270:	99                   	cdq    
c001e271:	f7 fb                	idiv   ebx
c001e273:	8d 42 30             	lea    eax,[edx+0x30]
c001e276:	0f b6 c0             	movzx  eax,al
c001e279:	50                   	push   eax
c001e27a:	e8 b5 ee ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001e27f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e285:	5f                   	pop    edi
c001e286:	5d                   	pop    ebp
c001e287:	6a 0f                	push   0xf
c001e289:	6a 00                	push   0x0
c001e28b:	e8 b5 ee ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001e290:	5a                   	pop    edx
c001e291:	0f b6 c0             	movzx  eax,al
c001e294:	59                   	pop    ecx
c001e295:	50                   	push   eax
c001e296:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e29b:	99                   	cdq    
c001e29c:	f7 fe                	idiv   esi
c001e29e:	99                   	cdq    
c001e29f:	f7 fb                	idiv   ebx
c001e2a1:	8d 42 30             	lea    eax,[edx+0x30]
c001e2a4:	0f b6 c0             	movzx  eax,al
c001e2a7:	50                   	push   eax
c001e2a8:	e8 87 ee ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001e2ad:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e2b3:	5e                   	pop    esi
c001e2b4:	5f                   	pop    edi
c001e2b5:	6a 0f                	push   0xf
c001e2b7:	6a 00                	push   0x0
c001e2b9:	e8 87 ee ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001e2be:	5d                   	pop    ebp
c001e2bf:	0f b6 c0             	movzx  eax,al
c001e2c2:	5a                   	pop    edx
c001e2c3:	50                   	push   eax
c001e2c4:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2c9:	99                   	cdq    
c001e2ca:	f7 fb                	idiv   ebx
c001e2cc:	99                   	cdq    
c001e2cd:	f7 fb                	idiv   ebx
c001e2cf:	8d 42 30             	lea    eax,[edx+0x30]
c001e2d2:	0f b6 c0             	movzx  eax,al
c001e2d5:	50                   	push   eax
c001e2d6:	e8 59 ee ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001e2db:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e2e1:	59                   	pop    ecx
c001e2e2:	5e                   	pop    esi
c001e2e3:	6a 0f                	push   0xf
c001e2e5:	6a 00                	push   0x0
c001e2e7:	e8 59 ee ff ff       	call   c001d145 <combineColours(unsigned char, unsigned char)>
c001e2ec:	5f                   	pop    edi
c001e2ed:	0f b6 c0             	movzx  eax,al
c001e2f0:	5d                   	pop    ebp
c001e2f1:	50                   	push   eax
c001e2f2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2f7:	99                   	cdq    
c001e2f8:	f7 fb                	idiv   ebx
c001e2fa:	83 c2 30             	add    edx,0x30
c001e2fd:	0f b6 d2             	movzx  edx,dl
c001e300:	52                   	push   edx
c001e301:	e8 2e ee ff ff       	call   c001d134 <combineCharAndColour(char, unsigned char)>
c001e306:	83 c4 10             	add    esp,0x10
c001e309:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e30f:	31 c0                	xor    eax,eax
c001e311:	83 c4 1c             	add    esp,0x1c
c001e314:	5b                   	pop    ebx
c001e315:	5e                   	pop    esi
c001e316:	5f                   	pop    edi
c001e317:	5d                   	pop    ebp
c001e318:	c3                   	ret    
c001e319:	90                   	nop

c001e31a <SATAPI::write(unsigned long long, int, void*)>:
c001e31a:	b8 03 00 00 00       	mov    eax,0x3
c001e31f:	c3                   	ret    

c001e320 <SATAPI::close(int, int, void*)>:
c001e320:	83 ec 0c             	sub    esp,0xc
c001e323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e327:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e32d:	85 c0                	test   eax,eax
c001e32f:	74 0c                	je     c001e33d <SATAPI::close(int, int, void*)+0x1d>
c001e331:	83 ec 0c             	sub    esp,0xc
c001e334:	8b 10                	mov    edx,DWORD PTR [eax]
c001e336:	50                   	push   eax
c001e337:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e33a:	83 c4 10             	add    esp,0x10
c001e33d:	31 c0                	xor    eax,eax
c001e33f:	83 c4 0c             	add    esp,0xc
c001e342:	c3                   	ret    
c001e343:	90                   	nop

c001e344 <SATAPI::SATAPI()>:
c001e344:	83 ec 0c             	sub    esp,0xc
c001e347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e34b:	83 ec 04             	sub    esp,0x4
c001e34e:	68 00 08 00 00       	push   0x800
c001e353:	68 bc 33 02 c0       	push   0xc00233bc
c001e358:	50                   	push   eax
c001e359:	e8 fc e9 fe ff       	call   c000cd5a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e35e:	83 c4 10             	add    esp,0x10
c001e361:	ba b0 34 02 c0       	mov    edx,0xc00234b0
c001e366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e36a:	89 10                	mov    DWORD PTR [eax],edx
c001e36c:	90                   	nop
c001e36d:	83 c4 0c             	add    esp,0xc
c001e370:	c3                   	ret    
c001e371:	90                   	nop

c001e372 <SATAPI::diskRemoved()>:
c001e372:	c3                   	ret    
c001e373:	90                   	nop

c001e374 <SATAPI::diskInserted()>:
c001e374:	83 ec 18             	sub    esp,0x18
c001e377:	68 c8 33 02 c0       	push   0xc00233c8
c001e37c:	e8 c4 c5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e385:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e38c:	83 c4 1c             	add    esp,0x1c
c001e38f:	c3                   	ret    

c001e390 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e390:	55                   	push   ebp
c001e391:	57                   	push   edi
c001e392:	56                   	push   esi
c001e393:	53                   	push   ebx
c001e394:	83 ec 34             	sub    esp,0x34
c001e397:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e39b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e39f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e3a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e3a7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e3ab:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e3b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e3b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e3bb:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e3c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e3c5:	83 c0 02             	add    eax,0x2
c001e3c8:	c1 e0 07             	shl    eax,0x7
c001e3cb:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e3cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e3d7:	c1 e0 07             	shl    eax,0x7
c001e3da:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e3de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e3e2:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e3ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e3f0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e3f6:	e8 21 e5 ff ff       	call   c001c91c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e3fb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e3ff:	83 c4 10             	add    esp,0x10
c001e402:	b8 01 00 00 00       	mov    eax,0x1
c001e407:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e40c:	0f 84 53 02 00 00    	je     c001e665 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e412:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e41c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e41e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e424:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e42a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e42e:	c1 e1 05             	shl    ecx,0x5
c001e431:	01 c8                	add    eax,ecx
c001e433:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e435:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e43b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e441:	89 08                	mov    DWORD PTR [eax],ecx
c001e443:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e449:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e44f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e455:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e458:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e45b:	50                   	push   eax
c001e45c:	68 90 00 00 00       	push   0x90
c001e461:	6a 00                	push   0x0
c001e463:	53                   	push   ebx
c001e464:	e8 87 20 fe ff       	call   c00004f0 <memset>
c001e469:	b9 0c 00 00 00       	mov    ecx,0xc
c001e46e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e472:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e474:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e47a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e47e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e484:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e488:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e48c:	48                   	dec    eax
c001e48d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e492:	89 c1                	mov    ecx,eax
c001e494:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e49a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e49f:	09 c8                	or     eax,ecx
c001e4a1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e4a7:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e4ad:	83 c8 80             	or     eax,0xffffff80
c001e4b0:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e4b6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e4b9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e4bd:	25 00 7f 00 00       	and    eax,0x7f00
c001e4c2:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e4c6:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e4cb:	66 89 03             	mov    WORD PTR [ebx],ax
c001e4ce:	89 d0                	mov    eax,edx
c001e4d0:	c1 ea 18             	shr    edx,0x18
c001e4d3:	c1 e8 10             	shr    eax,0x10
c001e4d6:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e4d9:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e4dc:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e4e0:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e4e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e4e7:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e4ea:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e4ee:	83 c4 10             	add    esp,0x10
c001e4f1:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e4f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e4f9:	31 c0                	xor    eax,eax
c001e4fb:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e501:	80 e1 88             	and    cl,0x88
c001e504:	74 0a                	je     c001e510 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e506:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e50b:	74 0a                	je     c001e517 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e50d:	40                   	inc    eax
c001e50e:	eb eb                	jmp    c001e4fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e510:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e515:	75 43                	jne    c001e55a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e517:	83 ec 0c             	sub    esp,0xc
c001e51a:	68 e0 33 02 c0       	push   0xc00233e0
c001e51f:	e8 21 c4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e524:	58                   	pop    eax
c001e525:	5a                   	pop    edx
c001e526:	68 f5 33 02 c0       	push   0xc00233f5
c001e52b:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e531:	e8 70 a5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e536:	59                   	pop    ecx
c001e537:	5b                   	pop    ebx
c001e538:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e53c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e542:	e8 6f e4 ff ff       	call   c001c9b6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e547:	5e                   	pop    esi
c001e548:	5f                   	pop    edi
c001e549:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e54d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e553:	e8 3e e4 ff ff       	call   c001c996 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e558:	eb 48                	jmp    c001e5a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e55a:	be 01 00 00 00       	mov    esi,0x1
c001e55f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e563:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e567:	d3 e6                	shl    esi,cl
c001e569:	c1 e7 07             	shl    edi,0x7
c001e56c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e572:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e577:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e57b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e581:	85 c6                	test   esi,eax
c001e583:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e589:	0f 84 a3 00 00 00    	je     c001e632 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e58f:	0f ba e0 1e          	bt     eax,0x1e
c001e593:	73 1a                	jae    c001e5af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e595:	83 ec 0c             	sub    esp,0xc
c001e598:	68 07 34 02 c0       	push   0xc0023407
c001e59d:	e8 a3 c3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e5a2:	83 c4 10             	add    esp,0x10
c001e5a5:	b8 01 00 00 00       	mov    eax,0x1
c001e5aa:	e9 b6 00 00 00       	jmp    c001e665 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e5af:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e5b5:	83 f8 0d             	cmp    eax,0xd
c001e5b8:	77 0a                	ja     c001e5c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e5ba:	83 ec 0c             	sub    esp,0xc
c001e5bd:	68 c8 00 00 00       	push   0xc8
c001e5c2:	eb 28                	jmp    c001e5ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e5c4:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e5ca:	83 f8 0d             	cmp    eax,0xd
c001e5cd:	77 0a                	ja     c001e5d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e5cf:	83 ec 0c             	sub    esp,0xc
c001e5d2:	68 58 02 00 00       	push   0x258
c001e5d7:	eb 13                	jmp    c001e5ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e5d9:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e5df:	83 f8 06             	cmp    eax,0x6
c001e5e2:	77 10                	ja     c001e5f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e5e4:	83 ec 0c             	sub    esp,0xc
c001e5e7:	68 dc 05 00 00       	push   0x5dc
c001e5ec:	e8 c7 7d ff ff       	call   c00163b8 <milliTenthSleep(unsigned int)>
c001e5f1:	83 c4 10             	add    esp,0x10
c001e5f4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e5f8:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e5fb:	75 06                	jne    c001e603 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e5fd:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e601:	74 15                	je     c001e618 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e603:	83 fb 06             	cmp    ebx,0x6
c001e606:	77 10                	ja     c001e618 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e608:	83 ec 0c             	sub    esp,0xc
c001e60b:	68 c4 09 00 00       	push   0x9c4
c001e610:	e8 a3 7d ff ff       	call   c00163b8 <milliTenthSleep(unsigned int)>
c001e615:	83 c4 10             	add    esp,0x10
c001e618:	43                   	inc    ebx
c001e619:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e61f:	0f 85 56 ff ff ff    	jne    c001e57b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e625:	83 ec 0c             	sub    esp,0xc
c001e628:	68 1a 34 02 c0       	push   0xc002341a
c001e62d:	e9 6b ff ff ff       	jmp    c001e59d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e632:	0f ba e0 1e          	bt     eax,0x1e
c001e636:	73 0d                	jae    c001e645 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e638:	83 ec 0c             	sub    esp,0xc
c001e63b:	68 2e 34 02 c0       	push   0xc002342e
c001e640:	e9 58 ff ff ff       	jmp    c001e59d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e645:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e64a:	74 17                	je     c001e663 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e64c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e651:	74 10                	je     c001e663 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e653:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e659:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e65d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e661:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e663:	31 c0                	xor    eax,eax
c001e665:	83 c4 2c             	add    esp,0x2c
c001e668:	5b                   	pop    ebx
c001e669:	5e                   	pop    esi
c001e66a:	5f                   	pop    edi
c001e66b:	5d                   	pop    ebp
c001e66c:	c3                   	ret    
c001e66d:	90                   	nop

c001e66e <SATAPI::eject()>:
c001e66e:	57                   	push   edi
c001e66f:	b9 03 00 00 00       	mov    ecx,0x3
c001e674:	83 ec 18             	sub    esp,0x18
c001e677:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e67b:	fc                   	cld    
c001e67c:	31 c0                	xor    eax,eax
c001e67e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e680:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e685:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e68a:	50                   	push   eax
c001e68b:	6a 00                	push   0x0
c001e68d:	6a 00                	push   0x0
c001e68f:	6a 00                	push   0x0
c001e691:	6a 00                	push   0x0
c001e693:	6a 02                	push   0x2
c001e695:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e699:	50                   	push   eax
c001e69a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e69e:	e8 ed fc ff ff       	call   c001e390 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e6a3:	31 c0                	xor    eax,eax
c001e6a5:	83 c4 38             	add    esp,0x38
c001e6a8:	5f                   	pop    edi
c001e6a9:	c3                   	ret    

c001e6aa <SATAPI::detectMedia()>:
c001e6aa:	53                   	push   ebx
c001e6ab:	83 ec 14             	sub    esp,0x14
c001e6ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e6b2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e6b8:	e8 1b 00 ff ff       	call   c000e6d8 <VCache::writeWriteBuffer()>
c001e6bd:	59                   	pop    ecx
c001e6be:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e6c4:	e8 ff ff fe ff       	call   c000e6c8 <VCache::invalidateReadBuffer()>
c001e6c9:	c7 04 24 43 34 02 c0 	mov    DWORD PTR [esp],0xc0023443
c001e6d0:	e8 70 c2 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e6d5:	83 c4 10             	add    esp,0x10
c001e6d8:	31 c0                	xor    eax,eax
c001e6da:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e6e1:	85 d2                	test   edx,edx
c001e6e3:	74 0f                	je     c001e6f4 <SATAPI::detectMedia()+0x4a>
c001e6e5:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e6eb:	75 07                	jne    c001e6f4 <SATAPI::detectMedia()+0x4a>
c001e6ed:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e6f4:	40                   	inc    eax
c001e6f5:	83 f8 1a             	cmp    eax,0x1a
c001e6f8:	75 e0                	jne    c001e6da <SATAPI::detectMedia()+0x30>
c001e6fa:	83 c4 08             	add    esp,0x8
c001e6fd:	5b                   	pop    ebx
c001e6fe:	c3                   	ret    
c001e6ff:	90                   	nop

c001e700 <SATAPI::open(int, int, void*)>:
c001e700:	56                   	push   esi
c001e701:	53                   	push   ebx
c001e702:	51                   	push   ecx
c001e703:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e707:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e70b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e715:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e71b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e725:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e729:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e733:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e739:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e740:	e8 7a 96 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e745:	89 c6                	mov    esi,eax
c001e747:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e74d:	81 c6 00 10 00 00    	add    esi,0x1000
c001e753:	e8 67 96 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e758:	39 c6                	cmp    esi,eax
c001e75a:	74 10                	je     c001e76c <SATAPI::open(int, int, void*)+0x6c>
c001e75c:	83 ec 0c             	sub    esp,0xc
c001e75f:	68 58 34 02 c0       	push   0xc0023458
c001e764:	e8 7e 2e ff ff       	call   c00115e7 <KePanic(char const*)>
c001e769:	83 c4 10             	add    esp,0x10
c001e76c:	83 ec 0c             	sub    esp,0xc
c001e76f:	6a 02                	push   0x2
c001e771:	e8 97 ae fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e776:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e77c:	6a 03                	push   0x3
c001e77e:	50                   	push   eax
c001e77f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e785:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e78b:	e8 90 b5 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e790:	83 c4 14             	add    esp,0x14
c001e793:	68 78 01 00 00       	push   0x178
c001e798:	e8 19 93 fe ff       	call   c0007ab6 <malloc>
c001e79d:	83 c4 0c             	add    esp,0xc
c001e7a0:	89 c6                	mov    esi,eax
c001e7a2:	6a 00                	push   0x0
c001e7a4:	68 ff ff ff 7f       	push   0x7fffffff
c001e7a9:	6a 00                	push   0x0
c001e7ab:	6a 00                	push   0x0
c001e7ad:	53                   	push   ebx
c001e7ae:	68 6e 34 02 c0       	push   0xc002346e
c001e7b3:	50                   	push   eax
c001e7b4:	e8 7b f3 fe ff       	call   c000db34 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e7b9:	83 c4 14             	add    esp,0x14
c001e7bc:	56                   	push   esi
c001e7bd:	e8 32 f4 fe ff       	call   c000dbf4 <LogicalDisk::assignDriveLetter()>
c001e7c2:	5a                   	pop    edx
c001e7c3:	0f be c0             	movsx  eax,al
c001e7c6:	59                   	pop    ecx
c001e7c7:	50                   	push   eax
c001e7c8:	68 c0 32 02 c0       	push   0xc00232c0
c001e7cd:	e8 73 c1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e7d2:	58                   	pop    eax
c001e7d3:	5a                   	pop    edx
c001e7d4:	56                   	push   esi
c001e7d5:	53                   	push   ebx
c001e7d6:	e8 b3 e1 fe ff       	call   c000c98e <Device::addChild(Device*)>
c001e7db:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e7e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7e4:	e8 d9 e5 fe ff       	call   c000cdc2 <PhysicalDisk::startCache()>
c001e7e9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e7f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7f3:	e8 b2 fe ff ff       	call   c001e6aa <SATAPI::detectMedia()>
c001e7f8:	83 c4 14             	add    esp,0x14
c001e7fb:	31 c0                	xor    eax,eax
c001e7fd:	5b                   	pop    ebx
c001e7fe:	5e                   	pop    esi
c001e7ff:	c3                   	ret    

c001e800 <SATAPI::read(unsigned long long, int, void*)>:
c001e800:	57                   	push   edi
c001e801:	56                   	push   esi
c001e802:	53                   	push   ebx
c001e803:	83 ec 30             	sub    esp,0x30
c001e806:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e80a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e80e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e812:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e816:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e81a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e81e:	83 fe 04             	cmp    esi,0x4
c001e821:	7e 10                	jle    c001e833 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e823:	83 ec 0c             	sub    esp,0xc
c001e826:	68 7c 34 02 c0       	push   0xc002347c
c001e82b:	e8 b7 2d ff ff       	call   c00115e7 <KePanic(char const*)>
c001e830:	83 c4 10             	add    esp,0x10
c001e833:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e839:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e83f:	51                   	push   ecx
c001e840:	50                   	push   eax
c001e841:	83 c0 02             	add    eax,0x2
c001e844:	c1 e0 07             	shl    eax,0x7
c001e847:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e84d:	50                   	push   eax
c001e84e:	52                   	push   edx
c001e84f:	e8 8c e1 ff ff       	call   c001c9e0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e854:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e858:	b9 03 00 00 00       	mov    ecx,0x3
c001e85d:	fc                   	cld    
c001e85e:	31 c0                	xor    eax,eax
c001e860:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e862:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e867:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e86c:	83 c4 0c             	add    esp,0xc
c001e86f:	6a 00                	push   0x0
c001e871:	6a 00                	push   0x0
c001e873:	6a 00                	push   0x0
c001e875:	6a 00                	push   0x0
c001e877:	6a 02                	push   0x2
c001e879:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e87d:	50                   	push   eax
c001e87e:	53                   	push   ebx
c001e87f:	e8 0c fb ff ff       	call   c001e390 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e884:	83 c4 20             	add    esp,0x20
c001e887:	85 c0                	test   eax,eax
c001e889:	75 44                	jne    c001e8cf <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e88b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e88f:	b9 03 00 00 00       	mov    ecx,0x3
c001e894:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e896:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e89a:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e89f:	0f c8                	bswap  eax
c001e8a1:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e8a5:	89 f0                	mov    eax,esi
c001e8a7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e8ab:	50                   	push   eax
c001e8ac:	56                   	push   esi
c001e8ad:	c1 e6 0b             	shl    esi,0xb
c001e8b0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e8b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e8b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e8bc:	56                   	push   esi
c001e8bd:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e8c1:	50                   	push   eax
c001e8c2:	53                   	push   ebx
c001e8c3:	e8 c8 fa ff ff       	call   c001e390 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e8c8:	83 c4 20             	add    esp,0x20
c001e8cb:	85 c0                	test   eax,eax
c001e8cd:	74 14                	je     c001e8e3 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e8cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8d3:	83 ec 0c             	sub    esp,0xc
c001e8d6:	53                   	push   ebx
c001e8d7:	e8 ce fd ff ff       	call   c001e6aa <SATAPI::detectMedia()>
c001e8dc:	83 c4 10             	add    esp,0x10
c001e8df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8e3:	83 c4 30             	add    esp,0x30
c001e8e6:	5b                   	pop    ebx
c001e8e7:	5e                   	pop    esi
c001e8e8:	5f                   	pop    edi
c001e8e9:	c3                   	ret    

c001e8ea <IOAPIC::close(int, int, void*)>:
c001e8ea:	b8 00 00 00 00       	mov    eax,0x0
c001e8ef:	c3                   	ret    

c001e8f0 <apicGetBase()>:
c001e8f0:	55                   	push   ebp
c001e8f1:	89 e5                	mov    ebp,esp
c001e8f3:	83 ec 18             	sub    esp,0x18
c001e8f6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e8fb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e901:	83 e0 08             	and    eax,0x8
c001e904:	0f b6 c0             	movzx  eax,al
c001e907:	85 c0                	test   eax,eax
c001e909:	75 07                	jne    c001e912 <apicGetBase()+0x22>
c001e90b:	b8 00 00 00 00       	mov    eax,0x0
c001e910:	eb 21                	jmp    c001e933 <apicGetBase()+0x43>
c001e912:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e917:	83 ec 08             	sub    esp,0x8
c001e91a:	6a 1b                	push   0x1b
c001e91c:	50                   	push   eax
c001e91d:	e8 9e 87 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e922:	83 c4 10             	add    esp,0x10
c001e925:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e928:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e92b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e92e:	25 00 00 ff ff       	and    eax,0xffff0000
c001e933:	c9                   	leave  
c001e934:	c3                   	ret    
c001e935:	90                   	nop

c001e936 <IOAPIC::IOAPIC()>:
c001e936:	83 ec 0c             	sub    esp,0xc
c001e939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93d:	83 ec 08             	sub    esp,0x8
c001e940:	68 e0 34 02 c0       	push   0xc00234e0
c001e945:	50                   	push   eax
c001e946:	e8 db e1 fe ff       	call   c000cb26 <Device::Device(char const*)>
c001e94b:	83 c4 10             	add    esp,0x10
c001e94e:	ba f0 34 02 c0       	mov    edx,0xc00234f0
c001e953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e957:	89 10                	mov    DWORD PTR [eax],edx
c001e959:	90                   	nop
c001e95a:	83 c4 0c             	add    esp,0xc
c001e95d:	c3                   	ret    

c001e95e <apicOpen()>:
c001e95e:	55                   	push   ebp
c001e95f:	89 e5                	mov    ebp,esp
c001e961:	53                   	push   ebx
c001e962:	83 ec 34             	sub    esp,0x34
c001e965:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001e96a:	83 f0 01             	xor    eax,0x1
c001e96d:	0f b6 c0             	movzx  eax,al
c001e970:	85 c0                	test   eax,eax
c001e972:	0f 84 a3 00 00 00    	je     c001ea1b <apicOpen()+0xbd>
c001e978:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e97c:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001e981:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e985:	0f b6 c0             	movzx  eax,al
c001e988:	39 c2                	cmp    edx,eax
c001e98a:	0f 83 84 00 00 00    	jae    c001ea14 <apicOpen()+0xb6>
c001e990:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e997:	83 ec 0c             	sub    esp,0xc
c001e99a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e99d:	e8 14 91 fe ff       	call   c0007ab6 <malloc>
c001e9a2:	83 c4 10             	add    esp,0x10
c001e9a5:	89 c3                	mov    ebx,eax
c001e9a7:	83 ec 0c             	sub    esp,0xc
c001e9aa:	53                   	push   ebx
c001e9ab:	e8 86 ff ff ff       	call   c001e936 <IOAPIC::IOAPIC()>
c001e9b0:	83 c4 10             	add    esp,0x10
c001e9b3:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e9b6:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e9ba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e9bd:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001e9c4:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001e9c9:	83 c0 01             	add    eax,0x1
c001e9cc:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001e9d1:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9d6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e9dc:	83 ec 08             	sub    esp,0x8
c001e9df:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e9e2:	50                   	push   eax
c001e9e3:	e8 a6 df fe ff       	call   c000c98e <Device::addChild(Device*)>
c001e9e8:	83 c4 10             	add    esp,0x10
c001e9eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e9ee:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9f0:	83 c0 08             	add    eax,0x8
c001e9f3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9f5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e9f9:	6a 00                	push   0x0
c001e9fb:	6a 00                	push   0x0
c001e9fd:	52                   	push   edx
c001e9fe:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ea01:	ff d0                	call   eax
c001ea03:	83 c4 10             	add    esp,0x10
c001ea06:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ea09:	83 c0 01             	add    eax,0x1
c001ea0c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001ea0f:	e9 68 ff ff ff       	jmp    c001e97c <apicOpen()+0x1e>
c001ea14:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001ea1b:	e8 d0 fe ff ff       	call   c001e8f0 <apicGetBase()>
c001ea20:	05 f0 00 00 00       	add    eax,0xf0
c001ea25:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ea28:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea2d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ea30:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ea37:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ea3e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea41:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ea44:	89 10                	mov    DWORD PTR [eax],edx
c001ea46:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ea4d:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001ea52:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ea55:	7d 7c                	jge    c001ead3 <apicOpen()+0x175>
c001ea57:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea5a:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea61:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ea64:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea67:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea6e:	c1 e8 08             	shr    eax,0x8
c001ea71:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ea75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea78:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea7f:	c1 e8 18             	shr    eax,0x18
c001ea82:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ea85:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ea89:	3d ff 00 00 00       	cmp    eax,0xff
c001ea8e:	75 3a                	jne    c001eaca <apicOpen()+0x16c>
c001ea90:	e8 5b fe ff ff       	call   c001e8f0 <apicGetBase()>
c001ea95:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ea99:	83 fa 01             	cmp    edx,0x1
c001ea9c:	75 07                	jne    c001eaa5 <apicOpen()+0x147>
c001ea9e:	ba 60 03 00 00       	mov    edx,0x360
c001eaa3:	eb 05                	jmp    c001eaaa <apicOpen()+0x14c>
c001eaa5:	ba 50 03 00 00       	mov    edx,0x350
c001eaaa:	01 d0                	add    eax,edx
c001eaac:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eaaf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eab2:	8b 00                	mov    eax,DWORD PTR [eax]
c001eab4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001eab7:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eabe:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001eac2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eac5:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eac8:	89 10                	mov    DWORD PTR [eax],edx
c001eaca:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001eace:	e9 7a ff ff ff       	jmp    c001ea4d <apicOpen()+0xef>
c001ead3:	90                   	nop
c001ead4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ead7:	c9                   	leave  
c001ead8:	c3                   	ret    
c001ead9:	90                   	nop

c001eada <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001eada:	55                   	push   ebp
c001eadb:	89 e5                	mov    ebp,esp
c001eadd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eae0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eae6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eae9:	72 1d                	jb     c001eb08 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eaeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eaee:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001eaf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eaf7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001eafd:	01 d0                	add    eax,edx
c001eaff:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eb02:	73 04                	jae    c001eb08 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eb04:	b0 01                	mov    al,0x1
c001eb06:	eb 02                	jmp    c001eb0a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001eb08:	b0 00                	mov    al,0x0
c001eb0a:	5d                   	pop    ebp
c001eb0b:	c3                   	ret    

c001eb0c <IOAPIC::read(int)>:
c001eb0c:	55                   	push   ebp
c001eb0d:	89 e5                	mov    ebp,esp
c001eb0f:	83 ec 10             	sub    esp,0x10
c001eb12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb15:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eb1b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001eb1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb21:	0f b6 d0             	movzx  edx,al
c001eb24:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb27:	89 10                	mov    DWORD PTR [eax],edx
c001eb29:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb2c:	83 c0 10             	add    eax,0x10
c001eb2f:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb31:	c9                   	leave  
c001eb32:	c3                   	ret    
c001eb33:	90                   	nop

c001eb34 <IOAPIC::open(int, int, void*)>:
c001eb34:	55                   	push   ebp
c001eb35:	89 e5                	mov    ebp,esp
c001eb37:	57                   	push   edi
c001eb38:	56                   	push   esi
c001eb39:	53                   	push   ebx
c001eb3a:	83 ec 04             	sub    esp,0x4
c001eb3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb40:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001eb43:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eb49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb4c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb52:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001eb59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb5c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eb62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb65:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb6b:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001eb72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb75:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001eb7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb7e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001eb84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb87:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eb8d:	0f b6 f0             	movzx  esi,al
c001eb90:	89 d0                	mov    eax,edx
c001eb92:	ba 00 00 00 00       	mov    edx,0x0
c001eb97:	89 c7                	mov    edi,eax
c001eb99:	83 e7 ff             	and    edi,0xffffffff
c001eb9c:	89 f9                	mov    ecx,edi
c001eb9e:	0f b6 da             	movzx  ebx,dl
c001eba1:	89 c8                	mov    eax,ecx
c001eba3:	89 da                	mov    edx,ebx
c001eba5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001eba8:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ebab:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ebaf:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ebb3:	83 e0 00             	and    eax,0x0
c001ebb6:	09 d0                	or     eax,edx
c001ebb8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ebbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebbf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ebc5:	8d 50 01             	lea    edx,[eax+0x1]
c001ebc8:	88 d1                	mov    cl,dl
c001ebca:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ebcd:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ebd3:	0f b6 d0             	movzx  edx,al
c001ebd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebd9:	83 c2 08             	add    edx,0x8
c001ebdc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ebe0:	0f b6 c9             	movzx  ecx,cl
c001ebe3:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ebe9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ebed:	6a 01                	push   0x1
c001ebef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebf2:	e8 15 ff ff ff       	call   c001eb0c <IOAPIC::read(int)>
c001ebf7:	83 c4 08             	add    esp,0x8
c001ebfa:	c1 f8 10             	sar    eax,0x10
c001ebfd:	0f b6 c0             	movzx  eax,al
c001ec00:	8d 50 01             	lea    edx,[eax+0x1]
c001ec03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec06:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ec0c:	b8 00 00 00 00       	mov    eax,0x0
c001ec11:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ec14:	5b                   	pop    ebx
c001ec15:	5e                   	pop    esi
c001ec16:	5f                   	pop    edi
c001ec17:	5d                   	pop    ebp
c001ec18:	c3                   	ret    
c001ec19:	90                   	nop

c001ec1a <IOAPIC::write(int, int)>:
c001ec1a:	55                   	push   ebp
c001ec1b:	89 e5                	mov    ebp,esp
c001ec1d:	83 ec 10             	sub    esp,0x10
c001ec20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec23:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec29:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec2f:	0f b6 d0             	movzx  edx,al
c001ec32:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec35:	89 10                	mov    DWORD PTR [eax],edx
c001ec37:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec3a:	8d 50 10             	lea    edx,[eax+0x10]
c001ec3d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec40:	89 02                	mov    DWORD PTR [edx],eax
c001ec42:	90                   	nop
c001ec43:	c9                   	leave  
c001ec44:	c3                   	ret    
c001ec45:	90                   	nop

c001ec46 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ec46:	55                   	push   ebp
c001ec47:	89 e5                	mov    ebp,esp
c001ec49:	53                   	push   ebx
c001ec4a:	83 ec 2c             	sub    esp,0x2c
c001ec4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec50:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ec53:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ec56:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ec59:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ec5c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec5f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ec62:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ec65:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ec68:	88 d8                	mov    al,bl
c001ec6a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ec6d:	88 c8                	mov    al,cl
c001ec6f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ec72:	88 d0                	mov    al,dl
c001ec74:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ec77:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec7b:	83 c0 08             	add    eax,0x8
c001ec7e:	01 c0                	add    eax,eax
c001ec80:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ec83:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec87:	83 c0 08             	add    eax,0x8
c001ec8a:	01 c0                	add    eax,eax
c001ec8c:	83 c0 01             	add    eax,0x1
c001ec8f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ec92:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ec95:	50                   	push   eax
c001ec96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec99:	e8 6e fe ff ff       	call   c001eb0c <IOAPIC::read(int)>
c001ec9e:	83 c4 08             	add    esp,0x8
c001eca1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eca4:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ecab:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ecae:	c1 e0 18             	shl    eax,0x18
c001ecb1:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ecb4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ecb7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ecba:	52                   	push   edx
c001ecbb:	50                   	push   eax
c001ecbc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecbf:	e8 56 ff ff ff       	call   c001ec1a <IOAPIC::write(int, int)>
c001ecc4:	83 c4 0c             	add    esp,0xc
c001ecc7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ecca:	50                   	push   eax
c001eccb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecce:	e8 39 fe ff ff       	call   c001eb0c <IOAPIC::read(int)>
c001ecd3:	83 c4 08             	add    esp,0x8
c001ecd6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ecd9:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ece0:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ece7:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ecee:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ecf2:	85 c0                	test   eax,eax
c001ecf4:	74 09                	je     c001ecff <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ecf6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ecfd:	eb 07                	jmp    c001ed06 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ecff:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ed06:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ed0a:	85 c0                	test   eax,eax
c001ed0c:	74 09                	je     c001ed17 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ed0e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ed15:	eb 07                	jmp    c001ed1e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ed17:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ed1e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ed25:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ed29:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ed2c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ed2f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed32:	52                   	push   edx
c001ed33:	50                   	push   eax
c001ed34:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed37:	e8 de fe ff ff       	call   c001ec1a <IOAPIC::write(int, int)>
c001ed3c:	83 c4 0c             	add    esp,0xc
c001ed3f:	90                   	nop
c001ed40:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ed43:	c9                   	leave  
c001ed44:	c3                   	ret    
c001ed45:	66 90                	xchg   ax,ax
c001ed47:	90                   	nop

c001ed48 <APICTimer::close(int, int, void*)>:
c001ed48:	b8 00 00 00 00       	mov    eax,0x0
c001ed4d:	c3                   	ret    
c001ed4e:	66 90                	xchg   ax,ax

c001ed50 <apicTimerHandler(regs*, void*)>:
c001ed50:	83 ec 0c             	sub    esp,0xc
c001ed53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed57:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ed59:	b8 10 27 00 00       	mov    eax,0x2710
c001ed5e:	ba 00 00 00 00       	mov    edx,0x0
c001ed63:	f7 f1                	div    ecx
c001ed65:	83 ec 0c             	sub    esp,0xc
c001ed68:	50                   	push   eax
c001ed69:	e8 82 f6 fe ff       	call   c000e3f0 <timerHandler(unsigned int)>
c001ed6e:	83 c4 10             	add    esp,0x10
c001ed71:	90                   	nop
c001ed72:	83 c4 0c             	add    esp,0xc
c001ed75:	c3                   	ret    
c001ed76:	66 90                	xchg   ax,ax

c001ed78 <APICTimer::open(int, int, void*)>:
c001ed78:	83 ec 0c             	sub    esp,0xc
c001ed7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed7f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed81:	83 c0 24             	add    eax,0x24
c001ed84:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed86:	83 ec 08             	sub    esp,0x8
c001ed89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed91:	ff d0                	call   eax
c001ed93:	83 c4 10             	add    esp,0x10
c001ed96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ed9e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001edac:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001edb2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001edb6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001edbc:	83 ec 0c             	sub    esp,0xc
c001edbf:	51                   	push   ecx
c001edc0:	6a 01                	push   0x1
c001edc2:	68 50 ed 01 c0       	push   0xc001ed50
c001edc7:	52                   	push   edx
c001edc8:	50                   	push   eax
c001edc9:	e8 6c db fe ff       	call   c000c93a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001edce:	83 c4 20             	add    esp,0x20
c001edd1:	89 c2                	mov    edx,eax
c001edd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eddd:	b8 00 00 00 00       	mov    eax,0x0
c001ede2:	83 c4 0c             	add    esp,0xc
c001ede5:	c3                   	ret    
c001ede6:	66 90                	xchg   ax,ax

c001ede8 <APICTimer::write(int)>:
c001ede8:	83 ec 0c             	sub    esp,0xc
c001edeb:	83 ec 0c             	sub    esp,0xc
c001edee:	68 14 35 02 c0       	push   0xc0023514
c001edf3:	e8 ef 27 ff ff       	call   c00115e7 <KePanic(char const*)>
c001edf8:	83 c4 10             	add    esp,0x10
c001edfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee03:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee09:	90                   	nop
c001ee0a:	83 c4 0c             	add    esp,0xc
c001ee0d:	c3                   	ret    
c001ee0e:	66 90                	xchg   ax,ax

c001ee10 <APICTimer::APICTimer()>:
c001ee10:	83 ec 0c             	sub    esp,0xc
c001ee13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee17:	83 ec 08             	sub    esp,0x8
c001ee1a:	68 24 35 02 c0       	push   0xc0023524
c001ee1f:	50                   	push   eax
c001ee20:	e8 ff f4 fe ff       	call   c000e324 <Timer::Timer(char const*)>
c001ee25:	83 c4 10             	add    esp,0x10
c001ee28:	ba 38 35 02 c0       	mov    edx,0xc0023538
c001ee2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee31:	89 10                	mov    DWORD PTR [eax],edx
c001ee33:	90                   	nop
c001ee34:	83 c4 0c             	add    esp,0xc
c001ee37:	c3                   	ret    

c001ee38 <PIT::write(int)>:
c001ee38:	83 ec 10             	sub    esp,0x10
c001ee3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee3f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee43:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ee4d:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ee52:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ee57:	89 c2                	mov    edx,eax
c001ee59:	c1 fa 1f             	sar    edx,0x1f
c001ee5c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ee60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee64:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ee6b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ee70:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ee74:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ee79:	ee                   	out    dx,al
c001ee7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee7e:	0f b6 c0             	movzx  eax,al
c001ee81:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ee88:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ee8c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ee90:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ee95:	ee                   	out    dx,al
c001ee96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee9a:	c1 f8 08             	sar    eax,0x8
c001ee9d:	0f b6 c0             	movzx  eax,al
c001eea0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001eea7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eeab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eeaf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001eeb4:	ee                   	out    dx,al
c001eeb5:	90                   	nop
c001eeb6:	83 c4 10             	add    esp,0x10
c001eeb9:	c3                   	ret    
c001eeba:	66 90                	xchg   ax,ax

c001eebc <pitHandler(regs*, void*)>:
c001eebc:	83 ec 0c             	sub    esp,0xc
c001eebf:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001eec5:	b8 10 27 00 00       	mov    eax,0x2710
c001eeca:	89 c2                	mov    edx,eax
c001eecc:	c1 fa 1f             	sar    edx,0x1f
c001eecf:	f7 f9                	idiv   ecx
c001eed1:	83 ec 0c             	sub    esp,0xc
c001eed4:	50                   	push   eax
c001eed5:	e8 16 f5 fe ff       	call   c000e3f0 <timerHandler(unsigned int)>
c001eeda:	83 c4 10             	add    esp,0x10
c001eedd:	90                   	nop
c001eede:	83 c4 0c             	add    esp,0xc
c001eee1:	c3                   	ret    
c001eee2:	66 90                	xchg   ax,ax

c001eee4 <PIT::open(int, int, void*)>:
c001eee4:	83 ec 0c             	sub    esp,0xc
c001eee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeeb:	8b 00                	mov    eax,DWORD PTR [eax]
c001eeed:	83 c0 24             	add    eax,0x24
c001eef0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eef2:	83 ec 08             	sub    esp,0x8
c001eef5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eef9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eefd:	ff d0                	call   eax
c001eeff:	83 c4 10             	add    esp,0x10
c001ef02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef06:	83 ec 0c             	sub    esp,0xc
c001ef09:	6a 00                	push   0x0
c001ef0b:	6a 01                	push   0x1
c001ef0d:	68 bc ee 01 c0       	push   0xc001eebc
c001ef12:	6a 00                	push   0x0
c001ef14:	50                   	push   eax
c001ef15:	e8 20 da fe ff       	call   c000c93a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef1a:	83 c4 20             	add    esp,0x20
c001ef1d:	89 c2                	mov    edx,eax
c001ef1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef23:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef29:	b8 00 00 00 00       	mov    eax,0x0
c001ef2e:	83 c4 0c             	add    esp,0xc
c001ef31:	c3                   	ret    
c001ef32:	66 90                	xchg   ax,ax

c001ef34 <PIT::close(int, int, void*)>:
c001ef34:	83 ec 0c             	sub    esp,0xc
c001ef37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ef45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef49:	6a 01                	push   0x1
c001ef4b:	68 bc ee 01 c0       	push   0xc001eebc
c001ef50:	6a 00                	push   0x0
c001ef52:	50                   	push   eax
c001ef53:	e8 18 da fe ff       	call   c000c970 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ef58:	83 c4 10             	add    esp,0x10
c001ef5b:	b8 00 00 00 00       	mov    eax,0x0
c001ef60:	83 c4 0c             	add    esp,0xc
c001ef63:	c3                   	ret    

c001ef64 <PIT::PIT()>:
c001ef64:	83 ec 0c             	sub    esp,0xc
c001ef67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6b:	83 ec 08             	sub    esp,0x8
c001ef6e:	68 60 35 02 c0       	push   0xc0023560
c001ef73:	50                   	push   eax
c001ef74:	e8 ab f3 fe ff       	call   c000e324 <Timer::Timer(char const*)>
c001ef79:	83 c4 10             	add    esp,0x10
c001ef7c:	ba 88 35 02 c0       	mov    edx,0xc0023588
c001ef81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef85:	89 10                	mov    DWORD PTR [eax],edx
c001ef87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef91:	0f b6 d0             	movzx  edx,al
c001ef94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef98:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ef9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efa9:	0f b6 d0             	movzx  edx,al
c001efac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001efb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efbf:	8d 50 01             	lea    edx,[eax+0x1]
c001efc2:	88 d1                	mov    cl,dl
c001efc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001efc8:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001efce:	0f b6 d0             	movzx  edx,al
c001efd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001efd9:	83 e1 3f             	and    ecx,0x3f
c001efdc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001efe0:	90                   	nop
c001efe1:	83 c4 0c             	add    esp,0xc
c001efe4:	c3                   	ret    
c001efe5:	66 90                	xchg   ax,ax
c001efe7:	66 90                	xchg   ax,ax
c001efe9:	66 90                	xchg   ax,ax
c001efeb:	66 90                	xchg   ax,ax
c001efed:	66 90                	xchg   ax,ax
c001efef:	90                   	nop

c001eff0 <avxDetect>:
c001eff0:	b8 01 00 00 00       	mov    eax,0x1
c001eff5:	0f a2                	cpuid  
c001eff7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001effd:	74 15                	je     c001f014 <avxDetect.noAVX>
c001efff:	b8 01 00 00 00       	mov    eax,0x1
c001f004:	0f a2                	cpuid  
c001f006:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f00c:	74 06                	je     c001f014 <avxDetect.noAVX>
c001f00e:	b8 01 00 00 00       	mov    eax,0x1
c001f013:	c3                   	ret    

c001f014 <avxDetect.noAVX>:
c001f014:	b8 00 00 00 00       	mov    eax,0x0
c001f019:	c3                   	ret    

c001f01a <avxSave>:
c001f01a:	53                   	push   ebx
c001f01b:	52                   	push   edx
c001f01c:	31 c0                	xor    eax,eax
c001f01e:	48                   	dec    eax
c001f01f:	89 c2                	mov    edx,eax
c001f021:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f025:	0f ae 23             	xsave  [ebx]
c001f028:	5a                   	pop    edx
c001f029:	5b                   	pop    ebx
c001f02a:	c3                   	ret    

c001f02b <avxLoad>:
c001f02b:	53                   	push   ebx
c001f02c:	52                   	push   edx
c001f02d:	31 c0                	xor    eax,eax
c001f02f:	48                   	dec    eax
c001f030:	89 c2                	mov    edx,eax
c001f032:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f036:	0f ae 2b             	xrstor [ebx]
c001f039:	5a                   	pop    edx
c001f03a:	5b                   	pop    ebx
c001f03b:	c3                   	ret    

c001f03c <avxInit>:
c001f03c:	e8 67 03 00 00       	call   c001f3a8 <sseInit>
c001f041:	50                   	push   eax
c001f042:	51                   	push   ecx
c001f043:	0f 20 e0             	mov    eax,cr4
c001f046:	0d 00 00 04 00       	or     eax,0x40000
c001f04b:	0f 22 e0             	mov    cr4,eax
c001f04e:	31 c9                	xor    ecx,ecx
c001f050:	0f 01 d0             	xgetbv 
c001f053:	0d 07 00 00 00       	or     eax,0x7
c001f058:	0f 01 d1             	xsetbv 
c001f05b:	59                   	pop    ecx
c001f05c:	58                   	pop    eax
c001f05d:	c3                   	ret    

c001f05e <avxClose>:
c001f05e:	c3                   	ret    

c001f05f <wouldSheSayYes>:
c001f05f:	c3                   	ret    
c001f060:	49                   	dec    ecx
c001f061:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f065:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f069:	75 20                	jne    c001f08b <isr0+0xb>
c001f06b:	4e                   	dec    esi
c001f06c:	79 61                	jns    c001f0cf <isr7+0x3>
c001f06e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f073:	66 90                	xchg   ax,ax
c001f075:	66 90                	xchg   ax,ax
c001f077:	66 90                	xchg   ax,ax
c001f079:	66 90                	xchg   ax,ax
c001f07b:	66 90                	xchg   ax,ax
c001f07d:	66 90                	xchg   ax,ax
c001f07f:	90                   	nop

c001f080 <isr0>:
c001f080:	fa                   	cli    
c001f081:	68 00 00 00 00       	push   0x0
c001f086:	68 00 00 00 00       	push   0x0
c001f08b:	e9 56 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f090 <isr1>:
c001f090:	fa                   	cli    
c001f091:	6a 00                	push   0x0
c001f093:	6a 01                	push   0x1
c001f095:	e9 4c 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f09a <isr2>:
c001f09a:	fa                   	cli    
c001f09b:	6a 00                	push   0x0
c001f09d:	6a 02                	push   0x2
c001f09f:	e9 42 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0a4 <isr3>:
c001f0a4:	fa                   	cli    
c001f0a5:	6a 00                	push   0x0
c001f0a7:	6a 03                	push   0x3
c001f0a9:	e9 38 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0ae <isr4>:
c001f0ae:	fa                   	cli    
c001f0af:	6a 00                	push   0x0
c001f0b1:	6a 04                	push   0x4
c001f0b3:	e9 2e 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0b8 <isr5>:
c001f0b8:	fa                   	cli    
c001f0b9:	6a 00                	push   0x0
c001f0bb:	6a 05                	push   0x5
c001f0bd:	e9 24 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0c2 <isr6>:
c001f0c2:	fa                   	cli    
c001f0c3:	6a 00                	push   0x0
c001f0c5:	6a 06                	push   0x6
c001f0c7:	e9 1a 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0cc <isr7>:
c001f0cc:	fa                   	cli    
c001f0cd:	6a 00                	push   0x0
c001f0cf:	6a 07                	push   0x7
c001f0d1:	e9 10 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0d6 <isr8>:
c001f0d6:	fa                   	cli    
c001f0d7:	6a 08                	push   0x8
c001f0d9:	e9 08 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0de <isr9>:
c001f0de:	fa                   	cli    
c001f0df:	6a 00                	push   0x0
c001f0e1:	6a 09                	push   0x9
c001f0e3:	e9 fe 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0e8 <isr10>:
c001f0e8:	fa                   	cli    
c001f0e9:	6a 0a                	push   0xa
c001f0eb:	e9 f6 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0f0 <isr11>:
c001f0f0:	fa                   	cli    
c001f0f1:	6a 0b                	push   0xb
c001f0f3:	e9 ee 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0f8 <isr12>:
c001f0f8:	fa                   	cli    
c001f0f9:	6a 0c                	push   0xc
c001f0fb:	e9 e6 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f100 <isr13>:
c001f100:	fa                   	cli    
c001f101:	6a 0d                	push   0xd
c001f103:	53                   	push   ebx
c001f104:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f108:	81 fb d6 f2 01 c0    	cmp    ebx,0xc001f2d6
c001f10e:	5b                   	pop    ebx
c001f10f:	0f 84 c3 01 00 00    	je     c001f2d8 <finishSignal2>
c001f115:	e9 cc 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f11a <isr14>:
c001f11a:	fa                   	cli    
c001f11b:	6a 0e                	push   0xe
c001f11d:	e9 c4 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f122 <isr15>:
c001f122:	fa                   	cli    
c001f123:	6a 00                	push   0x0
c001f125:	6a 0f                	push   0xf
c001f127:	e9 ba 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f12c <isr16>:
c001f12c:	fa                   	cli    
c001f12d:	6a 00                	push   0x0
c001f12f:	6a 10                	push   0x10
c001f131:	e9 b0 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f136 <isr17>:
c001f136:	fa                   	cli    
c001f137:	6a 00                	push   0x0
c001f139:	6a 11                	push   0x11
c001f13b:	e9 a6 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f140 <isr18>:
c001f140:	fa                   	cli    
c001f141:	6a 00                	push   0x0
c001f143:	6a 12                	push   0x12
c001f145:	e9 9c 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f14a <irq3>:
c001f14a:	fa                   	cli    
c001f14b:	6a 00                	push   0x0
c001f14d:	6a 23                	push   0x23
c001f14f:	e9 92 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f154 <irq4>:
c001f154:	fa                   	cli    
c001f155:	6a 00                	push   0x0
c001f157:	6a 24                	push   0x24
c001f159:	e9 88 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f15e <irq5>:
c001f15e:	fa                   	cli    
c001f15f:	6a 00                	push   0x0
c001f161:	6a 25                	push   0x25
c001f163:	e9 7e 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f168 <irq6>:
c001f168:	fa                   	cli    
c001f169:	6a 00                	push   0x0
c001f16b:	6a 26                	push   0x26
c001f16d:	e9 74 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f172 <irq7>:
c001f172:	fa                   	cli    
c001f173:	6a 00                	push   0x0
c001f175:	6a 27                	push   0x27
c001f177:	e9 6a 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f17c <irq8>:
c001f17c:	fa                   	cli    
c001f17d:	6a 00                	push   0x0
c001f17f:	6a 28                	push   0x28
c001f181:	e9 60 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f186 <irq9>:
c001f186:	fa                   	cli    
c001f187:	6a 00                	push   0x0
c001f189:	6a 29                	push   0x29
c001f18b:	e9 56 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f190 <irq10>:
c001f190:	fa                   	cli    
c001f191:	6a 00                	push   0x0
c001f193:	6a 2a                	push   0x2a
c001f195:	e9 4c 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f19a <irq11>:
c001f19a:	fa                   	cli    
c001f19b:	6a 00                	push   0x0
c001f19d:	6a 2b                	push   0x2b
c001f19f:	e9 42 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f1a4 <irq12>:
c001f1a4:	fa                   	cli    
c001f1a5:	6a 00                	push   0x0
c001f1a7:	6a 2c                	push   0x2c
c001f1a9:	e9 38 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f1ae <irq13>:
c001f1ae:	fa                   	cli    
c001f1af:	6a 00                	push   0x0
c001f1b1:	6a 2d                	push   0x2d
c001f1b3:	e9 2e 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f1b8 <irq14>:
c001f1b8:	fa                   	cli    
c001f1b9:	6a 00                	push   0x0
c001f1bb:	6a 2e                	push   0x2e
c001f1bd:	e9 24 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f1c2 <irq15>:
c001f1c2:	fa                   	cli    
c001f1c3:	6a 00                	push   0x0
c001f1c5:	6a 2f                	push   0x2f
c001f1c7:	e9 1a 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f1cc <irq1>:
c001f1cc:	fa                   	cli    
c001f1cd:	6a 00                	push   0x0
c001f1cf:	6a 21                	push   0x21
c001f1d1:	eb 13                	jmp    c001f1e6 <int_common_stub>

c001f1d3 <irq2>:
c001f1d3:	fa                   	cli    
c001f1d4:	6a 00                	push   0x0
c001f1d6:	6a 22                	push   0x22
c001f1d8:	eb 0c                	jmp    c001f1e6 <int_common_stub>

c001f1da <isr96>:
c001f1da:	6a 00                	push   0x0
c001f1dc:	6a 60                	push   0x60
c001f1de:	fb                   	sti    
c001f1df:	eb 37                	jmp    c001f218 <syscall_common_stub>

c001f1e1 <irq0>:
c001f1e1:	fa                   	cli    
c001f1e2:	6a 00                	push   0x0
c001f1e4:	6a 20                	push   0x20

c001f1e6 <int_common_stub>:
c001f1e6:	60                   	pusha  
c001f1e7:	1e                   	push   ds
c001f1e8:	06                   	push   es
c001f1e9:	0f a0                	push   fs
c001f1eb:	0f a8                	push   gs
c001f1ed:	66 b8 10 00          	mov    ax,0x10
c001f1f1:	66 8e d8             	mov    ds,ax
c001f1f4:	66 8e c0             	mov    es,ax
c001f1f7:	66 8e e0             	mov    fs,ax
c001f1fa:	66 8e e8             	mov    gs,ax
c001f1fd:	54                   	push   esp
c001f1fe:	fc                   	cld    
c001f1ff:	e8 34 dc fe ff       	call   c000ce38 <int_handler>
c001f204:	81 c4 04 00 00 00    	add    esp,0x4
c001f20a:	0f a9                	pop    gs
c001f20c:	0f a1                	pop    fs
c001f20e:	07                   	pop    es
c001f20f:	1f                   	pop    ds
c001f210:	61                   	popa   
c001f211:	81 c4 08 00 00 00    	add    esp,0x8
c001f217:	cf                   	iret   

c001f218 <syscall_common_stub>:
c001f218:	60                   	pusha  
c001f219:	1e                   	push   ds
c001f21a:	06                   	push   es
c001f21b:	0f a0                	push   fs
c001f21d:	0f a8                	push   gs
c001f21f:	66 b8 10 00          	mov    ax,0x10
c001f223:	66 8e d8             	mov    ds,ax
c001f226:	66 8e c0             	mov    es,ax
c001f229:	66 8e e0             	mov    fs,ax
c001f22c:	66 8e e8             	mov    gs,ax
c001f22f:	54                   	push   esp
c001f230:	fc                   	cld    
c001f231:	e8 02 dc fe ff       	call   c000ce38 <int_handler>
c001f236:	81 c4 04 00 00 00    	add    esp,0x4
c001f23c:	0f a9                	pop    gs
c001f23e:	0f a1                	pop    fs
c001f240:	07                   	pop    es
c001f241:	1f                   	pop    ds
c001f242:	e8 b7 29 ff ff       	call   c0011bfe <KiCheckSignalZ>
c001f247:	3d 00 00 00 00       	cmp    eax,0x0
c001f24c:	0f 84 c0 00 00 00    	je     c001f312 <skipSignals>
c001f252:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f257:	61                   	popa   
c001f258:	53                   	push   ebx
c001f259:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f25f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f262:	5b                   	pop    ebx
c001f263:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f268:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f26b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f26e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f271:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f274:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f277:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f27a:	81 c4 08 00 00 00    	add    esp,0x8
c001f280:	5e                   	pop    esi
c001f281:	5b                   	pop    ebx
c001f282:	59                   	pop    ecx
c001f283:	5a                   	pop    edx
c001f284:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f287:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f28a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f28d:	52                   	push   edx
c001f28e:	51                   	push   ecx
c001f28f:	53                   	push   ebx
c001f290:	56                   	push   esi
c001f291:	81 ec 08 00 00 00    	sub    esp,0x8
c001f297:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f29a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f29d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f2a0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f2a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f2a6:	60                   	pusha  
c001f2a7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f2ad:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f2b0:	89 e3                	mov    ebx,esp
c001f2b2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f2b5:	52                   	push   edx
c001f2b6:	68 d6 f2 01 c0       	push   0xc001f2d6
c001f2bb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f2be:	89 dc                	mov    esp,ebx
c001f2c0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f2c3:	68 23 00 00 00       	push   0x23
c001f2c8:	51                   	push   ecx
c001f2c9:	68 02 02 00 00       	push   0x202
c001f2ce:	68 1b 00 00 00       	push   0x1b
c001f2d3:	ff 36                	push   DWORD PTR [esi]
c001f2d5:	cf                   	iret   

c001f2d6 <finishSignal>:
c001f2d6:	cd 0f                	int    0xf

c001f2d8 <finishSignal2>:
c001f2d8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f2de:	e8 98 29 ff ff       	call   c0011c7b <KiFinishSignalZ>
c001f2e3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f2e9:	68 23 00 00 00       	push   0x23
c001f2ee:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f2f1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f2f4:	68 1b 00 00 00       	push   0x1b
c001f2f9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f2fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f2ff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f302:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f305:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f308:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f30b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f30e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f311:	cf                   	iret   

c001f312 <skipSignals>:
c001f312:	61                   	popa   
c001f313:	81 c4 08 00 00 00    	add    esp,0x8
c001f319:	cf                   	iret   
c001f31a:	90                   	nop
c001f31b:	90                   	nop

c001f31c <irq16>:
c001f31c:	fa                   	cli    
c001f31d:	6a 00                	push   0x0
c001f31f:	6a 30                	push   0x30
c001f321:	e9 c0 fe ff ff       	jmp    c001f1e6 <int_common_stub>

c001f326 <irq17>:
c001f326:	fa                   	cli    
c001f327:	6a 00                	push   0x0
c001f329:	6a 31                	push   0x31
c001f32b:	e9 b6 fe ff ff       	jmp    c001f1e6 <int_common_stub>

c001f330 <irq18>:
c001f330:	fa                   	cli    
c001f331:	6a 00                	push   0x0
c001f333:	6a 32                	push   0x32
c001f335:	e9 ac fe ff ff       	jmp    c001f1e6 <int_common_stub>

c001f33a <irq19>:
c001f33a:	fa                   	cli    
c001f33b:	6a 00                	push   0x0
c001f33d:	6a 33                	push   0x33
c001f33f:	e9 a2 fe ff ff       	jmp    c001f1e6 <int_common_stub>

c001f344 <irq20>:
c001f344:	fa                   	cli    
c001f345:	6a 00                	push   0x0
c001f347:	6a 34                	push   0x34
c001f349:	e9 98 fe ff ff       	jmp    c001f1e6 <int_common_stub>

c001f34e <irq21>:
c001f34e:	fa                   	cli    
c001f34f:	6a 00                	push   0x0
c001f351:	6a 35                	push   0x35
c001f353:	e9 8e fe ff ff       	jmp    c001f1e6 <int_common_stub>

c001f358 <irq22>:
c001f358:	fa                   	cli    
c001f359:	6a 00                	push   0x0
c001f35b:	6a 36                	push   0x36
c001f35d:	e9 84 fe ff ff       	jmp    c001f1e6 <int_common_stub>

c001f362 <irq23>:
c001f362:	fa                   	cli    
c001f363:	6a 00                	push   0x0
c001f365:	6a 37                	push   0x37
c001f367:	e9 7a fe ff ff       	jmp    c001f1e6 <int_common_stub>
c001f36c:	66 90                	xchg   ax,ax
c001f36e:	66 90                	xchg   ax,ax

c001f370 <i386GetRDRAND>:
c001f370:	b9 64 00 00 00       	mov    ecx,0x64

c001f375 <retry>:
c001f375:	0f c7 f0             	rdrand eax
c001f378:	72 05                	jb     c001f37f <retry.done>
c001f37a:	e2 f9                	loop   c001f375 <retry>

c001f37c <retry.fail>:
c001f37c:	31 c0                	xor    eax,eax
c001f37e:	c3                   	ret    

c001f37f <retry.done>:
c001f37f:	c3                   	ret    

c001f380 <absolutelyNoChanceInHell>:
c001f380:	b8 01 00 00 00       	mov    eax,0x1
c001f385:	0f a2                	cpuid  
c001f387:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f38d:	74 06                	je     c001f395 <sseDetect.noSSE>
c001f38f:	b8 01 00 00 00       	mov    eax,0x1
c001f394:	c3                   	ret    

c001f395 <sseDetect.noSSE>:
c001f395:	31 c0                	xor    eax,eax
c001f397:	c3                   	ret    

c001f398 <sseSave>:
c001f398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f39c:	0f ae 00             	fxsave [eax]
c001f39f:	c3                   	ret    

c001f3a0 <sseLoad>:
c001f3a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3a4:	0f ae 08             	fxrstor [eax]
c001f3a7:	c3                   	ret    

c001f3a8 <sseInit>:
c001f3a8:	e8 42 00 00 00       	call   c001f3ef <x87Init>
c001f3ad:	0f 20 e0             	mov    eax,cr4
c001f3b0:	66 0d 00 06          	or     ax,0x600
c001f3b4:	0f 22 e0             	mov    cr4,eax
c001f3b7:	c3                   	ret    

c001f3b8 <sseClose>:
c001f3b8:	c3                   	ret    
c001f3b9:	66 90                	xchg   ax,ax
c001f3bb:	66 90                	xchg   ax,ax
c001f3bd:	66 90                	xchg   ax,ax
c001f3bf:	90                   	nop

c001f3c0 <value_37F>:
c001f3c0:	7f 03                	jg     c001f3c5 <value_37A+0x1>

c001f3c2 <value_37E>:
c001f3c2:	7e 03                	jle    c001f3c7 <x87Detect+0x1>

c001f3c4 <value_37A>:
c001f3c4:	7a 03                	jp     c001f3c9 <x87Detect+0x3>

c001f3c6 <x87Detect>:
c001f3c6:	b8 01 00 00 00       	mov    eax,0x1
c001f3cb:	0f a2                	cpuid  
c001f3cd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f3d3:	74 06                	je     c001f3db <x87Detect.nox87>
c001f3d5:	b8 01 00 00 00       	mov    eax,0x1
c001f3da:	c3                   	ret    

c001f3db <x87Detect.nox87>:
c001f3db:	b8 00 00 00 00       	mov    eax,0x0
c001f3e0:	c3                   	ret    

c001f3e1 <x87Save>:
c001f3e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3e5:	dd 30                	fnsave [eax]
c001f3e7:	c3                   	ret    

c001f3e8 <x87Load>:
c001f3e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ec:	dd 20                	frstor [eax]
c001f3ee:	c3                   	ret    

c001f3ef <x87Init>:
c001f3ef:	0f 20 c0             	mov    eax,cr0
c001f3f2:	66 25 fb ff          	and    ax,0xfffb
c001f3f6:	66 0d 22 00          	or     ax,0x22
c001f3fa:	0f 22 c0             	mov    cr0,eax
c001f3fd:	db e3                	fninit 
c001f3ff:	0f 06                	clts   
c001f401:	d9 2d c4 f3 01 c0    	fldcw  WORD PTR ds:0xc001f3c4
c001f407:	c3                   	ret    

c001f408 <x87Close>:
c001f408:	c3                   	ret    
c001f409:	66 90                	xchg   ax,ax
c001f40b:	90                   	nop

c001f40c <__do_global_ctors_aux>:
c001f40c:	a1 c0 03 02 c0       	mov    eax,ds:0xc00203c0
c001f411:	83 f8 ff             	cmp    eax,0xffffffff
c001f414:	74 1a                	je     c001f430 <__do_global_ctors_aux+0x24>
c001f416:	55                   	push   ebp
c001f417:	89 e5                	mov    ebp,esp
c001f419:	53                   	push   ebx
c001f41a:	52                   	push   edx
c001f41b:	bb c0 03 02 c0       	mov    ebx,0xc00203c0
c001f420:	ff d0                	call   eax
c001f422:	83 eb 04             	sub    ebx,0x4
c001f425:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f427:	83 f8 ff             	cmp    eax,0xffffffff
c001f42a:	75 f4                	jne    c001f420 <__do_global_ctors_aux+0x14>
c001f42c:	58                   	pop    eax
c001f42d:	5b                   	pop    ebx
c001f42e:	5d                   	pop    ebp
c001f42f:	c3                   	ret    
c001f430:	c3                   	ret    
c001f431:	66 90                	xchg   ax,ax
c001f433:	90                   	nop

c001f434 <__divdi3>:
c001f434:	55                   	push   ebp
c001f435:	57                   	push   edi
c001f436:	56                   	push   esi
c001f437:	53                   	push   ebx
c001f438:	83 ec 1c             	sub    esp,0x1c
c001f43b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f43f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f443:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f446:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f44a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f44e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f452:	85 db                	test   ebx,ebx
c001f454:	0f 88 8e 00 00 00    	js     c001f4e8 <__divdi3+0xb4>
c001f45a:	89 dd                	mov    ebp,ebx
c001f45c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f464:	89 d3                	mov    ebx,edx
c001f466:	85 d2                	test   edx,edx
c001f468:	79 0d                	jns    c001f477 <__divdi3+0x43>
c001f46a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f46e:	f7 d8                	neg    eax
c001f470:	83 d2 00             	adc    edx,0x0
c001f473:	f7 da                	neg    edx
c001f475:	89 d3                	mov    ebx,edx
c001f477:	89 c7                	mov    edi,eax
c001f479:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f47c:	85 db                	test   ebx,ebx
c001f47e:	75 48                	jne    c001f4c8 <__divdi3+0x94>
c001f480:	39 ef                	cmp    edi,ebp
c001f482:	76 24                	jbe    c001f4a8 <__divdi3+0x74>
c001f484:	89 ea                	mov    edx,ebp
c001f486:	f7 f7                	div    edi
c001f488:	89 c1                	mov    ecx,eax
c001f48a:	31 f6                	xor    esi,esi
c001f48c:	89 c8                	mov    eax,ecx
c001f48e:	89 f2                	mov    edx,esi
c001f490:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f494:	85 c9                	test   ecx,ecx
c001f496:	74 07                	je     c001f49f <__divdi3+0x6b>
c001f498:	f7 d8                	neg    eax
c001f49a:	83 d2 00             	adc    edx,0x0
c001f49d:	f7 da                	neg    edx
c001f49f:	83 c4 1c             	add    esp,0x1c
c001f4a2:	5b                   	pop    ebx
c001f4a3:	5e                   	pop    esi
c001f4a4:	5f                   	pop    edi
c001f4a5:	5d                   	pop    ebp
c001f4a6:	c3                   	ret    
c001f4a7:	90                   	nop
c001f4a8:	85 ff                	test   edi,edi
c001f4aa:	75 0b                	jne    c001f4b7 <__divdi3+0x83>
c001f4ac:	b8 01 00 00 00       	mov    eax,0x1
c001f4b1:	31 d2                	xor    edx,edx
c001f4b3:	f7 f3                	div    ebx
c001f4b5:	89 c7                	mov    edi,eax
c001f4b7:	31 d2                	xor    edx,edx
c001f4b9:	89 e8                	mov    eax,ebp
c001f4bb:	f7 f7                	div    edi
c001f4bd:	89 c6                	mov    esi,eax
c001f4bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f4c2:	f7 f7                	div    edi
c001f4c4:	89 c1                	mov    ecx,eax
c001f4c6:	eb c4                	jmp    c001f48c <__divdi3+0x58>
c001f4c8:	39 eb                	cmp    ebx,ebp
c001f4ca:	77 3c                	ja     c001f508 <__divdi3+0xd4>
c001f4cc:	0f bd f3             	bsr    esi,ebx
c001f4cf:	83 f6 1f             	xor    esi,0x1f
c001f4d2:	75 40                	jne    c001f514 <__divdi3+0xe0>
c001f4d4:	39 eb                	cmp    ebx,ebp
c001f4d6:	72 09                	jb     c001f4e1 <__divdi3+0xad>
c001f4d8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f4db:	0f 87 97 00 00 00    	ja     c001f578 <__divdi3+0x144>
c001f4e1:	b9 01 00 00 00       	mov    ecx,0x1
c001f4e6:	eb a4                	jmp    c001f48c <__divdi3+0x58>
c001f4e8:	f7 d9                	neg    ecx
c001f4ea:	83 d3 00             	adc    ebx,0x0
c001f4ed:	f7 db                	neg    ebx
c001f4ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f4f2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f4f6:	89 dd                	mov    ebp,ebx
c001f4f8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f500:	e9 5f ff ff ff       	jmp    c001f464 <__divdi3+0x30>
c001f505:	8d 76 00             	lea    esi,[esi+0x0]
c001f508:	31 f6                	xor    esi,esi
c001f50a:	31 c9                	xor    ecx,ecx
c001f50c:	e9 7b ff ff ff       	jmp    c001f48c <__divdi3+0x58>
c001f511:	8d 76 00             	lea    esi,[esi+0x0]
c001f514:	b8 20 00 00 00       	mov    eax,0x20
c001f519:	29 f0                	sub    eax,esi
c001f51b:	89 f1                	mov    ecx,esi
c001f51d:	d3 e3                	shl    ebx,cl
c001f51f:	89 fa                	mov    edx,edi
c001f521:	88 c1                	mov    cl,al
c001f523:	d3 ea                	shr    edx,cl
c001f525:	09 da                	or     edx,ebx
c001f527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f52b:	89 f1                	mov    ecx,esi
c001f52d:	d3 e7                	shl    edi,cl
c001f52f:	89 eb                	mov    ebx,ebp
c001f531:	88 c1                	mov    cl,al
c001f533:	d3 eb                	shr    ebx,cl
c001f535:	89 f1                	mov    ecx,esi
c001f537:	d3 e5                	shl    ebp,cl
c001f539:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f53c:	88 c1                	mov    cl,al
c001f53e:	d3 ea                	shr    edx,cl
c001f540:	09 d5                	or     ebp,edx
c001f542:	89 e8                	mov    eax,ebp
c001f544:	89 da                	mov    edx,ebx
c001f546:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f54a:	89 d3                	mov    ebx,edx
c001f54c:	89 c5                	mov    ebp,eax
c001f54e:	f7 e7                	mul    edi
c001f550:	39 d3                	cmp    ebx,edx
c001f552:	72 18                	jb     c001f56c <__divdi3+0x138>
c001f554:	74 0a                	je     c001f560 <__divdi3+0x12c>
c001f556:	89 e9                	mov    ecx,ebp
c001f558:	31 f6                	xor    esi,esi
c001f55a:	e9 2d ff ff ff       	jmp    c001f48c <__divdi3+0x58>
c001f55f:	90                   	nop
c001f560:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f563:	89 f1                	mov    ecx,esi
c001f565:	d3 e7                	shl    edi,cl
c001f567:	39 c7                	cmp    edi,eax
c001f569:	73 eb                	jae    c001f556 <__divdi3+0x122>
c001f56b:	90                   	nop
c001f56c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f56f:	31 f6                	xor    esi,esi
c001f571:	e9 16 ff ff ff       	jmp    c001f48c <__divdi3+0x58>
c001f576:	66 90                	xchg   ax,ax
c001f578:	31 c9                	xor    ecx,ecx
c001f57a:	e9 0d ff ff ff       	jmp    c001f48c <__divdi3+0x58>
c001f57f:	90                   	nop

c001f580 <__moddi3>:
c001f580:	55                   	push   ebp
c001f581:	57                   	push   edi
c001f582:	56                   	push   esi
c001f583:	53                   	push   ebx
c001f584:	83 ec 2c             	sub    esp,0x2c
c001f587:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f58b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f58f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f593:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f597:	85 db                	test   ebx,ebx
c001f599:	0f 88 85 00 00 00    	js     c001f624 <__moddi3+0xa4>
c001f59f:	89 de                	mov    esi,ebx
c001f5a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f5a9:	89 d7                	mov    edi,edx
c001f5ab:	85 d2                	test   edx,edx
c001f5ad:	79 09                	jns    c001f5b8 <__moddi3+0x38>
c001f5af:	f7 d8                	neg    eax
c001f5b1:	83 d2 00             	adc    edx,0x0
c001f5b4:	f7 da                	neg    edx
c001f5b6:	89 d7                	mov    edi,edx
c001f5b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5bc:	89 cd                	mov    ebp,ecx
c001f5be:	85 ff                	test   edi,edi
c001f5c0:	75 52                	jne    c001f614 <__moddi3+0x94>
c001f5c2:	89 c3                	mov    ebx,eax
c001f5c4:	39 f0                	cmp    eax,esi
c001f5c6:	76 24                	jbe    c001f5ec <__moddi3+0x6c>
c001f5c8:	89 c8                	mov    eax,ecx
c001f5ca:	89 f2                	mov    edx,esi
c001f5cc:	f7 f3                	div    ebx
c001f5ce:	89 d6                	mov    esi,edx
c001f5d0:	89 f0                	mov    eax,esi
c001f5d2:	31 d2                	xor    edx,edx
c001f5d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f5d8:	85 c9                	test   ecx,ecx
c001f5da:	74 07                	je     c001f5e3 <__moddi3+0x63>
c001f5dc:	f7 d8                	neg    eax
c001f5de:	83 d2 00             	adc    edx,0x0
c001f5e1:	f7 da                	neg    edx
c001f5e3:	83 c4 2c             	add    esp,0x2c
c001f5e6:	5b                   	pop    ebx
c001f5e7:	5e                   	pop    esi
c001f5e8:	5f                   	pop    edi
c001f5e9:	5d                   	pop    ebp
c001f5ea:	c3                   	ret    
c001f5eb:	90                   	nop
c001f5ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f5f0:	85 db                	test   ebx,ebx
c001f5f2:	75 0d                	jne    c001f601 <__moddi3+0x81>
c001f5f4:	b8 01 00 00 00       	mov    eax,0x1
c001f5f9:	31 d2                	xor    edx,edx
c001f5fb:	f7 f7                	div    edi
c001f5fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f601:	89 f0                	mov    eax,esi
c001f603:	31 d2                	xor    edx,edx
c001f605:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f609:	f7 f7                	div    edi
c001f60b:	89 e8                	mov    eax,ebp
c001f60d:	f7 f7                	div    edi
c001f60f:	89 d6                	mov    esi,edx
c001f611:	eb bd                	jmp    c001f5d0 <__moddi3+0x50>
c001f613:	90                   	nop
c001f614:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f618:	39 f7                	cmp    edi,esi
c001f61a:	76 20                	jbe    c001f63c <__moddi3+0xbc>
c001f61c:	89 c8                	mov    eax,ecx
c001f61e:	89 f2                	mov    edx,esi
c001f620:	eb b2                	jmp    c001f5d4 <__moddi3+0x54>
c001f622:	66 90                	xchg   ax,ax
c001f624:	f7 d9                	neg    ecx
c001f626:	83 d3 00             	adc    ebx,0x0
c001f629:	f7 db                	neg    ebx
c001f62b:	89 de                	mov    esi,ebx
c001f62d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f635:	e9 6f ff ff ff       	jmp    c001f5a9 <__moddi3+0x29>
c001f63a:	66 90                	xchg   ax,ax
c001f63c:	0f bd c7             	bsr    eax,edi
c001f63f:	83 f0 1f             	xor    eax,0x1f
c001f642:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f646:	75 24                	jne    c001f66c <__moddi3+0xec>
c001f648:	39 f7                	cmp    edi,esi
c001f64a:	72 06                	jb     c001f652 <__moddi3+0xd2>
c001f64c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f650:	77 0c                	ja     c001f65e <__moddi3+0xde>
c001f652:	89 e9                	mov    ecx,ebp
c001f654:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f658:	19 fe                	sbb    esi,edi
c001f65a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f65e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f662:	89 f2                	mov    edx,esi
c001f664:	e9 6b ff ff ff       	jmp    c001f5d4 <__moddi3+0x54>
c001f669:	8d 76 00             	lea    esi,[esi+0x0]
c001f66c:	b8 20 00 00 00       	mov    eax,0x20
c001f671:	89 c2                	mov    edx,eax
c001f673:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f677:	29 da                	sub    edx,ebx
c001f679:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f67d:	88 d9                	mov    cl,bl
c001f67f:	d3 e7                	shl    edi,cl
c001f681:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f685:	88 d1                	mov    cl,dl
c001f687:	d3 e8                	shr    eax,cl
c001f689:	09 c7                	or     edi,eax
c001f68b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f68f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f693:	89 d8                	mov    eax,ebx
c001f695:	88 d9                	mov    cl,bl
c001f697:	d3 e7                	shl    edi,cl
c001f699:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f69d:	89 f3                	mov    ebx,esi
c001f69f:	88 d1                	mov    cl,dl
c001f6a1:	d3 eb                	shr    ebx,cl
c001f6a3:	89 c7                	mov    edi,eax
c001f6a5:	88 c1                	mov    cl,al
c001f6a7:	d3 e6                	shl    esi,cl
c001f6a9:	89 e8                	mov    eax,ebp
c001f6ab:	88 d1                	mov    cl,dl
c001f6ad:	d3 e8                	shr    eax,cl
c001f6af:	09 f0                	or     eax,esi
c001f6b1:	89 f9                	mov    ecx,edi
c001f6b3:	d3 e5                	shl    ebp,cl
c001f6b5:	89 da                	mov    edx,ebx
c001f6b7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f6bb:	89 d3                	mov    ebx,edx
c001f6bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f6c1:	89 c6                	mov    esi,eax
c001f6c3:	89 d1                	mov    ecx,edx
c001f6c5:	39 d3                	cmp    ebx,edx
c001f6c7:	72 27                	jb     c001f6f0 <__moddi3+0x170>
c001f6c9:	74 21                	je     c001f6ec <__moddi3+0x16c>
c001f6cb:	29 f5                	sub    ebp,esi
c001f6cd:	19 cb                	sbb    ebx,ecx
c001f6cf:	89 de                	mov    esi,ebx
c001f6d1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f6d5:	d3 e6                	shl    esi,cl
c001f6d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f6db:	89 f9                	mov    ecx,edi
c001f6dd:	d3 ed                	shr    ebp,cl
c001f6df:	09 ee                	or     esi,ebp
c001f6e1:	89 f0                	mov    eax,esi
c001f6e3:	d3 eb                	shr    ebx,cl
c001f6e5:	89 da                	mov    edx,ebx
c001f6e7:	e9 e8 fe ff ff       	jmp    c001f5d4 <__moddi3+0x54>
c001f6ec:	39 c5                	cmp    ebp,eax
c001f6ee:	73 db                	jae    c001f6cb <__moddi3+0x14b>
c001f6f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f6f4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f6f8:	89 d1                	mov    ecx,edx
c001f6fa:	89 c6                	mov    esi,eax
c001f6fc:	eb cd                	jmp    c001f6cb <__moddi3+0x14b>
c001f6fe:	66 90                	xchg   ax,ax

c001f700 <__udivdi3>:
c001f700:	55                   	push   ebp
c001f701:	57                   	push   edi
c001f702:	56                   	push   esi
c001f703:	53                   	push   ebx
c001f704:	83 ec 1c             	sub    esp,0x1c
c001f707:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f70b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f70f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f713:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f717:	85 d2                	test   edx,edx
c001f719:	75 41                	jne    c001f75c <__udivdi3+0x5c>
c001f71b:	39 f7                	cmp    edi,esi
c001f71d:	76 15                	jbe    c001f734 <__udivdi3+0x34>
c001f71f:	89 e8                	mov    eax,ebp
c001f721:	89 f2                	mov    edx,esi
c001f723:	f7 f7                	div    edi
c001f725:	31 db                	xor    ebx,ebx
c001f727:	89 da                	mov    edx,ebx
c001f729:	83 c4 1c             	add    esp,0x1c
c001f72c:	5b                   	pop    ebx
c001f72d:	5e                   	pop    esi
c001f72e:	5f                   	pop    edi
c001f72f:	5d                   	pop    ebp
c001f730:	c3                   	ret    
c001f731:	8d 76 00             	lea    esi,[esi+0x0]
c001f734:	89 f9                	mov    ecx,edi
c001f736:	85 ff                	test   edi,edi
c001f738:	75 0b                	jne    c001f745 <__udivdi3+0x45>
c001f73a:	b8 01 00 00 00       	mov    eax,0x1
c001f73f:	31 d2                	xor    edx,edx
c001f741:	f7 f7                	div    edi
c001f743:	89 c1                	mov    ecx,eax
c001f745:	31 d2                	xor    edx,edx
c001f747:	89 f0                	mov    eax,esi
c001f749:	f7 f1                	div    ecx
c001f74b:	89 c3                	mov    ebx,eax
c001f74d:	89 e8                	mov    eax,ebp
c001f74f:	f7 f1                	div    ecx
c001f751:	89 da                	mov    edx,ebx
c001f753:	83 c4 1c             	add    esp,0x1c
c001f756:	5b                   	pop    ebx
c001f757:	5e                   	pop    esi
c001f758:	5f                   	pop    edi
c001f759:	5d                   	pop    ebp
c001f75a:	c3                   	ret    
c001f75b:	90                   	nop
c001f75c:	39 f2                	cmp    edx,esi
c001f75e:	77 1c                	ja     c001f77c <__udivdi3+0x7c>
c001f760:	0f bd da             	bsr    ebx,edx
c001f763:	83 f3 1f             	xor    ebx,0x1f
c001f766:	75 24                	jne    c001f78c <__udivdi3+0x8c>
c001f768:	39 f2                	cmp    edx,esi
c001f76a:	72 08                	jb     c001f774 <__udivdi3+0x74>
c001f76c:	39 ef                	cmp    edi,ebp
c001f76e:	0f 87 84 00 00 00    	ja     c001f7f8 <__udivdi3+0xf8>
c001f774:	b8 01 00 00 00       	mov    eax,0x1
c001f779:	eb ac                	jmp    c001f727 <__udivdi3+0x27>
c001f77b:	90                   	nop
c001f77c:	31 db                	xor    ebx,ebx
c001f77e:	31 c0                	xor    eax,eax
c001f780:	89 da                	mov    edx,ebx
c001f782:	83 c4 1c             	add    esp,0x1c
c001f785:	5b                   	pop    ebx
c001f786:	5e                   	pop    esi
c001f787:	5f                   	pop    edi
c001f788:	5d                   	pop    ebp
c001f789:	c3                   	ret    
c001f78a:	66 90                	xchg   ax,ax
c001f78c:	b8 20 00 00 00       	mov    eax,0x20
c001f791:	29 d8                	sub    eax,ebx
c001f793:	88 d9                	mov    cl,bl
c001f795:	d3 e2                	shl    edx,cl
c001f797:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f79b:	89 fa                	mov    edx,edi
c001f79d:	88 c1                	mov    cl,al
c001f79f:	d3 ea                	shr    edx,cl
c001f7a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f7a5:	09 d1                	or     ecx,edx
c001f7a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f7ab:	88 d9                	mov    cl,bl
c001f7ad:	d3 e7                	shl    edi,cl
c001f7af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f7b3:	89 f7                	mov    edi,esi
c001f7b5:	88 c1                	mov    cl,al
c001f7b7:	d3 ef                	shr    edi,cl
c001f7b9:	88 d9                	mov    cl,bl
c001f7bb:	d3 e6                	shl    esi,cl
c001f7bd:	89 ea                	mov    edx,ebp
c001f7bf:	88 c1                	mov    cl,al
c001f7c1:	d3 ea                	shr    edx,cl
c001f7c3:	09 d6                	or     esi,edx
c001f7c5:	89 f0                	mov    eax,esi
c001f7c7:	89 fa                	mov    edx,edi
c001f7c9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f7cd:	89 d7                	mov    edi,edx
c001f7cf:	89 c6                	mov    esi,eax
c001f7d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f7d5:	39 d7                	cmp    edi,edx
c001f7d7:	72 13                	jb     c001f7ec <__udivdi3+0xec>
c001f7d9:	74 09                	je     c001f7e4 <__udivdi3+0xe4>
c001f7db:	89 f0                	mov    eax,esi
c001f7dd:	31 db                	xor    ebx,ebx
c001f7df:	e9 43 ff ff ff       	jmp    c001f727 <__udivdi3+0x27>
c001f7e4:	88 d9                	mov    cl,bl
c001f7e6:	d3 e5                	shl    ebp,cl
c001f7e8:	39 c5                	cmp    ebp,eax
c001f7ea:	73 ef                	jae    c001f7db <__udivdi3+0xdb>
c001f7ec:	8d 46 ff             	lea    eax,[esi-0x1]
c001f7ef:	31 db                	xor    ebx,ebx
c001f7f1:	e9 31 ff ff ff       	jmp    c001f727 <__udivdi3+0x27>
c001f7f6:	66 90                	xchg   ax,ax
c001f7f8:	31 c0                	xor    eax,eax
c001f7fa:	e9 28 ff ff ff       	jmp    c001f727 <__udivdi3+0x27>
c001f7ff:	90                   	nop

c001f800 <__umoddi3>:
c001f800:	55                   	push   ebp
c001f801:	57                   	push   edi
c001f802:	56                   	push   esi
c001f803:	53                   	push   ebx
c001f804:	83 ec 1c             	sub    esp,0x1c
c001f807:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f80b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f80f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f813:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f817:	89 da                	mov    edx,ebx
c001f819:	85 c0                	test   eax,eax
c001f81b:	75 37                	jne    c001f854 <__umoddi3+0x54>
c001f81d:	39 df                	cmp    edi,ebx
c001f81f:	76 13                	jbe    c001f834 <__umoddi3+0x34>
c001f821:	89 f0                	mov    eax,esi
c001f823:	f7 f7                	div    edi
c001f825:	89 d0                	mov    eax,edx
c001f827:	31 d2                	xor    edx,edx
c001f829:	83 c4 1c             	add    esp,0x1c
c001f82c:	5b                   	pop    ebx
c001f82d:	5e                   	pop    esi
c001f82e:	5f                   	pop    edi
c001f82f:	5d                   	pop    ebp
c001f830:	c3                   	ret    
c001f831:	8d 76 00             	lea    esi,[esi+0x0]
c001f834:	89 fd                	mov    ebp,edi
c001f836:	85 ff                	test   edi,edi
c001f838:	75 0b                	jne    c001f845 <__umoddi3+0x45>
c001f83a:	b8 01 00 00 00       	mov    eax,0x1
c001f83f:	31 d2                	xor    edx,edx
c001f841:	f7 f7                	div    edi
c001f843:	89 c5                	mov    ebp,eax
c001f845:	89 d8                	mov    eax,ebx
c001f847:	31 d2                	xor    edx,edx
c001f849:	f7 f5                	div    ebp
c001f84b:	89 f0                	mov    eax,esi
c001f84d:	f7 f5                	div    ebp
c001f84f:	89 d0                	mov    eax,edx
c001f851:	eb d4                	jmp    c001f827 <__umoddi3+0x27>
c001f853:	90                   	nop
c001f854:	89 f1                	mov    ecx,esi
c001f856:	39 d8                	cmp    eax,ebx
c001f858:	76 0a                	jbe    c001f864 <__umoddi3+0x64>
c001f85a:	89 f0                	mov    eax,esi
c001f85c:	83 c4 1c             	add    esp,0x1c
c001f85f:	5b                   	pop    ebx
c001f860:	5e                   	pop    esi
c001f861:	5f                   	pop    edi
c001f862:	5d                   	pop    ebp
c001f863:	c3                   	ret    
c001f864:	0f bd e8             	bsr    ebp,eax
c001f867:	83 f5 1f             	xor    ebp,0x1f
c001f86a:	75 1c                	jne    c001f888 <__umoddi3+0x88>
c001f86c:	39 d8                	cmp    eax,ebx
c001f86e:	72 04                	jb     c001f874 <__umoddi3+0x74>
c001f870:	39 f7                	cmp    edi,esi
c001f872:	77 08                	ja     c001f87c <__umoddi3+0x7c>
c001f874:	89 da                	mov    edx,ebx
c001f876:	29 fe                	sub    esi,edi
c001f878:	19 c2                	sbb    edx,eax
c001f87a:	89 f1                	mov    ecx,esi
c001f87c:	89 c8                	mov    eax,ecx
c001f87e:	83 c4 1c             	add    esp,0x1c
c001f881:	5b                   	pop    ebx
c001f882:	5e                   	pop    esi
c001f883:	5f                   	pop    edi
c001f884:	5d                   	pop    ebp
c001f885:	c3                   	ret    
c001f886:	66 90                	xchg   ax,ax
c001f888:	ba 20 00 00 00       	mov    edx,0x20
c001f88d:	29 ea                	sub    edx,ebp
c001f88f:	89 e9                	mov    ecx,ebp
c001f891:	d3 e0                	shl    eax,cl
c001f893:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f897:	89 f8                	mov    eax,edi
c001f899:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f89d:	88 d1                	mov    cl,dl
c001f89f:	d3 e8                	shr    eax,cl
c001f8a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8a5:	09 c1                	or     ecx,eax
c001f8a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f8ab:	89 e9                	mov    ecx,ebp
c001f8ad:	d3 e7                	shl    edi,cl
c001f8af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f8b3:	89 d8                	mov    eax,ebx
c001f8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8b9:	88 d1                	mov    cl,dl
c001f8bb:	d3 e8                	shr    eax,cl
c001f8bd:	89 c7                	mov    edi,eax
c001f8bf:	89 e9                	mov    ecx,ebp
c001f8c1:	d3 e3                	shl    ebx,cl
c001f8c3:	89 f0                	mov    eax,esi
c001f8c5:	88 d1                	mov    cl,dl
c001f8c7:	d3 e8                	shr    eax,cl
c001f8c9:	09 d8                	or     eax,ebx
c001f8cb:	89 e9                	mov    ecx,ebp
c001f8cd:	d3 e6                	shl    esi,cl
c001f8cf:	89 f3                	mov    ebx,esi
c001f8d1:	89 fa                	mov    edx,edi
c001f8d3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f8d7:	89 d1                	mov    ecx,edx
c001f8d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f8dd:	89 c6                	mov    esi,eax
c001f8df:	89 d7                	mov    edi,edx
c001f8e1:	39 d1                	cmp    ecx,edx
c001f8e3:	72 27                	jb     c001f90c <__umoddi3+0x10c>
c001f8e5:	74 21                	je     c001f908 <__umoddi3+0x108>
c001f8e7:	89 ca                	mov    edx,ecx
c001f8e9:	29 f3                	sub    ebx,esi
c001f8eb:	19 fa                	sbb    edx,edi
c001f8ed:	89 d0                	mov    eax,edx
c001f8ef:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f8f3:	d3 e0                	shl    eax,cl
c001f8f5:	89 e9                	mov    ecx,ebp
c001f8f7:	d3 eb                	shr    ebx,cl
c001f8f9:	09 d8                	or     eax,ebx
c001f8fb:	d3 ea                	shr    edx,cl
c001f8fd:	83 c4 1c             	add    esp,0x1c
c001f900:	5b                   	pop    ebx
c001f901:	5e                   	pop    esi
c001f902:	5f                   	pop    edi
c001f903:	5d                   	pop    ebp
c001f904:	c3                   	ret    
c001f905:	8d 76 00             	lea    esi,[esi+0x0]
c001f908:	39 c3                	cmp    ebx,eax
c001f90a:	73 db                	jae    c001f8e7 <__umoddi3+0xe7>
c001f90c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f910:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f914:	89 d7                	mov    edi,edx
c001f916:	89 c6                	mov    esi,eax
c001f918:	eb cd                	jmp    c001f8e7 <__umoddi3+0xe7>

Disassembly of section .init:

c001f91a <_init>:
c001f91a:	55                   	push   ebp
c001f91b:	89 e5                	mov    ebp,esp
c001f91d:	e8 d2 07 fe ff       	call   c00000f4 <frame_dummy>
c001f922:	e8 e5 fa ff ff       	call   c001f40c <__do_global_ctors_aux>
c001f927:	5d                   	pop    ebp
c001f928:	c3                   	ret    

Disassembly of section .fini:

c001f929 <_fini>:
c001f929:	55                   	push   ebp
c001f92a:	89 e5                	mov    ebp,esp
c001f92c:	e8 53 07 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f931:	5d                   	pop    ebp
c001f932:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f934 <Computer::~Computer()>:
c001f934:	83 ec 0c             	sub    esp,0xc
c001f937:	ba 54 0c 02 c0       	mov    edx,0xc0020c54
c001f93c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f940:	89 10                	mov    DWORD PTR [eax],edx
c001f942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f946:	83 ec 0c             	sub    esp,0xc
c001f949:	50                   	push   eax
c001f94a:	e8 41 cf fe ff       	call   c000c890 <Device::~Device()>
c001f94f:	83 c4 10             	add    esp,0x10
c001f952:	90                   	nop
c001f953:	83 c4 0c             	add    esp,0xc
c001f956:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f958 <Computer::~Computer()>:
c001f958:	83 ec 0c             	sub    esp,0xc
c001f95b:	83 ec 0c             	sub    esp,0xc
c001f95e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f962:	e8 cd ff ff ff       	call   c001f934 <Computer::~Computer()>
c001f967:	83 c4 10             	add    esp,0x10
c001f96a:	83 ec 08             	sub    esp,0x8
c001f96d:	68 70 01 00 00       	push   0x170
c001f972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f976:	e8 9d ae fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f97b:	83 c4 10             	add    esp,0x10
c001f97e:	83 c4 0c             	add    esp,0xc
c001f981:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f982 <idleCommon()>:
c001f982:	83 ec 0c             	sub    esp,0xc
c001f985:	fa                   	cli    
c001f986:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001f98c:	e8 f7 66 ff ff       	call   c0016088 <schedule()>
c001f991:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001f996:	48                   	dec    eax
c001f997:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001f99c:	75 01                	jne    c001f99f <idleCommon()+0x1d>
c001f99e:	fb                   	sti    
c001f99f:	83 c4 0c             	add    esp,0xc
c001f9a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f9a4 <LinkedList<UnixFile>::~LinkedList()>:
c001f9a4:	90                   	nop
c001f9a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f9a6 <LinkedList<UnixFile>::LinkedList()>:
c001f9a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9e6:	90                   	nop
c001f9e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f9e8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f9e8:	83 ec 0c             	sub    esp,0xc
c001f9eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f9f0:	75 10                	jne    c001fa02 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f9f2:	83 ec 0c             	sub    esp,0xc
c001f9f5:	68 68 0e 02 c0       	push   0xc0020e68
c001f9fa:	e8 e8 1b ff ff       	call   c00115e7 <KePanic(char const*)>
c001f9ff:	83 c4 10             	add    esp,0x10
c001fa02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa06:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa08:	85 c0                	test   eax,eax
c001fa0a:	74 34                	je     c001fa40 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa13:	85 c0                	test   eax,eax
c001fa15:	74 29                	je     c001fa40 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa22:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa2d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa3e:	eb 65                	jmp    c001faa5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa44:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa46:	85 c0                	test   eax,eax
c001fa48:	75 4b                	jne    c001fa95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa51:	85 c0                	test   eax,eax
c001fa53:	75 40                	jne    c001fa95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa5d:	89 10                	mov    DWORD PTR [eax],edx
c001fa5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa71:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa7f:	85 c0                	test   eax,eax
c001fa81:	74 22                	je     c001faa5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa83:	83 ec 0c             	sub    esp,0xc
c001fa86:	68 8a 0e 02 c0       	push   0xc0020e8a
c001fa8b:	e8 57 1b ff ff       	call   c00115e7 <KePanic(char const*)>
c001fa90:	83 c4 10             	add    esp,0x10
c001fa93:	eb 10                	jmp    c001faa5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa95:	83 ec 0c             	sub    esp,0xc
c001fa98:	68 94 0e 02 c0       	push   0xc0020e94
c001fa9d:	e8 45 1b ff ff       	call   c00115e7 <KePanic(char const*)>
c001faa2:	83 c4 10             	add    esp,0x10
c001faa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faac:	8d 50 01             	lea    edx,[eax+0x1]
c001faaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fab6:	90                   	nop
c001fab7:	83 c4 0c             	add    esp,0xc
c001faba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fabc <LinkedList<UnixFile>::getFirstElement()>:
c001fabc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fac0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fac2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fac4 <LinkedList<UnixFile>::removeFirst()>:
c001fac4:	83 ec 0c             	sub    esp,0xc
c001fac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001facb:	8b 00                	mov    eax,DWORD PTR [eax]
c001facd:	85 c0                	test   eax,eax
c001facf:	75 12                	jne    c001fae3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fad1:	83 ec 0c             	sub    esp,0xc
c001fad4:	68 a0 0e 02 c0       	push   0xc0020ea0
c001fad9:	e8 09 1b ff ff       	call   c00115e7 <KePanic(char const*)>
c001fade:	83 c4 10             	add    esp,0x10
c001fae1:	eb 7e                	jmp    c001fb61 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faed:	85 c0                	test   eax,eax
c001faef:	74 10                	je     c001fb01 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001faf1:	83 ec 0c             	sub    esp,0xc
c001faf4:	68 eb 0e 02 c0       	push   0xc0020eeb
c001faf9:	e8 e9 1a ff ff       	call   c00115e7 <KePanic(char const*)>
c001fafe:	83 c4 10             	add    esp,0x10
c001fb01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb05:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb0a:	85 c0                	test   eax,eax
c001fb0c:	75 33                	jne    c001fb41 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb2a:	83 f8 01             	cmp    eax,0x1
c001fb2d:	74 21                	je     c001fb50 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb2f:	83 ec 0c             	sub    esp,0xc
c001fb32:	68 c4 0e 02 c0       	push   0xc0020ec4
c001fb37:	e8 ab 1a ff ff       	call   c00115e7 <KePanic(char const*)>
c001fb3c:	83 c4 10             	add    esp,0x10
c001fb3f:	eb 0f                	jmp    c001fb50 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb45:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb47:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4e:	89 10                	mov    DWORD PTR [eax],edx
c001fb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb57:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb61:	83 c4 0c             	add    esp,0xc
c001fb64:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fb66 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fb66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb6a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb6d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fb6e <DriverlessDevice::~DriverlessDevice()>:
c001fb6e:	ba dc 1a 02 c0       	mov    edx,0xc0021adc
c001fb73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb77:	89 10                	mov    DWORD PTR [eax],edx
c001fb79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb7d:	50                   	push   eax
c001fb7e:	e8 0d cd fe ff       	call   c000c890 <Device::~Device()>
c001fb83:	83 c4 04             	add    esp,0x4
c001fb86:	90                   	nop
c001fb87:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fb88 <DriverlessDevice::~DriverlessDevice()>:
c001fb88:	83 ec 0c             	sub    esp,0xc
c001fb8b:	83 ec 0c             	sub    esp,0xc
c001fb8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb92:	e8 d7 ff ff ff       	call   c001fb6e <DriverlessDevice::~DriverlessDevice()>
c001fb97:	83 c4 10             	add    esp,0x10
c001fb9a:	83 ec 08             	sub    esp,0x8
c001fb9d:	68 58 01 00 00       	push   0x158
c001fba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fba6:	e8 6d ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fbab:	83 c4 10             	add    esp,0x10
c001fbae:	83 c4 0c             	add    esp,0xc
c001fbb1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fbb2 <LinkedList<Device>::addElement(Device*)>:
c001fbb2:	83 ec 0c             	sub    esp,0xc
c001fbb5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fbba:	75 10                	jne    c001fbcc <LinkedList<Device>::addElement(Device*)+0x1a>
c001fbbc:	83 ec 0c             	sub    esp,0xc
c001fbbf:	68 68 0e 02 c0       	push   0xc0020e68
c001fbc4:	e8 1e 1a ff ff       	call   c00115e7 <KePanic(char const*)>
c001fbc9:	83 c4 10             	add    esp,0x10
c001fbcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbd2:	85 c0                	test   eax,eax
c001fbd4:	74 3a                	je     c001fc10 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fbd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbdd:	85 c0                	test   eax,eax
c001fbdf:	74 2f                	je     c001fc10 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fbe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbe8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbec:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fbf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbfa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc04:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc0e:	eb 68                	jmp    c001fc78 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc16:	85 c0                	test   eax,eax
c001fc18:	75 4e                	jne    c001fc68 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc21:	85 c0                	test   eax,eax
c001fc23:	75 43                	jne    c001fc68 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc2d:	89 10                	mov    DWORD PTR [eax],edx
c001fc2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc41:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc52:	85 c0                	test   eax,eax
c001fc54:	74 22                	je     c001fc78 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc56:	83 ec 0c             	sub    esp,0xc
c001fc59:	68 8a 0e 02 c0       	push   0xc0020e8a
c001fc5e:	e8 84 19 ff ff       	call   c00115e7 <KePanic(char const*)>
c001fc63:	83 c4 10             	add    esp,0x10
c001fc66:	eb 10                	jmp    c001fc78 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc68:	83 ec 0c             	sub    esp,0xc
c001fc6b:	68 94 0e 02 c0       	push   0xc0020e94
c001fc70:	e8 72 19 ff ff       	call   c00115e7 <KePanic(char const*)>
c001fc75:	83 c4 10             	add    esp,0x10
c001fc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc7f:	8d 50 01             	lea    edx,[eax+0x1]
c001fc82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc86:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc89:	90                   	nop
c001fc8a:	83 c4 0c             	add    esp,0xc
c001fc8d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fc8e <LinkedList<Device>::LinkedList()>:
c001fc8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fca3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fca7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fcae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fcb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fcc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcc7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fcce:	90                   	nop
c001fccf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fcd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fcd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcd6:	85 c0                	test   eax,eax
c001fcd8:	75 0e                	jne    c001fce8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fcda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fce1:	85 c0                	test   eax,eax
c001fce3:	75 03                	jne    c001fce8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fce5:	b0 01                	mov    al,0x1
c001fce7:	c3                   	ret    
c001fce8:	b0 00                	mov    al,0x0
c001fcea:	90                   	nop
c001fceb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fcec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fcf4:	83 ec 0c             	sub    esp,0xc
c001fcf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcfd:	85 c0                	test   eax,eax
c001fcff:	75 17                	jne    c001fd18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fd01:	83 ec 0c             	sub    esp,0xc
c001fd04:	68 a0 0e 02 c0       	push   0xc0020ea0
c001fd09:	e8 d9 18 ff ff       	call   c00115e7 <KePanic(char const*)>
c001fd0e:	83 c4 10             	add    esp,0x10
c001fd11:	e9 96 00 00 00       	jmp    c001fdac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fd16:	66 90                	xchg   ax,ax
c001fd18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd1f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd22:	85 c0                	test   eax,eax
c001fd24:	0f 95 c0             	setne  al
c001fd27:	0f b6 c0             	movzx  eax,al
c001fd2a:	85 c0                	test   eax,eax
c001fd2c:	74 12                	je     c001fd40 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fd2e:	83 ec 0c             	sub    esp,0xc
c001fd31:	68 eb 0e 02 c0       	push   0xc0020eeb
c001fd36:	e8 ac 18 ff ff       	call   c00115e7 <KePanic(char const*)>
c001fd3b:	83 c4 10             	add    esp,0x10
c001fd3e:	66 90                	xchg   ax,ax
c001fd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd44:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd49:	85 c0                	test   eax,eax
c001fd4b:	0f 94 c0             	sete   al
c001fd4e:	0f b6 c0             	movzx  eax,al
c001fd51:	85 c0                	test   eax,eax
c001fd53:	74 33                	je     c001fd88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fd55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd59:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd71:	83 f8 01             	cmp    eax,0x1
c001fd74:	74 22                	je     c001fd98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd76:	83 ec 0c             	sub    esp,0xc
c001fd79:	68 c4 0e 02 c0       	push   0xc0020ec4
c001fd7e:	e8 64 18 ff ff       	call   c00115e7 <KePanic(char const*)>
c001fd83:	83 c4 10             	add    esp,0x10
c001fd86:	eb 10                	jmp    c001fd98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd8e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fd91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd95:	89 10                	mov    DWORD PTR [eax],edx
c001fd97:	90                   	nop
c001fd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd9f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fda9:	8d 76 00             	lea    esi,[esi+0x0]
c001fdac:	83 c4 0c             	add    esp,0xc
c001fdaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fdb0:	83 ec 0c             	sub    esp,0xc
c001fdb3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fdb8:	75 12                	jne    c001fdcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fdba:	83 ec 0c             	sub    esp,0xc
c001fdbd:	68 68 0e 02 c0       	push   0xc0020e68
c001fdc2:	e8 20 18 ff ff       	call   c00115e7 <KePanic(char const*)>
c001fdc7:	83 c4 10             	add    esp,0x10
c001fdca:	66 90                	xchg   ax,ax
c001fdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdd2:	85 c0                	test   eax,eax
c001fdd4:	74 36                	je     c001fe0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fdd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fddd:	85 c0                	test   eax,eax
c001fddf:	74 2b                	je     c001fe0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fde1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fde8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdec:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fdef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdf7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fdfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe01:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe08:	eb 6a                	jmp    c001fe74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe0a:	66 90                	xchg   ax,ax
c001fe0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe10:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe12:	85 c0                	test   eax,eax
c001fe14:	75 4e                	jne    c001fe64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe1d:	85 c0                	test   eax,eax
c001fe1f:	75 43                	jne    c001fe64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe25:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe29:	89 10                	mov    DWORD PTR [eax],edx
c001fe2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe3d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe4b:	85 c0                	test   eax,eax
c001fe4d:	74 25                	je     c001fe74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe4f:	83 ec 0c             	sub    esp,0xc
c001fe52:	68 8a 0e 02 c0       	push   0xc0020e8a
c001fe57:	e8 8b 17 ff ff       	call   c00115e7 <KePanic(char const*)>
c001fe5c:	83 c4 10             	add    esp,0x10
c001fe5f:	eb 13                	jmp    c001fe74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe61:	8d 76 00             	lea    esi,[esi+0x0]
c001fe64:	83 ec 0c             	sub    esp,0xc
c001fe67:	68 94 0e 02 c0       	push   0xc0020e94
c001fe6c:	e8 76 17 ff ff       	call   c00115e7 <KePanic(char const*)>
c001fe71:	83 c4 10             	add    esp,0x10
c001fe74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe7b:	8d 50 01             	lea    edx,[eax+0x1]
c001fe7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe85:	90                   	nop
c001fe86:	83 c4 0c             	add    esp,0xc
c001fe89:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fe8c <ACPI::~ACPI()>:
c001fe8c:	83 ec 0c             	sub    esp,0xc
c001fe8f:	ba c4 20 02 c0       	mov    edx,0xc00220c4
c001fe94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe98:	89 10                	mov    DWORD PTR [eax],edx
c001fe9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9e:	83 ec 0c             	sub    esp,0xc
c001fea1:	50                   	push   eax
c001fea2:	e8 e9 c9 fe ff       	call   c000c890 <Device::~Device()>
c001fea7:	83 c4 10             	add    esp,0x10
c001feaa:	90                   	nop
c001feab:	83 c4 0c             	add    esp,0xc
c001feae:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001feb0 <ACPI::~ACPI()>:
c001feb0:	83 ec 0c             	sub    esp,0xc
c001feb3:	83 ec 0c             	sub    esp,0xc
c001feb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feba:	e8 cd ff ff ff       	call   c001fe8c <ACPI::~ACPI()>
c001febf:	83 c4 10             	add    esp,0x10
c001fec2:	83 ec 08             	sub    esp,0x8
c001fec5:	68 64 12 00 00       	push   0x1264
c001feca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fece:	e8 45 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fed3:	83 c4 10             	add    esp,0x10
c001fed6:	83 c4 0c             	add    esp,0xc
c001fed9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fedc <LinkedList<Device>::~LinkedList()>:
c001fedc:	90                   	nop
c001fedd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fee0 <LinkedList<Device>::isEmpty()>:
c001fee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fee4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fee6:	85 c0                	test   eax,eax
c001fee8:	75 0e                	jne    c001fef8 <LinkedList<Device>::isEmpty()+0x18>
c001feea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001feee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fef1:	85 c0                	test   eax,eax
c001fef3:	75 03                	jne    c001fef8 <LinkedList<Device>::isEmpty()+0x18>
c001fef5:	b0 01                	mov    al,0x1
c001fef7:	c3                   	ret    
c001fef8:	b0 00                	mov    al,0x0
c001fefa:	90                   	nop
c001fefb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fefc <LinkedList<Device>::getFirstElement()>:
c001fefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff02:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ff04 <LinkedList<Device>::removeFirst()>:
c001ff04:	83 ec 0c             	sub    esp,0xc
c001ff07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff0d:	85 c0                	test   eax,eax
c001ff0f:	75 17                	jne    c001ff28 <LinkedList<Device>::removeFirst()+0x24>
c001ff11:	83 ec 0c             	sub    esp,0xc
c001ff14:	68 a0 0e 02 c0       	push   0xc0020ea0
c001ff19:	e8 c9 16 ff ff       	call   c00115e7 <KePanic(char const*)>
c001ff1e:	83 c4 10             	add    esp,0x10
c001ff21:	e9 92 00 00 00       	jmp    c001ffb8 <LinkedList<Device>::removeFirst()+0xb4>
c001ff26:	66 90                	xchg   ax,ax
c001ff28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff2f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff35:	85 c0                	test   eax,eax
c001ff37:	74 13                	je     c001ff4c <LinkedList<Device>::removeFirst()+0x48>
c001ff39:	83 ec 0c             	sub    esp,0xc
c001ff3c:	68 eb 0e 02 c0       	push   0xc0020eeb
c001ff41:	e8 a1 16 ff ff       	call   c00115e7 <KePanic(char const*)>
c001ff46:	83 c4 10             	add    esp,0x10
c001ff49:	8d 76 00             	lea    esi,[esi+0x0]
c001ff4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff50:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff52:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff58:	85 c0                	test   eax,eax
c001ff5a:	75 34                	jne    c001ff90 <LinkedList<Device>::removeFirst()+0x8c>
c001ff5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ff71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff75:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff78:	83 f8 01             	cmp    eax,0x1
c001ff7b:	74 27                	je     c001ffa4 <LinkedList<Device>::removeFirst()+0xa0>
c001ff7d:	83 ec 0c             	sub    esp,0xc
c001ff80:	68 c4 0e 02 c0       	push   0xc0020ec4
c001ff85:	e8 5d 16 ff ff       	call   c00115e7 <KePanic(char const*)>
c001ff8a:	83 c4 10             	add    esp,0x10
c001ff8d:	eb 15                	jmp    c001ffa4 <LinkedList<Device>::removeFirst()+0xa0>
c001ff8f:	90                   	nop
c001ff90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff94:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff96:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ff9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa0:	89 10                	mov    DWORD PTR [eax],edx
c001ffa2:	66 90                	xchg   ax,ax
c001ffa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffab:	8d 50 ff             	lea    edx,[eax-0x1]
c001ffae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ffb5:	8d 76 00             	lea    esi,[esi+0x0]
c001ffb8:	83 c4 0c             	add    esp,0xc
c001ffbb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ffbc <CPU::~CPU()>:
c001ffbc:	83 ec 0c             	sub    esp,0xc
c001ffbf:	ba 6c 22 02 c0       	mov    edx,0xc002226c
c001ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc8:	89 10                	mov    DWORD PTR [eax],edx
c001ffca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffce:	83 ec 0c             	sub    esp,0xc
c001ffd1:	50                   	push   eax
c001ffd2:	e8 b9 c8 fe ff       	call   c000c890 <Device::~Device()>
c001ffd7:	83 c4 10             	add    esp,0x10
c001ffda:	90                   	nop
c001ffdb:	83 c4 0c             	add    esp,0xc
c001ffde:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ffe0 <CPU::~CPU()>:
c001ffe0:	83 ec 0c             	sub    esp,0xc
c001ffe3:	83 ec 0c             	sub    esp,0xc
c001ffe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffea:	e8 cd ff ff ff       	call   c001ffbc <CPU::~CPU()>
c001ffef:	83 c4 10             	add    esp,0x10
c001fff2:	83 ec 08             	sub    esp,0x8
c001fff5:	68 94 11 00 00       	push   0x1194
c001fffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fffe:	e8 15 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020003:	83 c4 10             	add    esp,0x10
c0020006:	83 c4 0c             	add    esp,0xc
c0020009:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002000c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002000c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020010:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020013:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020014 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020014:	90                   	nop
c0020015:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020018 <ThreadControlBlock::ThreadControlBlock()>:
c0020018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002001c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020027:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002002e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020032:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002003d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020044:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020048:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002004f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020053:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020057:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002005b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002005f:	90                   	nop
c0020060:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020064 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020068:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002006e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020072:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020079:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002007d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002008e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020092:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020099:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002009d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00200a4:	90                   	nop
c00200a5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00200a6 <PCI::~PCI()>:
c00200a6:	83 ec 0c             	sub    esp,0xc
c00200a9:	ba 4c 31 02 c0       	mov    edx,0xc002314c
c00200ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b2:	89 10                	mov    DWORD PTR [eax],edx
c00200b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b8:	83 ec 0c             	sub    esp,0xc
c00200bb:	50                   	push   eax
c00200bc:	e8 67 c2 fe ff       	call   c000c328 <Bus::~Bus()>
c00200c1:	83 c4 10             	add    esp,0x10
c00200c4:	90                   	nop
c00200c5:	83 c4 0c             	add    esp,0xc
c00200c8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00200ca <PCI::~PCI()>:
c00200ca:	83 ec 0c             	sub    esp,0xc
c00200cd:	83 ec 0c             	sub    esp,0xc
c00200d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200d4:	e8 cd ff ff ff       	call   c00200a6 <PCI::~PCI()>
c00200d9:	83 c4 10             	add    esp,0x10
c00200dc:	83 ec 08             	sub    esp,0x8
c00200df:	68 5c 01 00 00       	push   0x15c
c00200e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200e8:	e8 2b a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00200ed:	83 c4 10             	add    esp,0x10
c00200f0:	83 c4 0c             	add    esp,0xc
c00200f3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00200f4 <IDE::~IDE()>:
c00200f4:	83 ec 0c             	sub    esp,0xc
c00200f7:	ba 00 32 02 c0       	mov    edx,0xc0023200
c00200fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020100:	89 10                	mov    DWORD PTR [eax],edx
c0020102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020106:	83 ec 0c             	sub    esp,0xc
c0020109:	50                   	push   eax
c002010a:	e8 f9 cb fe ff       	call   c000cd08 <HardDiskController::~HardDiskController()>
c002010f:	83 c4 10             	add    esp,0x10
c0020112:	90                   	nop
c0020113:	83 c4 0c             	add    esp,0xc
c0020116:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020118 <IDE::~IDE()>:
c0020118:	83 ec 0c             	sub    esp,0xc
c002011b:	83 ec 0c             	sub    esp,0xc
c002011e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020122:	e8 cd ff ff ff       	call   c00200f4 <IDE::~IDE()>
c0020127:	83 c4 10             	add    esp,0x10
c002012a:	83 ec 08             	sub    esp,0x8
c002012d:	68 70 02 00 00       	push   0x270
c0020132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020136:	e8 dd a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002013b:	83 c4 10             	add    esp,0x10
c002013e:	83 c4 0c             	add    esp,0xc
c0020141:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020142 <SATABus::~SATABus()>:
c0020142:	83 ec 0c             	sub    esp,0xc
c0020145:	ba 50 32 02 c0       	mov    edx,0xc0023250
c002014a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002014e:	89 10                	mov    DWORD PTR [eax],edx
c0020150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020154:	83 ec 0c             	sub    esp,0xc
c0020157:	50                   	push   eax
c0020158:	e8 ab cb fe ff       	call   c000cd08 <HardDiskController::~HardDiskController()>
c002015d:	83 c4 10             	add    esp,0x10
c0020160:	90                   	nop
c0020161:	83 c4 0c             	add    esp,0xc
c0020164:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020166 <SATABus::~SATABus()>:
c0020166:	83 ec 0c             	sub    esp,0xc
c0020169:	83 ec 0c             	sub    esp,0xc
c002016c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020170:	e8 cd ff ff ff       	call   c0020142 <SATABus::~SATABus()>
c0020175:	83 c4 10             	add    esp,0x10
c0020178:	83 ec 08             	sub    esp,0x8
c002017b:	68 64 01 00 00       	push   0x164
c0020180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020184:	e8 8f a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020189:	83 c4 10             	add    esp,0x10
c002018c:	83 c4 0c             	add    esp,0xc
c002018f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020190 <ATA::~ATA()>:
c0020190:	83 ec 0c             	sub    esp,0xc
c0020193:	ba 90 32 02 c0       	mov    edx,0xc0023290
c0020198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002019c:	89 10                	mov    DWORD PTR [eax],edx
c002019e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a2:	83 ec 0c             	sub    esp,0xc
c00201a5:	50                   	push   eax
c00201a6:	e8 3f cc fe ff       	call   c000cdea <PhysicalDisk::~PhysicalDisk()>
c00201ab:	83 c4 10             	add    esp,0x10
c00201ae:	90                   	nop
c00201af:	83 c4 0c             	add    esp,0xc
c00201b2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00201b4 <ATA::~ATA()>:
c00201b4:	83 ec 0c             	sub    esp,0xc
c00201b7:	83 ec 0c             	sub    esp,0xc
c00201ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201be:	e8 cd ff ff ff       	call   c0020190 <ATA::~ATA()>
c00201c3:	83 c4 10             	add    esp,0x10
c00201c6:	83 ec 08             	sub    esp,0x8
c00201c9:	68 7c 01 00 00       	push   0x17c
c00201ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201d2:	e8 41 a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00201d7:	83 c4 10             	add    esp,0x10
c00201da:	83 c4 0c             	add    esp,0xc
c00201dd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00201de <ATAPI::~ATAPI()>:
c00201de:	83 ec 0c             	sub    esp,0xc
c00201e1:	ba d8 32 02 c0       	mov    edx,0xc00232d8
c00201e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ea:	89 10                	mov    DWORD PTR [eax],edx
c00201ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f0:	83 ec 0c             	sub    esp,0xc
c00201f3:	50                   	push   eax
c00201f4:	e8 f1 cb fe ff       	call   c000cdea <PhysicalDisk::~PhysicalDisk()>
c00201f9:	83 c4 10             	add    esp,0x10
c00201fc:	90                   	nop
c00201fd:	83 c4 0c             	add    esp,0xc
c0020200:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020202 <ATAPI::~ATAPI()>:
c0020202:	83 ec 0c             	sub    esp,0xc
c0020205:	83 ec 0c             	sub    esp,0xc
c0020208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002020c:	e8 cd ff ff ff       	call   c00201de <ATAPI::~ATAPI()>
c0020211:	83 c4 10             	add    esp,0x10
c0020214:	83 ec 08             	sub    esp,0x8
c0020217:	68 84 01 00 00       	push   0x184
c002021c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020220:	e8 f3 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020225:	83 c4 10             	add    esp,0x10
c0020228:	83 c4 0c             	add    esp,0xc
c002022b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002022c <SATA::~SATA()>:
c002022c:	83 ec 0c             	sub    esp,0xc
c002022f:	ba 8c 33 02 c0       	mov    edx,0xc002338c
c0020234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020238:	89 10                	mov    DWORD PTR [eax],edx
c002023a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002023e:	83 ec 0c             	sub    esp,0xc
c0020241:	50                   	push   eax
c0020242:	e8 a3 cb fe ff       	call   c000cdea <PhysicalDisk::~PhysicalDisk()>
c0020247:	83 c4 10             	add    esp,0x10
c002024a:	90                   	nop
c002024b:	83 c4 0c             	add    esp,0xc
c002024e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020250 <SATA::~SATA()>:
c0020250:	83 ec 0c             	sub    esp,0xc
c0020253:	83 ec 0c             	sub    esp,0xc
c0020256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002025a:	e8 cd ff ff ff       	call   c002022c <SATA::~SATA()>
c002025f:	83 c4 10             	add    esp,0x10
c0020262:	83 ec 08             	sub    esp,0x8
c0020265:	68 7c 01 00 00       	push   0x17c
c002026a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002026e:	e8 a5 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020273:	83 c4 10             	add    esp,0x10
c0020276:	83 c4 0c             	add    esp,0xc
c0020279:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002027a <SATAPI::~SATAPI()>:
c002027a:	83 ec 0c             	sub    esp,0xc
c002027d:	ba b0 34 02 c0       	mov    edx,0xc00234b0
c0020282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020286:	89 10                	mov    DWORD PTR [eax],edx
c0020288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002028c:	83 ec 0c             	sub    esp,0xc
c002028f:	50                   	push   eax
c0020290:	e8 55 cb fe ff       	call   c000cdea <PhysicalDisk::~PhysicalDisk()>
c0020295:	83 c4 10             	add    esp,0x10
c0020298:	90                   	nop
c0020299:	83 c4 0c             	add    esp,0xc
c002029c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002029e <SATAPI::~SATAPI()>:
c002029e:	83 ec 0c             	sub    esp,0xc
c00202a1:	83 ec 0c             	sub    esp,0xc
c00202a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202a8:	e8 cd ff ff ff       	call   c002027a <SATAPI::~SATAPI()>
c00202ad:	83 c4 10             	add    esp,0x10
c00202b0:	83 ec 08             	sub    esp,0x8
c00202b3:	68 84 01 00 00       	push   0x184
c00202b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202bc:	e8 57 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00202c1:	83 c4 10             	add    esp,0x10
c00202c4:	83 c4 0c             	add    esp,0xc
c00202c7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00202c8 <IOAPIC::~IOAPIC()>:
c00202c8:	83 ec 0c             	sub    esp,0xc
c00202cb:	ba f0 34 02 c0       	mov    edx,0xc00234f0
c00202d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202d4:	89 10                	mov    DWORD PTR [eax],edx
c00202d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202da:	83 ec 0c             	sub    esp,0xc
c00202dd:	50                   	push   eax
c00202de:	e8 ad c5 fe ff       	call   c000c890 <Device::~Device()>
c00202e3:	83 c4 10             	add    esp,0x10
c00202e6:	90                   	nop
c00202e7:	83 c4 0c             	add    esp,0xc
c00202ea:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00202ec <IOAPIC::~IOAPIC()>:
c00202ec:	83 ec 0c             	sub    esp,0xc
c00202ef:	83 ec 0c             	sub    esp,0xc
c00202f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202f6:	e8 cd ff ff ff       	call   c00202c8 <IOAPIC::~IOAPIC()>
c00202fb:	83 c4 10             	add    esp,0x10
c00202fe:	83 ec 08             	sub    esp,0x8
c0020301:	68 68 01 00 00       	push   0x168
c0020306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002030a:	e8 09 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002030f:	83 c4 10             	add    esp,0x10
c0020312:	83 c4 0c             	add    esp,0xc
c0020315:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020318 <APICTimer::~APICTimer()>:
c0020318:	83 ec 0c             	sub    esp,0xc
c002031b:	ba 38 35 02 c0       	mov    edx,0xc0023538
c0020320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020324:	89 10                	mov    DWORD PTR [eax],edx
c0020326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002032a:	83 ec 0c             	sub    esp,0xc
c002032d:	50                   	push   eax
c002032e:	e8 29 e0 fe ff       	call   c000e35c <Timer::~Timer()>
c0020333:	83 c4 10             	add    esp,0x10
c0020336:	90                   	nop
c0020337:	83 c4 0c             	add    esp,0xc
c002033a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002033c <APICTimer::~APICTimer()>:
c002033c:	83 ec 0c             	sub    esp,0xc
c002033f:	83 ec 0c             	sub    esp,0xc
c0020342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020346:	e8 cd ff ff ff       	call   c0020318 <APICTimer::~APICTimer()>
c002034b:	83 c4 10             	add    esp,0x10
c002034e:	83 ec 08             	sub    esp,0x8
c0020351:	68 60 01 00 00       	push   0x160
c0020356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002035a:	e8 b9 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002035f:	83 c4 10             	add    esp,0x10
c0020362:	83 c4 0c             	add    esp,0xc
c0020365:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020368 <PIT::~PIT()>:
c0020368:	83 ec 0c             	sub    esp,0xc
c002036b:	ba 88 35 02 c0       	mov    edx,0xc0023588
c0020370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020374:	89 10                	mov    DWORD PTR [eax],edx
c0020376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002037a:	83 ec 0c             	sub    esp,0xc
c002037d:	50                   	push   eax
c002037e:	e8 d9 df fe ff       	call   c000e35c <Timer::~Timer()>
c0020383:	83 c4 10             	add    esp,0x10
c0020386:	90                   	nop
c0020387:	83 c4 0c             	add    esp,0xc
c002038a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002038c <PIT::~PIT()>:
c002038c:	83 ec 0c             	sub    esp,0xc
c002038f:	83 ec 0c             	sub    esp,0xc
c0020392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020396:	e8 cd ff ff ff       	call   c0020368 <PIT::~PIT()>
c002039b:	83 c4 10             	add    esp,0x10
c002039e:	83 ec 08             	sub    esp,0x8
c00203a1:	68 5c 01 00 00       	push   0x15c
c00203a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203aa:	e8 69 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00203af:	83 c4 10             	add    esp,0x10
c00203b2:	83 c4 0c             	add    esp,0xc
c00203b5:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 9d 23 02 c0       	mov    esi,0xc002239d
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be b9 23 02 c0       	mov    esi,0xc00223b9
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
