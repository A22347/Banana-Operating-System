
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 69 7a 00 00       	call   c0007a89 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a8 22 02 c0       	mov    eax,0xc00222a8
c0000025:	3d a8 22 02 c0       	cmp    eax,0xc00222a8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a8 22 02 c0       	push   0xc00222a8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a8 22 02 c0       	mov    eax,0xc00222a8
c0000051:	2d a8 22 02 c0       	sub    eax,0xc00222a8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a8 22 02 c0       	push   0xc00222a8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 3c f2 01 c0       	mov    ebx,0xc001f23c
c0000097:	81 eb 38 f2 01 c0    	sub    ebx,0xc001f238
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 38 f2 01 c0       	mov    esi,0xc001f238
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a8 22 02 c0       	push   0xc00222a8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 a8 22 02 c0       	push   0xc00222a8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 67 45 01 00       	call   c0014814 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 93 a3 00 00       	call   c000a658 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 45 45 01 00       	call   c0014814 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 52 4a 01 00       	call   c0014d40 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 e1 50 01 00       	call   c00153d8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 73 04 01 00       	jmp    c00107f2 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 04             	cmp    esi,0x4
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	89 ee                	mov    esi,ebp
c000042c:	83 e7 fc             	and    edi,0xfffffffc
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045a:	29 cf                	sub    edi,ecx
c000045c:	01 cb                	add    ebx,ecx
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	53                   	push   ebx
c00004f1:	83 ec 08             	sub    esp,0x8
c00004f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00004f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00004fc:	85 c0                	test   eax,eax
c00004fe:	74 13                	je     c0000513 <memset+0x23>
c0000500:	83 ec 04             	sub    esp,0x4
c0000503:	50                   	push   eax
c0000504:	0f be 44 24 1c       	movsx  eax,BYTE PTR [esp+0x1c]
c0000509:	50                   	push   eax
c000050a:	53                   	push   ebx
c000050b:	e8 e0 ff ff ff       	call   c00004f0 <memset>
c0000510:	83 c4 10             	add    esp,0x10
c0000513:	83 c4 08             	add    esp,0x8
c0000516:	89 d8                	mov    eax,ebx
c0000518:	5b                   	pop    ebx
c0000519:	c3                   	ret    
c000051a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c0000520 <strlen>:
c0000520:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000524:	31 c0                	xor    eax,eax
c0000526:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000529:	74 15                	je     c0000540 <strlen+0x20>
c000052b:	90                   	nop
c000052c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000530:	83 c0 01             	add    eax,0x1
c0000533:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000537:	75 f7                	jne    c0000530 <strlen+0x10>
c0000539:	c3                   	ret    
c000053a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000540:	c3                   	ret    
c0000541:	eb 0d                	jmp    c0000550 <strpbrk>
c0000543:	90                   	nop
c0000544:	90                   	nop
c0000545:	90                   	nop
c0000546:	90                   	nop
c0000547:	90                   	nop
c0000548:	90                   	nop
c0000549:	90                   	nop
c000054a:	90                   	nop
c000054b:	90                   	nop
c000054c:	90                   	nop
c000054d:	90                   	nop
c000054e:	90                   	nop
c000054f:	90                   	nop

c0000550 <strpbrk>:
c0000550:	57                   	push   edi
c0000551:	56                   	push   esi
c0000552:	53                   	push   ebx
c0000553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000557:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000055b:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c000055e:	85 db                	test   ebx,ebx
c0000560:	74 36                	je     c0000598 <strpbrk+0x48>
c0000562:	0f be 37             	movsx  esi,BYTE PTR [edi]
c0000565:	85 f6                	test   esi,esi
c0000567:	74 25                	je     c000058e <strpbrk+0x3e>
c0000569:	39 de                	cmp    esi,ebx
c000056b:	74 2d                	je     c000059a <strpbrk+0x4a>
c000056d:	89 fa                	mov    edx,edi
c000056f:	eb 13                	jmp    c0000584 <strpbrk+0x34>
c0000571:	eb 0d                	jmp    c0000580 <strpbrk+0x30>
c0000573:	90                   	nop
c0000574:	90                   	nop
c0000575:	90                   	nop
c0000576:	90                   	nop
c0000577:	90                   	nop
c0000578:	90                   	nop
c0000579:	90                   	nop
c000057a:	90                   	nop
c000057b:	90                   	nop
c000057c:	90                   	nop
c000057d:	90                   	nop
c000057e:	90                   	nop
c000057f:	90                   	nop
c0000580:	39 d9                	cmp    ecx,ebx
c0000582:	74 16                	je     c000059a <strpbrk+0x4a>
c0000584:	83 c2 01             	add    edx,0x1
c0000587:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c000058a:	85 c9                	test   ecx,ecx
c000058c:	75 f2                	jne    c0000580 <strpbrk+0x30>
c000058e:	83 c0 01             	add    eax,0x1
c0000591:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c0000594:	85 db                	test   ebx,ebx
c0000596:	75 cd                	jne    c0000565 <strpbrk+0x15>
c0000598:	31 c0                	xor    eax,eax
c000059a:	5b                   	pop    ebx
c000059b:	5e                   	pop    esi
c000059c:	5f                   	pop    edi
c000059d:	c3                   	ret    
c000059e:	66 90                	xchg   ax,ax

c00005a0 <strtok>:
c00005a0:	56                   	push   esi
c00005a1:	53                   	push   ebx
c00005a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005aa:	85 db                	test   ebx,ebx
c00005ac:	75 09                	jne    c00005b7 <strtok+0x17>
c00005ae:	eb 30                	jmp    c00005e0 <strtok+0x40>
c00005b0:	83 c3 01             	add    ebx,0x1
c00005b3:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005b7:	56                   	push   esi
c00005b8:	53                   	push   ebx
c00005b9:	e8 92 ff ff ff       	call   c0000550 <strpbrk>
c00005be:	5a                   	pop    edx
c00005bf:	39 d8                	cmp    eax,ebx
c00005c1:	59                   	pop    ecx
c00005c2:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c00005c7:	74 e7                	je     c00005b0 <strtok+0x10>
c00005c9:	85 c0                	test   eax,eax
c00005cb:	74 1d                	je     c00005ea <strtok+0x4a>
c00005cd:	8d 50 01             	lea    edx,[eax+0x1]
c00005d0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005d3:	89 d8                	mov    eax,ebx
c00005d5:	5b                   	pop    ebx
c00005d6:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c00005dc:	5e                   	pop    esi
c00005dd:	c3                   	ret    
c00005de:	66 90                	xchg   ax,ax
c00005e0:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c00005e6:	85 db                	test   ebx,ebx
c00005e8:	75 cd                	jne    c00005b7 <strtok+0x17>
c00005ea:	31 c0                	xor    eax,eax
c00005ec:	5b                   	pop    ebx
c00005ed:	5e                   	pop    esi
c00005ee:	c3                   	ret    
c00005ef:	90                   	nop

c00005f0 <strcpy>:
c00005f0:	53                   	push   ebx
c00005f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00005f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00005f9:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005fb:	89 c3                	mov    ebx,eax
c00005fd:	84 d2                	test   dl,dl
c00005ff:	74 1d                	je     c000061e <strcpy+0x2e>
c0000601:	eb 0d                	jmp    c0000610 <strcpy+0x20>
c0000603:	90                   	nop
c0000604:	90                   	nop
c0000605:	90                   	nop
c0000606:	90                   	nop
c0000607:	90                   	nop
c0000608:	90                   	nop
c0000609:	90                   	nop
c000060a:	90                   	nop
c000060b:	90                   	nop
c000060c:	90                   	nop
c000060d:	90                   	nop
c000060e:	90                   	nop
c000060f:	90                   	nop
c0000610:	83 c1 01             	add    ecx,0x1
c0000613:	88 13                	mov    BYTE PTR [ebx],dl
c0000615:	83 c3 01             	add    ebx,0x1
c0000618:	8a 11                	mov    dl,BYTE PTR [ecx]
c000061a:	84 d2                	test   dl,dl
c000061c:	75 f2                	jne    c0000610 <strcpy+0x20>
c000061e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000621:	5b                   	pop    ebx
c0000622:	c3                   	ret    
c0000623:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000629:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000630 <strncpy>:
c0000630:	55                   	push   ebp
c0000631:	57                   	push   edi
c0000632:	56                   	push   esi
c0000633:	53                   	push   ebx
c0000634:	83 ec 0c             	sub    esp,0xc
c0000637:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000063b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000063f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0000643:	85 c9                	test   ecx,ecx
c0000645:	74 50                	je     c0000697 <strncpy+0x67>
c0000647:	0f b6 7d 00          	movzx  edi,BYTE PTR [ebp+0x0]
c000064b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000064e:	8d 56 01             	lea    edx,[esi+0x1]
c0000651:	89 fb                	mov    ebx,edi
c0000653:	84 db                	test   bl,bl
c0000655:	88 1e                	mov    BYTE PTR [esi],bl
c0000657:	74 57                	je     c00006b0 <strncpy+0x80>
c0000659:	85 c0                	test   eax,eax
c000065b:	74 3a                	je     c0000697 <strncpy+0x67>
c000065d:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c0000660:	8d 41 fe             	lea    eax,[ecx-0x2]
c0000663:	8d 56 02             	lea    edx,[esi+0x2]
c0000666:	8d 4d 02             	lea    ecx,[ebp+0x2]
c0000669:	84 db                	test   bl,bl
c000066b:	88 5e 01             	mov    BYTE PTR [esi+0x1],bl
c000066e:	75 23                	jne    c0000693 <strncpy+0x63>
c0000670:	eb 3e                	jmp    c00006b0 <strncpy+0x80>
c0000672:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000680:	83 c1 01             	add    ecx,0x1
c0000683:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000686:	83 c2 01             	add    edx,0x1
c0000689:	83 e8 01             	sub    eax,0x1
c000068c:	84 db                	test   bl,bl
c000068e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000691:	74 1d                	je     c00006b0 <strncpy+0x80>
c0000693:	85 c0                	test   eax,eax
c0000695:	75 e9                	jne    c0000680 <strncpy+0x50>
c0000697:	83 c4 0c             	add    esp,0xc
c000069a:	89 f0                	mov    eax,esi
c000069c:	5b                   	pop    ebx
c000069d:	5e                   	pop    esi
c000069e:	5f                   	pop    edi
c000069f:	5d                   	pop    ebp
c00006a0:	c3                   	ret    
c00006a1:	eb 0d                	jmp    c00006b0 <strncpy+0x80>
c00006a3:	90                   	nop
c00006a4:	90                   	nop
c00006a5:	90                   	nop
c00006a6:	90                   	nop
c00006a7:	90                   	nop
c00006a8:	90                   	nop
c00006a9:	90                   	nop
c00006aa:	90                   	nop
c00006ab:	90                   	nop
c00006ac:	90                   	nop
c00006ad:	90                   	nop
c00006ae:	90                   	nop
c00006af:	90                   	nop
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 e3                	je     c0000697 <strncpy+0x67>
c00006b4:	83 ec 04             	sub    esp,0x4
c00006b7:	50                   	push   eax
c00006b8:	6a 00                	push   0x0
c00006ba:	52                   	push   edx
c00006bb:	e8 30 fe ff ff       	call   c00004f0 <memset>
c00006c0:	83 c4 10             	add    esp,0x10
c00006c3:	eb d2                	jmp    c0000697 <strncpy+0x67>
c00006c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00006c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006d0 <strcmp>:
c00006d0:	57                   	push   edi
c00006d1:	56                   	push   esi
c00006d2:	53                   	push   ebx
c00006d3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00006d7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006db:	8a 17                	mov    dl,BYTE PTR [edi]
c00006dd:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00006e0:	38 c2                	cmp    dl,al
c00006e2:	75 32                	jne    c0000716 <strcmp+0x46>
c00006e4:	85 c0                	test   eax,eax
c00006e6:	74 28                	je     c0000710 <strcmp+0x40>
c00006e8:	b8 01 00 00 00       	mov    eax,0x1
c00006ed:	eb 08                	jmp    c00006f7 <strcmp+0x27>
c00006ef:	90                   	nop
c00006f0:	83 c0 01             	add    eax,0x1
c00006f3:	85 db                	test   ebx,ebx
c00006f5:	74 19                	je     c0000710 <strcmp+0x40>
c00006f7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00006fb:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00006fe:	89 da                	mov    edx,ebx
c0000700:	38 d9                	cmp    cl,bl
c0000702:	74 ec                	je     c00006f0 <strcmp+0x20>
c0000704:	0f b6 c2             	movzx  eax,dl
c0000707:	0f b6 c9             	movzx  ecx,cl
c000070a:	5b                   	pop    ebx
c000070b:	29 c8                	sub    eax,ecx
c000070d:	5e                   	pop    esi
c000070e:	5f                   	pop    edi
c000070f:	c3                   	ret    
c0000710:	5b                   	pop    ebx
c0000711:	31 c0                	xor    eax,eax
c0000713:	5e                   	pop    esi
c0000714:	5f                   	pop    edi
c0000715:	c3                   	ret    
c0000716:	89 c1                	mov    ecx,eax
c0000718:	eb ea                	jmp    c0000704 <strcmp+0x34>
c000071a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c0000720 <strchr>:
c0000720:	53                   	push   ebx
c0000721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000725:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c0000728:	85 db                	test   ebx,ebx
c000072a:	74 22                	je     c000074e <strchr+0x2e>
c000072c:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c0000731:	39 d3                	cmp    ebx,edx
c0000733:	74 1b                	je     c0000750 <strchr+0x30>
c0000735:	89 d1                	mov    ecx,edx
c0000737:	eb 0b                	jmp    c0000744 <strchr+0x24>
c0000739:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000740:	39 ca                	cmp    edx,ecx
c0000742:	74 0c                	je     c0000750 <strchr+0x30>
c0000744:	83 c0 01             	add    eax,0x1
c0000747:	0f be 10             	movsx  edx,BYTE PTR [eax]
c000074a:	85 d2                	test   edx,edx
c000074c:	75 f2                	jne    c0000740 <strchr+0x20>
c000074e:	31 c0                	xor    eax,eax
c0000750:	5b                   	pop    ebx
c0000751:	c3                   	ret    
c0000752:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000759:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000760 <strncmp>:
c0000760:	55                   	push   ebp
c0000761:	57                   	push   edi
c0000762:	56                   	push   esi
c0000763:	53                   	push   ebx
c0000764:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000768:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000076c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000770:	85 f6                	test   esi,esi
c0000772:	74 35                	je     c00007a9 <strncmp+0x49>
c0000774:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000777:	8a 17                	mov    dl,BYTE PTR [edi]
c0000779:	89 eb                	mov    ebx,ebp
c000077b:	38 da                	cmp    dl,bl
c000077d:	75 31                	jne    c00007b0 <strncmp+0x50>
c000077f:	8d 47 01             	lea    eax,[edi+0x1]
c0000782:	85 ed                	test   ebp,ebp
c0000784:	74 23                	je     c00007a9 <strncmp+0x49>
c0000786:	01 f7                	add    edi,esi
c0000788:	eb 18                	jmp    c00007a2 <strncmp+0x42>
c000078a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000790:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000793:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000795:	89 f2                	mov    edx,esi
c0000797:	38 d3                	cmp    bl,dl
c0000799:	75 15                	jne    c00007b0 <strncmp+0x50>
c000079b:	83 c0 01             	add    eax,0x1
c000079e:	85 f6                	test   esi,esi
c00007a0:	74 07                	je     c00007a9 <strncmp+0x49>
c00007a2:	83 c1 01             	add    ecx,0x1
c00007a5:	39 c7                	cmp    edi,eax
c00007a7:	75 e7                	jne    c0000790 <strncmp+0x30>
c00007a9:	5b                   	pop    ebx
c00007aa:	31 c0                	xor    eax,eax
c00007ac:	5e                   	pop    esi
c00007ad:	5f                   	pop    edi
c00007ae:	5d                   	pop    ebp
c00007af:	c3                   	ret    
c00007b0:	0f b6 db             	movzx  ebx,bl
c00007b3:	0f b6 c2             	movzx  eax,dl
c00007b6:	29 d8                	sub    eax,ebx
c00007b8:	5b                   	pop    ebx
c00007b9:	5e                   	pop    esi
c00007ba:	5f                   	pop    edi
c00007bb:	5d                   	pop    ebp
c00007bc:	c3                   	ret    
c00007bd:	8d 76 00             	lea    esi,[esi+0x0]

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	83 c2 01             	add    edx,0x1
c00007e9:	84 c9                	test   cl,cl
c00007eb:	75 f3                	jne    c00007e0 <strcat+0x20>
c00007ed:	5b                   	pop    ebx
c00007ee:	5e                   	pop    esi
c00007ef:	c3                   	ret    

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 32                	je     c0000834 <strncat+0x44>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	83 c2 01             	add    edx,0x1
c0000813:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000817:	75 f7                	jne    c0000810 <strncat+0x20>
c0000819:	01 ce                	add    esi,ecx
c000081b:	eb 0a                	jmp    c0000827 <strncat+0x37>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	83 c2 01             	add    edx,0x1
c0000827:	83 c1 01             	add    ecx,0x1
c000082a:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000082d:	84 db                	test   bl,bl
c000082f:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000832:	75 ec                	jne    c0000820 <strncat+0x30>
c0000834:	5b                   	pop    ebx
c0000835:	5e                   	pop    esi
c0000836:	c3                   	ret    
c0000837:	89 f6                	mov    esi,esi
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000857:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000085b:	57                   	push   edi
c000085c:	e8 bf fc ff ff       	call   c0000520 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	89 c6                	mov    esi,eax
c0000866:	75 1a                	jne    c0000882 <strstr+0x32>
c0000868:	eb 36                	jmp    c00008a0 <strstr+0x50>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 08 fb ff ff       	call   c0000380 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	83 c3 01             	add    ebx,0x1
c0000882:	53                   	push   ebx
c0000883:	e8 98 fc ff ff       	call   c0000520 <strlen>
c0000888:	5a                   	pop    edx
c0000889:	39 f0                	cmp    eax,esi
c000088b:	73 e3                	jae    c0000870 <strstr+0x20>
c000088d:	5b                   	pop    ebx
c000088e:	31 c0                	xor    eax,eax
c0000890:	5e                   	pop    esi
c0000891:	5f                   	pop    edi
c0000892:	c3                   	ret    
c0000893:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000899:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b4:	8d 50 e0             	lea    edx,[eax-0x20]
c00008b7:	0f b6 c8             	movzx  ecx,al
c00008ba:	f6 81 40 f2 01 c0 02 	test   BYTE PTR [ecx-0x3ffe0dc0],0x2
c00008c1:	0f 45 c2             	cmovne eax,edx
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d4:	8d 50 20             	lea    edx,[eax+0x20]
c00008d7:	0f b6 c8             	movzx  ecx,al
c00008da:	f6 81 40 f2 01 c0 01 	test   BYTE PTR [ecx-0x3ffe0dc0],0x1
c00008e1:	0f 45 c2             	cmovne eax,edx
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 0c             	sub    esp,0xc
c00008f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00008fb:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c00008ff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0000903:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000906:	f6 82 40 f2 01 c0 08 	test   BYTE PTR [edx-0x3ffe0dc0],0x8
c000090d:	75 11                	jne    c0000920 <simple_strtoul+0x30>
c000090f:	89 d0                	mov    eax,edx
c0000911:	eb 1e                	jmp    c0000931 <simple_strtoul+0x41>
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	83 c3 01             	add    ebx,0x1
c0000923:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000926:	f6 82 40 f2 01 c0 08 	test   BYTE PTR [edx-0x3ffe0dc0],0x8
c000092d:	89 d0                	mov    eax,edx
c000092f:	75 ef                	jne    c0000920 <simple_strtoul+0x30>
c0000931:	0f be c0             	movsx  eax,al
c0000934:	83 f8 09             	cmp    eax,0x9
c0000937:	74 e7                	je     c0000920 <simple_strtoul+0x30>
c0000939:	83 f8 2d             	cmp    eax,0x2d
c000093c:	0f 84 5e 01 00 00    	je     c0000aa0 <simple_strtoul+0x1b0>
c0000942:	83 f8 2b             	cmp    eax,0x2b
c0000945:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000094d:	0f 94 c0             	sete   al
c0000950:	0f b6 c0             	movzx  eax,al
c0000953:	01 c3                	add    ebx,eax
c0000955:	85 ed                	test   ebp,ebp
c0000957:	0f 85 d3 00 00 00    	jne    c0000a30 <simple_strtoul+0x140>
c000095d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000960:	bd 0a 00 00 00       	mov    ebp,0xa
c0000965:	83 fa 30             	cmp    edx,0x30
c0000968:	89 d1                	mov    ecx,edx
c000096a:	0f 84 81 01 00 00    	je     c0000af1 <simple_strtoul+0x201>
c0000970:	85 d2                	test   edx,edx
c0000972:	0f 84 e2 01 00 00    	je     c0000b5a <simple_strtoul+0x26a>
c0000978:	31 ff                	xor    edi,edi
c000097a:	31 f6                	xor    esi,esi
c000097c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000983:	eb 3a                	jmp    c00009bf <simple_strtoul+0xcf>
c0000985:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 e9 30             	sub    ecx,0x30
c0000993:	39 e9                	cmp    ecx,ebp
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0x100>
c0000997:	89 c8                	mov    eax,ecx
c0000999:	31 d2                	xor    edx,edx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f5                	div    ebp
c000099f:	39 f0                	cmp    eax,esi
c00009a1:	0f 82 e9 00 00 00    	jb     c0000a90 <simple_strtoul+0x1a0>
c00009a7:	0f af f5             	imul   esi,ebp
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 ce                	add    esi,ecx
c00009b3:	83 c3 01             	add    ebx,0x1
c00009b6:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009b9:	85 d2                	test   edx,edx
c00009bb:	89 d1                	mov    ecx,edx
c00009bd:	74 31                	je     c00009f0 <simple_strtoul+0x100>
c00009bf:	0f b6 c9             	movzx  ecx,cl
c00009c2:	f6 81 40 f2 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0dc0],0x4
c00009c9:	75 c5                	jne    c0000990 <simple_strtoul+0xa0>
c00009cb:	52                   	push   edx
c00009cc:	e8 df fe ff ff       	call   c00008b0 <toupper>
c00009d1:	5a                   	pop    edx
c00009d2:	0f b6 d0             	movzx  edx,al
c00009d5:	f6 82 40 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0dc0],0x1
c00009dc:	74 12                	je     c00009f0 <simple_strtoul+0x100>
c00009de:	8d 48 c9             	lea    ecx,[eax-0x37]
c00009e1:	39 e9                	cmp    ecx,ebp
c00009e3:	72 b2                	jb     c0000997 <simple_strtoul+0xa7>
c00009e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00009f4:	85 d2                	test   edx,edx
c00009f6:	74 11                	je     c0000a09 <simple_strtoul+0x119>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f0                	or     eax,esi
c00009fd:	0f 84 ad 00 00 00    	je     c0000ab0 <simple_strtoul+0x1c0>
c0000a03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000a07:	89 18                	mov    DWORD PTR [eax],ebx
c0000a09:	83 ff 01             	cmp    edi,0x1
c0000a0c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000a11:	0f 44 f0             	cmove  esi,eax
c0000a14:	89 f0                	mov    eax,esi
c0000a16:	f7 d8                	neg    eax
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	0f 44 f0             	cmove  esi,eax
c0000a20:	83 c4 0c             	add    esp,0xc
c0000a23:	5b                   	pop    ebx
c0000a24:	89 f0                	mov    eax,esi
c0000a26:	5e                   	pop    esi
c0000a27:	5f                   	pop    edi
c0000a28:	5d                   	pop    ebp
c0000a29:	c3                   	ret    
c0000a2a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000a30:	8d 45 fe             	lea    eax,[ebp-0x2]
c0000a33:	83 f8 22             	cmp    eax,0x22
c0000a36:	0f 87 90 00 00 00    	ja     c0000acc <simple_strtoul+0x1dc>
c0000a3c:	83 fd 08             	cmp    ebp,0x8
c0000a3f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000a41:	0f 84 db 00 00 00    	je     c0000b22 <simple_strtoul+0x232>
c0000a47:	83 fd 10             	cmp    ebp,0x10
c0000a4a:	0f 85 38 01 00 00    	jne    c0000b88 <simple_strtoul+0x298>
c0000a50:	0f be d1             	movsx  edx,cl
c0000a53:	bd 10 00 00 00       	mov    ebp,0x10
c0000a58:	83 fa 30             	cmp    edx,0x30
c0000a5b:	0f 85 0f ff ff ff    	jne    c0000970 <simple_strtoul+0x80>
c0000a61:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000a65:	88 54 24 0b          	mov    BYTE PTR [esp+0xb],dl
c0000a69:	52                   	push   edx
c0000a6a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000a6e:	e8 5d fe ff ff       	call   c00008d0 <tolower>
c0000a73:	59                   	pop    ecx
c0000a74:	83 f8 78             	cmp    eax,0x78
c0000a77:	0f 84 cf 00 00 00    	je     c0000b4c <simple_strtoul+0x25c>
c0000a7d:	83 c3 01             	add    ebx,0x1
c0000a80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000a83:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0000a87:	e9 e4 fe ff ff       	jmp    c0000970 <simple_strtoul+0x80>
c0000a8c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a90:	bf 01 00 00 00       	mov    edi,0x1
c0000a95:	31 f6                	xor    esi,esi
c0000a97:	e9 17 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xc3>
c0000a9c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aab:	e9 a5 fe ff ff       	jmp    c0000955 <simple_strtoul+0x65>
c0000ab0:	85 db                	test   ebx,ebx
c0000ab2:	74 11                	je     c0000ac5 <simple_strtoul+0x1d5>
c0000ab4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0000ab8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000abc:	89 30                	mov    DWORD PTR [eax],esi
c0000abe:	31 f6                	xor    esi,esi
c0000ac0:	e9 44 ff ff ff       	jmp    c0000a09 <simple_strtoul+0x119>
c0000ac5:	31 f6                	xor    esi,esi
c0000ac7:	e9 37 ff ff ff       	jmp    c0000a03 <simple_strtoul+0x113>
c0000acc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000ad0:	31 f6                	xor    esi,esi
c0000ad2:	85 c0                	test   eax,eax
c0000ad4:	0f 84 3a ff ff ff    	je     c0000a14 <simple_strtoul+0x124>
c0000ada:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0000ade:	85 db                	test   ebx,ebx
c0000ae0:	b8 00 00 00 00       	mov    eax,0x0
c0000ae5:	0f 45 44 24 20       	cmovne eax,DWORD PTR [esp+0x20]
c0000aea:	89 07                	mov    DWORD PTR [edi],eax
c0000aec:	e9 23 ff ff ff       	jmp    c0000a14 <simple_strtoul+0x124>
c0000af1:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000af5:	88 54 24 0b          	mov    BYTE PTR [esp+0xb],dl
c0000af9:	52                   	push   edx
c0000afa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000afe:	e8 cd fd ff ff       	call   c00008d0 <tolower>
c0000b03:	5e                   	pop    esi
c0000b04:	83 f8 78             	cmp    eax,0x78
c0000b07:	74 38                	je     c0000b41 <simple_strtoul+0x251>
c0000b09:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b0c:	83 c3 01             	add    ebx,0x1
c0000b0f:	83 fa 30             	cmp    edx,0x30
c0000b12:	74 1a                	je     c0000b2e <simple_strtoul+0x23e>
c0000b14:	bd 08 00 00 00       	mov    ebp,0x8
c0000b19:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0000b1d:	e9 4e fe ff ff       	jmp    c0000970 <simple_strtoul+0x80>
c0000b22:	0f be d1             	movsx  edx,cl
c0000b25:	83 fa 30             	cmp    edx,0x30
c0000b28:	0f 85 42 fe ff ff    	jne    c0000970 <simple_strtoul+0x80>
c0000b2e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b32:	bd 08 00 00 00       	mov    ebp,0x8
c0000b37:	83 c3 01             	add    ebx,0x1
c0000b3a:	89 d1                	mov    ecx,edx
c0000b3c:	e9 2f fe ff ff       	jmp    c0000970 <simple_strtoul+0x80>
c0000b41:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000b44:	83 c3 02             	add    ebx,0x2
c0000b47:	e9 04 ff ff ff       	jmp    c0000a50 <simple_strtoul+0x160>
c0000b4c:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000b50:	83 c3 02             	add    ebx,0x2
c0000b53:	89 d1                	mov    ecx,edx
c0000b55:	e9 16 fe ff ff       	jmp    c0000970 <simple_strtoul+0x80>
c0000b5a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000b5e:	31 f6                	xor    esi,esi
c0000b60:	85 c9                	test   ecx,ecx
c0000b62:	0f 84 ac fe ff ff    	je     c0000a14 <simple_strtoul+0x124>
c0000b68:	85 db                	test   ebx,ebx
c0000b6a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000b6e:	74 0b                	je     c0000b7b <simple_strtoul+0x28b>
c0000b70:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b74:	89 38                	mov    DWORD PTR [eax],edi
c0000b76:	e9 99 fe ff ff       	jmp    c0000a14 <simple_strtoul+0x124>
c0000b7b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b81:	89 d6                	mov    esi,edx
c0000b83:	e9 8c fe ff ff       	jmp    c0000a14 <simple_strtoul+0x124>
c0000b88:	0f be d1             	movsx  edx,cl
c0000b8b:	e9 e0 fd ff ff       	jmp    c0000970 <simple_strtoul+0x80>

c0000b90 <largebin_index>:
c0000b90:	89 c2                	mov    edx,eax
c0000b92:	c1 ea 08             	shr    edx,0x8
c0000b95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b9b:	77 10                	ja     c0000bad <largebin_index+0x1d>
c0000b9d:	0f bd d2             	bsr    edx,edx
c0000ba0:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000ba3:	d3 e8                	shr    eax,cl
c0000ba5:	83 e0 03             	and    eax,0x3
c0000ba8:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000bac:	c3                   	ret    
c0000bad:	b8 5f 00 00 00       	mov    eax,0x5f
c0000bb2:	c3                   	ret    

c0000bb3 <malloc_init_state>:
c0000bb3:	8d 50 34             	lea    edx,[eax+0x34]
c0000bb6:	53                   	push   ebx
c0000bb7:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000bbd:	89 d1                	mov    ecx,edx
c0000bbf:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000bc2:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000bc5:	83 c2 08             	add    edx,0x8
c0000bc8:	39 da                	cmp    edx,ebx
c0000bca:	75 f3                	jne    c0000bbf <malloc_init_state+0xc>
c0000bcc:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bce:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd1:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000bdb:	5b                   	pop    ebx
c0000bdc:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000be6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bf0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bfa:	83 e2 03             	and    edx,0x3
c0000bfd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c04:	83 ca 48             	or     edx,0x48
c0000c07:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c11:	89 10                	mov    DWORD PTR [eax],edx
c0000c13:	c3                   	ret    

c0000c14 <malloc_consolidate>:
c0000c14:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c16:	85 d2                	test   edx,edx
c0000c18:	0f 84 d8 00 00 00    	je     c0000cf6 <malloc_consolidate+0xe2>
c0000c1e:	55                   	push   ebp
c0000c1f:	83 e2 fd             	and    edx,0xfffffffd
c0000c22:	89 c5                	mov    ebp,eax
c0000c24:	57                   	push   edi
c0000c25:	8d 78 34             	lea    edi,[eax+0x34]
c0000c28:	56                   	push   esi
c0000c29:	53                   	push   ebx
c0000c2a:	83 ec 10             	sub    esp,0x10
c0000c2d:	89 10                	mov    DWORD PTR [eax],edx
c0000c2f:	c1 ea 03             	shr    edx,0x3
c0000c32:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c36:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c3a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c3e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c41:	85 d2                	test   edx,edx
c0000c43:	0f 84 98 00 00 00    	je     c0000ce1 <malloc_consolidate+0xcd>
c0000c49:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c50:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c53:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c56:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c5a:	89 f9                	mov    ecx,edi
c0000c5c:	83 e1 fe             	and    ecx,0xfffffffe
c0000c5f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c62:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c65:	83 e3 fc             	and    ebx,0xfffffffc
c0000c68:	83 e7 01             	and    edi,0x1
c0000c6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c6e:	75 14                	jne    c0000c84 <malloc_consolidate+0x70>
c0000c70:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c72:	29 fa                	sub    edx,edi
c0000c74:	01 f9                	add    ecx,edi
c0000c76:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c79:	89 fb                	mov    ebx,edi
c0000c7b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c7e:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c81:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c84:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c87:	74 40                	je     c0000cc9 <malloc_consolidate+0xb5>
c0000c89:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c8c:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c8f:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c93:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c96:	83 e7 01             	and    edi,0x1
c0000c99:	75 0e                	jne    c0000ca9 <malloc_consolidate+0x95>
c0000c9b:	01 d9                	add    ecx,ebx
c0000c9d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000ca0:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000ca3:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000ca6:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000ca9:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000cac:	89 ce                	mov    esi,ecx
c0000cae:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000cb1:	83 ce 01             	or     esi,0x1
c0000cb4:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000cb7:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000cba:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000cbe:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000cc1:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000cc4:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000cc7:	eb 0c                	jmp    c0000cd5 <malloc_consolidate+0xc1>
c0000cc9:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000ccc:	83 c9 01             	or     ecx,0x1
c0000ccf:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000cd2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000cd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000cd9:	85 d2                	test   edx,edx
c0000cdb:	0f 85 6f ff ff ff    	jne    c0000c50 <malloc_consolidate+0x3c>
c0000ce1:	83 c5 04             	add    ebp,0x4
c0000ce4:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ce8:	0f 85 50 ff ff ff    	jne    c0000c3e <malloc_consolidate+0x2a>
c0000cee:	83 c4 10             	add    esp,0x10
c0000cf1:	5b                   	pop    ebx
c0000cf2:	5e                   	pop    esi
c0000cf3:	5f                   	pop    edi
c0000cf4:	5d                   	pop    ebp
c0000cf5:	c3                   	ret    
c0000cf6:	e9 b8 fe ff ff       	jmp    c0000bb3 <malloc_init_state>

c0000cfb <dlfree>:
c0000cfb:	57                   	push   edi
c0000cfc:	56                   	push   esi
c0000cfd:	53                   	push   ebx
c0000cfe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d02:	85 db                	test   ebx,ebx
c0000d04:	0f 84 e2 00 00 00    	je     c0000dec <dlfree+0xf1>
c0000d0a:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d0d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d10:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000d16:	89 f0                	mov    eax,esi
c0000d18:	83 e0 fc             	and    eax,0xfffffffc
c0000d1b:	39 c1                	cmp    ecx,eax
c0000d1d:	72 24                	jb     c0000d43 <dlfree+0x48>
c0000d1f:	c1 e8 03             	shr    eax,0x3
c0000d22:	83 c9 03             	or     ecx,0x3
c0000d25:	83 e8 02             	sub    eax,0x2
c0000d28:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000d2e:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000d35:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d37:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000d3e:	e9 a9 00 00 00       	jmp    c0000dec <dlfree+0xf1>
c0000d43:	83 e6 02             	and    esi,0x2
c0000d46:	0f 85 a0 00 00 00    	jne    c0000dec <dlfree+0xf1>
c0000d4c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d4f:	83 c9 01             	or     ecx,0x1
c0000d52:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000d58:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d5b:	83 e1 fc             	and    ecx,0xfffffffc
c0000d5e:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d62:	75 13                	jne    c0000d77 <dlfree+0x7c>
c0000d64:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d67:	29 da                	sub    edx,ebx
c0000d69:	01 d8                	add    eax,ebx
c0000d6b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d6e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d71:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d74:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d77:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000d7d:	74 40                	je     c0000dbf <dlfree+0xc4>
c0000d7f:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d83:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d86:	80 e3 01             	and    bl,0x1
c0000d89:	75 0e                	jne    c0000d99 <dlfree+0x9e>
c0000d8b:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d8e:	01 c8                	add    eax,ecx
c0000d90:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d93:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d96:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d99:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000d9f:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000da6:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000da9:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000daf:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000db2:	89 c1                	mov    ecx,eax
c0000db4:	83 c9 01             	or     ecx,0x1
c0000db7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000dba:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000dbd:	eb 10                	jmp    c0000dcf <dlfree+0xd4>
c0000dbf:	01 c8                	add    eax,ecx
c0000dc1:	89 c1                	mov    ecx,eax
c0000dc3:	83 c9 01             	or     ecx,0x1
c0000dc6:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000dc9:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000dcf:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000dd4:	76 16                	jbe    c0000dec <dlfree+0xf1>
c0000dd6:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000ddd:	74 0d                	je     c0000dec <dlfree+0xf1>
c0000ddf:	5b                   	pop    ebx
c0000de0:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000de5:	5e                   	pop    esi
c0000de6:	5f                   	pop    edi
c0000de7:	e9 28 fe ff ff       	jmp    c0000c14 <malloc_consolidate>
c0000dec:	5b                   	pop    ebx
c0000ded:	5e                   	pop    esi
c0000dee:	5f                   	pop    edi
c0000def:	c3                   	ret    

c0000df0 <sYSMALLOc>:
c0000df0:	55                   	push   ebp
c0000df1:	57                   	push   edi
c0000df2:	56                   	push   esi
c0000df3:	53                   	push   ebx
c0000df4:	89 d3                	mov    ebx,edx
c0000df6:	83 ec 2c             	sub    esp,0x2c
c0000df9:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000dff:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e06:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0d:	74 1f                	je     c0000e2e <sYSMALLOc+0x3e>
c0000e0f:	89 d0                	mov    eax,edx
c0000e11:	e8 fe fd ff ff       	call   c0000c14 <malloc_consolidate>
c0000e16:	83 ec 0c             	sub    esp,0xc
c0000e19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000e1d:	83 e8 07             	sub    eax,0x7
c0000e20:	50                   	push   eax
c0000e21:	e8 33 02 00 00       	call   c0001059 <dlmalloc>
c0000e26:	83 c4 10             	add    esp,0x10
c0000e29:	e9 23 02 00 00       	jmp    c0001051 <sYSMALLOc+0x261>
c0000e2e:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e35:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000e3b:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000e3e:	83 c0 10             	add    eax,0x10
c0000e41:	01 c2                	add    edx,eax
c0000e43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e47:	83 e5 fc             	and    ebp,0xfffffffc
c0000e4a:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e51:	74 02                	je     c0000e55 <sYSMALLOc+0x65>
c0000e53:	29 ea                	sub    edx,ebp
c0000e55:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000e59:	f7 d9                	neg    ecx
c0000e5b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000e5f:	21 ca                	and    edx,ecx
c0000e61:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000e65:	7f 07                	jg     c0000e6e <sYSMALLOc+0x7e>
c0000e67:	31 c0                	xor    eax,eax
c0000e69:	e9 e3 01 00 00       	jmp    c0001051 <sYSMALLOc+0x261>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e75:	e8 8a 6a 00 00       	call   c0007904 <sbrk>
c0000e7a:	83 c4 10             	add    esp,0x10
c0000e7d:	83 f8 ff             	cmp    eax,0xffffffff
c0000e80:	89 c6                	mov    esi,eax
c0000e82:	74 e3                	je     c0000e67 <sYSMALLOc+0x77>
c0000e84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000e88:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000e8b:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000e91:	39 c2                	cmp    edx,eax
c0000e93:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000e99:	75 11                	jne    c0000eac <sYSMALLOc+0xbc>
c0000e9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e9f:	01 e8                	add    eax,ebp
c0000ea1:	83 c8 01             	or     eax,0x1
c0000ea4:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ea7:	e9 93 00 00 00       	jmp    c0000f3f <sYSMALLOc+0x14f>
c0000eac:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000eb2:	a8 01                	test   al,0x1
c0000eb4:	0f 84 73 01 00 00    	je     c000102d <sYSMALLOc+0x23d>
c0000eba:	85 ed                	test   ebp,ebp
c0000ebc:	74 12                	je     c0000ed0 <sYSMALLOc+0xe0>
c0000ebe:	39 f2                	cmp    edx,esi
c0000ec0:	76 0e                	jbe    c0000ed0 <sYSMALLOc+0xe0>
c0000ec2:	83 e0 fe             	and    eax,0xfffffffe
c0000ec5:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000ecb:	e9 5d 01 00 00       	jmp    c000102d <sYSMALLOc+0x23d>
c0000ed0:	85 ed                	test   ebp,ebp
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0xf0>
c0000ed4:	89 f0                	mov    eax,esi
c0000ed6:	29 d0                	sub    eax,edx
c0000ed8:	01 c1                	add    ecx,eax
c0000eda:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000ee0:	89 f2                	mov    edx,esi
c0000ee2:	83 e2 07             	and    edx,0x7
c0000ee5:	0f 84 b1 00 00 00    	je     c0000f9c <sYSMALLOc+0x1ac>
c0000eeb:	b8 08 00 00 00       	mov    eax,0x8
c0000ef0:	29 d0                	sub    eax,edx
c0000ef2:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000ef5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ef9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000efd:	01 e8                	add    eax,ebp
c0000eff:	83 ec 0c             	sub    esp,0xc
c0000f02:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f05:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f09:	01 f2                	add    edx,esi
c0000f0b:	29 d0                	sub    eax,edx
c0000f0d:	01 d1                	add    ecx,edx
c0000f0f:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f13:	01 c1                	add    ecx,eax
c0000f15:	51                   	push   ecx
c0000f16:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000f1a:	e8 e5 69 00 00       	call   c0007904 <sbrk>
c0000f1f:	83 c4 10             	add    esp,0x10
c0000f22:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000f26:	83 f8 ff             	cmp    eax,0xffffffff
c0000f29:	75 7c                	jne    c0000fa7 <sYSMALLOc+0x1b7>
c0000f2b:	83 ec 0c             	sub    esp,0xc
c0000f2e:	6a 00                	push   0x0
c0000f30:	e8 cf 69 00 00       	call   c0007904 <sbrk>
c0000f35:	83 c4 10             	add    esp,0x10
c0000f38:	31 c9                	xor    ecx,ecx
c0000f3a:	83 f8 ff             	cmp    eax,0xffffffff
c0000f3d:	75 7e                	jne    c0000fbd <sYSMALLOc+0x1cd>
c0000f3f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f45:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000f4b:	73 06                	jae    c0000f53 <sYSMALLOc+0x163>
c0000f4d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000f53:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000f59:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000f5f:	73 06                	jae    c0000f67 <sYSMALLOc+0x177>
c0000f61:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000f67:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f6a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000f6d:	83 e2 fc             	and    edx,0xfffffffc
c0000f70:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000f74:	0f 87 ed fe ff ff    	ja     c0000e67 <sYSMALLOc+0x77>
c0000f7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000f7e:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000f81:	29 fa                	sub    edx,edi
c0000f83:	83 c0 08             	add    eax,0x8
c0000f86:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000f89:	89 fb                	mov    ebx,edi
c0000f8b:	83 ca 01             	or     edx,0x1
c0000f8e:	83 cb 01             	or     ebx,0x1
c0000f91:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000f94:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000f97:	e9 b5 00 00 00       	jmp    c0001051 <sYSMALLOc+0x261>
c0000f9c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000fa0:	31 c0                	xor    eax,eax
c0000fa2:	e9 52 ff ff ff       	jmp    c0000ef9 <sYSMALLOc+0x109>
c0000fa7:	39 c6                	cmp    esi,eax
c0000fa9:	76 12                	jbe    c0000fbd <sYSMALLOc+0x1cd>
c0000fab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000faf:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fb6:	01 f0                	add    eax,esi
c0000fb8:	e9 7b ff ff ff       	jmp    c0000f38 <sYSMALLOc+0x148>
c0000fbd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fc1:	29 f0                	sub    eax,esi
c0000fc3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000fc6:	01 c8                	add    eax,ecx
c0000fc8:	83 c8 01             	or     eax,0x1
c0000fcb:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000fce:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000fd4:	85 ed                	test   ebp,ebp
c0000fd6:	0f 84 63 ff ff ff    	je     c0000f3f <sYSMALLOc+0x14f>
c0000fdc:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000fdf:	83 e0 f8             	and    eax,0xfffffff8
c0000fe2:	89 c2                	mov    edx,eax
c0000fe4:	83 ca 01             	or     edx,0x1
c0000fe7:	83 f8 0f             	cmp    eax,0xf
c0000fea:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000fed:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000ff5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000ffd:	0f 86 3c ff ff ff    	jbe    c0000f3f <sYSMALLOc+0x14f>
c0001003:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001009:	83 ec 0c             	sub    esp,0xc
c000100c:	83 c7 08             	add    edi,0x8
c000100f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001019:	57                   	push   edi
c000101a:	e8 dc fc ff ff       	call   c0000cfb <dlfree>
c000101f:	83 c4 10             	add    esp,0x10
c0001022:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001028:	e9 12 ff ff ff       	jmp    c0000f3f <sYSMALLOc+0x14f>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	6a 00                	push   0x0
c0001032:	e8 cd 68 00 00       	call   c0007904 <sbrk>
c0001037:	89 c2                	mov    edx,eax
c0001039:	29 f2                	sub    edx,esi
c000103b:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c000103f:	83 c4 10             	add    esp,0x10
c0001042:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001048:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000104c:	e9 e7 fe ff ff       	jmp    c0000f38 <sYSMALLOc+0x148>
c0001051:	83 c4 2c             	add    esp,0x2c
c0001054:	5b                   	pop    ebx
c0001055:	5e                   	pop    esi
c0001056:	5f                   	pop    edi
c0001057:	5d                   	pop    ebp
c0001058:	c3                   	ret    

c0001059 <dlmalloc>:
c0001059:	55                   	push   ebp
c000105a:	57                   	push   edi
c000105b:	56                   	push   esi
c000105c:	53                   	push   ebx
c000105d:	83 ec 1c             	sub    esp,0x1c
c0001060:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001064:	83 f8 df             	cmp    eax,0xffffffdf
c0001067:	0f 87 6f 03 00 00    	ja     c00013dc <dlmalloc+0x383>
c000106d:	83 c0 0b             	add    eax,0xb
c0001070:	be 10 00 00 00       	mov    esi,0x10
c0001075:	83 f8 0f             	cmp    eax,0xf
c0001078:	76 05                	jbe    c000107f <dlmalloc+0x26>
c000107a:	83 e0 f8             	and    eax,0xfffffff8
c000107d:	89 c6                	mov    esi,eax
c000107f:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c0001085:	f7 c7 01 00 00 00    	test   edi,0x1
c000108b:	75 17                	jne    c00010a4 <dlmalloc+0x4b>
c000108d:	85 ff                	test   edi,edi
c000108f:	0f 85 04 03 00 00    	jne    c0001399 <dlmalloc+0x340>
c0001095:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000109a:	e8 75 fb ff ff       	call   c0000c14 <malloc_consolidate>
c000109f:	e9 f5 02 00 00       	jmp    c0001399 <dlmalloc+0x340>
c00010a4:	39 f7                	cmp    edi,esi
c00010a6:	72 1f                	jb     c00010c7 <dlmalloc+0x6e>
c00010a8:	89 f2                	mov    edx,esi
c00010aa:	c1 ea 03             	shr    edx,0x3
c00010ad:	83 ea 02             	sub    edx,0x2
c00010b0:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c00010b7:	85 c0                	test   eax,eax
c00010b9:	74 0c                	je     c00010c7 <dlmalloc+0x6e>
c00010bb:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00010be:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c00010c5:	eb 30                	jmp    c00010f7 <dlmalloc+0x9e>
c00010c7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010cd:	89 f0                	mov    eax,esi
c00010cf:	77 2e                	ja     c00010ff <dlmalloc+0xa6>
c00010d1:	c1 e8 03             	shr    eax,0x3
c00010d4:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c00010db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010df:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010e2:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010e5:	39 c3                	cmp    ebx,eax
c00010e7:	74 2e                	je     c0001117 <dlmalloc+0xbe>
c00010e9:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010ec:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010f1:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010f4:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010f7:	83 c0 08             	add    eax,0x8
c00010fa:	e9 df 02 00 00       	jmp    c00013de <dlmalloc+0x385>
c00010ff:	e8 8c fa ff ff       	call   c0000b90 <largebin_index>
c0001104:	83 e7 02             	and    edi,0x2
c0001107:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000110b:	74 0a                	je     c0001117 <dlmalloc+0xbe>
c000110d:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001112:	e8 fd fa ff ff       	call   c0000c14 <malloc_consolidate>
c0001117:	8d 46 10             	lea    eax,[esi+0x10]
c000111a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000111e:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c0001124:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c000112a:	0f 84 13 01 00 00    	je     c0001243 <dlmalloc+0x1ea>
c0001130:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001133:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001136:	83 e7 fc             	and    edi,0xfffffffc
c0001139:	81 fe ff 00 00 00    	cmp    esi,0xff
c000113f:	77 4c                	ja     c000118d <dlmalloc+0x134>
c0001141:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c0001146:	75 45                	jne    c000118d <dlmalloc+0x134>
c0001148:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c000114e:	75 3d                	jne    c000118d <dlmalloc+0x134>
c0001150:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001154:	73 37                	jae    c000118d <dlmalloc+0x134>
c0001156:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001159:	89 fa                	mov    edx,edi
c000115b:	29 f2                	sub    edx,esi
c000115d:	83 ce 01             	or     esi,0x1
c0001160:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c0001165:	89 d1                	mov    ecx,edx
c0001167:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c000116c:	83 c9 01             	or     ecx,0x1
c000116f:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c0001174:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c000117b:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c0001182:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001185:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001188:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000118b:	eb 15                	jmp    c00011a2 <dlmalloc+0x149>
c000118d:	39 fe                	cmp    esi,edi
c000118f:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c0001194:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c000119b:	75 0d                	jne    c00011aa <dlmalloc+0x151>
c000119d:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011a2:	8d 43 08             	lea    eax,[ebx+0x8]
c00011a5:	e9 34 02 00 00       	jmp    c00013de <dlmalloc+0x385>
c00011aa:	81 ff ff 00 00 00    	cmp    edi,0xff
c00011b0:	89 f8                	mov    eax,edi
c00011b2:	77 19                	ja     c00011cd <dlmalloc+0x174>
c00011b4:	c1 e8 03             	shr    eax,0x3
c00011b7:	8d 14 00             	lea    edx,[eax+eax*1]
c00011ba:	83 c2 0d             	add    edx,0xd
c00011bd:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c00011c4:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c00011cb:	eb 46                	jmp    c0001213 <dlmalloc+0x1ba>
c00011cd:	e8 be f9 ff ff       	call   c0000b90 <largebin_index>
c00011d2:	8d 14 00             	lea    edx,[eax+eax*1]
c00011d5:	83 c2 0d             	add    edx,0xd
c00011d8:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c00011df:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c00011e6:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011e9:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011ed:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011f1:	89 d5                	mov    ebp,edx
c00011f3:	74 1e                	je     c0001213 <dlmalloc+0x1ba>
c00011f5:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011f8:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011fb:	77 12                	ja     c000120f <dlmalloc+0x1b6>
c00011fd:	83 cf 01             	or     edi,0x1
c0001200:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001203:	76 05                	jbe    c000120a <dlmalloc+0x1b1>
c0001205:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001208:	eb f6                	jmp    c0001200 <dlmalloc+0x1a7>
c000120a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000120d:	eb 04                	jmp    c0001213 <dlmalloc+0x1ba>
c000120f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001213:	89 c7                	mov    edi,eax
c0001215:	88 c1                	mov    cl,al
c0001217:	c1 ff 05             	sar    edi,0x5
c000121a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000121e:	bf 01 00 00 00       	mov    edi,0x1
c0001223:	d3 e7                	shl    edi,cl
c0001225:	89 f8                	mov    eax,edi
c0001227:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000122b:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c0001232:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001235:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001238:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000123b:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000123e:	e9 db fe ff ff       	jmp    c000111e <dlmalloc+0xc5>
c0001243:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001249:	76 78                	jbe    c00012c3 <dlmalloc+0x26a>
c000124b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000124f:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c0001256:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001259:	8d 48 f8             	lea    ecx,[eax-0x8]
c000125c:	39 ca                	cmp    edx,ecx
c000125e:	74 63                	je     c00012c3 <dlmalloc+0x26a>
c0001260:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001263:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001266:	83 e3 fc             	and    ebx,0xfffffffc
c0001269:	39 de                	cmp    esi,ebx
c000126b:	77 52                	ja     c00012bf <dlmalloc+0x266>
c000126d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001270:	89 df                	mov    edi,ebx
c0001272:	01 d3                	add    ebx,edx
c0001274:	29 f7                	sub    edi,esi
c0001276:	83 ff 0f             	cmp    edi,0xf
c0001279:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000127c:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000127f:	8d 42 08             	lea    eax,[edx+0x8]
c0001282:	77 09                	ja     c000128d <dlmalloc+0x234>
c0001284:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001288:	e9 51 01 00 00       	jmp    c00013de <dlmalloc+0x385>
c000128d:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001290:	83 ce 01             	or     esi,0x1
c0001293:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c0001299:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c000129f:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c00012a6:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c00012ad:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00012b0:	89 fa                	mov    edx,edi
c00012b2:	83 ca 01             	or     edx,0x1
c00012b5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00012b8:	89 3b                	mov    DWORD PTR [ebx],edi
c00012ba:	e9 1f 01 00 00       	jmp    c00013de <dlmalloc+0x385>
c00012bf:	89 c2                	mov    edx,eax
c00012c1:	eb 99                	jmp    c000125c <dlmalloc+0x203>
c00012c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00012c7:	b8 01 00 00 00       	mov    eax,0x1
c00012cc:	41                   	inc    ecx
c00012cd:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c00012d4:	89 cb                	mov    ebx,ecx
c00012d6:	d3 e0                	shl    eax,cl
c00012d8:	c1 eb 05             	shr    ebx,0x5
c00012db:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c00012e2:	39 f8                	cmp    eax,edi
c00012e4:	77 04                	ja     c00012ea <dlmalloc+0x291>
c00012e6:	85 c0                	test   eax,eax
c00012e8:	75 26                	jne    c0001310 <dlmalloc+0x2b7>
c00012ea:	43                   	inc    ebx
c00012eb:	83 fb 02             	cmp    ebx,0x2
c00012ee:	0f 87 a5 00 00 00    	ja     c0001399 <dlmalloc+0x340>
c00012f4:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c00012fb:	85 ff                	test   edi,edi
c00012fd:	74 eb                	je     c00012ea <dlmalloc+0x291>
c00012ff:	89 d8                	mov    eax,ebx
c0001301:	c1 e0 06             	shl    eax,0x6
c0001304:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c000130b:	b8 01 00 00 00       	mov    eax,0x1
c0001310:	85 f8                	test   eax,edi
c0001312:	75 07                	jne    c000131b <dlmalloc+0x2c2>
c0001314:	83 c2 08             	add    edx,0x8
c0001317:	01 c0                	add    eax,eax
c0001319:	eb f5                	jmp    c0001310 <dlmalloc+0x2b7>
c000131b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000131e:	39 ca                	cmp    edx,ecx
c0001320:	75 13                	jne    c0001335 <dlmalloc+0x2dc>
c0001322:	c4 e2 78 f2 ff       	andn   edi,eax,edi
c0001327:	83 c2 08             	add    edx,0x8
c000132a:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c0001331:	01 c0                	add    eax,eax
c0001333:	eb ad                	jmp    c00012e2 <dlmalloc+0x289>
c0001335:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001338:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000133b:	83 e0 fc             	and    eax,0xfffffffc
c000133e:	89 c3                	mov    ebx,eax
c0001340:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001343:	29 f3                	sub    ebx,esi
c0001345:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001348:	8d 14 01             	lea    edx,[ecx+eax*1]
c000134b:	83 fb 0f             	cmp    ebx,0xf
c000134e:	8d 41 08             	lea    eax,[ecx+0x8]
c0001351:	77 09                	ja     c000135c <dlmalloc+0x303>
c0001353:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001357:	e9 82 00 00 00       	jmp    c00013de <dlmalloc+0x385>
c000135c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000135f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001365:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c000136b:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c0001371:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c0001378:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c000137f:	77 06                	ja     c0001387 <dlmalloc+0x32e>
c0001381:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c0001387:	83 ce 01             	or     esi,0x1
c000138a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000138d:	89 d9                	mov    ecx,ebx
c000138f:	83 c9 01             	or     ecx,0x1
c0001392:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001395:	89 1a                	mov    DWORD PTR [edx],ebx
c0001397:	eb 45                	jmp    c00013de <dlmalloc+0x385>
c0001399:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c000139e:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013a1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013a4:	83 e2 fc             	and    edx,0xfffffffc
c00013a7:	39 d1                	cmp    ecx,edx
c00013a9:	77 1e                	ja     c00013c9 <dlmalloc+0x370>
c00013ab:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00013ae:	89 f3                	mov    ebx,esi
c00013b0:	29 f2                	sub    edx,esi
c00013b2:	83 cb 01             	or     ebx,0x1
c00013b5:	83 ca 01             	or     edx,0x1
c00013b8:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c00013be:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00013c4:	e9 2e fd ff ff       	jmp    c00010f7 <dlmalloc+0x9e>
c00013c9:	83 c4 1c             	add    esp,0x1c
c00013cc:	89 f0                	mov    eax,esi
c00013ce:	ba 00 41 02 c0       	mov    edx,0xc0024100
c00013d3:	5b                   	pop    ebx
c00013d4:	5e                   	pop    esi
c00013d5:	5f                   	pop    edi
c00013d6:	5d                   	pop    ebp
c00013d7:	e9 14 fa ff ff       	jmp    c0000df0 <sYSMALLOc>
c00013dc:	31 c0                	xor    eax,eax
c00013de:	83 c4 1c             	add    esp,0x1c
c00013e1:	5b                   	pop    ebx
c00013e2:	5e                   	pop    esi
c00013e3:	5f                   	pop    edi
c00013e4:	5d                   	pop    ebp
c00013e5:	c3                   	ret    

c00013e6 <iALLOc>:
c00013e6:	55                   	push   ebp
c00013e7:	89 c5                	mov    ebp,eax
c00013e9:	57                   	push   edi
c00013ea:	56                   	push   esi
c00013eb:	53                   	push   ebx
c00013ec:	83 ec 2c             	sub    esp,0x2c
c00013ef:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00013f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013fe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0001402:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001406:	75 0a                	jne    c0001412 <iALLOc+0x2c>
c0001408:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000140d:	e8 02 f8 ff ff       	call   c0000c14 <malloc_consolidate>
c0001412:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001417:	74 0b                	je     c0001424 <iALLOc+0x3e>
c0001419:	31 c9                	xor    ecx,ecx
c000141b:	85 ed                	test   ebp,ebp
c000141d:	75 33                	jne    c0001452 <iALLOc+0x6c>
c000141f:	e9 5a 01 00 00       	jmp    c000157e <iALLOc+0x198>
c0001424:	85 ed                	test   ebp,ebp
c0001426:	75 14                	jne    c000143c <iALLOc+0x56>
c0001428:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001430:	83 c4 2c             	add    esp,0x2c
c0001433:	5b                   	pop    ebx
c0001434:	5e                   	pop    esi
c0001435:	5f                   	pop    edi
c0001436:	5d                   	pop    ebp
c0001437:	e9 1d fc ff ff       	jmp    c0001059 <dlmalloc>
c000143c:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001443:	b9 10 00 00 00       	mov    ecx,0x10
c0001448:	83 f8 0f             	cmp    eax,0xf
c000144b:	76 05                	jbe    c0001452 <iALLOc+0x6c>
c000144d:	83 e0 f8             	and    eax,0xfffffff8
c0001450:	89 c1                	mov    ecx,eax
c0001452:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0001457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000145b:	75 07                	jne    c0001464 <iALLOc+0x7e>
c000145d:	8d 3c a8             	lea    edi,[eax+ebp*4]
c0001460:	31 f6                	xor    esi,esi
c0001462:	eb 38                	jmp    c000149c <iALLOc+0xb6>
c0001464:	8b 00                	mov    eax,DWORD PTR [eax]
c0001466:	ba 10 00 00 00       	mov    edx,0x10
c000146b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000146f:	83 c0 0b             	add    eax,0xb
c0001472:	83 f8 0f             	cmp    eax,0xf
c0001475:	76 05                	jbe    c000147c <iALLOc+0x96>
c0001477:	83 e0 f8             	and    eax,0xfffffff8
c000147a:	89 c2                	mov    edx,eax
c000147c:	89 d6                	mov    esi,edx
c000147e:	0f af f5             	imul   esi,ebp
c0001481:	eb 1f                	jmp    c00014a2 <iALLOc+0xbc>
c0001483:	8b 10                	mov    edx,DWORD PTR [eax]
c0001485:	bb 10 00 00 00       	mov    ebx,0x10
c000148a:	83 c2 0b             	add    edx,0xb
c000148d:	83 fa 0f             	cmp    edx,0xf
c0001490:	76 05                	jbe    c0001497 <iALLOc+0xb1>
c0001492:	83 e2 f8             	and    edx,0xfffffff8
c0001495:	89 d3                	mov    ebx,edx
c0001497:	01 de                	add    esi,ebx
c0001499:	83 c0 04             	add    eax,0x4
c000149c:	39 c7                	cmp    edi,eax
c000149e:	75 e3                	jne    c0001483 <iALLOc+0x9d>
c00014a0:	31 d2                	xor    edx,edx
c00014a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00014a6:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c00014ac:	8d 44 0e f9          	lea    eax,[esi+ecx*1-0x7]
c00014b0:	83 ec 0c             	sub    esp,0xc
c00014b3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00014b7:	50                   	push   eax
c00014b8:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c00014c2:	e8 92 fb ff ff       	call   c0001059 <dlmalloc>
c00014c7:	83 c4 10             	add    esp,0x10
c00014ca:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c00014d0:	85 c0                	test   eax,eax
c00014d2:	0f 84 9e 00 00 00    	je     c0001576 <iALLOc+0x190>
c00014d8:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014db:	8d 78 f8             	lea    edi,[eax-0x8]
c00014de:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00014e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014e6:	83 e3 fc             	and    ebx,0xfffffffc
c00014e9:	f6 44 24 14 02       	test   BYTE PTR [esp+0x14],0x2
c00014ee:	74 1e                	je     c000150e <iALLOc+0x128>
c00014f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00014f4:	52                   	push   edx
c00014f5:	89 da                	mov    edx,ebx
c00014f7:	29 ca                	sub    edx,ecx
c00014f9:	89 d1                	mov    ecx,edx
c00014fb:	83 e9 04             	sub    ecx,0x4
c00014fe:	51                   	push   ecx
c00014ff:	6a 00                	push   0x0
c0001501:	50                   	push   eax
c0001502:	e8 e9 ef ff ff       	call   c00004f0 <memset>
c0001507:	83 c4 10             	add    esp,0x10
c000150a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000150e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001513:	75 14                	jne    c0001529 <iALLOc+0x143>
c0001515:	8d 04 37             	lea    eax,[edi+esi*1]
c0001518:	29 f3                	sub    ebx,esi
c000151a:	8d 48 08             	lea    ecx,[eax+0x8]
c000151d:	83 cb 01             	or     ebx,0x1
c0001520:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001523:	89 f3                	mov    ebx,esi
c0001525:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001529:	31 c0                	xor    eax,eax
c000152b:	4d                   	dec    ebp
c000152c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001530:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001533:	39 c5                	cmp    ebp,eax
c0001535:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001538:	74 34                	je     c000156e <iALLOc+0x188>
c000153a:	85 d2                	test   edx,edx
c000153c:	89 d1                	mov    ecx,edx
c000153e:	75 1f                	jne    c000155f <iALLOc+0x179>
c0001540:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001544:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0001547:	89 ce                	mov    esi,ecx
c0001549:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000154d:	b9 10 00 00 00       	mov    ecx,0x10
c0001552:	83 c6 0b             	add    esi,0xb
c0001555:	83 fe 0f             	cmp    esi,0xf
c0001558:	76 05                	jbe    c000155f <iALLOc+0x179>
c000155a:	83 e6 f8             	and    esi,0xfffffff8
c000155d:	89 f1                	mov    ecx,esi
c000155f:	89 ce                	mov    esi,ecx
c0001561:	29 cb                	sub    ebx,ecx
c0001563:	40                   	inc    eax
c0001564:	83 ce 01             	or     esi,0x1
c0001567:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000156a:	01 cf                	add    edi,ecx
c000156c:	eb be                	jmp    c000152c <iALLOc+0x146>
c000156e:	83 cb 01             	or     ebx,0x1
c0001571:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001574:	eb 08                	jmp    c000157e <iALLOc+0x198>
c0001576:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000157e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001582:	83 c4 2c             	add    esp,0x2c
c0001585:	5b                   	pop    ebx
c0001586:	5e                   	pop    esi
c0001587:	5f                   	pop    edi
c0001588:	5d                   	pop    ebp
c0001589:	c3                   	ret    

c000158a <dlrealloc>:
c000158a:	55                   	push   ebp
c000158b:	57                   	push   edi
c000158c:	56                   	push   esi
c000158d:	53                   	push   ebx
c000158e:	83 ec 1c             	sub    esp,0x1c
c0001591:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001595:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001599:	85 db                	test   ebx,ebx
c000159b:	75 10                	jne    c00015ad <dlrealloc+0x23>
c000159d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015a1:	83 c4 1c             	add    esp,0x1c
c00015a4:	5b                   	pop    ebx
c00015a5:	5e                   	pop    esi
c00015a6:	5f                   	pop    edi
c00015a7:	5d                   	pop    ebp
c00015a8:	e9 ac fa ff ff       	jmp    c0001059 <dlmalloc>
c00015ad:	83 f8 df             	cmp    eax,0xffffffdf
c00015b0:	76 07                	jbe    c00015b9 <dlrealloc+0x2f>
c00015b2:	31 db                	xor    ebx,ebx
c00015b4:	e9 6b 01 00 00       	jmp    c0001724 <dlrealloc+0x19a>
c00015b9:	83 c0 0b             	add    eax,0xb
c00015bc:	bd 10 00 00 00       	mov    ebp,0x10
c00015c1:	83 f8 0f             	cmp    eax,0xf
c00015c4:	76 05                	jbe    c00015cb <dlrealloc+0x41>
c00015c6:	83 e0 f8             	and    eax,0xfffffff8
c00015c9:	89 c5                	mov    ebp,eax
c00015cb:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015ce:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015d1:	89 ce                	mov    esi,ecx
c00015d3:	83 e6 fc             	and    esi,0xfffffffc
c00015d6:	f6 c1 02             	test   cl,0x2
c00015d9:	75 d7                	jne    c00015b2 <dlrealloc+0x28>
c00015db:	39 f5                	cmp    ebp,esi
c00015dd:	0f 86 04 01 00 00    	jbe    c00016e7 <dlrealloc+0x15d>
c00015e3:	8d 14 37             	lea    edx,[edi+esi*1]
c00015e6:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c00015ec:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00015ef:	75 33                	jne    c0001624 <dlrealloc+0x9a>
c00015f1:	83 e0 fc             	and    eax,0xfffffffc
c00015f4:	01 f0                	add    eax,esi
c00015f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015fa:	8d 45 10             	lea    eax,[ebp+0x10]
c00015fd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001601:	77 49                	ja     c000164c <dlrealloc+0xc2>
c0001603:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001607:	83 e1 01             	and    ecx,0x1
c000160a:	01 ef                	add    edi,ebp
c000160c:	09 e9                	or     ecx,ebp
c000160e:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c0001611:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c0001617:	29 e8                	sub    eax,ebp
c0001619:	83 c8 01             	or     eax,0x1
c000161c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000161f:	e9 00 01 00 00       	jmp    c0001724 <dlrealloc+0x19a>
c0001624:	89 c1                	mov    ecx,eax
c0001626:	83 e1 fe             	and    ecx,0xfffffffe
c0001629:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000162e:	75 1c                	jne    c000164c <dlrealloc+0xc2>
c0001630:	83 e0 fc             	and    eax,0xfffffffc
c0001633:	01 f0                	add    eax,esi
c0001635:	39 c5                	cmp    ebp,eax
c0001637:	77 13                	ja     c000164c <dlrealloc+0xc2>
c0001639:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000163c:	89 c6                	mov    esi,eax
c000163e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0001641:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001644:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001647:	e9 9b 00 00 00       	jmp    c00016e7 <dlrealloc+0x15d>
c000164c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001650:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001653:	83 ec 0c             	sub    esp,0xc
c0001656:	50                   	push   eax
c0001657:	e8 fd f9 ff ff       	call   c0001059 <dlmalloc>
c000165c:	83 c4 10             	add    esp,0x10
c000165f:	85 c0                	test   eax,eax
c0001661:	0f 84 4b ff ff ff    	je     c00015b2 <dlrealloc+0x28>
c0001667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000166b:	8d 48 f8             	lea    ecx,[eax-0x8]
c000166e:	39 ca                	cmp    edx,ecx
c0001670:	75 0a                	jne    c000167c <dlrealloc+0xf2>
c0001672:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001675:	83 e0 fc             	and    eax,0xfffffffc
c0001678:	01 c6                	add    esi,eax
c000167a:	eb 6b                	jmp    c00016e7 <dlrealloc+0x15d>
c000167c:	8d 4e fc             	lea    ecx,[esi-0x4]
c000167f:	83 f9 27             	cmp    ecx,0x27
c0001682:	76 08                	jbe    c000168c <dlrealloc+0x102>
c0001684:	89 de                	mov    esi,ebx
c0001686:	89 c7                	mov    edi,eax
c0001688:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000168a:	eb 43                	jmp    c00016cf <dlrealloc+0x145>
c000168c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000168e:	83 f9 13             	cmp    ecx,0x13
c0001691:	89 10                	mov    DWORD PTR [eax],edx
c0001693:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001696:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001699:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000169c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000169f:	76 2e                	jbe    c00016cf <dlrealloc+0x145>
c00016a1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00016a4:	83 f9 1b             	cmp    ecx,0x1b
c00016a7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00016aa:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00016ad:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00016b0:	76 1d                	jbe    c00016cf <dlrealloc+0x145>
c00016b2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00016b5:	83 f9 23             	cmp    ecx,0x23
c00016b8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00016bb:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00016be:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00016c1:	76 0c                	jbe    c00016cf <dlrealloc+0x145>
c00016c3:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00016c6:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00016c9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016cc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016d3:	83 ec 0c             	sub    esp,0xc
c00016d6:	53                   	push   ebx
c00016d7:	e8 1f f6 ff ff       	call   c0000cfb <dlfree>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e3:	89 c3                	mov    ebx,eax
c00016e5:	eb 3d                	jmp    c0001724 <dlrealloc+0x19a>
c00016e7:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	89 f2                	mov    edx,esi
c00016ef:	29 ea                	sub    edx,ebp
c00016f1:	83 e1 01             	and    ecx,0x1
c00016f4:	83 fa 0f             	cmp    edx,0xf
c00016f7:	77 0b                	ja     c0001704 <dlrealloc+0x17a>
c00016f9:	09 ce                	or     esi,ecx
c00016fb:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016fe:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001702:	eb 20                	jmp    c0001724 <dlrealloc+0x19a>
c0001704:	01 ef                	add    edi,ebp
c0001706:	83 ca 01             	or     edx,0x1
c0001709:	09 cd                	or     ebp,ecx
c000170b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000170e:	83 ec 0c             	sub    esp,0xc
c0001711:	83 c7 08             	add    edi,0x8
c0001714:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001717:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000171b:	57                   	push   edi
c000171c:	e8 da f5 ff ff       	call   c0000cfb <dlfree>
c0001721:	83 c4 10             	add    esp,0x10
c0001724:	83 c4 1c             	add    esp,0x1c
c0001727:	89 d8                	mov    eax,ebx
c0001729:	5b                   	pop    ebx
c000172a:	5e                   	pop    esi
c000172b:	5f                   	pop    edi
c000172c:	5d                   	pop    ebp
c000172d:	c3                   	ret    

c000172e <dlmemalign>:
c000172e:	55                   	push   ebp
c000172f:	57                   	push   edi
c0001730:	56                   	push   esi
c0001731:	53                   	push   ebx
c0001732:	83 ec 0c             	sub    esp,0xc
c0001735:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001739:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000173d:	83 fa 08             	cmp    edx,0x8
c0001740:	77 10                	ja     c0001752 <dlmemalign+0x24>
c0001742:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001746:	83 c4 0c             	add    esp,0xc
c0001749:	5b                   	pop    ebx
c000174a:	5e                   	pop    esi
c000174b:	5f                   	pop    edi
c000174c:	5d                   	pop    ebp
c000174d:	e9 07 f9 ff ff       	jmp    c0001059 <dlmalloc>
c0001752:	83 fa 0f             	cmp    edx,0xf
c0001755:	bf 10 00 00 00       	mov    edi,0x10
c000175a:	76 13                	jbe    c000176f <dlmemalign+0x41>
c000175c:	c4 e2 70 f3 ca       	blsr   ecx,edx
c0001761:	75 04                	jne    c0001767 <dlmemalign+0x39>
c0001763:	89 d7                	mov    edi,edx
c0001765:	eb 08                	jmp    c000176f <dlmemalign+0x41>
c0001767:	39 d7                	cmp    edi,edx
c0001769:	73 04                	jae    c000176f <dlmemalign+0x41>
c000176b:	01 ff                	add    edi,edi
c000176d:	eb f8                	jmp    c0001767 <dlmemalign+0x39>
c000176f:	83 f8 df             	cmp    eax,0xffffffdf
c0001772:	76 07                	jbe    c000177b <dlmemalign+0x4d>
c0001774:	31 c0                	xor    eax,eax
c0001776:	e9 ce 00 00 00       	jmp    c0001849 <dlmemalign+0x11b>
c000177b:	83 c0 0b             	add    eax,0xb
c000177e:	bd 10 00 00 00       	mov    ebp,0x10
c0001783:	83 f8 0f             	cmp    eax,0xf
c0001786:	76 05                	jbe    c000178d <dlmemalign+0x5f>
c0001788:	83 e0 f8             	and    eax,0xfffffff8
c000178b:	89 c5                	mov    ebp,eax
c000178d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001791:	83 ec 0c             	sub    esp,0xc
c0001794:	50                   	push   eax
c0001795:	e8 bf f8 ff ff       	call   c0001059 <dlmalloc>
c000179a:	83 c4 10             	add    esp,0x10
c000179d:	85 c0                	test   eax,eax
c000179f:	89 c1                	mov    ecx,eax
c00017a1:	74 d1                	je     c0001774 <dlmemalign+0x46>
c00017a3:	8d 70 f8             	lea    esi,[eax-0x8]
c00017a6:	31 d2                	xor    edx,edx
c00017a8:	f7 f7                	div    edi
c00017aa:	85 d2                	test   edx,edx
c00017ac:	74 62                	je     c0001810 <dlmemalign+0xe2>
c00017ae:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00017b2:	89 f8                	mov    eax,edi
c00017b4:	f7 d8                	neg    eax
c00017b6:	21 c3                	and    ebx,eax
c00017b8:	83 eb 08             	sub    ebx,0x8
c00017bb:	89 d8                	mov    eax,ebx
c00017bd:	29 f0                	sub    eax,esi
c00017bf:	83 f8 0f             	cmp    eax,0xf
c00017c2:	77 02                	ja     c00017c6 <dlmemalign+0x98>
c00017c4:	01 fb                	add    ebx,edi
c00017c6:	89 d8                	mov    eax,ebx
c00017c8:	29 f0                	sub    eax,esi
c00017ca:	89 c6                	mov    esi,eax
c00017cc:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017cf:	89 c2                	mov    edx,eax
c00017d1:	83 e2 fc             	and    edx,0xfffffffc
c00017d4:	29 f2                	sub    edx,esi
c00017d6:	a8 02                	test   al,0x2
c00017d8:	74 10                	je     c00017ea <dlmemalign+0xbc>
c00017da:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017dd:	8d 43 08             	lea    eax,[ebx+0x8]
c00017e0:	83 ca 02             	or     edx,0x2
c00017e3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017e6:	89 33                	mov    DWORD PTR [ebx],esi
c00017e8:	eb 5f                	jmp    c0001849 <dlmemalign+0x11b>
c00017ea:	89 d0                	mov    eax,edx
c00017ec:	83 ec 0c             	sub    esp,0xc
c00017ef:	83 c8 01             	or     eax,0x1
c00017f2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017f5:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017fa:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017fd:	83 e0 01             	and    eax,0x1
c0001800:	09 f0                	or     eax,esi
c0001802:	89 de                	mov    esi,ebx
c0001804:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001807:	51                   	push   ecx
c0001808:	e8 ee f4 ff ff       	call   c0000cfb <dlfree>
c000180d:	83 c4 10             	add    esp,0x10
c0001810:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001813:	a8 02                	test   al,0x2
c0001815:	75 2f                	jne    c0001846 <dlmemalign+0x118>
c0001817:	8d 55 10             	lea    edx,[ebp+0x10]
c000181a:	83 e0 fc             	and    eax,0xfffffffc
c000181d:	39 c2                	cmp    edx,eax
c000181f:	73 25                	jae    c0001846 <dlmemalign+0x118>
c0001821:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001824:	29 e8                	sub    eax,ebp
c0001826:	83 ec 0c             	sub    esp,0xc
c0001829:	83 c8 01             	or     eax,0x1
c000182c:	83 c2 08             	add    edx,0x8
c000182f:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001832:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001835:	83 e0 01             	and    eax,0x1
c0001838:	09 c5                	or     ebp,eax
c000183a:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000183d:	52                   	push   edx
c000183e:	e8 b8 f4 ff ff       	call   c0000cfb <dlfree>
c0001843:	83 c4 10             	add    esp,0x10
c0001846:	8d 46 08             	lea    eax,[esi+0x8]
c0001849:	83 c4 0c             	add    esp,0xc
c000184c:	5b                   	pop    ebx
c000184d:	5e                   	pop    esi
c000184e:	5f                   	pop    edi
c000184f:	5d                   	pop    ebp
c0001850:	c3                   	ret    

c0001851 <dlcalloc>:
c0001851:	53                   	push   ebx
c0001852:	83 ec 14             	sub    esp,0x14
c0001855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001859:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000185e:	50                   	push   eax
c000185f:	e8 f5 f7 ff ff       	call   c0001059 <dlmalloc>
c0001864:	83 c4 10             	add    esp,0x10
c0001867:	85 c0                	test   eax,eax
c0001869:	89 c3                	mov    ebx,eax
c000186b:	74 77                	je     c00018e4 <dlcalloc+0x93>
c000186d:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001870:	89 d0                	mov    eax,edx
c0001872:	83 e0 fc             	and    eax,0xfffffffc
c0001875:	80 e2 02             	and    dl,0x2
c0001878:	75 5a                	jne    c00018d4 <dlcalloc+0x83>
c000187a:	83 e8 04             	sub    eax,0x4
c000187d:	83 f8 27             	cmp    eax,0x27
c0001880:	76 03                	jbe    c0001885 <dlcalloc+0x34>
c0001882:	51                   	push   ecx
c0001883:	eb 53                	jmp    c00018d8 <dlcalloc+0x87>
c0001885:	83 f8 13             	cmp    eax,0x13
c0001888:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000188e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001895:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000189c:	76 46                	jbe    c00018e4 <dlcalloc+0x93>
c000189e:	83 f8 1b             	cmp    eax,0x1b
c00018a1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00018a8:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00018af:	76 33                	jbe    c00018e4 <dlcalloc+0x93>
c00018b1:	83 f8 23             	cmp    eax,0x23
c00018b4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00018bb:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00018c2:	76 20                	jbe    c00018e4 <dlcalloc+0x93>
c00018c4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018cb:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018d2:	eb 10                	jmp    c00018e4 <dlcalloc+0x93>
c00018d4:	83 e8 08             	sub    eax,0x8
c00018d7:	52                   	push   edx
c00018d8:	50                   	push   eax
c00018d9:	6a 00                	push   0x0
c00018db:	53                   	push   ebx
c00018dc:	e8 0f ec ff ff       	call   c00004f0 <memset>
c00018e1:	83 c4 10             	add    esp,0x10
c00018e4:	83 c4 08             	add    esp,0x8
c00018e7:	89 d8                	mov    eax,ebx
c00018e9:	5b                   	pop    ebx
c00018ea:	c3                   	ret    

c00018eb <dlcfree>:
c00018eb:	e9 0b f4 ff ff       	jmp    c0000cfb <dlfree>

c00018f0 <dlindependent_calloc>:
c00018f0:	83 ec 28             	sub    esp,0x28
c00018f3:	b9 03 00 00 00       	mov    ecx,0x3
c00018f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001900:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001904:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001908:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000190c:	e8 d5 fa ff ff       	call   c00013e6 <iALLOc>
c0001911:	83 c4 2c             	add    esp,0x2c
c0001914:	c3                   	ret    

c0001915 <dlindependent_comalloc>:
c0001915:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001919:	31 c9                	xor    ecx,ecx
c000191b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000191f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001923:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001927:	e9 ba fa ff ff       	jmp    c00013e6 <iALLOc>

c000192c <dlvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001936:	75 0a                	jne    c0001942 <dlvalloc+0x16>
c0001938:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000193d:	e8 d2 f2 ff ff       	call   c0000c14 <malloc_consolidate>
c0001942:	50                   	push   eax
c0001943:	50                   	push   eax
c0001944:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001948:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c000194e:	e8 db fd ff ff       	call   c000172e <dlmemalign>
c0001953:	83 c4 1c             	add    esp,0x1c
c0001956:	c3                   	ret    

c0001957 <dlpvalloc>:
c0001957:	83 ec 0c             	sub    esp,0xc
c000195a:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001961:	75 0a                	jne    c000196d <dlpvalloc+0x16>
c0001963:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001968:	e8 a7 f2 ff ff       	call   c0000c14 <malloc_consolidate>
c000196d:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c0001972:	52                   	push   edx
c0001973:	52                   	push   edx
c0001974:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001978:	89 c1                	mov    ecx,eax
c000197a:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000197e:	f7 d9                	neg    ecx
c0001980:	21 ca                	and    edx,ecx
c0001982:	52                   	push   edx
c0001983:	50                   	push   eax
c0001984:	e8 a5 fd ff ff       	call   c000172e <dlmemalign>
c0001989:	83 c4 1c             	add    esp,0x1c
c000198c:	c3                   	ret    

c000198d <dlmalloc_trim>:
c000198d:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001992:	e8 7d f2 ff ff       	call   c0000c14 <malloc_consolidate>
c0001997:	31 c0                	xor    eax,eax
c0001999:	c3                   	ret    

c000199a <dlmalloc_usable_size>:
c000199a:	53                   	push   ebx
c000199b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000199f:	31 c0                	xor    eax,eax
c00019a1:	85 c9                	test   ecx,ecx
c00019a3:	74 24                	je     c00019c9 <dlmalloc_usable_size+0x2f>
c00019a5:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00019a8:	f6 c2 02             	test   dl,0x2
c00019ab:	74 08                	je     c00019b5 <dlmalloc_usable_size+0x1b>
c00019ad:	83 e2 fc             	and    edx,0xfffffffc
c00019b0:	8d 42 f8             	lea    eax,[edx-0x8]
c00019b3:	eb 14                	jmp    c00019c9 <dlmalloc_usable_size+0x2f>
c00019b5:	89 d3                	mov    ebx,edx
c00019b7:	31 c0                	xor    eax,eax
c00019b9:	83 e3 fe             	and    ebx,0xfffffffe
c00019bc:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00019c1:	74 06                	je     c00019c9 <dlmalloc_usable_size+0x2f>
c00019c3:	83 e2 fc             	and    edx,0xfffffffc
c00019c6:	8d 42 fc             	lea    eax,[edx-0x4]
c00019c9:	5b                   	pop    ebx
c00019ca:	c3                   	ret    

c00019cb <dlmallinfo>:
c00019cb:	55                   	push   ebp
c00019cc:	57                   	push   edi
c00019cd:	56                   	push   esi
c00019ce:	53                   	push   ebx
c00019cf:	83 ec 08             	sub    esp,0x8
c00019d2:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c00019d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019dd:	75 0a                	jne    c00019e9 <dlmallinfo+0x1e>
c00019df:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019e4:	e8 2b f2 ff ff       	call   c0000c14 <malloc_consolidate>
c00019e9:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c00019ee:	31 ed                	xor    ebp,ebp
c00019f0:	31 c9                	xor    ecx,ecx
c00019f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019f5:	83 e0 fc             	and    eax,0xfffffffc
c00019f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019fc:	31 c0                	xor    eax,eax
c00019fe:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a05:	85 d2                	test   edx,edx
c0001a07:	74 0e                	je     c0001a17 <dlmallinfo+0x4c>
c0001a09:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a0c:	45                   	inc    ebp
c0001a0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a10:	83 e6 fc             	and    esi,0xfffffffc
c0001a13:	01 f1                	add    ecx,esi
c0001a15:	eb ee                	jmp    c0001a05 <dlmallinfo+0x3a>
c0001a17:	40                   	inc    eax
c0001a18:	83 f8 0a             	cmp    eax,0xa
c0001a1b:	75 e1                	jne    c00019fe <dlmallinfo+0x33>
c0001a1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a21:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a28:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a2b:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001a30:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a33:	39 f0                	cmp    eax,esi
c0001a35:	74 10                	je     c0001a47 <dlmallinfo+0x7c>
c0001a37:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a3a:	ff 04 24             	inc    DWORD PTR [esp]
c0001a3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a40:	83 e7 fc             	and    edi,0xfffffffc
c0001a43:	01 fa                	add    edx,edi
c0001a45:	eb ec                	jmp    c0001a33 <dlmallinfo+0x68>
c0001a47:	83 c0 08             	add    eax,0x8
c0001a4a:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001a4f:	75 df                	jne    c0001a30 <dlmallinfo+0x65>
c0001a51:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001a57:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a5a:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001a5f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a62:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a65:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a68:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a6b:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001a71:	89 03                	mov    DWORD PTR [ebx],eax
c0001a73:	29 d0                	sub    eax,edx
c0001a75:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a7f:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a82:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001a88:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a8b:	89 d8                	mov    eax,ebx
c0001a8d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a90:	83 c4 08             	add    esp,0x8
c0001a93:	5b                   	pop    ebx
c0001a94:	5e                   	pop    esi
c0001a95:	5f                   	pop    edi
c0001a96:	5d                   	pop    ebp
c0001a97:	c2 04 00             	ret    0x4

c0001a9a <dlmalloc_stats>:
c0001a9a:	83 ec 30             	sub    esp,0x30
c0001a9d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001aa1:	50                   	push   eax
c0001aa2:	e8 24 ff ff ff       	call   c00019cb <dlmallinfo>
c0001aa7:	83 c4 30             	add    esp,0x30
c0001aaa:	c3                   	ret    

c0001aab <dlmallopt>:
c0001aab:	56                   	push   esi
c0001aac:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001ab1:	53                   	push   ebx
c0001ab2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ab6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001aba:	e8 55 f1 ff ff       	call   c0000c14 <malloc_consolidate>
c0001abf:	8d 46 04             	lea    eax,[esi+0x4]
c0001ac2:	83 f8 05             	cmp    eax,0x5
c0001ac5:	77 67                	ja     c0001b2e <dlmallopt+0x83>
c0001ac7:	ff 24 85 44 f3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0cbc]
c0001ace:	83 fb 50             	cmp    ebx,0x50
c0001ad1:	77 5b                	ja     c0001b2e <dlmallopt+0x83>
c0001ad3:	85 db                	test   ebx,ebx
c0001ad5:	ba 08 00 00 00       	mov    edx,0x8
c0001ada:	74 12                	je     c0001aee <dlmallopt+0x43>
c0001adc:	83 c3 0b             	add    ebx,0xb
c0001adf:	ba 10 00 00 00       	mov    edx,0x10
c0001ae4:	83 fb 0f             	cmp    ebx,0xf
c0001ae7:	76 05                	jbe    c0001aee <dlmallopt+0x43>
c0001ae9:	89 da                	mov    edx,ebx
c0001aeb:	83 e2 f8             	and    edx,0xfffffff8
c0001aee:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001af3:	83 e0 03             	and    eax,0x3
c0001af6:	09 d0                	or     eax,edx
c0001af8:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001afd:	eb 31                	jmp    c0001b30 <dlmallopt+0x85>
c0001aff:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b05:	eb 06                	jmp    c0001b0d <dlmallopt+0x62>
c0001b07:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001b0d:	be 01 00 00 00       	mov    esi,0x1
c0001b12:	eb 1c                	jmp    c0001b30 <dlmallopt+0x85>
c0001b14:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001b1a:	eb f1                	jmp    c0001b0d <dlmallopt+0x62>
c0001b1c:	31 f6                	xor    esi,esi
c0001b1e:	85 db                	test   ebx,ebx
c0001b20:	75 0e                	jne    c0001b30 <dlmallopt+0x85>
c0001b22:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001b2c:	eb df                	jmp    c0001b0d <dlmallopt+0x62>
c0001b2e:	31 f6                	xor    esi,esi
c0001b30:	89 f0                	mov    eax,esi
c0001b32:	5b                   	pop    ebx
c0001b33:	5e                   	pop    esi
c0001b34:	c3                   	ret    
c0001b35:	66 90                	xchg   ax,ax
c0001b37:	90                   	nop

c0001b38 <isblank>:
c0001b38:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b3d:	74 09                	je     c0001b48 <isblank+0x10>
c0001b3f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b44:	75 0a                	jne    c0001b50 <isblank+0x18>
c0001b46:	66 90                	xchg   ax,ax
c0001b48:	b8 01 00 00 00       	mov    eax,0x1
c0001b4d:	c3                   	ret    
c0001b4e:	66 90                	xchg   ax,ax
c0001b50:	b8 00 00 00 00       	mov    eax,0x0
c0001b55:	c3                   	ret    
c0001b56:	66 90                	xchg   ax,ax

c0001b58 <iscntrl>:
c0001b58:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b5d:	7e 09                	jle    c0001b68 <iscntrl+0x10>
c0001b5f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b64:	75 0a                	jne    c0001b70 <iscntrl+0x18>
c0001b66:	66 90                	xchg   ax,ax
c0001b68:	b8 01 00 00 00       	mov    eax,0x1
c0001b6d:	c3                   	ret    
c0001b6e:	66 90                	xchg   ax,ax
c0001b70:	b8 00 00 00 00       	mov    eax,0x0
c0001b75:	c3                   	ret    
c0001b76:	66 90                	xchg   ax,ax

c0001b78 <isdigit>:
c0001b78:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b7d:	7e 0d                	jle    c0001b8c <isdigit+0x14>
c0001b7f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b84:	7f 06                	jg     c0001b8c <isdigit+0x14>
c0001b86:	b8 01 00 00 00       	mov    eax,0x1
c0001b8b:	c3                   	ret    
c0001b8c:	b8 00 00 00 00       	mov    eax,0x0
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <islower>:
c0001b94:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b99:	7e 0d                	jle    c0001ba8 <islower+0x14>
c0001b9b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001ba0:	7f 06                	jg     c0001ba8 <islower+0x14>
c0001ba2:	b8 01 00 00 00       	mov    eax,0x1
c0001ba7:	c3                   	ret    
c0001ba8:	b8 00 00 00 00       	mov    eax,0x0
c0001bad:	c3                   	ret    
c0001bae:	66 90                	xchg   ax,ax

c0001bb0 <isspace>:
c0001bb0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bb5:	7c 19                	jl     c0001bd0 <isspace+0x20>
c0001bb7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001bbc:	7e 0a                	jle    c0001bc8 <isspace+0x18>
c0001bbe:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bc3:	75 0b                	jne    c0001bd0 <isspace+0x20>
c0001bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0001bc8:	b8 01 00 00 00       	mov    eax,0x1
c0001bcd:	c3                   	ret    
c0001bce:	66 90                	xchg   ax,ax
c0001bd0:	b8 00 00 00 00       	mov    eax,0x0
c0001bd5:	c3                   	ret    
c0001bd6:	66 90                	xchg   ax,ax

c0001bd8 <isupper>:
c0001bd8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001bdd:	7e 0d                	jle    c0001bec <isupper+0x14>
c0001bdf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001be4:	7f 06                	jg     c0001bec <isupper+0x14>
c0001be6:	b8 01 00 00 00       	mov    eax,0x1
c0001beb:	c3                   	ret    
c0001bec:	b8 00 00 00 00       	mov    eax,0x0
c0001bf1:	c3                   	ret    
c0001bf2:	66 90                	xchg   ax,ax

c0001bf4 <isalpha>:
c0001bf4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bf8:	e8 db ff ff ff       	call   c0001bd8 <isupper>
c0001bfd:	83 c4 04             	add    esp,0x4
c0001c00:	85 c0                	test   eax,eax
c0001c02:	75 10                	jne    c0001c14 <isalpha+0x20>
c0001c04:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c08:	e8 87 ff ff ff       	call   c0001b94 <islower>
c0001c0d:	83 c4 04             	add    esp,0x4
c0001c10:	85 c0                	test   eax,eax
c0001c12:	74 08                	je     c0001c1c <isalpha+0x28>
c0001c14:	b8 01 00 00 00       	mov    eax,0x1
c0001c19:	c3                   	ret    
c0001c1a:	66 90                	xchg   ax,ax
c0001c1c:	b8 00 00 00 00       	mov    eax,0x0
c0001c21:	c3                   	ret    
c0001c22:	66 90                	xchg   ax,ax

c0001c24 <isalnum>:
c0001c24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c28:	e8 c7 ff ff ff       	call   c0001bf4 <isalpha>
c0001c2d:	83 c4 04             	add    esp,0x4
c0001c30:	85 c0                	test   eax,eax
c0001c32:	75 10                	jne    c0001c44 <isalnum+0x20>
c0001c34:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c38:	e8 3b ff ff ff       	call   c0001b78 <isdigit>
c0001c3d:	83 c4 04             	add    esp,0x4
c0001c40:	85 c0                	test   eax,eax
c0001c42:	74 08                	je     c0001c4c <isalnum+0x28>
c0001c44:	b8 01 00 00 00       	mov    eax,0x1
c0001c49:	c3                   	ret    
c0001c4a:	66 90                	xchg   ax,ax
c0001c4c:	b8 00 00 00 00       	mov    eax,0x0
c0001c51:	c3                   	ret    
c0001c52:	66 90                	xchg   ax,ax

c0001c54 <ispunct>:
c0001c54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c58:	e8 c7 ff ff ff       	call   c0001c24 <isalnum>
c0001c5d:	83 c4 04             	add    esp,0x4
c0001c60:	85 c0                	test   eax,eax
c0001c62:	75 28                	jne    c0001c8c <ispunct+0x38>
c0001c64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c68:	e8 43 ff ff ff       	call   c0001bb0 <isspace>
c0001c6d:	83 c4 04             	add    esp,0x4
c0001c70:	85 c0                	test   eax,eax
c0001c72:	75 18                	jne    c0001c8c <ispunct+0x38>
c0001c74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c78:	e8 db fe ff ff       	call   c0001b58 <iscntrl>
c0001c7d:	83 c4 04             	add    esp,0x4
c0001c80:	85 c0                	test   eax,eax
c0001c82:	75 08                	jne    c0001c8c <ispunct+0x38>
c0001c84:	b8 01 00 00 00       	mov    eax,0x1
c0001c89:	c3                   	ret    
c0001c8a:	66 90                	xchg   ax,ax
c0001c8c:	b8 00 00 00 00       	mov    eax,0x0
c0001c91:	c3                   	ret    
c0001c92:	66 90                	xchg   ax,ax

c0001c94 <isgraph>:
c0001c94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c98:	e8 87 ff ff ff       	call   c0001c24 <isalnum>
c0001c9d:	83 c4 04             	add    esp,0x4
c0001ca0:	85 c0                	test   eax,eax
c0001ca2:	75 10                	jne    c0001cb4 <isgraph+0x20>
c0001ca4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ca8:	e8 a7 ff ff ff       	call   c0001c54 <ispunct>
c0001cad:	83 c4 04             	add    esp,0x4
c0001cb0:	85 c0                	test   eax,eax
c0001cb2:	74 08                	je     c0001cbc <isgraph+0x28>
c0001cb4:	b8 01 00 00 00       	mov    eax,0x1
c0001cb9:	c3                   	ret    
c0001cba:	66 90                	xchg   ax,ax
c0001cbc:	b8 00 00 00 00       	mov    eax,0x0
c0001cc1:	c3                   	ret    
c0001cc2:	66 90                	xchg   ax,ax

c0001cc4 <isprint>:
c0001cc4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc8:	e8 c7 ff ff ff       	call   c0001c94 <isgraph>
c0001ccd:	83 c4 04             	add    esp,0x4
c0001cd0:	85 c0                	test   eax,eax
c0001cd2:	75 08                	jne    c0001cdc <isprint+0x18>
c0001cd4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001cd9:	75 09                	jne    c0001ce4 <isprint+0x20>
c0001cdb:	90                   	nop
c0001cdc:	b8 01 00 00 00       	mov    eax,0x1
c0001ce1:	c3                   	ret    
c0001ce2:	66 90                	xchg   ax,ax
c0001ce4:	b8 00 00 00 00       	mov    eax,0x0
c0001ce9:	c3                   	ret    
c0001cea:	66 90                	xchg   ax,ax

c0001cec <isxdigit>:
c0001cec:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf0:	e8 83 fe ff ff       	call   c0001b78 <isdigit>
c0001cf5:	83 c4 04             	add    esp,0x4
c0001cf8:	85 c0                	test   eax,eax
c0001cfa:	75 20                	jne    c0001d1c <isxdigit+0x30>
c0001cfc:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d01:	7e 09                	jle    c0001d0c <isxdigit+0x20>
c0001d03:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d08:	7e 12                	jle    c0001d1c <isxdigit+0x30>
c0001d0a:	66 90                	xchg   ax,ax
c0001d0c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d11:	7e 11                	jle    c0001d24 <isxdigit+0x38>
c0001d13:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d18:	7f 0a                	jg     c0001d24 <isxdigit+0x38>
c0001d1a:	66 90                	xchg   ax,ax
c0001d1c:	b8 01 00 00 00       	mov    eax,0x1
c0001d21:	c3                   	ret    
c0001d22:	66 90                	xchg   ax,ax
c0001d24:	b8 00 00 00 00       	mov    eax,0x0
c0001d29:	c3                   	ret    

c0001d2a <disk_status>:
c0001d2a:	31 c0                	xor    eax,eax
c0001d2c:	c3                   	ret    

c0001d2d <disk_initialize>:
c0001d2d:	31 c0                	xor    eax,eax
c0001d2f:	c3                   	ret    

c0001d30 <disk_read>:
c0001d30:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d35:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001d3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d41:	e9 46 6b 01 00       	jmp    c001888c <fatWrapperReadDisk>

c0001d46 <disk_write>:
c0001d46:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d4b:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001d53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d57:	e9 70 6b 01 00       	jmp    c00188cc <fatWrapperWriteDisk>

c0001d5c <disk_ioctl>:
c0001d5c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d65:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d6a:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001d72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d76:	e9 91 6b 01 00       	jmp    c001890c <fatWrapperIoctl>

c0001d7b <ld_word>:
c0001d7b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d7f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d82:	c1 e2 08             	shl    edx,0x8
c0001d85:	09 d0                	or     eax,edx
c0001d87:	c3                   	ret    

c0001d88 <ld_dword>:
c0001d88:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d8c:	89 d1                	mov    ecx,edx
c0001d8e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d92:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d95:	c1 e1 08             	shl    ecx,0x8
c0001d98:	09 ca                	or     edx,ecx
c0001d9a:	c1 e2 08             	shl    edx,0x8
c0001d9d:	09 d0                	or     eax,edx
c0001d9f:	c3                   	ret    

c0001da0 <st_word>:
c0001da0:	66 89 10             	mov    WORD PTR [eax],dx
c0001da3:	c3                   	ret    

c0001da4 <st_dword>:
c0001da4:	89 10                	mov    DWORD PTR [eax],edx
c0001da6:	c3                   	ret    

c0001da7 <mem_cpy>:
c0001da7:	85 c9                	test   ecx,ecx
c0001da9:	74 10                	je     c0001dbb <mem_cpy+0x14>
c0001dab:	57                   	push   edi
c0001dac:	01 c1                	add    ecx,eax
c0001dae:	89 c7                	mov    edi,eax
c0001db0:	56                   	push   esi
c0001db1:	89 d6                	mov    esi,edx
c0001db3:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001db4:	39 f9                	cmp    ecx,edi
c0001db6:	75 fb                	jne    c0001db3 <mem_cpy+0xc>
c0001db8:	5e                   	pop    esi
c0001db9:	5f                   	pop    edi
c0001dba:	c3                   	ret    
c0001dbb:	c3                   	ret    

c0001dbc <mem_set>:
c0001dbc:	01 c1                	add    ecx,eax
c0001dbe:	40                   	inc    eax
c0001dbf:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001dc2:	39 c8                	cmp    eax,ecx
c0001dc4:	75 f8                	jne    c0001dbe <mem_set+0x2>
c0001dc6:	c3                   	ret    

c0001dc7 <mem_cmp>:
c0001dc7:	57                   	push   edi
c0001dc8:	56                   	push   esi
c0001dc9:	89 c6                	mov    esi,eax
c0001dcb:	53                   	push   ebx
c0001dcc:	46                   	inc    esi
c0001dcd:	42                   	inc    edx
c0001dce:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001dd2:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001dd6:	29 fb                	sub    ebx,edi
c0001dd8:	89 cf                	mov    edi,ecx
c0001dda:	29 f7                	sub    edi,esi
c0001ddc:	01 c7                	add    edi,eax
c0001dde:	74 04                	je     c0001de4 <mem_cmp+0x1d>
c0001de0:	85 db                	test   ebx,ebx
c0001de2:	74 e8                	je     c0001dcc <mem_cmp+0x5>
c0001de4:	89 d8                	mov    eax,ebx
c0001de6:	5b                   	pop    ebx
c0001de7:	5e                   	pop    esi
c0001de8:	5f                   	pop    edi
c0001de9:	c3                   	ret    

c0001dea <chk_chr>:
c0001dea:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ded:	85 c9                	test   ecx,ecx
c0001def:	74 07                	je     c0001df8 <chk_chr+0xe>
c0001df1:	39 d1                	cmp    ecx,edx
c0001df3:	74 03                	je     c0001df8 <chk_chr+0xe>
c0001df5:	40                   	inc    eax
c0001df6:	eb f2                	jmp    c0001dea <chk_chr>
c0001df8:	89 c8                	mov    eax,ecx
c0001dfa:	c3                   	ret    

c0001dfb <dbc_1st>:
c0001dfb:	31 c0                	xor    eax,eax
c0001dfd:	c3                   	ret    

c0001dfe <dbc_2nd>:
c0001dfe:	31 c0                	xor    eax,eax
c0001e00:	c3                   	ret    

c0001e01 <tchar2uni>:
c0001e01:	57                   	push   edi
c0001e02:	56                   	push   esi
c0001e03:	53                   	push   ebx
c0001e04:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e06:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e08:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e0b:	f6 c1 80             	test   cl,0x80
c0001e0e:	75 0a                	jne    c0001e1a <tchar2uni+0x19>
c0001e10:	0f b6 d1             	movzx  edx,cl
c0001e13:	89 f3                	mov    ebx,esi
c0001e15:	e9 b2 00 00 00       	jmp    c0001ecc <tchar2uni+0xcb>
c0001e1a:	89 ca                	mov    edx,ecx
c0001e1c:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e22:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e28:	89 ca                	mov    edx,ecx
c0001e2a:	75 0a                	jne    c0001e36 <tchar2uni+0x35>
c0001e2c:	83 e2 1f             	and    edx,0x1f
c0001e2f:	b9 01 00 00 00       	mov    ecx,0x1
c0001e34:	eb 37                	jmp    c0001e6d <tchar2uni+0x6c>
c0001e36:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e3c:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e42:	75 0c                	jne    c0001e50 <tchar2uni+0x4f>
c0001e44:	89 ca                	mov    edx,ecx
c0001e46:	b9 02 00 00 00       	mov    ecx,0x2
c0001e4b:	83 e2 0f             	and    edx,0xf
c0001e4e:	eb 1d                	jmp    c0001e6d <tchar2uni+0x6c>
c0001e50:	89 cf                	mov    edi,ecx
c0001e52:	83 ca ff             	or     edx,0xffffffff
c0001e55:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001e5b:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001e61:	75 70                	jne    c0001ed3 <tchar2uni+0xd2>
c0001e63:	89 ca                	mov    edx,ecx
c0001e65:	b9 03 00 00 00       	mov    ecx,0x3
c0001e6a:	83 e2 07             	and    edx,0x7
c0001e6d:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e71:	46                   	inc    esi
c0001e72:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e75:	89 cf                	mov    edi,ecx
c0001e77:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001e7d:	83 c7 80             	add    edi,0xffffff80
c0001e80:	75 4e                	jne    c0001ed0 <tchar2uni+0xcf>
c0001e82:	c1 e2 06             	shl    edx,0x6
c0001e85:	83 e1 3f             	and    ecx,0x3f
c0001e88:	09 ca                	or     edx,ecx
c0001e8a:	39 de                	cmp    esi,ebx
c0001e8c:	75 e3                	jne    c0001e71 <tchar2uni+0x70>
c0001e8e:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e94:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e9a:	76 34                	jbe    c0001ed0 <tchar2uni+0xcf>
c0001e9c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e9f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ea5:	77 29                	ja     c0001ed0 <tchar2uni+0xcf>
c0001ea7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ead:	76 1d                	jbe    c0001ecc <tchar2uni+0xcb>
c0001eaf:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001eb5:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001ebb:	c1 e1 06             	shl    ecx,0x6
c0001ebe:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ec4:	09 ca                	or     edx,ecx
c0001ec6:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ecc:	89 18                	mov    DWORD PTR [eax],ebx
c0001ece:	eb 03                	jmp    c0001ed3 <tchar2uni+0xd2>
c0001ed0:	83 ca ff             	or     edx,0xffffffff
c0001ed3:	5b                   	pop    ebx
c0001ed4:	89 d0                	mov    eax,edx
c0001ed6:	5e                   	pop    esi
c0001ed7:	5f                   	pop    edi
c0001ed8:	c3                   	ret    

c0001ed9 <put_utf>:
c0001ed9:	83 f8 7f             	cmp    eax,0x7f
c0001edc:	53                   	push   ebx
c0001edd:	89 c3                	mov    ebx,eax
c0001edf:	b0 00                	mov    al,0x0
c0001ee1:	77 11                	ja     c0001ef4 <put_utf+0x1b>
c0001ee3:	85 c9                	test   ecx,ecx
c0001ee5:	0f 84 e5 00 00 00    	je     c0001fd0 <put_utf+0xf7>
c0001eeb:	88 1a                	mov    BYTE PTR [edx],bl
c0001eed:	b0 01                	mov    al,0x1
c0001eef:	e9 dc 00 00 00       	jmp    c0001fd0 <put_utf+0xf7>
c0001ef4:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001efa:	77 23                	ja     c0001f1f <put_utf+0x46>
c0001efc:	83 f9 01             	cmp    ecx,0x1
c0001eff:	0f 86 cb 00 00 00    	jbe    c0001fd0 <put_utf+0xf7>
c0001f05:	89 d8                	mov    eax,ebx
c0001f07:	83 e3 3f             	and    ebx,0x3f
c0001f0a:	c1 e8 06             	shr    eax,0x6
c0001f0d:	83 cb 80             	or     ebx,0xffffff80
c0001f10:	83 c8 c0             	or     eax,0xffffffc0
c0001f13:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f16:	88 02                	mov    BYTE PTR [edx],al
c0001f18:	b0 02                	mov    al,0x2
c0001f1a:	e9 b1 00 00 00       	jmp    c0001fd0 <put_utf+0xf7>
c0001f1f:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f25:	77 40                	ja     c0001f67 <put_utf+0x8e>
c0001f27:	83 f9 02             	cmp    ecx,0x2
c0001f2a:	0f 86 a0 00 00 00    	jbe    c0001fd0 <put_utf+0xf7>
c0001f30:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f36:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f3c:	0f 86 8e 00 00 00    	jbe    c0001fd0 <put_utf+0xf7>
c0001f42:	89 d8                	mov    eax,ebx
c0001f44:	c1 e8 0c             	shr    eax,0xc
c0001f47:	83 c8 e0             	or     eax,0xffffffe0
c0001f4a:	88 02                	mov    BYTE PTR [edx],al
c0001f4c:	89 d8                	mov    eax,ebx
c0001f4e:	83 e3 3f             	and    ebx,0x3f
c0001f51:	c1 e8 06             	shr    eax,0x6
c0001f54:	83 cb 80             	or     ebx,0xffffff80
c0001f57:	83 e0 3f             	and    eax,0x3f
c0001f5a:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001f5d:	83 c8 80             	or     eax,0xffffff80
c0001f60:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f63:	b0 03                	mov    al,0x3
c0001f65:	eb 69                	jmp    c0001fd0 <put_utf+0xf7>
c0001f67:	83 f9 03             	cmp    ecx,0x3
c0001f6a:	76 64                	jbe    c0001fd0 <put_utf+0xf7>
c0001f6c:	89 d9                	mov    ecx,ebx
c0001f6e:	0f b7 c3             	movzx  eax,bx
c0001f71:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f77:	66 31 c9             	xor    cx,cx
c0001f7a:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f80:	c1 e9 06             	shr    ecx,0x6
c0001f83:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f89:	77 43                	ja     c0001fce <put_utf+0xf5>
c0001f8b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f91:	77 3b                	ja     c0001fce <put_utf+0xf5>
c0001f93:	09 cb                	or     ebx,ecx
c0001f95:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f9b:	89 d8                	mov    eax,ebx
c0001f9d:	c1 e8 12             	shr    eax,0x12
c0001fa0:	83 c8 f0             	or     eax,0xfffffff0
c0001fa3:	88 02                	mov    BYTE PTR [edx],al
c0001fa5:	89 d8                	mov    eax,ebx
c0001fa7:	c1 e8 0c             	shr    eax,0xc
c0001faa:	83 e0 3f             	and    eax,0x3f
c0001fad:	83 c8 80             	or     eax,0xffffff80
c0001fb0:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fb3:	89 d8                	mov    eax,ebx
c0001fb5:	83 e3 3f             	and    ebx,0x3f
c0001fb8:	c1 e8 06             	shr    eax,0x6
c0001fbb:	83 cb 80             	or     ebx,0xffffff80
c0001fbe:	83 e0 3f             	and    eax,0x3f
c0001fc1:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001fc4:	83 c8 80             	or     eax,0xffffff80
c0001fc7:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001fca:	b0 04                	mov    al,0x4
c0001fcc:	eb 02                	jmp    c0001fd0 <put_utf+0xf7>
c0001fce:	31 c0                	xor    eax,eax
c0001fd0:	5b                   	pop    ebx
c0001fd1:	c3                   	ret    

c0001fd2 <clst2sect>:
c0001fd2:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001fd5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001fd8:	83 ea 02             	sub    edx,0x2
c0001fdb:	39 ca                	cmp    edx,ecx
c0001fdd:	76 0d                	jbe    c0001fec <clst2sect+0x1a>
c0001fdf:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001fe3:	0f af d1             	imul   edx,ecx
c0001fe6:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001fe9:	89 d0                	mov    eax,edx
c0001feb:	c3                   	ret    
c0001fec:	31 c0                	xor    eax,eax
c0001fee:	c3                   	ret    

c0001fef <pick_lfn>:
c0001fef:	55                   	push   ebp
c0001ff0:	57                   	push   edi
c0001ff1:	89 c7                	mov    edi,eax
c0001ff3:	56                   	push   esi
c0001ff4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001ff7:	53                   	push   ebx
c0001ff8:	89 d3                	mov    ebx,edx
c0001ffa:	e8 7c fd ff ff       	call   c0001d7b <ld_word>
c0001fff:	66 85 c0             	test   ax,ax
c0002002:	74 04                	je     c0002008 <pick_lfn+0x19>
c0002004:	31 c0                	xor    eax,eax
c0002006:	eb 62                	jmp    c000206a <pick_lfn+0x7b>
c0002008:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000200b:	bd 01 00 00 00       	mov    ebp,0x1
c0002010:	31 f6                	xor    esi,esi
c0002012:	83 e1 bf             	and    ecx,0xffffffbf
c0002015:	49                   	dec    ecx
c0002016:	6b c9 0d             	imul   ecx,ecx,0xd
c0002019:	0f b6 86 a0 f4 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0b60]
c0002020:	01 d8                	add    eax,ebx
c0002022:	e8 54 fd ff ff       	call   c0001d7b <ld_word>
c0002027:	66 85 ed             	test   bp,bp
c000202a:	74 11                	je     c000203d <pick_lfn+0x4e>
c000202c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002032:	77 d0                	ja     c0002004 <pick_lfn+0x15>
c0002034:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002038:	89 c5                	mov    ebp,eax
c000203a:	41                   	inc    ecx
c000203b:	eb 0a                	jmp    c0002047 <pick_lfn+0x58>
c000203d:	0f b7 c0             	movzx  eax,ax
c0002040:	3d ff ff 00 00       	cmp    eax,0xffff
c0002045:	75 bd                	jne    c0002004 <pick_lfn+0x15>
c0002047:	46                   	inc    esi
c0002048:	83 fe 0d             	cmp    esi,0xd
c000204b:	75 cc                	jne    c0002019 <pick_lfn+0x2a>
c000204d:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002050:	74 13                	je     c0002065 <pick_lfn+0x76>
c0002052:	66 85 ed             	test   bp,bp
c0002055:	74 0e                	je     c0002065 <pick_lfn+0x76>
c0002057:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000205d:	77 a5                	ja     c0002004 <pick_lfn+0x15>
c000205f:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c0002065:	b8 01 00 00 00       	mov    eax,0x1
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	5f                   	pop    edi
c000206d:	5d                   	pop    ebp
c000206e:	c3                   	ret    

c000206f <put_lfn>:
c000206f:	55                   	push   ebp
c0002070:	57                   	push   edi
c0002071:	31 ff                	xor    edi,edi
c0002073:	56                   	push   esi
c0002074:	89 d6                	mov    esi,edx
c0002076:	53                   	push   ebx
c0002077:	31 db                	xor    ebx,ebx
c0002079:	83 ec 0c             	sub    esp,0xc
c000207c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000207f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002083:	8a 04 24             	mov    al,BYTE PTR [esp]
c0002086:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000208a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000208e:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002094:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002097:	8d 42 1a             	lea    eax,[edx+0x1a]
c000209a:	31 d2                	xor    edx,edx
c000209c:	e8 ff fc ff ff       	call   c0001da0 <st_word>
c00020a1:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c00020a5:	49                   	dec    ecx
c00020a6:	6b c9 0d             	imul   ecx,ecx,0xd
c00020a9:	0f b7 c3             	movzx  eax,bx
c00020ac:	3d ff ff 00 00       	cmp    eax,0xffff
c00020b1:	74 09                	je     c00020bc <put_lfn+0x4d>
c00020b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00020b7:	0f b7 1c 48          	movzx  ebx,WORD PTR [eax+ecx*2]
c00020bb:	41                   	inc    ecx
c00020bc:	0f b6 87 a0 f4 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0b60]
c00020c3:	0f b7 eb             	movzx  ebp,bx
c00020c6:	89 ea                	mov    edx,ebp
c00020c8:	01 f0                	add    eax,esi
c00020ca:	e8 d1 fc ff ff       	call   c0001da0 <st_word>
c00020cf:	85 ed                	test   ebp,ebp
c00020d1:	75 05                	jne    c00020d8 <put_lfn+0x69>
c00020d3:	bb ff ff 00 00       	mov    ebx,0xffff
c00020d8:	47                   	inc    edi
c00020d9:	83 ff 0d             	cmp    edi,0xd
c00020dc:	75 cb                	jne    c00020a9 <put_lfn+0x3a>
c00020de:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c00020e4:	74 0b                	je     c00020f1 <put_lfn+0x82>
c00020e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00020ea:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c00020ef:	75 0a                	jne    c00020fb <put_lfn+0x8c>
c00020f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00020f4:	83 c8 40             	or     eax,0x40
c00020f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00020fb:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00020ff:	88 06                	mov    BYTE PTR [esi],al
c0002101:	83 c4 0c             	add    esp,0xc
c0002104:	5b                   	pop    ebx
c0002105:	5e                   	pop    esi
c0002106:	5f                   	pop    edi
c0002107:	5d                   	pop    ebp
c0002108:	c3                   	ret    

c0002109 <gen_numname>:
c0002109:	57                   	push   edi
c000210a:	89 cf                	mov    edi,ecx
c000210c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002111:	56                   	push   esi
c0002112:	89 c6                	mov    esi,eax
c0002114:	53                   	push   ebx
c0002115:	83 ec 10             	sub    esp,0x10
c0002118:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000211c:	e8 86 fc ff ff       	call   c0001da7 <mem_cpy>
c0002121:	83 fb 05             	cmp    ebx,0x5
c0002124:	76 30                	jbe    c0002156 <gen_numname+0x4d>
c0002126:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002129:	66 85 c0             	test   ax,ax
c000212c:	74 28                	je     c0002156 <gen_numname+0x4d>
c000212e:	83 c7 02             	add    edi,0x2
c0002131:	ba 10 00 00 00       	mov    edx,0x10
c0002136:	89 c1                	mov    ecx,eax
c0002138:	01 db                	add    ebx,ebx
c000213a:	c1 e0 10             	shl    eax,0x10
c000213d:	83 e1 01             	and    ecx,0x1
c0002140:	c1 e8 11             	shr    eax,0x11
c0002143:	01 cb                	add    ebx,ecx
c0002145:	0f ba e3 10          	bt     ebx,0x10
c0002149:	73 06                	jae    c0002151 <gen_numname+0x48>
c000214b:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002151:	4a                   	dec    edx
c0002152:	75 e2                	jne    c0002136 <gen_numname+0x2d>
c0002154:	eb d0                	jmp    c0002126 <gen_numname+0x1d>
c0002156:	b8 07 00 00 00       	mov    eax,0x7
c000215b:	89 d9                	mov    ecx,ebx
c000215d:	83 e1 0f             	and    ecx,0xf
c0002160:	8d 79 30             	lea    edi,[ecx+0x30]
c0002163:	83 ff 39             	cmp    edi,0x39
c0002166:	89 fa                	mov    edx,edi
c0002168:	76 03                	jbe    c000216d <gen_numname+0x64>
c000216a:	8d 51 37             	lea    edx,[ecx+0x37]
c000216d:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002170:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002174:	89 da                	mov    edx,ebx
c0002176:	c1 ea 04             	shr    edx,0x4
c0002179:	83 fb 0f             	cmp    ebx,0xf
c000217c:	76 06                	jbe    c0002184 <gen_numname+0x7b>
c000217e:	89 c8                	mov    eax,ecx
c0002180:	89 d3                	mov    ebx,edx
c0002182:	eb d7                	jmp    c000215b <gen_numname+0x52>
c0002184:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002189:	8d 58 fe             	lea    ebx,[eax-0x2]
c000218c:	31 d2                	xor    edx,edx
c000218e:	8d 04 16             	lea    eax,[esi+edx*1]
c0002191:	39 ca                	cmp    edx,ecx
c0002193:	73 19                	jae    c00021ae <gen_numname+0xa5>
c0002195:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002198:	83 f8 20             	cmp    eax,0x20
c000219b:	74 11                	je     c00021ae <gen_numname+0xa5>
c000219d:	e8 59 fc ff ff       	call   c0001dfb <dbc_1st>
c00021a2:	85 c0                	test   eax,eax
c00021a4:	74 05                	je     c00021ab <gen_numname+0xa2>
c00021a6:	39 d3                	cmp    ebx,edx
c00021a8:	74 04                	je     c00021ae <gen_numname+0xa5>
c00021aa:	42                   	inc    edx
c00021ab:	42                   	inc    edx
c00021ac:	eb e0                	jmp    c000218e <gen_numname+0x85>
c00021ae:	83 f9 07             	cmp    ecx,0x7
c00021b1:	b0 20                	mov    al,0x20
c00021b3:	77 05                	ja     c00021ba <gen_numname+0xb1>
c00021b5:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00021b9:	41                   	inc    ecx
c00021ba:	42                   	inc    edx
c00021bb:	83 fa 07             	cmp    edx,0x7
c00021be:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00021c2:	76 ea                	jbe    c00021ae <gen_numname+0xa5>
c00021c4:	83 c4 10             	add    esp,0x10
c00021c7:	5b                   	pop    ebx
c00021c8:	5e                   	pop    esi
c00021c9:	5f                   	pop    edi
c00021ca:	c3                   	ret    

c00021cb <sum_sfn>:
c00021cb:	53                   	push   ebx
c00021cc:	31 c9                	xor    ecx,ecx
c00021ce:	31 db                	xor    ebx,ebx
c00021d0:	0f b6 d1             	movzx  edx,cl
c00021d3:	c1 e1 07             	shl    ecx,0x7
c00021d6:	d1 ea                	shr    edx,1
c00021d8:	09 ca                	or     edx,ecx
c00021da:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c00021dd:	43                   	inc    ebx
c00021de:	01 ca                	add    edx,ecx
c00021e0:	83 fb 0b             	cmp    ebx,0xb
c00021e3:	88 d1                	mov    cl,dl
c00021e5:	75 e9                	jne    c00021d0 <sum_sfn+0x5>
c00021e7:	88 d0                	mov    al,dl
c00021e9:	5b                   	pop    ebx
c00021ea:	c3                   	ret    

c00021eb <get_ldnumber>:
c00021eb:	55                   	push   ebp
c00021ec:	57                   	push   edi
c00021ed:	56                   	push   esi
c00021ee:	83 ce ff             	or     esi,0xffffffff
c00021f1:	53                   	push   ebx
c00021f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00021f4:	85 d2                	test   edx,edx
c00021f6:	74 38                	je     c0002230 <get_ldnumber+0x45>
c00021f8:	89 c5                	mov    ebp,eax
c00021fa:	89 d1                	mov    ecx,edx
c00021fc:	41                   	inc    ecx
c00021fd:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002201:	80 fb 1f             	cmp    bl,0x1f
c0002204:	76 05                	jbe    c000220b <get_ldnumber+0x20>
c0002206:	83 fb 3a             	cmp    ebx,0x3a
c0002209:	75 f1                	jne    c00021fc <get_ldnumber+0x11>
c000220b:	31 f6                	xor    esi,esi
c000220d:	83 fb 3a             	cmp    ebx,0x3a
c0002210:	75 1e                	jne    c0002230 <get_ldnumber+0x45>
c0002212:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002214:	83 ce ff             	or     esi,0xffffffff
c0002217:	8d 7b d0             	lea    edi,[ebx-0x30]
c000221a:	89 f8                	mov    eax,edi
c000221c:	3c 09                	cmp    al,0x9
c000221e:	77 10                	ja     c0002230 <get_ldnumber+0x45>
c0002220:	83 c2 02             	add    edx,0x2
c0002223:	39 d1                	cmp    ecx,edx
c0002225:	75 09                	jne    c0002230 <get_ldnumber+0x45>
c0002227:	0f be f3             	movsx  esi,bl
c000222a:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000222d:	83 ee 30             	sub    esi,0x30
c0002230:	5b                   	pop    ebx
c0002231:	89 f0                	mov    eax,esi
c0002233:	5e                   	pop    esi
c0002234:	5f                   	pop    edi
c0002235:	5d                   	pop    ebp
c0002236:	c3                   	ret    

c0002237 <validate>:
c0002237:	85 c0                	test   eax,eax
c0002239:	56                   	push   esi
c000223a:	89 d6                	mov    esi,edx
c000223c:	53                   	push   ebx
c000223d:	51                   	push   ecx
c000223e:	75 09                	jne    c0002249 <validate+0x12>
c0002240:	b8 09 00 00 00       	mov    eax,0x9
c0002245:	31 c9                	xor    ecx,ecx
c0002247:	eb 2e                	jmp    c0002277 <validate+0x40>
c0002249:	89 c3                	mov    ebx,eax
c000224b:	8b 00                	mov    eax,DWORD PTR [eax]
c000224d:	85 c0                	test   eax,eax
c000224f:	74 ef                	je     c0002240 <validate+0x9>
c0002251:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002254:	74 ea                	je     c0002240 <validate+0x9>
c0002256:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0002259:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c000225d:	75 e1                	jne    c0002240 <validate+0x9>
c000225f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002263:	83 ec 0c             	sub    esp,0xc
c0002266:	50                   	push   eax
c0002267:	e8 be fa ff ff       	call   c0001d2a <disk_status>
c000226c:	83 c4 10             	add    esp,0x10
c000226f:	a8 01                	test   al,0x1
c0002271:	75 cd                	jne    c0002240 <validate+0x9>
c0002273:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002275:	31 c0                	xor    eax,eax
c0002277:	89 0e                	mov    DWORD PTR [esi],ecx
c0002279:	5a                   	pop    edx
c000227a:	5b                   	pop    ebx
c000227b:	5e                   	pop    esi
c000227c:	c3                   	ret    

c000227d <sync_window>:
c000227d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002281:	74 58                	je     c00022db <sync_window+0x5e>
c0002283:	56                   	push   esi
c0002284:	8d 70 34             	lea    esi,[eax+0x34]
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	51                   	push   ecx
c000228b:	6a 01                	push   0x1
c000228d:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002290:	56                   	push   esi
c0002291:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002295:	50                   	push   eax
c0002296:	e8 ab fa ff ff       	call   c0001d46 <disk_write>
c000229b:	83 c4 10             	add    esp,0x10
c000229e:	ba 01 00 00 00       	mov    edx,0x1
c00022a3:	85 c0                	test   eax,eax
c00022a5:	75 2e                	jne    c00022d5 <sync_window+0x58>
c00022a7:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00022aa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022ae:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00022b1:	89 c1                	mov    ecx,eax
c00022b3:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00022b6:	39 d1                	cmp    ecx,edx
c00022b8:	73 19                	jae    c00022d3 <sync_window+0x56>
c00022ba:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00022be:	75 13                	jne    c00022d3 <sync_window+0x56>
c00022c0:	01 d0                	add    eax,edx
c00022c2:	6a 01                	push   0x1
c00022c4:	50                   	push   eax
c00022c5:	56                   	push   esi
c00022c6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00022ca:	50                   	push   eax
c00022cb:	e8 76 fa ff ff       	call   c0001d46 <disk_write>
c00022d0:	83 c4 10             	add    esp,0x10
c00022d3:	31 d2                	xor    edx,edx
c00022d5:	89 d0                	mov    eax,edx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    
c00022db:	31 d2                	xor    edx,edx
c00022dd:	89 d0                	mov    eax,edx
c00022df:	c3                   	ret    

c00022e0 <move_window>:
c00022e0:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c00022e3:	74 3a                	je     c000231f <move_window+0x3f>
c00022e5:	56                   	push   esi
c00022e6:	89 d6                	mov    esi,edx
c00022e8:	53                   	push   ebx
c00022e9:	89 c3                	mov    ebx,eax
c00022eb:	51                   	push   ecx
c00022ec:	e8 8c ff ff ff       	call   c000227d <sync_window>
c00022f1:	85 c0                	test   eax,eax
c00022f3:	75 2d                	jne    c0002322 <move_window+0x42>
c00022f5:	8d 43 34             	lea    eax,[ebx+0x34]
c00022f8:	6a 01                	push   0x1
c00022fa:	56                   	push   esi
c00022fb:	50                   	push   eax
c00022fc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002300:	50                   	push   eax
c0002301:	e8 2a fa ff ff       	call   c0001d30 <disk_read>
c0002306:	83 c4 10             	add    esp,0x10
c0002309:	89 c2                	mov    edx,eax
c000230b:	31 c0                	xor    eax,eax
c000230d:	85 d2                	test   edx,edx
c000230f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002314:	0f 45 f2             	cmovne esi,edx
c0002317:	0f 95 c0             	setne  al
c000231a:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c000231d:	eb 03                	jmp    c0002322 <move_window+0x42>
c000231f:	31 c0                	xor    eax,eax
c0002321:	c3                   	ret    
c0002322:	5a                   	pop    edx
c0002323:	5b                   	pop    ebx
c0002324:	5e                   	pop    esi
c0002325:	c3                   	ret    

c0002326 <check_fs>:
c0002326:	53                   	push   ebx
c0002327:	89 c3                	mov    ebx,eax
c0002329:	83 ec 08             	sub    esp,0x8
c000232c:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002330:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002337:	e8 a4 ff ff ff       	call   c00022e0 <move_window>
c000233c:	ba 04 00 00 00       	mov    edx,0x4
c0002341:	85 c0                	test   eax,eax
c0002343:	75 68                	jne    c00023ad <check_fs+0x87>
c0002345:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000234b:	e8 2b fa ff ff       	call   c0001d7b <ld_word>
c0002350:	ba 03 00 00 00       	mov    edx,0x3
c0002355:	66 3d 55 aa          	cmp    ax,0xaa55
c0002359:	75 52                	jne    c00023ad <check_fs+0x87>
c000235b:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c000235e:	8d 50 18             	lea    edx,[eax+0x18]
c0002361:	80 fa 01             	cmp    dl,0x1
c0002364:	76 09                	jbe    c000236f <check_fs+0x49>
c0002366:	3c eb                	cmp    al,0xeb
c0002368:	ba 02 00 00 00       	mov    edx,0x2
c000236d:	75 3e                	jne    c00023ad <check_fs+0x87>
c000236f:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002372:	ba a8 15 02 c0       	mov    edx,0xc00215a8
c0002377:	b9 03 00 00 00       	mov    ecx,0x3
c000237c:	e8 46 fa ff ff       	call   c0001dc7 <mem_cmp>
c0002381:	31 d2                	xor    edx,edx
c0002383:	85 c0                	test   eax,eax
c0002385:	74 26                	je     c00023ad <check_fs+0x87>
c0002387:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000238d:	ba 5c f3 01 c0       	mov    edx,0xc001f35c
c0002392:	b9 05 00 00 00       	mov    ecx,0x5
c0002397:	e8 2b fa ff ff       	call   c0001dc7 <mem_cmp>
c000239c:	31 d2                	xor    edx,edx
c000239e:	85 c0                	test   eax,eax
c00023a0:	74 0b                	je     c00023ad <check_fs+0x87>
c00023a2:	31 d2                	xor    edx,edx
c00023a4:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00023a8:	0f 95 c2             	setne  dl
c00023ab:	01 d2                	add    edx,edx
c00023ad:	83 c4 08             	add    esp,0x8
c00023b0:	89 d0                	mov    eax,edx
c00023b2:	5b                   	pop    ebx
c00023b3:	c3                   	ret    

c00023b4 <find_volume>:
c00023b4:	55                   	push   ebp
c00023b5:	57                   	push   edi
c00023b6:	56                   	push   esi
c00023b7:	89 c6                	mov    esi,eax
c00023b9:	53                   	push   ebx
c00023ba:	89 d3                	mov    ebx,edx
c00023bc:	31 d2                	xor    edx,edx
c00023be:	83 ec 2c             	sub    esp,0x2c
c00023c1:	e8 60 ff ff ff       	call   c0002326 <check_fs>
c00023c6:	85 db                	test   ebx,ebx
c00023c8:	0f 94 c2             	sete   dl
c00023cb:	83 f8 02             	cmp    eax,0x2
c00023ce:	74 07                	je     c00023d7 <find_volume+0x23>
c00023d0:	77 63                	ja     c0002435 <find_volume+0x81>
c00023d2:	f6 c2 01             	test   dl,0x1
c00023d5:	75 5e                	jne    c0002435 <find_volume+0x81>
c00023d7:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c00023dd:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c00023e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00023e7:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00023eb:	89 f8                	mov    eax,edi
c00023ed:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00023f1:	83 c7 10             	add    edi,0x10
c00023f4:	83 c5 04             	add    ebp,0x4
c00023f7:	e8 8c f9 ff ff       	call   c0001d88 <ld_dword>
c00023fc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002400:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002403:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0002407:	75 e2                	jne    c00023eb <find_volume+0x37>
c0002409:	83 fb 01             	cmp    ebx,0x1
c000240c:	0f b6 fa             	movzx  edi,dl
c000240f:	83 d3 ff             	adc    ebx,0xffffffff
c0002412:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c0002416:	b8 03 00 00 00       	mov    eax,0x3
c000241b:	85 d2                	test   edx,edx
c000241d:	74 07                	je     c0002426 <find_volume+0x72>
c000241f:	89 f0                	mov    eax,esi
c0002421:	e8 00 ff ff ff       	call   c0002326 <check_fs>
c0002426:	83 f8 01             	cmp    eax,0x1
c0002429:	76 0a                	jbe    c0002435 <find_volume+0x81>
c000242b:	85 ff                	test   edi,edi
c000242d:	74 06                	je     c0002435 <find_volume+0x81>
c000242f:	43                   	inc    ebx
c0002430:	83 fb 03             	cmp    ebx,0x3
c0002433:	76 dd                	jbe    c0002412 <find_volume+0x5e>
c0002435:	83 c4 2c             	add    esp,0x2c
c0002438:	5b                   	pop    ebx
c0002439:	5e                   	pop    esi
c000243a:	5f                   	pop    edi
c000243b:	5d                   	pop    ebp
c000243c:	c3                   	ret    

c000243d <mount_volume>:
c000243d:	55                   	push   ebp
c000243e:	89 d5                	mov    ebp,edx
c0002440:	57                   	push   edi
c0002441:	56                   	push   esi
c0002442:	be 0b 00 00 00       	mov    esi,0xb
c0002447:	53                   	push   ebx
c0002448:	83 ec 2c             	sub    esp,0x2c
c000244b:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002451:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002455:	e8 91 fd ff ff       	call   c00021eb <get_ldnumber>
c000245a:	85 c0                	test   eax,eax
c000245c:	0f 88 d6 02 00 00    	js     c0002738 <mount_volume+0x2fb>
c0002462:	8b 1c 85 a0 44 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdbb60]
c0002469:	89 c7                	mov    edi,eax
c000246b:	be 0c 00 00 00       	mov    esi,0xc
c0002470:	85 db                	test   ebx,ebx
c0002472:	0f 84 c0 02 00 00    	je     c0002738 <mount_volume+0x2fb>
c0002478:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000247c:	89 5d 00             	mov    DWORD PTR [ebp+0x0],ebx
c000247f:	83 e1 fe             	and    ecx,0xfffffffe
c0002482:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0002485:	89 cd                	mov    ebp,ecx
c0002487:	74 34                	je     c00024bd <mount_volume+0x80>
c0002489:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000248d:	83 ec 0c             	sub    esp,0xc
c0002490:	50                   	push   eax
c0002491:	e8 94 f8 ff ff       	call   c0001d2a <disk_status>
c0002496:	83 c4 10             	add    esp,0x10
c0002499:	a8 01                	test   al,0x1
c000249b:	75 20                	jne    c00024bd <mount_volume+0x80>
c000249d:	31 f6                	xor    esi,esi
c000249f:	81 e5 fe 00 00 00    	and    ebp,0xfe
c00024a5:	0f 84 8d 02 00 00    	je     c0002738 <mount_volume+0x2fb>
c00024ab:	a8 04                	test   al,0x4
c00024ad:	0f 84 85 02 00 00    	je     c0002738 <mount_volume+0x2fb>
c00024b3:	be 0a 00 00 00       	mov    esi,0xa
c00024b8:	e9 7b 02 00 00       	jmp    c0002738 <mount_volume+0x2fb>
c00024bd:	89 f8                	mov    eax,edi
c00024bf:	83 ec 0c             	sub    esp,0xc
c00024c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00024c5:	be 03 00 00 00       	mov    esi,0x3
c00024ca:	0f b6 f8             	movzx  edi,al
c00024cd:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c00024d0:	57                   	push   edi
c00024d1:	e8 57 f8 ff ff       	call   c0001d2d <disk_initialize>
c00024d6:	83 c4 10             	add    esp,0x10
c00024d9:	a8 01                	test   al,0x1
c00024db:	0f 85 57 02 00 00    	jne    c0002738 <mount_volume+0x2fb>
c00024e1:	81 e5 fe 00 00 00    	and    ebp,0xfe
c00024e7:	74 04                	je     c00024ed <mount_volume+0xb0>
c00024e9:	a8 04                	test   al,0x4
c00024eb:	75 c6                	jne    c00024b3 <mount_volume+0x76>
c00024ed:	31 d2                	xor    edx,edx
c00024ef:	89 d8                	mov    eax,ebx
c00024f1:	be 01 00 00 00       	mov    esi,0x1
c00024f6:	e8 b9 fe ff ff       	call   c00023b4 <find_volume>
c00024fb:	83 f8 04             	cmp    eax,0x4
c00024fe:	0f 84 34 02 00 00    	je     c0002738 <mount_volume+0x2fb>
c0002504:	83 f8 01             	cmp    eax,0x1
c0002507:	76 0a                	jbe    c0002513 <mount_volume+0xd6>
c0002509:	be 0d 00 00 00       	mov    esi,0xd
c000250e:	e9 25 02 00 00       	jmp    c0002738 <mount_volume+0x2fb>
c0002513:	8d 43 3f             	lea    eax,[ebx+0x3f]
c0002516:	e8 60 f8 ff ff       	call   c0001d7b <ld_word>
c000251b:	66 3d 00 02          	cmp    ax,0x200
c000251f:	75 e8                	jne    c0002509 <mount_volume+0xcc>
c0002521:	8d 43 4a             	lea    eax,[ebx+0x4a]
c0002524:	e8 52 f8 ff ff       	call   c0001d7b <ld_word>
c0002529:	0f b7 f8             	movzx  edi,ax
c000252c:	85 ff                	test   edi,edi
c000252e:	75 0a                	jne    c000253a <mount_volume+0xfd>
c0002530:	8d 43 58             	lea    eax,[ebx+0x58]
c0002533:	e8 50 f8 ff ff       	call   c0001d88 <ld_dword>
c0002538:	89 c7                	mov    edi,eax
c000253a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000253d:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0002540:	8b 6b 44             	mov    ebp,DWORD PTR [ebx+0x44]
c0002543:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002547:	89 e8                	mov    eax,ebp
c0002549:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c000254c:	8d 45 ff             	lea    eax,[ebp-0x1]
c000254f:	3c 01                	cmp    al,0x1
c0002551:	77 b6                	ja     c0002509 <mount_volume+0xcc>
c0002553:	0f b6 53 41          	movzx  edx,BYTE PTR [ebx+0x41]
c0002557:	66 85 d2             	test   dx,dx
c000255a:	66 89 53 0a          	mov    WORD PTR [ebx+0xa],dx
c000255e:	74 a9                	je     c0002509 <mount_volume+0xcc>
c0002560:	0f b6 f2             	movzx  esi,dl
c0002563:	c4 e2 78 f3 ce       	blsr   eax,esi
c0002568:	75 9f                	jne    c0002509 <mount_volume+0xcc>
c000256a:	8d 43 45             	lea    eax,[ebx+0x45]
c000256d:	e8 09 f8 ff ff       	call   c0001d7b <ld_word>
c0002572:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0002577:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000257c:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002580:	75 87                	jne    c0002509 <mount_volume+0xcc>
c0002582:	8d 43 47             	lea    eax,[ebx+0x47]
c0002585:	e8 f1 f7 ff ff       	call   c0001d7b <ld_word>
c000258a:	0f b7 d0             	movzx  edx,ax
c000258d:	85 d2                	test   edx,edx
c000258f:	75 0a                	jne    c000259b <mount_volume+0x15e>
c0002591:	8d 43 54             	lea    eax,[ebx+0x54]
c0002594:	e8 ef f7 ff ff       	call   c0001d88 <ld_dword>
c0002599:	89 c2                	mov    edx,eax
c000259b:	8d 43 42             	lea    eax,[ebx+0x42]
c000259e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025a2:	e8 d4 f7 ff ff       	call   c0001d7b <ld_word>
c00025a7:	0f b7 c0             	movzx  eax,ax
c00025aa:	85 c0                	test   eax,eax
c00025ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025b0:	0f 84 53 ff ff ff    	je     c0002509 <mount_volume+0xcc>
c00025b6:	89 e8                	mov    eax,ebp
c00025b8:	0f b7 4c 24 0c       	movzx  ecx,WORD PTR [esp+0xc]
c00025bd:	0f b6 e8             	movzx  ebp,al
c00025c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00025c4:	0f af ef             	imul   ebp,edi
c00025c7:	c1 e9 04             	shr    ecx,0x4
c00025ca:	01 e9                	add    ecx,ebp
c00025cc:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c00025d0:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00025d4:	39 ca                	cmp    edx,ecx
c00025d6:	0f 82 2d ff ff ff    	jb     c0002509 <mount_volume+0xcc>
c00025dc:	29 ca                	sub    edx,ecx
c00025de:	89 d5                	mov    ebp,edx
c00025e0:	89 d0                	mov    eax,edx
c00025e2:	31 d2                	xor    edx,edx
c00025e4:	f7 f6                	div    esi
c00025e6:	39 f5                	cmp    ebp,esi
c00025e8:	0f 82 1b ff ff ff    	jb     c0002509 <mount_volume+0xcc>
c00025ee:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025f3:	0f 87 10 ff ff ff    	ja     c0002509 <mount_volume+0xcc>
c00025f9:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00025fe:	0f 86 25 01 00 00    	jbe    c0002729 <mount_volume+0x2ec>
c0002604:	be 03 00 00 00       	mov    esi,0x3
c0002609:	8d 68 02             	lea    ebp,[eax+0x2]
c000260c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002610:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0002614:	89 6b 18             	mov    DWORD PTR [ebx+0x18],ebp
c0002617:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000261a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000261e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002622:	83 fe 03             	cmp    esi,0x3
c0002625:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002628:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000262b:	75 25                	jne    c0002652 <mount_volume+0x215>
c000262d:	8d 43 5e             	lea    eax,[ebx+0x5e]
c0002630:	e8 46 f7 ff ff       	call   c0001d7b <ld_word>
c0002635:	0b 44 24 0c          	or     eax,DWORD PTR [esp+0xc]
c0002639:	66 85 c0             	test   ax,ax
c000263c:	0f 85 c7 fe ff ff    	jne    c0002509 <mount_volume+0xcc>
c0002642:	8d 43 60             	lea    eax,[ebx+0x60]
c0002645:	c1 e5 02             	shl    ebp,0x2
c0002648:	e8 3b f7 ff ff       	call   c0001d88 <ld_dword>
c000264d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0002650:	eb 28                	jmp    c000267a <mount_volume+0x23d>
c0002652:	66 83 7c 24 0c 00    	cmp    WORD PTR [esp+0xc],0x0
c0002658:	0f 84 ab fe ff ff    	je     c0002509 <mount_volume+0xcc>
c000265e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002662:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c0002666:	d1 ea                	shr    edx,1
c0002668:	8d 4c 2d 00          	lea    ecx,[ebp+ebp*1+0x0]
c000266c:	83 e5 01             	and    ebp,0x1
c000266f:	01 d5                	add    ebp,edx
c0002671:	83 fe 02             	cmp    esi,0x2
c0002674:	0f 44 e9             	cmove  ebp,ecx
c0002677:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000267a:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002680:	c1 ed 09             	shr    ebp,0x9
c0002683:	39 fd                	cmp    ebp,edi
c0002685:	0f 87 7e fe ff ff    	ja     c0002509 <mount_volume+0xcc>
c000268b:	83 fe 03             	cmp    esi,0x3
c000268e:	c7 43 14 ff ff ff ff 	mov    DWORD PTR [ebx+0x14],0xffffffff
c0002695:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c000269c:	c6 43 04 80          	mov    BYTE PTR [ebx+0x4],0x80
c00026a0:	75 6e                	jne    c0002710 <mount_volume+0x2d3>
c00026a2:	8d 43 64             	lea    eax,[ebx+0x64]
c00026a5:	e8 d1 f6 ff ff       	call   c0001d7b <ld_word>
c00026aa:	66 48                	dec    ax
c00026ac:	75 62                	jne    c0002710 <mount_volume+0x2d3>
c00026ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00026b2:	89 d8                	mov    eax,ebx
c00026b4:	42                   	inc    edx
c00026b5:	e8 26 fc ff ff       	call   c00022e0 <move_window>
c00026ba:	85 c0                	test   eax,eax
c00026bc:	75 52                	jne    c0002710 <mount_volume+0x2d3>
c00026be:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00026c2:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00026c8:	e8 ae f6 ff ff       	call   c0001d7b <ld_word>
c00026cd:	66 3d 55 aa          	cmp    ax,0xaa55
c00026d1:	75 3d                	jne    c0002710 <mount_volume+0x2d3>
c00026d3:	8d 43 34             	lea    eax,[ebx+0x34]
c00026d6:	e8 ad f6 ff ff       	call   c0001d88 <ld_dword>
c00026db:	3d 52 52 61 41       	cmp    eax,0x41615252
c00026e0:	75 2e                	jne    c0002710 <mount_volume+0x2d3>
c00026e2:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c00026e8:	e8 9b f6 ff ff       	call   c0001d88 <ld_dword>
c00026ed:	3d 72 72 41 61       	cmp    eax,0x61417272
c00026f2:	75 1c                	jne    c0002710 <mount_volume+0x2d3>
c00026f4:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c00026fa:	e8 89 f6 ff ff       	call   c0001d88 <ld_dword>
c00026ff:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0002702:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002708:	e8 7b f6 ff ff       	call   c0001d88 <ld_dword>
c000270d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0002710:	89 f0                	mov    eax,esi
c0002712:	31 f6                	xor    esi,esi
c0002714:	88 03                	mov    BYTE PTR [ebx],al
c0002716:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c000271c:	40                   	inc    eax
c000271d:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c0002723:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0002727:	eb 0f                	jmp    c0002738 <mount_volume+0x2fb>
c0002729:	3d f6 0f 00 00       	cmp    eax,0xff6
c000272e:	19 f6                	sbb    esi,esi
c0002730:	83 c6 02             	add    esi,0x2
c0002733:	e9 d1 fe ff ff       	jmp    c0002609 <mount_volume+0x1cc>
c0002738:	83 c4 2c             	add    esp,0x2c
c000273b:	89 f0                	mov    eax,esi
c000273d:	5b                   	pop    ebx
c000273e:	5e                   	pop    esi
c000273f:	5f                   	pop    edi
c0002740:	5d                   	pop    ebp
c0002741:	c3                   	ret    

c0002742 <put_fat>:
c0002742:	55                   	push   ebp
c0002743:	bd 02 00 00 00       	mov    ebp,0x2
c0002748:	57                   	push   edi
c0002749:	56                   	push   esi
c000274a:	53                   	push   ebx
c000274b:	83 ec 1c             	sub    esp,0x1c
c000274e:	83 fa 01             	cmp    edx,0x1
c0002751:	0f 86 38 01 00 00    	jbe    c000288f <put_fat+0x14d>
c0002757:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000275a:	0f 86 2f 01 00 00    	jbe    c000288f <put_fat+0x14d>
c0002760:	89 c6                	mov    esi,eax
c0002762:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002765:	89 cf                	mov    edi,ecx
c0002767:	89 d3                	mov    ebx,edx
c0002769:	83 f8 02             	cmp    eax,0x2
c000276c:	0f 84 b1 00 00 00    	je     c0002823 <put_fat+0xe1>
c0002772:	83 f8 03             	cmp    eax,0x3
c0002775:	0f 84 d5 00 00 00    	je     c0002850 <put_fat+0x10e>
c000277b:	48                   	dec    eax
c000277c:	0f 85 0d 01 00 00    	jne    c000288f <put_fat+0x14d>
c0002782:	89 d1                	mov    ecx,edx
c0002784:	89 f0                	mov    eax,esi
c0002786:	d1 e9                	shr    ecx,1
c0002788:	01 d1                	add    ecx,edx
c000278a:	89 ca                	mov    edx,ecx
c000278c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002790:	c1 ea 09             	shr    edx,0x9
c0002793:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002796:	e8 45 fb ff ff       	call   c00022e0 <move_window>
c000279b:	85 c0                	test   eax,eax
c000279d:	89 c5                	mov    ebp,eax
c000279f:	0f 85 ea 00 00 00    	jne    c000288f <put_fat+0x14d>
c00027a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027a9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027b0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027b3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027b9:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00027bd:	83 e3 01             	and    ebx,0x1
c00027c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027c4:	89 f8                	mov    eax,edi
c00027c6:	74 11                	je     c00027d9 <put_fat+0x97>
c00027c8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00027ca:	89 f8                	mov    eax,edi
c00027cc:	c1 e0 04             	shl    eax,0x4
c00027cf:	25 f0 0f 00 00       	and    eax,0xff0
c00027d4:	83 e2 0f             	and    edx,0xf
c00027d7:	09 d0                	or     eax,edx
c00027d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027dd:	88 01                	mov    BYTE PTR [ecx],al
c00027df:	89 f0                	mov    eax,esi
c00027e1:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027e5:	c1 ea 09             	shr    edx,0x9
c00027e8:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027eb:	e8 f0 fa ff ff       	call   c00022e0 <move_window>
c00027f0:	85 c0                	test   eax,eax
c00027f2:	89 c5                	mov    ebp,eax
c00027f4:	0f 85 95 00 00 00    	jne    c000288f <put_fat+0x14d>
c00027fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027fe:	25 ff 01 00 00       	and    eax,0x1ff
c0002803:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002807:	85 db                	test   ebx,ebx
c0002809:	74 07                	je     c0002812 <put_fat+0xd0>
c000280b:	c1 ef 04             	shr    edi,0x4
c000280e:	89 f9                	mov    ecx,edi
c0002810:	eb 0d                	jmp    c000281f <put_fat+0xdd>
c0002812:	8a 08                	mov    cl,BYTE PTR [eax]
c0002814:	c1 ef 08             	shr    edi,0x8
c0002817:	83 e7 0f             	and    edi,0xf
c000281a:	83 e1 f0             	and    ecx,0xfffffff0
c000281d:	09 f9                	or     ecx,edi
c000281f:	88 08                	mov    BYTE PTR [eax],cl
c0002821:	eb 27                	jmp    c000284a <put_fat+0x108>
c0002823:	c1 ea 08             	shr    edx,0x8
c0002826:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002829:	89 f0                	mov    eax,esi
c000282b:	e8 b0 fa ff ff       	call   c00022e0 <move_window>
c0002830:	85 c0                	test   eax,eax
c0002832:	89 c5                	mov    ebp,eax
c0002834:	75 59                	jne    c000288f <put_fat+0x14d>
c0002836:	01 db                	add    ebx,ebx
c0002838:	0f b7 d7             	movzx  edx,di
c000283b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002841:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002845:	e8 56 f5 ff ff       	call   c0001da0 <st_word>
c000284a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000284e:	eb 3f                	jmp    c000288f <put_fat+0x14d>
c0002850:	c1 ea 07             	shr    edx,0x7
c0002853:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002856:	89 f0                	mov    eax,esi
c0002858:	e8 83 fa ff ff       	call   c00022e0 <move_window>
c000285d:	85 c0                	test   eax,eax
c000285f:	89 c5                	mov    ebp,eax
c0002861:	75 2c                	jne    c000288f <put_fat+0x14d>
c0002863:	c1 e3 02             	shl    ebx,0x2
c0002866:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c000286c:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002872:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002876:	89 d8                	mov    eax,ebx
c0002878:	e8 0b f5 ff ff       	call   c0001d88 <ld_dword>
c000287d:	25 00 00 00 f0       	and    eax,0xf0000000
c0002882:	09 f8                	or     eax,edi
c0002884:	89 c2                	mov    edx,eax
c0002886:	89 d8                	mov    eax,ebx
c0002888:	e8 17 f5 ff ff       	call   c0001da4 <st_dword>
c000288d:	eb bb                	jmp    c000284a <put_fat+0x108>
c000288f:	83 c4 1c             	add    esp,0x1c
c0002892:	89 e8                	mov    eax,ebp
c0002894:	5b                   	pop    ebx
c0002895:	5e                   	pop    esi
c0002896:	5f                   	pop    edi
c0002897:	5d                   	pop    ebp
c0002898:	c3                   	ret    

c0002899 <dir_clear>:
c0002899:	55                   	push   ebp
c000289a:	57                   	push   edi
c000289b:	56                   	push   esi
c000289c:	89 c6                	mov    esi,eax
c000289e:	53                   	push   ebx
c000289f:	89 d3                	mov    ebx,edx
c00028a1:	83 ec 1c             	sub    esp,0x1c
c00028a4:	e8 d4 f9 ff ff       	call   c000227d <sync_window>
c00028a9:	85 c0                	test   eax,eax
c00028ab:	0f 85 bf 00 00 00    	jne    c0002970 <dir_clear+0xd7>
c00028b1:	89 da                	mov    edx,ebx
c00028b3:	89 f0                	mov    eax,esi
c00028b5:	e8 18 f7 ff ff       	call   c0001fd2 <clst2sect>
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	b9 00 02 00 00       	mov    ecx,0x200
c00028c1:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c00028c4:	89 c5                	mov    ebp,eax
c00028c6:	8d 46 34             	lea    eax,[esi+0x34]
c00028c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00028cd:	e8 ea f4 ff ff       	call   c0001dbc <mem_set>
c00028d2:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00028d6:	b8 00 80 00 00       	mov    eax,0x8000
c00028db:	c1 e3 09             	shl    ebx,0x9
c00028de:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00028e4:	0f 47 d8             	cmova  ebx,eax
c00028e7:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00028ed:	76 16                	jbe    c0002905 <dir_clear+0x6c>
c00028ef:	83 ec 0c             	sub    esp,0xc
c00028f2:	53                   	push   ebx
c00028f3:	e8 c0 32 00 00       	call   c0005bb8 <ff_memalloc>
c00028f8:	83 c4 10             	add    esp,0x10
c00028fb:	85 c0                	test   eax,eax
c00028fd:	89 c7                	mov    edi,eax
c00028ff:	75 76                	jne    c0002977 <dir_clear+0xde>
c0002901:	d1 eb                	shr    ebx,1
c0002903:	eb e2                	jmp    c00028e7 <dir_clear+0x4e>
c0002905:	31 db                	xor    ebx,ebx
c0002907:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000290b:	39 d8                	cmp    eax,ebx
c000290d:	76 53                	jbe    c0002962 <dir_clear+0xc9>
c000290f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002912:	6a 01                	push   0x1
c0002914:	50                   	push   eax
c0002915:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000291d:	50                   	push   eax
c000291e:	e8 23 f4 ff ff       	call   c0001d46 <disk_write>
c0002923:	83 c4 10             	add    esp,0x10
c0002926:	85 c0                	test   eax,eax
c0002928:	75 38                	jne    c0002962 <dir_clear+0xc9>
c000292a:	43                   	inc    ebx
c000292b:	eb da                	jmp    c0002907 <dir_clear+0x6e>
c000292d:	52                   	push   edx
c000292e:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002931:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002935:	50                   	push   eax
c0002936:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000293a:	57                   	push   edi
c000293b:	50                   	push   eax
c000293c:	e8 05 f4 ff ff       	call   c0001d46 <disk_write>
c0002941:	83 c4 10             	add    esp,0x10
c0002944:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002948:	85 c0                	test   eax,eax
c000294a:	75 0a                	jne    c0002956 <dir_clear+0xbd>
c000294c:	01 d3                	add    ebx,edx
c000294e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002952:	39 d8                	cmp    eax,ebx
c0002954:	77 d7                	ja     c000292d <dir_clear+0x94>
c0002956:	83 ec 0c             	sub    esp,0xc
c0002959:	57                   	push   edi
c000295a:	e8 71 32 00 00       	call   c0005bd0 <ff_memfree>
c000295f:	83 c4 10             	add    esp,0x10
c0002962:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002966:	39 d8                	cmp    eax,ebx
c0002968:	0f 95 c0             	setne  al
c000296b:	0f b6 c0             	movzx  eax,al
c000296e:	eb 19                	jmp    c0002989 <dir_clear+0xf0>
c0002970:	b8 01 00 00 00       	mov    eax,0x1
c0002975:	eb 12                	jmp    c0002989 <dir_clear+0xf0>
c0002977:	89 d9                	mov    ecx,ebx
c0002979:	31 d2                	xor    edx,edx
c000297b:	e8 3c f4 ff ff       	call   c0001dbc <mem_set>
c0002980:	89 da                	mov    edx,ebx
c0002982:	31 db                	xor    ebx,ebx
c0002984:	c1 ea 09             	shr    edx,0x9
c0002987:	eb c5                	jmp    c000294e <dir_clear+0xb5>
c0002989:	83 c4 1c             	add    esp,0x1c
c000298c:	5b                   	pop    ebx
c000298d:	5e                   	pop    esi
c000298e:	5f                   	pop    edi
c000298f:	5d                   	pop    ebp
c0002990:	c3                   	ret    

c0002991 <create_name>:
c0002991:	55                   	push   ebp
c0002992:	57                   	push   edi
c0002993:	89 d7                	mov    edi,edx
c0002995:	56                   	push   esi
c0002996:	31 f6                	xor    esi,esi
c0002998:	53                   	push   ebx
c0002999:	83 ec 3c             	sub    esp,0x3c
c000299c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029a0:	8b 02                	mov    eax,DWORD PTR [edx]
c00029a2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00029aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029b3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029b7:	e8 45 f4 ff ff       	call   c0001e01 <tchar2uni>
c00029bc:	83 f8 ff             	cmp    eax,0xffffffff
c00029bf:	89 c3                	mov    ebx,eax
c00029c1:	75 0a                	jne    c00029cd <create_name+0x3c>
c00029c3:	b8 06 00 00 00       	mov    eax,0x6
c00029c8:	e9 80 02 00 00       	jmp    c0002c4d <create_name+0x2bc>
c00029cd:	3d ff ff 00 00       	cmp    eax,0xffff
c00029d2:	76 0c                	jbe    c00029e0 <create_name+0x4f>
c00029d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00029d8:	c1 e8 10             	shr    eax,0x10
c00029db:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c00029df:	46                   	inc    esi
c00029e0:	0f b7 d3             	movzx  edx,bx
c00029e3:	89 d8                	mov    eax,ebx
c00029e5:	83 fa 1f             	cmp    edx,0x1f
c00029e8:	76 30                	jbe    c0002a1a <create_name+0x89>
c00029ea:	83 fa 2f             	cmp    edx,0x2f
c00029ed:	74 2b                	je     c0002a1a <create_name+0x89>
c00029ef:	83 fa 5c             	cmp    edx,0x5c
c00029f2:	74 35                	je     c0002a29 <create_name+0x98>
c00029f4:	83 fa 7f             	cmp    edx,0x7f
c00029f7:	77 0e                	ja     c0002a07 <create_name+0x76>
c00029f9:	b8 62 f3 01 c0       	mov    eax,0xc001f362
c00029fe:	e8 e7 f3 ff ff       	call   c0001dea <chk_chr>
c0002a03:	85 c0                	test   eax,eax
c0002a05:	75 bc                	jne    c00029c3 <create_name+0x32>
c0002a07:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a0d:	77 b4                	ja     c00029c3 <create_name+0x32>
c0002a0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a13:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a17:	46                   	inc    esi
c0002a18:	eb 99                	jmp    c00029b3 <create_name+0x22>
c0002a1a:	66 83 f8 1f          	cmp    ax,0x1f
c0002a1e:	b3 04                	mov    bl,0x4
c0002a20:	76 1a                	jbe    c0002a3c <create_name+0xab>
c0002a22:	eb 05                	jmp    c0002a29 <create_name+0x98>
c0002a24:	40                   	inc    eax
c0002a25:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a2d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 ef                	je     c0002a24 <create_name+0x93>
c0002a35:	83 fa 5c             	cmp    edx,0x5c
c0002a38:	74 ea                	je     c0002a24 <create_name+0x93>
c0002a3a:	31 db                	xor    ebx,ebx
c0002a3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a40:	89 07                	mov    DWORD PTR [edi],eax
c0002a42:	85 f6                	test   esi,esi
c0002a44:	74 16                	je     c0002a5c <create_name+0xcb>
c0002a46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a4a:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a4f:	83 f8 20             	cmp    eax,0x20
c0002a52:	74 05                	je     c0002a59 <create_name+0xc8>
c0002a54:	83 f8 2e             	cmp    eax,0x2e
c0002a57:	75 03                	jne    c0002a5c <create_name+0xcb>
c0002a59:	4e                   	dec    esi
c0002a5a:	eb e6                	jmp    c0002a42 <create_name+0xb1>
c0002a5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a60:	31 ed                	xor    ebp,ebp
c0002a62:	85 f6                	test   esi,esi
c0002a64:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002a6a:	0f 84 53 ff ff ff    	je     c00029c3 <create_name+0x32>
c0002a70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a74:	8d 55 01             	lea    edx,[ebp+0x1]
c0002a77:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0002a7b:	83 f8 20             	cmp    eax,0x20
c0002a7e:	75 04                	jne    c0002a84 <create_name+0xf3>
c0002a80:	89 d5                	mov    ebp,edx
c0002a82:	eb ec                	jmp    c0002a70 <create_name+0xdf>
c0002a84:	85 ed                	test   ebp,ebp
c0002a86:	75 05                	jne    c0002a8d <create_name+0xfc>
c0002a88:	83 f8 2e             	cmp    eax,0x2e
c0002a8b:	75 08                	jne    c0002a95 <create_name+0x104>
c0002a8d:	83 cb 03             	or     ebx,0x3
c0002a90:	eb 03                	jmp    c0002a95 <create_name+0x104>
c0002a92:	4e                   	dec    esi
c0002a93:	74 0c                	je     c0002aa1 <create_name+0x110>
c0002a95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a99:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002a9f:	75 f1                	jne    c0002a92 <create_name+0x101>
c0002aa1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aa5:	b9 0b 00 00 00       	mov    ecx,0xb
c0002aaa:	ba 20 00 00 00       	mov    edx,0x20
c0002aaf:	31 ff                	xor    edi,edi
c0002ab1:	83 c0 20             	add    eax,0x20
c0002ab4:	e8 03 f3 ff ff       	call   c0001dbc <mem_set>
c0002ab9:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002ac1:	31 c9                	xor    ecx,ecx
c0002ac3:	8d 45 01             	lea    eax,[ebp+0x1]
c0002ac6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002aca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ace:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0002ad2:	85 c0                	test   eax,eax
c0002ad4:	89 c5                	mov    ebp,eax
c0002ad6:	0f 84 1f 01 00 00    	je     c0002bfb <create_name+0x26a>
c0002adc:	83 f8 20             	cmp    eax,0x20
c0002adf:	74 0b                	je     c0002aec <create_name+0x15b>
c0002ae1:	83 f8 2e             	cmp    eax,0x2e
c0002ae4:	75 0f                	jne    c0002af5 <create_name+0x164>
c0002ae6:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002aea:	74 09                	je     c0002af5 <create_name+0x164>
c0002aec:	83 cb 03             	or     ebx,0x3
c0002aef:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0002af3:	eb ce                	jmp    c0002ac3 <create_name+0x132>
c0002af5:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002af9:	73 06                	jae    c0002b01 <create_name+0x170>
c0002afb:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002aff:	75 38                	jne    c0002b39 <create_name+0x1a8>
c0002b01:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b06:	75 08                	jne    c0002b10 <create_name+0x17f>
c0002b08:	83 cb 03             	or     ebx,0x3
c0002b0b:	e9 eb 00 00 00       	jmp    c0002bfb <create_name+0x26a>
c0002b10:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b14:	74 0d                	je     c0002b23 <create_name+0x192>
c0002b16:	83 cb 03             	or     ebx,0x3
c0002b19:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b1d:	0f 87 d8 00 00 00    	ja     c0002bfb <create_name+0x26a>
c0002b23:	c1 e7 02             	shl    edi,0x2
c0002b26:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002b2a:	b9 08 00 00 00       	mov    ecx,0x8
c0002b2f:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002b37:	eb b6                	jmp    c0002aef <create_name+0x15e>
c0002b39:	0f b7 c5             	movzx  eax,bp
c0002b3c:	83 f8 7f             	cmp    eax,0x7f
c0002b3f:	76 6a                	jbe    c0002bab <create_name+0x21a>
c0002b41:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b45:	89 d9                	mov    ecx,ebx
c0002b47:	83 c9 02             	or     ecx,0x2
c0002b4a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b4e:	52                   	push   edx
c0002b4f:	52                   	push   edx
c0002b50:	68 b5 01 00 00       	push   0x1b5
c0002b55:	50                   	push   eax
c0002b56:	e8 8d 30 00 00       	call   c0005be8 <ff_uni2oem>
c0002b5b:	83 c4 10             	add    esp,0x10
c0002b5e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002b62:	a8 80                	test   al,0x80
c0002b64:	89 c5                	mov    ebp,eax
c0002b66:	74 0c                	je     c0002b74 <create_name+0x1e3>
c0002b68:	83 e5 7f             	and    ebp,0x7f
c0002b6b:	0f b6 ad 20 f4 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0be0]
c0002b72:	eb 2e                	jmp    c0002ba2 <create_name+0x211>
c0002b74:	0f b7 c0             	movzx  eax,ax
c0002b77:	3d ff 00 00 00       	cmp    eax,0xff
c0002b7c:	76 24                	jbe    c0002ba2 <create_name+0x211>
c0002b7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002b82:	4a                   	dec    edx
c0002b83:	39 ca                	cmp    edx,ecx
c0002b85:	77 0c                	ja     c0002b93 <create_name+0x202>
c0002b87:	83 cb 03             	or     ebx,0x3
c0002b8a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002b8e:	e9 5c ff ff ff       	jmp    c0002aef <create_name+0x15e>
c0002b93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b97:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002b9b:	88 64 0a 20          	mov    BYTE PTR [edx+ecx*1+0x20],ah
c0002b9f:	41                   	inc    ecx
c0002ba0:	eb 49                	jmp    c0002beb <create_name+0x25a>
c0002ba2:	66 85 ed             	test   bp,bp
c0002ba5:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002ba9:	74 19                	je     c0002bc4 <create_name+0x233>
c0002bab:	0f b7 d5             	movzx  edx,bp
c0002bae:	b8 6b f3 01 c0       	mov    eax,0xc001f36b
c0002bb3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bb7:	e8 2e f2 ff ff       	call   c0001dea <chk_chr>
c0002bbc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bc0:	85 c0                	test   eax,eax
c0002bc2:	74 0a                	je     c0002bce <create_name+0x23d>
c0002bc4:	83 cb 03             	or     ebx,0x3
c0002bc7:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002bcc:	eb 1d                	jmp    c0002beb <create_name+0x25a>
c0002bce:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002bd1:	66 83 f8 19          	cmp    ax,0x19
c0002bd5:	77 05                	ja     c0002bdc <create_name+0x24b>
c0002bd7:	83 cf 02             	or     edi,0x2
c0002bda:	eb 0f                	jmp    c0002beb <create_name+0x25a>
c0002bdc:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002bdf:	66 83 f8 19          	cmp    ax,0x19
c0002be3:	77 06                	ja     c0002beb <create_name+0x25a>
c0002be5:	83 cf 01             	or     edi,0x1
c0002be8:	83 ed 20             	sub    ebp,0x20
c0002beb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bef:	89 e8                	mov    eax,ebp
c0002bf1:	88 44 0a 20          	mov    BYTE PTR [edx+ecx*1+0x20],al
c0002bf5:	41                   	inc    ecx
c0002bf6:	e9 f4 fe ff ff       	jmp    c0002aef <create_name+0x15e>
c0002bfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002bff:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c03:	75 04                	jne    c0002c09 <create_name+0x278>
c0002c05:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c09:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c0e:	75 03                	jne    c0002c13 <create_name+0x282>
c0002c10:	c1 e7 02             	shl    edi,0x2
c0002c13:	89 f8                	mov    eax,edi
c0002c15:	83 e0 0c             	and    eax,0xc
c0002c18:	83 f8 0c             	cmp    eax,0xc
c0002c1b:	74 0a                	je     c0002c27 <create_name+0x296>
c0002c1d:	89 f8                	mov    eax,edi
c0002c1f:	83 e0 03             	and    eax,0x3
c0002c22:	83 f8 03             	cmp    eax,0x3
c0002c25:	75 05                	jne    c0002c2c <create_name+0x29b>
c0002c27:	83 cb 02             	or     ebx,0x2
c0002c2a:	eb 18                	jmp    c0002c44 <create_name+0x2b3>
c0002c2c:	f6 c3 02             	test   bl,0x2
c0002c2f:	75 13                	jne    c0002c44 <create_name+0x2b3>
c0002c31:	f7 c7 01 00 00 00    	test   edi,0x1
c0002c37:	74 03                	je     c0002c3c <create_name+0x2ab>
c0002c39:	83 cb 10             	or     ebx,0x10
c0002c3c:	83 e7 04             	and    edi,0x4
c0002c3f:	74 03                	je     c0002c44 <create_name+0x2b3>
c0002c41:	83 cb 08             	or     ebx,0x8
c0002c44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c48:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c4b:	31 c0                	xor    eax,eax
c0002c4d:	83 c4 3c             	add    esp,0x3c
c0002c50:	5b                   	pop    ebx
c0002c51:	5e                   	pop    esi
c0002c52:	5f                   	pop    edi
c0002c53:	5d                   	pop    ebp
c0002c54:	c3                   	ret    

c0002c55 <cmp_lfn>:
c0002c55:	55                   	push   ebp
c0002c56:	57                   	push   edi
c0002c57:	89 d7                	mov    edi,edx
c0002c59:	56                   	push   esi
c0002c5a:	53                   	push   ebx
c0002c5b:	83 ec 1c             	sub    esp,0x1c
c0002c5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002c62:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002c65:	e8 11 f1 ff ff       	call   c0001d7b <ld_word>
c0002c6a:	66 85 c0             	test   ax,ax
c0002c6d:	74 07                	je     c0002c76 <cmp_lfn+0x21>
c0002c6f:	31 c0                	xor    eax,eax
c0002c71:	e9 94 00 00 00       	jmp    c0002d0a <cmp_lfn+0xb5>
c0002c76:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002c78:	b9 01 00 00 00       	mov    ecx,0x1
c0002c7d:	31 ed                	xor    ebp,ebp
c0002c7f:	83 e3 3f             	and    ebx,0x3f
c0002c82:	4b                   	dec    ebx
c0002c83:	6b db 0d             	imul   ebx,ebx,0xd
c0002c86:	0f b6 85 a0 f4 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0b60]
c0002c8d:	01 f8                	add    eax,edi
c0002c8f:	e8 e7 f0 ff ff       	call   c0001d7b <ld_word>
c0002c94:	66 85 c9             	test   cx,cx
c0002c97:	0f b7 f0             	movzx  esi,ax
c0002c9a:	74 40                	je     c0002cdc <cmp_lfn+0x87>
c0002c9c:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002ca2:	77 cb                	ja     c0002c6f <cmp_lfn+0x1a>
c0002ca4:	83 ec 0c             	sub    esp,0xc
c0002ca7:	0f b7 c6             	movzx  eax,si
c0002caa:	50                   	push   eax
c0002cab:	e8 4c 30 00 00       	call   c0005cfc <ff_wtoupper>
c0002cb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002cb4:	8d 43 01             	lea    eax,[ebx+0x1]
c0002cb7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002cbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002cbf:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002cc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0002cc6:	e8 31 30 00 00       	call   c0005cfc <ff_wtoupper>
c0002ccb:	83 c4 10             	add    esp,0x10
c0002cce:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0002cd2:	75 9b                	jne    c0002c6f <cmp_lfn+0x1a>
c0002cd4:	89 f1                	mov    ecx,esi
c0002cd6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002cda:	eb 08                	jmp    c0002ce4 <cmp_lfn+0x8f>
c0002cdc:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002ce2:	75 8b                	jne    c0002c6f <cmp_lfn+0x1a>
c0002ce4:	45                   	inc    ebp
c0002ce5:	83 fd 0d             	cmp    ebp,0xd
c0002ce8:	75 9c                	jne    c0002c86 <cmp_lfn+0x31>
c0002cea:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002ced:	74 16                	je     c0002d05 <cmp_lfn+0xb0>
c0002cef:	66 85 c9             	test   cx,cx
c0002cf2:	74 11                	je     c0002d05 <cmp_lfn+0xb0>
c0002cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cf8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002cfd:	0f 94 c0             	sete   al
c0002d00:	0f b6 c0             	movzx  eax,al
c0002d03:	eb 05                	jmp    c0002d0a <cmp_lfn+0xb5>
c0002d05:	b8 01 00 00 00       	mov    eax,0x1
c0002d0a:	83 c4 1c             	add    esp,0x1c
c0002d0d:	5b                   	pop    ebx
c0002d0e:	5e                   	pop    esi
c0002d0f:	5f                   	pop    edi
c0002d10:	5d                   	pop    ebp
c0002d11:	c3                   	ret    

c0002d12 <sync_fs>:
c0002d12:	56                   	push   esi
c0002d13:	53                   	push   ebx
c0002d14:	53                   	push   ebx
c0002d15:	89 c3                	mov    ebx,eax
c0002d17:	e8 61 f5 ff ff       	call   c000227d <sync_window>
c0002d1c:	85 c0                	test   eax,eax
c0002d1e:	0f 85 9a 00 00 00    	jne    c0002dbe <sync_fs+0xac>
c0002d24:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d27:	75 7b                	jne    c0002da4 <sync_fs+0x92>
c0002d29:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d2d:	75 75                	jne    c0002da4 <sync_fs+0x92>
c0002d2f:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d32:	b9 00 02 00 00       	mov    ecx,0x200
c0002d37:	31 d2                	xor    edx,edx
c0002d39:	89 f0                	mov    eax,esi
c0002d3b:	e8 7c f0 ff ff       	call   c0001dbc <mem_set>
c0002d40:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002d46:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002d4b:	e8 50 f0 ff ff       	call   c0001da0 <st_word>
c0002d50:	ba 52 52 61 41       	mov    edx,0x41615252
c0002d55:	89 f0                	mov    eax,esi
c0002d57:	e8 48 f0 ff ff       	call   c0001da4 <st_dword>
c0002d5c:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002d62:	ba 72 72 41 61       	mov    edx,0x61417272
c0002d67:	e8 38 f0 ff ff       	call   c0001da4 <st_dword>
c0002d6c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002d6f:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002d75:	e8 2a f0 ff ff       	call   c0001da4 <st_dword>
c0002d7a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002d7d:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002d83:	e8 1c f0 ff ff       	call   c0001da4 <st_dword>
c0002d88:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d8b:	6a 01                	push   0x1
c0002d8d:	40                   	inc    eax
c0002d8e:	50                   	push   eax
c0002d8f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d92:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d96:	56                   	push   esi
c0002d97:	50                   	push   eax
c0002d98:	e8 a9 ef ff ff       	call   c0001d46 <disk_write>
c0002d9d:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002da1:	83 c4 10             	add    esp,0x10
c0002da4:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002da8:	51                   	push   ecx
c0002da9:	6a 00                	push   0x0
c0002dab:	6a 00                	push   0x0
c0002dad:	50                   	push   eax
c0002dae:	e8 a9 ef ff ff       	call   c0001d5c <disk_ioctl>
c0002db3:	83 c4 10             	add    esp,0x10
c0002db6:	85 c0                	test   eax,eax
c0002db8:	0f 95 c0             	setne  al
c0002dbb:	0f b6 c0             	movzx  eax,al
c0002dbe:	5a                   	pop    edx
c0002dbf:	5b                   	pop    ebx
c0002dc0:	5e                   	pop    esi
c0002dc1:	c3                   	ret    

c0002dc2 <create_partition>:
c0002dc2:	55                   	push   ebp
c0002dc3:	0f b6 c0             	movzx  eax,al
c0002dc6:	57                   	push   edi
c0002dc7:	56                   	push   esi
c0002dc8:	53                   	push   ebx
c0002dc9:	83 ec 40             	sub    esp,0x40
c0002dcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002dd0:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002dd4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002dd8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ddc:	50                   	push   eax
c0002ddd:	6a 01                	push   0x1
c0002ddf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002de3:	e8 74 ef ff ff       	call   c0001d5c <disk_ioctl>
c0002de8:	83 c4 10             	add    esp,0x10
c0002deb:	85 c0                	test   eax,eax
c0002ded:	0f 85 73 01 00 00    	jne    c0002f66 <create_partition+0x1a4>
c0002df3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002df7:	b9 05 00 00 00       	mov    ecx,0x5
c0002dfc:	be 08 00 00 00       	mov    esi,0x8
c0002e01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e05:	89 f0                	mov    eax,esi
c0002e07:	31 d2                	xor    edx,edx
c0002e09:	0f b6 d8             	movzx  ebx,al
c0002e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e10:	f7 f3                	div    ebx
c0002e12:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e17:	76 0a                	jbe    c0002e23 <create_partition+0x61>
c0002e19:	d1 e6                	shl    esi,1
c0002e1b:	49                   	dec    ecx
c0002e1c:	75 e7                	jne    c0002e05 <create_partition+0x43>
c0002e1e:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e23:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e27:	b9 00 02 00 00       	mov    ecx,0x200
c0002e2c:	31 d2                	xor    edx,edx
c0002e2e:	e8 89 ef ff ff       	call   c0001dbc <mem_set>
c0002e33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e37:	b9 64 00 00 00       	mov    ecx,0x64
c0002e3c:	31 d2                	xor    edx,edx
c0002e3e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002e46:	f7 f1                	div    ecx
c0002e48:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002e4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002e51:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e55:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002e5b:	89 f0                	mov    eax,esi
c0002e5d:	0f b6 c0             	movzx  eax,al
c0002e60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e64:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002e69:	0f 96 c0             	setbe  al
c0002e6c:	31 d2                	xor    edx,edx
c0002e6e:	85 c9                	test   ecx,ecx
c0002e70:	0f 95 c2             	setne  dl
c0002e73:	85 c2                	test   edx,eax
c0002e75:	0f 84 ba 00 00 00    	je     c0002f35 <create_partition+0x173>
c0002e7b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0002e7f:	0f 83 b0 00 00 00    	jae    c0002f35 <create_partition+0x173>
c0002e85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e89:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002e8d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e90:	83 fe 64             	cmp    esi,0x64
c0002e93:	77 0d                	ja     c0002ea2 <create_partition+0xe0>
c0002e95:	74 07                	je     c0002e9e <create_partition+0xdc>
c0002e97:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e9c:	eb 04                	jmp    c0002ea2 <create_partition+0xe0>
c0002e9e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002ea2:	89 ca                	mov    edx,ecx
c0002ea4:	31 c0                	xor    eax,eax
c0002ea6:	01 f2                	add    edx,esi
c0002ea8:	0f 92 c0             	setb   al
c0002eab:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002eaf:	77 04                	ja     c0002eb5 <create_partition+0xf3>
c0002eb1:	85 c0                	test   eax,eax
c0002eb3:	74 08                	je     c0002ebd <create_partition+0xfb>
c0002eb5:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002eb9:	29 ce                	sub    esi,ecx
c0002ebb:	eb 04                	jmp    c0002ec1 <create_partition+0xff>
c0002ebd:	85 f6                	test   esi,esi
c0002ebf:	74 74                	je     c0002f35 <create_partition+0x173>
c0002ec1:	89 ca                	mov    edx,ecx
c0002ec3:	89 d8                	mov    eax,ebx
c0002ec5:	bf 3f 00 00 00       	mov    edi,0x3f
c0002eca:	e8 d5 ee ff ff       	call   c0001da4 <st_dword>
c0002ecf:	8d 43 04             	lea    eax,[ebx+0x4]
c0002ed2:	89 f2                	mov    edx,esi
c0002ed4:	83 c3 10             	add    ebx,0x10
c0002ed7:	e8 c8 ee ff ff       	call   c0001da4 <st_dword>
c0002edc:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002ee0:	31 d2                	xor    edx,edx
c0002ee2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ee6:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002ee9:	89 c8                	mov    eax,ecx
c0002eeb:	01 f1                	add    ecx,esi
c0002eed:	f7 f7                	div    edi
c0002eef:	89 d5                	mov    ebp,edx
c0002ef1:	31 d2                	xor    edx,edx
c0002ef3:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002ef7:	45                   	inc    ebp
c0002ef8:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002efb:	89 c2                	mov    edx,eax
c0002efd:	c1 ea 02             	shr    edx,0x2
c0002f00:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f03:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f06:	83 e2 c0             	and    edx,0xffffffc0
c0002f09:	09 ea                	or     edx,ebp
c0002f0b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f0e:	31 d2                	xor    edx,edx
c0002f10:	f7 f7                	div    edi
c0002f12:	89 d6                	mov    esi,edx
c0002f14:	31 d2                	xor    edx,edx
c0002f16:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f1a:	46                   	inc    esi
c0002f1b:	89 c7                	mov    edi,eax
c0002f1d:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f20:	c1 ef 02             	shr    edi,0x2
c0002f23:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002f26:	83 e7 c0             	and    edi,0xffffffc0
c0002f29:	09 fe                	or     esi,edi
c0002f2b:	89 f2                	mov    edx,esi
c0002f2d:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002f30:	e9 2f ff ff ff       	jmp    c0002e64 <create_partition+0xa2>
c0002f35:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002f39:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f3e:	05 fe 01 00 00       	add    eax,0x1fe
c0002f43:	e8 58 ee ff ff       	call   c0001da0 <st_word>
c0002f48:	6a 01                	push   0x1
c0002f4a:	6a 00                	push   0x0
c0002f4c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002f50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002f54:	e8 ed ed ff ff       	call   c0001d46 <disk_write>
c0002f59:	83 c4 10             	add    esp,0x10
c0002f5c:	85 c0                	test   eax,eax
c0002f5e:	0f 95 c0             	setne  al
c0002f61:	0f b6 c0             	movzx  eax,al
c0002f64:	eb 05                	jmp    c0002f6b <create_partition+0x1a9>
c0002f66:	b8 01 00 00 00       	mov    eax,0x1
c0002f6b:	83 c4 3c             	add    esp,0x3c
c0002f6e:	5b                   	pop    ebx
c0002f6f:	5e                   	pop    esi
c0002f70:	5f                   	pop    edi
c0002f71:	5d                   	pop    ebp
c0002f72:	c3                   	ret    

c0002f73 <get_fileinfo>:
c0002f73:	55                   	push   ebp
c0002f74:	57                   	push   edi
c0002f75:	56                   	push   esi
c0002f76:	53                   	push   ebx
c0002f77:	83 ec 1c             	sub    esp,0x1c
c0002f7a:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f7c:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002f80:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002f84:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002f88:	0f 84 de 01 00 00    	je     c000316c <get_fileinfo+0x1f9>
c0002f8e:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002f92:	89 d3                	mov    ebx,edx
c0002f94:	89 c6                	mov    esi,eax
c0002f96:	74 7d                	je     c0003015 <get_fileinfo+0xa2>
c0002f98:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002fa0:	31 ff                	xor    edi,edi
c0002fa2:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0002fa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002fad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002fb1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002fb4:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0002fb8:	85 c0                	test   eax,eax
c0002fba:	89 c2                	mov    edx,eax
c0002fbc:	74 44                	je     c0003002 <get_fileinfo+0x8f>
c0002fbe:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0002fc3:	85 ed                	test   ebp,ebp
c0002fc5:	75 0d                	jne    c0002fd4 <get_fileinfo+0x61>
c0002fc7:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0002fcd:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0002fd2:	76 20                	jbe    c0002ff4 <get_fileinfo+0x81>
c0002fd4:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002fd8:	c1 e5 10             	shl    ebp,0x10
c0002fdb:	b9 ff 00 00 00       	mov    ecx,0xff
c0002fe0:	29 f9                	sub    ecx,edi
c0002fe2:	09 e8                	or     eax,ebp
c0002fe4:	e8 f0 ee ff ff       	call   c0001ed9 <put_utf>
c0002fe9:	0f b6 c0             	movzx  eax,al
c0002fec:	85 c0                	test   eax,eax
c0002fee:	74 10                	je     c0003000 <get_fileinfo+0x8d>
c0002ff0:	01 c7                	add    edi,eax
c0002ff2:	31 d2                	xor    edx,edx
c0002ff4:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002ff9:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c0002ffe:	eb a9                	jmp    c0002fa9 <get_fileinfo+0x36>
c0003000:	31 ff                	xor    edi,edi
c0003002:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003008:	b8 00 00 00 00       	mov    eax,0x0
c000300d:	0f 45 f8             	cmovne edi,eax
c0003010:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003015:	31 ff                	xor    edi,edi
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	83 f9 0a             	cmp    ecx,0xa
c000301c:	0f 87 ac 00 00 00    	ja     c00030ce <get_fileinfo+0x15b>
c0003022:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003025:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003028:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000302c:	83 f8 20             	cmp    eax,0x20
c000302f:	89 c2                	mov    edx,eax
c0003031:	0f 84 90 00 00 00    	je     c00030c7 <get_fileinfo+0x154>
c0003037:	83 f8 05             	cmp    eax,0x5
c000303a:	75 05                	jne    c0003041 <get_fileinfo+0xce>
c000303c:	ba e5 00 00 00       	mov    edx,0xe5
c0003041:	83 fd 09             	cmp    ebp,0x9
c0003044:	75 0b                	jne    c0003051 <get_fileinfo+0xde>
c0003046:	83 ff 0b             	cmp    edi,0xb
c0003049:	77 06                	ja     c0003051 <get_fileinfo+0xde>
c000304b:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003050:	47                   	inc    edi
c0003051:	0f b7 c2             	movzx  eax,dx
c0003054:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003058:	e8 9e ed ff ff       	call   c0001dfb <dbc_1st>
c000305d:	85 c0                	test   eax,eax
c000305f:	74 2f                	je     c0003090 <get_fileinfo+0x11d>
c0003061:	83 fd 08             	cmp    ebp,0x8
c0003064:	74 2a                	je     c0003090 <get_fileinfo+0x11d>
c0003066:	83 fd 0b             	cmp    ebp,0xb
c0003069:	74 25                	je     c0003090 <get_fileinfo+0x11d>
c000306b:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000306e:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0003072:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003076:	e8 83 ed ff ff       	call   c0001dfe <dbc_2nd>
c000307b:	85 c0                	test   eax,eax
c000307d:	74 11                	je     c0003090 <get_fileinfo+0x11d>
c000307f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003083:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003086:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c000308b:	c1 e0 08             	shl    eax,0x8
c000308e:	09 c2                	or     edx,eax
c0003090:	0f b7 d2             	movzx  edx,dx
c0003093:	50                   	push   eax
c0003094:	50                   	push   eax
c0003095:	68 b5 01 00 00       	push   0x1b5
c000309a:	52                   	push   edx
c000309b:	e8 e4 2b 00 00       	call   c0005c84 <ff_oem2uni>
c00030a0:	83 c4 10             	add    esp,0x10
c00030a3:	0f b7 c0             	movzx  eax,ax
c00030a6:	85 c0                	test   eax,eax
c00030a8:	75 04                	jne    c00030ae <get_fileinfo+0x13b>
c00030aa:	31 ff                	xor    edi,edi
c00030ac:	eb 20                	jmp    c00030ce <get_fileinfo+0x15b>
c00030ae:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00030b2:	b9 0c 00 00 00       	mov    ecx,0xc
c00030b7:	29 f9                	sub    ecx,edi
c00030b9:	e8 1b ee ff ff       	call   c0001ed9 <put_utf>
c00030be:	0f b6 c0             	movzx  eax,al
c00030c1:	85 c0                	test   eax,eax
c00030c3:	74 e5                	je     c00030aa <get_fileinfo+0x137>
c00030c5:	01 c7                	add    edi,eax
c00030c7:	89 e9                	mov    ecx,ebp
c00030c9:	e9 4b ff ff ff       	jmp    c0003019 <get_fileinfo+0xa6>
c00030ce:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c00030d3:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c00030d7:	75 5f                	jne    c0003138 <get_fileinfo+0x1c5>
c00030d9:	85 ff                	test   edi,edi
c00030db:	75 0b                	jne    c00030e8 <get_fileinfo+0x175>
c00030dd:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c00030e1:	ba 01 00 00 00       	mov    edx,0x1
c00030e6:	eb 3e                	jmp    c0003126 <get_fileinfo+0x1b3>
c00030e8:	bf 08 00 00 00       	mov    edi,0x8
c00030ed:	31 d2                	xor    edx,edx
c00030ef:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c00030f5:	84 c0                	test   al,al
c00030f7:	74 2d                	je     c0003126 <get_fileinfo+0x1b3>
c00030f9:	66 83 f8 2e          	cmp    ax,0x2e
c00030fd:	74 1b                	je     c000311a <get_fileinfo+0x1a7>
c00030ff:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003102:	66 83 f9 19          	cmp    cx,0x19
c0003106:	77 17                	ja     c000311f <get_fileinfo+0x1ac>
c0003108:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000310b:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000310e:	21 f9                	and    ecx,edi
c0003110:	80 e1 18             	and    cl,0x18
c0003113:	74 0a                	je     c000311f <get_fileinfo+0x1ac>
c0003115:	83 c0 20             	add    eax,0x20
c0003118:	eb 05                	jmp    c000311f <get_fileinfo+0x1ac>
c000311a:	bf 10 00 00 00       	mov    edi,0x10
c000311f:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003123:	42                   	inc    edx
c0003124:	eb c9                	jmp    c00030ef <get_fileinfo+0x17c>
c0003126:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000312b:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000312e:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003132:	75 04                	jne    c0003138 <get_fileinfo+0x1c5>
c0003134:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003138:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000313b:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000313e:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003141:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003144:	83 c0 1c             	add    eax,0x1c
c0003147:	e8 3c ec ff ff       	call   c0001d88 <ld_dword>
c000314c:	89 03                	mov    DWORD PTR [ebx],eax
c000314e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003151:	83 c0 16             	add    eax,0x16
c0003154:	e8 22 ec ff ff       	call   c0001d7b <ld_word>
c0003159:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c000315d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003160:	83 c0 18             	add    eax,0x18
c0003163:	e8 13 ec ff ff       	call   c0001d7b <ld_word>
c0003168:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000316c:	83 c4 1c             	add    esp,0x1c
c000316f:	5b                   	pop    ebx
c0003170:	5e                   	pop    esi
c0003171:	5f                   	pop    edi
c0003172:	5d                   	pop    ebp
c0003173:	c3                   	ret    

c0003174 <ld_clust.isra.0>:
c0003174:	56                   	push   esi
c0003175:	89 c6                	mov    esi,eax
c0003177:	53                   	push   ebx
c0003178:	8d 42 1a             	lea    eax,[edx+0x1a]
c000317b:	89 d3                	mov    ebx,edx
c000317d:	e8 f9 eb ff ff       	call   c0001d7b <ld_word>
c0003182:	0f b7 c8             	movzx  ecx,ax
c0003185:	89 f0                	mov    eax,esi
c0003187:	3c 03                	cmp    al,0x3
c0003189:	75 0d                	jne    c0003198 <ld_clust.isra.0+0x24>
c000318b:	8d 43 14             	lea    eax,[ebx+0x14]
c000318e:	e8 e8 eb ff ff       	call   c0001d7b <ld_word>
c0003193:	c1 e0 10             	shl    eax,0x10
c0003196:	09 c1                	or     ecx,eax
c0003198:	89 c8                	mov    eax,ecx
c000319a:	5b                   	pop    ebx
c000319b:	5e                   	pop    esi
c000319c:	c3                   	ret    

c000319d <st_clust.isra.1>:
c000319d:	56                   	push   esi
c000319e:	89 c6                	mov    esi,eax
c00031a0:	53                   	push   ebx
c00031a1:	89 d3                	mov    ebx,edx
c00031a3:	0f b7 d1             	movzx  edx,cx
c00031a6:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031a9:	e8 f2 eb ff ff       	call   c0001da0 <st_word>
c00031ae:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00031b1:	75 0f                	jne    c00031c2 <st_clust.isra.1+0x25>
c00031b3:	8d 43 14             	lea    eax,[ebx+0x14]
c00031b6:	5b                   	pop    ebx
c00031b7:	c1 e9 10             	shr    ecx,0x10
c00031ba:	5e                   	pop    esi
c00031bb:	89 ca                	mov    edx,ecx
c00031bd:	e9 de eb ff ff       	jmp    c0001da0 <st_word>
c00031c2:	5b                   	pop    ebx
c00031c3:	5e                   	pop    esi
c00031c4:	c3                   	ret    

c00031c5 <get_fat.isra.2>:
c00031c5:	83 fa 01             	cmp    edx,0x1
c00031c8:	b9 01 00 00 00       	mov    ecx,0x1
c00031cd:	0f 86 f4 00 00 00    	jbe    c00032c7 <get_fat.isra.2+0x102>
c00031d3:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c00031d6:	0f 83 eb 00 00 00    	jae    c00032c7 <get_fat.isra.2+0x102>
c00031dc:	55                   	push   ebp
c00031dd:	57                   	push   edi
c00031de:	56                   	push   esi
c00031df:	89 c6                	mov    esi,eax
c00031e1:	53                   	push   ebx
c00031e2:	89 d3                	mov    ebx,edx
c00031e4:	83 ec 0c             	sub    esp,0xc
c00031e7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00031ea:	83 f8 02             	cmp    eax,0x2
c00031ed:	74 79                	je     c0003268 <get_fat.isra.2+0xa3>
c00031ef:	83 f8 03             	cmp    eax,0x3
c00031f2:	0f 84 97 00 00 00    	je     c000328f <get_fat.isra.2+0xca>
c00031f8:	48                   	dec    eax
c00031f9:	0f 85 be 00 00 00    	jne    c00032bd <get_fat.isra.2+0xf8>
c00031ff:	89 d7                	mov    edi,edx
c0003201:	89 f0                	mov    eax,esi
c0003203:	d1 ef                	shr    edi,1
c0003205:	01 d7                	add    edi,edx
c0003207:	89 fa                	mov    edx,edi
c0003209:	c1 ea 09             	shr    edx,0x9
c000320c:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000320f:	e8 cc f0 ff ff       	call   c00022e0 <move_window>
c0003214:	85 c0                	test   eax,eax
c0003216:	74 08                	je     c0003220 <get_fat.isra.2+0x5b>
c0003218:	83 c9 ff             	or     ecx,0xffffffff
c000321b:	e9 9d 00 00 00       	jmp    c00032bd <get_fat.isra.2+0xf8>
c0003220:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003223:	89 f0                	mov    eax,esi
c0003225:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000322b:	89 ea                	mov    edx,ebp
c000322d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c0003232:	c1 ea 09             	shr    edx,0x9
c0003235:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003238:	e8 a3 f0 ff ff       	call   c00022e0 <move_window>
c000323d:	85 c0                	test   eax,eax
c000323f:	75 d7                	jne    c0003218 <get_fat.isra.2+0x53>
c0003241:	89 f8                	mov    eax,edi
c0003243:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003249:	0f b6 f8             	movzx  edi,al
c000324c:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c0003251:	c1 e0 08             	shl    eax,0x8
c0003254:	09 f8                	or     eax,edi
c0003256:	89 c1                	mov    ecx,eax
c0003258:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000325e:	80 e3 01             	and    bl,0x1
c0003261:	74 5a                	je     c00032bd <get_fat.isra.2+0xf8>
c0003263:	c1 e8 04             	shr    eax,0x4
c0003266:	eb 53                	jmp    c00032bb <get_fat.isra.2+0xf6>
c0003268:	c1 ea 08             	shr    edx,0x8
c000326b:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000326e:	89 f0                	mov    eax,esi
c0003270:	e8 6b f0 ff ff       	call   c00022e0 <move_window>
c0003275:	85 c0                	test   eax,eax
c0003277:	75 9f                	jne    c0003218 <get_fat.isra.2+0x53>
c0003279:	01 db                	add    ebx,ebx
c000327b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0003281:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003285:	e8 f1 ea ff ff       	call   c0001d7b <ld_word>
c000328a:	0f b7 c8             	movzx  ecx,ax
c000328d:	eb 2e                	jmp    c00032bd <get_fat.isra.2+0xf8>
c000328f:	c1 ea 07             	shr    edx,0x7
c0003292:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003295:	89 f0                	mov    eax,esi
c0003297:	e8 44 f0 ff ff       	call   c00022e0 <move_window>
c000329c:	85 c0                	test   eax,eax
c000329e:	0f 85 74 ff ff ff    	jne    c0003218 <get_fat.isra.2+0x53>
c00032a4:	c1 e3 02             	shl    ebx,0x2
c00032a7:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00032ad:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00032b1:	e8 d2 ea ff ff       	call   c0001d88 <ld_dword>
c00032b6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00032bb:	89 c1                	mov    ecx,eax
c00032bd:	83 c4 0c             	add    esp,0xc
c00032c0:	89 c8                	mov    eax,ecx
c00032c2:	5b                   	pop    ebx
c00032c3:	5e                   	pop    esi
c00032c4:	5f                   	pop    edi
c00032c5:	5d                   	pop    ebp
c00032c6:	c3                   	ret    
c00032c7:	89 c8                	mov    eax,ecx
c00032c9:	c3                   	ret    

c00032ca <dir_sdi>:
c00032ca:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c00032d0:	0f 87 b6 00 00 00    	ja     c000338c <dir_sdi+0xc2>
c00032d6:	55                   	push   ebp
c00032d7:	57                   	push   edi
c00032d8:	56                   	push   esi
c00032d9:	53                   	push   ebx
c00032da:	89 d3                	mov    ebx,edx
c00032dc:	83 ec 1c             	sub    esp,0x1c
c00032df:	f6 c2 1f             	test   dl,0x1f
c00032e2:	74 0a                	je     c00032ee <dir_sdi+0x24>
c00032e4:	b8 02 00 00 00       	mov    eax,0x2
c00032e9:	e9 96 00 00 00       	jmp    c0003384 <dir_sdi+0xba>
c00032ee:	89 c6                	mov    esi,eax
c00032f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00032f2:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c00032f5:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c00032f8:	85 ff                	test   edi,edi
c00032fa:	75 21                	jne    c000331d <dir_sdi+0x53>
c00032fc:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c0003300:	76 07                	jbe    c0003309 <dir_sdi+0x3f>
c0003302:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003305:	85 c0                	test   eax,eax
c0003307:	75 12                	jne    c000331b <dir_sdi+0x51>
c0003309:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000330d:	89 da                	mov    edx,ebx
c000330f:	c1 ea 05             	shr    edx,0x5
c0003312:	39 c2                	cmp    edx,eax
c0003314:	73 ce                	jae    c00032e4 <dir_sdi+0x1a>
c0003316:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003319:	eb 3c                	jmp    c0003357 <dir_sdi+0x8d>
c000331b:	89 c7                	mov    edi,eax
c000331d:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0003321:	c1 e1 09             	shl    ecx,0x9
c0003324:	39 cb                	cmp    ebx,ecx
c0003326:	72 26                	jb     c000334e <dir_sdi+0x84>
c0003328:	8b 06                	mov    eax,DWORD PTR [esi]
c000332a:	89 fa                	mov    edx,edi
c000332c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003330:	e8 90 fe ff ff       	call   c00031c5 <get_fat.isra.2>
c0003335:	83 f8 ff             	cmp    eax,0xffffffff
c0003338:	89 c7                	mov    edi,eax
c000333a:	74 43                	je     c000337f <dir_sdi+0xb5>
c000333c:	83 f8 01             	cmp    eax,0x1
c000333f:	76 a3                	jbe    c00032e4 <dir_sdi+0x1a>
c0003341:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003344:	76 9e                	jbe    c00032e4 <dir_sdi+0x1a>
c0003346:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000334a:	29 cb                	sub    ebx,ecx
c000334c:	eb d6                	jmp    c0003324 <dir_sdi+0x5a>
c000334e:	89 fa                	mov    edx,edi
c0003350:	89 e8                	mov    eax,ebp
c0003352:	e8 7b ec ff ff       	call   c0001fd2 <clst2sect>
c0003357:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000335a:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c000335d:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c0003360:	85 d2                	test   edx,edx
c0003362:	74 80                	je     c00032e4 <dir_sdi+0x1a>
c0003364:	89 d8                	mov    eax,ebx
c0003366:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000336c:	c1 e8 09             	shr    eax,0x9
c000336f:	01 d0                	add    eax,edx
c0003371:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003374:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003378:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000337b:	31 c0                	xor    eax,eax
c000337d:	eb 05                	jmp    c0003384 <dir_sdi+0xba>
c000337f:	b8 01 00 00 00       	mov    eax,0x1
c0003384:	83 c4 1c             	add    esp,0x1c
c0003387:	5b                   	pop    ebx
c0003388:	5e                   	pop    esi
c0003389:	5f                   	pop    edi
c000338a:	5d                   	pop    ebp
c000338b:	c3                   	ret    
c000338c:	b8 02 00 00 00       	mov    eax,0x2
c0003391:	c3                   	ret    

c0003392 <create_chain>:
c0003392:	55                   	push   ebp
c0003393:	57                   	push   edi
c0003394:	89 d7                	mov    edi,edx
c0003396:	56                   	push   esi
c0003397:	53                   	push   ebx
c0003398:	83 ec 1c             	sub    esp,0x1c
c000339b:	85 d2                	test   edx,edx
c000339d:	8b 18                	mov    ebx,DWORD PTR [eax]
c000339f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00033a3:	75 0e                	jne    c00033b3 <create_chain+0x21>
c00033a5:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00033a8:	85 ed                	test   ebp,ebp
c00033aa:	74 32                	je     c00033de <create_chain+0x4c>
c00033ac:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c00033af:	77 32                	ja     c00033e3 <create_chain+0x51>
c00033b1:	eb 2b                	jmp    c00033de <create_chain+0x4c>
c00033b3:	89 d8                	mov    eax,ebx
c00033b5:	e8 0b fe ff ff       	call   c00031c5 <get_fat.isra.2>
c00033ba:	83 f8 01             	cmp    eax,0x1
c00033bd:	77 0a                	ja     c00033c9 <create_chain+0x37>
c00033bf:	b8 01 00 00 00       	mov    eax,0x1
c00033c4:	e9 f3 00 00 00       	jmp    c00034bc <create_chain+0x12a>
c00033c9:	83 f8 ff             	cmp    eax,0xffffffff
c00033cc:	0f 84 e7 00 00 00    	je     c00034b9 <create_chain+0x127>
c00033d2:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00033d5:	89 fd                	mov    ebp,edi
c00033d7:	76 0a                	jbe    c00033e3 <create_chain+0x51>
c00033d9:	e9 de 00 00 00       	jmp    c00034bc <create_chain+0x12a>
c00033de:	bd 01 00 00 00       	mov    ebp,0x1
c00033e3:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00033e7:	75 07                	jne    c00033f0 <create_chain+0x5e>
c00033e9:	31 c0                	xor    eax,eax
c00033eb:	e9 cc 00 00 00       	jmp    c00034bc <create_chain+0x12a>
c00033f0:	39 fd                	cmp    ebp,edi
c00033f2:	75 44                	jne    c0003438 <create_chain+0xa6>
c00033f4:	8d 75 01             	lea    esi,[ebp+0x1]
c00033f7:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00033fa:	77 05                	ja     c0003401 <create_chain+0x6f>
c00033fc:	be 02 00 00 00       	mov    esi,0x2
c0003401:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003405:	89 f2                	mov    edx,esi
c0003407:	8b 00                	mov    eax,DWORD PTR [eax]
c0003409:	e8 b7 fd ff ff       	call   c00031c5 <get_fat.isra.2>
c000340e:	83 f8 01             	cmp    eax,0x1
c0003411:	0f 84 a5 00 00 00    	je     c00034bc <create_chain+0x12a>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 9c 00 00 00    	je     c00034bc <create_chain+0x12a>
c0003420:	85 c0                	test   eax,eax
c0003422:	74 10                	je     c0003434 <create_chain+0xa2>
c0003424:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003427:	83 f8 01             	cmp    eax,0x1
c000342a:	76 0c                	jbe    c0003438 <create_chain+0xa6>
c000342c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000342f:	0f 47 e8             	cmova  ebp,eax
c0003432:	eb 04                	jmp    c0003438 <create_chain+0xa6>
c0003434:	85 f6                	test   esi,esi
c0003436:	75 36                	jne    c000346e <create_chain+0xdc>
c0003438:	89 ee                	mov    esi,ebp
c000343a:	46                   	inc    esi
c000343b:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c000343e:	77 0a                	ja     c000344a <create_chain+0xb8>
c0003440:	83 fd 01             	cmp    ebp,0x1
c0003443:	76 a4                	jbe    c00033e9 <create_chain+0x57>
c0003445:	be 02 00 00 00       	mov    esi,0x2
c000344a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000344e:	89 f2                	mov    edx,esi
c0003450:	8b 00                	mov    eax,DWORD PTR [eax]
c0003452:	e8 6e fd ff ff       	call   c00031c5 <get_fat.isra.2>
c0003457:	85 c0                	test   eax,eax
c0003459:	74 13                	je     c000346e <create_chain+0xdc>
c000345b:	83 f8 01             	cmp    eax,0x1
c000345e:	74 5c                	je     c00034bc <create_chain+0x12a>
c0003460:	83 f8 ff             	cmp    eax,0xffffffff
c0003463:	74 57                	je     c00034bc <create_chain+0x12a>
c0003465:	39 ee                	cmp    esi,ebp
c0003467:	75 d1                	jne    c000343a <create_chain+0xa8>
c0003469:	e9 7b ff ff ff       	jmp    c00033e9 <create_chain+0x57>
c000346e:	83 c9 ff             	or     ecx,0xffffffff
c0003471:	89 f2                	mov    edx,esi
c0003473:	89 d8                	mov    eax,ebx
c0003475:	e8 c8 f2 ff ff       	call   c0002742 <put_fat>
c000347a:	85 c0                	test   eax,eax
c000347c:	75 0f                	jne    c000348d <create_chain+0xfb>
c000347e:	85 ff                	test   edi,edi
c0003480:	74 0b                	je     c000348d <create_chain+0xfb>
c0003482:	89 f1                	mov    ecx,esi
c0003484:	89 fa                	mov    edx,edi
c0003486:	89 d8                	mov    eax,ebx
c0003488:	e8 b5 f2 ff ff       	call   c0002742 <put_fat>
c000348d:	85 c0                	test   eax,eax
c000348f:	75 21                	jne    c00034b2 <create_chain+0x120>
c0003491:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0003494:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003497:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000349a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000349d:	39 d0                	cmp    eax,edx
c000349f:	77 04                	ja     c00034a5 <create_chain+0x113>
c00034a1:	48                   	dec    eax
c00034a2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034a5:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00034a8:	83 c8 01             	or     eax,0x1
c00034ab:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00034ae:	89 f0                	mov    eax,esi
c00034b0:	eb 0a                	jmp    c00034bc <create_chain+0x12a>
c00034b2:	48                   	dec    eax
c00034b3:	0f 85 06 ff ff ff    	jne    c00033bf <create_chain+0x2d>
c00034b9:	83 c8 ff             	or     eax,0xffffffff
c00034bc:	83 c4 1c             	add    esp,0x1c
c00034bf:	5b                   	pop    ebx
c00034c0:	5e                   	pop    esi
c00034c1:	5f                   	pop    edi
c00034c2:	5d                   	pop    ebp
c00034c3:	c3                   	ret    

c00034c4 <remove_chain>:
c00034c4:	55                   	push   ebp
c00034c5:	57                   	push   edi
c00034c6:	56                   	push   esi
c00034c7:	89 d6                	mov    esi,edx
c00034c9:	53                   	push   ebx
c00034ca:	83 ec 0c             	sub    esp,0xc
c00034cd:	83 fa 01             	cmp    edx,0x1
c00034d0:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034d2:	76 6a                	jbe    c000353e <remove_chain+0x7a>
c00034d4:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c00034d7:	76 65                	jbe    c000353e <remove_chain+0x7a>
c00034d9:	85 c9                	test   ecx,ecx
c00034db:	89 c5                	mov    ebp,eax
c00034dd:	89 ca                	mov    edx,ecx
c00034df:	74 0e                	je     c00034ef <remove_chain+0x2b>
c00034e1:	83 c9 ff             	or     ecx,0xffffffff
c00034e4:	89 d8                	mov    eax,ebx
c00034e6:	e8 57 f2 ff ff       	call   c0002742 <put_fat>
c00034eb:	85 c0                	test   eax,eax
c00034ed:	75 5b                	jne    c000354a <remove_chain+0x86>
c00034ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034f2:	89 f2                	mov    edx,esi
c00034f4:	e8 cc fc ff ff       	call   c00031c5 <get_fat.isra.2>
c00034f9:	85 c0                	test   eax,eax
c00034fb:	89 c7                	mov    edi,eax
c00034fd:	75 04                	jne    c0003503 <remove_chain+0x3f>
c00034ff:	31 c0                	xor    eax,eax
c0003501:	eb 47                	jmp    c000354a <remove_chain+0x86>
c0003503:	83 f8 01             	cmp    eax,0x1
c0003506:	74 36                	je     c000353e <remove_chain+0x7a>
c0003508:	83 f8 ff             	cmp    eax,0xffffffff
c000350b:	74 38                	je     c0003545 <remove_chain+0x81>
c000350d:	31 c9                	xor    ecx,ecx
c000350f:	89 f2                	mov    edx,esi
c0003511:	89 d8                	mov    eax,ebx
c0003513:	e8 2a f2 ff ff       	call   c0002742 <put_fat>
c0003518:	85 c0                	test   eax,eax
c000351a:	75 2e                	jne    c000354a <remove_chain+0x86>
c000351c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000351f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003522:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003525:	39 c8                	cmp    eax,ecx
c0003527:	73 0d                	jae    c0003536 <remove_chain+0x72>
c0003529:	40                   	inc    eax
c000352a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000352d:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003530:	83 c8 01             	or     eax,0x1
c0003533:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003536:	39 fa                	cmp    edx,edi
c0003538:	89 fe                	mov    esi,edi
c000353a:	77 b3                	ja     c00034ef <remove_chain+0x2b>
c000353c:	eb c1                	jmp    c00034ff <remove_chain+0x3b>
c000353e:	b8 02 00 00 00       	mov    eax,0x2
c0003543:	eb 05                	jmp    c000354a <remove_chain+0x86>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	83 c4 0c             	add    esp,0xc
c000354d:	5b                   	pop    ebx
c000354e:	5e                   	pop    esi
c000354f:	5f                   	pop    edi
c0003550:	5d                   	pop    ebp
c0003551:	c3                   	ret    

c0003552 <dir_next>:
c0003552:	55                   	push   ebp
c0003553:	57                   	push   edi
c0003554:	56                   	push   esi
c0003555:	53                   	push   ebx
c0003556:	83 ec 1c             	sub    esp,0x1c
c0003559:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000355c:	8b 38                	mov    edi,DWORD PTR [eax]
c000355e:	83 c6 20             	add    esi,0x20
c0003561:	81 fe ff ff 1f 00    	cmp    esi,0x1fffff
c0003567:	76 07                	jbe    c0003570 <dir_next+0x1e>
c0003569:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003570:	8b 48 18             	mov    ecx,DWORD PTR [eax+0x18]
c0003573:	bd 04 00 00 00       	mov    ebp,0x4
c0003578:	85 c9                	test   ecx,ecx
c000357a:	0f 84 cb 00 00 00    	je     c000364b <dir_next+0xf9>
c0003580:	89 c3                	mov    ebx,eax
c0003582:	89 f0                	mov    eax,esi
c0003584:	89 d5                	mov    ebp,edx
c0003586:	25 ff 01 00 00       	and    eax,0x1ff
c000358b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000358f:	0f 85 a6 00 00 00    	jne    c000363b <dir_next+0xe9>
c0003595:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003598:	41                   	inc    ecx
c0003599:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000359c:	85 d2                	test   edx,edx
c000359e:	75 22                	jne    c00035c2 <dir_next+0x70>
c00035a0:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00035a4:	89 f2                	mov    edx,esi
c00035a6:	c1 ea 05             	shr    edx,0x5
c00035a9:	39 c2                	cmp    edx,eax
c00035ab:	0f 82 8a 00 00 00    	jb     c000363b <dir_next+0xe9>
c00035b1:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00035b8:	bd 04 00 00 00       	mov    ebp,0x4
c00035bd:	e9 89 00 00 00       	jmp    c000364b <dir_next+0xf9>
c00035c2:	0f b7 47 0a          	movzx  eax,WORD PTR [edi+0xa]
c00035c6:	89 f1                	mov    ecx,esi
c00035c8:	c1 e9 09             	shr    ecx,0x9
c00035cb:	48                   	dec    eax
c00035cc:	85 c8                	test   eax,ecx
c00035ce:	75 6b                	jne    c000363b <dir_next+0xe9>
c00035d0:	89 f8                	mov    eax,edi
c00035d2:	e8 ee fb ff ff       	call   c00031c5 <get_fat.isra.2>
c00035d7:	83 f8 01             	cmp    eax,0x1
c00035da:	89 c1                	mov    ecx,eax
c00035dc:	77 07                	ja     c00035e5 <dir_next+0x93>
c00035de:	bd 02 00 00 00       	mov    ebp,0x2
c00035e3:	eb 66                	jmp    c000364b <dir_next+0xf9>
c00035e5:	83 f8 ff             	cmp    eax,0xffffffff
c00035e8:	75 07                	jne    c00035f1 <dir_next+0x9f>
c00035ea:	bd 01 00 00 00       	mov    ebp,0x1
c00035ef:	eb 5a                	jmp    c000364b <dir_next+0xf9>
c00035f1:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00035f4:	77 36                	ja     c000362c <dir_next+0xda>
c00035f6:	85 ed                	test   ebp,ebp
c00035f8:	74 b7                	je     c00035b1 <dir_next+0x5f>
c00035fa:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035fd:	89 d8                	mov    eax,ebx
c00035ff:	bd 07 00 00 00       	mov    ebp,0x7
c0003604:	e8 89 fd ff ff       	call   c0003392 <create_chain>
c0003609:	85 c0                	test   eax,eax
c000360b:	74 3e                	je     c000364b <dir_next+0xf9>
c000360d:	83 f8 01             	cmp    eax,0x1
c0003610:	74 cc                	je     c00035de <dir_next+0x8c>
c0003612:	83 f8 ff             	cmp    eax,0xffffffff
c0003615:	74 d3                	je     c00035ea <dir_next+0x98>
c0003617:	89 c2                	mov    edx,eax
c0003619:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000361d:	89 f8                	mov    eax,edi
c000361f:	e8 75 f2 ff ff       	call   c0002899 <dir_clear>
c0003624:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003628:	85 c0                	test   eax,eax
c000362a:	75 be                	jne    c00035ea <dir_next+0x98>
c000362c:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c000362f:	89 ca                	mov    edx,ecx
c0003631:	89 f8                	mov    eax,edi
c0003633:	e8 9a e9 ff ff       	call   c0001fd2 <clst2sect>
c0003638:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000363b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000363f:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003642:	31 ed                	xor    ebp,ebp
c0003644:	8d 44 07 34          	lea    eax,[edi+eax*1+0x34]
c0003648:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000364b:	83 c4 1c             	add    esp,0x1c
c000364e:	89 e8                	mov    eax,ebp
c0003650:	5b                   	pop    ebx
c0003651:	5e                   	pop    esi
c0003652:	5f                   	pop    edi
c0003653:	5d                   	pop    ebp
c0003654:	c3                   	ret    

c0003655 <dir_alloc>:
c0003655:	55                   	push   ebp
c0003656:	57                   	push   edi
c0003657:	89 d7                	mov    edi,edx
c0003659:	31 d2                	xor    edx,edx
c000365b:	56                   	push   esi
c000365c:	53                   	push   ebx
c000365d:	89 c3                	mov    ebx,eax
c000365f:	83 ec 0c             	sub    esp,0xc
c0003662:	8b 30                	mov    esi,DWORD PTR [eax]
c0003664:	e8 61 fc ff ff       	call   c00032ca <dir_sdi>
c0003669:	85 c0                	test   eax,eax
c000366b:	75 3b                	jne    c00036a8 <dir_alloc+0x53>
c000366d:	31 ed                	xor    ebp,ebp
c000366f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003672:	89 f0                	mov    eax,esi
c0003674:	e8 67 ec ff ff       	call   c00022e0 <move_window>
c0003679:	85 c0                	test   eax,eax
c000367b:	75 2b                	jne    c00036a8 <dir_alloc+0x53>
c000367d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003680:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003683:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003689:	74 04                	je     c000368f <dir_alloc+0x3a>
c000368b:	85 d2                	test   edx,edx
c000368d:	75 07                	jne    c0003696 <dir_alloc+0x41>
c000368f:	45                   	inc    ebp
c0003690:	39 fd                	cmp    ebp,edi
c0003692:	75 04                	jne    c0003698 <dir_alloc+0x43>
c0003694:	eb 1c                	jmp    c00036b2 <dir_alloc+0x5d>
c0003696:	31 ed                	xor    ebp,ebp
c0003698:	ba 01 00 00 00       	mov    edx,0x1
c000369d:	89 d8                	mov    eax,ebx
c000369f:	e8 ae fe ff ff       	call   c0003552 <dir_next>
c00036a4:	85 c0                	test   eax,eax
c00036a6:	74 c7                	je     c000366f <dir_alloc+0x1a>
c00036a8:	83 f8 04             	cmp    eax,0x4
c00036ab:	75 05                	jne    c00036b2 <dir_alloc+0x5d>
c00036ad:	b8 07 00 00 00       	mov    eax,0x7
c00036b2:	83 c4 0c             	add    esp,0xc
c00036b5:	5b                   	pop    ebx
c00036b6:	5e                   	pop    esi
c00036b7:	5f                   	pop    edi
c00036b8:	5d                   	pop    ebp
c00036b9:	c3                   	ret    

c00036ba <dir_read>:
c00036ba:	55                   	push   ebp
c00036bb:	57                   	push   edi
c00036bc:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036c1:	56                   	push   esi
c00036c2:	be 04 00 00 00       	mov    esi,0x4
c00036c7:	53                   	push   ebx
c00036c8:	89 c3                	mov    ebx,eax
c00036ca:	83 ec 1c             	sub    esp,0x1c
c00036cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00036cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036d3:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00036d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00036dc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00036df:	85 d2                	test   edx,edx
c00036e1:	0f 84 eb 00 00 00    	je     c00037d2 <dir_read+0x118>
c00036e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036eb:	e8 f0 eb ff ff       	call   c00022e0 <move_window>
c00036f0:	85 c0                	test   eax,eax
c00036f2:	89 c6                	mov    esi,eax
c00036f4:	0f 85 e3 00 00 00    	jne    c00037dd <dir_read+0x123>
c00036fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00036fd:	0f b6 2a             	movzx  ebp,BYTE PTR [edx]
c0003700:	89 e8                	mov    eax,ebp
c0003702:	0f b6 c0             	movzx  eax,al
c0003705:	85 c0                	test   eax,eax
c0003707:	89 04 24             	mov    DWORD PTR [esp],eax
c000370a:	0f 84 c8 00 00 00    	je     c00037d8 <dir_read+0x11e>
c0003710:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003713:	83 e1 3f             	and    ecx,0x3f
c0003716:	3d e5 00 00 00       	cmp    eax,0xe5
c000371b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000371e:	0f 84 94 00 00 00    	je     c00037b8 <dir_read+0xfe>
c0003724:	83 f8 2e             	cmp    eax,0x2e
c0003727:	0f 84 8b 00 00 00    	je     c00037b8 <dir_read+0xfe>
c000372d:	0f b6 c9             	movzx  ecx,cl
c0003730:	89 c8                	mov    eax,ecx
c0003732:	83 e0 df             	and    eax,0xffffffdf
c0003735:	83 f8 08             	cmp    eax,0x8
c0003738:	0f 94 c0             	sete   al
c000373b:	0f b6 c0             	movzx  eax,al
c000373e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003742:	75 74                	jne    c00037b8 <dir_read+0xfe>
c0003744:	83 f9 0f             	cmp    ecx,0xf
c0003747:	75 4f                	jne    c0003798 <dir_read+0xde>
c0003749:	f7 c5 40 00 00 00    	test   ebp,0x40
c000374f:	74 15                	je     c0003766 <dir_read+0xac>
c0003751:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003754:	81 e5 bf 00 00 00    	and    ebp,0xbf
c000375a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000375e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003761:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003764:	eb 0f                	jmp    c0003775 <dir_read+0xbb>
c0003766:	89 f8                	mov    eax,edi
c0003768:	bf ff ff ff ff       	mov    edi,0xffffffff
c000376d:	0f b6 c0             	movzx  eax,al
c0003770:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0003773:	75 48                	jne    c00037bd <dir_read+0x103>
c0003775:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003779:	bf ff ff ff ff       	mov    edi,0xffffffff
c000377e:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c0003781:	75 3a                	jne    c00037bd <dir_read+0x103>
c0003783:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003787:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000378a:	e8 60 e8 ff ff       	call   c0001fef <pick_lfn>
c000378f:	85 c0                	test   eax,eax
c0003791:	74 2a                	je     c00037bd <dir_read+0x103>
c0003793:	8d 7d ff             	lea    edi,[ebp-0x1]
c0003796:	eb 25                	jmp    c00037bd <dir_read+0x103>
c0003798:	89 f8                	mov    eax,edi
c000379a:	84 c0                	test   al,al
c000379c:	75 11                	jne    c00037af <dir_read+0xf5>
c000379e:	89 d0                	mov    eax,edx
c00037a0:	e8 26 ea ff ff       	call   c00021cb <sum_sfn>
c00037a5:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037a9:	75 04                	jne    c00037af <dir_read+0xf5>
c00037ab:	31 f6                	xor    esi,esi
c00037ad:	eb 35                	jmp    c00037e4 <dir_read+0x12a>
c00037af:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037b6:	eb 2c                	jmp    c00037e4 <dir_read+0x12a>
c00037b8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037bd:	31 d2                	xor    edx,edx
c00037bf:	89 d8                	mov    eax,ebx
c00037c1:	e8 8c fd ff ff       	call   c0003552 <dir_next>
c00037c6:	85 c0                	test   eax,eax
c00037c8:	89 c6                	mov    esi,eax
c00037ca:	0f 84 0c ff ff ff    	je     c00036dc <dir_read+0x22>
c00037d0:	eb 0b                	jmp    c00037dd <dir_read+0x123>
c00037d2:	85 f6                	test   esi,esi
c00037d4:	74 d5                	je     c00037ab <dir_read+0xf1>
c00037d6:	eb 05                	jmp    c00037dd <dir_read+0x123>
c00037d8:	be 04 00 00 00       	mov    esi,0x4
c00037dd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037e4:	83 c4 1c             	add    esp,0x1c
c00037e7:	89 f0                	mov    eax,esi
c00037e9:	5b                   	pop    ebx
c00037ea:	5e                   	pop    esi
c00037eb:	5f                   	pop    edi
c00037ec:	5d                   	pop    ebp
c00037ed:	c3                   	ret    

c00037ee <dir_remove>:
c00037ee:	57                   	push   edi
c00037ef:	56                   	push   esi
c00037f0:	53                   	push   ebx
c00037f1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00037f4:	89 c3                	mov    ebx,eax
c00037f6:	8b 30                	mov    esi,DWORD PTR [eax]
c00037f8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037fb:	83 fa ff             	cmp    edx,0xffffffff
c00037fe:	74 09                	je     c0003809 <dir_remove+0x1b>
c0003800:	e8 c5 fa ff ff       	call   c00032ca <dir_sdi>
c0003805:	85 c0                	test   eax,eax
c0003807:	75 34                	jne    c000383d <dir_remove+0x4f>
c0003809:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000380c:	89 f0                	mov    eax,esi
c000380e:	e8 cd ea ff ff       	call   c00022e0 <move_window>
c0003813:	85 c0                	test   eax,eax
c0003815:	75 1c                	jne    c0003833 <dir_remove+0x45>
c0003817:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000381a:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000381d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003821:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003824:	73 17                	jae    c000383d <dir_remove+0x4f>
c0003826:	31 d2                	xor    edx,edx
c0003828:	89 d8                	mov    eax,ebx
c000382a:	e8 23 fd ff ff       	call   c0003552 <dir_next>
c000382f:	85 c0                	test   eax,eax
c0003831:	74 d6                	je     c0003809 <dir_remove+0x1b>
c0003833:	83 f8 04             	cmp    eax,0x4
c0003836:	75 05                	jne    c000383d <dir_remove+0x4f>
c0003838:	b8 02 00 00 00       	mov    eax,0x2
c000383d:	5b                   	pop    ebx
c000383e:	5e                   	pop    esi
c000383f:	5f                   	pop    edi
c0003840:	c3                   	ret    

c0003841 <dir_find>:
c0003841:	55                   	push   ebp
c0003842:	31 d2                	xor    edx,edx
c0003844:	57                   	push   edi
c0003845:	56                   	push   esi
c0003846:	53                   	push   ebx
c0003847:	89 c3                	mov    ebx,eax
c0003849:	83 ec 1c             	sub    esp,0x1c
c000384c:	8b 00                	mov    eax,DWORD PTR [eax]
c000384e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003852:	89 d8                	mov    eax,ebx
c0003854:	e8 71 fa ff ff       	call   c00032ca <dir_sdi>
c0003859:	85 c0                	test   eax,eax
c000385b:	89 c6                	mov    esi,eax
c000385d:	0f 85 23 01 00 00    	jne    c0003986 <dir_find+0x145>
c0003863:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000386a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000386f:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003874:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003877:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000387b:	e8 60 ea ff ff       	call   c00022e0 <move_window>
c0003880:	85 c0                	test   eax,eax
c0003882:	89 c6                	mov    esi,eax
c0003884:	0f 85 fc 00 00 00    	jne    c0003986 <dir_find+0x145>
c000388a:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c000388d:	0f b6 55 00          	movzx  edx,BYTE PTR [ebp+0x0]
c0003891:	85 d2                	test   edx,edx
c0003893:	89 d1                	mov    ecx,edx
c0003895:	0f 84 e6 00 00 00    	je     c0003981 <dir_find+0x140>
c000389b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000389e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00038a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038a6:	83 e0 3f             	and    eax,0x3f
c00038a9:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038af:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038b2:	0f 84 a8 00 00 00    	je     c0003960 <dir_find+0x11f>
c00038b8:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c00038bd:	0f b6 c0             	movzx  eax,al
c00038c0:	74 0b                	je     c00038cd <dir_find+0x8c>
c00038c2:	83 f8 0f             	cmp    eax,0xf
c00038c5:	0f 85 95 00 00 00    	jne    c0003960 <dir_find+0x11f>
c00038cb:	eb 05                	jmp    c00038d2 <dir_find+0x91>
c00038cd:	83 f8 0f             	cmp    eax,0xf
c00038d0:	75 62                	jne    c0003934 <dir_find+0xf3>
c00038d2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00038d6:	0f 85 90 00 00 00    	jne    c000396c <dir_find+0x12b>
c00038dc:	f6 c1 40             	test   cl,0x40
c00038df:	74 15                	je     c00038f6 <dir_find+0xb5>
c00038e1:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c00038e4:	81 e1 bf 00 00 00    	and    ecx,0xbf
c00038ea:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00038ee:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038f1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00038f4:	eb 11                	jmp    c0003907 <dir_find+0xc6>
c00038f6:	89 f8                	mov    eax,edi
c00038f8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038fd:	0f b6 d0             	movzx  edx,al
c0003900:	0f b6 c1             	movzx  eax,cl
c0003903:	39 c2                	cmp    edx,eax
c0003905:	75 65                	jne    c000396c <dir_find+0x12b>
c0003907:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000390b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003910:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003913:	75 57                	jne    c000396c <dir_find+0x12b>
c0003915:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003919:	89 ea                	mov    edx,ebp
c000391b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000391f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003922:	e8 2e f3 ff ff       	call   c0002c55 <cmp_lfn>
c0003927:	85 c0                	test   eax,eax
c0003929:	74 41                	je     c000396c <dir_find+0x12b>
c000392b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000392f:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003932:	eb 38                	jmp    c000396c <dir_find+0x12b>
c0003934:	89 f8                	mov    eax,edi
c0003936:	84 c0                	test   al,al
c0003938:	75 0d                	jne    c0003947 <dir_find+0x106>
c000393a:	89 e8                	mov    eax,ebp
c000393c:	e8 8a e8 ff ff       	call   c00021cb <sum_sfn>
c0003941:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003945:	74 3f                	je     c0003986 <dir_find+0x145>
c0003947:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000394b:	75 13                	jne    c0003960 <dir_find+0x11f>
c000394d:	8d 53 20             	lea    edx,[ebx+0x20]
c0003950:	b9 0b 00 00 00       	mov    ecx,0xb
c0003955:	89 e8                	mov    eax,ebp
c0003957:	e8 6b e4 ff ff       	call   c0001dc7 <mem_cmp>
c000395c:	85 c0                	test   eax,eax
c000395e:	74 26                	je     c0003986 <dir_find+0x145>
c0003960:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003967:	bf ff ff ff ff       	mov    edi,0xffffffff
c000396c:	31 d2                	xor    edx,edx
c000396e:	89 d8                	mov    eax,ebx
c0003970:	e8 dd fb ff ff       	call   c0003552 <dir_next>
c0003975:	85 c0                	test   eax,eax
c0003977:	89 c6                	mov    esi,eax
c0003979:	0f 84 f5 fe ff ff    	je     c0003874 <dir_find+0x33>
c000397f:	eb 05                	jmp    c0003986 <dir_find+0x145>
c0003981:	be 04 00 00 00       	mov    esi,0x4
c0003986:	83 c4 1c             	add    esp,0x1c
c0003989:	89 f0                	mov    eax,esi
c000398b:	5b                   	pop    ebx
c000398c:	5e                   	pop    esi
c000398d:	5f                   	pop    edi
c000398e:	5d                   	pop    ebp
c000398f:	c3                   	ret    

c0003990 <follow_path>:
c0003990:	56                   	push   esi
c0003991:	53                   	push   ebx
c0003992:	89 c3                	mov    ebx,eax
c0003994:	83 ec 14             	sub    esp,0x14
c0003997:	8b 30                	mov    esi,DWORD PTR [eax]
c0003999:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000399d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a1:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039a4:	83 fa 2f             	cmp    edx,0x2f
c00039a7:	75 07                	jne    c00039b0 <follow_path+0x20>
c00039a9:	40                   	inc    eax
c00039aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039ae:	eb ed                	jmp    c000399d <follow_path+0xd>
c00039b0:	83 fa 5c             	cmp    edx,0x5c
c00039b3:	74 f4                	je     c00039a9 <follow_path+0x19>
c00039b5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00039bc:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00039bf:	77 3e                	ja     c00039ff <follow_path+0x6f>
c00039c1:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00039c5:	31 d2                	xor    edx,edx
c00039c7:	89 d8                	mov    eax,ebx
c00039c9:	e8 fc f8 ff ff       	call   c00032ca <dir_sdi>
c00039ce:	eb 57                	jmp    c0003a27 <follow_path+0x97>
c00039d0:	89 d8                	mov    eax,ebx
c00039d2:	e8 6a fe ff ff       	call   c0003841 <dir_find>
c00039d7:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00039da:	85 c0                	test   eax,eax
c00039dc:	75 32                	jne    c0003a10 <follow_path+0x80>
c00039de:	80 e2 04             	and    dl,0x4
c00039e1:	75 44                	jne    c0003a27 <follow_path+0x97>
c00039e3:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00039e7:	74 39                	je     c0003a22 <follow_path+0x92>
c00039e9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039ec:	25 ff 01 00 00       	and    eax,0x1ff
c00039f1:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c00039f5:	8a 06                	mov    al,BYTE PTR [esi]
c00039f7:	e8 78 f7 ff ff       	call   c0003174 <ld_clust.isra.0>
c00039fc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00039ff:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a03:	89 d8                	mov    eax,ebx
c0003a05:	e8 87 ef ff ff       	call   c0002991 <create_name>
c0003a0a:	85 c0                	test   eax,eax
c0003a0c:	74 c2                	je     c00039d0 <follow_path+0x40>
c0003a0e:	eb 17                	jmp    c0003a27 <follow_path+0x97>
c0003a10:	83 f8 04             	cmp    eax,0x4
c0003a13:	75 12                	jne    c0003a27 <follow_path+0x97>
c0003a15:	80 e2 04             	and    dl,0x4
c0003a18:	ba 05 00 00 00       	mov    edx,0x5
c0003a1d:	0f 44 c2             	cmove  eax,edx
c0003a20:	eb 05                	jmp    c0003a27 <follow_path+0x97>
c0003a22:	b8 05 00 00 00       	mov    eax,0x5
c0003a27:	83 c4 14             	add    esp,0x14
c0003a2a:	5b                   	pop    ebx
c0003a2b:	5e                   	pop    esi
c0003a2c:	c3                   	ret    

c0003a2d <dir_register>:
c0003a2d:	55                   	push   ebp
c0003a2e:	57                   	push   edi
c0003a2f:	56                   	push   esi
c0003a30:	be 06 00 00 00       	mov    esi,0x6
c0003a35:	53                   	push   ebx
c0003a36:	83 ec 2c             	sub    esp,0x2c
c0003a39:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a3c:	80 e2 a0             	and    dl,0xa0
c0003a3f:	0f 85 68 01 00 00    	jne    c0003bad <dir_register+0x180>
c0003a45:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a47:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003a4b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a4e:	31 ff                	xor    edi,edi
c0003a50:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0003a55:	74 03                	je     c0003a5a <dir_register+0x2d>
c0003a57:	47                   	inc    edi
c0003a58:	eb f6                	jmp    c0003a50 <dir_register+0x23>
c0003a5a:	89 c3                	mov    ebx,eax
c0003a5c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003a61:	8d 40 20             	lea    eax,[eax+0x20]
c0003a64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a68:	89 c2                	mov    edx,eax
c0003a6a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003a6e:	e8 34 e3 ff ff       	call   c0001da7 <mem_cpy>
c0003a73:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003a78:	74 4c                	je     c0003ac6 <dir_register+0x99>
c0003a7a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003a7e:	bd 01 00 00 00       	mov    ebp,0x1
c0003a83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a87:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0003a8a:	55                   	push   ebp
c0003a8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a8f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003a93:	e8 71 e6 ff ff       	call   c0002109 <gen_numname>
c0003a98:	58                   	pop    eax
c0003a99:	89 d8                	mov    eax,ebx
c0003a9b:	e8 a1 fd ff ff       	call   c0003841 <dir_find>
c0003aa0:	85 c0                	test   eax,eax
c0003aa2:	89 c6                	mov    esi,eax
c0003aa4:	75 10                	jne    c0003ab6 <dir_register+0x89>
c0003aa6:	45                   	inc    ebp
c0003aa7:	83 fd 64             	cmp    ebp,0x64
c0003aaa:	75 d7                	jne    c0003a83 <dir_register+0x56>
c0003aac:	be 07 00 00 00       	mov    esi,0x7
c0003ab1:	e9 f7 00 00 00       	jmp    c0003bad <dir_register+0x180>
c0003ab6:	83 f8 04             	cmp    eax,0x4
c0003ab9:	0f 85 ee 00 00 00    	jne    c0003bad <dir_register+0x180>
c0003abf:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003ac3:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003ac6:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003acb:	bd 01 00 00 00       	mov    ebp,0x1
c0003ad0:	74 0f                	je     c0003ae1 <dir_register+0xb4>
c0003ad2:	8d 47 0c             	lea    eax,[edi+0xc]
c0003ad5:	b9 0d 00 00 00       	mov    ecx,0xd
c0003ada:	31 d2                	xor    edx,edx
c0003adc:	f7 f1                	div    ecx
c0003ade:	8d 68 01             	lea    ebp,[eax+0x1]
c0003ae1:	89 ea                	mov    edx,ebp
c0003ae3:	89 d8                	mov    eax,ebx
c0003ae5:	e8 6b fb ff ff       	call   c0003655 <dir_alloc>
c0003aea:	85 c0                	test   eax,eax
c0003aec:	89 c6                	mov    esi,eax
c0003aee:	0f 85 b9 00 00 00    	jne    c0003bad <dir_register+0x180>
c0003af4:	89 ef                	mov    edi,ebp
c0003af6:	4f                   	dec    edi
c0003af7:	74 6e                	je     c0003b67 <dir_register+0x13a>
c0003af9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003afc:	89 f8                	mov    eax,edi
c0003afe:	c1 e0 05             	shl    eax,0x5
c0003b01:	29 c2                	sub    edx,eax
c0003b03:	89 d8                	mov    eax,ebx
c0003b05:	e8 c0 f7 ff ff       	call   c00032ca <dir_sdi>
c0003b0a:	85 c0                	test   eax,eax
c0003b0c:	89 c6                	mov    esi,eax
c0003b0e:	0f 85 99 00 00 00    	jne    c0003bad <dir_register+0x180>
c0003b14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b18:	e8 ae e6 ff ff       	call   c00021cb <sum_sfn>
c0003b1d:	0f b6 e8             	movzx  ebp,al
c0003b20:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b27:	e8 b4 e7 ff ff       	call   c00022e0 <move_window>
c0003b2c:	85 c0                	test   eax,eax
c0003b2e:	89 c6                	mov    esi,eax
c0003b30:	75 7b                	jne    c0003bad <dir_register+0x180>
c0003b32:	89 f8                	mov    eax,edi
c0003b34:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b37:	83 ec 0c             	sub    esp,0xc
c0003b3a:	0f b6 c8             	movzx  ecx,al
c0003b3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003b41:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b44:	55                   	push   ebp
c0003b45:	e8 25 e5 ff ff       	call   c000206f <put_lfn>
c0003b4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003b4e:	31 d2                	xor    edx,edx
c0003b50:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b54:	89 d8                	mov    eax,ebx
c0003b56:	e8 f7 f9 ff ff       	call   c0003552 <dir_next>
c0003b5b:	83 c4 10             	add    esp,0x10
c0003b5e:	85 c0                	test   eax,eax
c0003b60:	89 c6                	mov    esi,eax
c0003b62:	75 49                	jne    c0003bad <dir_register+0x180>
c0003b64:	4f                   	dec    edi
c0003b65:	75 b9                	jne    c0003b20 <dir_register+0xf3>
c0003b67:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b6e:	e8 6d e7 ff ff       	call   c00022e0 <move_window>
c0003b73:	85 c0                	test   eax,eax
c0003b75:	89 c6                	mov    esi,eax
c0003b77:	75 34                	jne    c0003bad <dir_register+0x180>
c0003b79:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003b7c:	b9 20 00 00 00       	mov    ecx,0x20
c0003b81:	31 d2                	xor    edx,edx
c0003b83:	e8 34 e2 ff ff       	call   c0001dbc <mem_set>
c0003b88:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003b8b:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b90:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003b94:	e8 0e e2 ff ff       	call   c0001da7 <mem_cpy>
c0003b99:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003b9c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b9f:	83 e0 18             	and    eax,0x18
c0003ba2:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003ba5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003bad:	83 c4 2c             	add    esp,0x2c
c0003bb0:	89 f0                	mov    eax,esi
c0003bb2:	5b                   	pop    ebx
c0003bb3:	5e                   	pop    esi
c0003bb4:	5f                   	pop    edi
c0003bb5:	5d                   	pop    ebp
c0003bb6:	c3                   	ret    

c0003bb7 <f_mount>:
c0003bb7:	53                   	push   ebx
c0003bb8:	83 ec 18             	sub    esp,0x18
c0003bbb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003bbf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003bc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bc7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003bcb:	e8 1b e6 ff ff       	call   c00021eb <get_ldnumber>
c0003bd0:	89 c2                	mov    edx,eax
c0003bd2:	b8 0b 00 00 00       	mov    eax,0xb
c0003bd7:	85 d2                	test   edx,edx
c0003bd9:	78 39                	js     c0003c14 <f_mount+0x5d>
c0003bdb:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003be2:	85 c0                	test   eax,eax
c0003be4:	74 03                	je     c0003be9 <f_mount+0x32>
c0003be6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003be9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003bed:	85 c0                	test   eax,eax
c0003bef:	74 03                	je     c0003bf4 <f_mount+0x3d>
c0003bf1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003bf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003bf8:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003bff:	31 c0                	xor    eax,eax
c0003c01:	84 db                	test   bl,bl
c0003c03:	74 0f                	je     c0003c14 <f_mount+0x5d>
c0003c05:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c09:	31 c9                	xor    ecx,ecx
c0003c0b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c0f:	e8 29 e8 ff ff       	call   c000243d <mount_volume>
c0003c14:	83 c4 18             	add    esp,0x18
c0003c17:	5b                   	pop    ebx
c0003c18:	c3                   	ret    

c0003c19 <f_open>:
c0003c19:	55                   	push   ebp
c0003c1a:	b8 09 00 00 00       	mov    eax,0x9
c0003c1f:	57                   	push   edi
c0003c20:	56                   	push   esi
c0003c21:	53                   	push   ebx
c0003c22:	83 ec 5c             	sub    esp,0x5c
c0003c25:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c29:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c2d:	85 db                	test   ebx,ebx
c0003c2f:	0f 84 9f 02 00 00    	je     c0003ed4 <f_open+0x2bb>
c0003c35:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c39:	89 fd                	mov    ebp,edi
c0003c3b:	83 e5 3f             	and    ebp,0x3f
c0003c3e:	89 e8                	mov    eax,ebp
c0003c40:	89 ee                	mov    esi,ebp
c0003c42:	0f b6 c8             	movzx  ecx,al
c0003c45:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c49:	e8 ef e7 ff ff       	call   c000243d <mount_volume>
c0003c4e:	85 c0                	test   eax,eax
c0003c50:	0f 85 78 02 00 00    	jne    c0003ece <f_open+0x2b5>
c0003c56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c5a:	83 ec 0c             	sub    esp,0xc
c0003c5d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c61:	68 00 02 00 00       	push   0x200
c0003c66:	e8 4d 1f 00 00       	call   c0005bb8 <ff_memalloc>
c0003c6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003c6f:	83 c4 10             	add    esp,0x10
c0003c72:	b8 11 00 00 00       	mov    eax,0x11
c0003c77:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003c7c:	0f 84 52 02 00 00    	je     c0003ed4 <f_open+0x2bb>
c0003c82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c86:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c8a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003c8e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003c91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c95:	e8 f6 fc ff ff       	call   c0003990 <follow_path>
c0003c9a:	85 c0                	test   eax,eax
c0003c9c:	75 0d                	jne    c0003cab <f_open+0x92>
c0003c9e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ca3:	ba 06 00 00 00       	mov    edx,0x6
c0003ca8:	0f 45 c2             	cmovne eax,edx
c0003cab:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cb1:	0f 84 d5 00 00 00    	je     c0003d8c <f_open+0x173>
c0003cb7:	85 c0                	test   eax,eax
c0003cb9:	74 21                	je     c0003cdc <f_open+0xc3>
c0003cbb:	83 f8 04             	cmp    eax,0x4
c0003cbe:	0f 85 ef 01 00 00    	jne    c0003eb3 <f_open+0x29a>
c0003cc4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cc8:	e8 60 fd ff ff       	call   c0003a2d <dir_register>
c0003ccd:	85 c0                	test   eax,eax
c0003ccf:	0f 85 de 01 00 00    	jne    c0003eb3 <f_open+0x29a>
c0003cd5:	83 cd 08             	or     ebp,0x8
c0003cd8:	89 ee                	mov    esi,ebp
c0003cda:	eb 2c                	jmp    c0003d08 <f_open+0xef>
c0003cdc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003ce0:	b8 07 00 00 00       	mov    eax,0x7
c0003ce5:	80 e2 11             	and    dl,0x11
c0003ce8:	0f 85 c5 01 00 00    	jne    c0003eb3 <f_open+0x29a>
c0003cee:	f7 c7 04 00 00 00    	test   edi,0x4
c0003cf4:	b8 08 00 00 00       	mov    eax,0x8
c0003cf9:	0f 85 b4 01 00 00    	jne    c0003eb3 <f_open+0x29a>
c0003cff:	83 e7 08             	and    edi,0x8
c0003d02:	0f 84 b1 00 00 00    	je     c0003db9 <f_open+0x1a0>
c0003d08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d10:	8a 00                	mov    al,BYTE PTR [eax]
c0003d12:	89 ea                	mov    edx,ebp
c0003d14:	e8 5b f4 ff ff       	call   c0003174 <ld_clust.isra.0>
c0003d19:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d1e:	89 c7                	mov    edi,eax
c0003d20:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d23:	e8 7c e0 ff ff       	call   c0001da4 <st_dword>
c0003d28:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d2c:	31 c9                	xor    ecx,ecx
c0003d2e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d36:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d3a:	e8 5e f4 ff ff       	call   c000319d <st_clust.isra.1>
c0003d3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d43:	31 d2                	xor    edx,edx
c0003d45:	83 c0 1c             	add    eax,0x1c
c0003d48:	e8 57 e0 ff ff       	call   c0001da4 <st_dword>
c0003d4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d51:	85 ff                	test   edi,edi
c0003d53:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d57:	74 60                	je     c0003db9 <f_open+0x1a0>
c0003d59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d5d:	31 c9                	xor    ecx,ecx
c0003d5f:	89 fa                	mov    edx,edi
c0003d61:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003d64:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d68:	e8 57 f7 ff ff       	call   c00034c4 <remove_chain>
c0003d6d:	85 c0                	test   eax,eax
c0003d6f:	0f 85 3e 01 00 00    	jne    c0003eb3 <f_open+0x29a>
c0003d75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d79:	89 ea                	mov    edx,ebp
c0003d7b:	4f                   	dec    edi
c0003d7c:	e8 5f e5 ff ff       	call   c00022e0 <move_window>
c0003d81:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003d85:	85 c0                	test   eax,eax
c0003d87:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003d8a:	eb 27                	jmp    c0003db3 <f_open+0x19a>
c0003d8c:	85 c0                	test   eax,eax
c0003d8e:	0f 85 1f 01 00 00    	jne    c0003eb3 <f_open+0x29a>
c0003d94:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d98:	b8 04 00 00 00       	mov    eax,0x4
c0003d9d:	f6 c2 10             	test   dl,0x10
c0003da0:	0f 85 0d 01 00 00    	jne    c0003eb3 <f_open+0x29a>
c0003da6:	83 e7 02             	and    edi,0x2
c0003da9:	74 0e                	je     c0003db9 <f_open+0x1a0>
c0003dab:	b8 07 00 00 00       	mov    eax,0x7
c0003db0:	80 e2 01             	and    dl,0x1
c0003db3:	0f 85 fa 00 00 00    	jne    c0003eb3 <f_open+0x29a>
c0003db9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dbf:	74 03                	je     c0003dc4 <f_open+0x1ab>
c0003dc1:	83 ce 40             	or     esi,0x40
c0003dc4:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003dc8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003dcc:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003dcf:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003dd2:	89 fa                	mov    edx,edi
c0003dd4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003dd7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003dda:	e8 95 f3 ff ff       	call   c0003174 <ld_clust.isra.0>
c0003ddf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003de2:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003de5:	e8 9e df ff ff       	call   c0001d88 <ld_dword>
c0003dea:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003dec:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003def:	31 d2                	xor    edx,edx
c0003df1:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003df4:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003df8:	b9 00 02 00 00       	mov    ecx,0x200
c0003dfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e01:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e08:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e0f:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e13:	89 f0                	mov    eax,esi
c0003e15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e18:	89 f8                	mov    eax,edi
c0003e1a:	e8 9d df ff ff       	call   c0001dbc <mem_set>
c0003e1f:	83 e6 20             	and    esi,0x20
c0003e22:	75 07                	jne    c0003e2b <f_open+0x212>
c0003e24:	31 c0                	xor    eax,eax
c0003e26:	e9 88 00 00 00       	jmp    c0003eb3 <f_open+0x29a>
c0003e2b:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003e2e:	85 f6                	test   esi,esi
c0003e30:	74 f2                	je     c0003e24 <f_open+0x20b>
c0003e32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e36:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003e39:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e3c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003e40:	31 c0                	xor    eax,eax
c0003e42:	c1 e5 09             	shl    ebp,0x9
c0003e45:	85 c0                	test   eax,eax
c0003e47:	75 23                	jne    c0003e6c <f_open+0x253>
c0003e49:	39 ee                	cmp    esi,ebp
c0003e4b:	76 1f                	jbe    c0003e6c <f_open+0x253>
c0003e4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e4f:	e8 71 f3 ff ff       	call   c00031c5 <get_fat.isra.2>
c0003e54:	89 c2                	mov    edx,eax
c0003e56:	b8 02 00 00 00       	mov    eax,0x2
c0003e5b:	83 fa 01             	cmp    edx,0x1
c0003e5e:	76 08                	jbe    c0003e68 <f_open+0x24f>
c0003e60:	31 c0                	xor    eax,eax
c0003e62:	83 fa ff             	cmp    edx,0xffffffff
c0003e65:	0f 94 c0             	sete   al
c0003e68:	29 ee                	sub    esi,ebp
c0003e6a:	eb d9                	jmp    c0003e45 <f_open+0x22c>
c0003e6c:	85 c0                	test   eax,eax
c0003e6e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003e71:	75 40                	jne    c0003eb3 <f_open+0x29a>
c0003e73:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003e79:	74 a9                	je     c0003e24 <f_open+0x20b>
c0003e7b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e7f:	89 e8                	mov    eax,ebp
c0003e81:	e8 4c e1 ff ff       	call   c0001fd2 <clst2sect>
c0003e86:	89 c2                	mov    edx,eax
c0003e88:	b8 02 00 00 00       	mov    eax,0x2
c0003e8d:	85 d2                	test   edx,edx
c0003e8f:	74 22                	je     c0003eb3 <f_open+0x29a>
c0003e91:	c1 ee 09             	shr    esi,0x9
c0003e94:	8d 04 16             	lea    eax,[esi+edx*1]
c0003e97:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003e9a:	6a 01                	push   0x1
c0003e9c:	50                   	push   eax
c0003e9d:	57                   	push   edi
c0003e9e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003ea2:	50                   	push   eax
c0003ea3:	e8 88 de ff ff       	call   c0001d30 <disk_read>
c0003ea8:	83 c4 10             	add    esp,0x10
c0003eab:	85 c0                	test   eax,eax
c0003ead:	0f 95 c0             	setne  al
c0003eb0:	0f b6 c0             	movzx  eax,al
c0003eb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003eb7:	83 ec 0c             	sub    esp,0xc
c0003eba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003ebe:	e8 0d 1d 00 00       	call   c0005bd0 <ff_memfree>
c0003ec3:	83 c4 10             	add    esp,0x10
c0003ec6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003eca:	85 c0                	test   eax,eax
c0003ecc:	74 06                	je     c0003ed4 <f_open+0x2bb>
c0003ece:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003ed4:	83 c4 5c             	add    esp,0x5c
c0003ed7:	5b                   	pop    ebx
c0003ed8:	5e                   	pop    esi
c0003ed9:	5f                   	pop    edi
c0003eda:	5d                   	pop    ebp
c0003edb:	c3                   	ret    

c0003edc <f_read>:
c0003edc:	55                   	push   ebp
c0003edd:	57                   	push   edi
c0003ede:	56                   	push   esi
c0003edf:	53                   	push   ebx
c0003ee0:	83 ec 2c             	sub    esp,0x2c
c0003ee3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ee7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003eeb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003eef:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003ef3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ef9:	89 d8                	mov    eax,ebx
c0003efb:	e8 37 e3 ff ff       	call   c0002237 <validate>
c0003f00:	85 c0                	test   eax,eax
c0003f02:	89 c5                	mov    ebp,eax
c0003f04:	0f 85 a9 01 00 00    	jne    c00040b3 <f_read+0x1d7>
c0003f0a:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f0e:	85 ed                	test   ebp,ebp
c0003f10:	0f 85 9d 01 00 00    	jne    c00040b3 <f_read+0x1d7>
c0003f16:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f1a:	0f 84 8e 01 00 00    	je     c00040ae <f_read+0x1d2>
c0003f20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f23:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f26:	39 f0                	cmp    eax,esi
c0003f28:	0f 46 f0             	cmovbe esi,eax
c0003f2b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f2f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0003f34:	0f 84 79 01 00 00    	je     c00040b3 <f_read+0x1d7>
c0003f3a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f3d:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f42:	0f 85 29 01 00 00    	jne    c0004071 <f_read+0x195>
c0003f48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f4c:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f50:	89 c2                	mov    edx,eax
c0003f52:	c1 ea 09             	shr    edx,0x9
c0003f55:	4f                   	dec    edi
c0003f56:	21 d7                	and    edi,edx
c0003f58:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f5c:	75 3c                	jne    c0003f9a <f_read+0xbe>
c0003f5e:	85 c0                	test   eax,eax
c0003f60:	75 05                	jne    c0003f67 <f_read+0x8b>
c0003f62:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f65:	eb 0a                	jmp    c0003f71 <f_read+0x95>
c0003f67:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f6c:	e8 54 f2 ff ff       	call   c00031c5 <get_fat.isra.2>
c0003f71:	83 f8 01             	cmp    eax,0x1
c0003f74:	77 0e                	ja     c0003f84 <f_read+0xa8>
c0003f76:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f7a:	bd 02 00 00 00       	mov    ebp,0x2
c0003f7f:	e9 2f 01 00 00       	jmp    c00040b3 <f_read+0x1d7>
c0003f84:	83 f8 ff             	cmp    eax,0xffffffff
c0003f87:	75 0e                	jne    c0003f97 <f_read+0xbb>
c0003f89:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f8d:	bd 01 00 00 00       	mov    ebp,0x1
c0003f92:	e9 1c 01 00 00       	jmp    c00040b3 <f_read+0x1d7>
c0003f97:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f9a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003f9e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fa1:	89 c8                	mov    eax,ecx
c0003fa3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fa7:	e8 26 e0 ff ff       	call   c0001fd2 <clst2sect>
c0003fac:	85 c0                	test   eax,eax
c0003fae:	74 c6                	je     c0003f76 <f_read+0x9a>
c0003fb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fb4:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fbc:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fbf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fc3:	76 5a                	jbe    c000401f <f_read+0x143>
c0003fc5:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fc9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fcd:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fd1:	c1 ee 09             	shr    esi,0x9
c0003fd4:	01 f2                	add    edx,esi
c0003fd6:	39 c2                	cmp    edx,eax
c0003fd8:	76 06                	jbe    c0003fe0 <f_read+0x104>
c0003fda:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003fde:	89 c6                	mov    esi,eax
c0003fe0:	56                   	push   esi
c0003fe1:	57                   	push   edi
c0003fe2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003fe6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003fea:	50                   	push   eax
c0003feb:	e8 40 dd ff ff       	call   c0001d30 <disk_read>
c0003ff0:	83 c4 10             	add    esp,0x10
c0003ff3:	85 c0                	test   eax,eax
c0003ff5:	75 92                	jne    c0003f89 <f_read+0xad>
c0003ff7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0003ffb:	74 1d                	je     c000401a <f_read+0x13e>
c0003ffd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004000:	29 f8                	sub    eax,edi
c0004002:	39 f0                	cmp    eax,esi
c0004004:	73 14                	jae    c000401a <f_read+0x13e>
c0004006:	8d 53 28             	lea    edx,[ebx+0x28]
c0004009:	c1 e0 09             	shl    eax,0x9
c000400c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004010:	b9 00 02 00 00       	mov    ecx,0x200
c0004015:	e8 8d dd ff ff       	call   c0001da7 <mem_cpy>
c000401a:	c1 e6 09             	shl    esi,0x9
c000401d:	eb 79                	jmp    c0004098 <f_read+0x1bc>
c000401f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004022:	39 f8                	cmp    eax,edi
c0004024:	74 48                	je     c000406e <f_read+0x192>
c0004026:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000402a:	8d 73 28             	lea    esi,[ebx+0x28]
c000402d:	74 22                	je     c0004051 <f_read+0x175>
c000402f:	6a 01                	push   0x1
c0004031:	50                   	push   eax
c0004032:	56                   	push   esi
c0004033:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004037:	50                   	push   eax
c0004038:	e8 09 dd ff ff       	call   c0001d46 <disk_write>
c000403d:	83 c4 10             	add    esp,0x10
c0004040:	85 c0                	test   eax,eax
c0004042:	0f 85 41 ff ff ff    	jne    c0003f89 <f_read+0xad>
c0004048:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000404b:	83 e0 7f             	and    eax,0x7f
c000404e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004051:	6a 01                	push   0x1
c0004053:	57                   	push   edi
c0004054:	56                   	push   esi
c0004055:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004059:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000405d:	50                   	push   eax
c000405e:	e8 cd dc ff ff       	call   c0001d30 <disk_read>
c0004063:	83 c4 10             	add    esp,0x10
c0004066:	85 c0                	test   eax,eax
c0004068:	0f 85 1b ff ff ff    	jne    c0003f89 <f_read+0xad>
c000406e:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004071:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004074:	be 00 02 00 00       	mov    esi,0x200
c0004079:	25 ff 01 00 00       	and    eax,0x1ff
c000407e:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0004082:	29 c6                	sub    esi,eax
c0004084:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004088:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c000408c:	0f 46 74 24 04       	cmovbe esi,DWORD PTR [esp+0x4]
c0004091:	89 f1                	mov    ecx,esi
c0004093:	e8 0f dd ff ff       	call   c0001da7 <mem_cpy>
c0004098:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000409c:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c00040a0:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00040a4:	01 30                	add    DWORD PTR [eax],esi
c00040a6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00040a9:	e9 81 fe ff ff       	jmp    c0003f2f <f_read+0x53>
c00040ae:	bd 07 00 00 00       	mov    ebp,0x7
c00040b3:	83 c4 2c             	add    esp,0x2c
c00040b6:	89 e8                	mov    eax,ebp
c00040b8:	5b                   	pop    ebx
c00040b9:	5e                   	pop    esi
c00040ba:	5f                   	pop    edi
c00040bb:	5d                   	pop    ebp
c00040bc:	c3                   	ret    

c00040bd <f_write>:
c00040bd:	55                   	push   ebp
c00040be:	57                   	push   edi
c00040bf:	56                   	push   esi
c00040c0:	53                   	push   ebx
c00040c1:	83 ec 2c             	sub    esp,0x2c
c00040c4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00040c8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00040cc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00040d0:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00040d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00040da:	89 d8                	mov    eax,ebx
c00040dc:	e8 56 e1 ff ff       	call   c0002237 <validate>
c00040e1:	85 c0                	test   eax,eax
c00040e3:	89 c5                	mov    ebp,eax
c00040e5:	0f 85 12 02 00 00    	jne    c00042fd <f_write+0x240>
c00040eb:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00040ef:	85 ed                	test   ebp,ebp
c00040f1:	0f 85 06 02 00 00    	jne    c00042fd <f_write+0x240>
c00040f7:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00040fb:	0f 84 f7 01 00 00    	je     c00042f8 <f_write+0x23b>
c0004101:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004104:	89 c1                	mov    ecx,eax
c0004106:	01 f9                	add    ecx,edi
c0004108:	0f 83 ec 00 00 00    	jae    c00041fa <f_write+0x13d>
c000410e:	f7 d0                	not    eax
c0004110:	89 c7                	mov    edi,eax
c0004112:	e9 e3 00 00 00       	jmp    c00041fa <f_write+0x13d>
c0004117:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000411a:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004120:	0f 85 a1 01 00 00    	jne    c00042c7 <f_write+0x20a>
c0004126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000412a:	89 d1                	mov    ecx,edx
c000412c:	c1 e9 09             	shr    ecx,0x9
c000412f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004133:	48                   	dec    eax
c0004134:	21 c8                	and    eax,ecx
c0004136:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000413a:	0f 84 c4 00 00 00    	je     c0004204 <f_write+0x147>
c0004140:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004144:	0f 85 1e 01 00 00    	jne    c0004268 <f_write+0x1ab>
c000414a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000414e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004151:	89 c8                	mov    eax,ecx
c0004153:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004157:	e8 76 de ff ff       	call   c0001fd2 <clst2sect>
c000415c:	85 c0                	test   eax,eax
c000415e:	0f 84 ce 00 00 00    	je     c0004232 <f_write+0x175>
c0004164:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0004168:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c000416e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004172:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004176:	0f 86 18 01 00 00    	jbe    c0004294 <f_write+0x1d7>
c000417c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004180:	89 fe                	mov    esi,edi
c0004182:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004186:	c1 ee 09             	shr    esi,0x9
c0004189:	01 f2                	add    edx,esi
c000418b:	39 c2                	cmp    edx,eax
c000418d:	76 06                	jbe    c0004195 <f_write+0xd8>
c000418f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004193:	89 c6                	mov    esi,eax
c0004195:	56                   	push   esi
c0004196:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000419a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000419e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041a2:	50                   	push   eax
c00041a3:	e8 9e db ff ff       	call   c0001d46 <disk_write>
c00041a8:	83 c4 10             	add    esp,0x10
c00041ab:	85 c0                	test   eax,eax
c00041ad:	0f 85 92 00 00 00    	jne    c0004245 <f_write+0x188>
c00041b3:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00041b6:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c00041ba:	39 f2                	cmp    edx,esi
c00041bc:	73 1d                	jae    c00041db <f_write+0x11e>
c00041be:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c1:	c1 e2 09             	shl    edx,0x9
c00041c4:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00041c8:	b9 00 02 00 00       	mov    ecx,0x200
c00041cd:	e8 d5 db ff ff       	call   c0001da7 <mem_cpy>
c00041d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00041d5:	83 e0 7f             	and    eax,0x7f
c00041d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00041db:	c1 e6 09             	shl    esi,0x9
c00041de:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041e2:	29 f7                	sub    edi,esi
c00041e4:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00041e8:	01 30                	add    DWORD PTR [eax],esi
c00041ea:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00041ed:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c00041f0:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00041f3:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c00041f7:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00041fa:	85 ff                	test   edi,edi
c00041fc:	0f 85 15 ff ff ff    	jne    c0004117 <f_write+0x5a>
c0004202:	eb 1b                	jmp    c000421f <f_write+0x162>
c0004204:	85 d2                	test   edx,edx
c0004206:	75 09                	jne    c0004211 <f_write+0x154>
c0004208:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000420b:	85 c0                	test   eax,eax
c000420d:	75 1e                	jne    c000422d <f_write+0x170>
c000420f:	eb 03                	jmp    c0004214 <f_write+0x157>
c0004211:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004214:	89 d8                	mov    eax,ebx
c0004216:	e8 77 f1 ff ff       	call   c0003392 <create_chain>
c000421b:	85 c0                	test   eax,eax
c000421d:	75 0e                	jne    c000422d <f_write+0x170>
c000421f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004222:	83 c8 40             	or     eax,0x40
c0004225:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004228:	e9 d0 00 00 00       	jmp    c00042fd <f_write+0x240>
c000422d:	83 f8 01             	cmp    eax,0x1
c0004230:	75 0e                	jne    c0004240 <f_write+0x183>
c0004232:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004236:	bd 02 00 00 00       	mov    ebp,0x2
c000423b:	e9 bd 00 00 00       	jmp    c00042fd <f_write+0x240>
c0004240:	83 f8 ff             	cmp    eax,0xffffffff
c0004243:	75 0e                	jne    c0004253 <f_write+0x196>
c0004245:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004249:	bd 01 00 00 00       	mov    ebp,0x1
c000424e:	e9 aa 00 00 00       	jmp    c00042fd <f_write+0x240>
c0004253:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004257:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000425a:	0f 85 e0 fe ff ff    	jne    c0004140 <f_write+0x83>
c0004260:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004263:	e9 d8 fe ff ff       	jmp    c0004140 <f_write+0x83>
c0004268:	8d 43 28             	lea    eax,[ebx+0x28]
c000426b:	6a 01                	push   0x1
c000426d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004270:	50                   	push   eax
c0004271:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004275:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004279:	50                   	push   eax
c000427a:	e8 c7 da ff ff       	call   c0001d46 <disk_write>
c000427f:	83 c4 10             	add    esp,0x10
c0004282:	85 c0                	test   eax,eax
c0004284:	75 bf                	jne    c0004245 <f_write+0x188>
c0004286:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004289:	83 e0 7f             	and    eax,0x7f
c000428c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428f:	e9 b6 fe ff ff       	jmp    c000414a <f_write+0x8d>
c0004294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004298:	39 43 1c             	cmp    DWORD PTR [ebx+0x1c],eax
c000429b:	74 23                	je     c00042c0 <f_write+0x203>
c000429d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042a0:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00042a3:	76 1b                	jbe    c00042c0 <f_write+0x203>
c00042a5:	8d 43 28             	lea    eax,[ebx+0x28]
c00042a8:	6a 01                	push   0x1
c00042aa:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00042ae:	50                   	push   eax
c00042af:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042b3:	50                   	push   eax
c00042b4:	e8 77 da ff ff       	call   c0001d30 <disk_read>
c00042b9:	83 c4 10             	add    esp,0x10
c00042bc:	85 c0                	test   eax,eax
c00042be:	75 85                	jne    c0004245 <f_write+0x188>
c00042c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00042c4:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00042c7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ca:	be 00 02 00 00       	mov    esi,0x200
c00042cf:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00042d3:	25 ff 01 00 00       	and    eax,0x1ff
c00042d8:	29 c6                	sub    esi,eax
c00042da:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00042de:	39 f7                	cmp    edi,esi
c00042e0:	0f 46 f7             	cmovbe esi,edi
c00042e3:	89 f1                	mov    ecx,esi
c00042e5:	e8 bd da ff ff       	call   c0001da7 <mem_cpy>
c00042ea:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ed:	83 c8 80             	or     eax,0xffffff80
c00042f0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f3:	e9 e6 fe ff ff       	jmp    c00041de <f_write+0x121>
c00042f8:	bd 07 00 00 00       	mov    ebp,0x7
c00042fd:	83 c4 2c             	add    esp,0x2c
c0004300:	89 e8                	mov    eax,ebp
c0004302:	5b                   	pop    ebx
c0004303:	5e                   	pop    esi
c0004304:	5f                   	pop    edi
c0004305:	5d                   	pop    ebp
c0004306:	c3                   	ret    

c0004307 <f_sync>:
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 14             	sub    esp,0x14
c000430c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004310:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004314:	89 d8                	mov    eax,ebx
c0004316:	e8 1c df ff ff       	call   c0002237 <validate>
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 a3 00 00 00    	jne    c00043c6 <f_sync+0xbf>
c0004323:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004326:	f6 c2 40             	test   dl,0x40
c0004329:	0f 84 97 00 00 00    	je     c00043c6 <f_sync+0xbf>
c000432f:	80 e2 80             	and    dl,0x80
c0004332:	74 2e                	je     c0004362 <f_sync+0x5b>
c0004334:	8d 43 28             	lea    eax,[ebx+0x28]
c0004337:	6a 01                	push   0x1
c0004339:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000433c:	50                   	push   eax
c000433d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004341:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004345:	50                   	push   eax
c0004346:	e8 fb d9 ff ff       	call   c0001d46 <disk_write>
c000434b:	83 c4 10             	add    esp,0x10
c000434e:	89 c2                	mov    edx,eax
c0004350:	b8 01 00 00 00       	mov    eax,0x1
c0004355:	85 d2                	test   edx,edx
c0004357:	75 6d                	jne    c00043c6 <f_sync+0xbf>
c0004359:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000435c:	83 e0 7f             	and    eax,0x7f
c000435f:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004362:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004365:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004369:	e8 72 df ff ff       	call   c00022e0 <move_window>
c000436e:	85 c0                	test   eax,eax
c0004370:	75 54                	jne    c00043c6 <f_sync+0xbf>
c0004372:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004375:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c0004378:	89 f2                	mov    edx,esi
c000437a:	83 c8 20             	or     eax,0x20
c000437d:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004380:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004383:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004385:	e8 13 ee ff ff       	call   c000319d <st_clust.isra.1>
c000438a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438d:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004390:	e8 0f da ff ff       	call   c0001da4 <st_dword>
c0004395:	8d 46 16             	lea    eax,[esi+0x16]
c0004398:	ba 00 00 21 50       	mov    edx,0x50210000
c000439d:	e8 02 da ff ff       	call   c0001da4 <st_dword>
c00043a2:	8d 46 12             	lea    eax,[esi+0x12]
c00043a5:	31 d2                	xor    edx,edx
c00043a7:	e8 f4 d9 ff ff       	call   c0001da0 <st_word>
c00043ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043b0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00043b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043b8:	e8 55 e9 ff ff       	call   c0002d12 <sync_fs>
c00043bd:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043c0:	83 e2 bf             	and    edx,0xffffffbf
c00043c3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00043c6:	83 c4 14             	add    esp,0x14
c00043c9:	5b                   	pop    ebx
c00043ca:	5e                   	pop    esi
c00043cb:	c3                   	ret    

c00043cc <f_close>:
c00043cc:	53                   	push   ebx
c00043cd:	83 ec 24             	sub    esp,0x24
c00043d0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00043d4:	53                   	push   ebx
c00043d5:	e8 2d ff ff ff       	call   c0004307 <f_sync>
c00043da:	83 c4 10             	add    esp,0x10
c00043dd:	85 c0                	test   eax,eax
c00043df:	75 15                	jne    c00043f6 <f_close+0x2a>
c00043e1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00043e5:	89 d8                	mov    eax,ebx
c00043e7:	e8 4b de ff ff       	call   c0002237 <validate>
c00043ec:	85 c0                	test   eax,eax
c00043ee:	75 06                	jne    c00043f6 <f_close+0x2a>
c00043f0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00043f6:	83 c4 18             	add    esp,0x18
c00043f9:	5b                   	pop    ebx
c00043fa:	c3                   	ret    

c00043fb <f_lseek>:
c00043fb:	55                   	push   ebp
c00043fc:	57                   	push   edi
c00043fd:	56                   	push   esi
c00043fe:	53                   	push   ebx
c00043ff:	83 ec 2c             	sub    esp,0x2c
c0004402:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004406:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000440a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000440e:	89 d8                	mov    eax,ebx
c0004410:	e8 22 de ff ff       	call   c0002237 <validate>
c0004415:	85 c0                	test   eax,eax
c0004417:	89 c5                	mov    ebp,eax
c0004419:	0f 85 82 01 00 00    	jne    c00045a1 <f_lseek+0x1a6>
c000441f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004423:	85 ed                	test   ebp,ebp
c0004425:	0f 85 76 01 00 00    	jne    c00045a1 <f_lseek+0x1a6>
c000442b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000442e:	39 f0                	cmp    eax,esi
c0004430:	73 07                	jae    c0004439 <f_lseek+0x3e>
c0004432:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004436:	0f 44 f0             	cmove  esi,eax
c0004439:	85 f6                	test   esi,esi
c000443b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000443e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004445:	75 07                	jne    c000444e <f_lseek+0x53>
c0004447:	31 f6                	xor    esi,esi
c0004449:	e9 e2 00 00 00       	jmp    c0004530 <f_lseek+0x135>
c000444e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004452:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004456:	c1 e7 09             	shl    edi,0x9
c0004459:	85 c9                	test   ecx,ecx
c000445b:	74 28                	je     c0004485 <f_lseek+0x8a>
c000445d:	8d 46 ff             	lea    eax,[esi-0x1]
c0004460:	31 d2                	xor    edx,edx
c0004462:	49                   	dec    ecx
c0004463:	f7 f7                	div    edi
c0004465:	31 d2                	xor    edx,edx
c0004467:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000446b:	89 c8                	mov    eax,ecx
c000446d:	f7 f7                	div    edi
c000446f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004473:	72 10                	jb     c0004485 <f_lseek+0x8a>
c0004475:	89 f8                	mov    eax,edi
c0004477:	f7 d8                	neg    eax
c0004479:	21 c1                	and    ecx,eax
c000447b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000447e:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004481:	29 ce                	sub    esi,ecx
c0004483:	eb 3c                	jmp    c00044c1 <f_lseek+0xc6>
c0004485:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004488:	85 c0                	test   eax,eax
c000448a:	75 32                	jne    c00044be <f_lseek+0xc3>
c000448c:	31 d2                	xor    edx,edx
c000448e:	89 d8                	mov    eax,ebx
c0004490:	e8 fd ee ff ff       	call   c0003392 <create_chain>
c0004495:	83 f8 01             	cmp    eax,0x1
c0004498:	75 0e                	jne    c00044a8 <f_lseek+0xad>
c000449a:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000449e:	bd 02 00 00 00       	mov    ebp,0x2
c00044a3:	e9 f9 00 00 00       	jmp    c00045a1 <f_lseek+0x1a6>
c00044a8:	83 f8 ff             	cmp    eax,0xffffffff
c00044ab:	75 0e                	jne    c00044bb <f_lseek+0xc0>
c00044ad:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b1:	bd 01 00 00 00       	mov    ebp,0x1
c00044b6:	e9 e6 00 00 00       	jmp    c00045a1 <f_lseek+0x1a6>
c00044bb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044be:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c1:	85 c0                	test   eax,eax
c00044c3:	74 82                	je     c0004447 <f_lseek+0x4c>
c00044c5:	39 fe                	cmp    esi,edi
c00044c7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044ca:	76 3d                	jbe    c0004509 <f_lseek+0x10e>
c00044cc:	01 fa                	add    edx,edi
c00044ce:	29 fe                	sub    esi,edi
c00044d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044d4:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00044d7:	89 c2                	mov    edx,eax
c00044d9:	74 0d                	je     c00044e8 <f_lseek+0xed>
c00044db:	89 d8                	mov    eax,ebx
c00044dd:	e8 b0 ee ff ff       	call   c0003392 <create_chain>
c00044e2:	85 c0                	test   eax,eax
c00044e4:	75 09                	jne    c00044ef <f_lseek+0xf4>
c00044e6:	eb 1f                	jmp    c0004507 <f_lseek+0x10c>
c00044e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00044ea:	e8 d6 ec ff ff       	call   c00031c5 <get_fat.isra.2>
c00044ef:	83 f8 ff             	cmp    eax,0xffffffff
c00044f2:	74 b9                	je     c00044ad <f_lseek+0xb2>
c00044f4:	83 f8 01             	cmp    eax,0x1
c00044f7:	76 a1                	jbe    c000449a <f_lseek+0x9f>
c00044f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00044fd:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004500:	76 98                	jbe    c000449a <f_lseek+0x9f>
c0004502:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004505:	eb be                	jmp    c00044c5 <f_lseek+0xca>
c0004507:	31 f6                	xor    esi,esi
c0004509:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000450c:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004512:	0f 84 2f ff ff ff    	je     c0004447 <f_lseek+0x4c>
c0004518:	89 c2                	mov    edx,eax
c000451a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000451e:	e8 af da ff ff       	call   c0001fd2 <clst2sect>
c0004523:	85 c0                	test   eax,eax
c0004525:	0f 84 6f ff ff ff    	je     c000449a <f_lseek+0x9f>
c000452b:	c1 ee 09             	shr    esi,0x9
c000452e:	01 c6                	add    esi,eax
c0004530:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004533:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004536:	76 0c                	jbe    c0004544 <f_lseek+0x149>
c0004538:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000453b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000453e:	83 ca 40             	or     edx,0x40
c0004541:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004544:	a9 ff 01 00 00       	test   eax,0x1ff
c0004549:	74 56                	je     c00045a1 <f_lseek+0x1a6>
c000454b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000454e:	39 f0                	cmp    eax,esi
c0004550:	74 4f                	je     c00045a1 <f_lseek+0x1a6>
c0004552:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004556:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004559:	74 26                	je     c0004581 <f_lseek+0x186>
c000455b:	6a 01                	push   0x1
c000455d:	50                   	push   eax
c000455e:	57                   	push   edi
c000455f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004563:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004567:	50                   	push   eax
c0004568:	e8 d9 d7 ff ff       	call   c0001d46 <disk_write>
c000456d:	83 c4 10             	add    esp,0x10
c0004570:	85 c0                	test   eax,eax
c0004572:	0f 85 35 ff ff ff    	jne    c00044ad <f_lseek+0xb2>
c0004578:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000457b:	83 e0 7f             	and    eax,0x7f
c000457e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004581:	6a 01                	push   0x1
c0004583:	56                   	push   esi
c0004584:	57                   	push   edi
c0004585:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004589:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458d:	50                   	push   eax
c000458e:	e8 9d d7 ff ff       	call   c0001d30 <disk_read>
c0004593:	83 c4 10             	add    esp,0x10
c0004596:	85 c0                	test   eax,eax
c0004598:	0f 85 0f ff ff ff    	jne    c00044ad <f_lseek+0xb2>
c000459e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045a1:	83 c4 2c             	add    esp,0x2c
c00045a4:	89 e8                	mov    eax,ebp
c00045a6:	5b                   	pop    ebx
c00045a7:	5e                   	pop    esi
c00045a8:	5f                   	pop    edi
c00045a9:	5d                   	pop    ebp
c00045aa:	c3                   	ret    

c00045ab <f_opendir>:
c00045ab:	56                   	push   esi
c00045ac:	b8 09 00 00 00       	mov    eax,0x9
c00045b1:	53                   	push   ebx
c00045b2:	83 ec 24             	sub    esp,0x24
c00045b5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00045b9:	85 db                	test   ebx,ebx
c00045bb:	0f 84 af 00 00 00    	je     c0004670 <f_opendir+0xc5>
c00045c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045c5:	31 c9                	xor    ecx,ecx
c00045c7:	8d 44 24 34          	lea    eax,[esp+0x34]
c00045cb:	e8 6d de ff ff       	call   c000243d <mount_volume>
c00045d0:	85 c0                	test   eax,eax
c00045d2:	0f 85 92 00 00 00    	jne    c000466a <f_opendir+0xbf>
c00045d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045dc:	83 ec 0c             	sub    esp,0xc
c00045df:	89 03                	mov    DWORD PTR [ebx],eax
c00045e1:	68 00 02 00 00       	push   0x200
c00045e6:	e8 cd 15 00 00       	call   c0005bb8 <ff_memalloc>
c00045eb:	83 c4 10             	add    esp,0x10
c00045ee:	89 c6                	mov    esi,eax
c00045f0:	b8 11 00 00 00       	mov    eax,0x11
c00045f5:	85 f6                	test   esi,esi
c00045f7:	74 77                	je     c0004670 <f_opendir+0xc5>
c00045f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045fd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004601:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004604:	89 d8                	mov    eax,ebx
c0004606:	e8 85 f3 ff ff       	call   c0003990 <follow_path>
c000460b:	85 c0                	test   eax,eax
c000460d:	75 37                	jne    c0004646 <f_opendir+0x9b>
c000460f:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004613:	75 1c                	jne    c0004631 <f_opendir+0x86>
c0004615:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004619:	b8 05 00 00 00       	mov    eax,0x5
c000461e:	74 26                	je     c0004646 <f_opendir+0x9b>
c0004620:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004624:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004627:	8a 00                	mov    al,BYTE PTR [eax]
c0004629:	e8 46 eb ff ff       	call   c0003174 <ld_clust.isra.0>
c000462e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004631:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004635:	31 d2                	xor    edx,edx
c0004637:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000463b:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000463f:	89 d8                	mov    eax,ebx
c0004641:	e8 84 ec ff ff       	call   c00032ca <dir_sdi>
c0004646:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000464a:	83 ec 0c             	sub    esp,0xc
c000464d:	56                   	push   esi
c000464e:	e8 7d 15 00 00       	call   c0005bd0 <ff_memfree>
c0004653:	83 c4 10             	add    esp,0x10
c0004656:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000465a:	83 f8 04             	cmp    eax,0x4
c000465d:	74 06                	je     c0004665 <f_opendir+0xba>
c000465f:	85 c0                	test   eax,eax
c0004661:	74 0d                	je     c0004670 <f_opendir+0xc5>
c0004663:	eb 05                	jmp    c000466a <f_opendir+0xbf>
c0004665:	b8 05 00 00 00       	mov    eax,0x5
c000466a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004670:	83 c4 24             	add    esp,0x24
c0004673:	5b                   	pop    ebx
c0004674:	5e                   	pop    esi
c0004675:	c3                   	ret    

c0004676 <f_closedir>:
c0004676:	53                   	push   ebx
c0004677:	83 ec 18             	sub    esp,0x18
c000467a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000467e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004682:	89 d8                	mov    eax,ebx
c0004684:	e8 ae db ff ff       	call   c0002237 <validate>
c0004689:	85 c0                	test   eax,eax
c000468b:	75 06                	jne    c0004693 <f_closedir+0x1d>
c000468d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004693:	83 c4 18             	add    esp,0x18
c0004696:	5b                   	pop    ebx
c0004697:	c3                   	ret    

c0004698 <f_readdir>:
c0004698:	57                   	push   edi
c0004699:	56                   	push   esi
c000469a:	53                   	push   ebx
c000469b:	83 ec 20             	sub    esp,0x20
c000469e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00046a2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046a6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00046aa:	89 d8                	mov    eax,ebx
c00046ac:	e8 86 db ff ff       	call   c0002237 <validate>
c00046b1:	85 c0                	test   eax,eax
c00046b3:	75 6e                	jne    c0004723 <f_readdir+0x8b>
c00046b5:	85 ff                	test   edi,edi
c00046b7:	75 0b                	jne    c00046c4 <f_readdir+0x2c>
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	89 d8                	mov    eax,ebx
c00046bd:	e8 08 ec ff ff       	call   c00032ca <dir_sdi>
c00046c2:	eb 5f                	jmp    c0004723 <f_readdir+0x8b>
c00046c4:	83 ec 0c             	sub    esp,0xc
c00046c7:	68 00 02 00 00       	push   0x200
c00046cc:	e8 e7 14 00 00       	call   c0005bb8 <ff_memalloc>
c00046d1:	83 c4 10             	add    esp,0x10
c00046d4:	89 c6                	mov    esi,eax
c00046d6:	b8 11 00 00 00       	mov    eax,0x11
c00046db:	85 f6                	test   esi,esi
c00046dd:	74 44                	je     c0004723 <f_readdir+0x8b>
c00046df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046e3:	31 d2                	xor    edx,edx
c00046e5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00046e8:	89 d8                	mov    eax,ebx
c00046ea:	e8 cb ef ff ff       	call   c00036ba <dir_read>
c00046ef:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00046f4:	75 19                	jne    c000470f <f_readdir+0x77>
c00046f6:	89 fa                	mov    edx,edi
c00046f8:	89 d8                	mov    eax,ebx
c00046fa:	e8 74 e8 ff ff       	call   c0002f73 <get_fileinfo>
c00046ff:	31 d2                	xor    edx,edx
c0004701:	89 d8                	mov    eax,ebx
c0004703:	e8 4a ee ff ff       	call   c0003552 <dir_next>
c0004708:	83 f8 04             	cmp    eax,0x4
c000470b:	75 02                	jne    c000470f <f_readdir+0x77>
c000470d:	31 c0                	xor    eax,eax
c000470f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004713:	83 ec 0c             	sub    esp,0xc
c0004716:	56                   	push   esi
c0004717:	e8 b4 14 00 00       	call   c0005bd0 <ff_memfree>
c000471c:	83 c4 10             	add    esp,0x10
c000471f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004723:	83 c4 20             	add    esp,0x20
c0004726:	5b                   	pop    ebx
c0004727:	5e                   	pop    esi
c0004728:	5f                   	pop    edi
c0004729:	c3                   	ret    

c000472a <f_stat>:
c000472a:	57                   	push   edi
c000472b:	31 c9                	xor    ecx,ecx
c000472d:	56                   	push   esi
c000472e:	53                   	push   ebx
c000472f:	83 ec 30             	sub    esp,0x30
c0004732:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004736:	89 e2                	mov    edx,esp
c0004738:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000473c:	e8 fc dc ff ff       	call   c000243d <mount_volume>
c0004741:	85 c0                	test   eax,eax
c0004743:	89 c3                	mov    ebx,eax
c0004745:	75 59                	jne    c00047a0 <f_stat+0x76>
c0004747:	83 ec 0c             	sub    esp,0xc
c000474a:	bb 11 00 00 00       	mov    ebx,0x11
c000474f:	68 00 02 00 00       	push   0x200
c0004754:	e8 5f 14 00 00       	call   c0005bb8 <ff_memalloc>
c0004759:	83 c4 10             	add    esp,0x10
c000475c:	85 c0                	test   eax,eax
c000475e:	89 c6                	mov    esi,eax
c0004760:	74 3e                	je     c00047a0 <f_stat+0x76>
c0004762:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004765:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 e0                	mov    eax,esp
c000476e:	e8 1d f2 ff ff       	call   c0003990 <follow_path>
c0004773:	85 c0                	test   eax,eax
c0004775:	89 c3                	mov    ebx,eax
c0004777:	75 1b                	jne    c0004794 <f_stat+0x6a>
c0004779:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c000477e:	75 0f                	jne    c000478f <f_stat+0x65>
c0004780:	85 ff                	test   edi,edi
c0004782:	74 10                	je     c0004794 <f_stat+0x6a>
c0004784:	89 fa                	mov    edx,edi
c0004786:	89 e0                	mov    eax,esp
c0004788:	e8 e6 e7 ff ff       	call   c0002f73 <get_fileinfo>
c000478d:	eb 05                	jmp    c0004794 <f_stat+0x6a>
c000478f:	bb 06 00 00 00       	mov    ebx,0x6
c0004794:	83 ec 0c             	sub    esp,0xc
c0004797:	56                   	push   esi
c0004798:	e8 33 14 00 00       	call   c0005bd0 <ff_memfree>
c000479d:	83 c4 10             	add    esp,0x10
c00047a0:	83 c4 30             	add    esp,0x30
c00047a3:	89 d8                	mov    eax,ebx
c00047a5:	5b                   	pop    ebx
c00047a6:	5e                   	pop    esi
c00047a7:	5f                   	pop    edi
c00047a8:	c3                   	ret    

c00047a9 <f_getfree>:
c00047a9:	55                   	push   ebp
c00047aa:	31 c9                	xor    ecx,ecx
c00047ac:	57                   	push   edi
c00047ad:	56                   	push   esi
c00047ae:	53                   	push   ebx
c00047af:	83 ec 2c             	sub    esp,0x2c
c00047b2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	e8 7e dc ff ff       	call   c000243d <mount_volume>
c00047bf:	85 c0                	test   eax,eax
c00047c1:	89 c6                	mov    esi,eax
c00047c3:	0f 85 df 00 00 00    	jne    c00048a8 <f_getfree+0xff>
c00047c9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00047cd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00047d1:	89 18                	mov    DWORD PTR [eax],ebx
c00047d3:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00047d6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047d9:	8d 57 fe             	lea    edx,[edi-0x2]
c00047dc:	39 d0                	cmp    eax,edx
c00047de:	77 0b                	ja     c00047eb <f_getfree+0x42>
c00047e0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00047e4:	89 01                	mov    DWORD PTR [ecx],eax
c00047e6:	e9 bd 00 00 00       	jmp    c00048a8 <f_getfree+0xff>
c00047eb:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c00047ee:	75 29                	jne    c0004819 <f_getfree+0x70>
c00047f0:	bf 02 00 00 00       	mov    edi,0x2
c00047f5:	31 ed                	xor    ebp,ebp
c00047f7:	89 fa                	mov    edx,edi
c00047f9:	89 d8                	mov    eax,ebx
c00047fb:	e8 c5 e9 ff ff       	call   c00031c5 <get_fat.isra.2>
c0004800:	83 f8 ff             	cmp    eax,0xffffffff
c0004803:	74 7d                	je     c0004882 <f_getfree+0xd9>
c0004805:	83 f8 01             	cmp    eax,0x1
c0004808:	74 7f                	je     c0004889 <f_getfree+0xe0>
c000480a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000480e:	83 d5 00             	adc    ebp,0x0
c0004811:	47                   	inc    edi
c0004812:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004815:	77 e0                	ja     c00047f7 <f_getfree+0x4e>
c0004817:	eb 79                	jmp    c0004892 <f_getfree+0xe9>
c0004819:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c000481c:	31 ed                	xor    ebp,ebp
c000481e:	31 db                	xor    ebx,ebx
c0004820:	85 db                	test   ebx,ebx
c0004822:	75 18                	jne    c000483c <f_getfree+0x93>
c0004824:	8d 42 01             	lea    eax,[edx+0x1]
c0004827:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000482b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000482f:	e8 ac da ff ff       	call   c00022e0 <move_window>
c0004834:	85 c0                	test   eax,eax
c0004836:	75 58                	jne    c0004890 <f_getfree+0xe7>
c0004838:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000483c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004840:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004844:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004847:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c000484b:	75 13                	jne    c0004860 <f_getfree+0xb7>
c000484d:	e8 29 d5 ff ff       	call   c0001d7b <ld_word>
c0004852:	0f b7 c0             	movzx  eax,ax
c0004855:	83 f8 01             	cmp    eax,0x1
c0004858:	83 d5 00             	adc    ebp,0x0
c000485b:	83 c3 02             	add    ebx,0x2
c000485e:	eb 13                	jmp    c0004873 <f_getfree+0xca>
c0004860:	e8 23 d5 ff ff       	call   c0001d88 <ld_dword>
c0004865:	25 ff ff ff 0f       	and    eax,0xfffffff
c000486a:	83 f8 01             	cmp    eax,0x1
c000486d:	83 d5 00             	adc    ebp,0x0
c0004870:	83 c3 04             	add    ebx,0x4
c0004873:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004879:	4f                   	dec    edi
c000487a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000487e:	75 a0                	jne    c0004820 <f_getfree+0x77>
c0004880:	eb 10                	jmp    c0004892 <f_getfree+0xe9>
c0004882:	be 01 00 00 00       	mov    esi,0x1
c0004887:	eb 09                	jmp    c0004892 <f_getfree+0xe9>
c0004889:	be 02 00 00 00       	mov    esi,0x2
c000488e:	eb 02                	jmp    c0004892 <f_getfree+0xe9>
c0004890:	89 c6                	mov    esi,eax
c0004892:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004896:	89 28                	mov    DWORD PTR [eax],ebp
c0004898:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489c:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c000489f:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c00048a2:	83 ca 01             	or     edx,0x1
c00048a5:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c00048a8:	83 c4 2c             	add    esp,0x2c
c00048ab:	89 f0                	mov    eax,esi
c00048ad:	5b                   	pop    ebx
c00048ae:	5e                   	pop    esi
c00048af:	5f                   	pop    edi
c00048b0:	5d                   	pop    ebp
c00048b1:	c3                   	ret    

c00048b2 <f_truncate>:
c00048b2:	56                   	push   esi
c00048b3:	53                   	push   ebx
c00048b4:	83 ec 14             	sub    esp,0x14
c00048b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048bb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048bf:	89 d8                	mov    eax,ebx
c00048c1:	e8 71 d9 ff ff       	call   c0002237 <validate>
c00048c6:	85 c0                	test   eax,eax
c00048c8:	89 c6                	mov    esi,eax
c00048ca:	0f 85 c4 00 00 00    	jne    c0004994 <f_truncate+0xe2>
c00048d0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00048d4:	85 f6                	test   esi,esi
c00048d6:	0f 85 b8 00 00 00    	jne    c0004994 <f_truncate+0xe2>
c00048dc:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00048e0:	0f 84 a9 00 00 00    	je     c000498f <f_truncate+0xdd>
c00048e6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00048e9:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00048ec:	0f 83 a2 00 00 00    	jae    c0004994 <f_truncate+0xe2>
c00048f2:	85 c0                	test   eax,eax
c00048f4:	75 15                	jne    c000490b <f_truncate+0x59>
c00048f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00048f9:	31 c9                	xor    ecx,ecx
c00048fb:	89 d8                	mov    eax,ebx
c00048fd:	e8 c2 eb ff ff       	call   c00034c4 <remove_chain>
c0004902:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004909:	eb 35                	jmp    c0004940 <f_truncate+0x8e>
c000490b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000490e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004910:	e8 b0 e8 ff ff       	call   c00031c5 <get_fat.isra.2>
c0004915:	89 c2                	mov    edx,eax
c0004917:	b8 01 00 00 00       	mov    eax,0x1
c000491c:	83 fa ff             	cmp    edx,0xffffffff
c000491f:	74 1f                	je     c0004940 <f_truncate+0x8e>
c0004921:	83 fa 01             	cmp    edx,0x1
c0004924:	b8 02 00 00 00       	mov    eax,0x2
c0004929:	74 15                	je     c0004940 <f_truncate+0x8e>
c000492b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000492f:	31 c0                	xor    eax,eax
c0004931:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004934:	76 0a                	jbe    c0004940 <f_truncate+0x8e>
c0004936:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004939:	89 d8                	mov    eax,ebx
c000493b:	e8 84 eb ff ff       	call   c00034c4 <remove_chain>
c0004940:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004943:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004946:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004949:	83 ca 40             	or     edx,0x40
c000494c:	85 c0                	test   eax,eax
c000494e:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004951:	75 35                	jne    c0004988 <f_truncate+0xd6>
c0004953:	80 e2 80             	and    dl,0x80
c0004956:	74 3c                	je     c0004994 <f_truncate+0xe2>
c0004958:	8d 43 28             	lea    eax,[ebx+0x28]
c000495b:	6a 01                	push   0x1
c000495d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004960:	50                   	push   eax
c0004961:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004965:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004969:	50                   	push   eax
c000496a:	e8 d7 d3 ff ff       	call   c0001d46 <disk_write>
c000496f:	83 c4 10             	add    esp,0x10
c0004972:	85 c0                	test   eax,eax
c0004974:	75 0d                	jne    c0004983 <f_truncate+0xd1>
c0004976:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004979:	31 f6                	xor    esi,esi
c000497b:	83 e0 7f             	and    eax,0x7f
c000497e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004981:	eb 11                	jmp    c0004994 <f_truncate+0xe2>
c0004983:	b8 01 00 00 00       	mov    eax,0x1
c0004988:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c000498b:	89 c6                	mov    esi,eax
c000498d:	eb 05                	jmp    c0004994 <f_truncate+0xe2>
c000498f:	be 07 00 00 00       	mov    esi,0x7
c0004994:	83 c4 14             	add    esp,0x14
c0004997:	89 f0                	mov    eax,esi
c0004999:	5b                   	pop    ebx
c000499a:	5e                   	pop    esi
c000499b:	c3                   	ret    

c000499c <f_unlink>:
c000499c:	55                   	push   ebp
c000499d:	b9 02 00 00 00       	mov    ecx,0x2
c00049a2:	57                   	push   edi
c00049a3:	56                   	push   esi
c00049a4:	53                   	push   ebx
c00049a5:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00049ab:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049af:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00049b6:	e8 82 da ff ff       	call   c000243d <mount_volume>
c00049bb:	85 c0                	test   eax,eax
c00049bd:	0f 85 ee 00 00 00    	jne    c0004ab1 <f_unlink+0x115>
c00049c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049c7:	83 ec 0c             	sub    esp,0xc
c00049ca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00049ce:	68 00 02 00 00       	push   0x200
c00049d3:	e8 e0 11 00 00       	call   c0005bb8 <ff_memalloc>
c00049d8:	83 c4 10             	add    esp,0x10
c00049db:	89 c3                	mov    ebx,eax
c00049dd:	b8 11 00 00 00       	mov    eax,0x11
c00049e2:	85 db                	test   ebx,ebx
c00049e4:	0f 84 c7 00 00 00    	je     c0004ab1 <f_unlink+0x115>
c00049ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049ee:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00049f5:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00049f8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049fc:	e8 8f ef ff ff       	call   c0003990 <follow_path>
c0004a01:	85 c0                	test   eax,eax
c0004a03:	0f 85 94 00 00 00    	jne    c0004a9d <f_unlink+0x101>
c0004a09:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a0e:	b8 06 00 00 00       	mov    eax,0x6
c0004a13:	0f 85 84 00 00 00    	jne    c0004a9d <f_unlink+0x101>
c0004a19:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a1e:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a24:	74 07                	je     c0004a2d <f_unlink+0x91>
c0004a26:	b8 07 00 00 00       	mov    eax,0x7
c0004a2b:	eb 70                	jmp    c0004a9d <f_unlink+0x101>
c0004a2d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a35:	8a 07                	mov    al,BYTE PTR [edi]
c0004a37:	e8 38 e7 ff ff       	call   c0003174 <ld_clust.isra.0>
c0004a3c:	83 e5 10             	and    ebp,0x10
c0004a3f:	89 c6                	mov    esi,eax
c0004a41:	75 20                	jne    c0004a63 <f_unlink+0xc7>
c0004a43:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a47:	e8 a2 ed ff ff       	call   c00037ee <dir_remove>
c0004a4c:	85 c0                	test   eax,eax
c0004a4e:	75 40                	jne    c0004a90 <f_unlink+0xf4>
c0004a50:	85 f6                	test   esi,esi
c0004a52:	74 3c                	je     c0004a90 <f_unlink+0xf4>
c0004a54:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a58:	31 c9                	xor    ecx,ecx
c0004a5a:	89 f2                	mov    edx,esi
c0004a5c:	e8 63 ea ff ff       	call   c00034c4 <remove_chain>
c0004a61:	eb 2d                	jmp    c0004a90 <f_unlink+0xf4>
c0004a63:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004a67:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004a6b:	31 d2                	xor    edx,edx
c0004a6d:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004a71:	e8 54 e8 ff ff       	call   c00032ca <dir_sdi>
c0004a76:	85 c0                	test   eax,eax
c0004a78:	75 23                	jne    c0004a9d <f_unlink+0x101>
c0004a7a:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004a7e:	31 d2                	xor    edx,edx
c0004a80:	e8 35 ec ff ff       	call   c00036ba <dir_read>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	74 9d                	je     c0004a26 <f_unlink+0x8a>
c0004a89:	83 f8 04             	cmp    eax,0x4
c0004a8c:	75 0f                	jne    c0004a9d <f_unlink+0x101>
c0004a8e:	eb b3                	jmp    c0004a43 <f_unlink+0xa7>
c0004a90:	85 c0                	test   eax,eax
c0004a92:	75 09                	jne    c0004a9d <f_unlink+0x101>
c0004a94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a98:	e8 75 e2 ff ff       	call   c0002d12 <sync_fs>
c0004a9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aa1:	83 ec 0c             	sub    esp,0xc
c0004aa4:	53                   	push   ebx
c0004aa5:	e8 26 11 00 00       	call   c0005bd0 <ff_memfree>
c0004aaa:	83 c4 10             	add    esp,0x10
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004ab7:	5b                   	pop    ebx
c0004ab8:	5e                   	pop    esi
c0004ab9:	5f                   	pop    edi
c0004aba:	5d                   	pop    ebp
c0004abb:	c3                   	ret    

c0004abc <f_mkdir>:
c0004abc:	57                   	push   edi
c0004abd:	b9 02 00 00 00       	mov    ecx,0x2
c0004ac2:	56                   	push   esi
c0004ac3:	53                   	push   ebx
c0004ac4:	83 ec 50             	sub    esp,0x50
c0004ac7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004acb:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004acf:	e8 69 d9 ff ff       	call   c000243d <mount_volume>
c0004ad4:	85 c0                	test   eax,eax
c0004ad6:	89 c3                	mov    ebx,eax
c0004ad8:	0f 85 70 01 00 00    	jne    c0004c4e <f_mkdir+0x192>
c0004ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae2:	83 ec 0c             	sub    esp,0xc
c0004ae5:	bb 11 00 00 00       	mov    ebx,0x11
c0004aea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004aee:	68 00 02 00 00       	push   0x200
c0004af3:	e8 c0 10 00 00       	call   c0005bb8 <ff_memalloc>
c0004af8:	83 c4 10             	add    esp,0x10
c0004afb:	85 c0                	test   eax,eax
c0004afd:	89 c7                	mov    edi,eax
c0004aff:	0f 84 49 01 00 00    	je     c0004c4e <f_mkdir+0x192>
c0004b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b09:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b0d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b10:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b14:	e8 77 ee ff ff       	call   c0003990 <follow_path>
c0004b19:	85 c0                	test   eax,eax
c0004b1b:	89 c3                	mov    ebx,eax
c0004b1d:	74 3e                	je     c0004b5d <f_mkdir+0xa1>
c0004b1f:	83 f8 04             	cmp    eax,0x4
c0004b22:	75 3e                	jne    c0004b62 <f_mkdir+0xa6>
c0004b24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b28:	31 d2                	xor    edx,edx
c0004b2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b2e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b32:	e8 5b e8 ff ff       	call   c0003392 <create_chain>
c0004b37:	85 c0                	test   eax,eax
c0004b39:	89 c6                	mov    esi,eax
c0004b3b:	74 0c                	je     c0004b49 <f_mkdir+0x8d>
c0004b3d:	83 f8 01             	cmp    eax,0x1
c0004b40:	bb 02 00 00 00       	mov    ebx,0x2
c0004b45:	74 07                	je     c0004b4e <f_mkdir+0x92>
c0004b47:	eb 2a                	jmp    c0004b73 <f_mkdir+0xb7>
c0004b49:	bb 07 00 00 00       	mov    ebx,0x7
c0004b4e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b52:	31 c9                	xor    ecx,ecx
c0004b54:	89 f2                	mov    edx,esi
c0004b56:	e8 69 e9 ff ff       	call   c00034c4 <remove_chain>
c0004b5b:	eb 05                	jmp    c0004b62 <f_mkdir+0xa6>
c0004b5d:	bb 08 00 00 00       	mov    ebx,0x8
c0004b62:	83 ec 0c             	sub    esp,0xc
c0004b65:	57                   	push   edi
c0004b66:	e8 65 10 00 00       	call   c0005bd0 <ff_memfree>
c0004b6b:	83 c4 10             	add    esp,0x10
c0004b6e:	e9 db 00 00 00       	jmp    c0004c4e <f_mkdir+0x192>
c0004b73:	83 f8 ff             	cmp    eax,0xffffffff
c0004b76:	bb 01 00 00 00       	mov    ebx,0x1
c0004b7b:	74 d1                	je     c0004b4e <f_mkdir+0x92>
c0004b7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b81:	89 f2                	mov    edx,esi
c0004b83:	e8 11 dd ff ff       	call   c0002899 <dir_clear>
c0004b88:	85 c0                	test   eax,eax
c0004b8a:	89 c3                	mov    ebx,eax
c0004b8c:	75 c0                	jne    c0004b4e <f_mkdir+0x92>
c0004b8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b92:	b9 0b 00 00 00       	mov    ecx,0xb
c0004b97:	ba 20 00 00 00       	mov    edx,0x20
c0004b9c:	83 c0 34             	add    eax,0x34
c0004b9f:	e8 18 d2 ff ff       	call   c0001dbc <mem_set>
c0004ba4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ba8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004bad:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004bb1:	83 c0 4a             	add    eax,0x4a
c0004bb4:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004bb8:	e8 e7 d1 ff ff       	call   c0001da4 <st_dword>
c0004bbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bc1:	89 f1                	mov    ecx,esi
c0004bc3:	8d 50 34             	lea    edx,[eax+0x34]
c0004bc6:	e8 d2 e5 ff ff       	call   c000319d <st_clust.isra.1>
c0004bcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8d 50 34             	lea    edx,[eax+0x34]
c0004bd7:	83 c0 54             	add    eax,0x54
c0004bda:	e8 c8 d1 ff ff       	call   c0001da7 <mem_cpy>
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004be7:	8d 50 54             	lea    edx,[eax+0x54]
c0004bea:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004bee:	e8 aa e5 ff ff       	call   c000319d <st_clust.isra.1>
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004bfb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bff:	e8 29 ee ff ff       	call   c0003a2d <dir_register>
c0004c04:	85 c0                	test   eax,eax
c0004c06:	89 c3                	mov    ebx,eax
c0004c08:	0f 85 40 ff ff ff    	jne    c0004b4e <f_mkdir+0x92>
c0004c0e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c12:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c17:	83 c0 16             	add    eax,0x16
c0004c1a:	e8 85 d1 ff ff       	call   c0001da4 <st_dword>
c0004c1f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c23:	89 f1                	mov    ecx,esi
c0004c25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c29:	e8 6f e5 ff ff       	call   c000319d <st_clust.isra.1>
c0004c2e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c32:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c3a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c42:	e8 cb e0 ff ff       	call   c0002d12 <sync_fs>
c0004c47:	89 c3                	mov    ebx,eax
c0004c49:	e9 14 ff ff ff       	jmp    c0004b62 <f_mkdir+0xa6>
c0004c4e:	83 c4 50             	add    esp,0x50
c0004c51:	89 d8                	mov    eax,ebx
c0004c53:	5b                   	pop    ebx
c0004c54:	5e                   	pop    esi
c0004c55:	5f                   	pop    edi
c0004c56:	c3                   	ret    

c0004c57 <f_rename>:
c0004c57:	57                   	push   edi
c0004c58:	56                   	push   esi
c0004c59:	53                   	push   ebx
c0004c5a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004c60:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004c67:	e8 7f d5 ff ff       	call   c00021eb <get_ldnumber>
c0004c6c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c70:	b9 02 00 00 00       	mov    ecx,0x2
c0004c75:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004c7c:	e8 bc d7 ff ff       	call   c000243d <mount_volume>
c0004c81:	85 c0                	test   eax,eax
c0004c83:	0f 85 7c 01 00 00    	jne    c0004e05 <f_rename+0x1ae>
c0004c89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c8d:	83 ec 0c             	sub    esp,0xc
c0004c90:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004c94:	68 00 02 00 00       	push   0x200
c0004c99:	e8 1a 0f 00 00       	call   c0005bb8 <ff_memalloc>
c0004c9e:	83 c4 10             	add    esp,0x10
c0004ca1:	89 c6                	mov    esi,eax
c0004ca3:	b8 11 00 00 00       	mov    eax,0x11
c0004ca8:	85 f6                	test   esi,esi
c0004caa:	0f 84 55 01 00 00    	je     c0004e05 <f_rename+0x1ae>
c0004cb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cb4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004cbb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004cbe:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004cc2:	e8 c9 ec ff ff       	call   c0003990 <follow_path>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	0f 85 22 01 00 00    	jne    c0004df1 <f_rename+0x19a>
c0004ccf:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004cd3:	b8 06 00 00 00       	mov    eax,0x6
c0004cd8:	80 e2 a0             	and    dl,0xa0
c0004cdb:	0f 85 10 01 00 00    	jne    c0004df1 <f_rename+0x19a>
c0004ce1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004ce5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ce9:	b9 20 00 00 00       	mov    ecx,0x20
c0004cee:	e8 b4 d0 ff ff       	call   c0001da7 <mem_cpy>
c0004cf3:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004cf7:	b9 30 00 00 00       	mov    ecx,0x30
c0004cfc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d00:	e8 a2 d0 ff ff       	call   c0001da7 <mem_cpy>
c0004d05:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d0c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d10:	e8 7b ec ff ff       	call   c0003990 <follow_path>
c0004d15:	85 c0                	test   eax,eax
c0004d17:	75 20                	jne    c0004d39 <f_rename+0xe2>
c0004d19:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d1d:	b8 08 00 00 00       	mov    eax,0x8
c0004d22:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d26:	0f 85 c5 00 00 00    	jne    c0004df1 <f_rename+0x19a>
c0004d2c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d30:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d37:	eb 03                	jmp    c0004d3c <f_rename+0xe5>
c0004d39:	83 f8 04             	cmp    eax,0x4
c0004d3c:	0f 85 af 00 00 00    	jne    c0004df1 <f_rename+0x19a>
c0004d42:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d46:	e8 e2 ec ff ff       	call   c0003a2d <dir_register>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 9e 00 00 00    	jne    c0004df1 <f_rename+0x19a>
c0004d53:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004d5a:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004d5e:	b9 13 00 00 00       	mov    ecx,0x13
c0004d63:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004d66:	e8 3c d0 ff ff       	call   c0001da7 <mem_cpy>
c0004d6b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004d6f:	a8 10                	test   al,0x10
c0004d71:	75 03                	jne    c0004d76 <f_rename+0x11f>
c0004d73:	83 c8 20             	or     eax,0x20
c0004d76:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004d79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d81:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004d85:	74 54                	je     c0004ddb <f_rename+0x184>
c0004d87:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004d8b:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004d8f:	74 4a                	je     c0004ddb <f_rename+0x184>
c0004d91:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004d95:	89 da                	mov    edx,ebx
c0004d97:	8a 07                	mov    al,BYTE PTR [edi]
c0004d99:	e8 d6 e3 ff ff       	call   c0003174 <ld_clust.isra.0>
c0004d9e:	89 c2                	mov    edx,eax
c0004da0:	89 f8                	mov    eax,edi
c0004da2:	e8 2b d2 ff ff       	call   c0001fd2 <clst2sect>
c0004da7:	89 c2                	mov    edx,eax
c0004da9:	b8 02 00 00 00       	mov    eax,0x2
c0004dae:	85 d2                	test   edx,edx
c0004db0:	74 3f                	je     c0004df1 <f_rename+0x19a>
c0004db2:	89 f8                	mov    eax,edi
c0004db4:	e8 27 d5 ff ff       	call   c00022e0 <move_window>
c0004db9:	85 c0                	test   eax,eax
c0004dbb:	75 34                	jne    c0004df1 <f_rename+0x19a>
c0004dbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dc1:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004dc5:	75 14                	jne    c0004ddb <f_rename+0x184>
c0004dc7:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004dcb:	8d 50 54             	lea    edx,[eax+0x54]
c0004dce:	e8 ca e3 ff ff       	call   c000319d <st_clust.isra.1>
c0004dd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ddb:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ddf:	e8 0a ea ff ff       	call   c00037ee <dir_remove>
c0004de4:	85 c0                	test   eax,eax
c0004de6:	75 09                	jne    c0004df1 <f_rename+0x19a>
c0004de8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dec:	e8 21 df ff ff       	call   c0002d12 <sync_fs>
c0004df1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004df5:	83 ec 0c             	sub    esp,0xc
c0004df8:	56                   	push   esi
c0004df9:	e8 d2 0d 00 00       	call   c0005bd0 <ff_memfree>
c0004dfe:	83 c4 10             	add    esp,0x10
c0004e01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e05:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e0b:	5b                   	pop    ebx
c0004e0c:	5e                   	pop    esi
c0004e0d:	5f                   	pop    edi
c0004e0e:	c3                   	ret    

c0004e0f <f_chmod>:
c0004e0f:	57                   	push   edi
c0004e10:	b9 02 00 00 00       	mov    ecx,0x2
c0004e15:	56                   	push   esi
c0004e16:	53                   	push   ebx
c0004e17:	83 ec 50             	sub    esp,0x50
c0004e1a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e1e:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e22:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e26:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e2a:	e8 0e d6 ff ff       	call   c000243d <mount_volume>
c0004e2f:	85 c0                	test   eax,eax
c0004e31:	0f 85 81 00 00 00    	jne    c0004eb8 <f_chmod+0xa9>
c0004e37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e3b:	83 ec 0c             	sub    esp,0xc
c0004e3e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004e42:	68 00 02 00 00       	push   0x200
c0004e47:	e8 6c 0d 00 00       	call   c0005bb8 <ff_memalloc>
c0004e4c:	83 c4 10             	add    esp,0x10
c0004e4f:	89 c6                	mov    esi,eax
c0004e51:	b8 11 00 00 00       	mov    eax,0x11
c0004e56:	85 f6                	test   esi,esi
c0004e58:	74 5e                	je     c0004eb8 <f_chmod+0xa9>
c0004e5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e62:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004e65:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e69:	e8 22 eb ff ff       	call   c0003990 <follow_path>
c0004e6e:	85 c0                	test   eax,eax
c0004e70:	75 32                	jne    c0004ea4 <f_chmod+0x95>
c0004e72:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004e76:	b8 06 00 00 00       	mov    eax,0x6
c0004e7b:	80 e2 a0             	and    dl,0xa0
c0004e7e:	75 24                	jne    c0004ea4 <f_chmod+0x95>
c0004e80:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e84:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004e87:	31 d7                	xor    edi,edx
c0004e89:	21 fb                	and    ebx,edi
c0004e8b:	83 e3 27             	and    ebx,0x27
c0004e8e:	31 d3                	xor    ebx,edx
c0004e90:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004e93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e97:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9f:	e8 6e de ff ff       	call   c0002d12 <sync_fs>
c0004ea4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ea8:	83 ec 0c             	sub    esp,0xc
c0004eab:	56                   	push   esi
c0004eac:	e8 1f 0d 00 00       	call   c0005bd0 <ff_memfree>
c0004eb1:	83 c4 10             	add    esp,0x10
c0004eb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004eb8:	83 c4 50             	add    esp,0x50
c0004ebb:	5b                   	pop    ebx
c0004ebc:	5e                   	pop    esi
c0004ebd:	5f                   	pop    edi
c0004ebe:	c3                   	ret    

c0004ebf <f_utime>:
c0004ebf:	56                   	push   esi
c0004ec0:	b9 02 00 00 00       	mov    ecx,0x2
c0004ec5:	53                   	push   ebx
c0004ec6:	83 ec 54             	sub    esp,0x54
c0004ec9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ecd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004ed1:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ed5:	e8 63 d5 ff ff       	call   c000243d <mount_volume>
c0004eda:	85 c0                	test   eax,eax
c0004edc:	0f 85 87 00 00 00    	jne    c0004f69 <f_utime+0xaa>
c0004ee2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee6:	83 ec 0c             	sub    esp,0xc
c0004ee9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004eed:	68 00 02 00 00       	push   0x200
c0004ef2:	e8 c1 0c 00 00       	call   c0005bb8 <ff_memalloc>
c0004ef7:	83 c4 10             	add    esp,0x10
c0004efa:	89 c3                	mov    ebx,eax
c0004efc:	b8 11 00 00 00       	mov    eax,0x11
c0004f01:	85 db                	test   ebx,ebx
c0004f03:	74 64                	je     c0004f69 <f_utime+0xaa>
c0004f05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f09:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f0d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f10:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f14:	e8 77 ea ff ff       	call   c0003990 <follow_path>
c0004f19:	85 c0                	test   eax,eax
c0004f1b:	75 38                	jne    c0004f55 <f_utime+0x96>
c0004f1d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f21:	b8 06 00 00 00       	mov    eax,0x6
c0004f26:	80 e2 a0             	and    dl,0xa0
c0004f29:	75 2a                	jne    c0004f55 <f_utime+0x96>
c0004f2b:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f2f:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f33:	c1 e2 10             	shl    edx,0x10
c0004f36:	09 c2                	or     edx,eax
c0004f38:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f3c:	83 c0 16             	add    eax,0x16
c0004f3f:	e8 60 ce ff ff       	call   c0001da4 <st_dword>
c0004f44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f48:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f50:	e8 bd dd ff ff       	call   c0002d12 <sync_fs>
c0004f55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f59:	83 ec 0c             	sub    esp,0xc
c0004f5c:	53                   	push   ebx
c0004f5d:	e8 6e 0c 00 00       	call   c0005bd0 <ff_memfree>
c0004f62:	83 c4 10             	add    esp,0x10
c0004f65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f69:	83 c4 54             	add    esp,0x54
c0004f6c:	5b                   	pop    ebx
c0004f6d:	5e                   	pop    esi
c0004f6e:	c3                   	ret    

c0004f6f <f_getlabel>:
c0004f6f:	55                   	push   ebp
c0004f70:	31 c9                	xor    ecx,ecx
c0004f72:	57                   	push   edi
c0004f73:	56                   	push   esi
c0004f74:	53                   	push   ebx
c0004f75:	83 ec 5c             	sub    esp,0x5c
c0004f78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f7c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f80:	e8 b8 d4 ff ff       	call   c000243d <mount_volume>
c0004f85:	85 c0                	test   eax,eax
c0004f87:	89 c3                	mov    ebx,eax
c0004f89:	0f 85 de 00 00 00    	jne    c000506d <f_getlabel+0xfe>
c0004f8f:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004f94:	0f 84 d3 00 00 00    	je     c000506d <f_getlabel+0xfe>
c0004f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f9e:	31 d2                	xor    edx,edx
c0004fa0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004fa8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004fac:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004fb0:	e8 15 e3 ff ff       	call   c00032ca <dir_sdi>
c0004fb5:	85 c0                	test   eax,eax
c0004fb7:	89 c3                	mov    ebx,eax
c0004fb9:	0f 85 a0 00 00 00    	jne    c000505f <f_getlabel+0xf0>
c0004fbf:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004fc3:	ba 01 00 00 00       	mov    edx,0x1
c0004fc8:	e8 ed e6 ff ff       	call   c00036ba <dir_read>
c0004fcd:	85 c0                	test   eax,eax
c0004fcf:	89 c3                	mov    ebx,eax
c0004fd1:	0f 85 88 00 00 00    	jne    c000505f <f_getlabel+0xf0>
c0004fd7:	31 f6                	xor    esi,esi
c0004fd9:	31 c9                	xor    ecx,ecx
c0004fdb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004fdf:	8d 79 01             	lea    edi,[ecx+0x1]
c0004fe2:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004fe7:	89 d0                	mov    eax,edx
c0004fe9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004fed:	e8 09 ce ff ff       	call   c0001dfb <dbc_1st>
c0004ff2:	85 c0                	test   eax,eax
c0004ff4:	74 16                	je     c000500c <f_getlabel+0x9d>
c0004ff6:	83 ff 0b             	cmp    edi,0xb
c0004ff9:	74 11                	je     c000500c <f_getlabel+0x9d>
c0004ffb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fff:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005004:	8d 79 02             	lea    edi,[ecx+0x2]
c0005007:	c1 e0 08             	shl    eax,0x8
c000500a:	09 c2                	or     edx,eax
c000500c:	0f b7 d2             	movzx  edx,dx
c000500f:	50                   	push   eax
c0005010:	50                   	push   eax
c0005011:	68 b5 01 00 00       	push   0x1b5
c0005016:	52                   	push   edx
c0005017:	e8 68 0c 00 00       	call   c0005c84 <ff_oem2uni>
c000501c:	83 c4 10             	add    esp,0x10
c000501f:	0f b7 c0             	movzx  eax,ax
c0005022:	85 c0                	test   eax,eax
c0005024:	74 22                	je     c0005048 <f_getlabel+0xd9>
c0005026:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000502a:	b9 04 00 00 00       	mov    ecx,0x4
c000502f:	01 f2                	add    edx,esi
c0005031:	e8 a3 ce ff ff       	call   c0001ed9 <put_utf>
c0005036:	0f b6 c0             	movzx  eax,al
c0005039:	85 c0                	test   eax,eax
c000503b:	74 0b                	je     c0005048 <f_getlabel+0xd9>
c000503d:	01 c6                	add    esi,eax
c000503f:	83 ff 0b             	cmp    edi,0xb
c0005042:	74 06                	je     c000504a <f_getlabel+0xdb>
c0005044:	89 f9                	mov    ecx,edi
c0005046:	eb 93                	jmp    c0004fdb <f_getlabel+0x6c>
c0005048:	31 f6                	xor    esi,esi
c000504a:	03 74 24 74          	add    esi,DWORD PTR [esp+0x74]
c000504e:	39 74 24 74          	cmp    DWORD PTR [esp+0x74],esi
c0005052:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0005055:	74 16                	je     c000506d <f_getlabel+0xfe>
c0005057:	4e                   	dec    esi
c0005058:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c000505b:	74 f1                	je     c000504e <f_getlabel+0xdf>
c000505d:	eb 0e                	jmp    c000506d <f_getlabel+0xfe>
c000505f:	83 fb 04             	cmp    ebx,0x4
c0005062:	75 09                	jne    c000506d <f_getlabel+0xfe>
c0005064:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005068:	31 db                	xor    ebx,ebx
c000506a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000506d:	85 db                	test   ebx,ebx
c000506f:	75 49                	jne    c00050ba <f_getlabel+0x14b>
c0005071:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0005076:	74 42                	je     c00050ba <f_getlabel+0x14b>
c0005078:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000507c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000507f:	e8 5c d2 ff ff       	call   c00022e0 <move_window>
c0005084:	85 c0                	test   eax,eax
c0005086:	89 c3                	mov    ebx,eax
c0005088:	75 30                	jne    c00050ba <f_getlabel+0x14b>
c000508a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000508e:	b8 43 00 00 00       	mov    eax,0x43
c0005093:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005096:	83 f9 03             	cmp    ecx,0x3
c0005099:	74 10                	je     c00050ab <f_getlabel+0x13c>
c000509b:	83 f9 04             	cmp    ecx,0x4
c000509e:	b8 64 00 00 00       	mov    eax,0x64
c00050a3:	b9 27 00 00 00       	mov    ecx,0x27
c00050a8:	0f 45 c1             	cmovne eax,ecx
c00050ab:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00050af:	e8 d4 cc ff ff       	call   c0001d88 <ld_dword>
c00050b4:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00050b8:	89 07                	mov    DWORD PTR [edi],eax
c00050ba:	83 c4 5c             	add    esp,0x5c
c00050bd:	89 d8                	mov    eax,ebx
c00050bf:	5b                   	pop    ebx
c00050c0:	5e                   	pop    esi
c00050c1:	5f                   	pop    edi
c00050c2:	5d                   	pop    ebp
c00050c3:	c3                   	ret    

c00050c4 <f_setlabel>:
c00050c4:	57                   	push   edi
c00050c5:	b9 02 00 00 00       	mov    ecx,0x2
c00050ca:	56                   	push   esi
c00050cb:	53                   	push   ebx
c00050cc:	83 ec 50             	sub    esp,0x50
c00050cf:	8d 54 24 04          	lea    edx,[esp+0x4]
c00050d3:	8d 44 24 60          	lea    eax,[esp+0x60]
c00050d7:	e8 61 d3 ff ff       	call   c000243d <mount_volume>
c00050dc:	85 c0                	test   eax,eax
c00050de:	89 c6                	mov    esi,eax
c00050e0:	0f 85 65 01 00 00    	jne    c000524b <f_setlabel+0x187>
c00050e6:	b9 0b 00 00 00       	mov    ecx,0xb
c00050eb:	ba 20 00 00 00       	mov    edx,0x20
c00050f0:	31 db                	xor    ebx,ebx
c00050f2:	8d 44 24 0a          	lea    eax,[esp+0xa]
c00050f6:	e8 c1 cc ff ff       	call   c0001dbc <mem_set>
c00050fb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00050ff:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005102:	76 5d                	jbe    c0005161 <f_setlabel+0x9d>
c0005104:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005108:	e8 f4 cc ff ff       	call   c0001e01 <tchar2uni>
c000510d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005112:	76 0a                	jbe    c000511e <f_setlabel+0x5a>
c0005114:	be 06 00 00 00       	mov    esi,0x6
c0005119:	e9 2d 01 00 00       	jmp    c000524b <f_setlabel+0x187>
c000511e:	83 ec 0c             	sub    esp,0xc
c0005121:	50                   	push   eax
c0005122:	e8 d5 0b 00 00       	call   c0005cfc <ff_wtoupper>
c0005127:	5a                   	pop    edx
c0005128:	59                   	pop    ecx
c0005129:	68 b5 01 00 00       	push   0x1b5
c000512e:	50                   	push   eax
c000512f:	e8 b4 0a 00 00       	call   c0005be8 <ff_uni2oem>
c0005134:	83 c4 10             	add    esp,0x10
c0005137:	0f b7 f0             	movzx  esi,ax
c000513a:	85 f6                	test   esi,esi
c000513c:	89 f7                	mov    edi,esi
c000513e:	74 d4                	je     c0005114 <f_setlabel+0x50>
c0005140:	89 f2                	mov    edx,esi
c0005142:	b8 f0 f3 01 c0       	mov    eax,0xc001f3f0
c0005147:	e8 9e cc ff ff       	call   c0001dea <chk_chr>
c000514c:	85 c0                	test   eax,eax
c000514e:	75 c4                	jne    c0005114 <f_setlabel+0x50>
c0005150:	81 fe ff 00 00 00    	cmp    esi,0xff
c0005156:	0f 87 c9 00 00 00    	ja     c0005225 <f_setlabel+0x161>
c000515c:	e9 e0 00 00 00       	jmp    c0005241 <f_setlabel+0x17d>
c0005161:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005166:	74 ac                	je     c0005114 <f_setlabel+0x50>
c0005168:	85 db                	test   ebx,ebx
c000516a:	74 0e                	je     c000517a <f_setlabel+0xb6>
c000516c:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005171:	8d 43 ff             	lea    eax,[ebx-0x1]
c0005174:	75 04                	jne    c000517a <f_setlabel+0xb6>
c0005176:	89 c3                	mov    ebx,eax
c0005178:	eb ee                	jmp    c0005168 <f_setlabel+0xa4>
c000517a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000517e:	31 d2                	xor    edx,edx
c0005180:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005188:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000518c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005190:	e8 35 e1 ff ff       	call   c00032ca <dir_sdi>
c0005195:	85 c0                	test   eax,eax
c0005197:	89 c6                	mov    esi,eax
c0005199:	0f 85 ac 00 00 00    	jne    c000524b <f_setlabel+0x187>
c000519f:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051a3:	ba 01 00 00 00       	mov    edx,0x1
c00051a8:	e8 0d e5 ff ff       	call   c00036ba <dir_read>
c00051ad:	85 c0                	test   eax,eax
c00051af:	75 18                	jne    c00051c9 <f_setlabel+0x105>
c00051b1:	85 db                	test   ebx,ebx
c00051b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051b7:	74 0b                	je     c00051c4 <f_setlabel+0x100>
c00051b9:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00051bd:	b9 0b 00 00 00       	mov    ecx,0xb
c00051c2:	eb 47                	jmp    c000520b <f_setlabel+0x147>
c00051c4:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00051c7:	eb 47                	jmp    c0005210 <f_setlabel+0x14c>
c00051c9:	83 f8 04             	cmp    eax,0x4
c00051cc:	75 53                	jne    c0005221 <f_setlabel+0x15d>
c00051ce:	85 db                	test   ebx,ebx
c00051d0:	74 79                	je     c000524b <f_setlabel+0x187>
c00051d2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051d6:	ba 01 00 00 00       	mov    edx,0x1
c00051db:	e8 75 e4 ff ff       	call   c0003655 <dir_alloc>
c00051e0:	85 c0                	test   eax,eax
c00051e2:	89 c6                	mov    esi,eax
c00051e4:	75 65                	jne    c000524b <f_setlabel+0x187>
c00051e6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051ea:	b9 20 00 00 00       	mov    ecx,0x20
c00051ef:	31 d2                	xor    edx,edx
c00051f1:	e8 c6 cb ff ff       	call   c0001dbc <mem_set>
c00051f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051fa:	b9 0b 00 00 00       	mov    ecx,0xb
c00051ff:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005203:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005207:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000520b:	e8 97 cb ff ff       	call   c0001da7 <mem_cpy>
c0005210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005214:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000521c:	e8 f1 da ff ff       	call   c0002d12 <sync_fs>
c0005221:	89 c6                	mov    esi,eax
c0005223:	eb 26                	jmp    c000524b <f_setlabel+0x187>
c0005225:	83 fb 09             	cmp    ebx,0x9
c0005228:	0f 87 e6 fe ff ff    	ja     c0005114 <f_setlabel+0x50>
c000522e:	89 f0                	mov    eax,esi
c0005230:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005234:	43                   	inc    ebx
c0005235:	89 f8                	mov    eax,edi
c0005237:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000523b:	43                   	inc    ebx
c000523c:	e9 ba fe ff ff       	jmp    c00050fb <f_setlabel+0x37>
c0005241:	83 fb 0a             	cmp    ebx,0xa
c0005244:	76 ef                	jbe    c0005235 <f_setlabel+0x171>
c0005246:	e9 c9 fe ff ff       	jmp    c0005114 <f_setlabel+0x50>
c000524b:	83 c4 50             	add    esp,0x50
c000524e:	89 f0                	mov    eax,esi
c0005250:	5b                   	pop    ebx
c0005251:	5e                   	pop    esi
c0005252:	5f                   	pop    edi
c0005253:	c3                   	ret    

c0005254 <f_expand>:
c0005254:	55                   	push   ebp
c0005255:	57                   	push   edi
c0005256:	56                   	push   esi
c0005257:	53                   	push   ebx
c0005258:	83 ec 2c             	sub    esp,0x2c
c000525b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000525f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005263:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005267:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000526b:	89 d8                	mov    eax,ebx
c000526d:	e8 c5 cf ff ff       	call   c0002237 <validate>
c0005272:	85 c0                	test   eax,eax
c0005274:	89 c6                	mov    esi,eax
c0005276:	0f 85 3b 01 00 00    	jne    c00053b7 <f_expand+0x163>
c000527c:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005280:	85 f6                	test   esi,esi
c0005282:	0f 85 2f 01 00 00    	jne    c00053b7 <f_expand+0x163>
c0005288:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000528d:	75 0a                	jne    c0005299 <f_expand+0x45>
c000528f:	be 07 00 00 00       	mov    esi,0x7
c0005294:	e9 1e 01 00 00       	jmp    c00053b7 <f_expand+0x163>
c0005299:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000529d:	75 f0                	jne    c000528f <f_expand+0x3b>
c000529f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052a3:	74 ea                	je     c000528f <f_expand+0x3b>
c00052a5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00052a9:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c00052ad:	c1 e7 09             	shl    edi,0x9
c00052b0:	8d 47 ff             	lea    eax,[edi-0x1]
c00052b3:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00052b7:	0f 95 c0             	setne  al
c00052ba:	31 d2                	xor    edx,edx
c00052bc:	0f b6 c0             	movzx  eax,al
c00052bf:	89 c5                	mov    ebp,eax
c00052c1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052c5:	f7 f7                	div    edi
c00052c7:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c00052ca:	01 e8                	add    eax,ebp
c00052cc:	83 ff 01             	cmp    edi,0x1
c00052cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00052d3:	76 05                	jbe    c00052da <f_expand+0x86>
c00052d5:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c00052d8:	77 05                	ja     c00052df <f_expand+0x8b>
c00052da:	bf 02 00 00 00       	mov    edi,0x2
c00052df:	89 3c 24             	mov    DWORD PTR [esp],edi
c00052e2:	89 fd                	mov    ebp,edi
c00052e4:	31 c9                	xor    ecx,ecx
c00052e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00052e8:	89 ea                	mov    edx,ebp
c00052ea:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00052ee:	45                   	inc    ebp
c00052ef:	e8 d1 de ff ff       	call   c00031c5 <get_fat.isra.2>
c00052f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00052fc:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00052ff:	77 05                	ja     c0005306 <f_expand+0xb2>
c0005301:	bd 02 00 00 00       	mov    ebp,0x2
c0005306:	83 f8 01             	cmp    eax,0x1
c0005309:	74 20                	je     c000532b <f_expand+0xd7>
c000530b:	83 f8 ff             	cmp    eax,0xffffffff
c000530e:	74 25                	je     c0005335 <f_expand+0xe1>
c0005310:	85 c0                	test   eax,eax
c0005312:	75 09                	jne    c000531d <f_expand+0xc9>
c0005314:	41                   	inc    ecx
c0005315:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005319:	75 07                	jne    c0005322 <f_expand+0xce>
c000531b:	eb 1f                	jmp    c000533c <f_expand+0xe8>
c000531d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005320:	31 c9                	xor    ecx,ecx
c0005322:	39 fd                	cmp    ebp,edi
c0005324:	75 c0                	jne    c00052e6 <f_expand+0x92>
c0005326:	e9 64 ff ff ff       	jmp    c000528f <f_expand+0x3b>
c000532b:	be 02 00 00 00       	mov    esi,0x2
c0005330:	e9 82 00 00 00       	jmp    c00053b7 <f_expand+0x163>
c0005335:	be 01 00 00 00       	mov    esi,0x1
c000533a:	eb 7b                	jmp    c00053b7 <f_expand+0x163>
c000533c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005341:	74 2b                	je     c000536e <f_expand+0x11a>
c0005343:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005346:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000534a:	85 ed                	test   ebp,ebp
c000534c:	74 24                	je     c0005372 <f_expand+0x11e>
c000534e:	83 c9 ff             	or     ecx,0xffffffff
c0005351:	83 fd 01             	cmp    ebp,0x1
c0005354:	74 03                	je     c0005359 <f_expand+0x105>
c0005356:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000535d:	89 fa                	mov    edx,edi
c000535f:	e8 de d3 ff ff       	call   c0002742 <put_fat>
c0005364:	85 c0                	test   eax,eax
c0005366:	75 4d                	jne    c00053b5 <f_expand+0x161>
c0005368:	89 f8                	mov    eax,edi
c000536a:	4d                   	dec    ebp
c000536b:	47                   	inc    edi
c000536c:	eb dc                	jmp    c000534a <f_expand+0xf6>
c000536e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005371:	48                   	dec    eax
c0005372:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005376:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000537b:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000537e:	74 37                	je     c00053b7 <f_expand+0x163>
c0005380:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005383:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005386:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000538a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000538d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005390:	83 c8 40             	or     eax,0x40
c0005393:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005396:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005399:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000539c:	8d 4b fe             	lea    ecx,[ebx-0x2]
c000539f:	39 c8                	cmp    eax,ecx
c00053a1:	77 14                	ja     c00053b7 <f_expand+0x163>
c00053a3:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00053a7:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00053aa:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00053ad:	83 c8 01             	or     eax,0x1
c00053b0:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00053b3:	eb 02                	jmp    c00053b7 <f_expand+0x163>
c00053b5:	89 c6                	mov    esi,eax
c00053b7:	83 c4 2c             	add    esp,0x2c
c00053ba:	89 f0                	mov    eax,esi
c00053bc:	5b                   	pop    ebx
c00053bd:	5e                   	pop    esi
c00053be:	5f                   	pop    edi
c00053bf:	5d                   	pop    ebp
c00053c0:	c3                   	ret    

c00053c1 <f_mkfs>:
c00053c1:	55                   	push   ebp
c00053c2:	57                   	push   edi
c00053c3:	56                   	push   esi
c00053c4:	be 0b 00 00 00       	mov    esi,0xb
c00053c9:	53                   	push   ebx
c00053ca:	83 ec 5c             	sub    esp,0x5c
c00053cd:	8d 44 24 70          	lea    eax,[esp+0x70]
c00053d1:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00053d5:	e8 11 ce ff ff       	call   c00021eb <get_ldnumber>
c00053da:	85 c0                	test   eax,eax
c00053dc:	0f 88 ca 07 00 00    	js     c0005bac <f_mkfs+0x7eb>
c00053e2:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c00053e9:	85 d2                	test   edx,edx
c00053eb:	74 03                	je     c00053f0 <f_mkfs+0x2f>
c00053ed:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00053f0:	85 db                	test   ebx,ebx
c00053f2:	75 05                	jne    c00053f9 <f_mkfs+0x38>
c00053f4:	bb e0 f3 01 c0       	mov    ebx,0xc001f3e0
c00053f9:	0f b6 c0             	movzx  eax,al
c00053fc:	83 ec 0c             	sub    esp,0xc
c00053ff:	be 03 00 00 00       	mov    esi,0x3
c0005404:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000540c:	e8 1c c9 ff ff       	call   c0001d2d <disk_initialize>
c0005411:	83 c4 10             	add    esp,0x10
c0005414:	a8 01                	test   al,0x1
c0005416:	0f 85 90 07 00 00    	jne    c0005bac <f_mkfs+0x7eb>
c000541c:	a8 04                	test   al,0x4
c000541e:	be 0a 00 00 00       	mov    esi,0xa
c0005423:	0f 85 83 07 00 00    	jne    c0005bac <f_mkfs+0x7eb>
c0005429:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000542c:	85 c0                	test   eax,eax
c000542e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005432:	75 20                	jne    c0005454 <f_mkfs+0x93>
c0005434:	51                   	push   ecx
c0005435:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005439:	50                   	push   eax
c000543a:	6a 03                	push   0x3
c000543c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005440:	e8 17 c9 ff ff       	call   c0001d5c <disk_ioctl>
c0005445:	83 c4 10             	add    esp,0x10
c0005448:	85 c0                	test   eax,eax
c000544a:	74 08                	je     c0005454 <f_mkfs+0x93>
c000544c:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005454:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0005458:	8d 42 ff             	lea    eax,[edx-0x1]
c000545b:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005460:	77 04                	ja     c0005466 <f_mkfs+0xa5>
c0005462:	85 c2                	test   edx,eax
c0005464:	74 08                	je     c000546e <f_mkfs+0xad>
c0005466:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000546e:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005471:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0005475:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005479:	48                   	dec    eax
c000547a:	3c 01                	cmp    al,0x1
c000547c:	76 05                	jbe    c0005483 <f_mkfs+0xc2>
c000547e:	c6 44 24 30 01       	mov    BYTE PTR [esp+0x30],0x1
c0005483:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005486:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000548a:	48                   	dec    eax
c000548b:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005490:	77 15                	ja     c00054a7 <f_mkfs+0xe6>
c0005492:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c0005497:	b8 00 02 00 00       	mov    eax,0x200
c000549c:	0f 44 44 24 14       	cmove  eax,DWORD PTR [esp+0x14]
c00054a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054a5:	eb 08                	jmp    c00054af <f_mkfs+0xee>
c00054a7:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00054af:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00054b2:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00054b8:	77 0f                	ja     c00054c9 <f_mkfs+0x108>
c00054ba:	c4 e2 78 f3 cf       	blsr   eax,edi
c00054bf:	b8 00 00 00 00       	mov    eax,0x0
c00054c4:	0f 45 f8             	cmovne edi,eax
c00054c7:	eb 02                	jmp    c00054cb <f_mkfs+0x10a>
c00054c9:	31 ff                	xor    edi,edi
c00054cb:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c00054d3:	77 0a                	ja     c00054df <f_mkfs+0x11e>
c00054d5:	be 11 00 00 00       	mov    esi,0x11
c00054da:	e9 cd 06 00 00       	jmp    c0005bac <f_mkfs+0x7eb>
c00054df:	8b 33                	mov    esi,DWORD PTR [ebx]
c00054e1:	8b 5c 24 78          	mov    ebx,DWORD PTR [esp+0x78]
c00054e5:	85 db                	test   ebx,ebx
c00054e7:	75 1e                	jne    c0005507 <f_mkfs+0x146>
c00054e9:	83 ec 0c             	sub    esp,0xc
c00054ec:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00054f3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00054f8:	50                   	push   eax
c00054f9:	e8 ba 06 00 00       	call   c0005bb8 <ff_memalloc>
c00054fe:	83 c4 10             	add    esp,0x10
c0005501:	85 c0                	test   eax,eax
c0005503:	89 c3                	mov    ebx,eax
c0005505:	74 ce                	je     c00054d5 <f_mkfs+0x114>
c0005507:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000550f:	52                   	push   edx
c0005510:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005514:	50                   	push   eax
c0005515:	6a 01                	push   0x1
c0005517:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000551b:	e8 3c c8 ff ff       	call   c0001d5c <disk_ioctl>
c0005520:	83 c4 10             	add    esp,0x10
c0005523:	85 c0                	test   eax,eax
c0005525:	0f 85 24 06 00 00    	jne    c0005b4f <f_mkfs+0x78e>
c000552b:	89 f0                	mov    eax,esi
c000552d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0005535:	83 e0 08             	and    eax,0x8
c0005538:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000553c:	75 18                	jne    c0005556 <f_mkfs+0x195>
c000553e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005542:	83 f8 3f             	cmp    eax,0x3f
c0005545:	76 0f                	jbe    c0005556 <f_mkfs+0x195>
c0005547:	83 e8 3f             	sub    eax,0x3f
c000554a:	c7 44 24 18 3f 00 00 00 	mov    DWORD PTR [esp+0x18],0x3f
c0005552:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005556:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000555a:	83 f8 7f             	cmp    eax,0x7f
c000555d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005561:	0f 86 53 02 00 00    	jbe    c00057ba <f_mkfs+0x3f9>
c0005567:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000556d:	b9 80 00 00 00       	mov    ecx,0x80
c0005572:	77 05                	ja     c0005579 <f_mkfs+0x1b8>
c0005574:	c1 ef 09             	shr    edi,0x9
c0005577:	89 f9                	mov    ecx,edi
c0005579:	89 f0                	mov    eax,esi
c000557b:	89 f7                	mov    edi,esi
c000557d:	83 e0 01             	and    eax,0x1
c0005580:	83 e7 02             	and    edi,0x2
c0005583:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0005587:	0f b6 c0             	movzx  eax,al
c000558a:	74 0a                	je     c0005596 <f_mkfs+0x1d5>
c000558c:	85 c0                	test   eax,eax
c000558e:	0f 84 47 01 00 00    	je     c00056db <f_mkfs+0x31a>
c0005594:	eb 37                	jmp    c00055cd <f_mkfs+0x20c>
c0005596:	85 c0                	test   eax,eax
c0005598:	be 13 00 00 00       	mov    esi,0x13
c000559d:	75 2e                	jne    c00055cd <f_mkfs+0x20c>
c000559f:	e9 c5 05 00 00       	jmp    c0005b69 <f_mkfs+0x7a8>
c00055a4:	83 f8 02             	cmp    eax,0x2
c00055a7:	0f 85 05 02 00 00    	jne    c00057b2 <f_mkfs+0x3f1>
c00055ad:	81 fd f5 ff 00 00    	cmp    ebp,0xfff5
c00055b3:	0f 86 dc 01 00 00    	jbe    c0005795 <f_mkfs+0x3d4>
c00055b9:	85 c9                	test   ecx,ecx
c00055bb:	0f 85 bd 05 00 00    	jne    c0005b7e <f_mkfs+0x7bd>
c00055c1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00055c4:	83 f9 40             	cmp    ecx,0x40
c00055c7:	0f 87 c1 05 00 00    	ja     c0005b8e <f_mkfs+0x7cd>
c00055cd:	85 c9                	test   ecx,ecx
c00055cf:	89 cf                	mov    edi,ecx
c00055d1:	75 1c                	jne    c00055ef <f_mkfs+0x22e>
c00055d3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00055d7:	b8 c0 f3 01 c0       	mov    eax,0xc001f3c0
c00055dc:	bf 01 00 00 00       	mov    edi,0x1
c00055e1:	c1 ee 0c             	shr    esi,0xc
c00055e4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00055e7:	85 d2                	test   edx,edx
c00055e9:	0f 85 5b 01 00 00    	jne    c000574a <f_mkfs+0x389>
c00055ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00055f3:	31 d2                	xor    edx,edx
c00055f5:	f7 f7                	div    edi
c00055f7:	3d f5 0f 00 00       	cmp    eax,0xff5
c00055fc:	0f 86 5a 01 00 00    	jbe    c000575c <f_mkfs+0x39b>
c0005602:	83 c0 02             	add    eax,0x2
c0005605:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000560a:	01 c0                	add    eax,eax
c000560c:	05 ff 01 00 00       	add    eax,0x1ff
c0005611:	c7 44 24 28 01 00 00 00 	mov    DWORD PTR [esp+0x28],0x1
c0005619:	c1 e8 09             	shr    eax,0x9
c000561c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005620:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005624:	c1 e0 05             	shl    eax,0x5
c0005627:	c1 e8 09             	shr    eax,0x9
c000562a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000562e:	0f b6 44 24 30       	movzx  eax,BYTE PTR [esp+0x30]
c0005633:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005637:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000563b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000563f:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005643:	0f af 6c 24 2c       	imul   ebp,DWORD PTR [esp+0x2c]
c0005648:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000564c:	01 c5                	add    ebp,eax
c000564e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0005652:	03 6c 24 34          	add    ebp,DWORD PTR [esp+0x34]
c0005656:	8d 74 28 ff          	lea    esi,[eax+ebp*1-0x1]
c000565a:	f7 d8                	neg    eax
c000565c:	21 c6                	and    esi,eax
c000565e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0005663:	29 ee                	sub    esi,ebp
c0005665:	83 f8 03             	cmp    eax,0x3
c0005668:	0f 85 01 01 00 00    	jne    c000576f <f_mkfs+0x3ae>
c000566e:	01 74 24 28          	add    DWORD PTR [esp+0x28],esi
c0005672:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005676:	89 f8                	mov    eax,edi
c0005678:	c1 e0 04             	shl    eax,0x4
c000567b:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000567f:	01 c5                	add    ebp,eax
c0005681:	39 6c 24 20          	cmp    DWORD PTR [esp+0x20],ebp
c0005685:	0f 82 2f 01 00 00    	jb     c00057ba <f_mkfs+0x3f9>
c000568b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000568f:	31 d2                	xor    edx,edx
c0005691:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
c0005695:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0005699:	89 c5                	mov    ebp,eax
c000569b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000569f:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
c00056a4:	29 c5                	sub    ebp,eax
c00056a6:	89 e8                	mov    eax,ebp
c00056a8:	f7 f7                	div    edi
c00056aa:	89 c5                	mov    ebp,eax
c00056ac:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00056b1:	83 f8 03             	cmp    eax,0x3
c00056b4:	0f 85 ea fe ff ff    	jne    c00055a4 <f_mkfs+0x1e3>
c00056ba:	81 fd f5 ff 00 00    	cmp    ebp,0xfff5
c00056c0:	0f 87 03 01 00 00    	ja     c00057c9 <f_mkfs+0x408>
c00056c6:	85 c9                	test   ecx,ecx
c00056c8:	0f 85 ec 00 00 00    	jne    c00057ba <f_mkfs+0x3f9>
c00056ce:	83 ff 01             	cmp    edi,0x1
c00056d1:	0f 86 e3 00 00 00    	jbe    c00057ba <f_mkfs+0x3f9>
c00056d7:	d1 ef                	shr    edi,1
c00056d9:	89 f9                	mov    ecx,edi
c00056db:	85 c9                	test   ecx,ecx
c00056dd:	89 ce                	mov    esi,ecx
c00056df:	75 25                	jne    c0005706 <f_mkfs+0x345>
c00056e1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00056e5:	b8 d0 f3 01 c0       	mov    eax,0xc001f3d0
c00056ea:	b9 01 00 00 00       	mov    ecx,0x1
c00056ef:	c1 ee 11             	shr    esi,0x11
c00056f2:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00056f5:	85 d2                	test   edx,edx
c00056f7:	74 0b                	je     c0005704 <f_mkfs+0x343>
c00056f9:	83 c0 02             	add    eax,0x2
c00056fc:	39 f2                	cmp    edx,esi
c00056fe:	77 04                	ja     c0005704 <f_mkfs+0x343>
c0005700:	01 c9                	add    ecx,ecx
c0005702:	eb ee                	jmp    c00056f2 <f_mkfs+0x331>
c0005704:	31 f6                	xor    esi,esi
c0005706:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000570a:	31 d2                	xor    edx,edx
c000570c:	f7 f1                	div    ecx
c000570e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005715:	2d f6 ff 00 00       	sub    eax,0xfff6
c000571a:	c1 ea 09             	shr    edx,0x9
c000571d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005722:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005726:	0f 87 8e 00 00 00    	ja     c00057ba <f_mkfs+0x3f9>
c000572c:	89 cf                	mov    edi,ecx
c000572e:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0005736:	89 f1                	mov    ecx,esi
c0005738:	c7 44 24 28 20 00 00 00 	mov    DWORD PTR [esp+0x28],0x20
c0005740:	c6 44 24 0f 03       	mov    BYTE PTR [esp+0xf],0x3
c0005745:	e9 e4 fe ff ff       	jmp    c000562e <f_mkfs+0x26d>
c000574a:	83 c0 02             	add    eax,0x2
c000574d:	39 f2                	cmp    edx,esi
c000574f:	0f 87 9a fe ff ff    	ja     c00055ef <f_mkfs+0x22e>
c0005755:	01 ff                	add    edi,edi
c0005757:	e9 88 fe ff ff       	jmp    c00055e4 <f_mkfs+0x223>
c000575c:	8d 04 40             	lea    eax,[eax+eax*2]
c000575f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0005764:	40                   	inc    eax
c0005765:	d1 e8                	shr    eax,1
c0005767:	83 c0 03             	add    eax,0x3
c000576a:	e9 9d fe ff ff       	jmp    c000560c <f_mkfs+0x24b>
c000576f:	31 d2                	xor    edx,edx
c0005771:	89 f0                	mov    eax,esi
c0005773:	f7 74 24 2c          	div    DWORD PTR [esp+0x2c]
c0005777:	85 d2                	test   edx,edx
c0005779:	74 09                	je     c0005784 <f_mkfs+0x3c3>
c000577b:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000577f:	4e                   	dec    esi
c0005780:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005784:	89 f0                	mov    eax,esi
c0005786:	31 d2                	xor    edx,edx
c0005788:	f7 74 24 2c          	div    DWORD PTR [esp+0x2c]
c000578c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0005790:	e9 e1 fe ff ff       	jmp    c0005676 <f_mkfs+0x2b5>
c0005795:	81 fd f5 0f 00 00    	cmp    ebp,0xff5
c000579b:	77 2c                	ja     c00057c9 <f_mkfs+0x408>
c000579d:	85 c9                	test   ecx,ecx
c000579f:	75 19                	jne    c00057ba <f_mkfs+0x3f9>
c00057a1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057a4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057aa:	0f 86 1d fe ff ff    	jbe    c00055cd <f_mkfs+0x20c>
c00057b0:	eb 08                	jmp    c00057ba <f_mkfs+0x3f9>
c00057b2:	81 fd f5 0f 00 00    	cmp    ebp,0xff5
c00057b8:	76 0a                	jbe    c00057c4 <f_mkfs+0x403>
c00057ba:	be 0e 00 00 00       	mov    esi,0xe
c00057bf:	e9 a5 03 00 00       	jmp    c0005b69 <f_mkfs+0x7a8>
c00057c4:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00057c9:	31 d2                	xor    edx,edx
c00057cb:	b9 00 02 00 00       	mov    ecx,0x200
c00057d0:	89 d8                	mov    eax,ebx
c00057d2:	e8 e5 c5 ff ff       	call   c0001dbc <mem_set>
c00057d7:	b9 0b 00 00 00       	mov    ecx,0xb
c00057dc:	ba 72 f3 01 c0       	mov    edx,0xc001f372
c00057e1:	89 d8                	mov    eax,ebx
c00057e3:	e8 bf c5 ff ff       	call   c0001da7 <mem_cpy>
c00057e8:	8d 43 0b             	lea    eax,[ebx+0xb]
c00057eb:	ba 00 02 00 00       	mov    edx,0x200
c00057f0:	e8 ab c5 ff ff       	call   c0001da0 <st_word>
c00057f5:	0f b7 54 24 28       	movzx  edx,WORD PTR [esp+0x28]
c00057fa:	89 f8                	mov    eax,edi
c00057fc:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c00057ff:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005802:	e8 99 c5 ff ff       	call   c0001da0 <st_word>
c0005807:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c000580b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000580e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0005813:	83 f8 03             	cmp    eax,0x3
c0005816:	b8 00 00 00 00       	mov    eax,0x0
c000581b:	0f 45 44 24 14       	cmovne eax,DWORD PTR [esp+0x14]
c0005820:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005824:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005828:	8d 43 11             	lea    eax,[ebx+0x11]
c000582b:	e8 70 c5 ff ff       	call   c0001da0 <st_word>
c0005830:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005834:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000583a:	77 0a                	ja     c0005846 <f_mkfs+0x485>
c000583c:	8d 43 13             	lea    eax,[ebx+0x13]
c000583f:	e8 5c c5 ff ff       	call   c0001da0 <st_word>
c0005844:	eb 08                	jmp    c000584e <f_mkfs+0x48d>
c0005846:	8d 43 20             	lea    eax,[ebx+0x20]
c0005849:	e8 56 c5 ff ff       	call   c0001da4 <st_dword>
c000584e:	8d 43 18             	lea    eax,[ebx+0x18]
c0005851:	ba 3f 00 00 00       	mov    edx,0x3f
c0005856:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c000585a:	e8 41 c5 ff ff       	call   c0001da0 <st_word>
c000585f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005862:	ba ff 00 00 00       	mov    edx,0xff
c0005867:	e8 34 c5 ff ff       	call   c0001da0 <st_word>
c000586c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005870:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005873:	e8 2c c5 ff ff       	call   c0001da4 <st_dword>
c0005878:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000587d:	83 f8 03             	cmp    eax,0x3
c0005880:	75 57                	jne    c00058d9 <f_mkfs+0x518>
c0005882:	8d 43 43             	lea    eax,[ebx+0x43]
c0005885:	ba 00 00 21 50       	mov    edx,0x50210000
c000588a:	e8 15 c5 ff ff       	call   c0001da4 <st_dword>
c000588f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005893:	8d 43 24             	lea    eax,[ebx+0x24]
c0005896:	e8 09 c5 ff ff       	call   c0001da4 <st_dword>
c000589b:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000589e:	ba 02 00 00 00       	mov    edx,0x2
c00058a3:	e8 fc c4 ff ff       	call   c0001da4 <st_dword>
c00058a8:	8d 43 30             	lea    eax,[ebx+0x30]
c00058ab:	ba 01 00 00 00       	mov    edx,0x1
c00058b0:	e8 eb c4 ff ff       	call   c0001da0 <st_word>
c00058b5:	8d 43 32             	lea    eax,[ebx+0x32]
c00058b8:	ba 06 00 00 00       	mov    edx,0x6
c00058bd:	e8 de c4 ff ff       	call   c0001da0 <st_word>
c00058c2:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c00058c6:	8d 43 47             	lea    eax,[ebx+0x47]
c00058c9:	b9 13 00 00 00       	mov    ecx,0x13
c00058ce:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c00058d2:	ba 7e f3 01 c0       	mov    edx,0xc001f37e
c00058d7:	eb 2f                	jmp    c0005908 <f_mkfs+0x547>
c00058d9:	8d 43 27             	lea    eax,[ebx+0x27]
c00058dc:	ba 00 00 21 50       	mov    edx,0x50210000
c00058e1:	e8 be c4 ff ff       	call   c0001da4 <st_dword>
c00058e6:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00058eb:	8d 43 16             	lea    eax,[ebx+0x16]
c00058ee:	e8 ad c4 ff ff       	call   c0001da0 <st_word>
c00058f3:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c00058f7:	8d 43 2b             	lea    eax,[ebx+0x2b]
c00058fa:	b9 13 00 00 00       	mov    ecx,0x13
c00058ff:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005903:	ba 92 f3 01 c0       	mov    edx,0xc001f392
c0005908:	e8 9a c4 ff ff       	call   c0001da7 <mem_cpy>
c000590d:	8d b3 fe 01 00 00    	lea    esi,[ebx+0x1fe]
c0005913:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005918:	89 f0                	mov    eax,esi
c000591a:	e8 81 c4 ff ff       	call   c0001da0 <st_word>
c000591f:	6a 01                	push   0x1
c0005921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005925:	53                   	push   ebx
c0005926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000592a:	e8 17 c4 ff ff       	call   c0001d46 <disk_write>
c000592f:	83 c4 10             	add    esp,0x10
c0005932:	85 c0                	test   eax,eax
c0005934:	0f 85 15 02 00 00    	jne    c0005b4f <f_mkfs+0x78e>
c000593a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000593f:	83 f8 03             	cmp    eax,0x3
c0005942:	0f 85 94 00 00 00    	jne    c00059dc <f_mkfs+0x61b>
c0005948:	6a 01                	push   0x1
c000594a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000594e:	83 c0 06             	add    eax,0x6
c0005951:	50                   	push   eax
c0005952:	53                   	push   ebx
c0005953:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005957:	e8 ea c3 ff ff       	call   c0001d46 <disk_write>
c000595c:	b9 00 02 00 00       	mov    ecx,0x200
c0005961:	31 d2                	xor    edx,edx
c0005963:	89 d8                	mov    eax,ebx
c0005965:	e8 52 c4 ff ff       	call   c0001dbc <mem_set>
c000596a:	ba 52 52 61 41       	mov    edx,0x41615252
c000596f:	89 d8                	mov    eax,ebx
c0005971:	e8 2e c4 ff ff       	call   c0001da4 <st_dword>
c0005976:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c000597c:	ba 72 72 41 61       	mov    edx,0x61417272
c0005981:	e8 1e c4 ff ff       	call   c0001da4 <st_dword>
c0005986:	8d 55 ff             	lea    edx,[ebp-0x1]
c0005989:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c000598f:	e8 10 c4 ff ff       	call   c0001da4 <st_dword>
c0005994:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c000599a:	ba 02 00 00 00       	mov    edx,0x2
c000599f:	e8 00 c4 ff ff       	call   c0001da4 <st_dword>
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 f0                	mov    eax,esi
c00059ab:	e8 f0 c3 ff ff       	call   c0001da0 <st_word>
c00059b0:	6a 01                	push   0x1
c00059b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00059b6:	83 c0 07             	add    eax,0x7
c00059b9:	50                   	push   eax
c00059ba:	53                   	push   ebx
c00059bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00059bf:	e8 82 c3 ff ff       	call   c0001d46 <disk_write>
c00059c4:	83 c4 20             	add    esp,0x20
c00059c7:	6a 01                	push   0x1
c00059c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00059cd:	40                   	inc    eax
c00059ce:	50                   	push   eax
c00059cf:	53                   	push   ebx
c00059d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059d4:	e8 6d c3 ff ff       	call   c0001d46 <disk_write>
c00059d9:	83 c4 10             	add    esp,0x10
c00059dc:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00059e0:	31 d2                	xor    edx,edx
c00059e2:	89 d8                	mov    eax,ebx
c00059e4:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c00059e8:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00059ee:	e8 c9 c3 ff ff       	call   c0001dbc <mem_set>
c00059f3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00059f8:	c1 ed 09             	shr    ebp,0x9
c00059fb:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a00:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a05:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0005a0d:	83 f8 01             	cmp    eax,0x1
c0005a10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005a14:	0f 44 d1             	cmove  edx,ecx
c0005a17:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0005a1b:	83 7c 24 28 03       	cmp    DWORD PTR [esp+0x28],0x3
c0005a20:	75 21                	jne    c0005a43 <f_mkfs+0x682>
c0005a22:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a27:	89 d8                	mov    eax,ebx
c0005a29:	e8 76 c3 ff ff       	call   c0001da4 <st_dword>
c0005a2e:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a31:	83 ca ff             	or     edx,0xffffffff
c0005a34:	e8 6b c3 ff ff       	call   c0001da4 <st_dword>
c0005a39:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a3c:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005a41:	eb 06                	jmp    c0005a49 <f_mkfs+0x688>
c0005a43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005a47:	89 d8                	mov    eax,ebx
c0005a49:	e8 56 c3 ff ff       	call   c0001da4 <st_dword>
c0005a4e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005a52:	39 ee                	cmp    esi,ebp
c0005a54:	89 e8                	mov    eax,ebp
c0005a56:	0f 46 c6             	cmovbe eax,esi
c0005a59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005a5d:	50                   	push   eax
c0005a5e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a62:	53                   	push   ebx
c0005a63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a67:	e8 da c2 ff ff       	call   c0001d46 <disk_write>
c0005a6c:	83 c4 10             	add    esp,0x10
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	0f 85 d8 00 00 00    	jne    c0005b4f <f_mkfs+0x78e>
c0005a77:	b9 00 02 00 00       	mov    ecx,0x200
c0005a7c:	31 d2                	xor    edx,edx
c0005a7e:	89 d8                	mov    eax,ebx
c0005a80:	e8 37 c3 ff ff       	call   c0001dbc <mem_set>
c0005a85:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005a89:	01 4c 24 24          	add    DWORD PTR [esp+0x24],ecx
c0005a8d:	29 ce                	sub    esi,ecx
c0005a8f:	75 c1                	jne    c0005a52 <f_mkfs+0x691>
c0005a91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a95:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005a9d:	40                   	inc    eax
c0005a9e:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0005aa2:	0f 87 73 ff ff ff    	ja     c0005a1b <f_mkfs+0x65a>
c0005aa8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0005aad:	83 f8 03             	cmp    eax,0x3
c0005ab0:	0f 45 7c 24 34       	cmovne edi,DWORD PTR [esp+0x34]
c0005ab5:	39 ef                	cmp    edi,ebp
c0005ab7:	89 ee                	mov    esi,ebp
c0005ab9:	0f 46 f7             	cmovbe esi,edi
c0005abc:	56                   	push   esi
c0005abd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005ac1:	53                   	push   ebx
c0005ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005ac6:	e8 7b c2 ff ff       	call   c0001d46 <disk_write>
c0005acb:	83 c4 10             	add    esp,0x10
c0005ace:	85 c0                	test   eax,eax
c0005ad0:	75 7d                	jne    c0005b4f <f_mkfs+0x78e>
c0005ad2:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005ad6:	29 f7                	sub    edi,esi
c0005ad8:	75 db                	jne    c0005ab5 <f_mkfs+0x6f4>
c0005ada:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0005adf:	b9 0c 00 00 00       	mov    ecx,0xc
c0005ae4:	83 f8 03             	cmp    eax,0x3
c0005ae7:	74 1e                	je     c0005b07 <f_mkfs+0x746>
c0005ae9:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005af1:	b9 06 00 00 00       	mov    ecx,0x6
c0005af6:	77 0f                	ja     c0005b07 <f_mkfs+0x746>
c0005af8:	83 f8 02             	cmp    eax,0x2
c0005afb:	b9 04 00 00 00       	mov    ecx,0x4
c0005b00:	74 05                	je     c0005b07 <f_mkfs+0x746>
c0005b02:	b9 01 00 00 00       	mov    ecx,0x1
c0005b07:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b0c:	75 2a                	jne    c0005b38 <f_mkfs+0x777>
c0005b0e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b12:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b1a:	83 ec 0c             	sub    esp,0xc
c0005b1d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005b21:	53                   	push   ebx
c0005b22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b26:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b2a:	e8 93 d2 ff ff       	call   c0002dc2 <create_partition>
c0005b2f:	83 c4 10             	add    esp,0x10
c0005b32:	85 c0                	test   eax,eax
c0005b34:	89 c6                	mov    esi,eax
c0005b36:	75 31                	jne    c0005b69 <f_mkfs+0x7a8>
c0005b38:	50                   	push   eax
c0005b39:	31 f6                	xor    esi,esi
c0005b3b:	6a 00                	push   0x0
c0005b3d:	6a 00                	push   0x0
c0005b3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b43:	e8 14 c2 ff ff       	call   c0001d5c <disk_ioctl>
c0005b48:	83 c4 10             	add    esp,0x10
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	74 1a                	je     c0005b69 <f_mkfs+0x7a8>
c0005b4f:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0005b54:	75 0c                	jne    c0005b62 <f_mkfs+0x7a1>
c0005b56:	83 ec 0c             	sub    esp,0xc
c0005b59:	53                   	push   ebx
c0005b5a:	e8 71 00 00 00       	call   c0005bd0 <ff_memfree>
c0005b5f:	83 c4 10             	add    esp,0x10
c0005b62:	be 01 00 00 00       	mov    esi,0x1
c0005b67:	eb 43                	jmp    c0005bac <f_mkfs+0x7eb>
c0005b69:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0005b6e:	75 3c                	jne    c0005bac <f_mkfs+0x7eb>
c0005b70:	83 ec 0c             	sub    esp,0xc
c0005b73:	53                   	push   ebx
c0005b74:	e8 57 00 00 00       	call   c0005bd0 <ff_memfree>
c0005b79:	83 c4 10             	add    esp,0x10
c0005b7c:	eb 2e                	jmp    c0005bac <f_mkfs+0x7eb>
c0005b7e:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005b83:	0f 85 52 fb ff ff    	jne    c00056db <f_mkfs+0x31a>
c0005b89:	e9 2c fc ff ff       	jmp    c00057ba <f_mkfs+0x3f9>
c0005b8e:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005b93:	0f 85 48 fb ff ff    	jne    c00056e1 <f_mkfs+0x320>
c0005b99:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005b9f:	89 cf                	mov    edi,ecx
c0005ba1:	0f 86 48 fa ff ff    	jbe    c00055ef <f_mkfs+0x22e>
c0005ba7:	e9 0e fc ff ff       	jmp    c00057ba <f_mkfs+0x3f9>
c0005bac:	83 c4 5c             	add    esp,0x5c
c0005baf:	89 f0                	mov    eax,esi
c0005bb1:	5b                   	pop    ebx
c0005bb2:	5e                   	pop    esi
c0005bb3:	5f                   	pop    edi
c0005bb4:	5d                   	pop    ebp
c0005bb5:	c3                   	ret    
c0005bb6:	66 90                	xchg   ax,ax

c0005bb8 <ff_memalloc>:
c0005bb8:	83 ec 0c             	sub    esp,0xc
c0005bbb:	83 ec 0c             	sub    esp,0xc
c0005bbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005bc2:	e8 68 1e 00 00       	call   c0007a2f <malloc>
c0005bc7:	83 c4 10             	add    esp,0x10
c0005bca:	83 c4 0c             	add    esp,0xc
c0005bcd:	c3                   	ret    
c0005bce:	66 90                	xchg   ax,ax

c0005bd0 <ff_memfree>:
c0005bd0:	83 ec 0c             	sub    esp,0xc
c0005bd3:	83 ec 0c             	sub    esp,0xc
c0005bd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005bda:	e8 60 1e 00 00       	call   c0007a3f <free>
c0005bdf:	83 c4 10             	add    esp,0x10
c0005be2:	90                   	nop
c0005be3:	83 c4 0c             	add    esp,0xc
c0005be6:	c3                   	ret    
c0005be7:	90                   	nop

c0005be8 <ff_uni2oem>:
c0005be8:	83 ec 14             	sub    esp,0x14
c0005beb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bef:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005bf3:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005bfa:	c7 44 24 0c c0 f7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f7c0
c0005c02:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c07:	77 0b                	ja     c0005c14 <ff_uni2oem+0x2c>
c0005c09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c0d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c12:	eb 64                	jmp    c0005c78 <ff_uni2oem+0x90>
c0005c14:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c1c:	77 5a                	ja     c0005c78 <ff_uni2oem+0x90>
c0005c1e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c22:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c27:	75 4f                	jne    c0005c78 <ff_uni2oem+0x90>
c0005c29:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c30:	eb 12                	jmp    c0005c44 <ff_uni2oem+0x5c>
c0005c32:	66 90                	xchg   ax,ax
c0005c34:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005c39:	83 c0 01             	add    eax,0x1
c0005c3c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c41:	8d 76 00             	lea    esi,[esi+0x0]
c0005c44:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c49:	83 f8 7f             	cmp    eax,0x7f
c0005c4c:	77 1a                	ja     c0005c68 <ff_uni2oem+0x80>
c0005c4e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c53:	8d 14 00             	lea    edx,[eax+eax*1]
c0005c56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c5a:	01 d0                	add    eax,edx
c0005c5c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c5f:	0f b7 c0             	movzx  eax,ax
c0005c62:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005c66:	75 cc                	jne    c0005c34 <ff_uni2oem+0x4c>
c0005c68:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005c6d:	83 e8 80             	sub    eax,0xffffff80
c0005c70:	0f b6 c0             	movzx  eax,al
c0005c73:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c78:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005c7d:	83 c4 14             	add    esp,0x14
c0005c80:	c3                   	ret    
c0005c81:	8d 76 00             	lea    esi,[esi+0x0]

c0005c84 <ff_oem2uni>:
c0005c84:	83 ec 18             	sub    esp,0x18
c0005c87:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005c8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005c8f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005c94:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c98:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005c9f:	c7 44 24 10 c0 f7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f7c0
c0005ca7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005cac:	83 f8 7f             	cmp    eax,0x7f
c0005caf:	77 0b                	ja     c0005cbc <ff_oem2uni+0x38>
c0005cb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005cb5:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005cba:	eb 34                	jmp    c0005cf0 <ff_oem2uni+0x6c>
c0005cbc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cc0:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc5:	75 29                	jne    c0005cf0 <ff_oem2uni+0x6c>
c0005cc7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ccc:	3d ff 00 00 00       	cmp    eax,0xff
c0005cd1:	77 1d                	ja     c0005cf0 <ff_oem2uni+0x6c>
c0005cd3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005cd8:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005cdd:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ce4:	01 d0                	add    eax,edx
c0005ce6:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ce9:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005cee:	66 90                	xchg   ax,ax
c0005cf0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005cf5:	83 c4 18             	add    esp,0x18
c0005cf8:	c3                   	ret    
c0005cf9:	8d 76 00             	lea    esi,[esi+0x0]

c0005cfc <ff_wtoupper>:
c0005cfc:	83 ec 10             	sub    esp,0x10
c0005cff:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d07:	0f 87 a7 01 00 00    	ja     c0005eb4 <ff_wtoupper+0x1b8>
c0005d0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d11:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d16:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d1b:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d20:	77 0a                	ja     c0005d2c <ff_wtoupper+0x30>
c0005d22:	b8 c0 f5 01 c0       	mov    eax,0xc001f5c0
c0005d27:	eb 0b                	jmp    c0005d34 <ff_wtoupper+0x38>
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	b8 00 f5 01 c0       	mov    eax,0xc001f500
c0005d31:	8d 76 00             	lea    esi,[esi+0x0]
c0005d34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005d38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d3c:	8d 50 02             	lea    edx,[eax+0x2]
c0005d3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d43:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d46:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005d4b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005d50:	85 c0                	test   eax,eax
c0005d52:	0f 84 50 01 00 00    	je     c0005ea8 <ff_wtoupper+0x1ac>
c0005d58:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005d5d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005d62:	39 c2                	cmp    edx,eax
c0005d64:	0f 82 3e 01 00 00    	jb     c0005ea8 <ff_wtoupper+0x1ac>
c0005d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d6e:	8d 50 02             	lea    edx,[eax+0x2]
c0005d71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d75:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d78:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005d7d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005d82:	c1 e8 08             	shr    eax,0x8
c0005d85:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005d8a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d8f:	0f b6 c0             	movzx  eax,al
c0005d92:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005d97:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d9c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005da1:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005da6:	01 ca                	add    edx,ecx
c0005da8:	39 d0                	cmp    eax,edx
c0005daa:	0f 8d d4 00 00 00    	jge    c0005e84 <ff_wtoupper+0x188>
c0005db0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005db5:	83 f8 08             	cmp    eax,0x8
c0005db8:	0f 87 e6 00 00 00    	ja     c0005ea4 <ff_wtoupper+0x1a8>
c0005dbe:	8b 04 85 c0 f4 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0b40]
c0005dc5:	ff e0                	jmp    eax
c0005dc7:	90                   	nop
c0005dc8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dcd:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dd2:	29 c2                	sub    edx,eax
c0005dd4:	89 d0                	mov    eax,edx
c0005dd6:	8d 14 00             	lea    edx,[eax+eax*1]
c0005dd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ddd:	01 d0                	add    eax,edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005de7:	e9 94 00 00 00       	jmp    c0005e80 <ff_wtoupper+0x184>
c0005dec:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005df1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005df5:	89 d1                	mov    ecx,edx
c0005df7:	29 c1                	sub    ecx,eax
c0005df9:	89 c8                	mov    eax,ecx
c0005dfb:	83 e0 01             	and    eax,0x1
c0005dfe:	89 c2                	mov    edx,eax
c0005e00:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e05:	29 d0                	sub    eax,edx
c0005e07:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e0c:	eb 72                	jmp    c0005e80 <ff_wtoupper+0x184>
c0005e0e:	66 90                	xchg   ax,ax
c0005e10:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e15:	83 e8 10             	sub    eax,0x10
c0005e18:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e1d:	eb 61                	jmp    c0005e80 <ff_wtoupper+0x184>
c0005e1f:	90                   	nop
c0005e20:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e25:	83 e8 20             	sub    eax,0x20
c0005e28:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e2d:	eb 51                	jmp    c0005e80 <ff_wtoupper+0x184>
c0005e2f:	90                   	nop
c0005e30:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e35:	83 e8 30             	sub    eax,0x30
c0005e38:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e3d:	eb 41                	jmp    c0005e80 <ff_wtoupper+0x184>
c0005e3f:	90                   	nop
c0005e40:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e45:	83 e8 1a             	sub    eax,0x1a
c0005e48:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e4d:	eb 31                	jmp    c0005e80 <ff_wtoupper+0x184>
c0005e4f:	90                   	nop
c0005e50:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e55:	83 c0 08             	add    eax,0x8
c0005e58:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e5d:	eb 21                	jmp    c0005e80 <ff_wtoupper+0x184>
c0005e5f:	90                   	nop
c0005e60:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e65:	83 e8 50             	sub    eax,0x50
c0005e68:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e6d:	eb 11                	jmp    c0005e80 <ff_wtoupper+0x184>
c0005e6f:	90                   	nop
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005e7a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7f:	90                   	nop
c0005e80:	eb 22                	jmp    c0005ea4 <ff_wtoupper+0x1a8>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e89:	85 c0                	test   eax,eax
c0005e8b:	0f 85 a7 fe ff ff    	jne    c0005d38 <ff_wtoupper+0x3c>
c0005e91:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e96:	d1 e0                	shl    eax,1
c0005e98:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005e9c:	e9 97 fe ff ff       	jmp    c0005d38 <ff_wtoupper+0x3c>
c0005ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0005ea4:	90                   	nop
c0005ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ea8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ead:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0005eb4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005eb8:	83 c4 10             	add    esp,0x10
c0005ebb:	c3                   	ret    

c0005ebc <utf2ucs>:
c0005ebc:	57                   	push   edi
c0005ebd:	31 c9                	xor    ecx,ecx
c0005ebf:	89 d7                	mov    edi,edx
c0005ec1:	56                   	push   esi
c0005ec2:	53                   	push   ebx
c0005ec3:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005ec7:	89 de                	mov    esi,ebx
c0005ec9:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005ecd:	c1 fe 08             	sar    esi,0x8
c0005ed0:	89 f2                	mov    edx,esi
c0005ed2:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005ed5:	41                   	inc    ecx
c0005ed6:	85 db                	test   ebx,ebx
c0005ed8:	75 e9                	jne    c0005ec3 <utf2ucs+0x7>
c0005eda:	5b                   	pop    ebx
c0005edb:	5e                   	pop    esi
c0005edc:	5f                   	pop    edi
c0005edd:	c3                   	ret    

c0005ede <ucs2utfn>:
c0005ede:	83 e1 fe             	and    ecx,0xfffffffe
c0005ee1:	01 d1                	add    ecx,edx
c0005ee3:	39 d1                	cmp    ecx,edx
c0005ee5:	75 04                	jne    c0005eeb <ucs2utfn+0xd>
c0005ee7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005eea:	c3                   	ret    
c0005eeb:	57                   	push   edi
c0005eec:	56                   	push   esi
c0005eed:	53                   	push   ebx
c0005eee:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005ef1:	83 c2 02             	add    edx,0x2
c0005ef4:	89 de                	mov    esi,ebx
c0005ef6:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005efa:	c1 e6 08             	shl    esi,0x8
c0005efd:	09 f3                	or     ebx,esi
c0005eff:	83 fb 3b             	cmp    ebx,0x3b
c0005f02:	74 51                	je     c0005f55 <ucs2utfn+0x77>
c0005f04:	83 fb 7f             	cmp    ebx,0x7f
c0005f07:	7f 05                	jg     c0005f0e <ucs2utfn+0x30>
c0005f09:	88 18                	mov    BYTE PTR [eax],bl
c0005f0b:	40                   	inc    eax
c0005f0c:	eb 43                	jmp    c0005f51 <ucs2utfn+0x73>
c0005f0e:	89 df                	mov    edi,ebx
c0005f10:	89 de                	mov    esi,ebx
c0005f12:	83 e7 3f             	and    edi,0x3f
c0005f15:	c1 fe 06             	sar    esi,0x6
c0005f18:	83 cf 80             	or     edi,0xffffff80
c0005f1b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f21:	7f 12                	jg     c0005f35 <ucs2utfn+0x57>
c0005f23:	83 ce c0             	or     esi,0xffffffc0
c0005f26:	83 c0 02             	add    eax,0x2
c0005f29:	89 f3                	mov    ebx,esi
c0005f2b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f2e:	89 fb                	mov    ebx,edi
c0005f30:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005f33:	eb 1c                	jmp    c0005f51 <ucs2utfn+0x73>
c0005f35:	c1 fb 0c             	sar    ebx,0xc
c0005f38:	83 e6 3f             	and    esi,0x3f
c0005f3b:	83 c0 03             	add    eax,0x3
c0005f3e:	83 cb e0             	or     ebx,0xffffffe0
c0005f41:	83 ce 80             	or     esi,0xffffff80
c0005f44:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005f47:	89 f3                	mov    ebx,esi
c0005f49:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f4c:	89 fb                	mov    ebx,edi
c0005f4e:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005f51:	39 d1                	cmp    ecx,edx
c0005f53:	75 99                	jne    c0005eee <ucs2utfn+0x10>
c0005f55:	5b                   	pop    ebx
c0005f56:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f59:	5e                   	pop    esi
c0005f5a:	5f                   	pop    edi
c0005f5b:	c3                   	ret    

c0005f5c <isjoliet>:
c0005f5c:	31 d2                	xor    edx,edx
c0005f5e:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005f61:	75 26                	jne    c0005f89 <isjoliet+0x2d>
c0005f63:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005f67:	75 20                	jne    c0005f89 <isjoliet+0x2d>
c0005f69:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005f6d:	ba 02 00 00 00       	mov    edx,0x2
c0005f72:	83 f8 43             	cmp    eax,0x43
c0005f75:	74 12                	je     c0005f89 <isjoliet+0x2d>
c0005f77:	83 f8 45             	cmp    eax,0x45
c0005f7a:	ba 03 00 00 00       	mov    edx,0x3
c0005f7f:	74 08                	je     c0005f89 <isjoliet+0x2d>
c0005f81:	31 d2                	xor    edx,edx
c0005f83:	83 f8 40             	cmp    eax,0x40
c0005f86:	0f 94 c2             	sete   dl
c0005f89:	89 d0                	mov    eax,edx
c0005f8b:	c3                   	ret    

c0005f8c <htohl_32>:
c0005f8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0005f8e:	c3                   	ret    

c0005f8f <iso_733>:
c0005f8f:	eb fb                	jmp    c0005f8c <htohl_32>

c0005f91 <bgrad_cache>:
c0005f91:	83 fa 0e             	cmp    edx,0xe
c0005f94:	77 16                	ja     c0005fac <bgrad_cache+0x1b>
c0005f96:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005f99:	53                   	push   ebx
c0005f9a:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005f9e:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005fa1:	42                   	inc    edx
c0005fa2:	83 fa 0f             	cmp    edx,0xf
c0005fa5:	75 f3                	jne    c0005f9a <bgrad_cache+0x9>
c0005fa7:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005faa:	5b                   	pop    ebx
c0005fab:	c3                   	ret    
c0005fac:	c3                   	ret    

c0005fad <ucscompare>:
c0005fad:	55                   	push   ebp
c0005fae:	57                   	push   edi
c0005faf:	89 c7                	mov    edi,eax
c0005fb1:	56                   	push   esi
c0005fb2:	89 d6                	mov    esi,edx
c0005fb4:	31 d2                	xor    edx,edx
c0005fb6:	53                   	push   ebx
c0005fb7:	83 ec 1c             	sub    esp,0x1c
c0005fba:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005fbe:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005fc3:	c1 e3 08             	shl    ebx,0x8
c0005fc6:	09 c3                	or     ebx,eax
c0005fc8:	39 ca                	cmp    edx,ecx
c0005fca:	7d 42                	jge    c000600e <ucscompare+0x61>
c0005fcc:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005fd0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005fd4:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005fd9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005fdd:	c1 e0 08             	shl    eax,0x8
c0005fe0:	09 e8                	or     eax,ebp
c0005fe2:	83 f8 3b             	cmp    eax,0x3b
c0005fe5:	74 27                	je     c000600e <ucscompare+0x61>
c0005fe7:	83 ec 0c             	sub    esp,0xc
c0005fea:	50                   	push   eax
c0005feb:	e8 e0 a8 ff ff       	call   c00008d0 <tolower>
c0005ff0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005ff3:	89 c5                	mov    ebp,eax
c0005ff5:	e8 d6 a8 ff ff       	call   c00008d0 <tolower>
c0005ffa:	83 c4 10             	add    esp,0x10
c0005ffd:	39 c5                	cmp    ebp,eax
c0005fff:	75 20                	jne    c0006021 <ucscompare+0x74>
c0006001:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006005:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006009:	83 c2 02             	add    edx,0x2
c000600c:	eb ac                	jmp    c0005fba <ucscompare+0xd>
c000600e:	83 fb 2f             	cmp    ebx,0x2f
c0006011:	0f 95 c2             	setne  dl
c0006014:	31 c0                	xor    eax,eax
c0006016:	85 db                	test   ebx,ebx
c0006018:	0f 95 c0             	setne  al
c000601b:	21 d0                	and    eax,edx
c000601d:	f7 d8                	neg    eax
c000601f:	eb 03                	jmp    c0006024 <ucscompare+0x77>
c0006021:	83 c8 ff             	or     eax,0xffffffff
c0006024:	83 c4 1c             	add    esp,0x1c
c0006027:	5b                   	pop    ebx
c0006028:	5e                   	pop    esi
c0006029:	5f                   	pop    edi
c000602a:	5d                   	pop    ebp
c000602b:	c3                   	ret    

c000602c <fncompare>:
c000602c:	55                   	push   ebp
c000602d:	57                   	push   edi
c000602e:	89 c7                	mov    edi,eax
c0006030:	56                   	push   esi
c0006031:	89 ce                	mov    esi,ecx
c0006033:	53                   	push   ebx
c0006034:	31 db                	xor    ebx,ebx
c0006036:	83 ec 1c             	sub    esp,0x1c
c0006039:	39 d3                	cmp    ebx,edx
c000603b:	7d 45                	jge    c0006082 <fncompare+0x56>
c000603d:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006041:	83 f8 3b             	cmp    eax,0x3b
c0006044:	74 3c                	je     c0006082 <fncompare+0x56>
c0006046:	83 f8 2e             	cmp    eax,0x2e
c0006049:	75 0e                	jne    c0006059 <fncompare+0x2d>
c000604b:	8d 4a ff             	lea    ecx,[edx-0x1]
c000604e:	39 d9                	cmp    ecx,ebx
c0006050:	74 30                	je     c0006082 <fncompare+0x56>
c0006052:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0006057:	74 29                	je     c0006082 <fncompare+0x56>
c0006059:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000605d:	83 ec 0c             	sub    esp,0xc
c0006060:	50                   	push   eax
c0006061:	e8 6a a8 ff ff       	call   c00008d0 <tolower>
c0006066:	89 c5                	mov    ebp,eax
c0006068:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c000606c:	89 04 24             	mov    DWORD PTR [esp],eax
c000606f:	e8 5c a8 ff ff       	call   c00008d0 <tolower>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	39 c5                	cmp    ebp,eax
c0006079:	75 1e                	jne    c0006099 <fncompare+0x6d>
c000607b:	43                   	inc    ebx
c000607c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006080:	eb b7                	jmp    c0006039 <fncompare+0xd>
c0006082:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006086:	83 fa 2f             	cmp    edx,0x2f
c0006089:	0f 95 c1             	setne  cl
c000608c:	31 c0                	xor    eax,eax
c000608e:	85 d2                	test   edx,edx
c0006090:	0f 95 c0             	setne  al
c0006093:	21 c8                	and    eax,ecx
c0006095:	f7 d8                	neg    eax
c0006097:	eb 03                	jmp    c000609c <fncompare+0x70>
c0006099:	83 c8 ff             	or     eax,0xffffffff
c000609c:	83 c4 1c             	add    esp,0x1c
c000609f:	5b                   	pop    ebx
c00060a0:	5e                   	pop    esi
c00060a1:	5f                   	pop    edi
c00060a2:	5d                   	pop    ebp
c00060a3:	c3                   	ret    

c00060a4 <bclear_cache>:
c00060a4:	83 ec 18             	sub    esp,0x18
c00060a7:	68 c0 f8 01 c0       	push   0xc001f8c0
c00060ac:	e8 7b 31 01 00       	call   c001922c <iso_kprintf>
c00060b1:	83 c4 10             	add    esp,0x10
c00060b4:	31 c0                	xor    eax,eax
c00060b6:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c00060bd:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00060c3:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c00060ca:	40                   	inc    eax
c00060cb:	83 f8 10             	cmp    eax,0x10
c00060ce:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00060d4:	75 e0                	jne    c00060b6 <bclear_cache+0x12>
c00060d6:	83 c4 0c             	add    esp,0xc
c00060d9:	c3                   	ret    

c00060da <bclear>:
c00060da:	eb c8                	jmp    c00060a4 <bclear_cache>

c00060dc <iso_break_all>:
c00060dc:	83 ec 18             	sub    esp,0x18
c00060df:	68 ce f8 01 c0       	push   0xc001f8ce
c00060e4:	e8 43 31 01 00       	call   c001922c <iso_kprintf>
c00060e9:	83 c4 10             	add    esp,0x10
c00060ec:	31 c0                	xor    eax,eax
c00060ee:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c00060f8:	05 94 00 00 00       	add    eax,0x94
c00060fd:	3d 40 09 00 00       	cmp    eax,0x940
c0006102:	75 ea                	jne    c00060ee <iso_break_all+0x12>
c0006104:	83 c4 0c             	add    esp,0xc
c0006107:	c3                   	ret    

c0006108 <isoReadDiscSector>:
c0006108:	83 ec 0c             	sub    esp,0xc
c000610b:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c0006112:	50                   	push   eax
c0006113:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006117:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000611b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000611f:	e8 ac 30 01 00       	call   c00191d0 <isoReadDiscSectorHelper>
c0006124:	83 c4 1c             	add    esp,0x1c
c0006127:	c3                   	ret    

c0006128 <bread_cache>:
c0006128:	55                   	push   ebp
c0006129:	57                   	push   edi
c000612a:	89 d7                	mov    edi,edx
c000612c:	ba 0f 00 00 00       	mov    edx,0xf
c0006131:	56                   	push   esi
c0006132:	89 c6                	mov    esi,eax
c0006134:	53                   	push   ebx
c0006135:	83 ec 0c             	sub    esp,0xc
c0006138:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000613b:	39 38                	cmp    DWORD PTR [eax],edi
c000613d:	74 3c                	je     c000617b <bread_cache+0x53>
c000613f:	4a                   	dec    edx
c0006140:	83 fa ff             	cmp    edx,0xffffffff
c0006143:	75 f3                	jne    c0006138 <bread_cache+0x10>
c0006145:	31 db                	xor    ebx,ebx
c0006147:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c000614a:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c000614d:	74 08                	je     c0006157 <bread_cache+0x2f>
c000614f:	43                   	inc    ebx
c0006150:	83 fb 10             	cmp    ebx,0x10
c0006153:	75 f2                	jne    c0006147 <bread_cache+0x1f>
c0006155:	31 db                	xor    ebx,ebx
c0006157:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c000615a:	50                   	push   eax
c000615b:	6a 01                	push   0x1
c000615d:	57                   	push   edi
c000615e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006161:	83 c0 04             	add    eax,0x4
c0006164:	50                   	push   eax
c0006165:	e8 9e ff ff ff       	call   c0006108 <isoReadDiscSector>
c000616a:	83 c4 10             	add    esp,0x10
c000616d:	83 c9 ff             	or     ecx,0xffffffff
c0006170:	85 c0                	test   eax,eax
c0006172:	78 13                	js     c0006187 <bread_cache+0x5f>
c0006174:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006177:	89 da                	mov    edx,ebx
c0006179:	89 38                	mov    DWORD PTR [eax],edi
c000617b:	89 f0                	mov    eax,esi
c000617d:	e8 0f fe ff ff       	call   c0005f91 <bgrad_cache>
c0006182:	b9 0f 00 00 00       	mov    ecx,0xf
c0006187:	83 c4 0c             	add    esp,0xc
c000618a:	89 c8                	mov    eax,ecx
c000618c:	5b                   	pop    ebx
c000618d:	5e                   	pop    esi
c000618e:	5f                   	pop    edi
c000618f:	5d                   	pop    ebp
c0006190:	c3                   	ret    

c0006191 <biread>:
c0006191:	89 c2                	mov    edx,eax
c0006193:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006198:	eb 8e                	jmp    c0006128 <bread_cache>

c000619a <bdread>:
c000619a:	89 c2                	mov    edx,eax
c000619c:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00061a1:	eb 85                	jmp    c0006128 <bread_cache>

c00061a3 <strnicmp>:
c00061a3:	55                   	push   ebp
c00061a4:	57                   	push   edi
c00061a5:	31 ff                	xor    edi,edi
c00061a7:	56                   	push   esi
c00061a8:	53                   	push   ebx
c00061a9:	83 ec 0c             	sub    esp,0xc
c00061ac:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00061b0:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c00061b4:	74 43                	je     c00061f9 <strnicmp+0x56>
c00061b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00061ba:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 37                	je     c00061f9 <strnicmp+0x56>
c00061c2:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c00061c6:	85 d2                	test   edx,edx
c00061c8:	74 2f                	je     c00061f9 <strnicmp+0x56>
c00061ca:	8d 6f 01             	lea    ebp,[edi+0x1]
c00061cd:	39 d0                	cmp    eax,edx
c00061cf:	75 04                	jne    c00061d5 <strnicmp+0x32>
c00061d1:	89 ef                	mov    edi,ebp
c00061d3:	eb db                	jmp    c00061b0 <strnicmp+0xd>
c00061d5:	83 ec 0c             	sub    esp,0xc
c00061d8:	50                   	push   eax
c00061d9:	e8 f2 a6 ff ff       	call   c00008d0 <tolower>
c00061de:	89 c3                	mov    ebx,eax
c00061e0:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c00061e4:	89 ef                	mov    edi,ebp
c00061e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00061e9:	e8 e2 a6 ff ff       	call   c00008d0 <tolower>
c00061ee:	83 c4 10             	add    esp,0x10
c00061f1:	29 c3                	sub    ebx,eax
c00061f3:	89 d8                	mov    eax,ebx
c00061f5:	74 b9                	je     c00061b0 <strnicmp+0xd>
c00061f7:	eb 02                	jmp    c00061fb <strnicmp+0x58>
c00061f9:	31 c0                	xor    eax,eax
c00061fb:	83 c4 0c             	add    esp,0xc
c00061fe:	5b                   	pop    ebx
c00061ff:	5e                   	pop    esi
c0006200:	5f                   	pop    edi
c0006201:	5d                   	pop    ebp
c0006202:	c3                   	ret    

c0006203 <find_object>:
c0006203:	55                   	push   ebp
c0006204:	57                   	push   edi
c0006205:	89 c7                	mov    edi,eax
c0006207:	56                   	push   esi
c0006208:	53                   	push   ebx
c0006209:	89 d3                	mov    ebx,edx
c000620b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006211:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006218:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000621f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006227:	74 0b                	je     c0006234 <find_object+0x31>
c0006229:	8d 44 24 20          	lea    eax,[esp+0x20]
c000622d:	89 fa                	mov    edx,edi
c000622f:	e8 88 fc ff ff       	call   c0005ebc <utf2ucs>
c0006234:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006237:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000623b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006240:	7e 11                	jle    c0006253 <find_object+0x50>
c0006242:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006246:	e8 46 ff ff ff       	call   c0006191 <biread>
c000624b:	85 c0                	test   eax,eax
c000624d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006251:	79 07                	jns    c000625a <find_object+0x57>
c0006253:	31 db                	xor    ebx,ebx
c0006255:	e9 47 01 00 00       	jmp    c00063a1 <find_object+0x19e>
c000625a:	31 ed                	xor    ebp,ebp
c000625c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006260:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006267:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c000626b:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c000626e:	85 f6                	test   esi,esi
c0006270:	75 0e                	jne    c0006280 <find_object+0x7d>
c0006272:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006276:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c000627e:	eb bb                	jmp    c000623b <find_object+0x38>
c0006280:	8b 0d b4 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024eb4
c0006286:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000628a:	85 c9                	test   ecx,ecx
c000628c:	89 d0                	mov    eax,edx
c000628e:	74 2b                	je     c00062bb <find_object+0xb8>
c0006290:	8d 43 21             	lea    eax,[ebx+0x21]
c0006293:	89 d1                	mov    ecx,edx
c0006295:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006299:	e8 0f fd ff ff       	call   c0005fad <ucscompare>
c000629e:	85 c0                	test   eax,eax
c00062a0:	0f 84 cd 00 00 00    	je     c0006373 <find_object+0x170>
c00062a6:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c00062a9:	01 c5                	add    ebp,eax
c00062ab:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c00062b1:	7f bf                	jg     c0006272 <find_object+0x6f>
c00062b3:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c00062b7:	7f a3                	jg     c000625c <find_object+0x59>
c00062b9:	eb b7                	jmp    c0006272 <find_object+0x6f>
c00062bb:	29 d6                	sub    esi,edx
c00062bd:	a8 01                	test   al,0x1
c00062bf:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c00062c3:	74 05                	je     c00062ca <find_object+0xc7>
c00062c5:	83 ee 21             	sub    esi,0x21
c00062c8:	eb 6a                	jmp    c0006334 <find_object+0x131>
c00062ca:	42                   	inc    edx
c00062cb:	83 ee 22             	sub    esi,0x22
c00062ce:	eb 64                	jmp    c0006334 <find_object+0x131>
c00062d0:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00062d3:	48                   	dec    eax
c00062d4:	3c 01                	cmp    al,0x1
c00062d6:	77 61                	ja     c0006339 <find_object+0x136>
c00062d8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00062dc:	50                   	push   eax
c00062dd:	6a 02                	push   0x2
c00062df:	68 dd f8 01 c0       	push   0xc001f8dd
c00062e4:	52                   	push   edx
c00062e5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00062e9:	e8 72 a4 ff ff       	call   c0000760 <strncmp>
c00062ee:	83 c4 10             	add    esp,0x10
c00062f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00062f5:	85 c0                	test   eax,eax
c00062f7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00062fb:	75 2f                	jne    c000632c <find_object+0x129>
c00062fd:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c0006301:	50                   	push   eax
c0006302:	8d 42 05             	lea    eax,[edx+0x5]
c0006305:	83 e9 05             	sub    ecx,0x5
c0006308:	51                   	push   ecx
c0006309:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000630d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006311:	50                   	push   eax
c0006312:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006316:	50                   	push   eax
c0006317:	e8 14 a3 ff ff       	call   c0000630 <strncpy>
c000631c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006320:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c0006325:	83 c4 10             	add    esp,0x10
c0006328:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000632c:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006330:	29 c6                	sub    esi,eax
c0006332:	01 c2                	add    edx,eax
c0006334:	83 fe 03             	cmp    esi,0x3
c0006337:	7f 97                	jg     c00062d0 <find_object+0xcd>
c0006339:	85 c9                	test   ecx,ecx
c000633b:	7e 40                	jle    c000637d <find_object+0x17a>
c000633d:	51                   	push   ecx
c000633e:	51                   	push   ecx
c000633f:	6a 2f                	push   0x2f
c0006341:	57                   	push   edi
c0006342:	e8 d9 a3 ff ff       	call   c0000720 <strchr>
c0006347:	83 c4 10             	add    esp,0x10
c000634a:	85 c0                	test   eax,eax
c000634c:	74 04                	je     c0006352 <find_object+0x14f>
c000634e:	29 f8                	sub    eax,edi
c0006350:	eb 0c                	jmp    c000635e <find_object+0x15b>
c0006352:	83 ec 0c             	sub    esp,0xc
c0006355:	57                   	push   edi
c0006356:	e8 c5 a1 ff ff       	call   c0000520 <strlen>
c000635b:	83 c4 10             	add    esp,0x10
c000635e:	52                   	push   edx
c000635f:	50                   	push   eax
c0006360:	57                   	push   edi
c0006361:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006365:	50                   	push   eax
c0006366:	e8 38 fe ff ff       	call   c00061a3 <strnicmp>
c000636b:	83 c4 10             	add    esp,0x10
c000636e:	e9 2b ff ff ff       	jmp    c000629e <find_object+0x9b>
c0006373:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006377:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000637b:	eb 1e                	jmp    c000639b <find_object+0x198>
c000637d:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006381:	8d 43 21             	lea    eax,[ebx+0x21]
c0006384:	89 f9                	mov    ecx,edi
c0006386:	e8 a1 fc ff ff       	call   c000602c <fncompare>
c000638b:	85 c0                	test   eax,eax
c000638d:	0f 85 13 ff ff ff    	jne    c00062a6 <find_object+0xa3>
c0006393:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006397:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000639b:	0f 85 05 ff ff ff    	jne    c00062a6 <find_object+0xa3>
c00063a1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00063a7:	89 d8                	mov    eax,ebx
c00063a9:	5b                   	pop    ebx
c00063aa:	5e                   	pop    esi
c00063ab:	5f                   	pop    edi
c00063ac:	5d                   	pop    ebp
c00063ad:	c3                   	ret    

c00063ae <find_object_path>:
c00063ae:	55                   	push   ebp
c00063af:	57                   	push   edi
c00063b0:	89 d7                	mov    edi,edx
c00063b2:	56                   	push   esi
c00063b3:	89 c6                	mov    esi,eax
c00063b5:	53                   	push   ebx
c00063b6:	89 cb                	mov    ebx,ecx
c00063b8:	83 ec 0c             	sub    esp,0xc
c00063bb:	50                   	push   eax
c00063bc:	50                   	push   eax
c00063bd:	6a 2f                	push   0x2f
c00063bf:	56                   	push   esi
c00063c0:	e8 5b a3 ff ff       	call   c0000720 <strchr>
c00063c5:	83 c4 10             	add    esp,0x10
c00063c8:	85 c0                	test   eax,eax
c00063ca:	89 c5                	mov    ebp,eax
c00063cc:	74 3a                	je     c0006408 <find_object_path+0x5a>
c00063ce:	39 ee                	cmp    esi,ebp
c00063d0:	74 31                	je     c0006403 <find_object_path+0x55>
c00063d2:	8d 43 0a             	lea    eax,[ebx+0xa]
c00063d5:	e8 b5 fb ff ff       	call   c0005f8f <iso_733>
c00063da:	89 c2                	mov    edx,eax
c00063dc:	8d 43 02             	lea    eax,[ebx+0x2]
c00063df:	e8 ab fb ff ff       	call   c0005f8f <iso_733>
c00063e4:	83 ec 0c             	sub    esp,0xc
c00063e7:	52                   	push   edx
c00063e8:	89 c1                	mov    ecx,eax
c00063ea:	ba 01 00 00 00       	mov    edx,0x1
c00063ef:	89 f0                	mov    eax,esi
c00063f1:	e8 0d fe ff ff       	call   c0006203 <find_object>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	85 c0                	test   eax,eax
c00063fb:	89 c3                	mov    ebx,eax
c00063fd:	75 04                	jne    c0006403 <find_object_path+0x55>
c00063ff:	31 db                	xor    ebx,ebx
c0006401:	eb 36                	jmp    c0006439 <find_object_path+0x8b>
c0006403:	8d 75 01             	lea    esi,[ebp+0x1]
c0006406:	eb b3                	jmp    c00063bb <find_object_path+0xd>
c0006408:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000640b:	74 28                	je     c0006435 <find_object_path+0x87>
c000640d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006410:	e8 7a fb ff ff       	call   c0005f8f <iso_733>
c0006415:	89 c2                	mov    edx,eax
c0006417:	8d 43 02             	lea    eax,[ebx+0x2]
c000641a:	e8 70 fb ff ff       	call   c0005f8f <iso_733>
c000641f:	83 ec 0c             	sub    esp,0xc
c0006422:	52                   	push   edx
c0006423:	89 c1                	mov    ecx,eax
c0006425:	89 fa                	mov    edx,edi
c0006427:	89 f0                	mov    eax,esi
c0006429:	e8 d5 fd ff ff       	call   c0006203 <find_object>
c000642e:	83 c4 10             	add    esp,0x10
c0006431:	89 c3                	mov    ebx,eax
c0006433:	eb 04                	jmp    c0006439 <find_object_path+0x8b>
c0006435:	85 ff                	test   edi,edi
c0006437:	74 c6                	je     c00063ff <find_object_path+0x51>
c0006439:	83 c4 0c             	add    esp,0xc
c000643c:	89 d8                	mov    eax,ebx
c000643e:	5b                   	pop    ebx
c000643f:	5e                   	pop    esi
c0006440:	5f                   	pop    edi
c0006441:	5d                   	pop    ebp
c0006442:	c3                   	ret    

c0006443 <stricmp>:
c0006443:	57                   	push   edi
c0006444:	56                   	push   esi
c0006445:	31 f6                	xor    esi,esi
c0006447:	53                   	push   ebx
c0006448:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000644c:	83 ec 0c             	sub    esp,0xc
c000644f:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c0006453:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006457:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c000645b:	46                   	inc    esi
c000645c:	50                   	push   eax
c000645d:	e8 4e a4 ff ff       	call   c00008b0 <toupper>
c0006462:	89 04 24             	mov    DWORD PTR [esp],eax
c0006465:	e8 66 a4 ff ff       	call   c00008d0 <tolower>
c000646a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000646d:	89 c3                	mov    ebx,eax
c000646f:	e8 3c a4 ff ff       	call   c00008b0 <toupper>
c0006474:	89 04 24             	mov    DWORD PTR [esp],eax
c0006477:	e8 54 a4 ff ff       	call   c00008d0 <tolower>
c000647c:	83 c4 10             	add    esp,0x10
c000647f:	39 c3                	cmp    ebx,eax
c0006481:	75 04                	jne    c0006487 <stricmp+0x44>
c0006483:	85 db                	test   ebx,ebx
c0006485:	75 c1                	jne    c0006448 <stricmp+0x5>
c0006487:	29 c3                	sub    ebx,eax
c0006489:	89 d8                	mov    eax,ebx
c000648b:	5b                   	pop    ebx
c000648c:	5e                   	pop    esi
c000648d:	5f                   	pop    edi
c000648e:	c3                   	ret    

c000648f <iso_open>:
c000648f:	57                   	push   edi
c0006490:	31 c0                	xor    eax,eax
c0006492:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006497:	56                   	push   esi
c0006498:	53                   	push   ebx
c0006499:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000649e:	0f 95 c0             	setne  al
c00064a1:	89 c2                	mov    edx,eax
c00064a3:	89 c6                	mov    esi,eax
c00064a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064a9:	e8 00 ff ff ff       	call   c00063ae <find_object_path>
c00064ae:	83 ca ff             	or     edx,0xffffffff
c00064b1:	85 c0                	test   eax,eax
c00064b3:	74 5e                	je     c0006513 <iso_open+0x84>
c00064b5:	89 c1                	mov    ecx,eax
c00064b7:	31 d2                	xor    edx,edx
c00064b9:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c00064bf:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c00064c6:	75 42                	jne    c000650a <iso_open+0x7b>
c00064c8:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c00064d2:	8d 41 02             	lea    eax,[ecx+0x2]
c00064d5:	e8 b5 fa ff ff       	call   c0005f8f <iso_733>
c00064da:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c00064e0:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c00064e6:	8d 41 0a             	lea    eax,[ecx+0xa]
c00064e9:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c00064f3:	e8 97 fa ff ff       	call   c0005f8f <iso_733>
c00064f8:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c0006502:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c0006508:	eb 09                	jmp    c0006513 <iso_open+0x84>
c000650a:	42                   	inc    edx
c000650b:	83 fa 10             	cmp    edx,0x10
c000650e:	75 a9                	jne    c00064b9 <iso_open+0x2a>
c0006510:	83 ca ff             	or     edx,0xffffffff
c0006513:	5b                   	pop    ebx
c0006514:	89 d0                	mov    eax,edx
c0006516:	5e                   	pop    esi
c0006517:	5f                   	pop    edi
c0006518:	c3                   	ret    

c0006519 <iso_close>:
c0006519:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000651d:	83 f8 0f             	cmp    eax,0xf
c0006520:	7f 10                	jg     c0006532 <iso_close+0x19>
c0006522:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006528:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c0006532:	e9 6d fb ff ff       	jmp    c00060a4 <bclear_cache>

c0006537 <iso_read>:
c0006537:	55                   	push   ebp
c0006538:	57                   	push   edi
c0006539:	56                   	push   esi
c000653a:	53                   	push   ebx
c000653b:	83 ec 1c             	sub    esp,0x1c
c000653e:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006542:	83 fd 0f             	cmp    ebp,0xf
c0006545:	7e 0a                	jle    c0006551 <iso_read+0x1a>
c0006547:	83 c8 ff             	or     eax,0xffffffff
c000654a:	89 c2                	mov    edx,eax
c000654c:	e9 f4 00 00 00       	jmp    c0006645 <iso_read+0x10e>
c0006551:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006557:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c000655e:	74 e7                	je     c0006547 <iso_read+0x10>
c0006560:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c0006566:	85 d2                	test   edx,edx
c0006568:	75 dd                	jne    c0006547 <iso_read+0x10>
c000656a:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000656f:	0f 84 cd 00 00 00    	je     c0006642 <iso_read+0x10b>
c0006575:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c000657b:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c0006581:	29 c3                	sub    ebx,eax
c0006583:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006587:	89 d9                	mov    ecx,ebx
c0006589:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c000658e:	85 c9                	test   ecx,ecx
c0006590:	0f 84 ac 00 00 00    	je     c0006642 <iso_read+0x10b>
c0006596:	89 c6                	mov    esi,eax
c0006598:	bb 00 08 00 00       	mov    ebx,0x800
c000659d:	c1 e8 0b             	shr    eax,0xb
c00065a0:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c00065a6:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00065ac:	29 f3                	sub    ebx,esi
c00065ae:	81 fb 00 08 00 00    	cmp    ebx,0x800
c00065b4:	75 3f                	jne    c00065f5 <iso_read+0xbe>
c00065b6:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00065bc:	7e 37                	jle    c00065f5 <iso_read+0xbe>
c00065be:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c00065c4:	be 20 00 00 00       	mov    esi,0x20
c00065c9:	7f 05                	jg     c00065d0 <iso_read+0x99>
c00065cb:	89 ce                	mov    esi,ecx
c00065cd:	c1 fe 0b             	sar    esi,0xb
c00065d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00065d4:	89 f3                	mov    ebx,esi
c00065d6:	52                   	push   edx
c00065d7:	c1 e3 0b             	shl    ebx,0xb
c00065da:	56                   	push   esi
c00065db:	50                   	push   eax
c00065dc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00065e0:	e8 23 fb ff ff       	call   c0006108 <isoReadDiscSector>
c00065e5:	83 c4 10             	add    esp,0x10
c00065e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00065ec:	85 c0                	test   eax,eax
c00065ee:	7f 3d                	jg     c000662d <iso_read+0xf6>
c00065f0:	e9 52 ff ff ff       	jmp    c0006547 <iso_read+0x10>
c00065f5:	39 d9                	cmp    ecx,ebx
c00065f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00065fb:	0f 4e d9             	cmovle ebx,ecx
c00065fe:	e8 97 fb ff ff       	call   c000619a <bdread>
c0006603:	85 c0                	test   eax,eax
c0006605:	0f 88 3c ff ff ff    	js     c0006547 <iso_read+0x10>
c000660b:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006612:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c0006618:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000661c:	25 ff 07 00 00       	and    eax,0x7ff
c0006621:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006625:	89 d9                	mov    ecx,ebx
c0006627:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006629:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000662d:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006631:	01 da                	add    edx,ebx
c0006633:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c0006639:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c000663d:	e9 28 ff ff ff       	jmp    c000656a <iso_read+0x33>
c0006642:	89 d0                	mov    eax,edx
c0006644:	99                   	cdq    
c0006645:	83 c4 1c             	add    esp,0x1c
c0006648:	5b                   	pop    ebx
c0006649:	5e                   	pop    esi
c000664a:	5f                   	pop    edi
c000664b:	5d                   	pop    ebp
c000664c:	c3                   	ret    

c000664d <iso_seek>:
c000664d:	55                   	push   ebp
c000664e:	83 c8 ff             	or     eax,0xffffffff
c0006651:	57                   	push   edi
c0006652:	89 c2                	mov    edx,eax
c0006654:	56                   	push   esi
c0006655:	53                   	push   ebx
c0006656:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000665a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000665e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006662:	83 fe 0f             	cmp    esi,0xf
c0006665:	7f 65                	jg     c00066cc <iso_seek+0x7f>
c0006667:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c000666d:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c0006674:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c000667a:	74 50                	je     c00066cc <iso_seek+0x7f>
c000667c:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006683:	75 47                	jne    c00066cc <iso_seek+0x7f>
c0006685:	83 fb 01             	cmp    ebx,0x1
c0006688:	74 0e                	je     c0006698 <iso_seek+0x4b>
c000668a:	83 fb 02             	cmp    ebx,0x2
c000668d:	74 0e                	je     c000669d <iso_seek+0x50>
c000668f:	85 db                	test   ebx,ebx
c0006691:	75 39                	jne    c00066cc <iso_seek+0x7f>
c0006693:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006696:	eb 0d                	jmp    c00066a5 <iso_seek+0x58>
c0006698:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c000669b:	eb 08                	jmp    c00066a5 <iso_seek+0x58>
c000669d:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c00066a0:	01 f8                	add    eax,edi
c00066a2:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00066a5:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c00066ab:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c00066b1:	05 40 45 02 c0       	add    eax,0xc0024540
c00066b6:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c00066b9:	76 03                	jbe    c00066be <iso_seek+0x71>
c00066bb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00066be:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c00066c4:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c00066ca:	31 d2                	xor    edx,edx
c00066cc:	5b                   	pop    ebx
c00066cd:	5e                   	pop    esi
c00066ce:	5f                   	pop    edi
c00066cf:	5d                   	pop    ebp
c00066d0:	c3                   	ret    

c00066d1 <iso_tell>:
c00066d1:	53                   	push   ebx
c00066d2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00066d6:	83 c8 ff             	or     eax,0xffffffff
c00066d9:	89 c2                	mov    edx,eax
c00066db:	83 f9 0f             	cmp    ecx,0xf
c00066de:	7f 20                	jg     c0006700 <iso_tell+0x2f>
c00066e0:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c00066e6:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c00066ed:	74 11                	je     c0006700 <iso_tell+0x2f>
c00066ef:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c00066f6:	75 08                	jne    c0006700 <iso_tell+0x2f>
c00066f8:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c00066fe:	31 d2                	xor    edx,edx
c0006700:	5b                   	pop    ebx
c0006701:	c3                   	ret    

c0006702 <iso_total>:
c0006702:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006706:	83 c8 ff             	or     eax,0xffffffff
c0006709:	83 fa 0f             	cmp    edx,0xf
c000670c:	7f 1e                	jg     c000672c <iso_total+0x2a>
c000670e:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006714:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c000671b:	74 0f                	je     c000672c <iso_total+0x2a>
c000671d:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c0006724:	75 06                	jne    c000672c <iso_total+0x2a>
c0006726:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c000672c:	c3                   	ret    

c000672d <fn_postprocess>:
c000672d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006731:	89 d0                	mov    eax,edx
c0006733:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0006736:	85 c9                	test   ecx,ecx
c0006738:	74 08                	je     c0006742 <fn_postprocess+0x15>
c000673a:	83 f9 3b             	cmp    ecx,0x3b
c000673d:	74 03                	je     c0006742 <fn_postprocess+0x15>
c000673f:	40                   	inc    eax
c0006740:	eb f1                	jmp    c0006733 <fn_postprocess+0x6>
c0006742:	39 d0                	cmp    eax,edx
c0006744:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006747:	76 0a                	jbe    c0006753 <fn_postprocess+0x26>
c0006749:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c000674d:	75 04                	jne    c0006753 <fn_postprocess+0x26>
c000674f:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006753:	c3                   	ret    

c0006754 <iso_readdir>:
c0006754:	55                   	push   ebp
c0006755:	57                   	push   edi
c0006756:	56                   	push   esi
c0006757:	53                   	push   ebx
c0006758:	83 ec 1c             	sub    esp,0x1c
c000675b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000675f:	83 fb 0f             	cmp    ebx,0xf
c0006762:	7f 28                	jg     c000678c <iso_readdir+0x38>
c0006764:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000676a:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c0006771:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c0006777:	74 13                	je     c000678c <iso_readdir+0x38>
c0006779:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c000677d:	74 0d                	je     c000678c <iso_readdir+0x38>
c000677f:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006786:	0f 84 b1 00 00 00    	je     c000683d <iso_readdir+0xe9>
c000678c:	83 ec 0c             	sub    esp,0xc
c000678f:	68 e0 f8 01 c0       	push   0xc001f8e0
c0006794:	e8 93 2a 01 00       	call   c001922c <iso_kprintf>
c0006799:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000679c:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00067a2:	e8 a1 2a 01 00       	call   c0019248 <iso_kprintfd>
c00067a7:	c7 04 24 e5 f8 01 c0 	mov    DWORD PTR [esp],0xc001f8e5
c00067ae:	e8 79 2a 01 00       	call   c001922c <iso_kprintf>
c00067b3:	5d                   	pop    ebp
c00067b4:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c00067ba:	e8 89 2a 01 00       	call   c0019248 <iso_kprintfd>
c00067bf:	c7 04 24 eb f8 01 c0 	mov    DWORD PTR [esp],0xc001f8eb
c00067c6:	e8 61 2a 01 00       	call   c001922c <iso_kprintf>
c00067cb:	58                   	pop    eax
c00067cc:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c00067d2:	e8 71 2a 01 00       	call   c0019248 <iso_kprintfd>
c00067d7:	c7 04 24 f1 f8 01 c0 	mov    DWORD PTR [esp],0xc001f8f1
c00067de:	e8 49 2a 01 00       	call   c001922c <iso_kprintf>
c00067e3:	58                   	pop    eax
c00067e4:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c00067ea:	e8 59 2a 01 00       	call   c0019248 <iso_kprintfd>
c00067ef:	83 c4 10             	add    esp,0x10
c00067f2:	eb 42                	jmp    c0006836 <iso_readdir+0xe2>
c00067f4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00067f7:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c00067fe:	89 d1                	mov    ecx,edx
c0006800:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006806:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000680a:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000680d:	75 35                	jne    c0006844 <iso_readdir+0xf0>
c000680f:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006815:	81 c2 00 08 00 00    	add    edx,0x800
c000681b:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000681e:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006821:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006824:	73 1e                	jae    c0006844 <iso_readdir+0xf0>
c0006826:	8b 07                	mov    eax,DWORD PTR [edi]
c0006828:	c1 ea 0b             	shr    edx,0xb
c000682b:	01 d0                	add    eax,edx
c000682d:	e8 5f f9 ff ff       	call   c0006191 <biread>
c0006832:	85 c0                	test   eax,eax
c0006834:	79 be                	jns    c00067f4 <iso_readdir+0xa0>
c0006836:	31 c0                	xor    eax,eax
c0006838:	e9 6a 01 00 00       	jmp    c00069a7 <iso_readdir+0x253>
c000683d:	31 f6                	xor    esi,esi
c000683f:	83 c8 ff             	or     eax,0xffffffff
c0006842:	eb da                	jmp    c000681e <iso_readdir+0xca>
c0006844:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c000684a:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c0006850:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c0006856:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006859:	73 db                	jae    c0006836 <iso_readdir+0xe2>
c000685b:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c000685f:	75 34                	jne    c0006895 <iso_readdir+0x141>
c0006861:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006865:	75 2e                	jne    c0006895 <iso_readdir+0x141>
c0006867:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c000686a:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c0006871:	01 f9                	add    ecx,edi
c0006873:	89 c8                	mov    eax,ecx
c0006875:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006878:	25 ff 07 00 00       	and    eax,0x7ff
c000687d:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006882:	01 c8                	add    eax,ecx
c0006884:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006887:	25 ff 07 00 00       	and    eax,0x7ff
c000688c:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006890:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006893:	74 a1                	je     c0006836 <iso_readdir+0xe2>
c0006895:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000689b:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000689f:	8d 56 21             	lea    edx,[esi+0x21]
c00068a2:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00068a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00068ad:	8d a8 58 45 02 c0    	lea    ebp,[eax-0x3ffdbaa8]
c00068b3:	74 0c                	je     c00068c1 <iso_readdir+0x16d>
c00068b5:	89 e8                	mov    eax,ebp
c00068b7:	e8 22 f6 ff ff       	call   c0005ede <ucs2utfn>
c00068bc:	e9 aa 00 00 00       	jmp    c000696b <iso_readdir+0x217>
c00068c1:	57                   	push   edi
c00068c2:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c00068c8:	51                   	push   ecx
c00068c9:	52                   	push   edx
c00068ca:	55                   	push   ebp
c00068cb:	e8 60 9d ff ff       	call   c0000630 <strncpy>
c00068d0:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c00068d4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00068d7:	c6 84 07 58 45 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdbaa8],0x0
c00068df:	e8 49 fe ff ff       	call   c000672d <fn_postprocess>
c00068e4:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c00068e8:	83 c4 10             	add    esp,0x10
c00068eb:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068ee:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c00068f2:	89 d0                	mov    eax,edx
c00068f4:	29 d1                	sub    ecx,edx
c00068f6:	a8 01                	test   al,0x1
c00068f8:	74 05                	je     c00068ff <iso_readdir+0x1ab>
c00068fa:	83 e9 21             	sub    ecx,0x21
c00068fd:	eb 04                	jmp    c0006903 <iso_readdir+0x1af>
c00068ff:	47                   	inc    edi
c0006900:	83 e9 22             	sub    ecx,0x22
c0006903:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006909:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000690d:	83 f9 03             	cmp    ecx,0x3
c0006910:	7e 59                	jle    c000696b <iso_readdir+0x217>
c0006912:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006915:	48                   	dec    eax
c0006916:	3c 01                	cmp    al,0x1
c0006918:	77 51                	ja     c000696b <iso_readdir+0x217>
c000691a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000691e:	52                   	push   edx
c000691f:	6a 02                	push   0x2
c0006921:	68 dd f8 01 c0       	push   0xc001f8dd
c0006926:	57                   	push   edi
c0006927:	e8 34 9e ff ff       	call   c0000760 <strncmp>
c000692c:	83 c4 10             	add    esp,0x10
c000692f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006933:	85 c0                	test   eax,eax
c0006935:	75 2a                	jne    c0006961 <iso_readdir+0x20d>
c0006937:	50                   	push   eax
c0006938:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c000693c:	83 e8 05             	sub    eax,0x5
c000693f:	50                   	push   eax
c0006940:	8d 47 05             	lea    eax,[edi+0x5]
c0006943:	50                   	push   eax
c0006944:	55                   	push   ebp
c0006945:	e8 e6 9c ff ff       	call   c0000630 <strncpy>
c000694a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000694e:	83 c4 10             	add    esp,0x10
c0006951:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006955:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006959:	c6 84 10 53 45 02 c0 00 	mov    BYTE PTR [eax+edx*1-0x3ffdbaad],0x0
c0006961:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006965:	29 c1                	sub    ecx,eax
c0006967:	01 c7                	add    edi,eax
c0006969:	eb a2                	jmp    c000690d <iso_readdir+0x1b9>
c000696b:	83 c8 ff             	or     eax,0xffffffff
c000696e:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006972:	89 c2                	mov    edx,eax
c0006974:	75 0a                	jne    c0006980 <iso_readdir+0x22c>
c0006976:	8d 46 0a             	lea    eax,[esi+0xa]
c0006979:	e8 11 f6 ff ff       	call   c0005f8f <iso_733>
c000697e:	31 d2                	xor    edx,edx
c0006980:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006986:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c000698c:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006992:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006998:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000699b:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c000699e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00069a2:	05 50 45 02 c0       	add    eax,0xc0024550
c00069a7:	83 c4 1c             	add    esp,0x1c
c00069aa:	5b                   	pop    ebx
c00069ab:	5e                   	pop    esi
c00069ac:	5f                   	pop    edi
c00069ad:	5d                   	pop    ebp
c00069ae:	c3                   	ret    

c00069af <iso_reset>:
c00069af:	83 ec 18             	sub    esp,0x18
c00069b2:	68 fa f8 01 c0       	push   0xc001f8fa
c00069b7:	e8 70 28 01 00       	call   c001922c <iso_kprintf>
c00069bc:	e8 1b f7 ff ff       	call   c00060dc <iso_break_all>
c00069c1:	e8 14 f7 ff ff       	call   c00060da <bclear>
c00069c6:	31 c0                	xor    eax,eax
c00069c8:	83 c4 1c             	add    esp,0x1c
c00069cb:	c3                   	ret    

c00069cc <init_percd>:
c00069cc:	57                   	push   edi
c00069cd:	56                   	push   esi
c00069ce:	53                   	push   ebx
c00069cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d3:	bb 01 00 00 00       	mov    ebx,0x1
c00069d8:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c00069dd:	e8 cd ff ff ff       	call   c00069af <iso_reset>
c00069e2:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c00069ec:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c00069f1:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00069f5:	e8 97 f7 ff ff       	call   c0006191 <biread>
c00069fa:	85 c0                	test   eax,eax
c00069fc:	89 c6                	mov    esi,eax
c00069fe:	0f 88 ba 00 00 00    	js     c0006abe <init_percd+0xf2>
c0006a04:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006a0b:	52                   	push   edx
c0006a0c:	6a 06                	push   0x6
c0006a0e:	68 05 f9 01 c0       	push   0xc001f905
c0006a13:	83 c0 04             	add    eax,0x4
c0006a16:	50                   	push   eax
c0006a17:	e8 64 99 ff ff       	call   c0000380 <memcmp>
c0006a1c:	83 c4 10             	add    esp,0x10
c0006a1f:	85 c0                	test   eax,eax
c0006a21:	74 08                	je     c0006a2b <init_percd+0x5f>
c0006a23:	43                   	inc    ebx
c0006a24:	83 fb 04             	cmp    ebx,0x4
c0006a27:	75 c3                	jne    c00069ec <init_percd+0x20>
c0006a29:	eb 1a                	jmp    c0006a45 <init_percd+0x79>
c0006a2b:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006a32:	83 c0 5c             	add    eax,0x5c
c0006a35:	e8 22 f5 ff ff       	call   c0005f5c <isjoliet>
c0006a3a:	85 c0                	test   eax,eax
c0006a3c:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006a41:	74 e0                	je     c0006a23 <init_percd+0x57>
c0006a43:	eb 3e                	jmp    c0006a83 <init_percd+0xb7>
c0006a45:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006a4c:	75 35                	jne    c0006a83 <init_percd+0xb7>
c0006a4e:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a53:	83 c0 10             	add    eax,0x10
c0006a56:	e8 36 f7 ff ff       	call   c0006191 <biread>
c0006a5b:	85 c0                	test   eax,eax
c0006a5d:	89 c6                	mov    esi,eax
c0006a5f:	78 5f                	js     c0006ac0 <init_percd+0xf4>
c0006a61:	50                   	push   eax
c0006a62:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006a69:	83 cb ff             	or     ebx,0xffffffff
c0006a6c:	6a 06                	push   0x6
c0006a6e:	68 0c f9 01 c0       	push   0xc001f90c
c0006a73:	83 c0 04             	add    eax,0x4
c0006a76:	50                   	push   eax
c0006a77:	e8 04 99 ff ff       	call   c0000380 <memcmp>
c0006a7c:	83 c4 10             	add    esp,0x10
c0006a7f:	85 c0                	test   eax,eax
c0006a81:	75 3d                	jne    c0006ac0 <init_percd+0xf4>
c0006a83:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006a8a:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006a8f:	b9 22 00 00 00       	mov    ecx,0x22
c0006a94:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006a9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006a9c:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006aa1:	31 db                	xor    ebx,ebx
c0006aa3:	e8 e7 f4 ff ff       	call   c0005f8f <iso_733>
c0006aa8:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006aad:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006ab2:	e8 d8 f4 ff ff       	call   c0005f8f <iso_733>
c0006ab7:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006abc:	eb 02                	jmp    c0006ac0 <init_percd+0xf4>
c0006abe:	89 c3                	mov    ebx,eax
c0006ac0:	89 d8                	mov    eax,ebx
c0006ac2:	5b                   	pop    ebx
c0006ac3:	5e                   	pop    esi
c0006ac4:	5f                   	pop    edi
c0006ac5:	c3                   	ret    

c0006ac6 <iso_ioctl>:
c0006ac6:	83 ec 18             	sub    esp,0x18
c0006ac9:	68 13 f9 01 c0       	push   0xc001f913
c0006ace:	e8 59 27 01 00       	call   c001922c <iso_kprintf>
c0006ad3:	e8 d7 fe ff ff       	call   c00069af <iso_reset>
c0006ad8:	31 c0                	xor    eax,eax
c0006ada:	83 c4 1c             	add    esp,0x1c
c0006add:	c3                   	ret    

c0006ade <fs_iso9660_init>:
c0006ade:	53                   	push   ebx
c0006adf:	31 db                	xor    ebx,ebx
c0006ae1:	83 ec 14             	sub    esp,0x14
c0006ae4:	68 1e f9 01 c0       	push   0xc001f91e
c0006ae9:	e8 3e 27 01 00       	call   c001922c <iso_kprintf>
c0006aee:	83 c4 0c             	add    esp,0xc
c0006af1:	68 40 09 00 00       	push   0x940
c0006af6:	6a 00                	push   0x0
c0006af8:	68 40 45 02 c0       	push   0xc0024540
c0006afd:	e8 ee 99 ff ff       	call   c00004f0 <memset>
c0006b02:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b09:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006b13:	e8 17 0f 00 00       	call   c0007a2f <malloc>
c0006b18:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b1f:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006b24:	e8 06 0f 00 00       	call   c0007a2f <malloc>
c0006b29:	83 c4 10             	add    esp,0x10
c0006b2c:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006b31:	83 ec 0c             	sub    esp,0xc
c0006b34:	68 04 08 00 00       	push   0x804
c0006b39:	e8 f1 0e 00 00       	call   c0007a2f <malloc>
c0006b3e:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006b45:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006b4b:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006b52:	e8 d8 0e 00 00       	call   c0007a2f <malloc>
c0006b57:	83 c4 10             	add    esp,0x10
c0006b5a:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006b61:	43                   	inc    ebx
c0006b62:	83 fb 10             	cmp    ebx,0x10
c0006b65:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006b6b:	75 c4                	jne    c0006b31 <fs_iso9660_init+0x53>
c0006b6d:	83 c4 08             	add    esp,0x8
c0006b70:	31 c0                	xor    eax,eax
c0006b72:	5b                   	pop    ebx
c0006b73:	c3                   	ret    

c0006b74 <fs_iso9660_shutdown>:
c0006b74:	53                   	push   ebx
c0006b75:	31 db                	xor    ebx,ebx
c0006b77:	83 ec 08             	sub    esp,0x8
c0006b7a:	83 ec 0c             	sub    esp,0xc
c0006b7d:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006b84:	e8 b6 0e 00 00       	call   c0007a3f <free>
c0006b89:	58                   	pop    eax
c0006b8a:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006b91:	43                   	inc    ebx
c0006b92:	e8 a8 0e 00 00       	call   c0007a3f <free>
c0006b97:	83 c4 10             	add    esp,0x10
c0006b9a:	83 fb 10             	cmp    ebx,0x10
c0006b9d:	75 db                	jne    c0006b7a <fs_iso9660_shutdown+0x6>
c0006b9f:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006ba4:	85 c0                	test   eax,eax
c0006ba6:	74 0c                	je     c0006bb4 <fs_iso9660_shutdown+0x40>
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	50                   	push   eax
c0006bac:	e8 8e 0e 00 00       	call   c0007a3f <free>
c0006bb1:	83 c4 10             	add    esp,0x10
c0006bb4:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006bb9:	85 c0                	test   eax,eax
c0006bbb:	74 0c                	je     c0006bc9 <fs_iso9660_shutdown+0x55>
c0006bbd:	83 ec 0c             	sub    esp,0xc
c0006bc0:	50                   	push   eax
c0006bc1:	e8 79 0e 00 00       	call   c0007a3f <free>
c0006bc6:	83 c4 10             	add    esp,0x10
c0006bc9:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006bd3:	31 c0                	xor    eax,eax
c0006bd5:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006bdf:	83 c4 08             	add    esp,0x8
c0006be2:	5b                   	pop    ebx
c0006be3:	c3                   	ret    

c0006be4 <Computer::close(int, int, void*)>:
c0006be4:	57                   	push   edi
c0006be5:	56                   	push   esi
c0006be6:	53                   	push   ebx
c0006be7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006beb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006bef:	83 ec 0c             	sub    esp,0xc
c0006bf2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006bf6:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006bfc:	50                   	push   eax
c0006bfd:	e8 22 52 00 00       	call   c000be24 <Device::closeAll()>
c0006c02:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c08:	83 c4 10             	add    esp,0x10
c0006c0b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c0d:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c11:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c19:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c1d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006c21:	5b                   	pop    ebx
c0006c22:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c25:	5e                   	pop    esi
c0006c26:	5f                   	pop    edi
c0006c27:	ff e0                	jmp    eax

c0006c29 <Krnl::firstTask()>:
c0006c29:	53                   	push   ebx
c0006c2a:	83 ec 14             	sub    esp,0x14
c0006c2d:	fb                   	sti    
c0006c2e:	68 2f f9 01 c0       	push   0xc001f92f
c0006c33:	e8 54 95 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c0006c38:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006c3f:	e8 eb 0d 00 00       	call   c0007a2f <malloc>
c0006c44:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006c4b:	89 c3                	mov    ebx,eax
c0006c4d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006c52:	50                   	push   eax
c0006c53:	68 48 f9 01 c0       	push   0xc001f948
c0006c58:	6a 01                	push   0x1
c0006c5a:	53                   	push   ebx
c0006c5b:	e8 0c df 00 00       	call   c0014b6c <Process::Process(bool, char const*, Process*, char**)>
c0006c60:	83 c4 20             	add    esp,0x20
c0006c63:	68 ff 00 00 00       	push   0xff
c0006c68:	6a 00                	push   0x0
c0006c6a:	68 79 74 00 c0       	push   0xc0007479
c0006c6f:	53                   	push   ebx
c0006c70:	e8 1b e1 00 00       	call   c0014d90 <Process::createThread(void (*)(void*), void*, int)>
c0006c75:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006c7b:	6a 7a                	push   0x7a
c0006c7d:	6a 00                	push   0x0
c0006c7f:	68 44 58 01 c0       	push   0xc0015844
c0006c84:	52                   	push   edx
c0006c85:	e8 06 e1 00 00       	call   c0014d90 <Process::createThread(void (*)(void*), void*, int)>
c0006c8a:	83 c4 20             	add    esp,0x20
c0006c8d:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006c94:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006c99:	e8 20 9d 00 00       	call   c00109be <KeInitRand()>
c0006c9e:	83 ec 0c             	sub    esp,0xc
c0006ca1:	68 44 fa 01 c0       	push   0xc001fa44
c0006ca6:	e8 e1 94 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c0006cab:	e8 b7 ef 00 00       	call   c0015c67 <Vm::initialise8086()>
c0006cb0:	e8 8f 3f 00 00       	call   c000ac44 <Fs::initVFS()>
c0006cb5:	c7 04 24 55 f9 01 c0 	mov    DWORD PTR [esp],0xc001f955
c0006cbc:	e8 cb 94 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c0006cc1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006cc6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006ccc:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cce:	6a 00                	push   0x0
c0006cd0:	6a 00                	push   0x0
c0006cd2:	6a 00                	push   0x0
c0006cd4:	50                   	push   eax
c0006cd5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006cd8:	83 c4 14             	add    esp,0x14
c0006cdb:	68 44 fa 01 c0       	push   0xc001fa44
c0006ce0:	e8 a7 94 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c0006ce5:	e8 80 99 00 00       	call   c001066a <Krnl::loadSystemEnv()>
c0006cea:	e8 dd 9b 00 00       	call   c00108cc <Krnl::setupPowerManager()>
c0006cef:	83 c4 0c             	add    esp,0xc
c0006cf2:	6a 3a                	push   0x3a
c0006cf4:	68 6f f9 01 c0       	push   0xc001f96f
c0006cf9:	68 78 f9 01 c0       	push   0xc001f978
c0006cfe:	e8 a4 c1 00 00       	call   c0012ea7 <Reg::readIntWithDefault(char*, char*, int)>
c0006d03:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d06:	e8 71 4a 00 00       	call   c000b77c <User::loadClockSettings(int)>
c0006d0b:	c7 04 24 68 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa68
c0006d12:	e8 75 94 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c0006d17:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d1c:	59                   	pop    ecx
c0006d1d:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006d23:	53                   	push   ebx
c0006d24:	e8 f9 50 00 00       	call   c000be22 <Device::loadDriversForAll()>
c0006d29:	c7 04 24 80 f9 01 c0 	mov    DWORD PTR [esp],0xc001f980
c0006d30:	e8 57 94 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c0006d35:	58                   	pop    eax
c0006d36:	5a                   	pop    edx
c0006d37:	6a 01                	push   0x1
c0006d39:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006d3f:	68 91 f9 01 c0       	push   0xc001f991
c0006d44:	e8 2c d8 00 00       	call   c0014575 <Thr::loadDLL(char const*, bool)>
c0006d49:	59                   	pop    ecx
c0006d4a:	5a                   	pop    edx
c0006d4b:	53                   	push   ebx
c0006d4c:	50                   	push   eax
c0006d4d:	e8 5f da 00 00       	call   c00147b1 <Thr::executeDLL(unsigned long, void*)>
c0006d52:	83 c4 10             	add    esp,0x10
c0006d55:	83 ec 0c             	sub    esp,0xc
c0006d58:	6a 02                	push   0x2
c0006d5a:	e8 71 e4 00 00       	call   c00151d0 <blockTask(TaskState)>
c0006d5f:	83 c4 10             	add    esp,0x10
c0006d62:	eb f1                	jmp    c0006d55 <Krnl::firstTask()+0x12c>

c0006d64 <Computer::Computer()>:
c0006d64:	83 ec 0c             	sub    esp,0xc
c0006d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6b:	83 ec 08             	sub    esp,0x8
c0006d6e:	68 ad f9 01 c0       	push   0xc001f9ad
c0006d73:	50                   	push   eax
c0006d74:	e8 25 51 00 00       	call   c000be9e <Device::Device(char const*)>
c0006d79:	83 c4 10             	add    esp,0x10
c0006d7c:	ba b4 fa 01 c0       	mov    edx,0xc001fab4
c0006d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d85:	89 10                	mov    DWORD PTR [eax],edx
c0006d87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d8b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006d95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d99:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006dad:	83 ca 04             	or     edx,0x4
c0006db0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006dc0:	0f b6 c0             	movzx  eax,al
c0006dc3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006dc7:	66 c7 44 82 04 70 00 	mov    WORD PTR [edx+eax*4+0x4],0x70
c0006dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006dd8:	0f b6 c0             	movzx  eax,al
c0006ddb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ddf:	c6 44 82 06 02       	mov    BYTE PTR [edx+eax*4+0x6],0x2
c0006de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006dee:	8d 50 01             	lea    edx,[eax+0x1]
c0006df1:	88 d1                	mov    cl,dl
c0006df3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006df7:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006dfd:	0f b6 c0             	movzx  eax,al
c0006e00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e04:	8a 4c 82 07          	mov    cl,BYTE PTR [edx+eax*4+0x7]
c0006e08:	83 e1 3f             	and    ecx,0x3f
c0006e0b:	88 4c 82 07          	mov    BYTE PTR [edx+eax*4+0x7],cl
c0006e0f:	90                   	nop
c0006e10:	83 c4 0c             	add    esp,0xc
c0006e13:	c3                   	ret    

c0006e14 <Computer::setBootMessage(char const*)>:
c0006e14:	c3                   	ret    
c0006e15:	90                   	nop

c0006e16 <Computer::detectFeatures()>:
c0006e16:	55                   	push   ebp
c0006e17:	57                   	push   edi
c0006e18:	56                   	push   esi
c0006e19:	53                   	push   ebx
c0006e1a:	83 ec 1c             	sub    esp,0x1c
c0006e1d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006e21:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006e27:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006e2d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006e33:	e8 c1 93 ff ff       	call   c00001f9 <detectCPUID>
c0006e38:	31 d2                	xor    edx,edx
c0006e3a:	85 c0                	test   eax,eax
c0006e3c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e42:	0f 95 c2             	setne  dl
c0006e45:	d1 e2                	shl    edx,1
c0006e47:	83 e0 fd             	and    eax,0xfffffffd
c0006e4a:	09 d0                	or     eax,edx
c0006e4c:	a8 02                	test   al,0x2
c0006e4e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e54:	75 51                	jne    c0006ea7 <Computer::detectFeatures()+0x91>
c0006e56:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006e5d:	74 0f                	je     c0006e6e <Computer::detectFeatures()+0x58>
c0006e5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e65:	83 e0 fb             	and    eax,0xfffffffb
c0006e68:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e6e:	e8 c3 73 01 00       	call   c001e236 <x87Detect>
c0006e73:	83 e0 01             	and    eax,0x1
c0006e76:	c1 e0 04             	shl    eax,0x4
c0006e79:	89 c2                	mov    edx,eax
c0006e7b:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e81:	83 e0 ef             	and    eax,0xffffffef
c0006e84:	09 d0                	or     eax,edx
c0006e86:	a8 10                	test   al,0x10
c0006e88:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e8e:	88 c2                	mov    dl,al
c0006e90:	0f 85 33 01 00 00    	jne    c0006fc9 <Computer::detectFeatures()+0x1b3>
c0006e96:	80 e2 80             	and    dl,0x80
c0006e99:	0f 85 4c 01 00 00    	jne    c0006feb <Computer::detectFeatures()+0x1d5>
c0006e9f:	83 c4 1c             	add    esp,0x1c
c0006ea2:	5b                   	pop    ebx
c0006ea3:	5e                   	pop    esi
c0006ea4:	5f                   	pop    edi
c0006ea5:	5d                   	pop    ebp
c0006ea6:	c3                   	ret    
c0006ea7:	83 ec 0c             	sub    esp,0xc
c0006eaa:	6a 20                	push   0x20
c0006eac:	e8 f1 87 00 00       	call   c000f6a2 <CPU::cpuidCheckEDX(unsigned int)>
c0006eb1:	83 e0 01             	and    eax,0x1
c0006eb4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006ebb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec1:	83 e0 f7             	and    eax,0xfffffff7
c0006ec4:	09 d0                	or     eax,edx
c0006ec6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ecc:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006ed3:	e8 ca 87 00 00       	call   c000f6a2 <CPU::cpuidCheckEDX(unsigned int)>
c0006ed8:	89 c2                	mov    edx,eax
c0006eda:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006ee0:	83 e2 01             	and    edx,0x1
c0006ee3:	83 e0 fe             	and    eax,0xfffffffe
c0006ee6:	09 d0                	or     eax,edx
c0006ee8:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006eee:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006ef5:	e8 a8 87 00 00       	call   c000f6a2 <CPU::cpuidCheckEDX(unsigned int)>
c0006efa:	89 c2                	mov    edx,eax
c0006efc:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f02:	c1 e2 07             	shl    edx,0x7
c0006f05:	83 e0 7f             	and    eax,0x7f
c0006f08:	09 d0                	or     eax,edx
c0006f0a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f10:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f17:	e8 86 87 00 00       	call   c000f6a2 <CPU::cpuidCheckEDX(unsigned int)>
c0006f1c:	83 c4 10             	add    esp,0x10
c0006f1f:	83 e0 01             	and    eax,0x1
c0006f22:	c1 e0 05             	shl    eax,0x5
c0006f25:	89 c2                	mov    edx,eax
c0006f27:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f2d:	83 e0 df             	and    eax,0xffffffdf
c0006f30:	09 d0                	or     eax,edx
c0006f32:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006f3c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f42:	0f 84 c9 00 00 00    	je     c0007011 <Computer::detectFeatures()+0x1fb>
c0006f48:	83 e0 fe             	and    eax,0xfffffffe
c0006f4b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f51:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f57:	89 c2                	mov    edx,eax
c0006f59:	83 e2 09             	and    edx,0x9
c0006f5c:	83 fa 01             	cmp    edx,0x1
c0006f5f:	75 09                	jne    c0006f6a <Computer::detectFeatures()+0x154>
c0006f61:	83 e0 fe             	and    eax,0xfffffffe
c0006f64:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f6a:	83 ec 0c             	sub    esp,0xc
c0006f6d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006f71:	50                   	push   eax
c0006f72:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006f76:	55                   	push   ebp
c0006f77:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006f7b:	57                   	push   edi
c0006f7c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006f80:	56                   	push   esi
c0006f81:	68 00 00 00 80       	push   0x80000000
c0006f86:	e8 93 86 00 00       	call   c000f61e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006f8b:	83 c4 20             	add    esp,0x20
c0006f8e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006f95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006f99:	0f 86 b7 fe ff ff    	jbe    c0006e56 <Computer::detectFeatures()+0x40>
c0006f9f:	83 ec 0c             	sub    esp,0xc
c0006fa2:	50                   	push   eax
c0006fa3:	55                   	push   ebp
c0006fa4:	57                   	push   edi
c0006fa5:	56                   	push   esi
c0006fa6:	68 01 00 00 80       	push   0x80000001
c0006fab:	e8 6e 86 00 00       	call   c000f61e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006fb0:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0006fb6:	83 c4 20             	add    esp,0x20
c0006fb9:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0006fbe:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0006fc4:	e9 8d fe ff ff       	jmp    c0006e56 <Computer::detectFeatures()+0x40>
c0006fc9:	e8 22 72 01 00       	call   c001e1f0 <absolutelyNoChanceInHell>
c0006fce:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0006fd4:	c1 e0 07             	shl    eax,0x7
c0006fd7:	83 e2 7f             	and    edx,0x7f
c0006fda:	09 c2                	or     edx,eax
c0006fdc:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0006fe2:	80 e2 80             	and    dl,0x80
c0006fe5:	0f 84 b4 fe ff ff    	je     c0006e9f <Computer::detectFeatures()+0x89>
c0006feb:	e8 70 6e 01 00       	call   c001de60 <avxDetect>
c0006ff0:	83 e0 01             	and    eax,0x1
c0006ff3:	c1 e0 05             	shl    eax,0x5
c0006ff6:	89 c2                	mov    edx,eax
c0006ff8:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006ffe:	83 e0 df             	and    eax,0xffffffdf
c0007001:	09 d0                	or     eax,edx
c0007003:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007009:	83 c4 1c             	add    esp,0x1c
c000700c:	5b                   	pop    ebx
c000700d:	5e                   	pop    esi
c000700e:	5f                   	pop    edi
c000700f:	5d                   	pop    ebp
c0007010:	c3                   	ret    
c0007011:	83 ec 0c             	sub    esp,0xc
c0007014:	68 00 02 00 00       	push   0x200
c0007019:	e8 84 86 00 00       	call   c000f6a2 <CPU::cpuidCheckEDX(unsigned int)>
c000701e:	83 c4 10             	add    esp,0x10
c0007021:	89 c2                	mov    edx,eax
c0007023:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007029:	83 e2 01             	and    edx,0x1
c000702c:	83 e0 fe             	and    eax,0xfffffffe
c000702f:	09 d0                	or     eax,edx
c0007031:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007037:	e9 15 ff ff ff       	jmp    c0006f51 <Computer::detectFeatures()+0x13b>

c000703c <Computer::displayFeatures()>:
c000703c:	c3                   	ret    
c000703d:	90                   	nop

c000703e <Computer::rdmsr(unsigned int)>:
c000703e:	83 ec 0c             	sub    esp,0xc
c0007041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007045:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000704c:	74 0a                	je     c0007058 <Computer::rdmsr(unsigned int)+0x1a>
c000704e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007052:	0f 32                	rdmsr  
c0007054:	83 c4 0c             	add    esp,0xc
c0007057:	c3                   	ret    
c0007058:	83 ec 0c             	sub    esp,0xc
c000705b:	68 b6 f9 01 c0       	push   0xc001f9b6
c0007060:	e8 a2 97 00 00       	call   c0010807 <KePanic(char const*)>
c0007065:	83 c4 10             	add    esp,0x10
c0007068:	eb e4                	jmp    c000704e <Computer::rdmsr(unsigned int)+0x10>

c000706a <Computer::wrmsr(unsigned int, unsigned long long)>:
c000706a:	57                   	push   edi
c000706b:	56                   	push   esi
c000706c:	83 ec 04             	sub    esp,0x4
c000706f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007073:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007077:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000707b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007082:	74 10                	je     c0007094 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007084:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007088:	89 f0                	mov    eax,esi
c000708a:	89 fa                	mov    edx,edi
c000708c:	0f 30                	wrmsr  
c000708e:	83 c4 04             	add    esp,0x4
c0007091:	5e                   	pop    esi
c0007092:	5f                   	pop    edi
c0007093:	c3                   	ret    
c0007094:	83 ec 0c             	sub    esp,0xc
c0007097:	68 bc f9 01 c0       	push   0xc001f9bc
c000709c:	e8 66 97 00 00       	call   c0010807 <KePanic(char const*)>
c00070a1:	83 c4 10             	add    esp,0x10
c00070a4:	eb de                	jmp    c0007084 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c00070a6 <Computer::shutdown()>:
c00070a6:	83 ec 0c             	sub    esp,0xc
c00070a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00070af:	6a 00                	push   0x0
c00070b1:	6a 00                	push   0x0
c00070b3:	6a 00                	push   0x0
c00070b5:	50                   	push   eax
c00070b6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00070b9:	83 c4 1c             	add    esp,0x1c
c00070bc:	c3                   	ret    
c00070bd:	90                   	nop

c00070be <Computer::restart()>:
c00070be:	83 ec 0c             	sub    esp,0xc
c00070c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c7:	6a 00                	push   0x0
c00070c9:	6a 00                	push   0x0
c00070cb:	6a 01                	push   0x1
c00070cd:	50                   	push   eax
c00070ce:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00070d1:	83 c4 1c             	add    esp,0x1c
c00070d4:	c3                   	ret    
c00070d5:	90                   	nop

c00070d6 <Computer::sleep()>:
c00070d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070da:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00070e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00070e4:	e9 d7 7f 00 00       	jmp    c000f0c0 <ACPI::sleep()>
c00070e9:	90                   	nop

c00070ea <Computer::nmiEnabled()>:
c00070ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070ee:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c00070f4:	c3                   	ret    
c00070f5:	90                   	nop

c00070f6 <Computer::readCMOS(unsigned char)>:
c00070f6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00070fa:	31 d2                	xor    edx,edx
c00070fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007100:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0007107:	75 02                	jne    c000710b <Computer::readCMOS(unsigned char)+0x15>
c0007109:	b2 80                	mov    dl,0x80
c000710b:	09 d0                	or     eax,edx
c000710d:	e6 70                	out    0x70,al
c000710f:	e4 71                	in     al,0x71
c0007111:	c3                   	ret    

c0007112 <Computer::enableNMI(bool)>:
c0007112:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000711a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0007120:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0007128:	eb cc                	jmp    c00070f6 <Computer::readCMOS(unsigned char)>

c000712a <Computer::open(int, int, void*)>:
c000712a:	56                   	push   esi
c000712b:	53                   	push   ebx
c000712c:	83 ec 10             	sub    esp,0x10
c000712f:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c0007136:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000713a:	68 c2 f9 01 c0       	push   0xc001f9c2
c000713f:	0f 94 05 e0 1d 02 c0 	sete   BYTE PTR ds:0xc0021de0
c0007146:	e8 41 90 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c000714b:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0007152:	e8 d8 08 00 00       	call   c0007a2f <malloc>
c0007157:	89 c6                	mov    esi,eax
c0007159:	89 04 24             	mov    DWORD PTR [esp],eax
c000715c:	e8 cf 7a 00 00       	call   c000ec30 <ACPI::ACPI()>
c0007161:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0007167:	58                   	pop    eax
c0007168:	5a                   	pop    edx
c0007169:	56                   	push   esi
c000716a:	53                   	push   ebx
c000716b:	e8 96 4b 00 00       	call   c000bd06 <Device::addChild(Device*)>
c0007170:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007173:	e8 9e fc ff ff       	call   c0006e16 <Computer::detectFeatures()>
c0007178:	59                   	pop    ecx
c0007179:	5e                   	pop    esi
c000717a:	6a 01                	push   0x1
c000717c:	53                   	push   ebx
c000717d:	e8 90 ff ff ff       	call   c0007112 <Computer::enableNMI(bool)>
c0007182:	c7 04 24 da f9 01 c0 	mov    DWORD PTR [esp],0xc001f9da
c0007189:	e8 fe 8f 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c000718e:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007195:	e8 95 08 00 00       	call   c0007a2f <malloc>
c000719a:	89 c6                	mov    esi,eax
c000719c:	89 04 24             	mov    DWORD PTR [esp],eax
c000719f:	e8 b6 85 00 00       	call   c000f75a <CPU::CPU()>
c00071a4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00071aa:	58                   	pop    eax
c00071ab:	5a                   	pop    edx
c00071ac:	56                   	push   esi
c00071ad:	53                   	push   ebx
c00071ae:	e8 53 4b 00 00       	call   c000bd06 <Device::addChild(Device*)>
c00071b3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00071b9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00071bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00071bf:	51                   	push   ecx
c00071c0:	6a 00                	push   0x0
c00071c2:	6a 00                	push   0x0
c00071c4:	50                   	push   eax
c00071c5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00071c8:	83 c4 14             	add    esp,0x14
c00071cb:	68 88 fa 01 c0       	push   0xc001fa88
c00071d0:	e8 b7 8f 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c00071d5:	e8 64 fc 00 00       	call   c0016e3e <HalInitialiseCoprocessor()>
c00071da:	c7 04 24 f4 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9f4
c00071e1:	e8 a6 8f 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c00071e6:	c7 04 24 29 6c 00 c0 	mov    DWORD PTR [esp],0xc0006c29
c00071ed:	e8 ba dc 00 00       	call   c0014eac <setupMultitasking(void (*)())>
c00071f2:	83 c4 14             	add    esp,0x14
c00071f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00071fa:	5b                   	pop    ebx
c00071fb:	5e                   	pop    esi
c00071fc:	c3                   	ret    
c00071fd:	90                   	nop

c00071fe <Computer::disableNMI()>:
c00071fe:	6a 00                	push   0x0
c0007200:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007204:	50                   	push   eax
c0007205:	e8 08 ff ff ff       	call   c0007112 <Computer::enableNMI(bool)>
c000720a:	5a                   	pop    edx
c000720b:	59                   	pop    ecx
c000720c:	c3                   	ret    
c000720d:	90                   	nop

c000720e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000720e:	53                   	push   ebx
c000720f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007213:	b2 80                	mov    dl,0x80
c0007215:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007219:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000721d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0007224:	74 02                	je     c0007228 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c0007226:	31 d2                	xor    edx,edx
c0007228:	09 d0                	or     eax,edx
c000722a:	e6 70                	out    0x70,al
c000722c:	88 c8                	mov    al,cl
c000722e:	e6 71                	out    0x71,al
c0007230:	5b                   	pop    ebx
c0007231:	c3                   	ret    

c0007232 <Computer::handleNMI()>:
c0007232:	56                   	push   esi
c0007233:	53                   	push   ebx
c0007234:	83 ec 10             	sub    esp,0x10
c0007237:	e4 92                	in     al,0x92
c0007239:	89 c6                	mov    esi,eax
c000723b:	e4 61                	in     al,0x61
c000723d:	68 0f fa 01 c0       	push   0xc001fa0f
c0007242:	88 c3                	mov    bl,al
c0007244:	e8 58 36 00 00       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0007249:	83 c4 10             	add    esp,0x10
c000724c:	83 e6 10             	and    esi,0x10
c000724f:	75 10                	jne    c0007261 <Computer::handleNMI()+0x2f>
c0007251:	f6 c3 40             	test   bl,0x40
c0007254:	75 20                	jne    c0007276 <Computer::handleNMI()+0x44>
c0007256:	80 e3 80             	and    bl,0x80
c0007259:	75 30                	jne    c000728b <Computer::handleNMI()+0x59>
c000725b:	83 c4 04             	add    esp,0x4
c000725e:	5b                   	pop    ebx
c000725f:	5e                   	pop    esi
c0007260:	c3                   	ret    
c0007261:	83 ec 0c             	sub    esp,0xc
c0007264:	68 20 fa 01 c0       	push   0xc001fa20
c0007269:	e8 99 95 00 00       	call   c0010807 <KePanic(char const*)>
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	f6 c3 40             	test   bl,0x40
c0007274:	74 e0                	je     c0007256 <Computer::handleNMI()+0x24>
c0007276:	83 ec 0c             	sub    esp,0xc
c0007279:	68 2d fa 01 c0       	push   0xc001fa2d
c000727e:	e8 84 95 00 00       	call   c0010807 <KePanic(char const*)>
c0007283:	83 c4 10             	add    esp,0x10
c0007286:	80 e3 80             	and    bl,0x80
c0007289:	74 d0                	je     c000725b <Computer::handleNMI()+0x29>
c000728b:	c7 44 24 10 37 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fa37
c0007293:	83 c4 04             	add    esp,0x4
c0007296:	5b                   	pop    ebx
c0007297:	5e                   	pop    esi
c0007298:	e9 6a 95 00 00       	jmp    c0010807 <KePanic(char const*)>
c000729d:	90                   	nop

c000729e <GDTEntry::setBase(unsigned int)>:
c000729e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a6:	89 c1                	mov    ecx,eax
c00072a8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00072ac:	c1 e9 10             	shr    ecx,0x10
c00072af:	c1 e8 18             	shr    eax,0x18
c00072b2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00072b5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00072b8:	c3                   	ret    
c00072b9:	90                   	nop

c00072ba <GDTEntry::setLimit(unsigned int)>:
c00072ba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00072be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00072c5:	66 89 01             	mov    WORD PTR [ecx],ax
c00072c8:	c1 e8 10             	shr    eax,0x10
c00072cb:	83 e0 0f             	and    eax,0xf
c00072ce:	83 e2 f0             	and    edx,0xfffffff0
c00072d1:	09 d0                	or     eax,edx
c00072d3:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00072d6:	c3                   	ret    
c00072d7:	90                   	nop

c00072d8 <GDT::GDT()>:
c00072d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072ec:	90                   	nop
c00072ed:	c3                   	ret    

c00072ee <GDT::addEntry(GDTEntry)>:
c00072ee:	53                   	push   ebx
c00072ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00072f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072fb:	8b 02                	mov    eax,DWORD PTR [edx]
c00072fd:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007301:	8d 48 01             	lea    ecx,[eax+0x1]
c0007304:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007308:	c1 e0 03             	shl    eax,0x3
c000730b:	89 0a                	mov    DWORD PTR [edx],ecx
c000730d:	5b                   	pop    ebx
c000730e:	c3                   	ret    
c000730f:	90                   	nop

c0007310 <GDT::getNumberOfEntries()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	8b 00                	mov    eax,DWORD PTR [eax]
c0007316:	c3                   	ret    
c0007317:	90                   	nop

c0007318 <GDT::flush()>:
c0007318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000731c:	8b 10                	mov    edx,DWORD PTR [eax]
c000731e:	83 c0 04             	add    eax,0x4
c0007321:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c0007326:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000732d:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c0007334:	e9 21 90 ff ff       	jmp    c000035a <loadGDT>
c0007339:	90                   	nop

c000733a <GDT::setup()>:
c000733a:	57                   	push   edi
c000733b:	56                   	push   esi
c000733c:	53                   	push   ebx
c000733d:	83 ec 30             	sub    esp,0x30
c0007340:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007344:	6a 00                	push   0x0
c0007346:	8d 74 24 14          	lea    esi,[esp+0x14]
c000734a:	56                   	push   esi
c000734b:	e8 4e ff ff ff       	call   c000729e <GDTEntry::setBase(unsigned int)>
c0007350:	6a 00                	push   0x0
c0007352:	56                   	push   esi
c0007353:	e8 62 ff ff ff       	call   c00072ba <GDTEntry::setLimit(unsigned int)>
c0007358:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007360:	6a 00                	push   0x0
c0007362:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007366:	56                   	push   esi
c0007367:	e8 32 ff ff ff       	call   c000729e <GDTEntry::setBase(unsigned int)>
c000736c:	68 ff ff ff 00       	push   0xffffff
c0007371:	56                   	push   esi
c0007372:	e8 43 ff ff ff       	call   c00072ba <GDTEntry::setLimit(unsigned int)>
c0007377:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000737b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000737f:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007384:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007389:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000738d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007391:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007395:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007399:	89 f8                	mov    eax,edi
c000739b:	89 fa                	mov    edx,edi
c000739d:	80 e4 f7             	and    ah,0xf7
c00073a0:	80 ce 60             	or     dh,0x60
c00073a3:	89 c7                	mov    edi,eax
c00073a5:	80 cc 60             	or     ah,0x60
c00073a8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00073ac:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00073b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00073b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00073b8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00073bc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00073c0:	83 c4 20             	add    esp,0x20
c00073c3:	6a 00                	push   0x0
c00073c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00073c9:	50                   	push   eax
c00073ca:	e8 cf fe ff ff       	call   c000729e <GDTEntry::setBase(unsigned int)>
c00073cf:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00073d3:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00073d7:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c00073db:	83 e0 3f             	and    eax,0x3f
c00073de:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c00073e2:	6a 00                	push   0x0
c00073e4:	8d 44 24 34          	lea    eax,[esp+0x34]
c00073e8:	50                   	push   eax
c00073e9:	e8 b0 fe ff ff       	call   c000729e <GDTEntry::setBase(unsigned int)>
c00073ee:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c00073f2:	83 e0 3f             	and    eax,0x3f
c00073f5:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c00073f9:	83 c4 0c             	add    esp,0xc
c00073fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007400:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007404:	53                   	push   ebx
c0007405:	e8 e4 fe ff ff       	call   c00072ee <GDT::addEntry(GDTEntry)>
c000740a:	83 c4 0c             	add    esp,0xc
c000740d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007411:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007415:	53                   	push   ebx
c0007416:	e8 d3 fe ff ff       	call   c00072ee <GDT::addEntry(GDTEntry)>
c000741b:	83 c4 0c             	add    esp,0xc
c000741e:	57                   	push   edi
c000741f:	56                   	push   esi
c0007420:	53                   	push   ebx
c0007421:	e8 c8 fe ff ff       	call   c00072ee <GDT::addEntry(GDTEntry)>
c0007426:	83 c4 0c             	add    esp,0xc
c0007429:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000742d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007431:	53                   	push   ebx
c0007432:	e8 b7 fe ff ff       	call   c00072ee <GDT::addEntry(GDTEntry)>
c0007437:	83 c4 0c             	add    esp,0xc
c000743a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000743e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007442:	53                   	push   ebx
c0007443:	e8 a6 fe ff ff       	call   c00072ee <GDT::addEntry(GDTEntry)>
c0007448:	83 c4 0c             	add    esp,0xc
c000744b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000744f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007453:	53                   	push   ebx
c0007454:	e8 95 fe ff ff       	call   c00072ee <GDT::addEntry(GDTEntry)>
c0007459:	83 c4 0c             	add    esp,0xc
c000745c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007460:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007464:	53                   	push   ebx
c0007465:	e8 84 fe ff ff       	call   c00072ee <GDT::addEntry(GDTEntry)>
c000746a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000746d:	e8 a6 fe ff ff       	call   c0007318 <GDT::flush()>
c0007472:	83 c4 40             	add    esp,0x40
c0007475:	5b                   	pop    ebx
c0007476:	5e                   	pop    esi
c0007477:	5f                   	pop    edi
c0007478:	c3                   	ret    

c0007479 <idleFunction(void*)>:
c0007479:	83 ec 0c             	sub    esp,0xc
c000747c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007481:	48                   	dec    eax
c0007482:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007487:	75 01                	jne    c000748a <idleFunction(void*)+0x11>
c0007489:	fb                   	sti    
c000748a:	e8 7b f6 00 00       	call   c0016b0a <HalSystemIdle()>
c000748f:	e8 5e 73 01 00       	call   c001e7f2 <idleCommon()>
c0007494:	eb f4                	jmp    c000748a <idleFunction(void*)+0x11>
c0007496:	66 90                	xchg   ax,ax

c0007498 <IDTEntry::IDTEntry(bool)>:
c0007498:	53                   	push   ebx
c0007499:	83 ec 04             	sub    esp,0x4
c000749c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074a0:	88 04 24             	mov    BYTE PTR [esp],al
c00074a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074a7:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00074ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074b1:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00074b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074b9:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00074bc:	83 e2 f0             	and    edx,0xfffffff0
c00074bf:	83 ca 0e             	or     edx,0xe
c00074c2:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00074c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074c9:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00074cc:	83 e2 ef             	and    edx,0xffffffef
c00074cf:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00074d2:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c00074d6:	85 c0                	test   eax,eax
c00074d8:	74 06                	je     c00074e0 <IDTEntry::IDTEntry(bool)+0x48>
c00074da:	b2 03                	mov    dl,0x3
c00074dc:	eb 06                	jmp    c00074e4 <IDTEntry::IDTEntry(bool)+0x4c>
c00074de:	66 90                	xchg   ax,ax
c00074e0:	b2 00                	mov    dl,0x0
c00074e2:	66 90                	xchg   ax,ax
c00074e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074e8:	83 e2 03             	and    edx,0x3
c00074eb:	89 d1                	mov    ecx,edx
c00074ed:	c1 e1 05             	shl    ecx,0x5
c00074f0:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00074f3:	83 e2 9f             	and    edx,0xffffff9f
c00074f6:	88 d3                	mov    bl,dl
c00074f8:	88 ca                	mov    dl,cl
c00074fa:	09 da                	or     edx,ebx
c00074fc:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00074ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007503:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007506:	83 ca 80             	or     edx,0xffffff80
c0007509:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000750c:	90                   	nop
c000750d:	83 c4 04             	add    esp,0x4
c0007510:	5b                   	pop    ebx
c0007511:	c3                   	ret    

c0007512 <IDTEntry::setOffset(unsigned int)>:
c0007512:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007516:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000751a:	66 89 02             	mov    WORD PTR [edx],ax
c000751d:	c1 e8 10             	shr    eax,0x10
c0007520:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007524:	c3                   	ret    
c0007525:	90                   	nop
c0007526:	66 90                	xchg   ax,ax

c0007528 <IDT::IDT()>:
c0007528:	90                   	nop
c0007529:	c3                   	ret    

c000752a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000752a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000752e:	83 c0 30             	add    eax,0x30
c0007531:	c3                   	ret    

c0007532 <IDT::addEntry(IDTEntry, int)>:
c0007532:	53                   	push   ebx
c0007533:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007537:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000753b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000753f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007543:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0007546:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000754a:	5b                   	pop    ebx
c000754b:	c3                   	ret    

c000754c <IDT::addEntry(int, void (*)(), bool)>:
c000754c:	53                   	push   ebx
c000754d:	83 ec 10             	sub    esp,0x10
c0007550:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007555:	50                   	push   eax
c0007556:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000755a:	53                   	push   ebx
c000755b:	e8 38 ff ff ff       	call   c0007498 <IDTEntry::IDTEntry(bool)>
c0007560:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007564:	53                   	push   ebx
c0007565:	e8 a8 ff ff ff       	call   c0007512 <IDTEntry::setOffset(unsigned int)>
c000756a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000756e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007572:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007576:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000757a:	e8 b3 ff ff ff       	call   c0007532 <IDT::addEntry(IDTEntry, int)>
c000757f:	83 c4 30             	add    esp,0x30
c0007582:	5b                   	pop    ebx
c0007583:	c3                   	ret    

c0007584 <IDT::flush()>:
c0007584:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c000758d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007591:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007596:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c000759d:	c3                   	ret    

c000759e <IDT::setup()>:
c000759e:	57                   	push   edi
c000759f:	56                   	push   esi
c00075a0:	53                   	push   ebx
c00075a1:	83 ec 10             	sub    esp,0x10
c00075a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00075a8:	6a 00                	push   0x0
c00075aa:	68 f0 de 01 c0       	push   0xc001def0
c00075af:	6a 00                	push   0x0
c00075b1:	53                   	push   ebx
c00075b2:	e8 95 ff ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c00075b7:	6a 00                	push   0x0
c00075b9:	68 00 df 01 c0       	push   0xc001df00
c00075be:	6a 01                	push   0x1
c00075c0:	53                   	push   ebx
c00075c1:	e8 86 ff ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c00075c6:	83 c4 20             	add    esp,0x20
c00075c9:	6a 00                	push   0x0
c00075cb:	68 0a df 01 c0       	push   0xc001df0a
c00075d0:	6a 02                	push   0x2
c00075d2:	53                   	push   ebx
c00075d3:	e8 74 ff ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c00075d8:	6a 00                	push   0x0
c00075da:	68 14 df 01 c0       	push   0xc001df14
c00075df:	6a 03                	push   0x3
c00075e1:	53                   	push   ebx
c00075e2:	e8 65 ff ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c00075e7:	83 c4 20             	add    esp,0x20
c00075ea:	6a 00                	push   0x0
c00075ec:	68 1e df 01 c0       	push   0xc001df1e
c00075f1:	6a 04                	push   0x4
c00075f3:	53                   	push   ebx
c00075f4:	e8 53 ff ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c00075f9:	6a 00                	push   0x0
c00075fb:	68 28 df 01 c0       	push   0xc001df28
c0007600:	6a 05                	push   0x5
c0007602:	53                   	push   ebx
c0007603:	e8 44 ff ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c0007608:	83 c4 20             	add    esp,0x20
c000760b:	6a 00                	push   0x0
c000760d:	68 32 df 01 c0       	push   0xc001df32
c0007612:	6a 06                	push   0x6
c0007614:	53                   	push   ebx
c0007615:	e8 32 ff ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c000761a:	6a 00                	push   0x0
c000761c:	68 3c df 01 c0       	push   0xc001df3c
c0007621:	6a 07                	push   0x7
c0007623:	53                   	push   ebx
c0007624:	e8 23 ff ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c0007629:	83 c4 20             	add    esp,0x20
c000762c:	6a 00                	push   0x0
c000762e:	68 46 df 01 c0       	push   0xc001df46
c0007633:	6a 08                	push   0x8
c0007635:	53                   	push   ebx
c0007636:	e8 11 ff ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 4e df 01 c0       	push   0xc001df4e
c0007642:	6a 09                	push   0x9
c0007644:	53                   	push   ebx
c0007645:	e8 02 ff ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 58 df 01 c0       	push   0xc001df58
c0007654:	6a 0a                	push   0xa
c0007656:	53                   	push   ebx
c0007657:	e8 f0 fe ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 60 df 01 c0       	push   0xc001df60
c0007663:	6a 0b                	push   0xb
c0007665:	53                   	push   ebx
c0007666:	e8 e1 fe ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 68 df 01 c0       	push   0xc001df68
c0007675:	6a 0c                	push   0xc
c0007677:	53                   	push   ebx
c0007678:	e8 cf fe ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 70 df 01 c0       	push   0xc001df70
c0007684:	6a 0d                	push   0xd
c0007686:	53                   	push   ebx
c0007687:	e8 c0 fe ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 8a df 01 c0       	push   0xc001df8a
c0007696:	6a 0e                	push   0xe
c0007698:	53                   	push   ebx
c0007699:	e8 ae fe ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 92 df 01 c0       	push   0xc001df92
c00076a5:	6a 0f                	push   0xf
c00076a7:	53                   	push   ebx
c00076a8:	e8 9f fe ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 9c df 01 c0       	push   0xc001df9c
c00076b7:	6a 10                	push   0x10
c00076b9:	53                   	push   ebx
c00076ba:	e8 8d fe ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 a6 df 01 c0       	push   0xc001dfa6
c00076c6:	6a 11                	push   0x11
c00076c8:	53                   	push   ebx
c00076c9:	e8 7e fe ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 b0 df 01 c0       	push   0xc001dfb0
c00076d8:	6a 12                	push   0x12
c00076da:	53                   	push   ebx
c00076db:	e8 6c fe ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 01                	push   0x1
c00076e2:	68 4a e0 01 c0       	push   0xc001e04a
c00076e7:	6a 60                	push   0x60
c00076e9:	53                   	push   ebx
c00076ea:	e8 5d fe ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 51 e0 01 c0       	push   0xc001e051
c00076f9:	6a 20                	push   0x20
c00076fb:	53                   	push   ebx
c00076fc:	e8 4b fe ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 3c e0 01 c0       	push   0xc001e03c
c0007708:	6a 21                	push   0x21
c000770a:	53                   	push   ebx
c000770b:	e8 3c fe ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 43 e0 01 c0       	push   0xc001e043
c000771a:	6a 22                	push   0x22
c000771c:	53                   	push   ebx
c000771d:	e8 2a fe ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 ba df 01 c0       	push   0xc001dfba
c0007729:	6a 23                	push   0x23
c000772b:	53                   	push   ebx
c000772c:	e8 1b fe ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 c4 df 01 c0       	push   0xc001dfc4
c000773b:	6a 24                	push   0x24
c000773d:	53                   	push   ebx
c000773e:	e8 09 fe ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 ce df 01 c0       	push   0xc001dfce
c000774a:	6a 25                	push   0x25
c000774c:	53                   	push   ebx
c000774d:	e8 fa fd ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 d8 df 01 c0       	push   0xc001dfd8
c000775c:	6a 26                	push   0x26
c000775e:	53                   	push   ebx
c000775f:	e8 e8 fd ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 00                	push   0x0
c0007766:	68 e2 df 01 c0       	push   0xc001dfe2
c000776b:	6a 27                	push   0x27
c000776d:	53                   	push   ebx
c000776e:	e8 d9 fd ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 ec df 01 c0       	push   0xc001dfec
c000777d:	6a 28                	push   0x28
c000777f:	53                   	push   ebx
c0007780:	e8 c7 fd ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 f6 df 01 c0       	push   0xc001dff6
c000778c:	6a 29                	push   0x29
c000778e:	53                   	push   ebx
c000778f:	e8 b8 fd ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 00 e0 01 c0       	push   0xc001e000
c000779e:	6a 2a                	push   0x2a
c00077a0:	53                   	push   ebx
c00077a1:	e8 a6 fd ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 0a e0 01 c0       	push   0xc001e00a
c00077ad:	6a 2b                	push   0x2b
c00077af:	53                   	push   ebx
c00077b0:	e8 97 fd ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 14 e0 01 c0       	push   0xc001e014
c00077bf:	6a 2c                	push   0x2c
c00077c1:	53                   	push   ebx
c00077c2:	e8 85 fd ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 1e e0 01 c0       	push   0xc001e01e
c00077ce:	6a 2d                	push   0x2d
c00077d0:	53                   	push   ebx
c00077d1:	e8 76 fd ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 28 e0 01 c0       	push   0xc001e028
c00077e0:	6a 2e                	push   0x2e
c00077e2:	53                   	push   ebx
c00077e3:	e8 64 fd ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 32 e0 01 c0       	push   0xc001e032
c00077ef:	6a 2f                	push   0x2f
c00077f1:	53                   	push   ebx
c00077f2:	e8 55 fd ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 8c e1 01 c0       	push   0xc001e18c
c0007801:	6a 30                	push   0x30
c0007803:	53                   	push   ebx
c0007804:	e8 43 fd ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 96 e1 01 c0       	push   0xc001e196
c0007810:	6a 31                	push   0x31
c0007812:	53                   	push   ebx
c0007813:	e8 34 fd ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 a0 e1 01 c0       	push   0xc001e1a0
c0007822:	6a 32                	push   0x32
c0007824:	53                   	push   ebx
c0007825:	e8 22 fd ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 aa e1 01 c0       	push   0xc001e1aa
c0007831:	6a 33                	push   0x33
c0007833:	53                   	push   ebx
c0007834:	e8 13 fd ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 b4 e1 01 c0       	push   0xc001e1b4
c0007843:	6a 34                	push   0x34
c0007845:	53                   	push   ebx
c0007846:	e8 01 fd ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 be e1 01 c0       	push   0xc001e1be
c0007852:	6a 35                	push   0x35
c0007854:	53                   	push   ebx
c0007855:	e8 f2 fc ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 c8 e1 01 c0       	push   0xc001e1c8
c0007864:	6a 36                	push   0x36
c0007866:	53                   	push   ebx
c0007867:	e8 e0 fc ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 d2 e1 01 c0       	push   0xc001e1d2
c0007873:	6a 37                	push   0x37
c0007875:	53                   	push   ebx
c0007876:	e8 d1 fc ff ff       	call   c000754c <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 1c             	add    esp,0x1c
c000787e:	6a 03                	push   0x3
c0007880:	6a 02                	push   0x2
c0007882:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007888:	e8 cf 24 00 00       	call   c0009d5c <VAS::allocatePages(int, int)>
c000788d:	89 c6                	mov    esi,eax
c000788f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007896:	e8 94 01 00 00       	call   c0007a2f <malloc>
c000789b:	81 c6 00 20 00 00    	add    esi,0x2000
c00078a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00078a4:	89 c7                	mov    edi,eax
c00078a6:	e8 f9 15 00 00       	call   c0008ea4 <TSS::TSS()>
c00078ab:	83 c4 0c             	add    esp,0xc
c00078ae:	68 46 df 01 c0       	push   0xc001df46
c00078b3:	56                   	push   esi
c00078b4:	57                   	push   edi
c00078b5:	e8 2e 16 00 00       	call   c0008ee8 <TSS::setup(unsigned long, unsigned long)>
c00078ba:	89 c6                	mov    esi,eax
c00078bc:	58                   	pop    eax
c00078bd:	5a                   	pop    edx
c00078be:	6a 00                	push   0x0
c00078c0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00078c4:	50                   	push   eax
c00078c5:	e8 ce fb ff ff       	call   c0007498 <IDTEntry::IDTEntry(bool)>
c00078ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078ce:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00078d3:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00078da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078de:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00078e4:	80 ce 05             	or     dh,0x5
c00078e7:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00078ea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00078ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078f2:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00078f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078f8:	e8 87 fc ff ff       	call   c0007584 <IDT::flush()>
c00078fd:	83 c4 20             	add    esp,0x20
c0007900:	5b                   	pop    ebx
c0007901:	5e                   	pop    esi
c0007902:	5f                   	pop    edi
c0007903:	c3                   	ret    

c0007904 <sbrk>:
c0007904:	55                   	push   ebp
c0007905:	57                   	push   edi
c0007906:	56                   	push   esi
c0007907:	53                   	push   ebx
c0007908:	83 ec 1c             	sub    esp,0x1c
c000790b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000790f:	85 c0                	test   eax,eax
c0007911:	74 66                	je     c0007979 <sbrk+0x75>
c0007913:	78 6b                	js     c0007980 <sbrk+0x7c>
c0007915:	8b 15 d0 1d 02 c0    	mov    edx,DWORD PTR ds:0xc0021dd0
c000791b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000791f:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c0007925:	05 ff 0f 00 00       	add    eax,0xfff
c000792a:	0f 49 e8             	cmovns ebp,eax
c000792d:	c1 fd 0c             	sar    ebp,0xc
c0007930:	bb 00 00 00 00       	mov    ebx,0x0
c0007935:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c000793b:	8b 3d d0 1d 02 c0    	mov    edi,DWORD PTR ds:0xc0021dd0
c0007941:	e8 f4 03 00 00       	call   c0007d3a <Phys::allocatePage()>
c0007946:	68 01 04 00 00       	push   0x401
c000794b:	57                   	push   edi
c000794c:	50                   	push   eax
c000794d:	56                   	push   esi
c000794e:	e8 01 23 00 00       	call   c0009c54 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007953:	81 05 d0 1d 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021dd0,0x1000
c000795d:	83 c3 01             	add    ebx,0x1
c0007960:	83 c4 10             	add    esp,0x10
c0007963:	39 dd                	cmp    ebp,ebx
c0007965:	75 ce                	jne    c0007935 <sbrk+0x31>
c0007967:	0f 20 d8             	mov    eax,cr3
c000796a:	0f 22 d8             	mov    cr3,eax
c000796d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007971:	83 c4 1c             	add    esp,0x1c
c0007974:	5b                   	pop    ebx
c0007975:	5e                   	pop    esi
c0007976:	5f                   	pop    edi
c0007977:	5d                   	pop    ebp
c0007978:	c3                   	ret    
c0007979:	a1 d0 1d 02 c0       	mov    eax,ds:0xc0021dd0
c000797e:	eb f1                	jmp    c0007971 <sbrk+0x6d>
c0007980:	83 ec 08             	sub    esp,0x8
c0007983:	50                   	push   eax
c0007984:	68 d8 fa 01 c0       	push   0xc001fad8
c0007989:	e8 13 2f 00 00       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c000798e:	83 c4 10             	add    esp,0x10
c0007991:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007996:	eb d9                	jmp    c0007971 <sbrk+0x6d>

c0007998 <mmap>:
c0007998:	83 ec 18             	sub    esp,0x18
c000799b:	68 08 fb 01 c0       	push   0xc001fb08
c00079a0:	e8 62 8e 00 00       	call   c0010807 <KePanic(char const*)>
c00079a5:	b8 00 00 00 00       	mov    eax,0x0
c00079aa:	83 c4 1c             	add    esp,0x1c
c00079ad:	c3                   	ret    

c00079ae <munmap>:
c00079ae:	83 ec 18             	sub    esp,0x18
c00079b1:	68 0d fb 01 c0       	push   0xc001fb0d
c00079b6:	e8 4c 8e 00 00       	call   c0010807 <KePanic(char const*)>
c00079bb:	b8 00 00 00 00       	mov    eax,0x0
c00079c0:	83 c4 1c             	add    esp,0x1c
c00079c3:	c3                   	ret    

c00079c4 <liballoc_lock()>:
c00079c4:	fa                   	cli    
c00079c5:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c00079cc:	b8 00 00 00 00       	mov    eax,0x0
c00079d1:	c3                   	ret    

c00079d2 <liballoc_unlock()>:
c00079d2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00079d7:	83 e8 01             	sub    eax,0x1
c00079da:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00079df:	75 01                	jne    c00079e2 <liballoc_unlock()+0x10>
c00079e1:	fb                   	sti    
c00079e2:	b8 00 00 00 00       	mov    eax,0x0
c00079e7:	c3                   	ret    

c00079e8 <liballoc_alloc(int)>:
c00079e8:	83 ec 10             	sub    esp,0x10
c00079eb:	6a 01                	push   0x1
c00079ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00079f1:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00079f7:	e8 60 23 00 00       	call   c0009d5c <VAS::allocatePages(int, int)>
c00079fc:	83 c4 1c             	add    esp,0x1c
c00079ff:	c3                   	ret    

c0007a00 <liballoc_free(void*, int)>:
c0007a00:	83 ec 14             	sub    esp,0x14
c0007a03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a07:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a0d:	e8 88 1f 00 00       	call   c000999a <VAS::freeAllocatedPages(unsigned long)>
c0007a12:	b8 00 00 00 00       	mov    eax,0x0
c0007a17:	83 c4 1c             	add    esp,0x1c
c0007a1a:	c3                   	ret    

c0007a1b <realloc>:
c0007a1b:	83 ec 14             	sub    esp,0x14
c0007a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a26:	e8 5f 9b ff ff       	call   c000158a <dlrealloc>
c0007a2b:	83 c4 1c             	add    esp,0x1c
c0007a2e:	c3                   	ret    

c0007a2f <malloc>:
c0007a2f:	83 ec 18             	sub    esp,0x18
c0007a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a36:	e8 1e 96 ff ff       	call   c0001059 <dlmalloc>
c0007a3b:	83 c4 1c             	add    esp,0x1c
c0007a3e:	c3                   	ret    

c0007a3f <free>:
c0007a3f:	83 ec 18             	sub    esp,0x18
c0007a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a46:	e8 b0 92 ff ff       	call   c0000cfb <dlfree>
c0007a4b:	83 c4 1c             	add    esp,0x1c
c0007a4e:	c3                   	ret    

c0007a4f <rfree>:
c0007a4f:	83 ec 18             	sub    esp,0x18
c0007a52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a56:	e8 a0 92 ff ff       	call   c0000cfb <dlfree>
c0007a5b:	83 c4 1c             	add    esp,0x1c
c0007a5e:	c3                   	ret    

c0007a5f <calloc>:
c0007a5f:	56                   	push   esi
c0007a60:	53                   	push   ebx
c0007a61:	83 ec 10             	sub    esp,0x10
c0007a64:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007a68:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007a6d:	53                   	push   ebx
c0007a6e:	e8 bc ff ff ff       	call   c0007a2f <malloc>
c0007a73:	89 c6                	mov    esi,eax
c0007a75:	83 c4 0c             	add    esp,0xc
c0007a78:	53                   	push   ebx
c0007a79:	6a 00                	push   0x0
c0007a7b:	50                   	push   eax
c0007a7c:	e8 6f 8a ff ff       	call   c00004f0 <memset>
c0007a81:	89 f0                	mov    eax,esi
c0007a83:	83 c4 14             	add    esp,0x14
c0007a86:	5b                   	pop    ebx
c0007a87:	5e                   	pop    esi
c0007a88:	c3                   	ret    

c0007a89 <KeEntryPoint>:
c0007a89:	57                   	push   edi
c0007a8a:	bf f9 03 00 00       	mov    edi,0x3f9
c0007a8f:	56                   	push   esi
c0007a90:	31 f6                	xor    esi,esi
c0007a92:	89 fa                	mov    edx,edi
c0007a94:	53                   	push   ebx
c0007a95:	83 ec 2c             	sub    esp,0x2c
c0007a98:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007a9d:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007aa2:	89 f0                	mov    eax,esi
c0007aa4:	ee                   	out    dx,al
c0007aa5:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007aaa:	b0 80                	mov    al,0x80
c0007aac:	89 da                	mov    edx,ebx
c0007aae:	ee                   	out    dx,al
c0007aaf:	b1 03                	mov    cl,0x3
c0007ab1:	ba f8 03 00 00       	mov    edx,0x3f8
c0007ab6:	88 c8                	mov    al,cl
c0007ab8:	ee                   	out    dx,al
c0007ab9:	89 f0                	mov    eax,esi
c0007abb:	89 fa                	mov    edx,edi
c0007abd:	ee                   	out    dx,al
c0007abe:	88 c8                	mov    al,cl
c0007ac0:	89 da                	mov    edx,ebx
c0007ac2:	ee                   	out    dx,al
c0007ac3:	b0 c7                	mov    al,0xc7
c0007ac5:	ba fa 03 00 00       	mov    edx,0x3fa
c0007aca:	ee                   	out    dx,al
c0007acb:	b0 0b                	mov    al,0xb
c0007acd:	ba fc 03 00 00       	mov    edx,0x3fc
c0007ad2:	ee                   	out    dx,al
c0007ad3:	68 14 fb 01 c0       	push   0xc001fb14
c0007ad8:	e8 c4 2d 00 00       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0007add:	e8 35 86 00 00       	call   c0010117 <KeDisplaySplashScreen()>
c0007ae2:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007ae7:	05 ff 0f 00 00       	add    eax,0xfff
c0007aec:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007af1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007af4:	e8 af 03 00 00       	call   c0007ea8 <Phys::physicalMemorySetup(unsigned int)>
c0007af9:	e8 4b 1c 00 00       	call   c0009749 <Virt::virtualMemorySetup()>
c0007afe:	58                   	pop    eax
c0007aff:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b03:	53                   	push   ebx
c0007b04:	e8 13 1f 00 00       	call   c0009a1c <VAS::VAS()>
c0007b09:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007b0f:	e8 76 6c 01 00       	call   c001e78a <_init>
c0007b14:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007b1b:	e8 0f ff ff ff       	call   c0007a2f <malloc>
c0007b20:	89 c6                	mov    esi,eax
c0007b22:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b25:	e8 3a f2 ff ff       	call   c0006d64 <Computer::Computer()>
c0007b2a:	6a 00                	push   0x0
c0007b2c:	6a 00                	push   0x0
c0007b2e:	6a 00                	push   0x0
c0007b30:	56                   	push   esi
c0007b31:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007b37:	e8 ee f5 ff ff       	call   c000712a <Computer::open(int, int, void*)>
c0007b3c:	83 c4 14             	add    esp,0x14
c0007b3f:	53                   	push   ebx
c0007b40:	e8 a1 1f 00 00       	call   c0009ae6 <VAS::~VAS()>
c0007b45:	83 c4 30             	add    esp,0x30
c0007b48:	5b                   	pop    ebx
c0007b49:	5e                   	pop    esi
c0007b4a:	5f                   	pop    edi
c0007b4b:	c3                   	ret    

c0007b4c <Phys::allocateDMA(unsigned long)>:
c0007b4c:	55                   	push   ebp
c0007b4d:	31 ed                	xor    ebp,ebp
c0007b4f:	57                   	push   edi
c0007b50:	56                   	push   esi
c0007b51:	31 f6                	xor    esi,esi
c0007b53:	53                   	push   ebx
c0007b54:	31 db                	xor    ebx,ebx
c0007b56:	83 ec 1c             	sub    esp,0x1c
c0007b59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007b5d:	05 ff 0f 00 00       	add    eax,0xfff
c0007b62:	c1 e8 0c             	shr    eax,0xc
c0007b65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b69:	31 c0                	xor    eax,eax
c0007b6b:	eb 1b                	jmp    c0007b88 <Phys::allocateDMA(unsigned long)+0x3c>
c0007b6d:	8d 78 01             	lea    edi,[eax+0x1]
c0007b70:	85 c0                	test   eax,eax
c0007b72:	0f 44 eb             	cmove  ebp,ebx
c0007b75:	0f 44 f3             	cmove  esi,ebx
c0007b78:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007b7c:	74 37                	je     c0007bb5 <Phys::allocateDMA(unsigned long)+0x69>
c0007b7e:	89 f8                	mov    eax,edi
c0007b80:	83 c3 01             	add    ebx,0x1
c0007b83:	83 fb 0f             	cmp    ebx,0xf
c0007b86:	7f 13                	jg     c0007b9b <Phys::allocateDMA(unsigned long)+0x4f>
c0007b88:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007b8f:	74 dc                	je     c0007b6d <Phys::allocateDMA(unsigned long)+0x21>
c0007b91:	31 c0                	xor    eax,eax
c0007b93:	83 c3 01             	add    ebx,0x1
c0007b96:	83 fb 0f             	cmp    ebx,0xf
c0007b99:	7e ed                	jle    c0007b88 <Phys::allocateDMA(unsigned long)+0x3c>
c0007b9b:	83 ec 0c             	sub    esp,0xc
c0007b9e:	68 2c fb 01 c0       	push   0xc001fb2c
c0007ba3:	e8 5f 8c 00 00       	call   c0010807 <KePanic(char const*)>
c0007ba8:	83 c4 10             	add    esp,0x10
c0007bab:	31 c0                	xor    eax,eax
c0007bad:	83 c4 1c             	add    esp,0x1c
c0007bb0:	5b                   	pop    ebx
c0007bb1:	5e                   	pop    esi
c0007bb2:	5f                   	pop    edi
c0007bb3:	5d                   	pop    ebp
c0007bb4:	c3                   	ret    
c0007bb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007bb9:	89 f2                	mov    edx,esi
c0007bbb:	c1 fa 04             	sar    edx,0x4
c0007bbe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bc2:	01 f1                	add    ecx,esi
c0007bc4:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007bc7:	83 e9 01             	sub    ecx,0x1
c0007bca:	0f 48 ca             	cmovs  ecx,edx
c0007bcd:	c1 f9 04             	sar    ecx,0x4
c0007bd0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007bd4:	74 06                	je     c0007bdc <Phys::allocateDMA(unsigned long)+0x90>
c0007bd6:	89 eb                	mov    ebx,ebp
c0007bd8:	31 c0                	xor    eax,eax
c0007bda:	eb b7                	jmp    c0007b93 <Phys::allocateDMA(unsigned long)+0x47>
c0007bdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be0:	85 d2                	test   edx,edx
c0007be2:	74 17                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0xaf>
c0007be4:	8d 96 ec 4e 02 c0    	lea    edx,[esi-0x3ffdb114]
c0007bea:	8d 84 06 ed 4e 02 c0 	lea    eax,[esi+eax*1-0x3ffdb113]
c0007bf1:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007bf4:	83 c2 01             	add    edx,0x1
c0007bf7:	39 d0                	cmp    eax,edx
c0007bf9:	75 f6                	jne    c0007bf1 <Phys::allocateDMA(unsigned long)+0xa5>
c0007bfb:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007c01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007c09:	01 c2                	add    edx,eax
c0007c0b:	85 c9                	test   ecx,ecx
c0007c0d:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007c13:	74 17                	je     c0007c2c <Phys::allocateDMA(unsigned long)+0xe0>
c0007c15:	83 ec 0c             	sub    esp,0xc
c0007c18:	68 2c fb 01 c0       	push   0xc001fb2c
c0007c1d:	e8 e5 8b 00 00       	call   c0010807 <KePanic(char const*)>
c0007c22:	83 c4 10             	add    esp,0x10
c0007c25:	89 f8                	mov    eax,edi
c0007c27:	e9 54 ff ff ff       	jmp    c0007b80 <Phys::allocateDMA(unsigned long)+0x34>
c0007c2c:	c1 e6 0c             	shl    esi,0xc
c0007c2f:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007c35:	e9 73 ff ff ff       	jmp    c0007bad <Phys::allocateDMA(unsigned long)+0x61>

c0007c3a <Phys::freeDMA(unsigned long, unsigned long)>:
c0007c3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c3e:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007c44:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007c49:	c1 ea 0c             	shr    edx,0xc
c0007c4c:	29 d0                	sub    eax,edx
c0007c4e:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007c53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c57:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007c5c:	c1 e8 0c             	shr    eax,0xc
c0007c5f:	85 d2                	test   edx,edx
c0007c61:	74 11                	je     c0007c74 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007c63:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007c68:	01 c2                	add    edx,eax
c0007c6a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007c6d:	83 c0 01             	add    eax,0x1
c0007c70:	39 d0                	cmp    eax,edx
c0007c72:	75 f6                	jne    c0007c6a <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007c74:	c3                   	ret    

c0007c75 <Phys::setPageState(unsigned long, bool)>:
c0007c75:	57                   	push   edi
c0007c76:	56                   	push   esi
c0007c77:	8b 35 d4 1d 02 c0    	mov    esi,DWORD PTR ds:0xc0021dd4
c0007c7d:	53                   	push   ebx
c0007c7e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007c82:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007c87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c8b:	89 ca                	mov    edx,ecx
c0007c8d:	83 e1 07             	and    ecx,0x7
c0007c90:	c1 ea 03             	shr    edx,0x3
c0007c93:	d3 c3                	rol    ebx,cl
c0007c95:	0f b6 c0             	movzx  eax,al
c0007c98:	01 d6                	add    esi,edx
c0007c9a:	d3 e0                	shl    eax,cl
c0007c9c:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007c9f:	21 fb                	and    ebx,edi
c0007ca1:	88 1e                	mov    BYTE PTR [esi],bl
c0007ca3:	8b 1d d4 1d 02 c0    	mov    ebx,DWORD PTR ds:0xc0021dd4
c0007ca9:	01 da                	add    edx,ebx
c0007cab:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007cad:	09 c8                	or     eax,ecx
c0007caf:	88 02                	mov    BYTE PTR [edx],al
c0007cb1:	5b                   	pop    ebx
c0007cb2:	5e                   	pop    esi
c0007cb3:	5f                   	pop    edi
c0007cb4:	c3                   	ret    

c0007cb5 <Phys::getPageState(unsigned long)>:
c0007cb5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007cb9:	8b 15 d4 1d 02 c0    	mov    edx,DWORD PTR ds:0xc0021dd4
c0007cbf:	89 c8                	mov    eax,ecx
c0007cc1:	83 e1 07             	and    ecx,0x7
c0007cc4:	c1 e8 03             	shr    eax,0x3
c0007cc7:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007ccb:	d3 f8                	sar    eax,cl
c0007ccd:	83 e0 01             	and    eax,0x1
c0007cd0:	c3                   	ret    

c0007cd1 <Phys::freePage(unsigned long)>:
c0007cd1:	53                   	push   ebx
c0007cd2:	83 ec 08             	sub    esp,0x8
c0007cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cd9:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007cdf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007ce5:	76 41                	jbe    c0007d28 <Phys::freePage(unsigned long)+0x57>
c0007ce7:	c1 e8 0c             	shr    eax,0xc
c0007cea:	50                   	push   eax
c0007ceb:	89 c3                	mov    ebx,eax
c0007ced:	e8 c3 ff ff ff       	call   c0007cb5 <Phys::getPageState(unsigned long)>
c0007cf2:	5a                   	pop    edx
c0007cf3:	84 c0                	test   al,al
c0007cf5:	74 20                	je     c0007d17 <Phys::freePage(unsigned long)+0x46>
c0007cf7:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007cfc:	83 ec 08             	sub    esp,0x8
c0007cff:	6a 00                	push   0x0
c0007d01:	53                   	push   ebx
c0007d02:	83 e8 01             	sub    eax,0x1
c0007d05:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007d0a:	e8 66 ff ff ff       	call   c0007c75 <Phys::setPageState(unsigned long, bool)>
c0007d0f:	83 c4 10             	add    esp,0x10
c0007d12:	83 c4 08             	add    esp,0x8
c0007d15:	5b                   	pop    ebx
c0007d16:	c3                   	ret    
c0007d17:	c7 44 24 10 d1 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fbd1
c0007d1f:	83 c4 08             	add    esp,0x8
c0007d22:	5b                   	pop    ebx
c0007d23:	e9 df 8a 00 00       	jmp    c0010807 <KePanic(char const*)>
c0007d28:	68 00 10 00 00       	push   0x1000
c0007d2d:	50                   	push   eax
c0007d2e:	e8 07 ff ff ff       	call   c0007c3a <Phys::freeDMA(unsigned long, unsigned long)>
c0007d33:	59                   	pop    ecx
c0007d34:	5b                   	pop    ebx
c0007d35:	83 c4 08             	add    esp,0x8
c0007d38:	5b                   	pop    ebx
c0007d39:	c3                   	ret    

c0007d3a <Phys::allocatePage()>:
c0007d3a:	56                   	push   esi
c0007d3b:	53                   	push   ebx
c0007d3c:	83 ec 14             	sub    esp,0x14
c0007d3f:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007d45:	89 f3                	mov    ebx,esi
c0007d47:	eb 0a                	jmp    c0007d53 <Phys::allocatePage()+0x19>
c0007d49:	39 de                	cmp    esi,ebx
c0007d4b:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007d51:	74 26                	je     c0007d79 <Phys::allocatePage()+0x3f>
c0007d53:	53                   	push   ebx
c0007d54:	e8 5c ff ff ff       	call   c0007cb5 <Phys::getPageState(unsigned long)>
c0007d59:	5a                   	pop    edx
c0007d5a:	84 c0                	test   al,al
c0007d5c:	74 67                	je     c0007dc5 <Phys::allocatePage()+0x8b>
c0007d5e:	83 c3 01             	add    ebx,0x1
c0007d61:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007d67:	75 e0                	jne    c0007d49 <Phys::allocatePage()+0xf>
c0007d69:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007d73:	31 db                	xor    ebx,ebx
c0007d75:	39 de                	cmp    esi,ebx
c0007d77:	75 da                	jne    c0007d53 <Phys::allocatePage()+0x19>
c0007d79:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007d7e:	83 ec 0c             	sub    esp,0xc
c0007d81:	83 f0 01             	xor    eax,0x1
c0007d84:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007d89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007d8e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007d91:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007d97:	50                   	push   eax
c0007d98:	e8 e1 27 00 00       	call   c000a57e <VAS::scanForEviction()>
c0007d9d:	83 c4 10             	add    esp,0x10
c0007da0:	85 c0                	test   eax,eax
c0007da2:	75 48                	jne    c0007dec <Phys::allocatePage()+0xb2>
c0007da4:	83 ec 0c             	sub    esp,0xc
c0007da7:	68 54 fb 01 c0       	push   0xc001fb54
c0007dac:	e8 56 8a 00 00       	call   c0010807 <KePanic(char const*)>
c0007db1:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	53                   	push   ebx
c0007dbb:	e8 f5 fe ff ff       	call   c0007cb5 <Phys::getPageState(unsigned long)>
c0007dc0:	5a                   	pop    edx
c0007dc1:	84 c0                	test   al,al
c0007dc3:	75 99                	jne    c0007d5e <Phys::allocatePage()+0x24>
c0007dc5:	6a 01                	push   0x1
c0007dc7:	53                   	push   ebx
c0007dc8:	e8 a8 fe ff ff       	call   c0007c75 <Phys::setPageState(unsigned long, bool)>
c0007dcd:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007dd3:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007dd8:	59                   	pop    ecx
c0007dd9:	5b                   	pop    ebx
c0007dda:	83 c2 01             	add    edx,0x1
c0007ddd:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007de3:	c1 e0 0c             	shl    eax,0xc
c0007de6:	83 c4 14             	add    esp,0x14
c0007de9:	5b                   	pop    ebx
c0007dea:	5e                   	pop    esi
c0007deb:	c3                   	ret    
c0007dec:	83 ec 08             	sub    esp,0x8
c0007def:	89 c2                	mov    edx,eax
c0007df1:	6a 01                	push   0x1
c0007df3:	c1 ea 0c             	shr    edx,0xc
c0007df6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dfa:	52                   	push   edx
c0007dfb:	e8 75 fe ff ff       	call   c0007c75 <Phys::setPageState(unsigned long, bool)>
c0007e00:	83 c4 10             	add    esp,0x10
c0007e03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e07:	eb dd                	jmp    c0007de6 <Phys::allocatePage()+0xac>

c0007e09 <Phys::allocateContiguousPages(int)>:
c0007e09:	57                   	push   edi
c0007e0a:	56                   	push   esi
c0007e0b:	53                   	push   ebx
c0007e0c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e10:	fa                   	cli    
c0007e11:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007e16:	31 db                	xor    ebx,ebx
c0007e18:	83 c0 01             	add    eax,0x1
c0007e1b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007e20:	85 db                	test   ebx,ebx
c0007e22:	75 11                	jne    c0007e35 <Phys::allocateContiguousPages(int)+0x2c>
c0007e24:	e8 11 ff ff ff       	call   c0007d3a <Phys::allocatePage()>
c0007e29:	83 fe 01             	cmp    esi,0x1
c0007e2c:	89 c7                	mov    edi,eax
c0007e2e:	74 21                	je     c0007e51 <Phys::allocateContiguousPages(int)+0x48>
c0007e30:	bb 01 00 00 00       	mov    ebx,0x1
c0007e35:	e8 00 ff ff ff       	call   c0007d3a <Phys::allocatePage()>
c0007e3a:	89 da                	mov    edx,ebx
c0007e3c:	c1 e2 0c             	shl    edx,0xc
c0007e3f:	01 fa                	add    edx,edi
c0007e41:	39 c2                	cmp    edx,eax
c0007e43:	74 22                	je     c0007e67 <Phys::allocateContiguousPages(int)+0x5e>
c0007e45:	83 fe 01             	cmp    esi,0x1
c0007e48:	bb 01 00 00 00       	mov    ebx,0x1
c0007e4d:	89 c7                	mov    edi,eax
c0007e4f:	75 e4                	jne    c0007e35 <Phys::allocateContiguousPages(int)+0x2c>
c0007e51:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007e56:	83 e8 01             	sub    eax,0x1
c0007e59:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007e5e:	75 01                	jne    c0007e61 <Phys::allocateContiguousPages(int)+0x58>
c0007e60:	fb                   	sti    
c0007e61:	89 f8                	mov    eax,edi
c0007e63:	5b                   	pop    ebx
c0007e64:	5e                   	pop    esi
c0007e65:	5f                   	pop    edi
c0007e66:	c3                   	ret    
c0007e67:	83 c3 01             	add    ebx,0x1
c0007e6a:	39 f3                	cmp    ebx,esi
c0007e6c:	75 b2                	jne    c0007e20 <Phys::allocateContiguousPages(int)+0x17>
c0007e6e:	eb e1                	jmp    c0007e51 <Phys::allocateContiguousPages(int)+0x48>

c0007e70 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007e70:	56                   	push   esi
c0007e71:	53                   	push   ebx
c0007e72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007e76:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007e7c:	73 06                	jae    c0007e84 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007e7e:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007e84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e88:	c1 eb 0c             	shr    ebx,0xc
c0007e8b:	c1 e8 0c             	shr    eax,0xc
c0007e8e:	39 d8                	cmp    eax,ebx
c0007e90:	73 13                	jae    c0007ea5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007e92:	6a 00                	push   0x0
c0007e94:	8d 70 01             	lea    esi,[eax+0x1]
c0007e97:	50                   	push   eax
c0007e98:	e8 d8 fd ff ff       	call   c0007c75 <Phys::setPageState(unsigned long, bool)>
c0007e9d:	39 f3                	cmp    ebx,esi
c0007e9f:	5a                   	pop    edx
c0007ea0:	89 f0                	mov    eax,esi
c0007ea2:	59                   	pop    ecx
c0007ea3:	75 ed                	jne    c0007e92 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007ea5:	5b                   	pop    ebx
c0007ea6:	5e                   	pop    esi
c0007ea7:	c3                   	ret    

c0007ea8 <Phys::physicalMemorySetup(unsigned int)>:
c0007ea8:	55                   	push   ebp
c0007ea9:	57                   	push   edi
c0007eaa:	56                   	push   esi
c0007eab:	53                   	push   ebx
c0007eac:	31 db                	xor    ebx,ebx
c0007eae:	83 ec 40             	sub    esp,0x40
c0007eb1:	6a 10                	push   0x10
c0007eb3:	6a 00                	push   0x0
c0007eb5:	68 ec 4e 02 c0       	push   0xc0024eec
c0007eba:	e8 31 86 ff ff       	call   c00004f0 <memset>
c0007ebf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007ec3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007ec8:	05 00 10 00 00       	add    eax,0x1000
c0007ecd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007ed1:	5a                   	pop    edx
c0007ed2:	59                   	pop    ecx
c0007ed3:	50                   	push   eax
c0007ed4:	68 e7 fb 01 c0       	push   0xc001fbe7
c0007ed9:	e8 c3 29 00 00       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0007ede:	83 c4 10             	add    esp,0x10
c0007ee1:	83 ec 08             	sub    esp,0x8
c0007ee4:	6a 01                	push   0x1
c0007ee6:	53                   	push   ebx
c0007ee7:	83 c3 01             	add    ebx,0x1
c0007eea:	e8 86 fd ff ff       	call   c0007c75 <Phys::setPageState(unsigned long, bool)>
c0007eef:	83 c4 10             	add    esp,0x10
c0007ef2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ef8:	75 e7                	jne    c0007ee1 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007efa:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f01:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007f06:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007f0e:	85 c0                	test   eax,eax
c0007f10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007f14:	0f 85 87 00 00 00    	jne    c0007fa1 <Phys::physicalMemorySetup(unsigned int)+0xf9>
c0007f1a:	e9 31 01 00 00       	jmp    c0008050 <Phys::physicalMemorySetup(unsigned int)+0x1a8>
c0007f1f:	ba 00 00 08 00       	mov    edx,0x80000
c0007f24:	89 c1                	mov    ecx,eax
c0007f26:	39 f2                	cmp    edx,esi
c0007f28:	19 f9                	sbb    ecx,edi
c0007f2a:	0f 82 c0 00 00 00    	jb     c0007ff0 <Phys::physicalMemorySetup(unsigned int)+0x148>
c0007f30:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007f34:	89 c5                	mov    ebp,eax
c0007f36:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007f3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007f3e:	19 cd                	sbb    ebp,ecx
c0007f40:	0f 83 af 00 00 00    	jae    c0007ff5 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007f46:	89 d6                	mov    esi,edx
c0007f48:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007f4d:	89 cf                	mov    edi,ecx
c0007f4f:	39 f2                	cmp    edx,esi
c0007f51:	19 c8                	sbb    eax,ecx
c0007f53:	73 07                	jae    c0007f5c <Phys::physicalMemorySetup(unsigned int)+0xb4>
c0007f55:	be 00 00 0a 00       	mov    esi,0xa0000
c0007f5a:	31 ff                	xor    edi,edi
c0007f5c:	89 f2                	mov    edx,esi
c0007f5e:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0007f63:	89 f9                	mov    ecx,edi
c0007f65:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0007f6b:	83 d1 ff             	adc    ecx,0xffffffff
c0007f6e:	39 d0                	cmp    eax,edx
c0007f70:	b8 00 00 00 00       	mov    eax,0x0
c0007f75:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007f79:	19 c8                	sbb    eax,ecx
c0007f7b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0007f7f:	0f 82 9d 01 00 00    	jb     c0008122 <Phys::physicalMemorySetup(unsigned int)+0x27a>
c0007f85:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007f89:	83 c3 18             	add    ebx,0x18
c0007f8c:	83 c6 01             	add    esi,0x1
c0007f8f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007f93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007f97:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0007f9b:	0f 84 bf 00 00 00    	je     c0008060 <Phys::physicalMemorySetup(unsigned int)+0x1b8>
c0007fa1:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fa3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fa9:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fac:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007faf:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007fb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fb7:	01 f0                	add    eax,esi
c0007fb9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fbd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007fc1:	55                   	push   ebp
c0007fc2:	11 fa                	adc    edx,edi
c0007fc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007fc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007fcc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007fd0:	50                   	push   eax
c0007fd1:	56                   	push   esi
c0007fd2:	68 84 fb 01 c0       	push   0xc001fb84
c0007fd7:	e8 c5 28 00 00       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0007fdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007fe0:	83 c4 10             	add    esp,0x10
c0007fe3:	09 f8                	or     eax,edi
c0007fe5:	75 79                	jne    c0008060 <Phys::physicalMemorySetup(unsigned int)+0x1b8>
c0007fe7:	83 fd 01             	cmp    ebp,0x1
c0007fea:	0f 84 2f ff ff ff    	je     c0007f1f <Phys::physicalMemorySetup(unsigned int)+0x77>
c0007ff0:	83 fd 01             	cmp    ebp,0x1
c0007ff3:	75 90                	jne    c0007f85 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c0007ff5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007ff9:	31 d2                	xor    edx,edx
c0007ffb:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0007fff:	89 c8                	mov    eax,ecx
c0008001:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008005:	19 d1                	sbb    ecx,edx
c0008007:	0f 82 78 ff ff ff    	jb     c0007f85 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c000800d:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0008012:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c0008016:	b9 00 00 00 00       	mov    ecx,0x0
c000801b:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000801f:	0f 83 60 ff ff ff    	jae    c0007f85 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c0008025:	39 c6                	cmp    esi,eax
c0008027:	19 d7                	sbb    edi,edx
c0008029:	0f 83 ff 00 00 00    	jae    c000812e <Phys::physicalMemorySetup(unsigned int)+0x286>
c000802f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008033:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008037:	29 c7                	sub    edi,eax
c0008039:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000803d:	19 d5                	sbb    ebp,edx
c000803f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008043:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008047:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000804b:	e9 de 00 00 00       	jmp    c000812e <Phys::physicalMemorySetup(unsigned int)+0x286>
c0008050:	83 ec 0c             	sub    esp,0xc
c0008053:	68 ff fb 01 c0       	push   0xc001fbff
c0008058:	e8 aa 87 00 00       	call   c0010807 <KePanic(char const*)>
c000805d:	83 c4 10             	add    esp,0x10
c0008060:	83 ec 08             	sub    esp,0x8
c0008063:	bb 60 00 00 00       	mov    ebx,0x60
c0008068:	6a 00                	push   0x0
c000806a:	6a 06                	push   0x6
c000806c:	e8 04 fc ff ff       	call   c0007c75 <Phys::setPageState(unsigned long, bool)>
c0008071:	58                   	pop    eax
c0008072:	5a                   	pop    edx
c0008073:	6a 00                	push   0x0
c0008075:	6a 07                	push   0x7
c0008077:	e8 f9 fb ff ff       	call   c0007c75 <Phys::setPageState(unsigned long, bool)>
c000807c:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0008082:	83 c4 10             	add    esp,0x10
c0008085:	83 c1 02             	add    ecx,0x2
c0008088:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c000808e:	83 ec 08             	sub    esp,0x8
c0008091:	6a 00                	push   0x0
c0008093:	53                   	push   ebx
c0008094:	83 c3 01             	add    ebx,0x1
c0008097:	e8 d9 fb ff ff       	call   c0007c75 <Phys::setPageState(unsigned long, bool)>
c000809c:	83 c4 10             	add    esp,0x10
c000809f:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00080a5:	75 e7                	jne    c000808e <Phys::physicalMemorySetup(unsigned int)+0x1e6>
c00080a7:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00080ac:	bb 40 01 00 00       	mov    ebx,0x140
c00080b1:	83 c0 20             	add    eax,0x20
c00080b4:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00080b9:	eb 26                	jmp    c00080e1 <Phys::physicalMemorySetup(unsigned int)+0x239>
c00080bb:	83 ec 08             	sub    esp,0x8
c00080be:	6a 00                	push   0x0
c00080c0:	53                   	push   ebx
c00080c1:	83 c3 01             	add    ebx,0x1
c00080c4:	e8 ac fb ff ff       	call   c0007c75 <Phys::setPageState(unsigned long, bool)>
c00080c9:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00080ce:	83 c4 10             	add    esp,0x10
c00080d1:	83 c0 01             	add    eax,0x1
c00080d4:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00080da:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00080df:	74 07                	je     c00080e8 <Phys::physicalMemorySetup(unsigned int)+0x240>
c00080e1:	3d ff 03 00 00       	cmp    eax,0x3ff
c00080e6:	7e d3                	jle    c00080bb <Phys::physicalMemorySetup(unsigned int)+0x213>
c00080e8:	bb d0 01 00 00       	mov    ebx,0x1d0
c00080ed:	3d ff 07 00 00       	cmp    eax,0x7ff
c00080f2:	7f 26                	jg     c000811a <Phys::physicalMemorySetup(unsigned int)+0x272>
c00080f4:	83 ec 08             	sub    esp,0x8
c00080f7:	6a 00                	push   0x0
c00080f9:	53                   	push   ebx
c00080fa:	83 c3 01             	add    ebx,0x1
c00080fd:	e8 73 fb ff ff       	call   c0007c75 <Phys::setPageState(unsigned long, bool)>
c0008102:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008107:	83 c4 10             	add    esp,0x10
c000810a:	83 c0 01             	add    eax,0x1
c000810d:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0008113:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008118:	75 d3                	jne    c00080ed <Phys::physicalMemorySetup(unsigned int)+0x245>
c000811a:	83 c4 3c             	add    esp,0x3c
c000811d:	5b                   	pop    ebx
c000811e:	5e                   	pop    esi
c000811f:	5f                   	pop    edi
c0008120:	5d                   	pop    ebp
c0008121:	c3                   	ret    
c0008122:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0008126:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000812e:	83 ec 04             	sub    esp,0x4
c0008131:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0008135:	56                   	push   esi
c0008136:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000813a:	57                   	push   edi
c000813b:	68 a8 fb 01 c0       	push   0xc001fba8
c0008140:	e8 5c 27 00 00       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0008145:	5d                   	pop    ebp
c0008146:	58                   	pop    eax
c0008147:	56                   	push   esi
c0008148:	57                   	push   edi
c0008149:	e8 22 fd ff ff       	call   c0007e70 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000814e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008152:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008156:	83 c4 0c             	add    esp,0xc
c0008159:	8b 35 e8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ee8
c000815f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008163:	01 f0                	add    eax,esi
c0008165:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000816c:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008171:	52                   	push   edx
c0008172:	50                   	push   eax
c0008173:	68 0d fc 01 c0       	push   0xc001fc0d
c0008178:	e8 24 27 00 00       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c000817d:	83 c4 10             	add    esp,0x10
c0008180:	e9 00 fe ff ff       	jmp    c0007f85 <Phys::physicalMemorySetup(unsigned int)+0xdd>
c0008185:	90                   	nop

c0008186 <Pipe::isAtty()>:
c0008186:	31 c0                	xor    eax,eax
c0008188:	c3                   	ret    
c0008189:	90                   	nop

c000818a <Pipe::~Pipe()>:
c000818a:	83 ec 0c             	sub    esp,0xc
c000818d:	ba 6c fc 01 c0       	mov    edx,0xc001fc6c
c0008192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008196:	89 10                	mov    DWORD PTR [eax],edx
c0008198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000819c:	83 ec 0c             	sub    esp,0xc
c000819f:	50                   	push   eax
c00081a0:	e8 5f 11 00 00       	call   c0009304 <UnixFile::~UnixFile()>
c00081a5:	83 c4 10             	add    esp,0x10
c00081a8:	90                   	nop
c00081a9:	83 c4 0c             	add    esp,0xc
c00081ac:	c3                   	ret    
c00081ad:	90                   	nop

c00081ae <Pipe::~Pipe()>:
c00081ae:	83 ec 0c             	sub    esp,0xc
c00081b1:	83 ec 0c             	sub    esp,0xc
c00081b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081b8:	e8 cd ff ff ff       	call   c000818a <Pipe::~Pipe()>
c00081bd:	83 c4 10             	add    esp,0x10
c00081c0:	83 ec 08             	sub    esp,0x8
c00081c3:	6a 20                	push   0x20
c00081c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081c9:	e8 d5 25 00 00       	call   c000a7a3 <operator delete(void*, unsigned long)>
c00081ce:	83 c4 10             	add    esp,0x10
c00081d1:	83 c4 0c             	add    esp,0xc
c00081d4:	c3                   	ret    
c00081d5:	90                   	nop

c00081d6 <Pipe::write(unsigned long long, void*, int*)>:
c00081d6:	55                   	push   ebp
c00081d7:	57                   	push   edi
c00081d8:	56                   	push   esi
c00081d9:	53                   	push   ebx
c00081da:	83 ec 1c             	sub    esp,0x1c
c00081dd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00081e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00081e5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00081e9:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00081ec:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00081ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00081f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00081f6:	89 ce                	mov    esi,ecx
c00081f8:	89 cf                	mov    edi,ecx
c00081fa:	c1 ff 1f             	sar    edi,0x1f
c00081fd:	01 c6                	add    esi,eax
c00081ff:	89 d8                	mov    eax,ebx
c0008201:	11 d7                	adc    edi,edx
c0008203:	99                   	cdq    
c0008204:	39 f3                	cmp    ebx,esi
c0008206:	89 d0                	mov    eax,edx
c0008208:	19 f8                	sbb    eax,edi
c000820a:	b8 01 00 00 00       	mov    eax,0x1
c000820f:	72 76                	jb     c0008287 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008211:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0008214:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0008218:	01 c8                	add    eax,ecx
c000821a:	99                   	cdq    
c000821b:	f7 fb                	idiv   ebx
c000821d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008220:	29 d3                	sub    ebx,edx
c0008222:	89 de                	mov    esi,ebx
c0008224:	c1 fb 1f             	sar    ebx,0x1f
c0008227:	39 f0                	cmp    eax,esi
c0008229:	19 df                	sbb    edi,ebx
c000822b:	bb 00 00 00 00       	mov    ebx,0x0
c0008230:	72 04                	jb     c0008236 <Pipe::write(unsigned long long, void*, int*)+0x60>
c0008232:	89 c3                	mov    ebx,eax
c0008234:	29 f3                	sub    ebx,esi
c0008236:	89 c7                	mov    edi,eax
c0008238:	29 df                	sub    edi,ebx
c000823a:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000823e:	74 0f                	je     c000824f <Pipe::write(unsigned long long, void*, int*)+0x79>
c0008240:	03 55 0c             	add    edx,DWORD PTR [ebp+0xc]
c0008243:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008247:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000824b:	89 d7                	mov    edi,edx
c000824d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000824f:	85 db                	test   ebx,ebx
c0008251:	74 0f                	je     c0008262 <Pipe::write(unsigned long long, void*, int*)+0x8c>
c0008253:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0008257:	89 d9                	mov    ecx,ebx
c0008259:	03 74 24 3c          	add    esi,DWORD PTR [esp+0x3c]
c000825d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008260:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008262:	01 45 14             	add    DWORD PTR [ebp+0x14],eax
c0008265:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000826a:	75 10                	jne    c000827c <Pipe::write(unsigned long long, void*, int*)+0xa6>
c000826c:	83 ec 0c             	sub    esp,0xc
c000826f:	68 29 fc 01 c0       	push   0xc001fc29
c0008274:	e8 8e 85 00 00       	call   c0010807 <KePanic(char const*)>
c0008279:	83 c4 10             	add    esp,0x10
c000827c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008280:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008283:	89 10                	mov    DWORD PTR [eax],edx
c0008285:	31 c0                	xor    eax,eax
c0008287:	83 c4 1c             	add    esp,0x1c
c000828a:	5b                   	pop    ebx
c000828b:	5e                   	pop    esi
c000828c:	5f                   	pop    edi
c000828d:	5d                   	pop    ebp
c000828e:	c3                   	ret    
c000828f:	90                   	nop

c0008290 <Pipe::read(unsigned long long, void*, int*)>:
c0008290:	55                   	push   ebp
c0008291:	57                   	push   edi
c0008292:	56                   	push   esi
c0008293:	53                   	push   ebx
c0008294:	83 ec 1c             	sub    esp,0x1c
c0008297:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000829b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000829f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00082a3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00082a6:	89 c8                	mov    eax,ecx
c00082a8:	99                   	cdq    
c00082a9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00082ad:	74 24                	je     c00082d3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c00082af:	39 f9                	cmp    ecx,edi
c00082b1:	89 d1                	mov    ecx,edx
c00082b3:	19 f1                	sbb    ecx,esi
c00082b5:	73 1c                	jae    c00082d3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c00082b7:	fa                   	cli    
c00082b8:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00082be:	e8 0d cd 00 00       	call   c0014fd0 <schedule()>
c00082c3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00082c8:	48                   	dec    eax
c00082c9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00082ce:	75 d3                	jne    c00082a3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00082d0:	fb                   	sti    
c00082d1:	eb d0                	jmp    c00082a3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00082d3:	39 f8                	cmp    eax,edi
c00082d5:	89 d1                	mov    ecx,edx
c00082d7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00082db:	19 f1                	sbb    ecx,esi
c00082dd:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00082e1:	73 08                	jae    c00082eb <Pipe::read(unsigned long long, void*, int*)+0x5b>
c00082e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00082eb:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00082ee:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00082f1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00082f5:	29 f7                	sub    edi,esi
c00082f7:	89 f8                	mov    eax,edi
c00082f9:	99                   	cdq    
c00082fa:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00082fe:	89 d0                	mov    eax,edx
c0008300:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008304:	19 c2                	sbb    edx,eax
c0008306:	89 f8                	mov    eax,edi
c0008308:	89 ea                	mov    edx,ebp
c000830a:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c000830f:	29 c2                	sub    edx,eax
c0008311:	85 c0                	test   eax,eax
c0008313:	74 0b                	je     c0008320 <Pipe::read(unsigned long long, void*, int*)+0x90>
c0008315:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008318:	89 c1                	mov    ecx,eax
c000831a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000831e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008320:	85 d2                	test   edx,edx
c0008322:	74 0d                	je     c0008331 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c0008324:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008328:	89 d1                	mov    ecx,edx
c000832a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000832d:	89 c7                	mov    edi,eax
c000832f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008331:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008334:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008337:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000833a:	99                   	cdq    
c000833b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000833f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008343:	89 f7                	mov    edi,esi
c0008345:	c1 ff 1f             	sar    edi,0x1f
c0008348:	57                   	push   edi
c0008349:	56                   	push   esi
c000834a:	52                   	push   edx
c000834b:	50                   	push   eax
c000834c:	e8 1f 63 01 00       	call   c001e670 <__umoddi3>
c0008351:	83 c4 10             	add    esp,0x10
c0008354:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008359:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000835c:	75 10                	jne    c000836e <Pipe::read(unsigned long long, void*, int*)+0xde>
c000835e:	83 ec 0c             	sub    esp,0xc
c0008361:	68 46 fc 01 c0       	push   0xc001fc46
c0008366:	e8 9c 84 00 00       	call   c0010807 <KePanic(char const*)>
c000836b:	83 c4 10             	add    esp,0x10
c000836e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008372:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008376:	89 10                	mov    DWORD PTR [eax],edx
c0008378:	83 c4 1c             	add    esp,0x1c
c000837b:	31 c0                	xor    eax,eax
c000837d:	5b                   	pop    ebx
c000837e:	5e                   	pop    esi
c000837f:	5f                   	pop    edi
c0008380:	5d                   	pop    ebp
c0008381:	c3                   	ret    

c0008382 <Pipe::Pipe(int)>:
c0008382:	83 ec 0c             	sub    esp,0xc
c0008385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008389:	83 ec 08             	sub    esp,0x8
c000838c:	6a 00                	push   0x0
c000838e:	50                   	push   eax
c000838f:	e8 8a 0d 00 00       	call   c000911e <UnixFile::UnixFile(int)>
c0008394:	83 c4 10             	add    esp,0x10
c0008397:	ba 6c fc 01 c0       	mov    edx,0xc001fc6c
c000839c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083a0:	89 10                	mov    DWORD PTR [eax],edx
c00083a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00083aa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083b1:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00083b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083bc:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00083c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083c7:	83 ec 0c             	sub    esp,0xc
c00083ca:	50                   	push   eax
c00083cb:	e8 5f f6 ff ff       	call   c0007a2f <malloc>
c00083d0:	83 c4 10             	add    esp,0x10
c00083d3:	89 c2                	mov    edx,eax
c00083d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083d9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00083dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083e0:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00083e4:	90                   	nop
c00083e5:	83 c4 0c             	add    esp,0xc
c00083e8:	c3                   	ret    
c00083e9:	90                   	nop

c00083ea <VgaText::isAtty()>:
c00083ea:	b0 01                	mov    al,0x1
c00083ec:	c3                   	ret    
c00083ed:	90                   	nop

c00083ee <VgaText::~VgaText()>:
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	ba b4 fc 01 c0       	mov    edx,0xc001fcb4
c00083f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083fa:	89 10                	mov    DWORD PTR [eax],edx
c00083fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008400:	83 ec 0c             	sub    esp,0xc
c0008403:	50                   	push   eax
c0008404:	e8 fb 0e 00 00       	call   c0009304 <UnixFile::~UnixFile()>
c0008409:	83 c4 10             	add    esp,0x10
c000840c:	90                   	nop
c000840d:	83 c4 0c             	add    esp,0xc
c0008410:	c3                   	ret    
c0008411:	90                   	nop

c0008412 <VgaText::~VgaText()>:
c0008412:	83 ec 0c             	sub    esp,0xc
c0008415:	83 ec 0c             	sub    esp,0xc
c0008418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000841c:	e8 cd ff ff ff       	call   c00083ee <VgaText::~VgaText()>
c0008421:	83 c4 10             	add    esp,0x10
c0008424:	83 ec 08             	sub    esp,0x8
c0008427:	68 84 01 00 00       	push   0x184
c000842c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008430:	e8 6e 23 00 00       	call   c000a7a3 <operator delete(void*, unsigned long)>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	83 c4 0c             	add    esp,0xc
c000843b:	c3                   	ret    

c000843c <VgaText::read(unsigned long long, void*, int*)>:
c000843c:	83 ec 10             	sub    esp,0x10
c000843f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008443:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008447:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000844b:	e8 97 47 00 00       	call   c000cbe7 <readKeyboard(VgaText*, char*, unsigned long)>
c0008450:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008454:	89 02                	mov    DWORD PTR [edx],eax
c0008456:	31 c0                	xor    eax,eax
c0008458:	83 c4 1c             	add    esp,0x1c
c000845b:	c3                   	ret    

c000845c <setTerminalScrollLock(bool)>:
c000845c:	c3                   	ret    

c000845d <doTerminalCycle()>:
c000845d:	c3                   	ret    

c000845e <addToTerminalCycle(VgaText*)>:
c000845e:	c3                   	ret    

c000845f <scrollTerminalScrollLock(int)>:
c000845f:	c3                   	ret    

c0008460 <VgaText::updateTitle()>:
c0008460:	c3                   	ret    
c0008461:	90                   	nop

c0008462 <VgaText::load()>:
c0008462:	c3                   	ret    
c0008463:	90                   	nop

c0008464 <VgaText::updateCursor()>:
c0008464:	83 ec 14             	sub    esp,0x14
c0008467:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000846b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000846e:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008471:	e8 6a f8 00 00       	call   c0017ce0 <HalConsoleCursorUpdate(int, int)>
c0008476:	83 c4 1c             	add    esp,0x1c
c0008479:	c3                   	ret    

c000847a <VgaText::doANSI_SGR(int)>:
c000847a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000847e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008482:	85 d2                	test   edx,edx
c0008484:	75 0b                	jne    c0008491 <VgaText::doANSI_SGR(int)+0x17>
c0008486:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008489:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000848c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000848f:	eb 59                	jmp    c00084ea <VgaText::doANSI_SGR(int)+0x70>
c0008491:	83 fa 07             	cmp    edx,0x7
c0008494:	75 0b                	jne    c00084a1 <VgaText::doANSI_SGR(int)+0x27>
c0008496:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008499:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000849c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000849f:	eb 49                	jmp    c00084ea <VgaText::doANSI_SGR(int)+0x70>
c00084a1:	83 fa 1b             	cmp    edx,0x1b
c00084a4:	74 e0                	je     c0008486 <VgaText::doANSI_SGR(int)+0xc>
c00084a6:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00084a9:	83 f9 07             	cmp    ecx,0x7
c00084ac:	77 09                	ja     c00084b7 <VgaText::doANSI_SGR(int)+0x3d>
c00084ae:	8b 14 8d 00 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde200]
c00084b5:	eb 20                	jmp    c00084d7 <VgaText::doANSI_SGR(int)+0x5d>
c00084b7:	8d 4a d8             	lea    ecx,[edx-0x28]
c00084ba:	83 f9 07             	cmp    ecx,0x7
c00084bd:	77 09                	ja     c00084c8 <VgaText::doANSI_SGR(int)+0x4e>
c00084bf:	8b 14 8d 00 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde200]
c00084c6:	eb 22                	jmp    c00084ea <VgaText::doANSI_SGR(int)+0x70>
c00084c8:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00084cb:	83 f9 07             	cmp    ecx,0x7
c00084ce:	77 0b                	ja     c00084db <VgaText::doANSI_SGR(int)+0x61>
c00084d0:	8b 14 95 b8 1c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde348]
c00084d7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00084da:	c3                   	ret    
c00084db:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00084de:	83 f9 07             	cmp    ecx,0x7
c00084e1:	77 0a                	ja     c00084ed <VgaText::doANSI_SGR(int)+0x73>
c00084e3:	8b 14 95 90 1c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde370]
c00084ea:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00084ed:	c3                   	ret    

c00084ee <VgaText::setDefaultBgColour(VgaColour)>:
c00084ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00084f6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00084f9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00084fc:	c3                   	ret    
c00084fd:	90                   	nop

c00084fe <VgaText::setDefaultFgColour(VgaColour)>:
c00084fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008502:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008506:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008509:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000850c:	c3                   	ret    
c000850d:	90                   	nop

c000850e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000850e:	53                   	push   ebx
c000850f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008513:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008517:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000851b:	51                   	push   ecx
c000851c:	e8 cd ff ff ff       	call   c00084ee <VgaText::setDefaultBgColour(VgaColour)>
c0008521:	58                   	pop    eax
c0008522:	5a                   	pop    edx
c0008523:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008527:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000852b:	5b                   	pop    ebx
c000852c:	eb d0                	jmp    c00084fe <VgaText::setDefaultFgColour(VgaColour)>

c000852e <VgaText::setTitleTextColour(VgaColour)>:
c000852e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008532:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008536:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008539:	c3                   	ret    

c000853a <VgaText::setTitleColour(VgaColour)>:
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008542:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008545:	c3                   	ret    

c0008546 <VgaText::setTitle(char*)>:
c0008546:	c3                   	ret    
c0008547:	90                   	nop

c0008548 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000854c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008551:	83 e0 0f             	and    eax,0xf
c0008554:	c1 e2 04             	shl    edx,0x4
c0008557:	09 d0                	or     eax,edx
c0008559:	c3                   	ret    

c000855a <VgaText::scrollScreen()>:
c000855a:	55                   	push   ebp
c000855b:	57                   	push   edi
c000855c:	56                   	push   esi
c000855d:	be 01 00 00 00       	mov    esi,0x1
c0008562:	53                   	push   ebx
c0008563:	83 ec 0c             	sub    esp,0xc
c0008566:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000856a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000856d:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008573:	31 ff                	xor    edi,edi
c0008575:	01 e9                	add    ecx,ebp
c0008577:	8a 01                	mov    al,BYTE PTR [ecx]
c0008579:	83 fe 18             	cmp    esi,0x18
c000857c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008582:	75 20                	jne    c00085a4 <VgaText::scrollScreen()+0x4a>
c0008584:	f7 c7 01 00 00 00    	test   edi,0x1
c000858a:	74 15                	je     c00085a1 <VgaText::scrollScreen()+0x47>
c000858c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008590:	50                   	push   eax
c0008591:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008595:	50                   	push   eax
c0008596:	e8 ad ff ff ff       	call   c0008548 <VgaText::combineColours(unsigned char, unsigned char)>
c000859b:	5a                   	pop    edx
c000859c:	5a                   	pop    edx
c000859d:	88 01                	mov    BYTE PTR [ecx],al
c000859f:	eb 03                	jmp    c00085a4 <VgaText::scrollScreen()+0x4a>
c00085a1:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00085a4:	47                   	inc    edi
c00085a5:	41                   	inc    ecx
c00085a6:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00085ac:	75 c9                	jne    c0008577 <VgaText::scrollScreen()+0x1d>
c00085ae:	46                   	inc    esi
c00085af:	83 fe 19             	cmp    esi,0x19
c00085b2:	75 b9                	jne    c000856d <VgaText::scrollScreen()+0x13>
c00085b4:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c00085ba:	75 1f                	jne    c00085db <VgaText::scrollScreen()+0x81>
c00085bc:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00085c0:	74 05                	je     c00085c7 <VgaText::scrollScreen()+0x6d>
c00085c2:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00085c5:	eb 14                	jmp    c00085db <VgaText::scrollScreen()+0x81>
c00085c7:	50                   	push   eax
c00085c8:	50                   	push   eax
c00085c9:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00085cd:	50                   	push   eax
c00085ce:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00085d2:	50                   	push   eax
c00085d3:	e8 9c f5 00 00       	call   c0017b74 <HalConsoleScroll(int, int)>
c00085d8:	83 c4 10             	add    esp,0x10
c00085db:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00085df:	83 c4 0c             	add    esp,0xc
c00085e2:	5b                   	pop    ebx
c00085e3:	5e                   	pop    esi
c00085e4:	5f                   	pop    edi
c00085e5:	5d                   	pop    ebp
c00085e6:	e9 79 fe ff ff       	jmp    c0008464 <VgaText::updateCursor()>
c00085eb:	90                   	nop

c00085ec <VgaText::combineCharAndColour(char, unsigned char)>:
c00085ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00085f1:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00085f6:	c1 e0 08             	shl    eax,0x8
c00085f9:	09 d0                	or     eax,edx
c00085fb:	c3                   	ret    

c00085fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00085fc:	55                   	push   ebp
c00085fd:	57                   	push   edi
c00085fe:	56                   	push   esi
c00085ff:	53                   	push   ebx
c0008600:	83 ec 1c             	sub    esp,0x1c
c0008603:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008607:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000860b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000860f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008613:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008617:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000861b:	89 f0                	mov    eax,esi
c000861d:	0f b6 c0             	movzx  eax,al
c0008620:	50                   	push   eax
c0008621:	0f b6 c3             	movzx  eax,bl
c0008624:	50                   	push   eax
c0008625:	e8 1e ff ff ff       	call   c0008548 <VgaText::combineColours(unsigned char, unsigned char)>
c000862a:	5a                   	pop    edx
c000862b:	59                   	pop    ecx
c000862c:	0f b6 c0             	movzx  eax,al
c000862f:	0f be 54 24 34       	movsx  edx,BYTE PTR [esp+0x34]
c0008634:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008638:	50                   	push   eax
c0008639:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000863d:	e8 aa ff ff ff       	call   c00085ec <VgaText::combineCharAndColour(char, unsigned char)>
c0008642:	5a                   	pop    edx
c0008643:	89 c2                	mov    edx,eax
c0008645:	59                   	pop    ecx
c0008646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000864a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000864d:	89 c1                	mov    ecx,eax
c000864f:	6b c5 50             	imul   eax,ebp,0x50
c0008652:	01 f8                	add    eax,edi
c0008654:	0f b7 c0             	movzx  eax,ax
c0008657:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000865b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865f:	39 05 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,eax
c0008665:	75 24                	jne    c000868b <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x8f>
c0008667:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000866b:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c000866f:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c0008673:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c0008677:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c000867b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000867f:	83 c4 1c             	add    esp,0x1c
c0008682:	5b                   	pop    ebx
c0008683:	5e                   	pop    esi
c0008684:	5f                   	pop    edi
c0008685:	5d                   	pop    ebp
c0008686:	e9 f1 f5 00 00       	jmp    c0017c7c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000868b:	83 c4 1c             	add    esp,0x1c
c000868e:	5b                   	pop    ebx
c000868f:	5e                   	pop    esi
c0008690:	5f                   	pop    edi
c0008691:	5d                   	pop    ebp
c0008692:	c3                   	ret    
c0008693:	90                   	nop

c0008694 <VgaText::getCursorX()>:
c0008694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008698:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000869b:	c3                   	ret    

c000869c <VgaText::getCursorY()>:
c000869c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086a0:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00086a3:	c3                   	ret    

c00086a4 <VgaText::setCursor(int, int)>:
c00086a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00086ac:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00086af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00086b3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00086b6:	e9 a9 fd ff ff       	jmp    c0008464 <VgaText::updateCursor()>

c00086bb <setActiveTerminal(VgaText*)>:
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 08             	sub    esp,0x8
c00086bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086c3:	85 db                	test   ebx,ebx
c00086c5:	75 11                	jne    c00086d8 <setActiveTerminal(VgaText*)+0x1d>
c00086c7:	c7 44 24 10 80 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fc80
c00086cf:	83 c4 08             	add    esp,0x8
c00086d2:	5b                   	pop    ebx
c00086d3:	e9 2f 81 00 00       	jmp    c0010807 <KePanic(char const*)>
c00086d8:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c00086dd:	85 c0                	test   eax,eax
c00086df:	74 0c                	je     c00086ed <setActiveTerminal(VgaText*)+0x32>
c00086e1:	83 ec 0c             	sub    esp,0xc
c00086e4:	50                   	push   eax
c00086e5:	e8 7a fd ff ff       	call   c0008464 <VgaText::updateCursor()>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	50                   	push   eax
c00086ee:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00086f1:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c00086f7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00086fa:	53                   	push   ebx
c00086fb:	e8 a4 ff ff ff       	call   c00086a4 <VgaText::setCursor(int, int)>
c0008700:	83 c4 18             	add    esp,0x18
c0008703:	5b                   	pop    ebx
c0008704:	c3                   	ret    
c0008705:	90                   	nop

c0008706 <VgaText::clearScreen()>:
c0008706:	57                   	push   edi
c0008707:	56                   	push   esi
c0008708:	31 f6                	xor    esi,esi
c000870a:	53                   	push   ebx
c000870b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000870f:	52                   	push   edx
c0008710:	6a 00                	push   0x0
c0008712:	6a 00                	push   0x0
c0008714:	53                   	push   ebx
c0008715:	e8 8a ff ff ff       	call   c00086a4 <VgaText::setCursor(int, int)>
c000871a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008721:	83 c4 10             	add    esp,0x10
c0008724:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008727:	7e 20                	jle    c0008749 <VgaText::clearScreen()+0x43>
c0008729:	31 ff                	xor    edi,edi
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	57                   	push   edi
c000872f:	47                   	inc    edi
c0008730:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008733:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008736:	6a 20                	push   0x20
c0008738:	53                   	push   ebx
c0008739:	e8 be fe ff ff       	call   c00085fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000873e:	83 c4 20             	add    esp,0x20
c0008741:	83 ff 50             	cmp    edi,0x50
c0008744:	75 e5                	jne    c000872b <VgaText::clearScreen()+0x25>
c0008746:	46                   	inc    esi
c0008747:	eb db                	jmp    c0008724 <VgaText::clearScreen()+0x1e>
c0008749:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008750:	5b                   	pop    ebx
c0008751:	5e                   	pop    esi
c0008752:	5f                   	pop    edi
c0008753:	c3                   	ret    

c0008754 <VgaText::setCursorX(int)>:
c0008754:	83 ec 10             	sub    esp,0x10
c0008757:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000875b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000875e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008762:	50                   	push   eax
c0008763:	e8 3c ff ff ff       	call   c00086a4 <VgaText::setCursor(int, int)>
c0008768:	83 c4 1c             	add    esp,0x1c
c000876b:	c3                   	ret    

c000876c <VgaText::setCursorY(int)>:
c000876c:	83 ec 10             	sub    esp,0x10
c000876f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008773:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008777:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000877a:	50                   	push   eax
c000877b:	e8 24 ff ff ff       	call   c00086a4 <VgaText::setCursor(int, int)>
c0008780:	83 c4 1c             	add    esp,0x1c
c0008783:	c3                   	ret    

c0008784 <VgaText::incrementCursor(bool)>:
c0008784:	56                   	push   esi
c0008785:	53                   	push   ebx
c0008786:	51                   	push   ecx
c0008787:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000878b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000878f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008792:	40                   	inc    eax
c0008793:	83 f8 50             	cmp    eax,0x50
c0008796:	74 05                	je     c000879d <VgaText::incrementCursor(bool)+0x19>
c0008798:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000879b:	eb 24                	jmp    c00087c1 <VgaText::incrementCursor(bool)+0x3d>
c000879d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00087a0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087a7:	8d 50 01             	lea    edx,[eax+0x1]
c00087aa:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00087ad:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00087b0:	75 0f                	jne    c00087c1 <VgaText::incrementCursor(bool)+0x3d>
c00087b2:	83 ec 0c             	sub    esp,0xc
c00087b5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00087b8:	53                   	push   ebx
c00087b9:	e8 9c fd ff ff       	call   c000855a <VgaText::scrollScreen()>
c00087be:	83 c4 10             	add    esp,0x10
c00087c1:	89 f0                	mov    eax,esi
c00087c3:	84 c0                	test   al,al
c00087c5:	74 0c                	je     c00087d3 <VgaText::incrementCursor(bool)+0x4f>
c00087c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00087cb:	5a                   	pop    edx
c00087cc:	5b                   	pop    ebx
c00087cd:	5e                   	pop    esi
c00087ce:	e9 91 fc ff ff       	jmp    c0008464 <VgaText::updateCursor()>
c00087d3:	58                   	pop    eax
c00087d4:	5b                   	pop    ebx
c00087d5:	5e                   	pop    esi
c00087d6:	c3                   	ret    
c00087d7:	90                   	nop

c00087d8 <VgaText::decrementCursor(bool)>:
c00087d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00087e0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00087e3:	85 c0                	test   eax,eax
c00087e5:	74 04                	je     c00087eb <VgaText::decrementCursor(bool)+0x13>
c00087e7:	48                   	dec    eax
c00087e8:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00087eb:	84 c9                	test   cl,cl
c00087ed:	74 09                	je     c00087f8 <VgaText::decrementCursor(bool)+0x20>
c00087ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00087f3:	e9 6c fc ff ff       	jmp    c0008464 <VgaText::updateCursor()>
c00087f8:	c3                   	ret    
c00087f9:	90                   	nop

c00087fa <VgaText::putchar(char, VgaColour, VgaColour)>:
c00087fa:	53                   	push   ebx
c00087fb:	83 ec 08             	sub    esp,0x8
c00087fe:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0008803:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008807:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000880b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000880f:	83 f8 07             	cmp    eax,0x7
c0008812:	75 21                	jne    c0008835 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0008814:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000881c:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008824:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000882c:	83 c4 08             	add    esp,0x8
c000882f:	5b                   	pop    ebx
c0008830:	e9 ee 2e 00 00       	jmp    c000b723 <Krnl::beep(int, int, bool)>
c0008835:	83 f8 0d             	cmp    eax,0xd
c0008838:	75 09                	jne    c0008843 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c000883a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008841:	eb 2d                	jmp    c0008870 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0008843:	83 f8 0a             	cmp    eax,0xa
c0008846:	75 31                	jne    c0008879 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0008848:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000884b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008852:	8d 50 01             	lea    edx,[eax+0x1]
c0008855:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008858:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000885b:	75 0f                	jne    c000886c <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000885d:	83 ec 0c             	sub    esp,0xc
c0008860:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008863:	53                   	push   ebx
c0008864:	e8 f1 fc ff ff       	call   c000855a <VgaText::scrollScreen()>
c0008869:	83 c4 10             	add    esp,0x10
c000886c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008870:	83 c4 08             	add    esp,0x8
c0008873:	5b                   	pop    ebx
c0008874:	e9 eb fb ff ff       	jmp    c0008464 <VgaText::updateCursor()>
c0008879:	83 f8 08             	cmp    eax,0x8
c000887c:	75 25                	jne    c00088a3 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000887e:	50                   	push   eax
c000887f:	50                   	push   eax
c0008880:	6a 01                	push   0x1
c0008882:	53                   	push   ebx
c0008883:	e8 50 ff ff ff       	call   c00087d8 <VgaText::decrementCursor(bool)>
c0008888:	5a                   	pop    edx
c0008889:	59                   	pop    ecx
c000888a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000888d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008890:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008893:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008896:	6a 20                	push   0x20
c0008898:	53                   	push   ebx
c0008899:	e8 5e fd ff ff       	call   c00085fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000889e:	83 c4 28             	add    esp,0x28
c00088a1:	5b                   	pop    ebx
c00088a2:	c3                   	ret    
c00088a3:	83 ec 08             	sub    esp,0x8
c00088a6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088ac:	51                   	push   ecx
c00088ad:	52                   	push   edx
c00088ae:	50                   	push   eax
c00088af:	53                   	push   ebx
c00088b0:	e8 47 fd ff ff       	call   c00085fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00088b5:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00088b9:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00088c1:	83 c4 28             	add    esp,0x28
c00088c4:	5b                   	pop    ebx
c00088c5:	e9 ba fe ff ff       	jmp    c0008784 <VgaText::incrementCursor(bool)>

c00088ca <VgaText::putchar(char)>:
c00088ca:	57                   	push   edi
c00088cb:	56                   	push   esi
c00088cc:	53                   	push   ebx
c00088cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00088d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088d5:	0f be c2             	movsx  eax,dl
c00088d8:	83 f8 5b             	cmp    eax,0x5b
c00088db:	75 18                	jne    c00088f5 <VgaText::putchar(char)+0x2b>
c00088dd:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00088e1:	74 20                	je     c0008903 <VgaText::putchar(char)+0x39>
c00088e3:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00088e9:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00088f0:	e9 b8 00 00 00       	jmp    c00089ad <VgaText::putchar(char)+0xe3>
c00088f5:	83 f8 1b             	cmp    eax,0x1b
c00088f8:	75 09                	jne    c0008903 <VgaText::putchar(char)+0x39>
c00088fa:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00088fe:	e9 aa 00 00 00       	jmp    c00089ad <VgaText::putchar(char)+0xe3>
c0008903:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0008907:	89 f9                	mov    ecx,edi
c0008909:	84 c9                	test   cl,cl
c000890b:	0f 84 8c 00 00 00    	je     c000899d <VgaText::putchar(char)+0xd3>
c0008911:	8d 4a c0             	lea    ecx,[edx-0x40]
c0008914:	80 f9 3e             	cmp    cl,0x3e
c0008917:	77 70                	ja     c0008989 <VgaText::putchar(char)+0xbf>
c0008919:	83 f8 6d             	cmp    eax,0x6d
c000891c:	75 3f                	jne    c000895d <VgaText::putchar(char)+0x93>
c000891e:	31 f6                	xor    esi,esi
c0008920:	31 d2                	xor    edx,edx
c0008922:	31 c0                	xor    eax,eax
c0008924:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008927:	7e 25                	jle    c000894e <VgaText::putchar(char)+0x84>
c0008929:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000892e:	83 fa 3b             	cmp    edx,0x3b
c0008931:	75 0f                	jne    c0008942 <VgaText::putchar(char)+0x78>
c0008933:	50                   	push   eax
c0008934:	53                   	push   ebx
c0008935:	e8 40 fb ff ff       	call   c000847a <VgaText::doANSI_SGR(int)>
c000893a:	59                   	pop    ecx
c000893b:	31 d2                	xor    edx,edx
c000893d:	58                   	pop    eax
c000893e:	31 c0                	xor    eax,eax
c0008940:	eb 09                	jmp    c000894b <VgaText::putchar(char)+0x81>
c0008942:	6b c0 0a             	imul   eax,eax,0xa
c0008945:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008949:	89 fa                	mov    edx,edi
c000894b:	46                   	inc    esi
c000894c:	eb d6                	jmp    c0008924 <VgaText::putchar(char)+0x5a>
c000894e:	84 d2                	test   dl,dl
c0008950:	74 2f                	je     c0008981 <VgaText::putchar(char)+0xb7>
c0008952:	50                   	push   eax
c0008953:	53                   	push   ebx
c0008954:	e8 21 fb ff ff       	call   c000847a <VgaText::doANSI_SGR(int)>
c0008959:	58                   	pop    eax
c000895a:	5a                   	pop    edx
c000895b:	eb 24                	jmp    c0008981 <VgaText::putchar(char)+0xb7>
c000895d:	83 f8 4a             	cmp    eax,0x4a
c0008960:	75 1f                	jne    c0008981 <VgaText::putchar(char)+0xb7>
c0008962:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008966:	75 19                	jne    c0008981 <VgaText::putchar(char)+0xb7>
c0008968:	83 ec 0c             	sub    esp,0xc
c000896b:	53                   	push   ebx
c000896c:	e8 95 fd ff ff       	call   c0008706 <VgaText::clearScreen()>
c0008971:	83 c4 0c             	add    esp,0xc
c0008974:	6a 00                	push   0x0
c0008976:	6a 00                	push   0x0
c0008978:	53                   	push   ebx
c0008979:	e8 26 fd ff ff       	call   c00086a4 <VgaText::setCursor(int, int)>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008987:	eb 24                	jmp    c00089ad <VgaText::putchar(char)+0xe3>
c0008989:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c000898c:	83 f8 0e             	cmp    eax,0xe
c000898f:	7f 1c                	jg     c00089ad <VgaText::putchar(char)+0xe3>
c0008991:	8d 48 01             	lea    ecx,[eax+0x1]
c0008994:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008997:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c000899b:	eb 10                	jmp    c00089ad <VgaText::putchar(char)+0xe3>
c000899d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089a0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00089a3:	50                   	push   eax
c00089a4:	53                   	push   ebx
c00089a5:	e8 50 fe ff ff       	call   c00087fa <VgaText::putchar(char, VgaColour, VgaColour)>
c00089aa:	83 c4 10             	add    esp,0x10
c00089ad:	5b                   	pop    ebx
c00089ae:	5e                   	pop    esi
c00089af:	5f                   	pop    edi
c00089b0:	c3                   	ret    
c00089b1:	90                   	nop

c00089b2 <VgaText::putx(unsigned int)>:
c00089b2:	57                   	push   edi
c00089b3:	b9 11 00 00 00       	mov    ecx,0x11
c00089b8:	56                   	push   esi
c00089b9:	be 8e fc 01 c0       	mov    esi,0xc001fc8e
c00089be:	53                   	push   ebx
c00089bf:	83 ec 20             	sub    esp,0x20
c00089c2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00089c6:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00089ca:	fc                   	cld    
c00089cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00089cd:	be 08 00 00 00       	mov    esi,0x8
c00089d2:	50                   	push   eax
c00089d3:	50                   	push   eax
c00089d4:	89 d8                	mov    eax,ebx
c00089d6:	c1 e3 04             	shl    ebx,0x4
c00089d9:	c1 e8 1c             	shr    eax,0x1c
c00089dc:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00089e1:	50                   	push   eax
c00089e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00089e6:	e8 df fe ff ff       	call   c00088ca <VgaText::putchar(char)>
c00089eb:	83 c4 10             	add    esp,0x10
c00089ee:	4e                   	dec    esi
c00089ef:	75 e1                	jne    c00089d2 <VgaText::putx(unsigned int)+0x20>
c00089f1:	83 c4 20             	add    esp,0x20
c00089f4:	5b                   	pop    ebx
c00089f5:	5e                   	pop    esi
c00089f6:	5f                   	pop    edi
c00089f7:	c3                   	ret    

c00089f8 <VgaText::puts(char const*)>:
c00089f8:	53                   	push   ebx
c00089f9:	83 ec 08             	sub    esp,0x8
c00089fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a00:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008a03:	85 c0                	test   eax,eax
c0008a05:	74 12                	je     c0008a19 <VgaText::puts(char const*)+0x21>
c0008a07:	51                   	push   ecx
c0008a08:	43                   	inc    ebx
c0008a09:	51                   	push   ecx
c0008a0a:	50                   	push   eax
c0008a0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a0f:	e8 b6 fe ff ff       	call   c00088ca <VgaText::putchar(char)>
c0008a14:	83 c4 10             	add    esp,0x10
c0008a17:	eb e7                	jmp    c0008a00 <VgaText::puts(char const*)+0x8>
c0008a19:	83 c4 08             	add    esp,0x8
c0008a1c:	5b                   	pop    ebx
c0008a1d:	c3                   	ret    

c0008a1e <VgaText::write(unsigned long long, void*, int*)>:
c0008a1e:	55                   	push   ebp
c0008a1f:	57                   	push   edi
c0008a20:	56                   	push   esi
c0008a21:	53                   	push   ebx
c0008a22:	83 ec 0c             	sub    esp,0xc
c0008a25:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008a29:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008a2d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008a31:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008a38:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008a3b:	39 eb                	cmp    ebx,ebp
c0008a3d:	74 13                	je     c0008a52 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008a3f:	50                   	push   eax
c0008a40:	43                   	inc    ebx
c0008a41:	50                   	push   eax
c0008a42:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008a46:	50                   	push   eax
c0008a47:	56                   	push   esi
c0008a48:	e8 7d fe ff ff       	call   c00088ca <VgaText::putchar(char)>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	eb e9                	jmp    c0008a3b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008a52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a56:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008a5d:	89 38                	mov    DWORD PTR [eax],edi
c0008a5f:	83 c4 0c             	add    esp,0xc
c0008a62:	31 c0                	xor    eax,eax
c0008a64:	5b                   	pop    ebx
c0008a65:	5e                   	pop    esi
c0008a66:	5f                   	pop    edi
c0008a67:	5d                   	pop    ebp
c0008a68:	c3                   	ret    
c0008a69:	90                   	nop

c0008a6a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008a6a:	55                   	push   ebp
c0008a6b:	57                   	push   edi
c0008a6c:	56                   	push   esi
c0008a6d:	53                   	push   ebx
c0008a6e:	83 ec 0c             	sub    esp,0xc
c0008a71:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0008a75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008a7a:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0008a81:	50                   	push   eax
c0008a82:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008a87:	50                   	push   eax
c0008a88:	e8 bb fa ff ff       	call   c0008548 <VgaText::combineColours(unsigned char, unsigned char)>
c0008a8d:	5a                   	pop    edx
c0008a8e:	6b 57 18 50          	imul   edx,DWORD PTR [edi+0x18],0x50
c0008a92:	0f b6 f0             	movzx  esi,al
c0008a95:	03 57 14             	add    edx,DWORD PTR [edi+0x14]
c0008a98:	59                   	pop    ecx
c0008a99:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008a9d:	0f b7 d2             	movzx  edx,dx
c0008aa0:	01 d2                	add    edx,edx
c0008aa2:	03 57 0c             	add    edx,DWORD PTR [edi+0xc]
c0008aa5:	89 d5                	mov    ebp,edx
c0008aa7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	0f 84 f6 00 00 00    	je     c0008ba8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13e>
c0008ab2:	83 f8 0d             	cmp    eax,0xd
c0008ab5:	75 0c                	jne    c0008ac3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x59>
c0008ab7:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0008abe:	e9 df 00 00 00       	jmp    c0008ba2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x138>
c0008ac3:	83 f8 0a             	cmp    eax,0xa
c0008ac6:	75 46                	jne    c0008b0e <VgaText::puts(char const*, VgaColour, VgaColour)+0xa4>
c0008ac8:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0008acb:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0008ad2:	8d 50 01             	lea    edx,[eax+0x1]
c0008ad5:	3b 57 10             	cmp    edx,DWORD PTR [edi+0x10]
c0008ad8:	89 57 18             	mov    DWORD PTR [edi+0x18],edx
c0008adb:	75 0f                	jne    c0008aec <VgaText::puts(char const*, VgaColour, VgaColour)+0x82>
c0008add:	83 ec 0c             	sub    esp,0xc
c0008ae0:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0008ae3:	57                   	push   edi
c0008ae4:	e8 71 fa ff ff       	call   c000855a <VgaText::scrollScreen()>
c0008ae9:	83 c4 10             	add    esp,0x10
c0008aec:	83 ec 0c             	sub    esp,0xc
c0008aef:	57                   	push   edi
c0008af0:	e8 6f f9 ff ff       	call   c0008464 <VgaText::updateCursor()>
c0008af5:	83 c4 10             	add    esp,0x10
c0008af8:	6b 57 18 50          	imul   edx,DWORD PTR [edi+0x18],0x50
c0008afc:	03 57 14             	add    edx,DWORD PTR [edi+0x14]
c0008aff:	0f b7 d2             	movzx  edx,dx
c0008b02:	01 d2                	add    edx,edx
c0008b04:	03 57 0c             	add    edx,DWORD PTR [edi+0xc]
c0008b07:	89 d5                	mov    ebp,edx
c0008b09:	e9 94 00 00 00       	jmp    c0008ba2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x138>
c0008b0e:	83 f8 08             	cmp    eax,0x8
c0008b11:	75 36                	jne    c0008b49 <VgaText::puts(char const*, VgaColour, VgaColour)+0xdf>
c0008b13:	51                   	push   ecx
c0008b14:	51                   	push   ecx
c0008b15:	6a 01                	push   0x1
c0008b17:	57                   	push   edi
c0008b18:	e8 bb fc ff ff       	call   c00087d8 <VgaText::decrementCursor(bool)>
c0008b1d:	5d                   	pop    ebp
c0008b1e:	58                   	pop    eax
c0008b1f:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0008b22:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0008b25:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0008b28:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0008b2b:	6a 20                	push   0x20
c0008b2d:	57                   	push   edi
c0008b2e:	e8 c9 fa ff ff       	call   c00085fc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008b33:	83 c4 20             	add    esp,0x20
c0008b36:	6b 57 18 50          	imul   edx,DWORD PTR [edi+0x18],0x50
c0008b3a:	03 57 14             	add    edx,DWORD PTR [edi+0x14]
c0008b3d:	0f b7 d2             	movzx  edx,dx
c0008b40:	01 d2                	add    edx,edx
c0008b42:	03 57 0c             	add    edx,DWORD PTR [edi+0xc]
c0008b45:	89 d5                	mov    ebp,edx
c0008b47:	eb 59                	jmp    c0008ba2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x138>
c0008b49:	52                   	push   edx
c0008b4a:	52                   	push   edx
c0008b4b:	56                   	push   esi
c0008b4c:	50                   	push   eax
c0008b4d:	e8 9a fa ff ff       	call   c00085ec <VgaText::combineCharAndColour(char, unsigned char)>
c0008b52:	83 c4 10             	add    esp,0x10
c0008b55:	66 89 45 00          	mov    WORD PTR [ebp+0x0],ax
c0008b59:	39 3d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,edi
c0008b5f:	75 1d                	jne    c0008b7e <VgaText::puts(char const*, VgaColour, VgaColour)+0x114>
c0008b61:	83 ec 0c             	sub    esp,0xc
c0008b64:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0008b67:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0008b6a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008b6e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008b72:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008b75:	50                   	push   eax
c0008b76:	e8 01 f1 00 00       	call   c0017c7c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008b7b:	83 c4 20             	add    esp,0x20
c0008b7e:	50                   	push   eax
c0008b7f:	83 c5 02             	add    ebp,0x2
c0008b82:	50                   	push   eax
c0008b83:	6a 00                	push   0x0
c0008b85:	57                   	push   edi
c0008b86:	e8 f9 fb ff ff       	call   c0008784 <VgaText::incrementCursor(bool)>
c0008b8b:	83 c4 10             	add    esp,0x10
c0008b8e:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0008b92:	75 0e                	jne    c0008ba2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x138>
c0008b94:	6b 57 18 50          	imul   edx,DWORD PTR [edi+0x18],0x50
c0008b98:	0f b7 d2             	movzx  edx,dx
c0008b9b:	01 d2                	add    edx,edx
c0008b9d:	03 57 0c             	add    edx,DWORD PTR [edi+0xc]
c0008ba0:	89 d5                	mov    ebp,edx
c0008ba2:	43                   	inc    ebx
c0008ba3:	e9 ff fe ff ff       	jmp    c0008aa7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3d>
c0008ba8:	83 ec 0c             	sub    esp,0xc
c0008bab:	57                   	push   edi
c0008bac:	e8 b3 f8 ff ff       	call   c0008464 <VgaText::updateCursor()>
c0008bb1:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0008bb8:	83 c4 1c             	add    esp,0x1c
c0008bbb:	5b                   	pop    ebx
c0008bbc:	5e                   	pop    esi
c0008bbd:	5f                   	pop    edi
c0008bbe:	5d                   	pop    ebp
c0008bbf:	c3                   	ret    

c0008bc0 <VgaText::VgaText(char const*)>:
c0008bc0:	56                   	push   esi
c0008bc1:	53                   	push   ebx
c0008bc2:	83 ec 04             	sub    esp,0x4
c0008bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc9:	83 ec 08             	sub    esp,0x8
c0008bcc:	6a 00                	push   0x0
c0008bce:	50                   	push   eax
c0008bcf:	e8 4a 05 00 00       	call   c000911e <UnixFile::UnixFile(int)>
c0008bd4:	83 c4 10             	add    esp,0x10
c0008bd7:	ba b4 fc 01 c0       	mov    edx,0xc001fcb4
c0008bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be0:	89 10                	mov    DWORD PTR [eax],edx
c0008be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfc:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c04:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c0c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c17:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c22:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c2d:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c38:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008c3f:	83 ec 0c             	sub    esp,0xc
c0008c42:	6a 01                	push   0x1
c0008c44:	e8 24 09 00 00       	call   c000956d <Virt::allocateKernelVirtualPages(int)>
c0008c49:	83 c4 10             	add    esp,0x10
c0008c4c:	89 c2                	mov    edx,eax
c0008c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c52:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008c55:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008c62:	89 c6                	mov    esi,eax
c0008c64:	e8 d1 f0 ff ff       	call   c0007d3a <Phys::allocatePage()>
c0008c69:	68 05 0c 00 00       	push   0xc05
c0008c6e:	56                   	push   esi
c0008c6f:	50                   	push   eax
c0008c70:	53                   	push   ebx
c0008c71:	e8 de 0f 00 00       	call   c0009c54 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008c76:	83 c4 10             	add    esp,0x10
c0008c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008c80:	83 ec 04             	sub    esp,0x4
c0008c83:	68 a0 0f 00 00       	push   0xfa0
c0008c88:	6a 00                	push   0x0
c0008c8a:	50                   	push   eax
c0008c8b:	e8 60 78 ff ff       	call   c00004f0 <memset>
c0008c90:	83 c4 10             	add    esp,0x10
c0008c93:	83 ec 04             	sub    esp,0x4
c0008c96:	6a 00                	push   0x0
c0008c98:	6a 07                	push   0x7
c0008c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c9e:	e8 6b f8 ff ff       	call   c000850e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008ca3:	83 c4 10             	add    esp,0x10
c0008ca6:	83 ec 04             	sub    esp,0x4
c0008ca9:	6a 00                	push   0x0
c0008cab:	6a 00                	push   0x0
c0008cad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008cb1:	e8 ee f9 ff ff       	call   c00086a4 <VgaText::setCursor(int, int)>
c0008cb6:	83 c4 10             	add    esp,0x10
c0008cb9:	83 ec 0c             	sub    esp,0xc
c0008cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008cc0:	e8 41 fa ff ff       	call   c0008706 <VgaText::clearScreen()>
c0008cc5:	83 c4 10             	add    esp,0x10
c0008cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccc:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd4:	05 82 00 00 00       	add    eax,0x82
c0008cd9:	83 ec 04             	sub    esp,0x4
c0008cdc:	68 80 00 00 00       	push   0x80
c0008ce1:	6a 00                	push   0x0
c0008ce3:	50                   	push   eax
c0008ce4:	e8 07 78 ff ff       	call   c00004f0 <memset>
c0008ce9:	83 c4 10             	add    esp,0x10
c0008cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf0:	05 02 01 00 00       	add    eax,0x102
c0008cf5:	83 ec 04             	sub    esp,0x4
c0008cf8:	68 80 00 00 00       	push   0x80
c0008cfd:	6a 00                	push   0x0
c0008cff:	50                   	push   eax
c0008d00:	e8 eb 77 ff ff       	call   c00004f0 <memset>
c0008d05:	83 c4 10             	add    esp,0x10
c0008d08:	90                   	nop
c0008d09:	83 c4 04             	add    esp,0x4
c0008d0c:	5b                   	pop    ebx
c0008d0d:	5e                   	pop    esi
c0008d0e:	c3                   	ret    
c0008d0f:	90                   	nop

c0008d10 <VgaText::receiveKey(unsigned char)>:
c0008d10:	55                   	push   ebp
c0008d11:	57                   	push   edi
c0008d12:	56                   	push   esi
c0008d13:	53                   	push   ebx
c0008d14:	83 ec 2c             	sub    esp,0x2c
c0008d17:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008d1b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008d1f:	89 fd                	mov    ebp,edi
c0008d21:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008d27:	0f 84 48 01 00 00    	je     c0008e75 <VgaText::receiveKey(unsigned char)+0x165>
c0008d2d:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008d33:	83 fd 08             	cmp    ebp,0x8
c0008d36:	75 6a                	jne    c0008da2 <VgaText::receiveKey(unsigned char)+0x92>
c0008d38:	83 ec 0c             	sub    esp,0xc
c0008d3b:	56                   	push   esi
c0008d3c:	e8 df 77 ff ff       	call   c0000520 <strlen>
c0008d41:	83 c4 10             	add    esp,0x10
c0008d44:	85 c0                	test   eax,eax
c0008d46:	0f 84 ef 00 00 00    	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x12b>
c0008d4c:	50                   	push   eax
c0008d4d:	50                   	push   eax
c0008d4e:	6a 08                	push   0x8
c0008d50:	53                   	push   ebx
c0008d51:	e8 74 fb ff ff       	call   c00088ca <VgaText::putchar(char)>
c0008d56:	89 34 24             	mov    DWORD PTR [esp],esi
c0008d59:	e8 c2 77 ff ff       	call   c0000520 <strlen>
c0008d5e:	83 c4 10             	add    esp,0x10
c0008d61:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008d69:	83 fa 1f             	cmp    edx,0x1f
c0008d6c:	89 d0                	mov    eax,edx
c0008d6e:	7f 1c                	jg     c0008d8c <VgaText::receiveKey(unsigned char)+0x7c>
c0008d70:	83 e8 08             	sub    eax,0x8
c0008d73:	3c 02                	cmp    al,0x2
c0008d75:	76 15                	jbe    c0008d8c <VgaText::receiveKey(unsigned char)+0x7c>
c0008d77:	83 fa 0d             	cmp    edx,0xd
c0008d7a:	74 10                	je     c0008d8c <VgaText::receiveKey(unsigned char)+0x7c>
c0008d7c:	57                   	push   edi
c0008d7d:	57                   	push   edi
c0008d7e:	68 9f fc 01 c0       	push   0xc001fc9f
c0008d83:	53                   	push   ebx
c0008d84:	e8 6f fc ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c0008d89:	83 c4 10             	add    esp,0x10
c0008d8c:	83 ec 0c             	sub    esp,0xc
c0008d8f:	56                   	push   esi
c0008d90:	e8 8b 77 ff ff       	call   c0000520 <strlen>
c0008d95:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008d9d:	e9 96 00 00 00       	jmp    c0008e38 <VgaText::receiveKey(unsigned char)+0x128>
c0008da2:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008da8:	83 ec 0c             	sub    esp,0xc
c0008dab:	50                   	push   eax
c0008dac:	e8 6f 77 ff ff       	call   c0000520 <strlen>
c0008db1:	89 34 24             	mov    DWORD PTR [esp],esi
c0008db4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db8:	e8 63 77 ff ff       	call   c0000520 <strlen>
c0008dbd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008dc1:	83 c4 10             	add    esp,0x10
c0008dc4:	8d 44 01 03          	lea    eax,[ecx+eax*1+0x3]
c0008dc8:	3d 80 00 00 00       	cmp    eax,0x80
c0008dcd:	0f 87 a2 00 00 00    	ja     c0008e75 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd3:	8d 47 ff             	lea    eax,[edi-0x1]
c0008dd6:	3c 1e                	cmp    al,0x1e
c0008dd8:	77 35                	ja     c0008e0f <VgaText::receiveKey(unsigned char)+0xff>
c0008dda:	8d 47 f7             	lea    eax,[edi-0x9]
c0008ddd:	3c 01                	cmp    al,0x1
c0008ddf:	76 2e                	jbe    c0008e0f <VgaText::receiveKey(unsigned char)+0xff>
c0008de1:	83 fd 0d             	cmp    ebp,0xd
c0008de4:	74 29                	je     c0008e0f <VgaText::receiveKey(unsigned char)+0xff>
c0008de6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008de9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008dec:	68 a5 fc 01 c0       	push   0xc001fca5
c0008df1:	53                   	push   ebx
c0008df2:	e8 73 fc ff ff       	call   c0008a6a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008df7:	8d 47 40             	lea    eax,[edi+0x40]
c0008dfa:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008dfd:	0f b6 c0             	movzx  eax,al
c0008e00:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e03:	50                   	push   eax
c0008e04:	53                   	push   ebx
c0008e05:	e8 f0 f9 ff ff       	call   c00087fa <VgaText::putchar(char, VgaColour, VgaColour)>
c0008e0a:	83 c4 20             	add    esp,0x20
c0008e0d:	eb 11                	jmp    c0008e20 <VgaText::receiveKey(unsigned char)+0x110>
c0008e0f:	89 f8                	mov    eax,edi
c0008e11:	51                   	push   ecx
c0008e12:	0f be c0             	movsx  eax,al
c0008e15:	51                   	push   ecx
c0008e16:	50                   	push   eax
c0008e17:	53                   	push   ebx
c0008e18:	e8 ad fa ff ff       	call   c00088ca <VgaText::putchar(char)>
c0008e1d:	83 c4 10             	add    esp,0x10
c0008e20:	89 f8                	mov    eax,edi
c0008e22:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008e27:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008e2b:	52                   	push   edx
c0008e2c:	52                   	push   edx
c0008e2d:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008e31:	50                   	push   eax
c0008e32:	56                   	push   esi
c0008e33:	e8 88 79 ff ff       	call   c00007c0 <strcat>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008e42:	75 0f                	jne    c0008e53 <VgaText::receiveKey(unsigned char)+0x143>
c0008e44:	83 fd 1c             	cmp    ebp,0x1c
c0008e47:	77 2c                	ja     c0008e75 <VgaText::receiveKey(unsigned char)+0x165>
c0008e49:	b8 08 04 00 10       	mov    eax,0x10000408
c0008e4e:	0f a3 e8             	bt     eax,ebp
c0008e51:	73 22                	jae    c0008e75 <VgaText::receiveKey(unsigned char)+0x165>
c0008e53:	81 c3 02 01 00 00    	add    ebx,0x102
c0008e59:	50                   	push   eax
c0008e5a:	50                   	push   eax
c0008e5b:	56                   	push   esi
c0008e5c:	53                   	push   ebx
c0008e5d:	e8 5e 79 ff ff       	call   c00007c0 <strcat>
c0008e62:	83 c4 0c             	add    esp,0xc
c0008e65:	68 80 00 00 00       	push   0x80
c0008e6a:	6a 00                	push   0x0
c0008e6c:	56                   	push   esi
c0008e6d:	e8 7e 76 ff ff       	call   c00004f0 <memset>
c0008e72:	83 c4 10             	add    esp,0x10
c0008e75:	83 c4 2c             	add    esp,0x2c
c0008e78:	5b                   	pop    ebx
c0008e79:	5e                   	pop    esi
c0008e7a:	5f                   	pop    edi
c0008e7b:	5d                   	pop    ebp
c0008e7c:	c3                   	ret    
c0008e7d:	90                   	nop

c0008e7e <VgaText::doUpdate()>:
c0008e7e:	c3                   	ret    

c0008e7f <newTerminal(char*)>:
c0008e7f:	53                   	push   ebx
c0008e80:	83 ec 14             	sub    esp,0x14
c0008e83:	68 84 01 00 00       	push   0x184
c0008e88:	e8 a2 eb ff ff       	call   c0007a2f <malloc>
c0008e8d:	89 c3                	mov    ebx,eax
c0008e8f:	58                   	pop    eax
c0008e90:	5a                   	pop    edx
c0008e91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008e95:	53                   	push   ebx
c0008e96:	e8 25 fd ff ff       	call   c0008bc0 <VgaText::VgaText(char const*)>
c0008e9b:	83 c4 18             	add    esp,0x18
c0008e9e:	89 d8                	mov    eax,ebx
c0008ea0:	5b                   	pop    ebx
c0008ea1:	c3                   	ret    
c0008ea2:	66 90                	xchg   ax,ax

c0008ea4 <TSS::TSS()>:
c0008ea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ea8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008eaf:	90                   	nop
c0008eb0:	c3                   	ret    
c0008eb1:	90                   	nop
c0008eb2:	66 90                	xchg   ax,ax

c0008eb4 <TSS::setESP(unsigned long)>:
c0008eb4:	55                   	push   ebp
c0008eb5:	89 e5                	mov    ebp,esp
c0008eb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ebd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008ec0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008ec3:	90                   	nop
c0008ec4:	5d                   	pop    ebp
c0008ec5:	c3                   	ret    
c0008ec6:	66 90                	xchg   ax,ax

c0008ec8 <TSS::flush()>:
c0008ec8:	55                   	push   ebp
c0008ec9:	89 e5                	mov    ebp,esp
c0008ecb:	83 ec 10             	sub    esp,0x10
c0008ece:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ed1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ed3:	83 c8 03             	or     eax,0x3
c0008ed6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008eda:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008ede:	66 89 d0             	mov    ax,dx
c0008ee1:	0f 00 d8             	ltr    ax
c0008ee4:	90                   	nop
c0008ee5:	c9                   	leave  
c0008ee6:	c3                   	ret    
c0008ee7:	90                   	nop

c0008ee8 <TSS::setup(unsigned long, unsigned long)>:
c0008ee8:	55                   	push   ebp
c0008ee9:	89 e5                	mov    ebp,esp
c0008eeb:	83 ec 18             	sub    esp,0x18
c0008eee:	83 ec 0c             	sub    esp,0xc
c0008ef1:	6a 68                	push   0x68
c0008ef3:	e8 37 eb ff ff       	call   c0007a2f <malloc>
c0008ef8:	83 c4 10             	add    esp,0x10
c0008efb:	89 c2                	mov    edx,eax
c0008efd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f00:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f09:	83 ec 04             	sub    esp,0x4
c0008f0c:	6a 68                	push   0x68
c0008f0e:	6a 00                	push   0x0
c0008f10:	50                   	push   eax
c0008f11:	e8 da 75 ff ff       	call   c00004f0 <memset>
c0008f16:	83 c4 10             	add    esp,0x10
c0008f19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f1f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f2b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008f31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f37:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f3a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f43:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008f49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f4f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008f61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f67:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008f6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f73:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008f79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f7f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f8b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008f8e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f97:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f9a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fad:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fb0:	0f 20 d8             	mov    eax,cr3
c0008fb3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008fb9:	89 42 1c             	mov    DWORD PTR [edx+0x1c],eax
c0008fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc2:	83 ec 08             	sub    esp,0x8
c0008fc5:	50                   	push   eax
c0008fc6:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008fc9:	50                   	push   eax
c0008fca:	e8 cf e2 ff ff       	call   c000729e <GDTEntry::setBase(unsigned int)>
c0008fcf:	83 c4 10             	add    esp,0x10
c0008fd2:	83 ec 08             	sub    esp,0x8
c0008fd5:	6a 68                	push   0x68
c0008fd7:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008fda:	50                   	push   eax
c0008fdb:	e8 da e2 ff ff       	call   c00072ba <GDTEntry::setLimit(unsigned int)>
c0008fe0:	83 c4 10             	add    esp,0x10
c0008fe3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008fe7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008fea:	83 e0 0f             	and    eax,0xf
c0008fed:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008ff0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008ff3:	83 c8 40             	or     eax,0x40
c0008ff6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008ff9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0008ffe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009004:	05 78 01 00 00       	add    eax,0x178
c0009009:	83 ec 04             	sub    esp,0x4
c000900c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000900f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0009012:	50                   	push   eax
c0009013:	e8 d6 e2 ff ff       	call   c00072ee <GDT::addEntry(GDTEntry)>
c0009018:	83 c4 10             	add    esp,0x10
c000901b:	89 c2                	mov    edx,eax
c000901d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009020:	89 10                	mov    DWORD PTR [eax],edx
c0009022:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009027:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000902d:	05 78 01 00 00       	add    eax,0x178
c0009032:	83 ec 0c             	sub    esp,0xc
c0009035:	50                   	push   eax
c0009036:	e8 dd e2 ff ff       	call   c0007318 <GDT::flush()>
c000903b:	83 c4 10             	add    esp,0x10
c000903e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009041:	8b 00                	mov    eax,DWORD PTR [eax]
c0009043:	c9                   	leave  
c0009044:	c3                   	ret    
c0009045:	90                   	nop

c0009046 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0009046:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000904a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000904e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009051:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009056:	75 08                	jne    c0009060 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009058:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000905e:	eb 38                	jmp    c0009098 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009060:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009065:	75 17                	jne    c000907e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009067:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000906c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000906f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009075:	8b 10                	mov    edx,DWORD PTR [eax]
c0009077:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000907b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000907e:	89 c1                	mov    ecx,eax
c0009080:	83 e1 fd             	and    ecx,0xfffffffd
c0009083:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009089:	74 cd                	je     c0009058 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000908b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009090:	83 e0 ef             	and    eax,0xffffffef
c0009093:	83 f8 08             	cmp    eax,0x8
c0009096:	76 c0                	jbe    c0009058 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009098:	31 c0                	xor    eax,eax
c000909a:	c3                   	ret    
c000909b:	90                   	nop

c000909c <ReservedFilename::isAtty()>:
c000909c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090a0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00090a3:	31 c0                	xor    eax,eax
c00090a5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00090ab:	74 09                	je     c00090b6 <ReservedFilename::isAtty()+0x1a>
c00090ad:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00090b3:	0f 94 c0             	sete   al
c00090b6:	c3                   	ret    
c00090b7:	90                   	nop

c00090b8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00090b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00090c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090c7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090cc:	75 08                	jne    c00090d6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00090ce:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090d4:	eb 3d                	jmp    c0009113 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00090d6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090db:	75 17                	jne    c00090f4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00090dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090e5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00090f1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00090f4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00090f9:	75 04                	jne    c00090ff <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00090fb:	89 0a                	mov    DWORD PTR [edx],ecx
c00090fd:	eb 14                	jmp    c0009113 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00090ff:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009104:	74 c8                	je     c00090ce <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009106:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000910b:	83 e0 ef             	and    eax,0xffffffef
c000910e:	83 f8 08             	cmp    eax,0x8
c0009111:	76 bb                	jbe    c00090ce <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009113:	31 c0                	xor    eax,eax
c0009115:	c3                   	ret    

c0009116 <UnixFile::getFileDescriptor()>:
c0009116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000911a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000911d:	c3                   	ret    

c000911e <UnixFile::UnixFile(int)>:
c000911e:	53                   	push   ebx
c000911f:	83 ec 28             	sub    esp,0x28
c0009122:	ba 7c fd 01 c0       	mov    edx,0xc001fd7c
c0009127:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000912b:	89 10                	mov    DWORD PTR [eax],edx
c000912d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0009135:	0f 8f 90 01 00 00    	jg     c00092cb <UnixFile::UnixFile(int)+0x1ad>
c000913b:	a1 40 1e 02 c0       	mov    eax,ds:0xc0021e40
c0009140:	8d 50 01             	lea    edx,[eax+0x1]
c0009143:	89 15 40 1e 02 c0    	mov    DWORD PTR ds:0xc0021e40,edx
c0009149:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000914d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009150:	83 ec 08             	sub    esp,0x8
c0009153:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009157:	68 98 4f 02 c0       	push   0xc0024f98
c000915c:	e8 f7 56 01 00       	call   c001e858 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009161:	83 c4 10             	add    esp,0x10
c0009164:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c0009169:	83 f0 01             	xor    eax,0x1
c000916c:	0f b6 c0             	movzx  eax,al
c000916f:	85 c0                	test   eax,eax
c0009171:	0f 84 55 01 00 00    	je     c00092cc <UnixFile::UnixFile(int)+0x1ae>
c0009177:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c000917e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009186:	83 ec 0c             	sub    esp,0xc
c0009189:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000918d:	e8 9d e8 ff ff       	call   c0007a2f <malloc>
c0009192:	83 c4 10             	add    esp,0x10
c0009195:	89 c3                	mov    ebx,eax
c0009197:	83 ec 08             	sub    esp,0x8
c000919a:	68 03 ff ff 0f       	push   0xfffff03
c000919f:	53                   	push   ebx
c00091a0:	e8 2d 01 00 00       	call   c00092d2 <ReservedFilename::ReservedFilename(int)>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c00091ae:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00091b6:	83 ec 0c             	sub    esp,0xc
c00091b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091bd:	e8 6d e8 ff ff       	call   c0007a2f <malloc>
c00091c2:	83 c4 10             	add    esp,0x10
c00091c5:	89 c3                	mov    ebx,eax
c00091c7:	83 ec 08             	sub    esp,0x8
c00091ca:	68 01 ff ff 0f       	push   0xfffff01
c00091cf:	53                   	push   ebx
c00091d0:	e8 fd 00 00 00       	call   c00092d2 <ReservedFilename::ReservedFilename(int)>
c00091d5:	83 c4 10             	add    esp,0x10
c00091d8:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c00091de:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00091e6:	83 ec 0c             	sub    esp,0xc
c00091e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00091ed:	e8 3d e8 ff ff       	call   c0007a2f <malloc>
c00091f2:	83 c4 10             	add    esp,0x10
c00091f5:	89 c3                	mov    ebx,eax
c00091f7:	83 ec 08             	sub    esp,0x8
c00091fa:	68 00 ff ff 0f       	push   0xfffff00
c00091ff:	53                   	push   ebx
c0009200:	e8 cd 00 00 00       	call   c00092d2 <ReservedFilename::ReservedFilename(int)>
c0009205:	83 c4 10             	add    esp,0x10
c0009208:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c000920e:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009216:	83 ec 0c             	sub    esp,0xc
c0009219:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000921d:	e8 0d e8 ff ff       	call   c0007a2f <malloc>
c0009222:	83 c4 10             	add    esp,0x10
c0009225:	89 c3                	mov    ebx,eax
c0009227:	83 ec 08             	sub    esp,0x8
c000922a:	68 02 ff ff 0f       	push   0xfffff02
c000922f:	53                   	push   ebx
c0009230:	e8 9d 00 00 00       	call   c00092d2 <ReservedFilename::ReservedFilename(int)>
c0009235:	83 c4 10             	add    esp,0x10
c0009238:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c000923e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009246:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000924b:	7f 7f                	jg     c00092cc <UnixFile::UnixFile(int)+0x1ae>
c000924d:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009255:	83 ec 0c             	sub    esp,0xc
c0009258:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000925c:	e8 ce e7 ff ff       	call   c0007a2f <malloc>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	89 c3                	mov    ebx,eax
c0009266:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000926a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000926f:	83 ec 08             	sub    esp,0x8
c0009272:	50                   	push   eax
c0009273:	53                   	push   ebx
c0009274:	e8 59 00 00 00       	call   c00092d2 <ReservedFilename::ReservedFilename(int)>
c0009279:	83 c4 10             	add    esp,0x10
c000927c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009280:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c0009287:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000928f:	83 ec 0c             	sub    esp,0xc
c0009292:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009296:	e8 94 e7 ff ff       	call   c0007a2f <malloc>
c000929b:	83 c4 10             	add    esp,0x10
c000929e:	89 c3                	mov    ebx,eax
c00092a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092a4:	05 20 ff ff 0f       	add    eax,0xfffff20
c00092a9:	83 ec 08             	sub    esp,0x8
c00092ac:	50                   	push   eax
c00092ad:	53                   	push   ebx
c00092ae:	e8 1f 00 00 00       	call   c00092d2 <ReservedFilename::ReservedFilename(int)>
c00092b3:	83 c4 10             	add    esp,0x10
c00092b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092ba:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c00092c1:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00092c6:	e9 7b ff ff ff       	jmp    c0009246 <UnixFile::UnixFile(int)+0x128>
c00092cb:	90                   	nop
c00092cc:	83 c4 28             	add    esp,0x28
c00092cf:	5b                   	pop    ebx
c00092d0:	c3                   	ret    
c00092d1:	90                   	nop

c00092d2 <ReservedFilename::ReservedFilename(int)>:
c00092d2:	83 ec 0c             	sub    esp,0xc
c00092d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092d9:	83 ec 08             	sub    esp,0x8
c00092dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092e0:	50                   	push   eax
c00092e1:	e8 38 fe ff ff       	call   c000911e <UnixFile::UnixFile(int)>
c00092e6:	83 c4 10             	add    esp,0x10
c00092e9:	ba 98 fd 01 c0       	mov    edx,0xc001fd98
c00092ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092f2:	89 10                	mov    DWORD PTR [eax],edx
c00092f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00092fc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00092ff:	90                   	nop
c0009300:	83 c4 0c             	add    esp,0xc
c0009303:	c3                   	ret    

c0009304 <UnixFile::~UnixFile()>:
c0009304:	83 ec 1c             	sub    esp,0x1c
c0009307:	ba 7c fd 01 c0       	mov    edx,0xc001fd7c
c000930c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009310:	89 10                	mov    DWORD PTR [eax],edx
c0009312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009316:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009319:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000931e:	7f 76                	jg     c0009396 <UnixFile::~UnixFile()+0x92>
c0009320:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009328:	83 ec 0c             	sub    esp,0xc
c000932b:	68 98 4f 02 c0       	push   0xc0024f98
c0009330:	e8 f7 55 01 00       	call   c001e92c <LinkedList<UnixFile>::getFirstElement()>
c0009335:	83 c4 10             	add    esp,0x10
c0009338:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000933c:	83 ec 0c             	sub    esp,0xc
c000933f:	68 98 4f 02 c0       	push   0xc0024f98
c0009344:	e8 eb 55 01 00       	call   c001e934 <LinkedList<UnixFile>::removeFirst()>
c0009349:	83 c4 10             	add    esp,0x10
c000934c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009350:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009354:	74 43                	je     c0009399 <UnixFile::~UnixFile()+0x95>
c0009356:	83 ec 08             	sub    esp,0x8
c0009359:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000935d:	68 98 4f 02 c0       	push   0xc0024f98
c0009362:	e8 f1 54 01 00       	call   c001e858 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009367:	83 c4 10             	add    esp,0x10
c000936a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000936e:	8d 50 01             	lea    edx,[eax+0x1]
c0009371:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009375:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000937a:	0f 94 c0             	sete   al
c000937d:	0f b6 c0             	movzx  eax,al
c0009380:	85 c0                	test   eax,eax
c0009382:	74 a4                	je     c0009328 <UnixFile::~UnixFile()+0x24>
c0009384:	83 ec 0c             	sub    esp,0xc
c0009387:	68 54 fd 01 c0       	push   0xc001fd54
c000938c:	e8 76 74 00 00       	call   c0010807 <KePanic(char const*)>
c0009391:	83 c4 10             	add    esp,0x10
c0009394:	eb 92                	jmp    c0009328 <UnixFile::~UnixFile()+0x24>
c0009396:	90                   	nop
c0009397:	eb 01                	jmp    c000939a <UnixFile::~UnixFile()+0x96>
c0009399:	90                   	nop
c000939a:	90                   	nop
c000939b:	83 c4 1c             	add    esp,0x1c
c000939e:	c3                   	ret    
c000939f:	90                   	nop

c00093a0 <UnixFile::~UnixFile()>:
c00093a0:	83 ec 0c             	sub    esp,0xc
c00093a3:	83 ec 0c             	sub    esp,0xc
c00093a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093aa:	e8 55 ff ff ff       	call   c0009304 <UnixFile::~UnixFile()>
c00093af:	83 c4 10             	add    esp,0x10
c00093b2:	83 ec 08             	sub    esp,0x8
c00093b5:	6a 0c                	push   0xc
c00093b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093bb:	e8 e3 13 00 00       	call   c000a7a3 <operator delete(void*, unsigned long)>
c00093c0:	83 c4 10             	add    esp,0x10
c00093c3:	83 c4 0c             	add    esp,0xc
c00093c6:	c3                   	ret    
c00093c7:	90                   	nop

c00093c8 <ReservedFilename::~ReservedFilename()>:
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	ba 98 fd 01 c0       	mov    edx,0xc001fd98
c00093d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093d4:	89 10                	mov    DWORD PTR [eax],edx
c00093d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093da:	83 ec 0c             	sub    esp,0xc
c00093dd:	50                   	push   eax
c00093de:	e8 21 ff ff ff       	call   c0009304 <UnixFile::~UnixFile()>
c00093e3:	83 c4 10             	add    esp,0x10
c00093e6:	90                   	nop
c00093e7:	83 c4 0c             	add    esp,0xc
c00093ea:	c3                   	ret    
c00093eb:	90                   	nop

c00093ec <ReservedFilename::~ReservedFilename()>:
c00093ec:	83 ec 0c             	sub    esp,0xc
c00093ef:	83 ec 0c             	sub    esp,0xc
c00093f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093f6:	e8 cd ff ff ff       	call   c00093c8 <ReservedFilename::~ReservedFilename()>
c00093fb:	83 c4 10             	add    esp,0x10
c00093fe:	83 ec 08             	sub    esp,0x8
c0009401:	6a 0c                	push   0xc
c0009403:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009407:	e8 97 13 00 00       	call   c000a7a3 <operator delete(void*, unsigned long)>
c000940c:	83 c4 10             	add    esp,0x10
c000940f:	83 c4 0c             	add    esp,0xc
c0009412:	c3                   	ret    

c0009413 <getFromFileDescriptor(int)>:
c0009413:	53                   	push   ebx
c0009414:	83 ec 08             	sub    esp,0x8
c0009417:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000941b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009421:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009427:	7f 2c                	jg     c0009455 <getFromFileDescriptor(int)+0x42>
c0009429:	83 ec 0c             	sub    esp,0xc
c000942c:	68 98 4f 02 c0       	push   0xc0024f98
c0009431:	e8 f6 54 01 00       	call   c001e92c <LinkedList<UnixFile>::getFirstElement()>
c0009436:	83 c4 10             	add    esp,0x10
c0009439:	85 c0                	test   eax,eax
c000943b:	75 04                	jne    c0009441 <getFromFileDescriptor(int)+0x2e>
c000943d:	31 c0                	xor    eax,eax
c000943f:	eb 6e                	jmp    c00094af <getFromFileDescriptor(int)+0x9c>
c0009441:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009444:	74 69                	je     c00094af <getFromFileDescriptor(int)+0x9c>
c0009446:	52                   	push   edx
c0009447:	52                   	push   edx
c0009448:	50                   	push   eax
c0009449:	68 98 4f 02 c0       	push   0xc0024f98
c000944e:	e8 83 55 01 00       	call   c001e9d6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009453:	eb e1                	jmp    c0009436 <getFromFileDescriptor(int)+0x23>
c0009455:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000945b:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c0009460:	74 4d                	je     c00094af <getFromFileDescriptor(int)+0x9c>
c0009462:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009468:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c000946d:	74 40                	je     c00094af <getFromFileDescriptor(int)+0x9c>
c000946f:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009475:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c000947a:	74 33                	je     c00094af <getFromFileDescriptor(int)+0x9c>
c000947c:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009482:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c0009487:	74 26                	je     c00094af <getFromFileDescriptor(int)+0x9c>
c0009489:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000948f:	83 f8 08             	cmp    eax,0x8
c0009492:	77 09                	ja     c000949d <getFromFileDescriptor(int)+0x8a>
c0009494:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c000949b:	eb 12                	jmp    c00094af <getFromFileDescriptor(int)+0x9c>
c000949d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00094a3:	83 fb 08             	cmp    ebx,0x8
c00094a6:	77 95                	ja     c000943d <getFromFileDescriptor(int)+0x2a>
c00094a8:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c00094af:	83 c4 08             	add    esp,0x8
c00094b2:	5b                   	pop    ebx
c00094b3:	c3                   	ret    

c00094b4 <__static_initialization_and_destruction_0(int, int)>:
c00094b4:	83 ec 0c             	sub    esp,0xc
c00094b7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00094bc:	75 34                	jne    c00094f2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00094be:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00094c6:	75 2a                	jne    c00094f2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00094c8:	83 ec 0c             	sub    esp,0xc
c00094cb:	68 98 4f 02 c0       	push   0xc0024f98
c00094d0:	e8 41 53 01 00       	call   c001e816 <LinkedList<UnixFile>::LinkedList()>
c00094d5:	83 c4 10             	add    esp,0x10
c00094d8:	83 ec 04             	sub    esp,0x4
c00094db:	68 cc 1d 02 c0       	push   0xc0021dcc
c00094e0:	68 98 4f 02 c0       	push   0xc0024f98
c00094e5:	68 14 e8 01 c0       	push   0xc001e814
c00094ea:	e8 64 12 00 00       	call   c000a753 <__cxa_atexit>
c00094ef:	83 c4 10             	add    esp,0x10
c00094f2:	90                   	nop
c00094f3:	83 c4 0c             	add    esp,0xc
c00094f6:	c3                   	ret    

c00094f7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00094f7:	83 ec 0c             	sub    esp,0xc
c00094fa:	83 ec 08             	sub    esp,0x8
c00094fd:	68 ff ff 00 00       	push   0xffff
c0009502:	6a 01                	push   0x1
c0009504:	e8 ab ff ff ff       	call   c00094b4 <__static_initialization_and_destruction_0(int, int)>
c0009509:	83 c4 10             	add    esp,0x10
c000950c:	83 c4 0c             	add    esp,0xc
c000950f:	c3                   	ret    

c0009510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009510:	53                   	push   ebx
c0009511:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009515:	8b 15 48 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e48
c000951b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000951f:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0009525:	89 d8                	mov    eax,ebx
c0009527:	d1 e8                	shr    eax,1
c0009529:	01 d0                	add    eax,edx
c000952b:	80 e3 01             	and    bl,0x1
c000952e:	8a 10                	mov    dl,BYTE PTR [eax]
c0009530:	75 09                	jne    c000953b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0009532:	83 e2 f0             	and    edx,0xfffffff0
c0009535:	09 ca                	or     edx,ecx
c0009537:	88 10                	mov    BYTE PTR [eax],dl
c0009539:	5b                   	pop    ebx
c000953a:	c3                   	ret    
c000953b:	0f b6 c9             	movzx  ecx,cl
c000953e:	83 e2 0f             	and    edx,0xf
c0009541:	c1 e1 04             	shl    ecx,0x4
c0009544:	09 ca                	or     edx,ecx
c0009546:	88 10                	mov    BYTE PTR [eax],dl
c0009548:	5b                   	pop    ebx
c0009549:	c3                   	ret    

c000954a <Virt::getPageState(unsigned long)>:
c000954a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000954e:	8b 0d 48 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e48
c0009554:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000955a:	89 d0                	mov    eax,edx
c000955c:	d1 e8                	shr    eax,1
c000955e:	80 e2 01             	and    dl,0x1
c0009561:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009564:	74 03                	je     c0009569 <Virt::getPageState(unsigned long)+0x1f>
c0009566:	c1 e8 04             	shr    eax,0x4
c0009569:	83 e0 0f             	and    eax,0xf
c000956c:	c3                   	ret    

c000956d <Virt::allocateKernelVirtualPages(int)>:
c000956d:	55                   	push   ebp
c000956e:	31 ed                	xor    ebp,ebp
c0009570:	57                   	push   edi
c0009571:	56                   	push   esi
c0009572:	31 f6                	xor    esi,esi
c0009574:	53                   	push   ebx
c0009575:	31 db                	xor    ebx,ebx
c0009577:	83 ec 0c             	sub    esp,0xc
c000957a:	8b 3d 44 1e 02 c0    	mov    edi,DWORD PTR ds:0xc0021e44
c0009580:	57                   	push   edi
c0009581:	e8 c4 ff ff ff       	call   c000954a <Virt::getPageState(unsigned long)>
c0009586:	5a                   	pop    edx
c0009587:	84 c0                	test   al,al
c0009589:	75 40                	jne    c00095cb <Virt::allocateKernelVirtualPages(int)+0x5e>
c000958b:	85 db                	test   ebx,ebx
c000958d:	0f 44 f7             	cmove  esi,edi
c0009590:	83 c3 01             	add    ebx,0x1
c0009593:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009597:	74 5f                	je     c00095f8 <Virt::allocateKernelVirtualPages(int)+0x8b>
c0009599:	83 c7 01             	add    edi,0x1
c000959c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00095a2:	76 34                	jbe    c00095d8 <Virt::allocateKernelVirtualPages(int)+0x6b>
c00095a4:	f7 c5 01 00 00 00    	test   ebp,0x1
c00095aa:	c7 05 44 1e 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021e44,0xc8000
c00095b4:	75 2a                	jne    c00095e0 <Virt::allocateKernelVirtualPages(int)+0x73>
c00095b6:	bf 00 80 0c 00       	mov    edi,0xc8000
c00095bb:	bd 01 00 00 00       	mov    ebp,0x1
c00095c0:	57                   	push   edi
c00095c1:	e8 84 ff ff ff       	call   c000954a <Virt::getPageState(unsigned long)>
c00095c6:	5a                   	pop    edx
c00095c7:	84 c0                	test   al,al
c00095c9:	74 c0                	je     c000958b <Virt::allocateKernelVirtualPages(int)+0x1e>
c00095cb:	83 c7 01             	add    edi,0x1
c00095ce:	31 db                	xor    ebx,ebx
c00095d0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00095d6:	77 cc                	ja     c00095a4 <Virt::allocateKernelVirtualPages(int)+0x37>
c00095d8:	89 3d 44 1e 02 c0    	mov    DWORD PTR ds:0xc0021e44,edi
c00095de:	eb a0                	jmp    c0009580 <Virt::allocateKernelVirtualPages(int)+0x13>
c00095e0:	83 ec 0c             	sub    esp,0xc
c00095e3:	68 ac fd 01 c0       	push   0xc001fdac
c00095e8:	e8 1a 72 00 00       	call   c0010807 <KePanic(char const*)>
c00095ed:	8b 3d 44 1e 02 c0    	mov    edi,DWORD PTR ds:0xc0021e44
c00095f3:	83 c4 10             	add    esp,0x10
c00095f6:	eb 88                	jmp    c0009580 <Virt::allocateKernelVirtualPages(int)+0x13>
c00095f8:	83 fb 01             	cmp    ebx,0x1
c00095fb:	89 35 44 1e 02 c0    	mov    DWORD PTR ds:0xc0021e44,esi
c0009601:	74 6f                	je     c0009672 <Virt::allocateKernelVirtualPages(int)+0x105>
c0009603:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009607:	85 c9                	test   ecx,ecx
c0009609:	74 49                	je     c0009654 <Virt::allocateKernelVirtualPages(int)+0xe7>
c000960b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000960f:	89 f0                	mov    eax,esi
c0009611:	31 db                	xor    ebx,ebx
c0009613:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0009616:	eb 18                	jmp    c0009630 <Virt::allocateKernelVirtualPages(int)+0xc3>
c0009618:	6a 01                	push   0x1
c000961a:	83 c3 01             	add    ebx,0x1
c000961d:	50                   	push   eax
c000961e:	e8 ed fe ff ff       	call   c0009510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009623:	58                   	pop    eax
c0009624:	5a                   	pop    edx
c0009625:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009629:	74 29                	je     c0009654 <Virt::allocateKernelVirtualPages(int)+0xe7>
c000962b:	a1 44 1e 02 c0       	mov    eax,ds:0xc0021e44
c0009630:	8d 50 01             	lea    edx,[eax+0x1]
c0009633:	85 db                	test   ebx,ebx
c0009635:	89 15 44 1e 02 c0    	mov    DWORD PTR ds:0xc0021e44,edx
c000963b:	74 24                	je     c0009661 <Virt::allocateKernelVirtualPages(int)+0xf4>
c000963d:	39 dd                	cmp    ebp,ebx
c000963f:	75 d7                	jne    c0009618 <Virt::allocateKernelVirtualPages(int)+0xab>
c0009641:	6a 03                	push   0x3
c0009643:	83 c3 01             	add    ebx,0x1
c0009646:	50                   	push   eax
c0009647:	e8 c4 fe ff ff       	call   c0009510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000964c:	59                   	pop    ecx
c000964d:	5f                   	pop    edi
c000964e:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009652:	75 d7                	jne    c000962b <Virt::allocateKernelVirtualPages(int)+0xbe>
c0009654:	83 c4 0c             	add    esp,0xc
c0009657:	89 f0                	mov    eax,esi
c0009659:	5b                   	pop    ebx
c000965a:	c1 e0 0c             	shl    eax,0xc
c000965d:	5e                   	pop    esi
c000965e:	5f                   	pop    edi
c000965f:	5d                   	pop    ebp
c0009660:	c3                   	ret    
c0009661:	6a 02                	push   0x2
c0009663:	bb 01 00 00 00       	mov    ebx,0x1
c0009668:	50                   	push   eax
c0009669:	e8 a2 fe ff ff       	call   c0009510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000966e:	58                   	pop    eax
c000966f:	5a                   	pop    edx
c0009670:	eb b9                	jmp    c000962b <Virt::allocateKernelVirtualPages(int)+0xbe>
c0009672:	6a 04                	push   0x4
c0009674:	8d 46 01             	lea    eax,[esi+0x1]
c0009677:	56                   	push   esi
c0009678:	a3 44 1e 02 c0       	mov    ds:0xc0021e44,eax
c000967d:	e8 8e fe ff ff       	call   c0009510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009682:	5b                   	pop    ebx
c0009683:	89 f0                	mov    eax,esi
c0009685:	5f                   	pop    edi
c0009686:	c1 e0 0c             	shl    eax,0xc
c0009689:	83 c4 0c             	add    esp,0xc
c000968c:	5b                   	pop    ebx
c000968d:	5e                   	pop    esi
c000968e:	5f                   	pop    edi
c000968f:	5d                   	pop    ebp
c0009690:	c3                   	ret    

c0009691 <Virt::freeSwapfilePage(unsigned long)>:
c0009691:	53                   	push   ebx
c0009692:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009696:	b8 01 00 00 00       	mov    eax,0x1
c000969b:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c00096a1:	89 cb                	mov    ebx,ecx
c00096a3:	d3 e0                	shl    eax,cl
c00096a5:	c1 eb 05             	shr    ebx,0x5
c00096a8:	f7 d0                	not    eax
c00096aa:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00096ad:	21 c1                	and    ecx,eax
c00096af:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00096b2:	5b                   	pop    ebx
c00096b3:	c3                   	ret    

c00096b4 <Virt::swapIDToSector(unsigned long)>:
c00096b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096b8:	8b 15 4c 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e4c
c00096be:	8b 0d 54 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e54
c00096c4:	0f af c2             	imul   eax,edx
c00096c7:	01 c8                	add    eax,ecx
c00096c9:	c3                   	ret    

c00096ca <Virt::allocateSwapfilePage()>:
c00096ca:	55                   	push   ebp
c00096cb:	31 d2                	xor    edx,edx
c00096cd:	57                   	push   edi
c00096ce:	56                   	push   esi
c00096cf:	53                   	push   ebx
c00096d0:	83 ec 0c             	sub    esp,0xc
c00096d3:	8b 1d 50 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021e50
c00096d9:	8b 0d 4c 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e4c
c00096df:	89 d8                	mov    eax,ebx
c00096e1:	f7 f1                	div    ecx
c00096e3:	39 cb                	cmp    ebx,ecx
c00096e5:	72 2f                	jb     c0009716 <Virt::allocateSwapfilePage()+0x4c>
c00096e7:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c00096ed:	8b 16                	mov    edx,DWORD PTR [esi]
c00096ef:	f6 c2 01             	test   dl,0x1
c00096f2:	74 3e                	je     c0009732 <Virt::allocateSwapfilePage()+0x68>
c00096f4:	31 c9                	xor    ecx,ecx
c00096f6:	bf 01 00 00 00       	mov    edi,0x1
c00096fb:	eb 12                	jmp    c000970f <Virt::allocateSwapfilePage()+0x45>
c00096fd:	89 ca                	mov    edx,ecx
c00096ff:	89 fd                	mov    ebp,edi
c0009701:	c1 ea 05             	shr    edx,0x5
c0009704:	d3 e5                	shl    ebp,cl
c0009706:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009709:	8b 13                	mov    edx,DWORD PTR [ebx]
c000970b:	85 ea                	test   edx,ebp
c000970d:	74 2c                	je     c000973b <Virt::allocateSwapfilePage()+0x71>
c000970f:	83 c1 01             	add    ecx,0x1
c0009712:	39 c8                	cmp    eax,ecx
c0009714:	77 e7                	ja     c00096fd <Virt::allocateSwapfilePage()+0x33>
c0009716:	83 ec 0c             	sub    esp,0xc
c0009719:	68 13 ff 01 c0       	push   0xc001ff13
c000971e:	e8 e4 70 00 00       	call   c0010807 <KePanic(char const*)>
c0009723:	83 c4 10             	add    esp,0x10
c0009726:	31 c9                	xor    ecx,ecx
c0009728:	83 c4 0c             	add    esp,0xc
c000972b:	89 c8                	mov    eax,ecx
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    
c0009732:	89 f3                	mov    ebx,esi
c0009734:	bd 01 00 00 00       	mov    ebp,0x1
c0009739:	31 c9                	xor    ecx,ecx
c000973b:	09 ea                	or     edx,ebp
c000973d:	89 c8                	mov    eax,ecx
c000973f:	89 13                	mov    DWORD PTR [ebx],edx
c0009741:	83 c4 0c             	add    esp,0xc
c0009744:	5b                   	pop    ebx
c0009745:	5e                   	pop    esi
c0009746:	5f                   	pop    edi
c0009747:	5d                   	pop    ebp
c0009748:	c3                   	ret    

c0009749 <Virt::virtualMemorySetup()>:
c0009749:	53                   	push   ebx
c000974a:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000974f:	6a 0f                	push   0xf
c0009751:	53                   	push   ebx
c0009752:	83 c3 01             	add    ebx,0x1
c0009755:	e8 b6 fd ff ff       	call   c0009510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000975a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009760:	58                   	pop    eax
c0009761:	5a                   	pop    edx
c0009762:	75 eb                	jne    c000974f <Virt::virtualMemorySetup()+0x6>
c0009764:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009769:	6a 00                	push   0x0
c000976b:	53                   	push   ebx
c000976c:	83 c3 01             	add    ebx,0x1
c000976f:	e8 9c fd ff ff       	call   c0009510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009774:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000977a:	59                   	pop    ecx
c000977b:	58                   	pop    eax
c000977c:	75 eb                	jne    c0009769 <Virt::virtualMemorySetup()+0x20>
c000977e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009783:	6a 0f                	push   0xf
c0009785:	53                   	push   ebx
c0009786:	83 c3 01             	add    ebx,0x1
c0009789:	e8 82 fd ff ff       	call   c0009510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000978e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009794:	58                   	pop    eax
c0009795:	5a                   	pop    edx
c0009796:	75 eb                	jne    c0009783 <Virt::virtualMemorySetup()+0x3a>
c0009798:	5b                   	pop    ebx
c0009799:	c3                   	ret    

c000979a <Virt::setupPageSwapping(int)>:
c000979a:	53                   	push   ebx
c000979b:	83 ec 0c             	sub    esp,0xc
c000979e:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c00097a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00097a7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00097ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00097af:	53                   	push   ebx
c00097b0:	c1 e3 0b             	shl    ebx,0xb
c00097b3:	68 2a ff 01 c0       	push   0xc001ff2a
c00097b8:	50                   	push   eax
c00097b9:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00097bc:	89 1d 50 1e 02 c0    	mov    DWORD PTR ds:0xc0021e50,ebx
c00097c2:	c1 eb 08             	shr    ebx,0x8
c00097c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00097c8:	c6 05 58 1e 02 c0 43 	mov    BYTE PTR ds:0xc0021e58,0x43
c00097cf:	a3 54 1e 02 c0       	mov    ds:0xc0021e54,eax
c00097d4:	c7 05 4c 1e 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0021e4c,0x8
c00097de:	e8 4c e2 ff ff       	call   c0007a2f <malloc>
c00097e3:	31 d2                	xor    edx,edx
c00097e5:	83 c4 0c             	add    esp,0xc
c00097e8:	89 c1                	mov    ecx,eax
c00097ea:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c00097ef:	a1 50 1e 02 c0       	mov    eax,ds:0xc0021e50
c00097f4:	f7 35 4c 1e 02 c0    	div    DWORD PTR ds:0xc0021e4c
c00097fa:	c1 e8 05             	shr    eax,0x5
c00097fd:	50                   	push   eax
c00097fe:	6a 00                	push   0x0
c0009800:	51                   	push   ecx
c0009801:	e8 ea 6c ff ff       	call   c00004f0 <memset>
c0009806:	83 c4 18             	add    esp,0x18
c0009809:	5b                   	pop    ebx
c000980a:	c3                   	ret    
c000980b:	90                   	nop

c000980c <VAS::VAS(VAS*)>:
c000980c:	83 ec 0c             	sub    esp,0xc
c000980f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009813:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000981a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000981e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009825:	83 ec 0c             	sub    esp,0xc
c0009828:	68 cc fd 01 c0       	push   0xc001fdcc
c000982d:	e8 d5 6f 00 00       	call   c0010807 <KePanic(char const*)>
c0009832:	83 c4 10             	add    esp,0x10
c0009835:	90                   	nop
c0009836:	83 c4 0c             	add    esp,0xc
c0009839:	c3                   	ret    

c000983a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000983a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000983e:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0009843:	89 c2                	mov    edx,eax
c0009845:	c1 e8 0a             	shr    eax,0xa
c0009848:	c1 ea 16             	shr    edx,0x16
c000984b:	83 f9 01             	cmp    ecx,0x1
c000984e:	19 c9                	sbb    ecx,ecx
c0009850:	c1 e2 0c             	shl    edx,0xc
c0009853:	25 fc 0f 00 00       	and    eax,0xffc
c0009858:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000985e:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009865:	01 d0                	add    eax,edx
c0009867:	c3                   	ret    

c0009868 <VAS::getPageTableEntry(unsigned long)>:
c0009868:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000986c:	89 ca                	mov    edx,ecx
c000986e:	c1 e9 0a             	shr    ecx,0xa
c0009871:	c1 ea 16             	shr    edx,0x16
c0009874:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000987a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009880:	c1 e0 0c             	shl    eax,0xc
c0009883:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009886:	c3                   	ret    

c0009887 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009887:	55                   	push   ebp
c0009888:	57                   	push   edi
c0009889:	bf 01 00 00 00       	mov    edi,0x1
c000988e:	56                   	push   esi
c000988f:	53                   	push   ebx
c0009890:	83 ec 0c             	sub    esp,0xc
c0009893:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009897:	c1 ee 0c             	shr    esi,0xc
c000989a:	eb 3a                	jmp    c00098d6 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000989c:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c00098a1:	83 ec 08             	sub    esp,0x8
c00098a4:	55                   	push   ebp
c00098a5:	50                   	push   eax
c00098a6:	e8 bd ff ff ff       	call   c0009868 <VAS::getPageTableEntry(unsigned long)>
c00098ab:	83 c4 10             	add    esp,0x10
c00098ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00098b0:	f6 c4 04             	test   ah,0x4
c00098b3:	75 5a                	jne    c000990f <Virt::freeKernelVirtualPages(unsigned long)+0x88>
c00098b5:	83 fb 04             	cmp    ebx,0x4
c00098b8:	74 6b                	je     c0009925 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00098ba:	83 fb 02             	cmp    ebx,0x2
c00098bd:	74 7f                	je     c000993e <Virt::freeKernelVirtualPages(unsigned long)+0xb7>
c00098bf:	83 fb 03             	cmp    ebx,0x3
c00098c2:	0f 84 a3 00 00 00    	je     c000996b <Virt::freeKernelVirtualPages(unsigned long)+0xe4>
c00098c8:	83 fb 01             	cmp    ebx,0x1
c00098cb:	0f 84 87 00 00 00    	je     c0009958 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c00098d1:	83 c6 01             	add    esi,0x1
c00098d4:	31 ff                	xor    edi,edi
c00098d6:	56                   	push   esi
c00098d7:	89 f5                	mov    ebp,esi
c00098d9:	e8 6c fc ff ff       	call   c000954a <Virt::getPageState(unsigned long)>
c00098de:	c1 e5 0c             	shl    ebp,0xc
c00098e1:	5a                   	pop    edx
c00098e2:	0f b6 d8             	movzx  ebx,al
c00098e5:	85 db                	test   ebx,ebx
c00098e7:	75 b3                	jne    c000989c <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00098e9:	83 ec 0c             	sub    esp,0xc
c00098ec:	68 41 ff 01 c0       	push   0xc001ff41
c00098f1:	e8 11 6f 00 00       	call   c0010807 <KePanic(char const*)>
c00098f6:	5a                   	pop    edx
c00098f7:	59                   	pop    ecx
c00098f8:	55                   	push   ebp
c00098f9:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c00098ff:	55                   	push   ebp
c0009900:	e8 63 ff ff ff       	call   c0009868 <VAS::getPageTableEntry(unsigned long)>
c0009905:	83 c4 10             	add    esp,0x10
c0009908:	8b 00                	mov    eax,DWORD PTR [eax]
c000990a:	f6 c4 04             	test   ah,0x4
c000990d:	74 c2                	je     c00098d1 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c000990f:	83 ec 0c             	sub    esp,0xc
c0009912:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009917:	50                   	push   eax
c0009918:	e8 b4 e3 ff ff       	call   c0007cd1 <Phys::freePage(unsigned long)>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	83 fb 04             	cmp    ebx,0x4
c0009923:	75 95                	jne    c00098ba <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c0009925:	83 e7 01             	and    edi,0x1
c0009928:	75 46                	jne    c0009970 <Virt::freeKernelVirtualPages(unsigned long)+0xe9>
c000992a:	c7 44 24 20 f0 fd 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fdf0
c0009932:	83 c4 0c             	add    esp,0xc
c0009935:	5b                   	pop    ebx
c0009936:	5e                   	pop    esi
c0009937:	5f                   	pop    edi
c0009938:	5d                   	pop    ebp
c0009939:	e9 c9 6e 00 00       	jmp    c0010807 <KePanic(char const*)>
c000993e:	83 e7 01             	and    edi,0x1
c0009941:	75 15                	jne    c0009958 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c0009943:	83 ec 0c             	sub    esp,0xc
c0009946:	68 5d ff 01 c0       	push   0xc001ff5d
c000994b:	e8 b7 6e 00 00       	call   c0010807 <KePanic(char const*)>
c0009950:	83 c4 10             	add    esp,0x10
c0009953:	e9 79 ff ff ff       	jmp    c00098d1 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c0009958:	83 ec 08             	sub    esp,0x8
c000995b:	6a 00                	push   0x0
c000995d:	56                   	push   esi
c000995e:	e8 ad fb ff ff       	call   c0009510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009963:	83 c4 10             	add    esp,0x10
c0009966:	e9 66 ff ff ff       	jmp    c00098d1 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c000996b:	83 e7 01             	and    edi,0x1
c000996e:	75 16                	jne    c0009986 <Virt::freeKernelVirtualPages(unsigned long)+0xff>
c0009970:	83 ec 08             	sub    esp,0x8
c0009973:	6a 00                	push   0x0
c0009975:	56                   	push   esi
c0009976:	e8 95 fb ff ff       	call   c0009510 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000997b:	83 c4 10             	add    esp,0x10
c000997e:	83 c4 0c             	add    esp,0xc
c0009981:	5b                   	pop    ebx
c0009982:	5e                   	pop    esi
c0009983:	5f                   	pop    edi
c0009984:	5d                   	pop    ebp
c0009985:	c3                   	ret    
c0009986:	c7 44 24 20 79 ff 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ff79
c000998e:	83 c4 0c             	add    esp,0xc
c0009991:	5b                   	pop    ebx
c0009992:	5e                   	pop    esi
c0009993:	5f                   	pop    edi
c0009994:	5d                   	pop    ebp
c0009995:	e9 6d 6e 00 00       	jmp    c0010807 <KePanic(char const*)>

c000999a <VAS::freeAllocatedPages(unsigned long)>:
c000999a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000999e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099a2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00099a6:	74 09                	je     c00099b1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00099a8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00099ac:	e9 d6 fe ff ff       	jmp    c0009887 <Virt::freeKernelVirtualPages(unsigned long)>
c00099b1:	c7 44 24 04 14 fe 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fe14
c00099b9:	e9 e3 0e 00 00       	jmp    c000a8a1 <Dbg::kprintf(char const*, ...)>

c00099be <VAS::virtualToPhysical(unsigned long)>:
c00099be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099c2:	50                   	push   eax
c00099c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099c7:	52                   	push   edx
c00099c8:	e8 9b fe ff ff       	call   c0009868 <VAS::getPageTableEntry(unsigned long)>
c00099cd:	59                   	pop    ecx
c00099ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00099d0:	5a                   	pop    edx
c00099d1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099d6:	c3                   	ret    
c00099d7:	90                   	nop

c00099d8 <VAS::reflagRange(unsigned long, int, int, int)>:
c00099d8:	55                   	push   ebp
c00099d9:	57                   	push   edi
c00099da:	56                   	push   esi
c00099db:	53                   	push   ebx
c00099dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00099e0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00099e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00099e8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00099ec:	89 c3                	mov    ebx,eax
c00099ee:	c1 e3 0c             	shl    ebx,0xc
c00099f1:	01 f3                	add    ebx,esi
c00099f3:	85 c0                	test   eax,eax
c00099f5:	7e 1f                	jle    c0009a16 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c00099f7:	56                   	push   esi
c00099f8:	81 c6 00 10 00 00    	add    esi,0x1000
c00099fe:	55                   	push   ebp
c00099ff:	e8 64 fe ff ff       	call   c0009868 <VAS::getPageTableEntry(unsigned long)>
c0009a04:	5a                   	pop    edx
c0009a05:	59                   	pop    ecx
c0009a06:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a08:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009a0c:	21 f9                	and    ecx,edi
c0009a0e:	09 d1                	or     ecx,edx
c0009a10:	39 f3                	cmp    ebx,esi
c0009a12:	89 08                	mov    DWORD PTR [eax],ecx
c0009a14:	75 e1                	jne    c00099f7 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c0009a16:	5b                   	pop    ebx
c0009a17:	5e                   	pop    esi
c0009a18:	5f                   	pop    edi
c0009a19:	5d                   	pop    ebp
c0009a1a:	c3                   	ret    
c0009a1b:	90                   	nop

c0009a1c <VAS::VAS()>:
c0009a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a20:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a2b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009a32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a36:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009a3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a3f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009a43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a47:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009a4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009a55:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009a5a:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009a5f:	29 c2                	sub    edx,eax
c0009a61:	89 d0                	mov    eax,edx
c0009a63:	05 ff 0f 00 00       	add    eax,0xfff
c0009a68:	c1 e8 0c             	shr    eax,0xc
c0009a6b:	89 c2                	mov    edx,eax
c0009a6d:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009a72:	6a 04                	push   0x4
c0009a74:	6a ff                	push   0xffffffff
c0009a76:	52                   	push   edx
c0009a77:	50                   	push   eax
c0009a78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a7c:	e8 57 ff ff ff       	call   c00099d8 <VAS::reflagRange(unsigned long, int, int, int)>
c0009a81:	83 c4 14             	add    esp,0x14
c0009a84:	90                   	nop
c0009a85:	c3                   	ret    

c0009a86 <VAS::setToWriteCombining(unsigned long, int)>:
c0009a86:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009a8b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a91:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009a98:	75 01                	jne    c0009a9b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009a9a:	c3                   	ret    
c0009a9b:	68 80 00 00 00       	push   0x80
c0009aa0:	6a ff                	push   0xffffffff
c0009aa2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009aa6:	50                   	push   eax
c0009aa7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009aab:	52                   	push   edx
c0009aac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009ab0:	51                   	push   ecx
c0009ab1:	e8 22 ff ff ff       	call   c00099d8 <VAS::reflagRange(unsigned long, int, int, int)>
c0009ab6:	83 c4 14             	add    esp,0x14
c0009ab9:	c3                   	ret    

c0009aba <VAS::mapOtherVASIn(bool, VAS*)>:
c0009aba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009abe:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009ac1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac5:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009ac8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009acd:	83 f8 01             	cmp    eax,0x1
c0009ad0:	19 c0                	sbb    eax,eax
c0009ad2:	83 ca 03             	or     edx,0x3
c0009ad5:	83 e0 fc             	and    eax,0xfffffffc
c0009ad8:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009adf:	0f 20 d8             	mov    eax,cr3
c0009ae2:	0f 22 d8             	mov    cr3,eax
c0009ae5:	c3                   	ret    

c0009ae6 <VAS::~VAS()>:
c0009ae6:	83 ec 2c             	sub    esp,0x2c
c0009ae9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009af1:	fa                   	cli    
c0009af2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009af7:	83 c0 01             	add    eax,0x1
c0009afa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009aff:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009b04:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009b09:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009b0f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009b13:	6a 01                	push   0x1
c0009b15:	50                   	push   eax
c0009b16:	e8 9f ff ff ff       	call   c0009aba <VAS::mapOtherVASIn(bool, VAS*)>
c0009b1b:	83 c4 0c             	add    esp,0xc
c0009b1e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009b26:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009b2e:	0f 8f d8 00 00 00    	jg     c0009c0c <VAS::~VAS()+0x126>
c0009b34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b38:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009b3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b3f:	c1 e0 02             	shl    eax,0x2
c0009b42:	01 d0                	add    eax,edx
c0009b44:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b4e:	83 e0 01             	and    eax,0x1
c0009b51:	0f 84 ab 00 00 00    	je     c0009c02 <VAS::~VAS()+0x11c>
c0009b57:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009b5f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009b67:	7f 74                	jg     c0009bdd <VAS::~VAS()+0xf7>
c0009b69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b6d:	c1 e0 0a             	shl    eax,0xa
c0009b70:	89 c2                	mov    edx,eax
c0009b72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b76:	01 d0                	add    eax,edx
c0009b78:	c1 e0 0c             	shl    eax,0xc
c0009b7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b7f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009b84:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b86:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009b89:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009b8f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009b93:	6a 01                	push   0x1
c0009b95:	50                   	push   eax
c0009b96:	e8 9f fc ff ff       	call   c000983a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009b9b:	83 c4 0c             	add    esp,0xc
c0009b9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ba2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ba6:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ba8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bb0:	25 01 04 00 00       	and    eax,0x401
c0009bb5:	3d 01 04 00 00       	cmp    eax,0x401
c0009bba:	75 1a                	jne    c0009bd6 <VAS::~VAS()+0xf0>
c0009bbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bc0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bc5:	83 ec 0c             	sub    esp,0xc
c0009bc8:	50                   	push   eax
c0009bc9:	e8 03 e1 ff ff       	call   c0007cd1 <Phys::freePage(unsigned long)>
c0009bce:	83 c4 10             	add    esp,0x10
c0009bd1:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009bd6:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009bdb:	eb 82                	jmp    c0009b5f <VAS::~VAS()+0x79>
c0009bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009be1:	25 00 04 00 00       	and    eax,0x400
c0009be6:	74 1a                	je     c0009c02 <VAS::~VAS()+0x11c>
c0009be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bec:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bf1:	83 ec 0c             	sub    esp,0xc
c0009bf4:	50                   	push   eax
c0009bf5:	e8 d7 e0 ff ff       	call   c0007cd1 <Phys::freePage(unsigned long)>
c0009bfa:	83 c4 10             	add    esp,0x10
c0009bfd:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c02:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009c07:	e9 1a ff ff ff       	jmp    c0009b26 <VAS::~VAS()+0x40>
c0009c0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c13:	83 ec 0c             	sub    esp,0xc
c0009c16:	50                   	push   eax
c0009c17:	e8 6b fc ff ff       	call   c0009887 <Virt::freeKernelVirtualPages(unsigned long)>
c0009c1c:	83 c4 10             	add    esp,0x10
c0009c1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c23:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009c26:	83 ec 0c             	sub    esp,0xc
c0009c29:	50                   	push   eax
c0009c2a:	e8 a2 e0 ff ff       	call   c0007cd1 <Phys::freePage(unsigned long)>
c0009c2f:	83 c4 10             	add    esp,0x10
c0009c32:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c37:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009c3c:	83 e8 01             	sub    eax,0x1
c0009c3f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009c44:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009c49:	85 c0                	test   eax,eax
c0009c4b:	75 01                	jne    c0009c4e <VAS::~VAS()+0x168>
c0009c4d:	fb                   	sti    
c0009c4e:	90                   	nop
c0009c4f:	83 c4 2c             	add    esp,0x2c
c0009c52:	c3                   	ret    
c0009c53:	90                   	nop

c0009c54 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009c54:	55                   	push   ebp
c0009c55:	57                   	push   edi
c0009c56:	56                   	push   esi
c0009c57:	53                   	push   ebx
c0009c58:	83 ec 1c             	sub    esp,0x1c
c0009c5b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009c5f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c63:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009c67:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009c6d:	77 0b                	ja     c0009c7a <VAS::mapPage(unsigned long, unsigned long, int)+0x26>
c0009c6f:	0f 20 d8             	mov    eax,cr3
c0009c72:	0f 20 d8             	mov    eax,cr3
c0009c75:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009c78:	75 3c                	jne    c0009cb6 <VAS::mapPage(unsigned long, unsigned long, int)+0x62>
c0009c7a:	89 d8                	mov    eax,ebx
c0009c7c:	09 f0                	or     eax,esi
c0009c7e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009c83:	75 4c                	jne    c0009cd1 <VAS::mapPage(unsigned long, unsigned long, int)+0x7d>
c0009c85:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009c88:	89 da                	mov    edx,ebx
c0009c8a:	c1 ea 16             	shr    edx,0x16
c0009c8d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0009c91:	74 5c                	je     c0009cef <VAS::mapPage(unsigned long, unsigned long, int)+0x9b>
c0009c93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c97:	81 c2 00 fc 0f 00    	add    edx,0xffc00
c0009c9d:	c1 eb 0a             	shr    ebx,0xa
c0009ca0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009ca6:	c1 e2 0c             	shl    edx,0xc
c0009ca9:	09 c6                	or     esi,eax
c0009cab:	89 34 13             	mov    DWORD PTR [ebx+edx*1],esi
c0009cae:	83 c4 1c             	add    esp,0x1c
c0009cb1:	5b                   	pop    ebx
c0009cb2:	5e                   	pop    esi
c0009cb3:	5f                   	pop    edi
c0009cb4:	5d                   	pop    ebp
c0009cb5:	c3                   	ret    
c0009cb6:	83 ec 0c             	sub    esp,0xc
c0009cb9:	68 38 fe 01 c0       	push   0xc001fe38
c0009cbe:	e8 de 0b 00 00       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0009cc3:	89 d8                	mov    eax,ebx
c0009cc5:	83 c4 10             	add    esp,0x10
c0009cc8:	09 f0                	or     eax,esi
c0009cca:	a9 ff 0f 00 00       	test   eax,0xfff
c0009ccf:	74 b4                	je     c0009c85 <VAS::mapPage(unsigned long, unsigned long, int)+0x31>
c0009cd1:	83 ec 0c             	sub    esp,0xc
c0009cd4:	68 a0 fe 01 c0       	push   0xc001fea0
c0009cd9:	e8 29 6b 00 00       	call   c0010807 <KePanic(char const*)>
c0009cde:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009ce1:	89 da                	mov    edx,ebx
c0009ce3:	83 c4 10             	add    esp,0x10
c0009ce6:	c1 ea 16             	shr    edx,0x16
c0009ce9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0009ced:	75 a4                	jne    c0009c93 <VAS::mapPage(unsigned long, unsigned long, int)+0x3f>
c0009cef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cf3:	e8 42 e0 ff ff       	call   c0007d3a <Phys::allocatePage()>
c0009cf8:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009cfe:	83 ec 0c             	sub    esp,0xc
c0009d01:	89 c5                	mov    ebp,eax
c0009d03:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d07:	6a 01                	push   0x1
c0009d09:	e8 5f f8 ff ff       	call   c000956d <Virt::allocateKernelVirtualPages(int)>
c0009d0e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d15:	6a 01                	push   0x1
c0009d17:	50                   	push   eax
c0009d18:	55                   	push   ebp
c0009d19:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009d1d:	81 cd 07 04 00 00    	or     ebp,0x407
c0009d23:	51                   	push   ecx
c0009d24:	e8 39 02 00 00       	call   c0009f62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d29:	83 c4 1c             	add    esp,0x1c
c0009d2c:	68 00 10 00 00       	push   0x1000
c0009d31:	6a 00                	push   0x0
c0009d33:	50                   	push   eax
c0009d34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d38:	e8 b3 67 ff ff       	call   c00004f0 <memset>
c0009d3d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009d41:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009d44:	e8 3e fb ff ff       	call   c0009887 <Virt::freeKernelVirtualPages(unsigned long)>
c0009d49:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009d4d:	83 c4 10             	add    esp,0x10
c0009d50:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d53:	89 2c 90             	mov    DWORD PTR [eax+edx*4],ebp
c0009d56:	e9 38 ff ff ff       	jmp    c0009c93 <VAS::mapPage(unsigned long, unsigned long, int)+0x3f>
c0009d5b:	90                   	nop

c0009d5c <VAS::allocatePages(int, int)>:
c0009d5c:	55                   	push   ebp
c0009d5d:	57                   	push   edi
c0009d5e:	56                   	push   esi
c0009d5f:	53                   	push   ebx
c0009d60:	83 ec 1c             	sub    esp,0x1c
c0009d63:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009d68:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009d6c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009d72:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009d78:	83 e0 01             	and    eax,0x1
c0009d7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d7f:	89 c7                	mov    edi,eax
c0009d81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d85:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009d89:	0f 85 d9 00 00 00    	jne    c0009e68 <VAS::allocatePages(int, int)+0x10c>
c0009d8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009d96:	85 c0                	test   eax,eax
c0009d98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d9c:	0f 84 a6 00 00 00    	je     c0009e48 <VAS::allocatePages(int, int)+0xec>
c0009da2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009da6:	81 cd 00 04 00 00    	or     ebp,0x400
c0009dac:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009db0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009db4:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0009db8:	c1 e6 0c             	shl    esi,0xc
c0009dbb:	01 de                	add    esi,ebx
c0009dbd:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0009dc0:	89 f8                	mov    eax,edi
c0009dc2:	85 c9                	test   ecx,ecx
c0009dc4:	0f b6 f8             	movzx  edi,al
c0009dc7:	7e 26                	jle    c0009def <VAS::allocatePages(int, int)+0x93>
c0009dc9:	e8 6c df ff ff       	call   c0007d3a <Phys::allocatePage()>
c0009dce:	55                   	push   ebp
c0009dcf:	53                   	push   ebx
c0009dd0:	50                   	push   eax
c0009dd1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009dd5:	50                   	push   eax
c0009dd6:	e8 79 fe ff ff       	call   c0009c54 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ddb:	83 c4 10             	add    esp,0x10
c0009dde:	85 ff                	test   edi,edi
c0009de0:	74 03                	je     c0009de5 <VAS::allocatePages(int, int)+0x89>
c0009de2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009de5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009deb:	39 de                	cmp    esi,ebx
c0009ded:	75 da                	jne    c0009dc9 <VAS::allocatePages(int, int)+0x6d>
c0009def:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009df3:	85 d2                	test   edx,edx
c0009df5:	75 12                	jne    c0009e09 <VAS::allocatePages(int, int)+0xad>
c0009df7:	0f 20 d8             	mov    eax,cr3
c0009dfa:	0f 22 d8             	mov    cr3,eax
c0009dfd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e01:	83 c4 1c             	add    esp,0x1c
c0009e04:	5b                   	pop    ebx
c0009e05:	5e                   	pop    esi
c0009e06:	5f                   	pop    edi
c0009e07:	5d                   	pop    ebp
c0009e08:	c3                   	ret    
c0009e09:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e0d:	c1 ee 0a             	shr    esi,0xa
c0009e10:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009e16:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009e1c:	c1 eb 0a             	shr    ebx,0xa
c0009e1f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009e25:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009e2b:	39 c3                	cmp    ebx,eax
c0009e2d:	77 ce                	ja     c0009dfd <VAS::allocatePages(int, int)+0xa1>
c0009e2f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e32:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e38:	39 d8                	cmp    eax,ebx
c0009e3a:	73 f3                	jae    c0009e2f <VAS::allocatePages(int, int)+0xd3>
c0009e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e40:	83 c4 1c             	add    esp,0x1c
c0009e43:	5b                   	pop    ebx
c0009e44:	5e                   	pop    esi
c0009e45:	5f                   	pop    edi
c0009e46:	5d                   	pop    ebp
c0009e47:	c3                   	ret    
c0009e48:	83 ec 0c             	sub    esp,0xc
c0009e4b:	68 c4 fe 01 c0       	push   0xc001fec4
c0009e50:	e8 b2 69 00 00       	call   c0010807 <KePanic(char const*)>
c0009e55:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e59:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009e5c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e60:	83 c4 10             	add    esp,0x10
c0009e63:	e9 3a ff ff ff       	jmp    c0009da2 <VAS::allocatePages(int, int)+0x46>
c0009e68:	83 ec 0c             	sub    esp,0xc
c0009e6b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e6f:	50                   	push   eax
c0009e70:	e8 f8 f6 ff ff       	call   c000956d <Virt::allocateKernelVirtualPages(int)>
c0009e75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e79:	83 c4 10             	add    esp,0x10
c0009e7c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009e81:	0f 87 9e 00 00 00    	ja     c0009f25 <VAS::allocatePages(int, int)+0x1c9>
c0009e87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e8b:	85 c0                	test   eax,eax
c0009e8d:	7e 3e                	jle    c0009ecd <VAS::allocatePages(int, int)+0x171>
c0009e8f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009e93:	89 f8                	mov    eax,edi
c0009e95:	81 cd 00 04 00 00    	or     ebp,0x400
c0009e9b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e9f:	0f b6 f8             	movzx  edi,al
c0009ea2:	c1 e6 0c             	shl    esi,0xc
c0009ea5:	01 de                	add    esi,ebx
c0009ea7:	e8 8e de ff ff       	call   c0007d3a <Phys::allocatePage()>
c0009eac:	55                   	push   ebp
c0009ead:	53                   	push   ebx
c0009eae:	50                   	push   eax
c0009eaf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009eb3:	50                   	push   eax
c0009eb4:	e8 9b fd ff ff       	call   c0009c54 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eb9:	83 c4 10             	add    esp,0x10
c0009ebc:	85 ff                	test   edi,edi
c0009ebe:	74 03                	je     c0009ec3 <VAS::allocatePages(int, int)+0x167>
c0009ec0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ec3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ec9:	39 de                	cmp    esi,ebx
c0009ecb:	75 da                	jne    c0009ea7 <VAS::allocatePages(int, int)+0x14b>
c0009ecd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ed1:	85 c0                	test   eax,eax
c0009ed3:	0f 84 1e ff ff ff    	je     c0009df7 <VAS::allocatePages(int, int)+0x9b>
c0009ed9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009edd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ee1:	c1 e0 0c             	shl    eax,0xc
c0009ee4:	01 c8                	add    eax,ecx
c0009ee6:	89 cb                	mov    ebx,ecx
c0009ee8:	c1 eb 0a             	shr    ebx,0xa
c0009eeb:	c1 e8 0a             	shr    eax,0xa
c0009eee:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ef4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ef9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009eff:	2d 00 00 40 00       	sub    eax,0x400000
c0009f04:	39 c3                	cmp    ebx,eax
c0009f06:	0f 87 f1 fe ff ff    	ja     c0009dfd <VAS::allocatePages(int, int)+0xa1>
c0009f0c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f0f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f15:	39 d8                	cmp    eax,ebx
c0009f17:	73 f3                	jae    c0009f0c <VAS::allocatePages(int, int)+0x1b0>
c0009f19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f1d:	83 c4 1c             	add    esp,0x1c
c0009f20:	5b                   	pop    ebx
c0009f21:	5e                   	pop    esi
c0009f22:	5f                   	pop    edi
c0009f23:	5d                   	pop    ebp
c0009f24:	c3                   	ret    
c0009f25:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009f2a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0009f30:	89 e8                	mov    eax,ebp
c0009f32:	80 cc 01             	or     ah,0x1
c0009f35:	f6 82 8c 11 00 00 10 	test   BYTE PTR [edx+0x118c],0x10
c0009f3c:	0f 45 e8             	cmovne ebp,eax
c0009f3f:	e9 43 ff ff ff       	jmp    c0009e87 <VAS::allocatePages(int, int)+0x12b>

c0009f44 <VAS::setCPUSpecific(unsigned long)>:
c0009f44:	83 ec 0c             	sub    esp,0xc
c0009f47:	6a 05                	push   0x5
c0009f49:	68 00 00 40 c2       	push   0xc2400000
c0009f4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f52:	50                   	push   eax
c0009f53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009f57:	52                   	push   edx
c0009f58:	e8 f7 fc ff ff       	call   c0009c54 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f5d:	83 c4 1c             	add    esp,0x1c
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009f6e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f72:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f76:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f7c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009f82:	83 e0 01             	and    eax,0x1
c0009f85:	85 db                	test   ebx,ebx
c0009f87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f8b:	7e 3b                	jle    c0009fc8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0009f8d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0009f91:	89 f3                	mov    ebx,esi
c0009f93:	0f b6 f8             	movzx  edi,al
c0009f96:	c1 e5 0c             	shl    ebp,0xc
c0009f99:	01 f5                	add    ebp,esi
c0009f9b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0009f9f:	52                   	push   edx
c0009fa0:	53                   	push   ebx
c0009fa1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009fa5:	29 f0                	sub    eax,esi
c0009fa7:	01 d8                	add    eax,ebx
c0009fa9:	50                   	push   eax
c0009faa:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fae:	51                   	push   ecx
c0009faf:	e8 a0 fc ff ff       	call   c0009c54 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fb4:	83 c4 10             	add    esp,0x10
c0009fb7:	85 ff                	test   edi,edi
c0009fb9:	74 03                	je     c0009fbe <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5c>
c0009fbb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fbe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fc4:	39 dd                	cmp    ebp,ebx
c0009fc6:	75 d3                	jne    c0009f9b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x39>
c0009fc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fcc:	85 c0                	test   eax,eax
c0009fce:	75 10                	jne    c0009fe0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x7e>
c0009fd0:	0f 20 d8             	mov    eax,cr3
c0009fd3:	0f 22 d8             	mov    cr3,eax
c0009fd6:	83 c4 1c             	add    esp,0x1c
c0009fd9:	89 f0                	mov    eax,esi
c0009fdb:	5b                   	pop    ebx
c0009fdc:	5e                   	pop    esi
c0009fdd:	5f                   	pop    edi
c0009fde:	5d                   	pop    ebp
c0009fdf:	c3                   	ret    
c0009fe0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009fe4:	89 f3                	mov    ebx,esi
c0009fe6:	c1 eb 0a             	shr    ebx,0xa
c0009fe9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009fef:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ff5:	c1 e0 0c             	shl    eax,0xc
c0009ff8:	01 f0                	add    eax,esi
c0009ffa:	c1 e8 0a             	shr    eax,0xa
c0009ffd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a002:	2d 00 00 40 00       	sub    eax,0x400000
c000a007:	39 c3                	cmp    ebx,eax
c000a009:	77 cb                	ja     c0009fd6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x74>
c000a00b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a00e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a014:	39 d8                	cmp    eax,ebx
c000a016:	73 f3                	jae    c000a00b <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa9>
c000a018:	83 c4 1c             	add    esp,0x1c
c000a01b:	89 f0                	mov    eax,esi
c000a01d:	5b                   	pop    ebx
c000a01e:	5e                   	pop    esi
c000a01f:	5f                   	pop    edi
c000a020:	5d                   	pop    ebp
c000a021:	c3                   	ret    

c000a022 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a022:	55                   	push   ebp
c000a023:	57                   	push   edi
c000a024:	56                   	push   esi
c000a025:	53                   	push   ebx
c000a026:	83 ec 1c             	sub    esp,0x1c
c000a029:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a02d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a031:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a035:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a039:	09 d8                	or     eax,ebx
c000a03b:	a9 ff 0f 00 00       	test   eax,0xfff
c000a040:	75 42                	jne    c000a084 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x62>
c000a042:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a045:	89 de                	mov    esi,ebx
c000a047:	c1 ee 16             	shr    esi,0x16
c000a04a:	f6 04 b0 01          	test   BYTE PTR [eax+esi*4],0x1
c000a04e:	74 5a                	je     c000a0aa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x88>
c000a050:	0f b6 d2             	movzx  edx,dl
c000a053:	c1 eb 0a             	shr    ebx,0xa
c000a056:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a05a:	83 fa 01             	cmp    edx,0x1
c000a05d:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000a061:	19 c0                	sbb    eax,eax
c000a063:	c1 e6 0c             	shl    esi,0xc
c000a066:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a06c:	01 f3                	add    ebx,esi
c000a06e:	25 00 00 c0 ff       	and    eax,0xffc00000
c000a073:	09 ca                	or     edx,ecx
c000a075:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c000a07c:	83 c4 1c             	add    esp,0x1c
c000a07f:	5b                   	pop    ebx
c000a080:	5e                   	pop    esi
c000a081:	5f                   	pop    edi
c000a082:	5d                   	pop    ebp
c000a083:	c3                   	ret    
c000a084:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a088:	83 ec 0c             	sub    esp,0xc
c000a08b:	89 de                	mov    esi,ebx
c000a08d:	68 f0 fe 01 c0       	push   0xc001fef0
c000a092:	c1 ee 16             	shr    esi,0x16
c000a095:	e8 6d 67 00 00       	call   c0010807 <KePanic(char const*)>
c000a09a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a0a4:	f6 04 b0 01          	test   BYTE PTR [eax+esi*4],0x1
c000a0a8:	75 a6                	jne    c000a050 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x2e>
c000a0aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a0ae:	e8 87 dc ff ff       	call   c0007d3a <Phys::allocatePage()>
c000a0b3:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a0b9:	83 ec 0c             	sub    esp,0xc
c000a0bc:	89 c5                	mov    ebp,eax
c000a0be:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a0c2:	6a 01                	push   0x1
c000a0c4:	e8 a4 f4 ff ff       	call   c000956d <Virt::allocateKernelVirtualPages(int)>
c000a0c9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a0d0:	6a 01                	push   0x1
c000a0d2:	50                   	push   eax
c000a0d3:	55                   	push   ebp
c000a0d4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a0d8:	81 cd 07 04 00 00    	or     ebp,0x407
c000a0de:	51                   	push   ecx
c000a0df:	e8 7e fe ff ff       	call   c0009f62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0e4:	83 c4 1c             	add    esp,0x1c
c000a0e7:	68 00 10 00 00       	push   0x1000
c000a0ec:	6a 00                	push   0x0
c000a0ee:	50                   	push   eax
c000a0ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0f3:	e8 f8 63 ff ff       	call   c00004f0 <memset>
c000a0f8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a0fc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a0ff:	e8 83 f7 ff ff       	call   c0009887 <Virt::freeKernelVirtualPages(unsigned long)>
c000a104:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a107:	83 c4 10             	add    esp,0x10
c000a10a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a10e:	89 2c b0             	mov    DWORD PTR [eax+esi*4],ebp
c000a111:	e9 3a ff ff ff       	jmp    c000a050 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x2e>

c000a116 <VAS::VAS(bool)>:
c000a116:	53                   	push   ebx
c000a117:	83 ec 28             	sub    esp,0x28
c000a11a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a11e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a122:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a126:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a12d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a131:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a138:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a13c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a140:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a143:	e8 f2 db ff ff       	call   c0007d3a <Phys::allocatePage()>
c000a148:	89 c2                	mov    edx,eax
c000a14a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a14e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a151:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a157:	83 ec 0c             	sub    esp,0xc
c000a15a:	6a 01                	push   0x1
c000a15c:	e8 0c f4 ff ff       	call   c000956d <Virt::allocateKernelVirtualPages(int)>
c000a161:	83 c4 10             	add    esp,0x10
c000a164:	89 c2                	mov    edx,eax
c000a166:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a16a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a16d:	83 ec 0c             	sub    esp,0xc
c000a170:	6a 03                	push   0x3
c000a172:	6a 01                	push   0x1
c000a174:	52                   	push   edx
c000a175:	50                   	push   eax
c000a176:	53                   	push   ebx
c000a177:	e8 e6 fd ff ff       	call   c0009f62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a17c:	83 c4 20             	add    esp,0x20
c000a17f:	89 c2                	mov    edx,eax
c000a181:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a185:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a188:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a190:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a198:	7f 1d                	jg     c000a1b7 <VAS::VAS(bool)+0xa1>
c000a19a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a19e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a1a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a1a5:	c1 e0 02             	shl    eax,0x2
c000a1a8:	01 d0                	add    eax,edx
c000a1aa:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a1b0:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a1b5:	eb d9                	jmp    c000a190 <VAS::VAS(bool)+0x7a>
c000a1b7:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a1bf:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a1c7:	7f 7a                	jg     c000a243 <VAS::VAS(bool)+0x12d>
c000a1c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a1cd:	2d 00 02 00 00       	sub    eax,0x200
c000a1d2:	c1 e0 0c             	shl    eax,0xc
c000a1d5:	83 c8 05             	or     eax,0x5
c000a1d8:	89 c2                	mov    edx,eax
c000a1da:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a1df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e5:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1eb:	83 e0 10             	and    eax,0x10
c000a1ee:	0f b6 c0             	movzx  eax,al
c000a1f1:	85 c0                	test   eax,eax
c000a1f3:	74 07                	je     c000a1fc <VAS::VAS(bool)+0xe6>
c000a1f5:	b8 00 01 00 00       	mov    eax,0x100
c000a1fa:	eb 05                	jmp    c000a201 <VAS::VAS(bool)+0xeb>
c000a1fc:	b8 00 00 00 00       	mov    eax,0x0
c000a201:	09 c2                	or     edx,eax
c000a203:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a207:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000a20a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a20e:	c1 e0 02             	shl    eax,0x2
c000a211:	01 c8                	add    eax,ecx
c000a213:	89 10                	mov    DWORD PTR [eax],edx
c000a215:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a219:	2d 40 03 00 00       	sub    eax,0x340
c000a21e:	83 f8 7f             	cmp    eax,0x7f
c000a221:	77 16                	ja     c000a239 <VAS::VAS(bool)+0x123>
c000a223:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a227:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a22a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a22e:	c1 e0 02             	shl    eax,0x2
c000a231:	01 d0                	add    eax,edx
c000a233:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a239:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a23e:	e9 7c ff ff ff       	jmp    c000a1bf <VAS::VAS(bool)+0xa9>
c000a243:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a248:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a24e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a254:	83 e0 10             	and    eax,0x10
c000a257:	0f b6 c0             	movzx  eax,al
c000a25a:	85 c0                	test   eax,eax
c000a25c:	74 07                	je     c000a265 <VAS::VAS(bool)+0x14f>
c000a25e:	ba 03 41 00 00       	mov    edx,0x4103
c000a263:	eb 05                	jmp    c000a26a <VAS::VAS(bool)+0x154>
c000a265:	ba 03 40 00 00       	mov    edx,0x4003
c000a26a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a26e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a271:	05 20 0c 00 00       	add    eax,0xc20
c000a276:	89 10                	mov    DWORD PTR [eax],edx
c000a278:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a27d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a283:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a289:	83 ec 08             	sub    esp,0x8
c000a28c:	50                   	push   eax
c000a28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a291:	e8 ae fc ff ff       	call   c0009f44 <VAS::setCPUSpecific(unsigned long)>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a29d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a2a0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2a5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2ab:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a2b1:	83 e0 10             	and    eax,0x10
c000a2b4:	0f b6 c0             	movzx  eax,al
c000a2b7:	85 c0                	test   eax,eax
c000a2b9:	74 07                	je     c000a2c2 <VAS::VAS(bool)+0x1ac>
c000a2bb:	b8 00 01 00 00       	mov    eax,0x100
c000a2c0:	eb 05                	jmp    c000a2c7 <VAS::VAS(bool)+0x1b1>
c000a2c2:	b8 00 00 00 00       	mov    eax,0x0
c000a2c7:	09 c2                	or     edx,eax
c000a2c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2d0:	05 fc 0f 00 00       	add    eax,0xffc
c000a2d5:	83 ca 03             	or     edx,0x3
c000a2d8:	89 10                	mov    DWORD PTR [eax],edx
c000a2da:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2e5:	83 ec 0c             	sub    esp,0xc
c000a2e8:	50                   	push   eax
c000a2e9:	e8 ac 1c 00 00       	call   c000bf9a <Device::getName()>
c000a2ee:	83 c4 10             	add    esp,0x10
c000a2f1:	83 ec 08             	sub    esp,0x8
c000a2f4:	68 93 ff 01 c0       	push   0xc001ff93
c000a2f9:	50                   	push   eax
c000a2fa:	e8 d1 63 ff ff       	call   c00006d0 <strcmp>
c000a2ff:	83 c4 10             	add    esp,0x10
c000a302:	85 c0                	test   eax,eax
c000a304:	0f 94 c0             	sete   al
c000a307:	0f b6 c0             	movzx  eax,al
c000a30a:	85 c0                	test   eax,eax
c000a30c:	0f 84 8b 00 00 00    	je     c000a39d <VAS::VAS(bool)+0x287>
c000a312:	fa                   	cli    
c000a313:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a318:	83 c0 01             	add    eax,0x1
c000a31b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a320:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a325:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a32b:	05 7c 09 00 00       	add    eax,0x97c
c000a330:	83 ec 0c             	sub    esp,0xc
c000a333:	50                   	push   eax
c000a334:	e8 f1 d1 ff ff       	call   c000752a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a339:	83 c4 10             	add    esp,0x10
c000a33c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a341:	89 c3                	mov    ebx,eax
c000a343:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a348:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a34e:	05 7c 09 00 00       	add    eax,0x97c
c000a353:	83 ec 0c             	sub    esp,0xc
c000a356:	50                   	push   eax
c000a357:	e8 ce d1 ff ff       	call   c000752a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a35c:	83 c4 10             	add    esp,0x10
c000a35f:	83 ec 08             	sub    esp,0x8
c000a362:	50                   	push   eax
c000a363:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a367:	e8 fc f4 ff ff       	call   c0009868 <VAS::getPageTableEntry(unsigned long)>
c000a36c:	83 c4 10             	add    esp,0x10
c000a36f:	8b 00                	mov    eax,DWORD PTR [eax]
c000a371:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a376:	6a 11                	push   0x11
c000a378:	53                   	push   ebx
c000a379:	50                   	push   eax
c000a37a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a37e:	e8 d1 f8 ff ff       	call   c0009c54 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a383:	83 c4 10             	add    esp,0x10
c000a386:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a38b:	83 e8 01             	sub    eax,0x1
c000a38e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a393:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a398:	85 c0                	test   eax,eax
c000a39a:	75 01                	jne    c000a39d <VAS::VAS(bool)+0x287>
c000a39c:	fb                   	sti    
c000a39d:	90                   	nop
c000a39e:	83 c4 28             	add    esp,0x28
c000a3a1:	5b                   	pop    ebx
c000a3a2:	c3                   	ret    
c000a3a3:	90                   	nop

c000a3a4 <VAS::evict(unsigned long)>:
c000a3a4:	55                   	push   ebp
c000a3a5:	57                   	push   edi
c000a3a6:	56                   	push   esi
c000a3a7:	53                   	push   ebx
c000a3a8:	83 ec 1c             	sub    esp,0x1c
c000a3ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a3af:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a3b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a3b7:	e8 0e f3 ff ff       	call   c00096ca <Virt::allocateSwapfilePage()>
c000a3bc:	89 c7                	mov    edi,eax
c000a3be:	a1 4c 1e 02 c0       	mov    eax,ds:0xc0021e4c
c000a3c3:	85 c0                	test   eax,eax
c000a3c5:	7e 40                	jle    c000a407 <VAS::evict(unsigned long)+0x63>
c000a3c7:	89 ee                	mov    esi,ebp
c000a3c9:	31 db                	xor    ebx,ebx
c000a3cb:	83 ec 0c             	sub    esp,0xc
c000a3ce:	57                   	push   edi
c000a3cf:	e8 e0 f2 ff ff       	call   c00096b4 <Virt::swapIDToSector(unsigned long)>
c000a3d4:	31 d2                	xor    edx,edx
c000a3d6:	89 34 24             	mov    DWORD PTR [esp],esi
c000a3d9:	81 c6 00 02 00 00    	add    esi,0x200
c000a3df:	01 d8                	add    eax,ebx
c000a3e1:	6a 01                	push   0x1
c000a3e3:	83 c3 01             	add    ebx,0x1
c000a3e6:	52                   	push   edx
c000a3e7:	50                   	push   eax
c000a3e8:	0f be 05 58 1e 02 c0 	movsx  eax,BYTE PTR ds:0xc0021e58
c000a3ef:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a3f6:	50                   	push   eax
c000a3f7:	e8 5e 2d 00 00       	call   c000d15a <LogicalDisk::write(unsigned long long, int, void*)>
c000a3fc:	83 c4 20             	add    esp,0x20
c000a3ff:	39 1d 4c 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e4c,ebx
c000a405:	7f c4                	jg     c000a3cb <VAS::evict(unsigned long)+0x27>
c000a407:	83 ec 08             	sub    esp,0x8
c000a40a:	c1 e7 0b             	shl    edi,0xb
c000a40d:	55                   	push   ebp
c000a40e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a412:	50                   	push   eax
c000a413:	e8 50 f4 ff ff       	call   c0009868 <VAS::getPageTableEntry(unsigned long)>
c000a418:	8b 10                	mov    edx,DWORD PTR [eax]
c000a41a:	89 d1                	mov    ecx,edx
c000a41c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a422:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a428:	09 cf                	or     edi,ecx
c000a42a:	89 38                	mov    DWORD PTR [eax],edi
c000a42c:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a432:	89 14 24             	mov    DWORD PTR [esp],edx
c000a435:	83 c1 01             	add    ecx,0x1
c000a438:	89 0d a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,ecx
c000a43e:	e8 8e d8 ff ff       	call   c0007cd1 <Phys::freePage(unsigned long)>
c000a443:	0f 20 d8             	mov    eax,cr3
c000a446:	0f 22 d8             	mov    cr3,eax
c000a449:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a44e:	c7 44 24 40 a1 ff 01 c0 	mov    DWORD PTR [esp+0x40],0xc001ffa1
c000a456:	8d 50 01             	lea    edx,[eax+0x1]
c000a459:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a45d:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a463:	83 c4 2c             	add    esp,0x2c
c000a466:	5b                   	pop    ebx
c000a467:	5e                   	pop    esi
c000a468:	5f                   	pop    edi
c000a469:	5d                   	pop    ebp
c000a46a:	e9 32 04 00 00       	jmp    c000a8a1 <Dbg::kprintf(char const*, ...)>
c000a46f:	90                   	nop

c000a470 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a470:	55                   	push   ebp
c000a471:	57                   	push   edi
c000a472:	56                   	push   esi
c000a473:	53                   	push   ebx
c000a474:	83 ec 24             	sub    esp,0x24
c000a477:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a47b:	53                   	push   ebx
c000a47c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a482:	68 b2 ff 01 c0       	push   0xc001ffb2
c000a487:	e8 15 04 00 00       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c000a48c:	58                   	pop    eax
c000a48d:	5a                   	pop    edx
c000a48e:	53                   	push   ebx
c000a48f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a493:	51                   	push   ecx
c000a494:	e8 cf f3 ff ff       	call   c0009868 <VAS::getPageTableEntry(unsigned long)>
c000a499:	83 c4 10             	add    esp,0x10
c000a49c:	85 c0                	test   eax,eax
c000a49e:	89 c6                	mov    esi,eax
c000a4a0:	0f 95 c0             	setne  al
c000a4a3:	85 db                	test   ebx,ebx
c000a4a5:	0f 95 c2             	setne  dl
c000a4a8:	21 d0                	and    eax,edx
c000a4aa:	a8 01                	test   al,0x1
c000a4ac:	89 c5                	mov    ebp,eax
c000a4ae:	75 0a                	jne    c000a4ba <VAS::tryLoadBackOffDisk(unsigned long)+0x4a>
c000a4b0:	83 c4 1c             	add    esp,0x1c
c000a4b3:	89 e8                	mov    eax,ebp
c000a4b5:	5b                   	pop    ebx
c000a4b6:	5e                   	pop    esi
c000a4b7:	5f                   	pop    edi
c000a4b8:	5d                   	pop    ebp
c000a4b9:	c3                   	ret    
c000a4ba:	8b 06                	mov    eax,DWORD PTR [esi]
c000a4bc:	a8 01                	test   al,0x1
c000a4be:	74 0c                	je     c000a4cc <VAS::tryLoadBackOffDisk(unsigned long)+0x5c>
c000a4c0:	83 c4 1c             	add    esp,0x1c
c000a4c3:	31 ed                	xor    ebp,ebp
c000a4c5:	5b                   	pop    ebx
c000a4c6:	89 e8                	mov    eax,ebp
c000a4c8:	5e                   	pop    esi
c000a4c9:	5f                   	pop    edi
c000a4ca:	5d                   	pop    ebp
c000a4cb:	c3                   	ret    
c000a4cc:	c1 e8 0b             	shr    eax,0xb
c000a4cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4d3:	e8 62 d8 ff ff       	call   c0007d3a <Phys::allocatePage()>
c000a4d8:	8b 16                	mov    edx,DWORD PTR [esi]
c000a4da:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a4e0:	09 c2                	or     edx,eax
c000a4e2:	81 ca 01 08 00 00    	or     edx,0x801
c000a4e8:	89 16                	mov    DWORD PTR [esi],edx
c000a4ea:	a1 4c 1e 02 c0       	mov    eax,ds:0xc0021e4c
c000a4ef:	85 c0                	test   eax,eax
c000a4f1:	7e 44                	jle    c000a537 <VAS::tryLoadBackOffDisk(unsigned long)+0xc7>
c000a4f3:	89 df                	mov    edi,ebx
c000a4f5:	31 f6                	xor    esi,esi
c000a4f7:	83 ec 0c             	sub    esp,0xc
c000a4fa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a4fe:	51                   	push   ecx
c000a4ff:	e8 b0 f1 ff ff       	call   c00096b4 <Virt::swapIDToSector(unsigned long)>
c000a504:	31 d2                	xor    edx,edx
c000a506:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a509:	81 c7 00 02 00 00    	add    edi,0x200
c000a50f:	01 f0                	add    eax,esi
c000a511:	6a 01                	push   0x1
c000a513:	83 c6 01             	add    esi,0x1
c000a516:	52                   	push   edx
c000a517:	50                   	push   eax
c000a518:	0f be 05 58 1e 02 c0 	movsx  eax,BYTE PTR ds:0xc0021e58
c000a51f:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a526:	50                   	push   eax
c000a527:	e8 c2 2b 00 00       	call   c000d0ee <LogicalDisk::read(unsigned long long, int, void*)>
c000a52c:	83 c4 20             	add    esp,0x20
c000a52f:	39 35 4c 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e4c,esi
c000a535:	7f c0                	jg     c000a4f7 <VAS::tryLoadBackOffDisk(unsigned long)+0x87>
c000a537:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a53c:	83 ec 04             	sub    esp,0x4
c000a53f:	83 e8 01             	sub    eax,0x1
c000a542:	50                   	push   eax
c000a543:	53                   	push   ebx
c000a544:	68 c5 ff 01 c0       	push   0xc001ffc5
c000a549:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a54e:	e8 4e 03 00 00       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c000a553:	58                   	pop    eax
c000a554:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a558:	52                   	push   edx
c000a559:	e8 33 f1 ff ff       	call   c0009691 <Virt::freeSwapfilePage(unsigned long)>
c000a55e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a563:	83 c4 10             	add    esp,0x10
c000a566:	83 e8 01             	sub    eax,0x1
c000a569:	85 c0                	test   eax,eax
c000a56b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a570:	75 01                	jne    c000a573 <VAS::tryLoadBackOffDisk(unsigned long)+0x103>
c000a572:	fb                   	sti    
c000a573:	0f 20 d8             	mov    eax,cr3
c000a576:	0f 22 d8             	mov    cr3,eax
c000a579:	e9 32 ff ff ff       	jmp    c000a4b0 <VAS::tryLoadBackOffDisk(unsigned long)+0x40>

c000a57e <VAS::scanForEviction()>:
c000a57e:	57                   	push   edi
c000a57f:	31 ff                	xor    edi,edi
c000a581:	56                   	push   esi
c000a582:	53                   	push   ebx
c000a583:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a587:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a58a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a590:	75 0e                	jne    c000a5a0 <VAS::scanForEviction()+0x22>
c000a592:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a595:	89 da                	mov    edx,ebx
c000a597:	c1 ea 16             	shr    edx,0x16
c000a59a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a59e:	74 50                	je     c000a5f0 <VAS::scanForEviction()+0x72>
c000a5a0:	53                   	push   ebx
c000a5a1:	56                   	push   esi
c000a5a2:	e8 c1 f2 ff ff       	call   c0009868 <VAS::getPageTableEntry(unsigned long)>
c000a5a7:	5a                   	pop    edx
c000a5a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5aa:	59                   	pop    ecx
c000a5ab:	89 d1                	mov    ecx,edx
c000a5ad:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5b3:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a5b9:	74 40                	je     c000a5fb <VAS::scanForEviction()+0x7d>
c000a5bb:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a5c1:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a5c7:	76 2d                	jbe    c000a5f6 <VAS::scanForEviction()+0x78>
c000a5c9:	83 c7 01             	add    edi,0x1
c000a5cc:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a5d3:	83 ff 03             	cmp    edi,0x3
c000a5d6:	74 32                	je     c000a60a <VAS::scanForEviction()+0x8c>
c000a5d8:	31 db                	xor    ebx,ebx
c000a5da:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5e0:	75 be                	jne    c000a5a0 <VAS::scanForEviction()+0x22>
c000a5e2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a5e5:	89 da                	mov    edx,ebx
c000a5e7:	c1 ea 16             	shr    edx,0x16
c000a5ea:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ee:	75 b0                	jne    c000a5a0 <VAS::scanForEviction()+0x22>
c000a5f0:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a5f6:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a5f9:	eb 8f                	jmp    c000a58a <VAS::scanForEviction()+0xc>
c000a5fb:	f6 c2 20             	test   dl,0x20
c000a5fe:	74 12                	je     c000a612 <VAS::scanForEviction()+0x94>
c000a600:	83 e2 df             	and    edx,0xffffffdf
c000a603:	89 10                	mov    DWORD PTR [eax],edx
c000a605:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a608:	eb b1                	jmp    c000a5bb <VAS::scanForEviction()+0x3d>
c000a60a:	31 ff                	xor    edi,edi
c000a60c:	5b                   	pop    ebx
c000a60d:	89 f8                	mov    eax,edi
c000a60f:	5e                   	pop    esi
c000a610:	5f                   	pop    edi
c000a611:	c3                   	ret    
c000a612:	83 ec 08             	sub    esp,0x8
c000a615:	89 d7                	mov    edi,edx
c000a617:	53                   	push   ebx
c000a618:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000a61e:	68 da ff 01 c0       	push   0xc001ffda
c000a623:	e8 79 02 00 00       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c000a628:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a62b:	58                   	pop    eax
c000a62c:	5a                   	pop    edx
c000a62d:	51                   	push   ecx
c000a62e:	56                   	push   esi
c000a62f:	e8 70 fd ff ff       	call   c000a3a4 <VAS::evict(unsigned long)>
c000a634:	5b                   	pop    ebx
c000a635:	58                   	pop    eax
c000a636:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a639:	50                   	push   eax
c000a63a:	68 ee ff 01 c0       	push   0xc001ffee
c000a63f:	e8 5d 02 00 00       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c000a644:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a647:	83 c4 10             	add    esp,0x10
c000a64a:	05 00 10 00 00       	add    eax,0x1000
c000a64f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a652:	89 f8                	mov    eax,edi
c000a654:	5b                   	pop    ebx
c000a655:	5e                   	pop    esi
c000a656:	5f                   	pop    edi
c000a657:	c3                   	ret    

c000a658 <mapVASFirstTime>:
c000a658:	55                   	push   ebp
c000a659:	57                   	push   edi
c000a65a:	56                   	push   esi
c000a65b:	53                   	push   ebx
c000a65c:	83 ec 0c             	sub    esp,0xc
c000a65f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a664:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a667:	83 fa 01             	cmp    edx,0x1
c000a66a:	0f 84 cb 00 00 00    	je     c000a73b <mapVASFirstTime+0xe3>
c000a670:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a673:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a678:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a67d:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a680:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a686:	c1 e5 15             	shl    ebp,0x15
c000a689:	29 eb                	sub    ebx,ebp
c000a68b:	29 ef                	sub    edi,ebp
c000a68d:	e8 a8 d6 ff ff       	call   c0007d3a <Phys::allocatePage()>
c000a692:	83 ec 0c             	sub    esp,0xc
c000a695:	68 03 04 00 00       	push   0x403
c000a69a:	6a 01                	push   0x1
c000a69c:	53                   	push   ebx
c000a69d:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a6a3:	50                   	push   eax
c000a6a4:	56                   	push   esi
c000a6a5:	e8 b8 f8 ff ff       	call   c0009f62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a6aa:	83 c4 20             	add    esp,0x20
c000a6ad:	39 fb                	cmp    ebx,edi
c000a6af:	75 dc                	jne    c000a68d <mapVASFirstTime+0x35>
c000a6b1:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a6b6:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a6bb:	29 eb                	sub    ebx,ebp
c000a6bd:	29 ef                	sub    edi,ebp
c000a6bf:	e8 76 d6 ff ff       	call   c0007d3a <Phys::allocatePage()>
c000a6c4:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a6c8:	83 fa 01             	cmp    edx,0x1
c000a6cb:	19 d2                	sbb    edx,edx
c000a6cd:	83 ec 0c             	sub    esp,0xc
c000a6d0:	83 e2 04             	and    edx,0x4
c000a6d3:	81 c2 03 04 00 00    	add    edx,0x403
c000a6d9:	52                   	push   edx
c000a6da:	6a 01                	push   0x1
c000a6dc:	53                   	push   ebx
c000a6dd:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a6e3:	50                   	push   eax
c000a6e4:	56                   	push   esi
c000a6e5:	e8 78 f8 ff ff       	call   c0009f62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a6ea:	83 c4 20             	add    esp,0x20
c000a6ed:	39 df                	cmp    edi,ebx
c000a6ef:	75 ce                	jne    c000a6bf <mapVASFirstTime+0x67>
c000a6f1:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a6f6:	83 ec 0c             	sub    esp,0xc
c000a6f9:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a6ff:	6a 04                	push   0x4
c000a701:	c1 eb 0c             	shr    ebx,0xc
c000a704:	6a ff                	push   0xffffffff
c000a706:	53                   	push   ebx
c000a707:	68 00 30 02 c0       	push   0xc0023000
c000a70c:	56                   	push   esi
c000a70d:	e8 c6 f2 ff ff       	call   c00099d8 <VAS::reflagRange(unsigned long, int, int, int)>
c000a712:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a717:	83 c4 14             	add    esp,0x14
c000a71a:	6a 04                	push   0x4
c000a71c:	6a ff                	push   0xffffffff
c000a71e:	53                   	push   ebx
c000a71f:	68 00 30 02 c0       	push   0xc0023000
c000a724:	50                   	push   eax
c000a725:	e8 ae f2 ff ff       	call   c00099d8 <VAS::reflagRange(unsigned long, int, int, int)>
c000a72a:	0f 20 d8             	mov    eax,cr3
c000a72d:	0f 22 d8             	mov    cr3,eax
c000a730:	83 c4 20             	add    esp,0x20
c000a733:	83 c4 0c             	add    esp,0xc
c000a736:	5b                   	pop    ebx
c000a737:	5e                   	pop    esi
c000a738:	5f                   	pop    edi
c000a739:	5d                   	pop    ebp
c000a73a:	c3                   	ret    
c000a73b:	83 ec 0c             	sub    esp,0xc
c000a73e:	68 01 00 02 c0       	push   0xc0020001
c000a743:	e8 59 01 00 00       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	83 c4 0c             	add    esp,0xc
c000a74e:	5b                   	pop    ebx
c000a74f:	5e                   	pop    esi
c000a750:	5f                   	pop    edi
c000a751:	5d                   	pop    ebp
c000a752:	c3                   	ret    

c000a753 <__cxa_atexit>:
c000a753:	31 c0                	xor    eax,eax
c000a755:	c3                   	ret    

c000a756 <__cxa_finalize>:
c000a756:	c3                   	ret    

c000a757 <__stack_chk_fail>:
c000a757:	55                   	push   ebp
c000a758:	89 e5                	mov    ebp,esp
c000a75a:	83 ec 10             	sub    esp,0x10
c000a75d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a760:	68 1a 00 02 c0       	push   0xc002001a
c000a765:	e8 37 01 00 00       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c000a76a:	58                   	pop    eax
c000a76b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a76e:	5a                   	pop    edx
c000a76f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a772:	68 1a 00 02 c0       	push   0xc002001a
c000a777:	e8 25 01 00 00       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c000a77c:	c7 04 24 22 00 02 c0 	mov    DWORD PTR [esp],0xc0020022
c000a783:	e8 7f 60 00 00       	call   c0010807 <KePanic(char const*)>
c000a788:	83 c4 10             	add    esp,0x10
c000a78b:	c9                   	leave  
c000a78c:	c3                   	ret    

c000a78d <__cxa_pure_virtual>:
c000a78d:	83 ec 18             	sub    esp,0x18
c000a790:	68 3a 00 02 c0       	push   0xc002003a
c000a795:	e8 6d 60 00 00       	call   c0010807 <KePanic(char const*)>
c000a79a:	83 c4 1c             	add    esp,0x1c
c000a79d:	c3                   	ret    

c000a79e <operator new[](unsigned long)>:
c000a79e:	e9 8c d2 ff ff       	jmp    c0007a2f <malloc>

c000a7a3 <operator delete(void*, unsigned long)>:
c000a7a3:	e9 a7 d2 ff ff       	jmp    c0007a4f <rfree>

c000a7a8 <operator delete[](void*)>:
c000a7a8:	e9 a2 d2 ff ff       	jmp    c0007a4f <rfree>

c000a7ad <operator delete[](void*, unsigned long)>:
c000a7ad:	e9 9d d2 ff ff       	jmp    c0007a4f <rfree>

c000a7b2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a7b2:	55                   	push   ebp
c000a7b3:	57                   	push   edi
c000a7b4:	56                   	push   esi
c000a7b5:	53                   	push   ebx
c000a7b6:	83 ec 20             	sub    esp,0x20
c000a7b9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a7bd:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a7c5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a7c9:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a7d1:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a7d5:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a7dd:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a7e5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a7ea:	89 f7                	mov    edi,esi
c000a7ec:	89 eb                	mov    ebx,ebp
c000a7ee:	eb 02                	jmp    c000a7f2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a7f0:	89 c7                	mov    edi,eax
c000a7f2:	31 d2                	xor    edx,edx
c000a7f4:	89 f8                	mov    eax,edi
c000a7f6:	83 c3 01             	add    ebx,0x1
c000a7f9:	f7 f1                	div    ecx
c000a7fb:	39 cf                	cmp    edi,ecx
c000a7fd:	73 f1                	jae    c000a7f0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a7ff:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a802:	eb 02                	jmp    c000a806 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a804:	89 c6                	mov    esi,eax
c000a806:	31 d2                	xor    edx,edx
c000a808:	89 f0                	mov    eax,esi
c000a80a:	83 eb 01             	sub    ebx,0x1
c000a80d:	f7 f1                	div    ecx
c000a80f:	39 ce                	cmp    esi,ecx
c000a811:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a815:	88 13                	mov    BYTE PTR [ebx],dl
c000a817:	73 eb                	jae    c000a804 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a819:	83 c4 20             	add    esp,0x20
c000a81c:	89 e8                	mov    eax,ebp
c000a81e:	5b                   	pop    ebx
c000a81f:	5e                   	pop    esi
c000a820:	5f                   	pop    edi
c000a821:	5d                   	pop    ebp
c000a822:	c3                   	ret    

c000a823 <Dbg::logc(char)>:
c000a823:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a82a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a82e:	75 12                	jne    c000a842 <Dbg::logc(char)+0x1f>
c000a830:	ba fd 03 00 00       	mov    edx,0x3fd
c000a835:	ec                   	in     al,dx
c000a836:	a8 20                	test   al,0x20
c000a838:	74 fb                	je     c000a835 <Dbg::logc(char)+0x12>
c000a83a:	ba f8 03 00 00       	mov    edx,0x3f8
c000a83f:	88 c8                	mov    al,cl
c000a841:	ee                   	out    dx,al
c000a842:	c3                   	ret    

c000a843 <Dbg::logs(char*)>:
c000a843:	53                   	push   ebx
c000a844:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a848:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a84b:	85 c0                	test   eax,eax
c000a84d:	74 11                	je     c000a860 <Dbg::logs(char*)+0x1d>
c000a84f:	83 c3 01             	add    ebx,0x1
c000a852:	50                   	push   eax
c000a853:	e8 cb ff ff ff       	call   c000a823 <Dbg::logc(char)>
c000a858:	58                   	pop    eax
c000a859:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a85c:	85 c0                	test   eax,eax
c000a85e:	75 ef                	jne    c000a84f <Dbg::logs(char*)+0xc>
c000a860:	5b                   	pop    ebx
c000a861:	c3                   	ret    

c000a862 <Dbg::logWriteInt(unsigned int)>:
c000a862:	83 ec 10             	sub    esp,0x10
c000a865:	6a 0a                	push   0xa
c000a867:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a86b:	50                   	push   eax
c000a86c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a870:	50                   	push   eax
c000a871:	e8 3c ff ff ff       	call   c000a7b2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a876:	50                   	push   eax
c000a877:	e8 c7 ff ff ff       	call   c000a843 <Dbg::logs(char*)>
c000a87c:	83 c4 20             	add    esp,0x20
c000a87f:	c3                   	ret    

c000a880 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a880:	83 ec 10             	sub    esp,0x10
c000a883:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a887:	50                   	push   eax
c000a888:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a88c:	50                   	push   eax
c000a88d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a891:	52                   	push   edx
c000a892:	e8 1b ff ff ff       	call   c000a7b2 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a897:	50                   	push   eax
c000a898:	e8 a6 ff ff ff       	call   c000a843 <Dbg::logs(char*)>
c000a89d:	83 c4 20             	add    esp,0x20
c000a8a0:	c3                   	ret    

c000a8a1 <Dbg::kprintf(char const*, ...)>:
c000a8a1:	55                   	push   ebp
c000a8a2:	57                   	push   edi
c000a8a3:	56                   	push   esi
c000a8a4:	53                   	push   ebx
c000a8a5:	83 ec 0c             	sub    esp,0xc
c000a8a8:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a8af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a8b3:	74 08                	je     c000a8bd <Dbg::kprintf(char const*, ...)+0x1c>
c000a8b5:	83 c4 0c             	add    esp,0xc
c000a8b8:	5b                   	pop    ebx
c000a8b9:	5e                   	pop    esi
c000a8ba:	5f                   	pop    edi
c000a8bb:	5d                   	pop    ebp
c000a8bc:	c3                   	ret    
c000a8bd:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a8c1:	31 ff                	xor    edi,edi
c000a8c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a8c7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ca:	85 c0                	test   eax,eax
c000a8cc:	74 e7                	je     c000a8b5 <Dbg::kprintf(char const*, ...)+0x14>
c000a8ce:	8d 77 01             	lea    esi,[edi+0x1]
c000a8d1:	83 f8 25             	cmp    eax,0x25
c000a8d4:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a8d7:	75 47                	jne    c000a920 <Dbg::kprintf(char const*, ...)+0x7f>
c000a8d9:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a8dc:	83 c7 02             	add    edi,0x2
c000a8df:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a8e2:	83 e8 25             	sub    eax,0x25
c000a8e5:	0f b6 c0             	movzx  eax,al
c000a8e8:	83 f8 53             	cmp    eax,0x53
c000a8eb:	0f 87 ce 00 00 00    	ja     c000a9bf <Dbg::kprintf(char const*, ...)+0x11e>
c000a8f1:	ff 24 85 50 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdffb0]
c000a8f8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8fc:	89 c8                	mov    eax,ecx
c000a8fe:	83 c1 04             	add    ecx,0x4
c000a901:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a905:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a907:	55                   	push   ebp
c000a908:	e8 55 ff ff ff       	call   c000a862 <Dbg::logWriteInt(unsigned int)>
c000a90d:	58                   	pop    eax
c000a90e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a911:	85 c0                	test   eax,eax
c000a913:	74 a0                	je     c000a8b5 <Dbg::kprintf(char const*, ...)+0x14>
c000a915:	8d 77 01             	lea    esi,[edi+0x1]
c000a918:	83 f8 25             	cmp    eax,0x25
c000a91b:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a91e:	74 b9                	je     c000a8d9 <Dbg::kprintf(char const*, ...)+0x38>
c000a920:	50                   	push   eax
c000a921:	89 f7                	mov    edi,esi
c000a923:	89 ee                	mov    esi,ebp
c000a925:	e8 f9 fe ff ff       	call   c000a823 <Dbg::logc(char)>
c000a92a:	58                   	pop    eax
c000a92b:	eb e1                	jmp    c000a90e <Dbg::kprintf(char const*, ...)+0x6d>
c000a92d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a931:	89 c8                	mov    eax,ecx
c000a933:	83 c1 04             	add    ecx,0x4
c000a936:	8b 00                	mov    eax,DWORD PTR [eax]
c000a938:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a93c:	50                   	push   eax
c000a93d:	e8 01 ff ff ff       	call   c000a843 <Dbg::logs(char*)>
c000a942:	58                   	pop    eax
c000a943:	eb c9                	jmp    c000a90e <Dbg::kprintf(char const*, ...)+0x6d>
c000a945:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a949:	89 d0                	mov    eax,edx
c000a94b:	83 c2 04             	add    edx,0x4
c000a94e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a952:	8b 00                	mov    eax,DWORD PTR [eax]
c000a954:	50                   	push   eax
c000a955:	e8 08 ff ff ff       	call   c000a862 <Dbg::logWriteInt(unsigned int)>
c000a95a:	58                   	pop    eax
c000a95b:	eb b1                	jmp    c000a90e <Dbg::kprintf(char const*, ...)+0x6d>
c000a95d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a961:	89 d0                	mov    eax,edx
c000a963:	83 c2 04             	add    edx,0x4
c000a966:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a969:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a96d:	50                   	push   eax
c000a96e:	e8 b0 fe ff ff       	call   c000a823 <Dbg::logc(char)>
c000a973:	58                   	pop    eax
c000a974:	eb 98                	jmp    c000a90e <Dbg::kprintf(char const*, ...)+0x6d>
c000a976:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a97a:	89 c8                	mov    eax,ecx
c000a97c:	83 c1 04             	add    ecx,0x4
c000a97f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a983:	6a 10                	push   0x10
c000a985:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a987:	51                   	push   ecx
c000a988:	e8 f3 fe ff ff       	call   c000a880 <Dbg::logWriteIntBase(unsigned int, int)>
c000a98d:	5d                   	pop    ebp
c000a98e:	58                   	pop    eax
c000a98f:	e9 7a ff ff ff       	jmp    c000a90e <Dbg::kprintf(char const*, ...)+0x6d>
c000a994:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a998:	89 d0                	mov    eax,edx
c000a99a:	83 c2 08             	add    edx,0x8
c000a99d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9a1:	6a 10                	push   0x10
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 d5 fe ff ff       	call   c000a880 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9ab:	58                   	pop    eax
c000a9ac:	5a                   	pop    edx
c000a9ad:	e9 5c ff ff ff       	jmp    c000a90e <Dbg::kprintf(char const*, ...)+0x6d>
c000a9b2:	6a 25                	push   0x25
c000a9b4:	e8 6a fe ff ff       	call   c000a823 <Dbg::logc(char)>
c000a9b9:	5a                   	pop    edx
c000a9ba:	e9 4f ff ff ff       	jmp    c000a90e <Dbg::kprintf(char const*, ...)+0x6d>
c000a9bf:	6a 25                	push   0x25
c000a9c1:	e8 5d fe ff ff       	call   c000a823 <Dbg::logc(char)>
c000a9c6:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a9ca:	50                   	push   eax
c000a9cb:	e8 53 fe ff ff       	call   c000a823 <Dbg::logc(char)>
c000a9d0:	5a                   	pop    edx
c000a9d1:	59                   	pop    ecx
c000a9d2:	e9 37 ff ff ff       	jmp    c000a90e <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d7:	90                   	nop

c000a9d8 <File::read(unsigned long long, void*, int*)>:
c000a9d8:	53                   	push   ebx
c000a9d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a9e1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a9e8:	83 f8 19             	cmp    eax,0x19
c000a9eb:	77 35                	ja     c000aa22 <File::read(unsigned long long, void*, int*)+0x4a>
c000a9ed:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000a9f4:	85 c0                	test   eax,eax
c000a9f6:	74 2a                	je     c000aa22 <File::read(unsigned long long, void*, int*)+0x4a>
c000a9f8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a9fe:	85 c0                	test   eax,eax
c000aa00:	74 20                	je     c000aa22 <File::read(unsigned long long, void*, int*)+0x4a>
c000aa02:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aa06:	74 21                	je     c000aa29 <File::read(unsigned long long, void*, int*)+0x51>
c000aa08:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa0a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aa0e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000aa14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa1c:	5b                   	pop    ebx
c000aa1d:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000aa20:	ff e0                	jmp    eax
c000aa22:	b8 0b 00 00 00       	mov    eax,0xb
c000aa27:	eb 05                	jmp    c000aa2e <File::read(unsigned long long, void*, int*)+0x56>
c000aa29:	b8 05 00 00 00       	mov    eax,0x5
c000aa2e:	5b                   	pop    ebx
c000aa2f:	c3                   	ret    

c000aa30 <File::write(unsigned long long, void*, int*)>:
c000aa30:	53                   	push   ebx
c000aa31:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aa35:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aa39:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aa40:	83 f8 19             	cmp    eax,0x19
c000aa43:	77 35                	ja     c000aa7a <File::write(unsigned long long, void*, int*)+0x4a>
c000aa45:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aa4c:	85 c0                	test   eax,eax
c000aa4e:	74 2a                	je     c000aa7a <File::write(unsigned long long, void*, int*)+0x4a>
c000aa50:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aa56:	85 c0                	test   eax,eax
c000aa58:	74 20                	je     c000aa7a <File::write(unsigned long long, void*, int*)+0x4a>
c000aa5a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aa5e:	74 21                	je     c000aa81 <File::write(unsigned long long, void*, int*)+0x51>
c000aa60:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa62:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aa66:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000aa6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa74:	5b                   	pop    ebx
c000aa75:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000aa78:	ff e0                	jmp    eax
c000aa7a:	b8 0b 00 00 00       	mov    eax,0xb
c000aa7f:	eb 05                	jmp    c000aa86 <File::write(unsigned long long, void*, int*)+0x56>
c000aa81:	b8 05 00 00 00       	mov    eax,0x5
c000aa86:	5b                   	pop    ebx
c000aa87:	c3                   	ret    

c000aa88 <Directory::read(unsigned long long, void*, int*)>:
c000aa88:	53                   	push   ebx
c000aa89:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aa8d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aa91:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aa98:	83 f8 19             	cmp    eax,0x19
c000aa9b:	77 35                	ja     c000aad2 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000aa9d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aaa4:	85 c0                	test   eax,eax
c000aaa6:	74 2a                	je     c000aad2 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000aaa8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aaae:	85 c0                	test   eax,eax
c000aab0:	74 20                	je     c000aad2 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000aab2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aab6:	74 21                	je     c000aad9 <Directory::read(unsigned long long, void*, int*)+0x51>
c000aab8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aaba:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aabe:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000aac4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aac8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aacc:	5b                   	pop    ebx
c000aacd:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000aad0:	ff e0                	jmp    eax
c000aad2:	b8 0b 00 00 00       	mov    eax,0xb
c000aad7:	eb 05                	jmp    c000aade <Directory::read(unsigned long long, void*, int*)+0x56>
c000aad9:	b8 05 00 00 00       	mov    eax,0x5
c000aade:	5b                   	pop    ebx
c000aadf:	c3                   	ret    

c000aae0 <Directory::write(unsigned long long, void*, int*)>:
c000aae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aae4:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000aaeb:	b8 0b 00 00 00       	mov    eax,0xb
c000aaf0:	83 fa 19             	cmp    edx,0x19
c000aaf3:	77 18                	ja     c000ab0d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000aaf5:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000aafc:	85 d2                	test   edx,edx
c000aafe:	74 0d                	je     c000ab0d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ab00:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000ab07:	19 c0                	sbb    eax,eax
c000ab09:	83 e0 0a             	and    eax,0xa
c000ab0c:	40                   	inc    eax
c000ab0d:	c3                   	ret    

c000ab0e <File::isAtty()>:
c000ab0e:	31 c0                	xor    eax,eax
c000ab10:	c3                   	ret    
c000ab11:	90                   	nop

c000ab12 <Directory::isAtty()>:
c000ab12:	31 c0                	xor    eax,eax
c000ab14:	c3                   	ret    
c000ab15:	90                   	nop

c000ab16 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ab16:	b8 0a 00 00 00       	mov    eax,0xa
c000ab1b:	c3                   	ret    

c000ab1c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ab1c:	b8 0a 00 00 00       	mov    eax,0xa
c000ab21:	c3                   	ret    

c000ab22 <Filesystem::allocateSwapfile(char const*, int)>:
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	31 d2                	xor    edx,edx
c000ab26:	c3                   	ret    
c000ab27:	90                   	nop

c000ab28 <File::~File()>:
c000ab28:	83 ec 0c             	sub    esp,0xc
c000ab2b:	ba 10 02 02 c0       	mov    edx,0xc0020210
c000ab30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab34:	89 10                	mov    DWORD PTR [eax],edx
c000ab36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab3a:	83 ec 0c             	sub    esp,0xc
c000ab3d:	50                   	push   eax
c000ab3e:	e8 c1 e7 ff ff       	call   c0009304 <UnixFile::~UnixFile()>
c000ab43:	83 c4 10             	add    esp,0x10
c000ab46:	90                   	nop
c000ab47:	83 c4 0c             	add    esp,0xc
c000ab4a:	c3                   	ret    
c000ab4b:	90                   	nop

c000ab4c <File::~File()>:
c000ab4c:	83 ec 0c             	sub    esp,0xc
c000ab4f:	83 ec 0c             	sub    esp,0xc
c000ab52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab56:	e8 cd ff ff ff       	call   c000ab28 <File::~File()>
c000ab5b:	83 c4 10             	add    esp,0x10
c000ab5e:	83 ec 08             	sub    esp,0x8
c000ab61:	68 14 01 00 00       	push   0x114
c000ab66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab6a:	e8 34 fc ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c000ab6f:	83 c4 10             	add    esp,0x10
c000ab72:	83 c4 0c             	add    esp,0xc
c000ab75:	c3                   	ret    

c000ab76 <Directory::~Directory()>:
c000ab76:	83 ec 0c             	sub    esp,0xc
c000ab79:	ba 2c 02 02 c0       	mov    edx,0xc002022c
c000ab7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab82:	89 10                	mov    DWORD PTR [eax],edx
c000ab84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	50                   	push   eax
c000ab8c:	e8 73 e7 ff ff       	call   c0009304 <UnixFile::~UnixFile()>
c000ab91:	83 c4 10             	add    esp,0x10
c000ab94:	90                   	nop
c000ab95:	83 c4 0c             	add    esp,0xc
c000ab98:	c3                   	ret    
c000ab99:	90                   	nop

c000ab9a <Directory::~Directory()>:
c000ab9a:	83 ec 0c             	sub    esp,0xc
c000ab9d:	83 ec 0c             	sub    esp,0xc
c000aba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aba4:	e8 cd ff ff ff       	call   c000ab76 <Directory::~Directory()>
c000aba9:	83 c4 10             	add    esp,0x10
c000abac:	83 ec 08             	sub    esp,0x8
c000abaf:	68 14 01 00 00       	push   0x114
c000abb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abb8:	e8 e6 fb ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c000abbd:	83 c4 10             	add    esp,0x10
c000abc0:	83 c4 0c             	add    esp,0xc
c000abc3:	c3                   	ret    

c000abc4 <Filesystem::Filesystem()>:
c000abc4:	ba a8 01 02 c0       	mov    edx,0xc00201a8
c000abc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abcd:	89 10                	mov    DWORD PTR [eax],edx
c000abcf:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000abd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abd9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000abdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abe0:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000abe5:	90                   	nop
c000abe6:	c3                   	ret    
c000abe7:	90                   	nop

c000abe8 <Filesystem::~Filesystem()>:
c000abe8:	ba a8 01 02 c0       	mov    edx,0xc00201a8
c000abed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abf1:	89 10                	mov    DWORD PTR [eax],edx
c000abf3:	90                   	nop
c000abf4:	c3                   	ret    
c000abf5:	90                   	nop

c000abf6 <Filesystem::~Filesystem()>:
c000abf6:	83 ec 0c             	sub    esp,0xc
c000abf9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000abfd:	e8 e6 ff ff ff       	call   c000abe8 <Filesystem::~Filesystem()>
c000ac02:	83 c4 04             	add    esp,0x4
c000ac05:	83 ec 08             	sub    esp,0x8
c000ac08:	6a 08                	push   0x8
c000ac0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac0e:	e8 90 fb ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c000ac13:	83 c4 10             	add    esp,0x10
c000ac16:	83 c4 0c             	add    esp,0xc
c000ac19:	c3                   	ret    

c000ac1a <Fs::getcwd(Process*, char*, int)>:
c000ac1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac1e:	31 c0                	xor    eax,eax
c000ac20:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ac24:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ac27:	7d 15                	jge    c000ac3e <Fs::getcwd(Process*, char*, int)+0x24>
c000ac29:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ac2d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ac34:	84 c9                	test   cl,cl
c000ac36:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ac39:	74 06                	je     c000ac41 <Fs::getcwd(Process*, char*, int)+0x27>
c000ac3b:	40                   	inc    eax
c000ac3c:	eb e2                	jmp    c000ac20 <Fs::getcwd(Process*, char*, int)+0x6>
c000ac3e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ac41:	31 c0                	xor    eax,eax
c000ac43:	c3                   	ret    

c000ac44 <Fs::initVFS()>:
c000ac44:	83 ec 18             	sub    esp,0x18
c000ac47:	6a 08                	push   0x8
c000ac49:	e8 e1 cd ff ff       	call   c0007a2f <malloc>
c000ac4e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac51:	e8 d6 dd 00 00       	call   c0018a2c <FAT::FAT()>
c000ac56:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ac5d:	e8 cd cd ff ff       	call   c0007a2f <malloc>
c000ac62:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac65:	e8 e6 ec 00 00       	call   c0019950 <ISO9660::ISO9660()>
c000ac6a:	83 c4 1c             	add    esp,0x1c
c000ac6d:	c3                   	ret    

c000ac6e <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ac6e:	55                   	push   ebp
c000ac6f:	57                   	push   edi
c000ac70:	56                   	push   esi
c000ac71:	53                   	push   ebx
c000ac72:	81 ec 20 04 00 00    	sub    esp,0x420
c000ac78:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000ac7f:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000ac86:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000ac8d:	68 00 04 00 00       	push   0x400
c000ac92:	6a 00                	push   0x0
c000ac94:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ac98:	56                   	push   esi
c000ac99:	e8 52 58 ff ff       	call   c00004f0 <memset>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000aca5:	75 0b                	jne    c000acb2 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aca7:	50                   	push   eax
c000aca8:	50                   	push   eax
c000aca9:	57                   	push   edi
c000acaa:	56                   	push   esi
c000acab:	e8 40 59 ff ff       	call   c00005f0 <strcpy>
c000acb0:	eb 45                	jmp    c000acf7 <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000acb2:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000acb5:	83 f8 2f             	cmp    eax,0x2f
c000acb8:	74 05                	je     c000acbf <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000acba:	83 f8 5c             	cmp    eax,0x5c
c000acbd:	75 19                	jne    c000acd8 <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000acbf:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000acc2:	3c 60                	cmp    al,0x60
c000acc4:	7e 03                	jle    c000acc9 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000acc6:	83 e8 20             	sub    eax,0x20
c000acc9:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000accd:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000acd4:	50                   	push   eax
c000acd5:	50                   	push   eax
c000acd6:	eb 18                	jmp    c000acf0 <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000acd8:	50                   	push   eax
c000acd9:	50                   	push   eax
c000acda:	55                   	push   ebp
c000acdb:	56                   	push   esi
c000acdc:	e8 0f 59 ff ff       	call   c00005f0 <strcpy>
c000ace1:	5a                   	pop    edx
c000ace2:	59                   	pop    ecx
c000ace3:	68 fb 10 02 c0       	push   0xc00210fb
c000ace8:	56                   	push   esi
c000ace9:	e8 d2 5a ff ff       	call   c00007c0 <strcat>
c000acee:	5d                   	pop    ebp
c000acef:	58                   	pop    eax
c000acf0:	57                   	push   edi
c000acf1:	56                   	push   esi
c000acf2:	e8 c9 5a ff ff       	call   c00007c0 <strcat>
c000acf7:	83 c4 10             	add    esp,0x10
c000acfa:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000acfe:	3c 60                	cmp    al,0x60
c000ad00:	7e 03                	jle    c000ad05 <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000ad02:	83 e8 20             	sub    eax,0x20
c000ad05:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000ad09:	88 03                	mov    BYTE PTR [ebx],al
c000ad0b:	b8 03 00 00 00       	mov    eax,0x3
c000ad10:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000ad17:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ad1d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ad21:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000ad29:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ad2d:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000ad32:	89 fa                	mov    edx,edi
c000ad34:	0f be ea             	movsx  ebp,dl
c000ad37:	85 ed                	test   ebp,ebp
c000ad39:	0f 84 af 00 00 00    	je     c000adee <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000ad3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad43:	42                   	inc    edx
c000ad44:	83 fd 2f             	cmp    ebp,0x2f
c000ad47:	74 05                	je     c000ad4e <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000ad49:	83 fd 5c             	cmp    ebp,0x5c
c000ad4c:	75 14                	jne    c000ad62 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000ad4e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ad53:	89 c5                	mov    ebp,eax
c000ad55:	74 0b                	je     c000ad62 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000ad57:	40                   	inc    eax
c000ad58:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000ad5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad60:	eb c7                	jmp    c000ad29 <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000ad62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ad66:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000ad6b:	89 f9                	mov    ecx,edi
c000ad6d:	0f be e9             	movsx  ebp,cl
c000ad70:	75 63                	jne    c000add5 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000ad72:	83 fd 2e             	cmp    ebp,0x2e
c000ad75:	75 5e                	jne    c000add5 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000ad77:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ad7b:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000ad80:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000ad85:	74 18                	je     c000ad9f <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000ad87:	83 fd 2e             	cmp    ebp,0x2e
c000ad8a:	74 57                	je     c000ade3 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000ad8c:	89 ca                	mov    edx,ecx
c000ad8e:	42                   	inc    edx
c000ad8f:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000ad93:	83 f9 2f             	cmp    ecx,0x2f
c000ad96:	74 f6                	je     c000ad8e <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000ad98:	83 f9 5c             	cmp    ecx,0x5c
c000ad9b:	74 f1                	je     c000ad8e <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000ad9d:	eb bd                	jmp    c000ad5c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ad9f:	83 fd 2e             	cmp    ebp,0x2e
c000ada2:	74 3f                	je     c000ade3 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000ada4:	83 f8 03             	cmp    eax,0x3
c000ada7:	74 b3                	je     c000ad5c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ada9:	42                   	inc    edx
c000adaa:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000adae:	83 f9 2f             	cmp    ecx,0x2f
c000adb1:	74 f6                	je     c000ada9 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000adb3:	83 f9 5c             	cmp    ecx,0x5c
c000adb6:	74 f1                	je     c000ada9 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000adb8:	48                   	dec    eax
c000adb9:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000adbd:	75 06                	jne    c000adc5 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000adbf:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000adc3:	eb f3                	jmp    c000adb8 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000adc5:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000adc9:	74 07                	je     c000add2 <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000adcb:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000adcf:	48                   	dec    eax
c000add0:	eb f3                	jmp    c000adc5 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000add2:	40                   	inc    eax
c000add3:	eb 87                	jmp    c000ad5c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000add5:	83 fd 2f             	cmp    ebp,0x2f
c000add8:	74 82                	je     c000ad5c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000adda:	83 fd 5c             	cmp    ebp,0x5c
c000addd:	0f 84 79 ff ff ff    	je     c000ad5c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000ade3:	89 f9                	mov    ecx,edi
c000ade5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000ade8:	40                   	inc    eax
c000ade9:	e9 6e ff ff ff       	jmp    c000ad5c <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000adee:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000adf2:	83 ec 0c             	sub    esp,0xc
c000adf5:	53                   	push   ebx
c000adf6:	e8 25 57 ff ff       	call   c0000520 <strlen>
c000adfb:	83 c4 10             	add    esp,0x10
c000adfe:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ae03:	75 26                	jne    c000ae2b <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000ae05:	83 ec 0c             	sub    esp,0xc
c000ae08:	53                   	push   ebx
c000ae09:	e8 12 57 ff ff       	call   c0000520 <strlen>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ae16:	74 26                	je     c000ae3e <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000ae18:	83 ec 0c             	sub    esp,0xc
c000ae1b:	53                   	push   ebx
c000ae1c:	e8 ff 56 ff ff       	call   c0000520 <strlen>
c000ae21:	83 c4 10             	add    esp,0x10
c000ae24:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ae29:	eb c7                	jmp    c000adf2 <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000ae2b:	83 ec 0c             	sub    esp,0xc
c000ae2e:	53                   	push   ebx
c000ae2f:	e8 ec 56 ff ff       	call   c0000520 <strlen>
c000ae34:	83 c4 10             	add    esp,0x10
c000ae37:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ae3c:	74 c7                	je     c000ae05 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000ae3e:	81 c4 1c 04 00 00    	add    esp,0x41c
c000ae44:	5b                   	pop    ebx
c000ae45:	5e                   	pop    esi
c000ae46:	5f                   	pop    edi
c000ae47:	5d                   	pop    ebp
c000ae48:	c3                   	ret    
c000ae49:	90                   	nop

c000ae4a <File::File(char const*, Process*)>:
c000ae4a:	83 ec 0c             	sub    esp,0xc
c000ae4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae51:	83 ec 08             	sub    esp,0x8
c000ae54:	6a 00                	push   0x0
c000ae56:	50                   	push   eax
c000ae57:	e8 c2 e2 ff ff       	call   c000911e <UnixFile::UnixFile(int)>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	ba 10 02 02 c0       	mov    edx,0xc0020210
c000ae64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae68:	89 10                	mov    DWORD PTR [eax],edx
c000ae6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ae6e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000ae74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae78:	83 c0 0d             	add    eax,0xd
c000ae7b:	83 ec 04             	sub    esp,0x4
c000ae7e:	52                   	push   edx
c000ae7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae83:	50                   	push   eax
c000ae84:	e8 e5 fd ff ff       	call   c000ac6e <Fs::standardiseFiles(char*, char const*, char const*)>
c000ae89:	83 c4 10             	add    esp,0x10
c000ae8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae90:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ae93:	83 e8 41             	sub    eax,0x41
c000ae96:	88 c2                	mov    dl,al
c000ae98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae9c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aeaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeae:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aeb4:	0f b6 c0             	movzx  eax,al
c000aeb7:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aebe:	85 c0                	test   eax,eax
c000aec0:	74 3e                	je     c000af00 <File::File(char const*, Process*)+0xb6>
c000aec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aecc:	0f b6 c0             	movzx  eax,al
c000aecf:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aed6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aedc:	85 c0                	test   eax,eax
c000aede:	75 20                	jne    c000af00 <File::File(char const*, Process*)+0xb6>
c000aee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aeea:	0f b6 c0             	movzx  eax,al
c000aeed:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aef4:	83 ec 0c             	sub    esp,0xc
c000aef7:	50                   	push   eax
c000aef8:	e8 2f 21 00 00       	call   c000d02c <LogicalDisk::mount()>
c000aefd:	83 c4 10             	add    esp,0x10
c000af00:	90                   	nop
c000af01:	83 c4 0c             	add    esp,0xc
c000af04:	c3                   	ret    
c000af05:	90                   	nop

c000af06 <File::open(FileOpenMode)>:
c000af06:	53                   	push   ebx
c000af07:	b8 0b 00 00 00       	mov    eax,0xb
c000af0c:	83 ec 08             	sub    esp,0x8
c000af0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af13:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000af1a:	83 fa 19             	cmp    edx,0x19
c000af1d:	77 40                	ja     c000af5f <File::open(FileOpenMode)+0x59>
c000af1f:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000af26:	85 d2                	test   edx,edx
c000af28:	74 35                	je     c000af5f <File::open(FileOpenMode)+0x59>
c000af2a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000af30:	85 d2                	test   edx,edx
c000af32:	74 2b                	je     c000af5f <File::open(FileOpenMode)+0x59>
c000af34:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000af38:	b8 06 00 00 00       	mov    eax,0x6
c000af3d:	75 20                	jne    c000af5f <File::open(FileOpenMode)+0x59>
c000af3f:	8b 02                	mov    eax,DWORD PTR [edx]
c000af41:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000af47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af4b:	51                   	push   ecx
c000af4c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000af4f:	51                   	push   ecx
c000af50:	52                   	push   edx
c000af51:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000af54:	83 c4 10             	add    esp,0x10
c000af57:	85 c0                	test   eax,eax
c000af59:	75 04                	jne    c000af5f <File::open(FileOpenMode)+0x59>
c000af5b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000af5f:	83 c4 08             	add    esp,0x8
c000af62:	5b                   	pop    ebx
c000af63:	c3                   	ret    

c000af64 <File::close()>:
c000af64:	53                   	push   ebx
c000af65:	b8 0b 00 00 00       	mov    eax,0xb
c000af6a:	83 ec 08             	sub    esp,0x8
c000af6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000af71:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af78:	83 f9 19             	cmp    ecx,0x19
c000af7b:	77 41                	ja     c000afbe <File::close()+0x5a>
c000af7d:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000af84:	85 db                	test   ebx,ebx
c000af86:	74 36                	je     c000afbe <File::close()+0x5a>
c000af88:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000af8f:	74 2d                	je     c000afbe <File::close()+0x5a>
c000af91:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af95:	b8 05 00 00 00       	mov    eax,0x5
c000af9a:	74 22                	je     c000afbe <File::close()+0x5a>
c000af9c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000afa0:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000afa7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000afad:	53                   	push   ebx
c000afae:	53                   	push   ebx
c000afaf:	8b 08                	mov    ecx,DWORD PTR [eax]
c000afb1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000afb7:	50                   	push   eax
c000afb8:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000afbb:	83 c4 10             	add    esp,0x10
c000afbe:	83 c4 08             	add    esp,0x8
c000afc1:	5b                   	pop    ebx
c000afc2:	c3                   	ret    
c000afc3:	90                   	nop

c000afc4 <File::seek(unsigned long long)>:
c000afc4:	56                   	push   esi
c000afc5:	b8 0b 00 00 00       	mov    eax,0xb
c000afca:	53                   	push   ebx
c000afcb:	51                   	push   ecx
c000afcc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000afd0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000afd4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000afd8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000afdf:	83 fa 19             	cmp    edx,0x19
c000afe2:	77 31                	ja     c000b015 <File::seek(unsigned long long)+0x51>
c000afe4:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000afeb:	85 d2                	test   edx,edx
c000afed:	74 26                	je     c000b015 <File::seek(unsigned long long)+0x51>
c000afef:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000aff5:	85 d2                	test   edx,edx
c000aff7:	74 1c                	je     c000b015 <File::seek(unsigned long long)+0x51>
c000aff9:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000affd:	b8 05 00 00 00       	mov    eax,0x5
c000b002:	74 11                	je     c000b015 <File::seek(unsigned long long)+0x51>
c000b004:	8b 02                	mov    eax,DWORD PTR [edx]
c000b006:	53                   	push   ebx
c000b007:	51                   	push   ecx
c000b008:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b00e:	52                   	push   edx
c000b00f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b012:	83 c4 10             	add    esp,0x10
c000b015:	5a                   	pop    edx
c000b016:	5b                   	pop    ebx
c000b017:	5e                   	pop    esi
c000b018:	c3                   	ret    
c000b019:	90                   	nop

c000b01a <File::tell(unsigned long long*)>:
c000b01a:	83 ec 0c             	sub    esp,0xc
c000b01d:	b8 0b 00 00 00       	mov    eax,0xb
c000b022:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b026:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b02d:	83 fa 19             	cmp    edx,0x19
c000b030:	77 34                	ja     c000b066 <File::tell(unsigned long long*)+0x4c>
c000b032:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b039:	85 d2                	test   edx,edx
c000b03b:	74 29                	je     c000b066 <File::tell(unsigned long long*)+0x4c>
c000b03d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b043:	85 d2                	test   edx,edx
c000b045:	74 1f                	je     c000b066 <File::tell(unsigned long long*)+0x4c>
c000b047:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b04b:	b8 05 00 00 00       	mov    eax,0x5
c000b050:	74 14                	je     c000b066 <File::tell(unsigned long long*)+0x4c>
c000b052:	50                   	push   eax
c000b053:	8b 02                	mov    eax,DWORD PTR [edx]
c000b055:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b059:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b05f:	52                   	push   edx
c000b060:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b063:	83 c4 10             	add    esp,0x10
c000b066:	83 c4 0c             	add    esp,0xc
c000b069:	c3                   	ret    

c000b06a <File::rewind()>:
c000b06a:	83 ec 10             	sub    esp,0x10
c000b06d:	6a 00                	push   0x0
c000b06f:	6a 00                	push   0x0
c000b071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b075:	e8 4a ff ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c000b07a:	83 c4 1c             	add    esp,0x1c
c000b07d:	c3                   	ret    

c000b07e <File::unlink()>:
c000b07e:	83 ec 0c             	sub    esp,0xc
c000b081:	b8 0b 00 00 00       	mov    eax,0xb
c000b086:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b08a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b091:	83 f9 19             	cmp    ecx,0x19
c000b094:	77 2f                	ja     c000b0c5 <File::unlink()+0x47>
c000b096:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b09d:	85 c9                	test   ecx,ecx
c000b09f:	74 24                	je     c000b0c5 <File::unlink()+0x47>
c000b0a1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b0a7:	85 c9                	test   ecx,ecx
c000b0a9:	74 1a                	je     c000b0c5 <File::unlink()+0x47>
c000b0ab:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b0af:	b8 06 00 00 00       	mov    eax,0x6
c000b0b4:	75 0f                	jne    c000b0c5 <File::unlink()+0x47>
c000b0b6:	50                   	push   eax
c000b0b7:	83 c2 0d             	add    edx,0xd
c000b0ba:	50                   	push   eax
c000b0bb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b0bd:	52                   	push   edx
c000b0be:	51                   	push   ecx
c000b0bf:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b0c2:	83 c4 10             	add    esp,0x10
c000b0c5:	83 c4 0c             	add    esp,0xc
c000b0c8:	c3                   	ret    
c000b0c9:	90                   	nop

c000b0ca <File::rename(char const*)>:
c000b0ca:	83 ec 0c             	sub    esp,0xc
c000b0cd:	b8 0b 00 00 00       	mov    eax,0xb
c000b0d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b0d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b0dd:	83 f9 19             	cmp    ecx,0x19
c000b0e0:	77 32                	ja     c000b114 <File::rename(char const*)+0x4a>
c000b0e2:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b0e9:	85 c9                	test   ecx,ecx
c000b0eb:	74 27                	je     c000b114 <File::rename(char const*)+0x4a>
c000b0ed:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b0f3:	85 c9                	test   ecx,ecx
c000b0f5:	74 1d                	je     c000b114 <File::rename(char const*)+0x4a>
c000b0f7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b0fb:	b8 06 00 00 00       	mov    eax,0x6
c000b100:	75 12                	jne    c000b114 <File::rename(char const*)+0x4a>
c000b102:	50                   	push   eax
c000b103:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b105:	83 c2 0d             	add    edx,0xd
c000b108:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b10c:	52                   	push   edx
c000b10d:	51                   	push   ecx
c000b10e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b111:	83 c4 10             	add    esp,0x10
c000b114:	83 c4 0c             	add    esp,0xc
c000b117:	c3                   	ret    

c000b118 <File::chfatattr(unsigned char, unsigned char)>:
c000b118:	57                   	push   edi
c000b119:	b8 0b 00 00 00       	mov    eax,0xb
c000b11e:	56                   	push   esi
c000b11f:	53                   	push   ebx
c000b120:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b124:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b128:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b12c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b133:	83 f9 19             	cmp    ecx,0x19
c000b136:	77 37                	ja     c000b16f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b138:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b13f:	85 c9                	test   ecx,ecx
c000b141:	74 2c                	je     c000b16f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b143:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b149:	85 c9                	test   ecx,ecx
c000b14b:	74 22                	je     c000b16f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b14d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b151:	b8 06 00 00 00       	mov    eax,0x6
c000b156:	75 17                	jne    c000b16f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b158:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b15a:	89 f0                	mov    eax,esi
c000b15c:	83 c2 0d             	add    edx,0xd
c000b15f:	0f b6 db             	movzx  ebx,bl
c000b162:	0f b6 f0             	movzx  esi,al
c000b165:	56                   	push   esi
c000b166:	53                   	push   ebx
c000b167:	52                   	push   edx
c000b168:	51                   	push   ecx
c000b169:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	5b                   	pop    ebx
c000b170:	5e                   	pop    esi
c000b171:	5f                   	pop    edi
c000b172:	c3                   	ret    
c000b173:	90                   	nop

c000b174 <File::exists()>:
c000b174:	83 ec 0c             	sub    esp,0xc
c000b177:	31 c0                	xor    eax,eax
c000b179:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b17d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b184:	83 f9 19             	cmp    ecx,0x19
c000b187:	77 24                	ja     c000b1ad <File::exists()+0x39>
c000b189:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b190:	85 c9                	test   ecx,ecx
c000b192:	74 19                	je     c000b1ad <File::exists()+0x39>
c000b194:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b19a:	85 c9                	test   ecx,ecx
c000b19c:	74 0f                	je     c000b1ad <File::exists()+0x39>
c000b19e:	50                   	push   eax
c000b19f:	83 c2 0d             	add    edx,0xd
c000b1a2:	50                   	push   eax
c000b1a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1a5:	52                   	push   edx
c000b1a6:	51                   	push   ecx
c000b1a7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	83 c4 0c             	add    esp,0xc
c000b1b0:	c3                   	ret    
c000b1b1:	90                   	nop

c000b1b2 <File::stat(unsigned long long*, bool*)>:
c000b1b2:	56                   	push   esi
c000b1b3:	53                   	push   ebx
c000b1b4:	50                   	push   eax
c000b1b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1b9:	b8 0b 00 00 00       	mov    eax,0xb
c000b1be:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b1c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b1c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1cd:	83 f9 19             	cmp    ecx,0x19
c000b1d0:	77 3d                	ja     c000b20f <File::stat(unsigned long long*, bool*)+0x5d>
c000b1d2:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1d9:	85 c9                	test   ecx,ecx
c000b1db:	74 32                	je     c000b20f <File::stat(unsigned long long*, bool*)+0x5d>
c000b1dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1e3:	85 c9                	test   ecx,ecx
c000b1e5:	74 28                	je     c000b20f <File::stat(unsigned long long*, bool*)+0x5d>
c000b1e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1ed:	74 13                	je     c000b202 <File::stat(unsigned long long*, bool*)+0x50>
c000b1ef:	83 ec 04             	sub    esp,0x4
c000b1f2:	56                   	push   esi
c000b1f3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b1f9:	51                   	push   ecx
c000b1fa:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b1fd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b200:	eb 0a                	jmp    c000b20c <File::stat(unsigned long long*, bool*)+0x5a>
c000b202:	83 c2 0d             	add    edx,0xd
c000b205:	53                   	push   ebx
c000b206:	56                   	push   esi
c000b207:	52                   	push   edx
c000b208:	51                   	push   ecx
c000b209:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b20c:	83 c4 10             	add    esp,0x10
c000b20f:	5a                   	pop    edx
c000b210:	5b                   	pop    ebx
c000b211:	5e                   	pop    esi
c000b212:	c3                   	ret    

c000b213 <Fs::setcwd(Process*, char*)>:
c000b213:	55                   	push   ebp
c000b214:	57                   	push   edi
c000b215:	56                   	push   esi
c000b216:	53                   	push   ebx
c000b217:	81 ec 20 02 00 00    	sub    esp,0x220
c000b21d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b224:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b22a:	57                   	push   edi
c000b22b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b232:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b236:	56                   	push   esi
c000b237:	e8 32 fa ff ff       	call   c000ac6e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b23c:	89 34 24             	mov    DWORD PTR [esp],esi
c000b23f:	e8 dc 52 ff ff       	call   c0000520 <strlen>
c000b244:	83 c4 10             	add    esp,0x10
c000b247:	83 f8 02             	cmp    eax,0x2
c000b24a:	77 15                	ja     c000b261 <Fs::setcwd(Process*, char*)+0x4e>
c000b24c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b251:	83 eb 41             	sub    ebx,0x41
c000b254:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b25b:	85 c0                	test   eax,eax
c000b25d:	75 1c                	jne    c000b27b <Fs::setcwd(Process*, char*)+0x68>
c000b25f:	eb 2f                	jmp    c000b290 <Fs::setcwd(Process*, char*)+0x7d>
c000b261:	83 ec 0c             	sub    esp,0xc
c000b264:	56                   	push   esi
c000b265:	e8 b6 52 ff ff       	call   c0000520 <strlen>
c000b26a:	83 c4 10             	add    esp,0x10
c000b26d:	83 f8 03             	cmp    eax,0x3
c000b270:	75 57                	jne    c000b2c9 <Fs::setcwd(Process*, char*)+0xb6>
c000b272:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b277:	75 50                	jne    c000b2c9 <Fs::setcwd(Process*, char*)+0xb6>
c000b279:	eb d1                	jmp    c000b24c <Fs::setcwd(Process*, char*)+0x39>
c000b27b:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b282:	75 0c                	jne    c000b290 <Fs::setcwd(Process*, char*)+0x7d>
c000b284:	83 ec 0c             	sub    esp,0xc
c000b287:	50                   	push   eax
c000b288:	e8 9f 1d 00 00       	call   c000d02c <LogicalDisk::mount()>
c000b28d:	83 c4 10             	add    esp,0x10
c000b290:	83 fb 19             	cmp    ebx,0x19
c000b293:	b8 03 00 00 00       	mov    eax,0x3
c000b298:	0f 87 c6 00 00 00    	ja     c000b364 <Fs::setcwd(Process*, char*)+0x151>
c000b29e:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b2a5:	b8 05 00 00 00       	mov    eax,0x5
c000b2aa:	85 d2                	test   edx,edx
c000b2ac:	0f 84 b2 00 00 00    	je     c000b364 <Fs::setcwd(Process*, char*)+0x151>
c000b2b2:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b2b9:	b8 06 00 00 00       	mov    eax,0x6
c000b2be:	0f 85 92 00 00 00    	jne    c000b356 <Fs::setcwd(Process*, char*)+0x143>
c000b2c4:	e9 9b 00 00 00       	jmp    c000b364 <Fs::setcwd(Process*, char*)+0x151>
c000b2c9:	83 ec 0c             	sub    esp,0xc
c000b2cc:	68 14 01 00 00       	push   0x114
c000b2d1:	e8 59 c7 ff ff       	call   c0007a2f <malloc>
c000b2d6:	83 c4 0c             	add    esp,0xc
c000b2d9:	55                   	push   ebp
c000b2da:	89 c3                	mov    ebx,eax
c000b2dc:	56                   	push   esi
c000b2dd:	50                   	push   eax
c000b2de:	e8 67 fb ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c000b2e3:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b2e8:	83 c4 0c             	add    esp,0xc
c000b2eb:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b2ef:	50                   	push   eax
c000b2f0:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b2f4:	50                   	push   eax
c000b2f5:	53                   	push   ebx
c000b2f6:	e8 b7 fe ff ff       	call   c000b1b2 <File::stat(unsigned long long*, bool*)>
c000b2fb:	83 c4 10             	add    esp,0x10
c000b2fe:	83 f8 02             	cmp    eax,0x2
c000b301:	74 27                	je     c000b32a <Fs::setcwd(Process*, char*)+0x117>
c000b303:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b308:	75 1c                	jne    c000b326 <Fs::setcwd(Process*, char*)+0x113>
c000b30a:	85 db                	test   ebx,ebx
c000b30c:	b8 02 00 00 00       	mov    eax,0x2
c000b311:	74 51                	je     c000b364 <Fs::setcwd(Process*, char*)+0x151>
c000b313:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b315:	83 ec 0c             	sub    esp,0xc
c000b318:	53                   	push   ebx
c000b319:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b31c:	83 c4 10             	add    esp,0x10
c000b31f:	b8 02 00 00 00       	mov    eax,0x2
c000b324:	eb 3e                	jmp    c000b364 <Fs::setcwd(Process*, char*)+0x151>
c000b326:	85 c0                	test   eax,eax
c000b328:	74 1c                	je     c000b346 <Fs::setcwd(Process*, char*)+0x133>
c000b32a:	85 db                	test   ebx,ebx
c000b32c:	b8 01 00 00 00       	mov    eax,0x1
c000b331:	74 31                	je     c000b364 <Fs::setcwd(Process*, char*)+0x151>
c000b333:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b335:	83 ec 0c             	sub    esp,0xc
c000b338:	53                   	push   ebx
c000b339:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b33c:	83 c4 10             	add    esp,0x10
c000b33f:	b8 01 00 00 00       	mov    eax,0x1
c000b344:	eb 1e                	jmp    c000b364 <Fs::setcwd(Process*, char*)+0x151>
c000b346:	85 db                	test   ebx,ebx
c000b348:	74 0c                	je     c000b356 <Fs::setcwd(Process*, char*)+0x143>
c000b34a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b34c:	83 ec 0c             	sub    esp,0xc
c000b34f:	53                   	push   ebx
c000b350:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b353:	83 c4 10             	add    esp,0x10
c000b356:	50                   	push   eax
c000b357:	50                   	push   eax
c000b358:	56                   	push   esi
c000b359:	57                   	push   edi
c000b35a:	e8 91 52 ff ff       	call   c00005f0 <strcpy>
c000b35f:	83 c4 10             	add    esp,0x10
c000b362:	31 c0                	xor    eax,eax
c000b364:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b36a:	5b                   	pop    ebx
c000b36b:	5e                   	pop    esi
c000b36c:	5f                   	pop    edi
c000b36d:	5d                   	pop    ebp
c000b36e:	c3                   	ret    
c000b36f:	90                   	nop

c000b370 <Directory::Directory(char const*, Process*)>:
c000b370:	83 ec 0c             	sub    esp,0xc
c000b373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b377:	83 ec 08             	sub    esp,0x8
c000b37a:	6a 00                	push   0x0
c000b37c:	50                   	push   eax
c000b37d:	e8 9c dd ff ff       	call   c000911e <UnixFile::UnixFile(int)>
c000b382:	83 c4 10             	add    esp,0x10
c000b385:	ba 2c 02 02 c0       	mov    edx,0xc002022c
c000b38a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b38e:	89 10                	mov    DWORD PTR [eax],edx
c000b390:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b394:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b39e:	83 c0 0d             	add    eax,0xd
c000b3a1:	83 ec 04             	sub    esp,0x4
c000b3a4:	52                   	push   edx
c000b3a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a9:	50                   	push   eax
c000b3aa:	e8 bf f8 ff ff       	call   c000ac6e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b3af:	83 c4 10             	add    esp,0x10
c000b3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3b6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b3b9:	83 e8 41             	sub    eax,0x41
c000b3bc:	88 c2                	mov    dl,al
c000b3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b3c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3cc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b3d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b3da:	0f b6 c0             	movzx  eax,al
c000b3dd:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b3e4:	85 c0                	test   eax,eax
c000b3e6:	74 3e                	je     c000b426 <Directory::Directory(char const*, Process*)+0xb6>
c000b3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ec:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b3f2:	0f b6 c0             	movzx  eax,al
c000b3f5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b3fc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b402:	85 c0                	test   eax,eax
c000b404:	75 20                	jne    c000b426 <Directory::Directory(char const*, Process*)+0xb6>
c000b406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b410:	0f b6 c0             	movzx  eax,al
c000b413:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b41a:	83 ec 0c             	sub    esp,0xc
c000b41d:	50                   	push   eax
c000b41e:	e8 09 1c 00 00       	call   c000d02c <LogicalDisk::mount()>
c000b423:	83 c4 10             	add    esp,0x10
c000b426:	90                   	nop
c000b427:	83 c4 0c             	add    esp,0xc
c000b42a:	c3                   	ret    
c000b42b:	90                   	nop

c000b42c <Directory::open()>:
c000b42c:	53                   	push   ebx
c000b42d:	b8 0b 00 00 00       	mov    eax,0xb
c000b432:	83 ec 08             	sub    esp,0x8
c000b435:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b439:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b440:	83 fa 19             	cmp    edx,0x19
c000b443:	77 3d                	ja     c000b482 <Directory::open()+0x56>
c000b445:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b44c:	85 d2                	test   edx,edx
c000b44e:	74 32                	je     c000b482 <Directory::open()+0x56>
c000b450:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b456:	85 d2                	test   edx,edx
c000b458:	74 28                	je     c000b482 <Directory::open()+0x56>
c000b45a:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b45e:	b8 06 00 00 00       	mov    eax,0x6
c000b463:	75 1d                	jne    c000b482 <Directory::open()+0x56>
c000b465:	50                   	push   eax
c000b466:	8b 02                	mov    eax,DWORD PTR [edx]
c000b468:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b46e:	51                   	push   ecx
c000b46f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b472:	51                   	push   ecx
c000b473:	52                   	push   edx
c000b474:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b477:	83 c4 10             	add    esp,0x10
c000b47a:	85 c0                	test   eax,eax
c000b47c:	75 04                	jne    c000b482 <Directory::open()+0x56>
c000b47e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b482:	83 c4 08             	add    esp,0x8
c000b485:	5b                   	pop    ebx
c000b486:	c3                   	ret    
c000b487:	90                   	nop

c000b488 <Directory::close()>:
c000b488:	53                   	push   ebx
c000b489:	b8 0b 00 00 00       	mov    eax,0xb
c000b48e:	83 ec 08             	sub    esp,0x8
c000b491:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b495:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b49c:	83 f9 19             	cmp    ecx,0x19
c000b49f:	77 41                	ja     c000b4e2 <Directory::close()+0x5a>
c000b4a1:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b4a8:	85 db                	test   ebx,ebx
c000b4aa:	74 36                	je     c000b4e2 <Directory::close()+0x5a>
c000b4ac:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b4b3:	74 2d                	je     c000b4e2 <Directory::close()+0x5a>
c000b4b5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b4b9:	b8 05 00 00 00       	mov    eax,0x5
c000b4be:	74 22                	je     c000b4e2 <Directory::close()+0x5a>
c000b4c0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b4c4:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b4cb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b4d1:	53                   	push   ebx
c000b4d2:	53                   	push   ebx
c000b4d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b4d5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b4db:	50                   	push   eax
c000b4dc:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b4df:	83 c4 10             	add    esp,0x10
c000b4e2:	83 c4 08             	add    esp,0x8
c000b4e5:	5b                   	pop    ebx
c000b4e6:	c3                   	ret    
c000b4e7:	90                   	nop

c000b4e8 <Directory::unlink()>:
c000b4e8:	83 ec 0c             	sub    esp,0xc
c000b4eb:	b8 0b 00 00 00       	mov    eax,0xb
c000b4f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4f4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4fb:	83 f9 19             	cmp    ecx,0x19
c000b4fe:	77 2f                	ja     c000b52f <Directory::unlink()+0x47>
c000b500:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b507:	85 c9                	test   ecx,ecx
c000b509:	74 24                	je     c000b52f <Directory::unlink()+0x47>
c000b50b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b511:	85 c9                	test   ecx,ecx
c000b513:	74 1a                	je     c000b52f <Directory::unlink()+0x47>
c000b515:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b519:	b8 06 00 00 00       	mov    eax,0x6
c000b51e:	75 0f                	jne    c000b52f <Directory::unlink()+0x47>
c000b520:	50                   	push   eax
c000b521:	83 c2 0d             	add    edx,0xd
c000b524:	50                   	push   eax
c000b525:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b527:	52                   	push   edx
c000b528:	51                   	push   ecx
c000b529:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b52c:	83 c4 10             	add    esp,0x10
c000b52f:	83 c4 0c             	add    esp,0xc
c000b532:	c3                   	ret    
c000b533:	90                   	nop

c000b534 <Directory::rename(char const*)>:
c000b534:	83 ec 0c             	sub    esp,0xc
c000b537:	b8 0b 00 00 00       	mov    eax,0xb
c000b53c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b540:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b547:	83 f9 19             	cmp    ecx,0x19
c000b54a:	77 32                	ja     c000b57e <Directory::rename(char const*)+0x4a>
c000b54c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b553:	85 c9                	test   ecx,ecx
c000b555:	74 27                	je     c000b57e <Directory::rename(char const*)+0x4a>
c000b557:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b55d:	85 c9                	test   ecx,ecx
c000b55f:	74 1d                	je     c000b57e <Directory::rename(char const*)+0x4a>
c000b561:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b565:	b8 06 00 00 00       	mov    eax,0x6
c000b56a:	75 12                	jne    c000b57e <Directory::rename(char const*)+0x4a>
c000b56c:	50                   	push   eax
c000b56d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b56f:	83 c2 0d             	add    edx,0xd
c000b572:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b576:	52                   	push   edx
c000b577:	51                   	push   ecx
c000b578:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b57b:	83 c4 10             	add    esp,0x10
c000b57e:	83 c4 0c             	add    esp,0xc
c000b581:	c3                   	ret    

c000b582 <Directory::exists()>:
c000b582:	83 ec 0c             	sub    esp,0xc
c000b585:	31 c0                	xor    eax,eax
c000b587:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b58b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b592:	83 f9 19             	cmp    ecx,0x19
c000b595:	77 24                	ja     c000b5bb <Directory::exists()+0x39>
c000b597:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b59e:	85 c9                	test   ecx,ecx
c000b5a0:	74 19                	je     c000b5bb <Directory::exists()+0x39>
c000b5a2:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b5a8:	85 c9                	test   ecx,ecx
c000b5aa:	74 0f                	je     c000b5bb <Directory::exists()+0x39>
c000b5ac:	50                   	push   eax
c000b5ad:	83 c2 0d             	add    edx,0xd
c000b5b0:	50                   	push   eax
c000b5b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5b3:	52                   	push   edx
c000b5b4:	51                   	push   ecx
c000b5b5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b5b8:	83 c4 10             	add    esp,0x10
c000b5bb:	83 c4 0c             	add    esp,0xc
c000b5be:	c3                   	ret    
c000b5bf:	90                   	nop

c000b5c0 <Directory::read(dirent*)>:
c000b5c0:	83 ec 1c             	sub    esp,0x1c
c000b5c3:	b8 0b 00 00 00       	mov    eax,0xb
c000b5c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b5cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5d3:	83 f9 19             	cmp    ecx,0x19
c000b5d6:	77 30                	ja     c000b608 <Directory::read(dirent*)+0x48>
c000b5d8:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5df:	85 c9                	test   ecx,ecx
c000b5e1:	74 25                	je     c000b608 <Directory::read(dirent*)+0x48>
c000b5e3:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b5ea:	74 1c                	je     c000b608 <Directory::read(dirent*)+0x48>
c000b5ec:	8b 02                	mov    eax,DWORD PTR [edx]
c000b5ee:	83 ec 0c             	sub    esp,0xc
c000b5f1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b5f5:	51                   	push   ecx
c000b5f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5fa:	6a 00                	push   0x0
c000b5fc:	68 10 01 00 00       	push   0x110
c000b601:	52                   	push   edx
c000b602:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b605:	83 c4 20             	add    esp,0x20
c000b608:	83 c4 1c             	add    esp,0x1c
c000b60b:	c3                   	ret    

c000b60c <Directory::create()>:
c000b60c:	83 ec 0c             	sub    esp,0xc
c000b60f:	b8 0b 00 00 00       	mov    eax,0xb
c000b614:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b618:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b61f:	83 f9 19             	cmp    ecx,0x19
c000b622:	77 2f                	ja     c000b653 <Directory::create()+0x47>
c000b624:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b62b:	85 c9                	test   ecx,ecx
c000b62d:	74 24                	je     c000b653 <Directory::create()+0x47>
c000b62f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b635:	85 c9                	test   ecx,ecx
c000b637:	74 1a                	je     c000b653 <Directory::create()+0x47>
c000b639:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b63d:	b8 06 00 00 00       	mov    eax,0x6
c000b642:	75 0f                	jne    c000b653 <Directory::create()+0x47>
c000b644:	50                   	push   eax
c000b645:	83 c2 0d             	add    edx,0xd
c000b648:	50                   	push   eax
c000b649:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b64b:	52                   	push   edx
c000b64c:	51                   	push   ecx
c000b64d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	83 c4 0c             	add    esp,0xc
c000b656:	c3                   	ret    
c000b657:	90                   	nop

c000b658 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b658:	b8 0a 00 00 00       	mov    eax,0xa
c000b65d:	c3                   	ret    
c000b65e:	66 90                	xchg   ax,ax

c000b660 <Bus::Bus(char const*)>:
c000b660:	83 ec 0c             	sub    esp,0xc
c000b663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b667:	83 ec 08             	sub    esp,0x8
c000b66a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66e:	50                   	push   eax
c000b66f:	e8 2a 08 00 00       	call   c000be9e <Device::Device(char const*)>
c000b674:	83 c4 10             	add    esp,0x10
c000b677:	ba 48 02 02 c0       	mov    edx,0xc0020248
c000b67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b680:	89 10                	mov    DWORD PTR [eax],edx
c000b682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b686:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b690:	90                   	nop
c000b691:	83 c4 0c             	add    esp,0xc
c000b694:	c3                   	ret    
c000b695:	90                   	nop
c000b696:	66 90                	xchg   ax,ax

c000b698 <Bus::~Bus()>:
c000b698:	83 ec 0c             	sub    esp,0xc
c000b69b:	ba 48 02 02 c0       	mov    edx,0xc0020248
c000b6a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6a4:	89 10                	mov    DWORD PTR [eax],edx
c000b6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6aa:	83 ec 0c             	sub    esp,0xc
c000b6ad:	50                   	push   eax
c000b6ae:	e8 55 05 00 00       	call   c000bc08 <Device::~Device()>
c000b6b3:	83 c4 10             	add    esp,0x10
c000b6b6:	90                   	nop
c000b6b7:	83 c4 0c             	add    esp,0xc
c000b6ba:	c3                   	ret    
c000b6bb:	90                   	nop

c000b6bc <Bus::~Bus()>:
c000b6bc:	83 ec 0c             	sub    esp,0xc
c000b6bf:	83 ec 0c             	sub    esp,0xc
c000b6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c6:	e8 cd ff ff ff       	call   c000b698 <Bus::~Bus()>
c000b6cb:	83 c4 10             	add    esp,0x10
c000b6ce:	83 ec 08             	sub    esp,0x8
c000b6d1:	68 58 01 00 00       	push   0x158
c000b6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6da:	e8 c4 f0 ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c000b6df:	83 c4 10             	add    esp,0x10
c000b6e2:	83 c4 0c             	add    esp,0xc
c000b6e5:	c3                   	ret    

c000b6e6 <beepThread(void*)>:
c000b6e6:	83 ec 0c             	sub    esp,0xc
c000b6e9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b6ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6f2:	48                   	dec    eax
c000b6f3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b6f8:	75 01                	jne    c000b6fb <beepThread(void*)+0x15>
c000b6fa:	fb                   	sti    
c000b6fb:	6b c2 0a             	imul   eax,edx,0xa
c000b6fe:	83 ec 0c             	sub    esp,0xc
c000b701:	50                   	push   eax
c000b702:	e8 e5 9b 00 00       	call   c00152ec <milliTenthSleep(unsigned int)>
c000b707:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b70e:	e8 a3 ba 00 00       	call   c00171b6 <HalMakeBeep(int)>
c000b713:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b71b:	83 c4 1c             	add    esp,0x1c
c000b71e:	e9 ad 9a 00 00       	jmp    c00151d0 <blockTask(TaskState)>

c000b723 <Krnl::beep(int, int, bool)>:
c000b723:	56                   	push   esi
c000b724:	53                   	push   ebx
c000b725:	83 ec 10             	sub    esp,0x10
c000b728:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b72c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b734:	e8 7d ba 00 00       	call   c00171b6 <HalMakeBeep(int)>
c000b739:	83 c4 10             	add    esp,0x10
c000b73c:	89 f0                	mov    eax,esi
c000b73e:	84 c0                	test   al,al
c000b740:	74 1e                	je     c000b760 <Krnl::beep(int, int, bool)+0x3d>
c000b742:	6b db 0a             	imul   ebx,ebx,0xa
c000b745:	83 ec 0c             	sub    esp,0xc
c000b748:	53                   	push   ebx
c000b749:	e8 9e 9b 00 00       	call   c00152ec <milliTenthSleep(unsigned int)>
c000b74e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b756:	83 c4 14             	add    esp,0x14
c000b759:	5b                   	pop    ebx
c000b75a:	5e                   	pop    esi
c000b75b:	e9 56 ba 00 00       	jmp    c00171b6 <HalMakeBeep(int)>
c000b760:	68 e6 00 00 00       	push   0xe6
c000b765:	53                   	push   ebx
c000b766:	68 e6 b6 00 c0       	push   0xc000b6e6
c000b76b:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b771:	e8 1a 96 00 00       	call   c0014d90 <Process::createThread(void (*)(void*), void*, int)>
c000b776:	83 c4 14             	add    esp,0x14
c000b779:	5b                   	pop    ebx
c000b77a:	5e                   	pop    esi
c000b77b:	c3                   	ret    

c000b77c <User::loadClockSettings(int)>:
c000b77c:	53                   	push   ebx
c000b77d:	83 ec 14             	sub    esp,0x14
c000b780:	68 14 01 00 00       	push   0x114
c000b785:	e8 a5 c2 ff ff       	call   c0007a2f <malloc>
c000b78a:	83 c4 0c             	add    esp,0xc
c000b78d:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b793:	68 6c 02 02 c0       	push   0xc002026c
c000b798:	89 c3                	mov    ebx,eax
c000b79a:	50                   	push   eax
c000b79b:	e8 aa f6 ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c000b7a0:	58                   	pop    eax
c000b7a1:	5a                   	pop    edx
c000b7a2:	6a 01                	push   0x1
c000b7a4:	53                   	push   ebx
c000b7a5:	e8 5c f7 ff ff       	call   c000af06 <File::open(FileOpenMode)>
c000b7aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b7ad:	e8 b2 f7 ff ff       	call   c000af64 <File::close()>
c000b7b2:	83 c4 10             	add    esp,0x10
c000b7b5:	85 db                	test   ebx,ebx
c000b7b7:	74 0f                	je     c000b7c8 <User::loadClockSettings(int)+0x4c>
c000b7b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b7bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b7bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b7c2:	83 c4 08             	add    esp,0x8
c000b7c5:	5b                   	pop    ebx
c000b7c6:	ff e0                	jmp    eax
c000b7c8:	83 c4 08             	add    esp,0x8
c000b7cb:	5b                   	pop    ebx
c000b7cc:	c3                   	ret    
c000b7cd:	90                   	nop

c000b7ce <Clock::Clock(char const*)>:
c000b7ce:	83 ec 0c             	sub    esp,0xc
c000b7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7d5:	83 ec 08             	sub    esp,0x8
c000b7d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7dc:	50                   	push   eax
c000b7dd:	e8 bc 06 00 00       	call   c000be9e <Device::Device(char const*)>
c000b7e2:	83 c4 10             	add    esp,0x10
c000b7e5:	ba 94 02 02 c0       	mov    edx,0xc0020294
c000b7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7ee:	89 10                	mov    DWORD PTR [eax],edx
c000b7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7f4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b7fe:	90                   	nop
c000b7ff:	83 c4 0c             	add    esp,0xc
c000b802:	c3                   	ret    
c000b803:	90                   	nop

c000b804 <Clock::~Clock()>:
c000b804:	83 ec 0c             	sub    esp,0xc
c000b807:	ba 94 02 02 c0       	mov    edx,0xc0020294
c000b80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b810:	89 10                	mov    DWORD PTR [eax],edx
c000b812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b816:	83 ec 0c             	sub    esp,0xc
c000b819:	50                   	push   eax
c000b81a:	e8 e9 03 00 00       	call   c000bc08 <Device::~Device()>
c000b81f:	83 c4 10             	add    esp,0x10
c000b822:	90                   	nop
c000b823:	83 c4 0c             	add    esp,0xc
c000b826:	c3                   	ret    
c000b827:	90                   	nop

c000b828 <Clock::~Clock()>:
c000b828:	83 ec 0c             	sub    esp,0xc
c000b82b:	83 ec 0c             	sub    esp,0xc
c000b82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b832:	e8 cd ff ff ff       	call   c000b804 <Clock::~Clock()>
c000b837:	83 c4 10             	add    esp,0x10
c000b83a:	83 ec 08             	sub    esp,0x8
c000b83d:	68 58 01 00 00       	push   0x158
c000b842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b846:	e8 58 ef ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c000b84b:	83 c4 10             	add    esp,0x10
c000b84e:	83 c4 0c             	add    esp,0xc
c000b851:	c3                   	ret    

c000b852 <Clock::timeInSecondsLocal()>:
c000b852:	53                   	push   ebx
c000b853:	83 ec 14             	sub    esp,0x14
c000b856:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b85a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b85c:	50                   	push   eax
c000b85d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b860:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b867:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b86d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b873:	89 cb                	mov    ebx,ecx
c000b875:	c1 fb 1f             	sar    ebx,0x1f
c000b878:	01 c8                	add    eax,ecx
c000b87a:	11 da                	adc    edx,ebx
c000b87c:	83 c4 10             	add    esp,0x10
c000b87f:	31 c9                	xor    ecx,ecx
c000b881:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b888:	74 05                	je     c000b88f <Clock::timeInSecondsLocal()+0x3d>
c000b88a:	b9 08 07 00 00       	mov    ecx,0x708
c000b88f:	31 db                	xor    ebx,ebx
c000b891:	01 c8                	add    eax,ecx
c000b893:	11 da                	adc    edx,ebx
c000b895:	83 c4 08             	add    esp,0x8
c000b898:	5b                   	pop    ebx
c000b899:	c3                   	ret    

c000b89a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b89a:	57                   	push   edi
c000b89b:	56                   	push   esi
c000b89c:	53                   	push   ebx
c000b89d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b8a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b8a5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b8a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8ab:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b8ae:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b8b5:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b8bb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b8c1:	99                   	cdq    
c000b8c2:	29 c6                	sub    esi,eax
c000b8c4:	19 d7                	sbb    edi,edx
c000b8c6:	89 f0                	mov    eax,esi
c000b8c8:	31 f6                	xor    esi,esi
c000b8ca:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b8d1:	89 fa                	mov    edx,edi
c000b8d3:	74 05                	je     c000b8da <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b8d5:	be 08 07 00 00       	mov    esi,0x708
c000b8da:	31 ff                	xor    edi,edi
c000b8dc:	29 f0                	sub    eax,esi
c000b8de:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b8e2:	19 fa                	sbb    edx,edi
c000b8e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8e8:	89 d8                	mov    eax,ebx
c000b8ea:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8ee:	5b                   	pop    ebx
c000b8ef:	5e                   	pop    esi
c000b8f0:	5f                   	pop    edi
c000b8f1:	ff e0                	jmp    eax

c000b8f3 <datetimeToSeconds(datetime_t)>:
c000b8f3:	55                   	push   ebp
c000b8f4:	57                   	push   edi
c000b8f5:	56                   	push   esi
c000b8f6:	53                   	push   ebx
c000b8f7:	83 ec 0c             	sub    esp,0xc
c000b8fa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b8fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b902:	89 f7                	mov    edi,esi
c000b904:	89 f0                	mov    eax,esi
c000b906:	0f b6 cf             	movzx  ecx,bh
c000b909:	c1 ef 10             	shr    edi,0x10
c000b90c:	0f b6 c4             	movzx  eax,ah
c000b90f:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000b912:	89 f9                	mov    ecx,edi
c000b914:	89 da                	mov    edx,ebx
c000b916:	0f b6 f9             	movzx  edi,cl
c000b919:	89 f1                	mov    ecx,esi
c000b91b:	c1 ea 10             	shr    edx,0x10
c000b91e:	6b c0 3c             	imul   eax,eax,0x3c
c000b921:	0f b6 f1             	movzx  esi,cl
c000b924:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000b92a:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000b930:	0f b6 db             	movzx  ebx,bl
c000b933:	01 f8                	add    eax,edi
c000b935:	01 f0                	add    eax,esi
c000b937:	89 c7                	mov    edi,eax
c000b939:	89 04 24             	mov    DWORD PTR [esp],eax
c000b93c:	89 e8                	mov    eax,ebp
c000b93e:	0f b6 c0             	movzx  eax,al
c000b941:	c1 ff 1f             	sar    edi,0x1f
c000b944:	8b 0c 85 e0 02 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfd20]
c000b94b:	83 f8 01             	cmp    eax,0x1
c000b94e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000b952:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000b956:	0f b7 da             	movzx  ebx,dx
c000b959:	76 27                	jbe    c000b982 <datetimeToSeconds(datetime_t)+0x8f>
c000b95b:	80 e2 03             	and    dl,0x3
c000b95e:	75 22                	jne    c000b982 <datetimeToSeconds(datetime_t)+0x8f>
c000b960:	31 d2                	xor    edx,edx
c000b962:	be 64 00 00 00       	mov    esi,0x64
c000b967:	89 d8                	mov    eax,ebx
c000b969:	f7 f6                	div    esi
c000b96b:	85 d2                	test   edx,edx
c000b96d:	75 12                	jne    c000b981 <datetimeToSeconds(datetime_t)+0x8e>
c000b96f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b975:	be 90 01 00 00       	mov    esi,0x190
c000b97a:	99                   	cdq    
c000b97b:	f7 fe                	idiv   esi
c000b97d:	85 d2                	test   edx,edx
c000b97f:	75 01                	jne    c000b982 <datetimeToSeconds(datetime_t)+0x8f>
c000b981:	41                   	inc    ecx
c000b982:	83 fb 46             	cmp    ebx,0x46
c000b985:	76 48                	jbe    c000b9cf <datetimeToSeconds(datetime_t)+0xdc>
c000b987:	be 46 00 00 00       	mov    esi,0x46
c000b98c:	f7 c6 03 00 00 00    	test   esi,0x3
c000b992:	b8 6d 01 00 00       	mov    eax,0x16d
c000b997:	75 2d                	jne    c000b9c6 <datetimeToSeconds(datetime_t)+0xd3>
c000b999:	89 f0                	mov    eax,esi
c000b99b:	bf 64 00 00 00       	mov    edi,0x64
c000b9a0:	99                   	cdq    
c000b9a1:	f7 ff                	idiv   edi
c000b9a3:	b8 6e 01 00 00       	mov    eax,0x16e
c000b9a8:	85 d2                	test   edx,edx
c000b9aa:	75 1a                	jne    c000b9c6 <datetimeToSeconds(datetime_t)+0xd3>
c000b9ac:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b9b2:	bf 90 01 00 00       	mov    edi,0x190
c000b9b7:	99                   	cdq    
c000b9b8:	f7 ff                	idiv   edi
c000b9ba:	83 fa 01             	cmp    edx,0x1
c000b9bd:	19 c0                	sbb    eax,eax
c000b9bf:	f7 d0                	not    eax
c000b9c1:	05 6e 01 00 00       	add    eax,0x16e
c000b9c6:	46                   	inc    esi
c000b9c7:	01 c1                	add    ecx,eax
c000b9c9:	39 de                	cmp    esi,ebx
c000b9cb:	7c bf                	jl     c000b98c <datetimeToSeconds(datetime_t)+0x99>
c000b9cd:	eb 34                	jmp    c000ba03 <datetimeToSeconds(datetime_t)+0x110>
c000b9cf:	74 32                	je     c000ba03 <datetimeToSeconds(datetime_t)+0x110>
c000b9d1:	b8 45 00 00 00       	mov    eax,0x45
c000b9d6:	89 c2                	mov    edx,eax
c000b9d8:	83 e2 03             	and    edx,0x3
c000b9db:	39 d8                	cmp    eax,ebx
c000b9dd:	7e 0f                	jle    c000b9ee <datetimeToSeconds(datetime_t)+0xfb>
c000b9df:	83 fa 01             	cmp    edx,0x1
c000b9e2:	19 d2                	sbb    edx,edx
c000b9e4:	48                   	dec    eax
c000b9e5:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000b9ec:	eb e8                	jmp    c000b9d6 <datetimeToSeconds(datetime_t)+0xe3>
c000b9ee:	85 d2                	test   edx,edx
c000b9f0:	b8 6d 01 00 00       	mov    eax,0x16d
c000b9f5:	75 0a                	jne    c000ba01 <datetimeToSeconds(datetime_t)+0x10e>
c000b9f7:	83 fb 01             	cmp    ebx,0x1
c000b9fa:	19 c0                	sbb    eax,eax
c000b9fc:	05 6e 01 00 00       	add    eax,0x16e
c000ba01:	29 c1                	sub    ecx,eax
c000ba03:	b8 80 51 01 00       	mov    eax,0x15180
c000ba08:	f7 e9                	imul   ecx
c000ba0a:	03 04 24             	add    eax,DWORD PTR [esp]
c000ba0d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000ba11:	83 c4 0c             	add    esp,0xc
c000ba14:	5b                   	pop    ebx
c000ba15:	5e                   	pop    esi
c000ba16:	5f                   	pop    edi
c000ba17:	5d                   	pop    ebp
c000ba18:	c3                   	ret    
c000ba19:	90                   	nop

c000ba1a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000ba1a:	57                   	push   edi
c000ba1b:	56                   	push   esi
c000ba1c:	53                   	push   ebx
c000ba1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba21:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba23:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000ba26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba2e:	e8 c0 fe ff ff       	call   c000b8f3 <datetimeToSeconds(datetime_t)>
c000ba33:	59                   	pop    ecx
c000ba34:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000ba3b:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000ba41:	5b                   	pop    ebx
c000ba42:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000ba48:	89 cb                	mov    ebx,ecx
c000ba4a:	c1 fb 1f             	sar    ebx,0x1f
c000ba4d:	29 c8                	sub    eax,ecx
c000ba4f:	19 da                	sbb    edx,ebx
c000ba51:	31 c9                	xor    ecx,ecx
c000ba53:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000ba5a:	74 05                	je     c000ba61 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000ba5c:	b9 08 07 00 00       	mov    ecx,0x708
c000ba61:	31 db                	xor    ebx,ebx
c000ba63:	29 c8                	sub    eax,ecx
c000ba65:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ba69:	19 da                	sbb    edx,ebx
c000ba6b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ba6f:	89 f8                	mov    eax,edi
c000ba71:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ba75:	5b                   	pop    ebx
c000ba76:	5e                   	pop    esi
c000ba77:	5f                   	pop    edi
c000ba78:	ff e0                	jmp    eax

c000ba7a <secondsToDatetime(unsigned long long)>:
c000ba7a:	55                   	push   ebp
c000ba7b:	57                   	push   edi
c000ba7c:	56                   	push   esi
c000ba7d:	53                   	push   ebx
c000ba7e:	83 ec 1c             	sub    esp,0x1c
c000ba81:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ba85:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000ba89:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ba8d:	6a 00                	push   0x0
c000ba8f:	68 80 51 01 00       	push   0x15180
c000ba94:	55                   	push   ebp
c000ba95:	57                   	push   edi
c000ba96:	e8 d5 2a 01 00       	call   c001e570 <__udivdi3>
c000ba9b:	83 c4 10             	add    esp,0x10
c000ba9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000baa2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000baa8:	6a 00                	push   0x0
c000baaa:	68 80 51 01 00       	push   0x15180
c000baaf:	55                   	push   ebp
c000bab0:	57                   	push   edi
c000bab1:	bf 10 0e 00 00       	mov    edi,0xe10
c000bab6:	e8 b5 2b 01 00       	call   c001e670 <__umoddi3>
c000babb:	83 c4 10             	add    esp,0x10
c000babe:	99                   	cdq    
c000babf:	f7 ff                	idiv   edi
c000bac1:	bf 3c 00 00 00       	mov    edi,0x3c
c000bac6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bac9:	89 d0                	mov    eax,edx
c000bacb:	99                   	cdq    
c000bacc:	f7 ff                	idiv   edi
c000bace:	85 db                	test   ebx,ebx
c000bad0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bad3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bad6:	79 11                	jns    c000bae9 <secondsToDatetime(unsigned long long)+0x6f>
c000bad8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000badc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bae2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bae7:	eb 07                	jmp    c000baf0 <secondsToDatetime(unsigned long long)+0x76>
c000bae9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000baee:	89 d8                	mov    eax,ebx
c000baf0:	99                   	cdq    
c000baf1:	bf b4 05 00 00       	mov    edi,0x5b4
c000baf6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bafb:	f7 f9                	idiv   ecx
c000bafd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bb02:	31 d2                	xor    edx,edx
c000bb04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb08:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bb10:	01 c3                	add    ebx,eax
c000bb12:	89 d8                	mov    eax,ebx
c000bb14:	f7 f1                	div    ecx
c000bb16:	31 d2                	xor    edx,edx
c000bb18:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bb1b:	89 d8                	mov    eax,ebx
c000bb1d:	f7 f7                	div    edi
c000bb1f:	31 d2                	xor    edx,edx
c000bb21:	29 c1                	sub    ecx,eax
c000bb23:	89 d8                	mov    eax,ebx
c000bb25:	f7 f5                	div    ebp
c000bb27:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bb2c:	31 d2                	xor    edx,edx
c000bb2e:	29 c1                	sub    ecx,eax
c000bb30:	89 c8                	mov    eax,ecx
c000bb32:	f7 f5                	div    ebp
c000bb34:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bb39:	31 d2                	xor    edx,edx
c000bb3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bb3f:	89 c8                	mov    eax,ecx
c000bb41:	f7 f5                	div    ebp
c000bb43:	31 d2                	xor    edx,edx
c000bb45:	01 c3                	add    ebx,eax
c000bb47:	89 c8                	mov    eax,ecx
c000bb49:	f7 f7                	div    edi
c000bb4b:	bf 99 00 00 00       	mov    edi,0x99
c000bb50:	31 d2                	xor    edx,edx
c000bb52:	29 c3                	sub    ebx,eax
c000bb54:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bb5c:	29 c3                	sub    ebx,eax
c000bb5e:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bb61:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bb64:	83 c1 02             	add    ecx,0x2
c000bb67:	bb 05 00 00 00       	mov    ebx,0x5
c000bb6c:	89 c8                	mov    eax,ecx
c000bb6e:	f7 f7                	div    edi
c000bb70:	31 d2                	xor    edx,edx
c000bb72:	89 c7                	mov    edi,eax
c000bb74:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bb7a:	83 c0 02             	add    eax,0x2
c000bb7d:	f7 f3                	div    ebx
c000bb7f:	89 eb                	mov    ebx,ebp
c000bb81:	29 c3                	sub    ebx,eax
c000bb83:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bb89:	19 c0                	sbb    eax,eax
c000bb8b:	31 d2                	xor    edx,edx
c000bb8d:	88 1e                	mov    BYTE PTR [esi],bl
c000bb8f:	83 e0 0c             	and    eax,0xc
c000bb92:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bb96:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bb9e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bba2:	83 f9 01             	cmp    ecx,0x1
c000bba5:	0f 96 c2             	setbe  dl
c000bba8:	41                   	inc    ecx
c000bba9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bbac:	01 d0                	add    eax,edx
c000bbae:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bbb2:	83 c4 1c             	add    esp,0x1c
c000bbb5:	89 f0                	mov    eax,esi
c000bbb7:	5b                   	pop    ebx
c000bbb8:	5e                   	pop    esi
c000bbb9:	5f                   	pop    edi
c000bbba:	5d                   	pop    ebp
c000bbbb:	c2 04 00             	ret    0x4

c000bbbe <Clock::timeInDatetimeLocal()>:
c000bbbe:	53                   	push   ebx
c000bbbf:	83 ec 14             	sub    esp,0x14
c000bbc2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bbc6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bbca:	e8 83 fc ff ff       	call   c000b852 <Clock::timeInSecondsLocal()>
c000bbcf:	83 c4 0c             	add    esp,0xc
c000bbd2:	52                   	push   edx
c000bbd3:	50                   	push   eax
c000bbd4:	53                   	push   ebx
c000bbd5:	e8 a0 fe ff ff       	call   c000ba7a <secondsToDatetime(unsigned long long)>
c000bbda:	89 d8                	mov    eax,ebx
c000bbdc:	83 c4 14             	add    esp,0x14
c000bbdf:	5b                   	pop    ebx
c000bbe0:	c2 04 00             	ret    0x4
c000bbe3:	90                   	nop

c000bbe4 <Device::hibernate()>:
c000bbe4:	c3                   	ret    
c000bbe5:	90                   	nop

c000bbe6 <Device::wake()>:
c000bbe6:	c3                   	ret    
c000bbe7:	90                   	nop

c000bbe8 <Device::detect()>:
c000bbe8:	c3                   	ret    
c000bbe9:	90                   	nop

c000bbea <Device::disableLegacy()>:
c000bbea:	c3                   	ret    
c000bbeb:	90                   	nop

c000bbec <Device::powerSaving(PowerSavingLevel)>:
c000bbec:	c3                   	ret    
c000bbed:	90                   	nop

c000bbee <DriverlessDevice::close(int, int, void*)>:
c000bbee:	31 c0                	xor    eax,eax
c000bbf0:	c3                   	ret    
c000bbf1:	90                   	nop

c000bbf2 <DriverlessDevice::detect()>:
c000bbf2:	c3                   	ret    
c000bbf3:	90                   	nop

c000bbf4 <DriverlessDevice::open(int, int, void*)>:
c000bbf4:	83 ec 18             	sub    esp,0x18
c000bbf7:	68 10 03 02 c0       	push   0xc0020310
c000bbfc:	e8 06 4c 00 00       	call   c0010807 <KePanic(char const*)>
c000bc01:	83 c8 ff             	or     eax,0xffffffff
c000bc04:	83 c4 1c             	add    esp,0x1c
c000bc07:	c3                   	ret    

c000bc08 <Device::~Device()>:
c000bc08:	ba 70 03 02 c0       	mov    edx,0xc0020370
c000bc0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc11:	89 10                	mov    DWORD PTR [eax],edx
c000bc13:	90                   	nop
c000bc14:	c3                   	ret    
c000bc15:	90                   	nop

c000bc16 <Device::~Device()>:
c000bc16:	83 ec 0c             	sub    esp,0xc
c000bc19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bc1d:	e8 e6 ff ff ff       	call   c000bc08 <Device::~Device()>
c000bc22:	83 c4 04             	add    esp,0x4
c000bc25:	83 ec 08             	sub    esp,0x8
c000bc28:	68 58 01 00 00       	push   0x158
c000bc2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc31:	e8 6d eb ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	83 c4 0c             	add    esp,0xc
c000bc3c:	c3                   	ret    
c000bc3d:	90                   	nop

c000bc3e <Device::findAndLoadDriver()>:
c000bc3e:	c7 44 24 04 2e 03 02 c0 	mov    DWORD PTR [esp+0x4],0xc002032e
c000bc46:	e9 56 ec ff ff       	jmp    c000a8a1 <Dbg::kprintf(char const*, ...)>
c000bc4b:	90                   	nop

c000bc4c <Device::preOpenPCI(PCIDeviceInfo)>:
c000bc4c:	57                   	push   edi
c000bc4d:	b9 09 00 00 00       	mov    ecx,0x9
c000bc52:	56                   	push   esi
c000bc53:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bc57:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bc5b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bc65:	81 c7 18 01 00 00    	add    edi,0x118
c000bc6b:	fc                   	cld    
c000bc6c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bc6e:	5e                   	pop    esi
c000bc6f:	5f                   	pop    edi
c000bc70:	c3                   	ret    
c000bc71:	90                   	nop

c000bc72 <Device::preOpenACPI(void*, char*, char*)>:
c000bc72:	57                   	push   edi
c000bc73:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bc78:	56                   	push   esi
c000bc79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc81:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc85:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bc8f:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bc95:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bc9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bc9d:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bca3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bca7:	b9 0e 00 00 00       	mov    ecx,0xe
c000bcac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bcae:	5e                   	pop    esi
c000bcaf:	5f                   	pop    edi
c000bcb0:	c3                   	ret    
c000bcb1:	90                   	nop

c000bcb2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bcb2:	53                   	push   ebx
c000bcb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bcb7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bcbb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bcbf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bcc3:	0f b6 c0             	movzx  eax,al
c000bcc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bcce:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bcd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bcd6:	5b                   	pop    ebx
c000bcd7:	e9 a8 05 00 00       	jmp    c000c284 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bcdc <Device::getParent()>:
c000bcdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bce0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bce6:	c3                   	ret    
c000bce7:	90                   	nop

c000bce8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bce8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bcec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bcf0:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bcf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bcf9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bcfd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bd01:	e9 f5 06 00 00       	jmp    c000c3fb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bd06 <Device::addChild(Device*)>:
c000bd06:	53                   	push   ebx
c000bd07:	83 ec 08             	sub    esp,0x8
c000bd0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bd12:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bd18:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bd1e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bd20:	85 d2                	test   edx,edx
c000bd22:	74 04                	je     c000bd28 <Device::addChild(Device*)+0x22>
c000bd24:	89 d3                	mov    ebx,edx
c000bd26:	eb f6                	jmp    c000bd1e <Device::addChild(Device*)+0x18>
c000bd28:	83 ec 0c             	sub    esp,0xc
c000bd2b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bd2e:	6a 08                	push   0x8
c000bd30:	e8 fa bc ff ff       	call   c0007a2f <malloc>
c000bd35:	89 03                	mov    DWORD PTR [ebx],eax
c000bd37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bd3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bd44:	83 c4 18             	add    esp,0x18
c000bd47:	5b                   	pop    ebx
c000bd48:	c3                   	ret    
c000bd49:	90                   	nop

c000bd4a <Device::removeAllChildren()>:
c000bd4a:	56                   	push   esi
c000bd4b:	53                   	push   ebx
c000bd4c:	52                   	push   edx
c000bd4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd51:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000bd57:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bd5a:	74 17                	je     c000bd73 <Device::removeAllChildren()+0x29>
c000bd5c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bd5f:	85 c0                	test   eax,eax
c000bd61:	74 0c                	je     c000bd6f <Device::removeAllChildren()+0x25>
c000bd63:	8b 10                	mov    edx,DWORD PTR [eax]
c000bd65:	83 ec 0c             	sub    esp,0xc
c000bd68:	50                   	push   eax
c000bd69:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000bd6c:	83 c4 10             	add    esp,0x10
c000bd6f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bd71:	eb e4                	jmp    c000bd57 <Device::removeAllChildren()+0xd>
c000bd73:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bd79:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bd7f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bd85:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bd8c:	58                   	pop    eax
c000bd8d:	5b                   	pop    ebx
c000bd8e:	5e                   	pop    esi
c000bd8f:	c3                   	ret    

c000bd90 <Device::hibernateAll()>:
c000bd90:	53                   	push   ebx
c000bd91:	83 ec 14             	sub    esp,0x14
c000bd94:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd98:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd9a:	53                   	push   ebx
c000bd9b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bd9e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bda4:	83 c4 10             	add    esp,0x10
c000bda7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bdaa:	74 0f                	je     c000bdbb <Device::hibernateAll()+0x2b>
c000bdac:	83 ec 0c             	sub    esp,0xc
c000bdaf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdb2:	e8 d9 ff ff ff       	call   c000bd90 <Device::hibernateAll()>
c000bdb7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bdb9:	eb e9                	jmp    c000bda4 <Device::hibernateAll()+0x14>
c000bdbb:	83 c4 08             	add    esp,0x8
c000bdbe:	5b                   	pop    ebx
c000bdbf:	c3                   	ret    

c000bdc0 <Device::wakeAll()>:
c000bdc0:	53                   	push   ebx
c000bdc1:	83 ec 14             	sub    esp,0x14
c000bdc4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bdc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bdca:	53                   	push   ebx
c000bdcb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bdce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bdd4:	83 c4 10             	add    esp,0x10
c000bdd7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bdda:	74 0f                	je     c000bdeb <Device::wakeAll()+0x2b>
c000bddc:	83 ec 0c             	sub    esp,0xc
c000bddf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bde2:	e8 d9 ff ff ff       	call   c000bdc0 <Device::wakeAll()>
c000bde7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bde9:	eb e9                	jmp    c000bdd4 <Device::wakeAll()+0x14>
c000bdeb:	83 c4 08             	add    esp,0x8
c000bdee:	5b                   	pop    ebx
c000bdef:	c3                   	ret    

c000bdf0 <Device::detectAll()>:
c000bdf0:	53                   	push   ebx
c000bdf1:	83 ec 14             	sub    esp,0x14
c000bdf4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bdf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bdfa:	53                   	push   ebx
c000bdfb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bdfe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be04:	83 c4 10             	add    esp,0x10
c000be07:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be0a:	74 0f                	je     c000be1b <Device::detectAll()+0x2b>
c000be0c:	83 ec 0c             	sub    esp,0xc
c000be0f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be12:	e8 d9 ff ff ff       	call   c000bdf0 <Device::detectAll()>
c000be17:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be19:	eb e9                	jmp    c000be04 <Device::detectAll()+0x14>
c000be1b:	83 c4 08             	add    esp,0x8
c000be1e:	5b                   	pop    ebx
c000be1f:	c3                   	ret    

c000be20 <Device::disableLegacyAll()>:
c000be20:	c3                   	ret    
c000be21:	90                   	nop

c000be22 <Device::loadDriversForAll()>:
c000be22:	c3                   	ret    
c000be23:	90                   	nop

c000be24 <Device::closeAll()>:
c000be24:	53                   	push   ebx
c000be25:	83 ec 08             	sub    esp,0x8
c000be28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be2e:	6a 00                	push   0x0
c000be30:	6a 00                	push   0x0
c000be32:	6a 00                	push   0x0
c000be34:	53                   	push   ebx
c000be35:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000be38:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be3e:	83 c4 10             	add    esp,0x10
c000be41:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be44:	74 0f                	je     c000be55 <Device::closeAll()+0x31>
c000be46:	83 ec 0c             	sub    esp,0xc
c000be49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be4c:	e8 d3 ff ff ff       	call   c000be24 <Device::closeAll()>
c000be51:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be53:	eb e9                	jmp    c000be3e <Device::closeAll()+0x1a>
c000be55:	83 c4 08             	add    esp,0x8
c000be58:	5b                   	pop    ebx
c000be59:	c3                   	ret    

c000be5a <Device::powerSavingAll(PowerSavingLevel)>:
c000be5a:	56                   	push   esi
c000be5b:	53                   	push   ebx
c000be5c:	83 ec 0c             	sub    esp,0xc
c000be5f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be63:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000be67:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be69:	56                   	push   esi
c000be6a:	53                   	push   ebx
c000be6b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000be6e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be74:	83 c4 10             	add    esp,0x10
c000be77:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be7a:	74 0f                	je     c000be8b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000be7c:	52                   	push   edx
c000be7d:	52                   	push   edx
c000be7e:	56                   	push   esi
c000be7f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be82:	e8 d3 ff ff ff       	call   c000be5a <Device::powerSavingAll(PowerSavingLevel)>
c000be87:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be89:	eb e9                	jmp    c000be74 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000be8b:	58                   	pop    eax
c000be8c:	5b                   	pop    ebx
c000be8d:	5e                   	pop    esi
c000be8e:	c3                   	ret    
c000be8f:	90                   	nop

c000be90 <Device::setName(char const*)>:
c000be90:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000be98:	e9 53 47 ff ff       	jmp    c00005f0 <strcpy>
c000be9d:	90                   	nop

c000be9e <Device::Device(char const*)>:
c000be9e:	83 ec 1c             	sub    esp,0x1c
c000bea1:	ba 70 03 02 c0       	mov    edx,0xc0020370
c000bea6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000beaa:	89 10                	mov    DWORD PTR [eax],edx
c000beac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000beb0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000beba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bebe:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000becc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000beda:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bee4:	83 ec 08             	sub    esp,0x8
c000bee7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beef:	e8 9c ff ff ff       	call   c000be90 <Device::setName(char const*)>
c000bef4:	83 c4 10             	add    esp,0x10
c000bef7:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000beff:	83 ec 0c             	sub    esp,0xc
c000bf02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf06:	e8 24 bb ff ff       	call   c0007a2f <malloc>
c000bf0b:	83 c4 10             	add    esp,0x10
c000bf0e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bf14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bf1b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bf1f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bf25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf29:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bf2f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bf35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf39:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bf3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bf46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf4a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bf51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf55:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bf5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf60:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bf6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf6e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bf78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf7c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bf86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf8a:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000bf94:	90                   	nop
c000bf95:	83 c4 1c             	add    esp,0x1c
c000bf98:	c3                   	ret    
c000bf99:	90                   	nop

c000bf9a <Device::getName()>:
c000bf9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf9e:	05 d0 00 00 00       	add    eax,0xd0
c000bfa3:	c3                   	ret    

c000bfa4 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bfa4:	83 ec 0c             	sub    esp,0xc
c000bfa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfab:	83 ec 08             	sub    esp,0x8
c000bfae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfb2:	50                   	push   eax
c000bfb3:	e8 e6 fe ff ff       	call   c000be9e <Device::Device(char const*)>
c000bfb8:	83 c4 10             	add    esp,0x10
c000bfbb:	ba 9c 03 02 c0       	mov    edx,0xc002039c
c000bfc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfc4:	89 10                	mov    DWORD PTR [eax],edx
c000bfc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfca:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bfd4:	90                   	nop
c000bfd5:	83 c4 0c             	add    esp,0xc
c000bfd8:	c3                   	ret    
c000bfd9:	90                   	nop

c000bfda <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bfda:	57                   	push   edi
c000bfdb:	56                   	push   esi
c000bfdc:	53                   	push   ebx
c000bfdd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bfe1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bfe5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bfe9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bfef:	75 0c                	jne    c000bffd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bff1:	52                   	push   edx
c000bff2:	52                   	push   edx
c000bff3:	53                   	push   ebx
c000bff4:	56                   	push   esi
c000bff5:	e8 28 2a 01 00       	call   c001ea22 <LinkedList<Device>::addElement(Device*)>
c000bffa:	83 c4 10             	add    esp,0x10
c000bffd:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c003:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c006:	74 12                	je     c000c01a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c008:	50                   	push   eax
c000c009:	57                   	push   edi
c000c00a:	56                   	push   esi
c000c00b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c00e:	e8 c7 ff ff ff       	call   c000bfda <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c013:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c015:	83 c4 10             	add    esp,0x10
c000c018:	eb e9                	jmp    c000c003 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c01a:	5b                   	pop    ebx
c000c01b:	5e                   	pop    esi
c000c01c:	5f                   	pop    edi
c000c01d:	c3                   	ret    

c000c01e <getDevicesOfType(DeviceType)>:
c000c01e:	53                   	push   ebx
c000c01f:	83 ec 14             	sub    esp,0x14
c000c022:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c026:	53                   	push   ebx
c000c027:	e8 d2 2a 01 00       	call   c001eafe <LinkedList<Device>::LinkedList()>
c000c02c:	83 c4 0c             	add    esp,0xc
c000c02f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c033:	53                   	push   ebx
c000c034:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c03a:	e8 9b ff ff ff       	call   c000bfda <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c03f:	83 c4 18             	add    esp,0x18
c000c042:	89 d8                	mov    eax,ebx
c000c044:	5b                   	pop    ebx
c000c045:	c2 04 00             	ret    0x4

c000c048 <HardDiskController::HardDiskController(char const*)>:
c000c048:	83 ec 0c             	sub    esp,0xc
c000c04b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c04f:	83 ec 08             	sub    esp,0x8
c000c052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c056:	50                   	push   eax
c000c057:	e8 42 fe ff ff       	call   c000be9e <Device::Device(char const*)>
c000c05c:	83 c4 10             	add    esp,0x10
c000c05f:	ba c8 03 02 c0       	mov    edx,0xc00203c8
c000c064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c068:	89 10                	mov    DWORD PTR [eax],edx
c000c06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c06e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c078:	90                   	nop
c000c079:	83 c4 0c             	add    esp,0xc
c000c07c:	c3                   	ret    
c000c07d:	90                   	nop
c000c07e:	66 90                	xchg   ax,ax

c000c080 <HardDiskController::~HardDiskController()>:
c000c080:	83 ec 0c             	sub    esp,0xc
c000c083:	ba c8 03 02 c0       	mov    edx,0xc00203c8
c000c088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c08c:	89 10                	mov    DWORD PTR [eax],edx
c000c08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c092:	83 ec 0c             	sub    esp,0xc
c000c095:	50                   	push   eax
c000c096:	e8 6d fb ff ff       	call   c000bc08 <Device::~Device()>
c000c09b:	83 c4 10             	add    esp,0x10
c000c09e:	90                   	nop
c000c09f:	83 c4 0c             	add    esp,0xc
c000c0a2:	c3                   	ret    
c000c0a3:	90                   	nop

c000c0a4 <HardDiskController::~HardDiskController()>:
c000c0a4:	83 ec 0c             	sub    esp,0xc
c000c0a7:	83 ec 0c             	sub    esp,0xc
c000c0aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ae:	e8 cd ff ff ff       	call   c000c080 <HardDiskController::~HardDiskController()>
c000c0b3:	83 c4 10             	add    esp,0x10
c000c0b6:	83 ec 08             	sub    esp,0x8
c000c0b9:	68 58 01 00 00       	push   0x158
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	e8 dc e6 ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c000c0c7:	83 c4 10             	add    esp,0x10
c000c0ca:	83 c4 0c             	add    esp,0xc
c000c0cd:	c3                   	ret    

c000c0ce <PhysicalDisk::eject()>:
c000c0ce:	83 c8 ff             	or     eax,0xffffffff
c000c0d1:	c3                   	ret    

c000c0d2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c0d2:	83 ec 0c             	sub    esp,0xc
c000c0d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d9:	83 ec 08             	sub    esp,0x8
c000c0dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e0:	50                   	push   eax
c000c0e1:	e8 b8 fd ff ff       	call   c000be9e <Device::Device(char const*)>
c000c0e6:	83 c4 10             	add    esp,0x10
c000c0e9:	ba f4 03 02 c0       	mov    edx,0xc00203f4
c000c0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f2:	89 10                	mov    DWORD PTR [eax],edx
c000c0f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c0ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c103:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c10e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c11c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c120:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c12a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c134:	90                   	nop
c000c135:	83 c4 0c             	add    esp,0xc
c000c138:	c3                   	ret    
c000c139:	90                   	nop

c000c13a <PhysicalDisk::startCache()>:
c000c13a:	56                   	push   esi
c000c13b:	53                   	push   ebx
c000c13c:	83 ec 10             	sub    esp,0x10
c000c13f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c143:	6a 44                	push   0x44
c000c145:	e8 e5 b8 ff ff       	call   c0007a2f <malloc>
c000c14a:	89 c6                	mov    esi,eax
c000c14c:	58                   	pop    eax
c000c14d:	5a                   	pop    edx
c000c14e:	53                   	push   ebx
c000c14f:	56                   	push   esi
c000c150:	e8 83 17 00 00       	call   c000d8d8 <VCache::VCache(PhysicalDisk*)>
c000c155:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c15b:	83 c4 14             	add    esp,0x14
c000c15e:	5b                   	pop    ebx
c000c15f:	5e                   	pop    esi
c000c160:	c3                   	ret    
c000c161:	90                   	nop

c000c162 <PhysicalDisk::~PhysicalDisk()>:
c000c162:	83 ec 0c             	sub    esp,0xc
c000c165:	ba f4 03 02 c0       	mov    edx,0xc00203f4
c000c16a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c16e:	89 10                	mov    DWORD PTR [eax],edx
c000c170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c174:	83 ec 0c             	sub    esp,0xc
c000c177:	50                   	push   eax
c000c178:	e8 8b fa ff ff       	call   c000bc08 <Device::~Device()>
c000c17d:	83 c4 10             	add    esp,0x10
c000c180:	90                   	nop
c000c181:	83 c4 0c             	add    esp,0xc
c000c184:	c3                   	ret    
c000c185:	90                   	nop

c000c186 <PhysicalDisk::~PhysicalDisk()>:
c000c186:	83 ec 0c             	sub    esp,0xc
c000c189:	83 ec 0c             	sub    esp,0xc
c000c18c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c190:	e8 cd ff ff ff       	call   c000c162 <PhysicalDisk::~PhysicalDisk()>
c000c195:	83 c4 10             	add    esp,0x10
c000c198:	83 ec 08             	sub    esp,0x8
c000c19b:	68 6c 01 00 00       	push   0x16c
c000c1a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1a4:	e8 fa e5 ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c000c1a9:	83 c4 10             	add    esp,0x10
c000c1ac:	83 c4 0c             	add    esp,0xc
c000c1af:	c3                   	ret    

c000c1b0 <int_handler>:
c000c1b0:	55                   	push   ebp
c000c1b1:	57                   	push   edi
c000c1b2:	56                   	push   esi
c000c1b3:	53                   	push   ebx
c000c1b4:	83 ec 0c             	sub    esp,0xc
c000c1b7:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c1be:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c1c2:	74 0b                	je     c000c1cf <int_handler+0x1f>
c000c1c4:	fa                   	cli    
c000c1c5:	f4                   	hlt    
c000c1c6:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c1cd:	75 f5                	jne    c000c1c4 <int_handler+0x14>
c000c1cf:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c1d2:	8d 46 e0             	lea    eax,[esi-0x20]
c000c1d5:	83 f8 17             	cmp    eax,0x17
c000c1d8:	76 40                	jbe    c000c21a <int_handler+0x6a>
c000c1da:	c1 e6 04             	shl    esi,0x4
c000c1dd:	31 db                	xor    ebx,ebx
c000c1df:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c1e5:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c1eb:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c1ef:	85 c0                	test   eax,eax
c000c1f1:	74 13                	je     c000c206 <int_handler+0x56>
c000c1f3:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c1f7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c1fa:	74 2c                	je     c000c228 <int_handler+0x78>
c000c1fc:	83 ec 08             	sub    esp,0x8
c000c1ff:	52                   	push   edx
c000c200:	57                   	push   edi
c000c201:	ff d0                	call   eax
c000c203:	83 c4 10             	add    esp,0x10
c000c206:	83 c3 01             	add    ebx,0x1
c000c209:	83 fb 04             	cmp    ebx,0x4
c000c20c:	75 dd                	jne    c000c1eb <int_handler+0x3b>
c000c20e:	83 c4 0c             	add    esp,0xc
c000c211:	31 c0                	xor    eax,eax
c000c213:	31 d2                	xor    edx,edx
c000c215:	5b                   	pop    ebx
c000c216:	5e                   	pop    esi
c000c217:	5f                   	pop    edi
c000c218:	5d                   	pop    ebp
c000c219:	c3                   	ret    
c000c21a:	83 ec 0c             	sub    esp,0xc
c000c21d:	50                   	push   eax
c000c21e:	e8 d0 af 00 00       	call   c00171f3 <HalEndOfInterrupt(int)>
c000c223:	83 c4 10             	add    esp,0x10
c000c226:	eb b2                	jmp    c000c1da <int_handler+0x2a>
c000c228:	83 ec 08             	sub    esp,0x8
c000c22b:	52                   	push   edx
c000c22c:	57                   	push   edi
c000c22d:	ff d0                	call   eax
c000c22f:	83 c4 10             	add    esp,0x10
c000c232:	83 c4 0c             	add    esp,0xc
c000c235:	5b                   	pop    ebx
c000c236:	5e                   	pop    esi
c000c237:	5f                   	pop    edi
c000c238:	5d                   	pop    ebp
c000c239:	c3                   	ret    

c000c23a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c23a:	56                   	push   esi
c000c23b:	31 c0                	xor    eax,eax
c000c23d:	53                   	push   ebx
c000c23e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c242:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c246:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c24a:	89 ca                	mov    edx,ecx
c000c24c:	c1 e2 04             	shl    edx,0x4
c000c24f:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c257:	74 17                	je     c000c270 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c259:	83 c0 01             	add    eax,0x1
c000c25c:	83 f8 04             	cmp    eax,0x4
c000c25f:	75 ee                	jne    c000c24f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c261:	c7 44 24 0c 24 04 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020424
c000c269:	5b                   	pop    ebx
c000c26a:	5e                   	pop    esi
c000c26b:	e9 97 45 00 00       	jmp    c0010807 <KePanic(char const*)>
c000c270:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c273:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c27a:	5b                   	pop    ebx
c000c27b:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c282:	5e                   	pop    esi
c000c283:	c3                   	ret    

c000c284 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c284:	55                   	push   ebp
c000c285:	57                   	push   edi
c000c286:	56                   	push   esi
c000c287:	53                   	push   ebx
c000c288:	83 ec 0c             	sub    esp,0xc
c000c28b:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c291:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c295:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c299:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c2a0:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c2a3:	74 57                	je     c000c2fc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c2a5:	84 c0                	test   al,al
c000c2a7:	89 c7                	mov    edi,eax
c000c2a9:	74 1d                	je     c000c2c8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c2ab:	83 fe 0f             	cmp    esi,0xf
c000c2ae:	0f 8f d9 00 00 00    	jg     c000c38d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c2b4:	0f b6 b6 60 1e 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffde1a0]
c000c2bb:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c2c3:	d1 ef                	shr    edi,1
c000c2c5:	83 e7 01             	and    edi,0x1
c000c2c8:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c2cd:	83 ec 08             	sub    esp,0x8
c000c2d0:	31 db                	xor    ebx,ebx
c000c2d2:	50                   	push   eax
c000c2d3:	68 31 04 02 c0       	push   0xc0020431
c000c2d8:	e8 c4 e5 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c000c2dd:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c2e2:	83 c4 10             	add    esp,0x10
c000c2e5:	85 c0                	test   eax,eax
c000c2e7:	7f 59                	jg     c000c342 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000c2e9:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c2ec:	83 ec 0c             	sub    esp,0xc
c000c2ef:	68 48 04 02 c0       	push   0xc0020448
c000c2f4:	e8 0e 45 00 00       	call   c0010807 <KePanic(char const*)>
c000c2f9:	83 c4 10             	add    esp,0x10
c000c2fc:	89 e8                	mov    eax,ebp
c000c2fe:	31 d2                	xor    edx,edx
c000c300:	c1 e0 04             	shl    eax,0x4
c000c303:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c30a:	85 c9                	test   ecx,ecx
c000c30c:	0f 84 92 00 00 00    	je     c000c3a4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000c312:	83 c2 01             	add    edx,0x1
c000c315:	83 fa 04             	cmp    edx,0x4
c000c318:	75 e9                	jne    c000c303 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c31a:	83 ec 0c             	sub    esp,0xc
c000c31d:	68 9c 04 02 c0       	push   0xc002049c
c000c322:	e8 e0 44 00 00       	call   c0010807 <KePanic(char const*)>
c000c327:	83 c4 10             	add    esp,0x10
c000c32a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c32f:	83 c4 0c             	add    esp,0xc
c000c332:	5b                   	pop    ebx
c000c333:	5e                   	pop    esi
c000c334:	5f                   	pop    edi
c000c335:	5d                   	pop    ebp
c000c336:	c3                   	ret    
c000c337:	83 c3 01             	add    ebx,0x1
c000c33a:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c340:	7e a7                	jle    c000c2e9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c342:	8b 2c 9d 80 8b 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd7480]
c000c349:	83 ec 08             	sub    esp,0x8
c000c34c:	56                   	push   esi
c000c34d:	55                   	push   ebp
c000c34e:	e8 f5 15 01 00       	call   c001d948 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c353:	83 c4 10             	add    esp,0x10
c000c356:	84 c0                	test   al,al
c000c358:	74 dd                	je     c000c337 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c35a:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c35d:	89 f8                	mov    eax,edi
c000c35f:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c366:	83 ec 04             	sub    esp,0x4
c000c369:	0f b6 f8             	movzx  edi,al
c000c36c:	89 e8                	mov    eax,ebp
c000c36e:	0f b6 c0             	movzx  eax,al
c000c371:	57                   	push   edi
c000c372:	6a 00                	push   0x0
c000c374:	50                   	push   eax
c000c375:	89 f0                	mov    eax,esi
c000c377:	0f b6 c0             	movzx  eax,al
c000c37a:	6a 00                	push   0x0
c000c37c:	6a 00                	push   0x0
c000c37e:	50                   	push   eax
c000c37f:	53                   	push   ebx
c000c380:	e8 2f 17 01 00       	call   c001dab4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c385:	83 c4 20             	add    esp,0x20
c000c388:	e9 6f ff ff ff       	jmp    c000c2fc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c38d:	83 ec 0c             	sub    esp,0xc
c000c390:	31 ff                	xor    edi,edi
c000c392:	68 64 04 02 c0       	push   0xc0020464
c000c397:	e8 6b 44 00 00       	call   c0010807 <KePanic(char const*)>
c000c39c:	83 c4 10             	add    esp,0x10
c000c39f:	e9 24 ff ff ff       	jmp    c000c2c8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c3a4:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000c3a7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c3ab:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c3b2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c3b6:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c3bd:	83 c4 0c             	add    esp,0xc
c000c3c0:	89 f0                	mov    eax,esi
c000c3c2:	5b                   	pop    ebx
c000c3c3:	5e                   	pop    esi
c000c3c4:	5f                   	pop    edi
c000c3c5:	5d                   	pop    ebp
c000c3c6:	c3                   	ret    

c000c3c7 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c3c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c3cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c3cf:	c1 e0 04             	shl    eax,0x4
c000c3d2:	8d 50 10             	lea    edx,[eax+0x10]
c000c3d5:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c3db:	74 08                	je     c000c3e5 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c3dd:	83 c0 04             	add    eax,0x4
c000c3e0:	39 d0                	cmp    eax,edx
c000c3e2:	75 f1                	jne    c000c3d5 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c3e4:	c3                   	ret    
c000c3e5:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c3ef:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c3f9:	eb e2                	jmp    c000c3dd <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c3fb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c3fb:	56                   	push   esi
c000c3fc:	53                   	push   ebx
c000c3fd:	83 ec 04             	sub    esp,0x4
c000c400:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c405:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c409:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c40d:	74 0e                	je     c000c41d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c40f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c414:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c41b:	75 34                	jne    c000c451 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000c41d:	8d 43 20             	lea    eax,[ebx+0x20]
c000c420:	c1 e0 04             	shl    eax,0x4
c000c423:	8d 50 10             	lea    edx,[eax+0x10]
c000c426:	39 b0 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],esi
c000c42c:	74 0d                	je     c000c43b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000c42e:	83 c0 04             	add    eax,0x4
c000c431:	39 d0                	cmp    eax,edx
c000c433:	75 f1                	jne    c000c426 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000c435:	83 c4 04             	add    esp,0x4
c000c438:	5b                   	pop    ebx
c000c439:	5e                   	pop    esi
c000c43a:	c3                   	ret    
c000c43b:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c445:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c44f:	eb dd                	jmp    c000c42e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000c451:	83 fb 0f             	cmp    ebx,0xf
c000c454:	7f 09                	jg     c000c45f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000c456:	0f b6 9b 60 1e 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde1a0]
c000c45d:	eb be                	jmp    c000c41d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c45f:	83 ec 0c             	sub    esp,0xc
c000c462:	68 55 04 02 c0       	push   0xc0020455
c000c467:	e8 9b 43 00 00       	call   c0010807 <KePanic(char const*)>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	eb ac                	jmp    c000c41d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000c471 <setupINTS()>:
c000c471:	31 c0                	xor    eax,eax
c000c473:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c47d:	83 c0 10             	add    eax,0x10
c000c480:	c7 80 b0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb050],0x0
c000c48a:	c7 80 b4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda04c],0x0
c000c494:	c7 80 b4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb04c],0x0
c000c49e:	c7 80 b8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda048],0x0
c000c4a8:	c7 80 b8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb048],0x0
c000c4b2:	c7 80 bc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda044],0x0
c000c4bc:	c7 80 bc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb044],0x0
c000c4c6:	3d 00 10 00 00       	cmp    eax,0x1000
c000c4cb:	75 a6                	jne    c000c473 <setupINTS()+0x2>
c000c4cd:	c3                   	ret    

c000c4ce <convertLegacyIRQNumber(int)>:
c000c4ce:	83 ec 0c             	sub    esp,0xc
c000c4d1:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c4d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4db:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c4e2:	74 0c                	je     c000c4f0 <convertLegacyIRQNumber(int)+0x22>
c000c4e4:	83 f8 0f             	cmp    eax,0xf
c000c4e7:	7f 0b                	jg     c000c4f4 <convertLegacyIRQNumber(int)+0x26>
c000c4e9:	0f b6 80 60 1e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde1a0]
c000c4f0:	83 c4 0c             	add    esp,0xc
c000c4f3:	c3                   	ret    
c000c4f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c4f8:	83 ec 0c             	sub    esp,0xc
c000c4fb:	68 64 04 02 c0       	push   0xc0020464
c000c500:	e8 02 43 00 00       	call   c0010807 <KePanic(char const*)>
c000c505:	83 c4 10             	add    esp,0x10
c000c508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c50c:	83 c4 0c             	add    esp,0xc
c000c50f:	c3                   	ret    

c000c510 <startGUI(void*)>:
c000c510:	55                   	push   ebp
c000c511:	89 e5                	mov    ebp,esp
c000c513:	53                   	push   ebx
c000c514:	83 ec 04             	sub    esp,0x4
c000c517:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c51c:	83 e8 01             	sub    eax,0x1
c000c51f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c524:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c529:	85 c0                	test   eax,eax
c000c52b:	75 01                	jne    c000c52e <startGUI(void*)+0x1e>
c000c52d:	fb                   	sti    
c000c52e:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c534:	83 ec 08             	sub    esp,0x8
c000c537:	6a 01                	push   0x1
c000c539:	68 c1 04 02 c0       	push   0xc00204c1
c000c53e:	e8 32 80 00 00       	call   c0014575 <Thr::loadDLL(char const*, bool)>
c000c543:	83 c4 10             	add    esp,0x10
c000c546:	83 ec 08             	sub    esp,0x8
c000c549:	53                   	push   ebx
c000c54a:	50                   	push   eax
c000c54b:	e8 61 82 00 00       	call   c00147b1 <Thr::executeDLL(unsigned long, void*)>
c000c550:	83 c4 10             	add    esp,0x10
c000c553:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c559:	83 ec 08             	sub    esp,0x8
c000c55c:	6a 01                	push   0x1
c000c55e:	68 db 04 02 c0       	push   0xc00204db
c000c563:	e8 0d 80 00 00       	call   c0014575 <Thr::loadDLL(char const*, bool)>
c000c568:	83 c4 10             	add    esp,0x10
c000c56b:	83 ec 08             	sub    esp,0x8
c000c56e:	53                   	push   ebx
c000c56f:	50                   	push   eax
c000c570:	e8 3c 82 00 00       	call   c00147b1 <Thr::executeDLL(unsigned long, void*)>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	90                   	nop
c000c579:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c57c:	c9                   	leave  
c000c57d:	c3                   	ret    

c000c57e <startGUIVESA(void*)>:
c000c57e:	55                   	push   ebp
c000c57f:	89 e5                	mov    ebp,esp
c000c581:	53                   	push   ebx
c000c582:	83 ec 04             	sub    esp,0x4
c000c585:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c58a:	83 e8 01             	sub    eax,0x1
c000c58d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c592:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c597:	85 c0                	test   eax,eax
c000c599:	75 01                	jne    c000c59c <startGUIVESA(void*)+0x1e>
c000c59b:	fb                   	sti    
c000c59c:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c5a2:	83 ec 08             	sub    esp,0x8
c000c5a5:	6a 01                	push   0x1
c000c5a7:	68 f9 04 02 c0       	push   0xc00204f9
c000c5ac:	e8 c4 7f 00 00       	call   c0014575 <Thr::loadDLL(char const*, bool)>
c000c5b1:	83 c4 10             	add    esp,0x10
c000c5b4:	83 ec 08             	sub    esp,0x8
c000c5b7:	53                   	push   ebx
c000c5b8:	50                   	push   eax
c000c5b9:	e8 f3 81 00 00       	call   c00147b1 <Thr::executeDLL(unsigned long, void*)>
c000c5be:	83 c4 10             	add    esp,0x10
c000c5c1:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c5c7:	83 ec 08             	sub    esp,0x8
c000c5ca:	6a 01                	push   0x1
c000c5cc:	68 db 04 02 c0       	push   0xc00204db
c000c5d1:	e8 9f 7f 00 00       	call   c0014575 <Thr::loadDLL(char const*, bool)>
c000c5d6:	83 c4 10             	add    esp,0x10
c000c5d9:	83 ec 08             	sub    esp,0x8
c000c5dc:	53                   	push   ebx
c000c5dd:	50                   	push   eax
c000c5de:	e8 ce 81 00 00       	call   c00147b1 <Thr::executeDLL(unsigned long, void*)>
c000c5e3:	83 c4 10             	add    esp,0x10
c000c5e6:	90                   	nop
c000c5e7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c5ea:	c9                   	leave  
c000c5eb:	c3                   	ret    

c000c5ec <sendKeyToTerminal(unsigned char)>:
c000c5ec:	55                   	push   ebp
c000c5ed:	89 e5                	mov    ebp,esp
c000c5ef:	83 ec 28             	sub    esp,0x28
c000c5f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5f5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c5f8:	8b 15 04 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024f04
c000c5fe:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c602:	83 ec 08             	sub    esp,0x8
c000c605:	50                   	push   eax
c000c606:	52                   	push   edx
c000c607:	e8 04 c7 ff ff       	call   c0008d10 <VgaText::receiveKey(unsigned char)>
c000c60c:	83 c4 10             	add    esp,0x10
c000c60f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c613:	83 f8 0a             	cmp    eax,0xa
c000c616:	74 16                	je     c000c62e <sendKeyToTerminal(unsigned char)+0x42>
c000c618:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c61c:	83 f8 03             	cmp    eax,0x3
c000c61f:	74 0d                	je     c000c62e <sendKeyToTerminal(unsigned char)+0x42>
c000c621:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c625:	83 f8 1c             	cmp    eax,0x1c
c000c628:	0f 85 97 00 00 00    	jne    c000c6c5 <sendKeyToTerminal(unsigned char)+0xd9>
c000c62e:	fa                   	cli    
c000c62f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c634:	83 c0 01             	add    eax,0x1
c000c637:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c63c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c641:	83 c0 01             	add    eax,0x1
c000c644:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c649:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c64e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c651:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c65b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c65f:	74 1f                	je     c000c680 <sendKeyToTerminal(unsigned char)+0x94>
c000c661:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c664:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c667:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c66a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c66d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c670:	83 ec 0c             	sub    esp,0xc
c000c673:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c676:	e8 4d 8e 00 00       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c000c67b:	83 c4 10             	add    esp,0x10
c000c67e:	eb db                	jmp    c000c65b <sendKeyToTerminal(unsigned char)+0x6f>
c000c680:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c685:	83 e8 01             	sub    eax,0x1
c000c688:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c68d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c692:	85 c0                	test   eax,eax
c000c694:	75 18                	jne    c000c6ae <sendKeyToTerminal(unsigned char)+0xc2>
c000c696:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c69b:	85 c0                	test   eax,eax
c000c69d:	74 0f                	je     c000c6ae <sendKeyToTerminal(unsigned char)+0xc2>
c000c69f:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c6a9:	e8 22 89 00 00       	call   c0014fd0 <schedule()>
c000c6ae:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6b3:	83 e8 01             	sub    eax,0x1
c000c6b6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c6bb:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6c0:	85 c0                	test   eax,eax
c000c6c2:	75 01                	jne    c000c6c5 <sendKeyToTerminal(unsigned char)+0xd9>
c000c6c4:	fb                   	sti    
c000c6c5:	90                   	nop
c000c6c6:	c9                   	leave  
c000c6c7:	c3                   	ret    

c000c6c8 <sendKeyboardToken(KeyboardToken)>:
c000c6c8:	55                   	push   ebp
c000c6c9:	89 e5                	mov    ebp,esp
c000c6cb:	83 ec 18             	sub    esp,0x18
c000c6ce:	e8 84 41 00 00       	call   c0010857 <Krnl::userIOReceived()>
c000c6d3:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c6d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6d9:	0f b7 c0             	movzx  eax,ax
c000c6dc:	83 f2 01             	xor    edx,0x1
c000c6df:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c6e5:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c6ea:	85 c0                	test   eax,eax
c000c6ec:	74 23                	je     c000c711 <sendKeyboardToken(KeyboardToken)+0x49>
c000c6ee:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c6f3:	83 ec 04             	sub    esp,0x4
c000c6f6:	68 e0 6f 02 c0       	push   0xc0026fe0
c000c6fb:	83 ec 08             	sub    esp,0x8
c000c6fe:	89 e2                	mov    edx,esp
c000c700:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000c703:	89 0a                	mov    DWORD PTR [edx],ecx
c000c705:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000c708:	66 89 4a 04          	mov    WORD PTR [edx+0x4],cx
c000c70c:	ff d0                	call   eax
c000c70e:	83 c4 10             	add    esp,0x10
c000c711:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c715:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c718:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c71d:	0f b6 d2             	movzx  edx,dl
c000c720:	0f b6 c0             	movzx  eax,al
c000c723:	39 c2                	cmp    edx,eax
c000c725:	74 1c                	je     c000c743 <sendKeyboardToken(KeyboardToken)+0x7b>
c000c727:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c72a:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c72f:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c734:	0f b6 c0             	movzx  eax,al
c000c737:	83 ec 0c             	sub    esp,0xc
c000c73a:	50                   	push   eax
c000c73b:	e8 1c bd ff ff       	call   c000845c <setTerminalScrollLock(bool)>
c000c740:	83 c4 10             	add    esp,0x10
c000c743:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c746:	0f b6 c0             	movzx  eax,al
c000c749:	85 c0                	test   eax,eax
c000c74b:	0f 84 da 00 00 00    	je     c000c82b <sendKeyboardToken(KeyboardToken)+0x163>
c000c751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c754:	0f b7 c0             	movzx  eax,ax
c000c757:	3d 18 03 00 00       	cmp    eax,0x318
c000c75c:	75 06                	jne    c000c764 <sendKeyboardToken(KeyboardToken)+0x9c>
c000c75e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c764:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c767:	0f b7 c0             	movzx  eax,ax
c000c76a:	3d 19 03 00 00       	cmp    eax,0x319
c000c76f:	75 06                	jne    c000c777 <sendKeyboardToken(KeyboardToken)+0xaf>
c000c771:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c777:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c77a:	0f b7 c0             	movzx  eax,ax
c000c77d:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c782:	75 06                	jne    c000c78a <sendKeyboardToken(KeyboardToken)+0xc2>
c000c784:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c78a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78d:	0f b7 c0             	movzx  eax,ax
c000c790:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c795:	75 06                	jne    c000c79d <sendKeyboardToken(KeyboardToken)+0xd5>
c000c797:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c79d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a0:	0f b7 c0             	movzx  eax,ax
c000c7a3:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c7a8:	75 06                	jne    c000c7b0 <sendKeyboardToken(KeyboardToken)+0xe8>
c000c7aa:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c7b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7b3:	0f b7 c0             	movzx  eax,ax
c000c7b6:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c7bb:	75 06                	jne    c000c7c3 <sendKeyboardToken(KeyboardToken)+0xfb>
c000c7bd:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c7c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7c6:	0f b7 c0             	movzx  eax,ax
c000c7c9:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c7ce:	75 06                	jne    c000c7d6 <sendKeyboardToken(KeyboardToken)+0x10e>
c000c7d0:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c7d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7d9:	0f b7 c0             	movzx  eax,ax
c000c7dc:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c7e1:	75 06                	jne    c000c7e9 <sendKeyboardToken(KeyboardToken)+0x121>
c000c7e3:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c7e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ec:	0f b7 c0             	movzx  eax,ax
c000c7ef:	3d 20 03 00 00       	cmp    eax,0x320
c000c7f4:	75 06                	jne    c000c7fc <sendKeyboardToken(KeyboardToken)+0x134>
c000c7f6:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c7fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ff:	0f b7 c0             	movzx  eax,ax
c000c802:	3d 21 03 00 00       	cmp    eax,0x321
c000c807:	75 06                	jne    c000c80f <sendKeyboardToken(KeyboardToken)+0x147>
c000c809:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c80f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c812:	0f b7 c0             	movzx  eax,ax
c000c815:	3d 22 03 00 00       	cmp    eax,0x322
c000c81a:	0f 85 f1 00 00 00    	jne    c000c911 <sendKeyboardToken(KeyboardToken)+0x249>
c000c820:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c826:	e9 e6 00 00 00       	jmp    c000c911 <sendKeyboardToken(KeyboardToken)+0x249>
c000c82b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c82e:	0f b7 c0             	movzx  eax,ax
c000c831:	3d 18 03 00 00       	cmp    eax,0x318
c000c836:	75 0a                	jne    c000c842 <sendKeyboardToken(KeyboardToken)+0x17a>
c000c838:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c83e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c845:	0f b7 c0             	movzx  eax,ax
c000c848:	3d 19 03 00 00       	cmp    eax,0x319
c000c84d:	75 0a                	jne    c000c859 <sendKeyboardToken(KeyboardToken)+0x191>
c000c84f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c855:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c85c:	0f b7 c0             	movzx  eax,ax
c000c85f:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c864:	75 0a                	jne    c000c870 <sendKeyboardToken(KeyboardToken)+0x1a8>
c000c866:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c86c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c873:	0f b7 c0             	movzx  eax,ax
c000c876:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c87b:	75 0a                	jne    c000c887 <sendKeyboardToken(KeyboardToken)+0x1bf>
c000c87d:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c883:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c887:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c88a:	0f b7 c0             	movzx  eax,ax
c000c88d:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c892:	75 0a                	jne    c000c89e <sendKeyboardToken(KeyboardToken)+0x1d6>
c000c894:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c89a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c89e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8a1:	0f b7 c0             	movzx  eax,ax
c000c8a4:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c8a9:	75 0a                	jne    c000c8b5 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000c8ab:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c8b1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8b8:	0f b7 c0             	movzx  eax,ax
c000c8bb:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c8c0:	75 0a                	jne    c000c8cc <sendKeyboardToken(KeyboardToken)+0x204>
c000c8c2:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c8c8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8cf:	0f b7 c0             	movzx  eax,ax
c000c8d2:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c8d7:	75 0a                	jne    c000c8e3 <sendKeyboardToken(KeyboardToken)+0x21b>
c000c8d9:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c8df:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8e6:	0f b7 c0             	movzx  eax,ax
c000c8e9:	3d 20 03 00 00       	cmp    eax,0x320
c000c8ee:	75 0a                	jne    c000c8fa <sendKeyboardToken(KeyboardToken)+0x232>
c000c8f0:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c8f6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8fd:	0f b7 c0             	movzx  eax,ax
c000c900:	3d 21 03 00 00       	cmp    eax,0x321
c000c905:	75 0a                	jne    c000c911 <sendKeyboardToken(KeyboardToken)+0x249>
c000c907:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c90d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c911:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c914:	0f b7 c0             	movzx  eax,ax
c000c917:	3d 00 02 00 00       	cmp    eax,0x200
c000c91c:	75 2f                	jne    c000c94d <sendKeyboardToken(KeyboardToken)+0x285>
c000c91e:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000c923:	83 f0 01             	xor    eax,0x1
c000c926:	0f b6 c0             	movzx  eax,al
c000c929:	85 c0                	test   eax,eax
c000c92b:	74 20                	je     c000c94d <sendKeyboardToken(KeyboardToken)+0x285>
c000c92d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000c932:	6a 01                	push   0x1
c000c934:	6a 00                	push   0x0
c000c936:	68 10 c5 00 c0       	push   0xc000c510
c000c93b:	50                   	push   eax
c000c93c:	e8 4f 84 00 00       	call   c0014d90 <Process::createThread(void (*)(void*), void*, int)>
c000c941:	83 c4 10             	add    esp,0x10
c000c944:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000c94b:	eb 3a                	jmp    c000c987 <sendKeyboardToken(KeyboardToken)+0x2bf>
c000c94d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c950:	0f b7 c0             	movzx  eax,ax
c000c953:	3d 01 02 00 00       	cmp    eax,0x201
c000c958:	75 2d                	jne    c000c987 <sendKeyboardToken(KeyboardToken)+0x2bf>
c000c95a:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000c95f:	83 f0 01             	xor    eax,0x1
c000c962:	0f b6 c0             	movzx  eax,al
c000c965:	85 c0                	test   eax,eax
c000c967:	74 1e                	je     c000c987 <sendKeyboardToken(KeyboardToken)+0x2bf>
c000c969:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000c96e:	6a 01                	push   0x1
c000c970:	6a 00                	push   0x0
c000c972:	68 7e c5 00 c0       	push   0xc000c57e
c000c977:	50                   	push   eax
c000c978:	e8 13 84 00 00       	call   c0014d90 <Process::createThread(void (*)(void*), void*, int)>
c000c97d:	83 c4 10             	add    esp,0x10
c000c980:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000c987:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c98a:	0f b7 c0             	movzx  eax,ax
c000c98d:	3d 25 03 00 00       	cmp    eax,0x325
c000c992:	75 06                	jne    c000c99a <sendKeyboardToken(KeyboardToken)+0x2d2>
c000c994:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c99a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c99d:	0f b7 c0             	movzx  eax,ax
c000c9a0:	3d 24 03 00 00       	cmp    eax,0x324
c000c9a5:	75 06                	jne    c000c9ad <sendKeyboardToken(KeyboardToken)+0x2e5>
c000c9a7:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c9ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9b0:	0f b7 c0             	movzx  eax,ax
c000c9b3:	3d 23 03 00 00       	cmp    eax,0x323
c000c9b8:	75 06                	jne    c000c9c0 <sendKeyboardToken(KeyboardToken)+0x2f8>
c000c9ba:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c9c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9c3:	0f b7 c0             	movzx  eax,ax
c000c9c6:	3d 26 03 00 00       	cmp    eax,0x326
c000c9cb:	75 06                	jne    c000c9d3 <sendKeyboardToken(KeyboardToken)+0x30b>
c000c9cd:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c9d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9d6:	0f b7 c0             	movzx  eax,ax
c000c9d9:	3d 27 03 00 00       	cmp    eax,0x327
c000c9de:	75 06                	jne    c000c9e6 <sendKeyboardToken(KeyboardToken)+0x31e>
c000c9e0:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c9e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9e9:	0f b7 c0             	movzx  eax,ax
c000c9ec:	3d 22 03 00 00       	cmp    eax,0x322
c000c9f1:	75 06                	jne    c000c9f9 <sendKeyboardToken(KeyboardToken)+0x331>
c000c9f3:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c9f9:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c9fd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ca00:	83 f0 01             	xor    eax,0x1
c000ca03:	0f b6 c0             	movzx  eax,al
c000ca06:	85 c0                	test   eax,eax
c000ca08:	74 7c                	je     c000ca86 <sendKeyboardToken(KeyboardToken)+0x3be>
c000ca0a:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000ca0f:	0f b6 c0             	movzx  eax,al
c000ca12:	85 c0                	test   eax,eax
c000ca14:	74 43                	je     c000ca59 <sendKeyboardToken(KeyboardToken)+0x391>
c000ca16:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ca1a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000ca1e:	85 c0                	test   eax,eax
c000ca20:	74 2b                	je     c000ca4d <sendKeyboardToken(KeyboardToken)+0x385>
c000ca22:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000ca28:	89 d0                	mov    eax,edx
c000ca2a:	c1 e0 02             	shl    eax,0x2
c000ca2d:	01 d0                	add    eax,edx
c000ca2f:	d1 e0                	shl    eax,1
c000ca31:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000ca36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca39:	0f b7 c0             	movzx  eax,ax
c000ca3c:	8d 50 d0             	lea    edx,[eax-0x30]
c000ca3f:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000ca44:	01 d0                	add    eax,edx
c000ca46:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000ca4b:	eb 71                	jmp    c000cabe <sendKeyboardToken(KeyboardToken)+0x3f6>
c000ca4d:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000ca57:	eb 65                	jmp    c000cabe <sendKeyboardToken(KeyboardToken)+0x3f6>
c000ca59:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000ca5e:	85 c0                	test   eax,eax
c000ca60:	74 18                	je     c000ca7a <sendKeyboardToken(KeyboardToken)+0x3b2>
c000ca62:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000ca67:	0f b6 c0             	movzx  eax,al
c000ca6a:	83 ec 0c             	sub    esp,0xc
c000ca6d:	50                   	push   eax
c000ca6e:	e8 79 fb ff ff       	call   c000c5ec <sendKeyToTerminal(unsigned char)>
c000ca73:	83 c4 10             	add    esp,0x10
c000ca76:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ca7a:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000ca84:	eb 38                	jmp    c000cabe <sendKeyboardToken(KeyboardToken)+0x3f6>
c000ca86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca89:	0f b7 c0             	movzx  eax,ax
c000ca8c:	3d 01 01 00 00       	cmp    eax,0x101
c000ca91:	75 2b                	jne    c000cabe <sendKeyboardToken(KeyboardToken)+0x3f6>
c000ca93:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000ca98:	85 c0                	test   eax,eax
c000ca9a:	74 18                	je     c000cab4 <sendKeyboardToken(KeyboardToken)+0x3ec>
c000ca9c:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000caa1:	0f b6 c0             	movzx  eax,al
c000caa4:	83 ec 0c             	sub    esp,0xc
c000caa7:	50                   	push   eax
c000caa8:	e8 3f fb ff ff       	call   c000c5ec <sendKeyToTerminal(unsigned char)>
c000caad:	83 c4 10             	add    esp,0x10
c000cab0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cab4:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cabe:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cac1:	83 f0 01             	xor    eax,0x1
c000cac4:	0f b6 c0             	movzx  eax,al
c000cac7:	85 c0                	test   eax,eax
c000cac9:	74 5a                	je     c000cb25 <sendKeyboardToken(KeyboardToken)+0x45d>
c000cacb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cace:	83 f0 01             	xor    eax,0x1
c000cad1:	0f b6 c0             	movzx  eax,al
c000cad4:	85 c0                	test   eax,eax
c000cad6:	74 4d                	je     c000cb25 <sendKeyboardToken(KeyboardToken)+0x45d>
c000cad8:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cadd:	83 f0 01             	xor    eax,0x1
c000cae0:	0f b6 c0             	movzx  eax,al
c000cae3:	85 c0                	test   eax,eax
c000cae5:	74 3e                	je     c000cb25 <sendKeyboardToken(KeyboardToken)+0x45d>
c000cae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caea:	0f b7 c0             	movzx  eax,ax
c000caed:	83 f8 1f             	cmp    eax,0x1f
c000caf0:	76 0b                	jbe    c000cafd <sendKeyboardToken(KeyboardToken)+0x435>
c000caf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caf5:	0f b7 c0             	movzx  eax,ax
c000caf8:	83 f8 7e             	cmp    eax,0x7e
c000cafb:	76 16                	jbe    c000cb13 <sendKeyboardToken(KeyboardToken)+0x44b>
c000cafd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb00:	0f b7 c0             	movzx  eax,ax
c000cb03:	83 f8 0a             	cmp    eax,0xa
c000cb06:	74 0b                	je     c000cb13 <sendKeyboardToken(KeyboardToken)+0x44b>
c000cb08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb0b:	0f b7 c0             	movzx  eax,ax
c000cb0e:	83 f8 08             	cmp    eax,0x8
c000cb11:	75 12                	jne    c000cb25 <sendKeyboardToken(KeyboardToken)+0x45d>
c000cb13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb16:	0f b6 c0             	movzx  eax,al
c000cb19:	83 ec 0c             	sub    esp,0xc
c000cb1c:	50                   	push   eax
c000cb1d:	e8 ca fa ff ff       	call   c000c5ec <sendKeyToTerminal(unsigned char)>
c000cb22:	83 c4 10             	add    esp,0x10
c000cb25:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cb28:	83 f0 01             	xor    eax,0x1
c000cb2b:	0f b6 c0             	movzx  eax,al
c000cb2e:	85 c0                	test   eax,eax
c000cb30:	74 5d                	je     c000cb8f <sendKeyboardToken(KeyboardToken)+0x4c7>
c000cb32:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cb35:	83 f0 01             	xor    eax,0x1
c000cb38:	0f b6 c0             	movzx  eax,al
c000cb3b:	85 c0                	test   eax,eax
c000cb3d:	74 50                	je     c000cb8f <sendKeyboardToken(KeyboardToken)+0x4c7>
c000cb3f:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cb44:	0f b6 c0             	movzx  eax,al
c000cb47:	85 c0                	test   eax,eax
c000cb49:	74 44                	je     c000cb8f <sendKeyboardToken(KeyboardToken)+0x4c7>
c000cb4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb4e:	0f b7 c0             	movzx  eax,ax
c000cb51:	83 f8 3f             	cmp    eax,0x3f
c000cb54:	76 39                	jbe    c000cb8f <sendKeyboardToken(KeyboardToken)+0x4c7>
c000cb56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb59:	0f b7 c0             	movzx  eax,ax
c000cb5c:	83 f8 7f             	cmp    eax,0x7f
c000cb5f:	77 2e                	ja     c000cb8f <sendKeyboardToken(KeyboardToken)+0x4c7>
c000cb61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb64:	88 c2                	mov    dl,al
c000cb66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb69:	0f b7 c0             	movzx  eax,ax
c000cb6c:	83 f8 5f             	cmp    eax,0x5f
c000cb6f:	76 04                	jbe    c000cb75 <sendKeyboardToken(KeyboardToken)+0x4ad>
c000cb71:	b0 20                	mov    al,0x20
c000cb73:	eb 02                	jmp    c000cb77 <sendKeyboardToken(KeyboardToken)+0x4af>
c000cb75:	b0 00                	mov    al,0x0
c000cb77:	89 d1                	mov    ecx,edx
c000cb79:	29 c1                	sub    ecx,eax
c000cb7b:	89 c8                	mov    eax,ecx
c000cb7d:	83 e8 40             	sub    eax,0x40
c000cb80:	0f b6 c0             	movzx  eax,al
c000cb83:	83 ec 0c             	sub    esp,0xc
c000cb86:	50                   	push   eax
c000cb87:	e8 60 fa ff ff       	call   c000c5ec <sendKeyToTerminal(unsigned char)>
c000cb8c:	83 c4 10             	add    esp,0x10
c000cb8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb92:	0f b7 c0             	movzx  eax,ax
c000cb95:	3d 00 03 00 00       	cmp    eax,0x300
c000cb9a:	75 12                	jne    c000cbae <sendKeyboardToken(KeyboardToken)+0x4e6>
c000cb9c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cb9f:	83 f0 01             	xor    eax,0x1
c000cba2:	0f b6 c0             	movzx  eax,al
c000cba5:	85 c0                	test   eax,eax
c000cba7:	74 05                	je     c000cbae <sendKeyboardToken(KeyboardToken)+0x4e6>
c000cba9:	e8 af b8 ff ff       	call   c000845d <doTerminalCycle()>
c000cbae:	90                   	nop
c000cbaf:	c9                   	leave  
c000cbb0:	c3                   	ret    

c000cbb1 <clearInternalKeybuffer(VgaText*)>:
c000cbb1:	55                   	push   ebp
c000cbb2:	89 e5                	mov    ebp,esp
c000cbb4:	83 ec 08             	sub    esp,0x8
c000cbb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbba:	05 02 01 00 00       	add    eax,0x102
c000cbbf:	83 ec 0c             	sub    esp,0xc
c000cbc2:	50                   	push   eax
c000cbc3:	e8 58 39 ff ff       	call   c0000520 <strlen>
c000cbc8:	83 c4 10             	add    esp,0x10
c000cbcb:	89 c2                	mov    edx,eax
c000cbcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbd0:	05 02 01 00 00       	add    eax,0x102
c000cbd5:	83 ec 04             	sub    esp,0x4
c000cbd8:	52                   	push   edx
c000cbd9:	6a 00                	push   0x0
c000cbdb:	50                   	push   eax
c000cbdc:	e8 0f 39 ff ff       	call   c00004f0 <memset>
c000cbe1:	83 c4 10             	add    esp,0x10
c000cbe4:	90                   	nop
c000cbe5:	c9                   	leave  
c000cbe6:	c3                   	ret    

c000cbe7 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cbe7:	55                   	push   ebp
c000cbe8:	89 e5                	mov    ebp,esp
c000cbea:	83 ec 18             	sub    esp,0x18
c000cbed:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cbf2:	85 c0                	test   eax,eax
c000cbf4:	74 29                	je     c000cc1f <readKeyboard(VgaText*, char*, unsigned long)+0x38>
c000cbf6:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cbfc:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cc01:	83 ec 04             	sub    esp,0x4
c000cc04:	68 e0 6f 02 c0       	push   0xc0026fe0
c000cc09:	83 ec 08             	sub    esp,0x8
c000cc0c:	89 e2                	mov    edx,esp
c000cc0e:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000cc11:	89 0a                	mov    DWORD PTR [edx],ecx
c000cc13:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000cc16:	66 89 4a 04          	mov    WORD PTR [edx+0x4],cx
c000cc1a:	ff d0                	call   eax
c000cc1c:	83 c4 10             	add    esp,0x10
c000cc1f:	fb                   	sti    
c000cc20:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cc27:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cc2b:	0f 84 0d 01 00 00    	je     c000cd3e <readKeyboard(VgaText*, char*, unsigned long)+0x157>
c000cc31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc34:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cc3a:	0f be c0             	movsx  eax,al
c000cc3d:	85 c0                	test   eax,eax
c000cc3f:	75 2c                	jne    c000cc6d <readKeyboard(VgaText*, char*, unsigned long)+0x86>
c000cc41:	fa                   	cli    
c000cc42:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cc47:	83 c0 01             	add    eax,0x1
c000cc4a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cc4f:	e8 7c 83 00 00       	call   c0014fd0 <schedule()>
c000cc54:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cc59:	83 e8 01             	sub    eax,0x1
c000cc5c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cc61:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cc66:	85 c0                	test   eax,eax
c000cc68:	75 c7                	jne    c000cc31 <readKeyboard(VgaText*, char*, unsigned long)+0x4a>
c000cc6a:	fb                   	sti    
c000cc6b:	eb c4                	jmp    c000cc31 <readKeyboard(VgaText*, char*, unsigned long)+0x4a>
c000cc6d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cc70:	8d 50 01             	lea    edx,[eax+0x1]
c000cc73:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cc76:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cc79:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cc7f:	88 10                	mov    BYTE PTR [eax],dl
c000cc81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc84:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cc8a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cc8d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cc91:	83 f8 03             	cmp    eax,0x3
c000cc94:	75 1e                	jne    c000ccb4 <readKeyboard(VgaText*, char*, unsigned long)+0xcd>
c000cc96:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cc9b:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cca0:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cca6:	83 ec 08             	sub    esp,0x8
c000cca9:	6a 02                	push   0x2
c000ccab:	50                   	push   eax
c000ccac:	e8 ee 3f 00 00       	call   c0010c9f <KeRaiseSignal(SigHandlerBlock*, int)>
c000ccb1:	83 c4 10             	add    esp,0x10
c000ccb4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000ccb8:	83 f8 1c             	cmp    eax,0x1c
c000ccbb:	75 1e                	jne    c000ccdb <readKeyboard(VgaText*, char*, unsigned long)+0xf4>
c000ccbd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ccc2:	8b 00                	mov    eax,DWORD PTR [eax]
c000ccc4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ccc7:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cccd:	83 ec 08             	sub    esp,0x8
c000ccd0:	6a 09                	push   0x9
c000ccd2:	50                   	push   eax
c000ccd3:	e8 c7 3f 00 00       	call   c0010c9f <KeRaiseSignal(SigHandlerBlock*, int)>
c000ccd8:	83 c4 10             	add    esp,0x10
c000ccdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccde:	05 02 01 00 00       	add    eax,0x102
c000cce3:	83 ec 0c             	sub    esp,0xc
c000cce6:	50                   	push   eax
c000cce7:	e8 34 38 ff ff       	call   c0000520 <strlen>
c000ccec:	83 c4 10             	add    esp,0x10
c000ccef:	89 c1                	mov    ecx,eax
c000ccf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccf4:	05 02 01 00 00       	add    eax,0x102
c000ccf9:	8d 50 01             	lea    edx,[eax+0x1]
c000ccfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccff:	05 02 01 00 00       	add    eax,0x102
c000cd04:	83 ec 04             	sub    esp,0x4
c000cd07:	51                   	push   ecx
c000cd08:	52                   	push   edx
c000cd09:	50                   	push   eax
c000cd0a:	e8 c1 36 ff ff       	call   c00003d0 <memmove>
c000cd0f:	83 c4 10             	add    esp,0x10
c000cd12:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000cd16:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000cd1a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd1e:	83 f8 0a             	cmp    eax,0xa
c000cd21:	74 16                	je     c000cd39 <readKeyboard(VgaText*, char*, unsigned long)+0x152>
c000cd23:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd27:	83 f8 03             	cmp    eax,0x3
c000cd2a:	74 0d                	je     c000cd39 <readKeyboard(VgaText*, char*, unsigned long)+0x152>
c000cd2c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd30:	83 f8 1c             	cmp    eax,0x1c
c000cd33:	0f 85 ee fe ff ff    	jne    c000cc27 <readKeyboard(VgaText*, char*, unsigned long)+0x40>
c000cd39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cd3c:	eb 03                	jmp    c000cd41 <readKeyboard(VgaText*, char*, unsigned long)+0x15a>
c000cd3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cd41:	c9                   	leave  
c000cd42:	c3                   	ret    
c000cd43:	90                   	nop

c000cd44 <Keyboard::Keyboard(char const*)>:
c000cd44:	83 ec 0c             	sub    esp,0xc
c000cd47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4b:	83 ec 08             	sub    esp,0x8
c000cd4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd52:	50                   	push   eax
c000cd53:	e8 46 f1 ff ff       	call   c000be9e <Device::Device(char const*)>
c000cd58:	83 c4 10             	add    esp,0x10
c000cd5b:	ba 1c 05 02 c0       	mov    edx,0xc002051c
c000cd60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd64:	89 10                	mov    DWORD PTR [eax],edx
c000cd66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd6a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000cd74:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000cd7b:	90                   	nop
c000cd7c:	83 c4 0c             	add    esp,0xc
c000cd7f:	c3                   	ret    

c000cd80 <Keyboard::~Keyboard()>:
c000cd80:	83 ec 0c             	sub    esp,0xc
c000cd83:	ba 1c 05 02 c0       	mov    edx,0xc002051c
c000cd88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd8c:	89 10                	mov    DWORD PTR [eax],edx
c000cd8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd92:	83 ec 0c             	sub    esp,0xc
c000cd95:	50                   	push   eax
c000cd96:	e8 6d ee ff ff       	call   c000bc08 <Device::~Device()>
c000cd9b:	83 c4 10             	add    esp,0x10
c000cd9e:	90                   	nop
c000cd9f:	83 c4 0c             	add    esp,0xc
c000cda2:	c3                   	ret    
c000cda3:	90                   	nop

c000cda4 <Keyboard::~Keyboard()>:
c000cda4:	83 ec 0c             	sub    esp,0xc
c000cda7:	83 ec 0c             	sub    esp,0xc
c000cdaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdae:	e8 cd ff ff ff       	call   c000cd80 <Keyboard::~Keyboard()>
c000cdb3:	83 c4 10             	add    esp,0x10
c000cdb6:	83 ec 08             	sub    esp,0x8
c000cdb9:	68 5c 01 00 00       	push   0x15c
c000cdbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdc2:	e8 dc d9 ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c000cdc7:	83 c4 10             	add    esp,0x10
c000cdca:	83 c4 0c             	add    esp,0xc
c000cdcd:	c3                   	ret    

c000cdce <LogicalDisk::close(int, int, void*)>:
c000cdce:	83 c8 ff             	or     eax,0xffffffff
c000cdd1:	c3                   	ret    

c000cdd2 <LogicalDisk::~LogicalDisk()>:
c000cdd2:	83 ec 0c             	sub    esp,0xc
c000cdd5:	ba 94 05 02 c0       	mov    edx,0xc0020594
c000cdda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdde:	89 10                	mov    DWORD PTR [eax],edx
c000cde0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde4:	83 ec 0c             	sub    esp,0xc
c000cde7:	50                   	push   eax
c000cde8:	e8 1b ee ff ff       	call   c000bc08 <Device::~Device()>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	90                   	nop
c000cdf1:	83 c4 0c             	add    esp,0xc
c000cdf4:	c3                   	ret    
c000cdf5:	90                   	nop

c000cdf6 <LogicalDisk::~LogicalDisk()>:
c000cdf6:	83 ec 0c             	sub    esp,0xc
c000cdf9:	83 ec 0c             	sub    esp,0xc
c000cdfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce00:	e8 cd ff ff ff       	call   c000cdd2 <LogicalDisk::~LogicalDisk()>
c000ce05:	83 c4 10             	add    esp,0x10
c000ce08:	83 ec 08             	sub    esp,0x8
c000ce0b:	68 78 01 00 00       	push   0x178
c000ce10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce14:	e8 8a d9 ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c000ce19:	83 c4 10             	add    esp,0x10
c000ce1c:	83 c4 0c             	add    esp,0xc
c000ce1f:	c3                   	ret    

c000ce20 <LogicalDisk::open(int, int, void*)>:
c000ce20:	83 ec 18             	sub    esp,0x18
c000ce23:	68 48 05 02 c0       	push   0xc0020548
c000ce28:	e8 da 39 00 00       	call   c0010807 <KePanic(char const*)>
c000ce2d:	83 c8 ff             	or     eax,0xffffffff
c000ce30:	83 c4 1c             	add    esp,0x1c
c000ce33:	c3                   	ret    

c000ce34 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ce34:	53                   	push   ebx
c000ce35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ce39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ce3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ce41:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ce47:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ce4d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ce53:	77 10                	ja     c000ce65 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ce55:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ce5b:	89 d3                	mov    ebx,edx
c000ce5d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ce63:	72 05                	jb     c000ce6a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ce65:	83 c8 ff             	or     eax,0xffffffff
c000ce68:	89 c2                	mov    edx,eax
c000ce6a:	5b                   	pop    ebx
c000ce6b:	c3                   	ret    

c000ce6c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ce6c:	56                   	push   esi
c000ce6d:	83 c8 ff             	or     eax,0xffffffff
c000ce70:	53                   	push   ebx
c000ce71:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ce75:	89 c2                	mov    edx,eax
c000ce77:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ce7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce7f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ce85:	77 27                	ja     c000ceae <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ce87:	89 d8                	mov    eax,ebx
c000ce89:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ce8f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ce95:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ce9a:	89 c2                	mov    edx,eax
c000ce9c:	73 10                	jae    c000ceae <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ce9e:	89 c8                	mov    eax,ecx
c000cea0:	89 da                	mov    edx,ebx
c000cea2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cea8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ceae:	5b                   	pop    ebx
c000ceaf:	5e                   	pop    esi
c000ceb0:	c3                   	ret    
c000ceb1:	90                   	nop

c000ceb2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ceb2:	83 ec 1c             	sub    esp,0x1c
c000ceb5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ceb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cebd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cec1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cec5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cec9:	89 04 24             	mov    DWORD PTR [esp],eax
c000cecc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ced0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ced4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ced8:	83 ec 08             	sub    esp,0x8
c000cedb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cedf:	50                   	push   eax
c000cee0:	e8 b9 ef ff ff       	call   c000be9e <Device::Device(char const*)>
c000cee5:	83 c4 10             	add    esp,0x10
c000cee8:	ba 94 05 02 c0       	mov    edx,0xc0020594
c000ceed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cef1:	89 10                	mov    DWORD PTR [eax],edx
c000cef3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cef7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cefe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf02:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cf09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf0d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cf14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf18:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cf22:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cf26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf2e:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cf34:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cf3a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cf3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cf41:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cf45:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cf4b:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cf51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cf59:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cf5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf63:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cf6d:	90                   	nop
c000cf6e:	83 c4 1c             	add    esp,0x1c
c000cf71:	c3                   	ret    

c000cf72 <LogicalDisk::assignDriveLetter()>:
c000cf72:	55                   	push   ebp
c000cf73:	57                   	push   edi
c000cf74:	56                   	push   esi
c000cf75:	53                   	push   ebx
c000cf76:	83 ec 14             	sub    esp,0x14
c000cf79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf7d:	8b a8 6c 01 00 00    	mov    ebp,DWORD PTR [eax+0x16c]
c000cf83:	b0 41                	mov    al,0x41
c000cf85:	8a 95 69 01 00 00    	mov    dl,BYTE PTR [ebp+0x169]
c000cf8b:	84 d2                	test   dl,dl
c000cf8d:	75 02                	jne    c000cf91 <LogicalDisk::assignDriveLetter()+0x1f>
c000cf8f:	b0 43                	mov    al,0x43
c000cf91:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000cf97:	0f b6 ca             	movzx  ecx,dl
c000cf9a:	0f be d8             	movsx  ebx,al
c000cf9d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000cfa1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000cfa5:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000cfab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cfaf:	3c 43                	cmp    al,0x43
c000cfb1:	75 10                	jne    c000cfc3 <LogicalDisk::assignDriveLetter()+0x51>
c000cfb3:	80 bd 68 01 00 00 00 	cmp    BYTE PTR [ebp+0x168],0x0
c000cfba:	75 5a                	jne    c000d016 <LogicalDisk::assignDriveLetter()+0xa4>
c000cfbc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000cfc1:	75 53                	jne    c000d016 <LogicalDisk::assignDriveLetter()+0xa4>
c000cfc3:	8d 73 bf             	lea    esi,[ebx-0x41]
c000cfc6:	ba 01 00 00 00       	mov    edx,0x1
c000cfcb:	89 34 24             	mov    DWORD PTR [esp],esi
c000cfce:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000cfd1:	d3 e2                	shl    edx,cl
c000cfd3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cfd7:	89 d7                	mov    edi,edx
c000cfd9:	89 d6                	mov    esi,edx
c000cfdb:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000cfdf:	c1 ff 1f             	sar    edi,0x1f
c000cfe2:	21 f9                	and    ecx,edi
c000cfe4:	09 d1                	or     ecx,edx
c000cfe6:	75 2e                	jne    c000d016 <LogicalDisk::assignDriveLetter()+0xa4>
c000cfe8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cfec:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cff0:	09 f2                	or     edx,esi
c000cff2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000cff5:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000cffb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cfff:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d005:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d00c:	09 fa                	or     edx,edi
c000d00e:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d014:	eb 0d                	jmp    c000d023 <LogicalDisk::assignDriveLetter()+0xb1>
c000d016:	8d 50 01             	lea    edx,[eax+0x1]
c000d019:	43                   	inc    ebx
c000d01a:	80 fa 5b             	cmp    dl,0x5b
c000d01d:	88 d0                	mov    al,dl
c000d01f:	75 8e                	jne    c000cfaf <LogicalDisk::assignDriveLetter()+0x3d>
c000d021:	31 c0                	xor    eax,eax
c000d023:	83 c4 14             	add    esp,0x14
c000d026:	5b                   	pop    ebx
c000d027:	5e                   	pop    esi
c000d028:	5f                   	pop    edi
c000d029:	5d                   	pop    ebp
c000d02a:	c3                   	ret    
c000d02b:	90                   	nop

c000d02c <LogicalDisk::mount()>:
c000d02c:	56                   	push   esi
c000d02d:	53                   	push   ebx
c000d02e:	53                   	push   ebx
c000d02f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d033:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d039:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d043:	85 db                	test   ebx,ebx
c000d045:	74 27                	je     c000d06e <LogicalDisk::mount()+0x42>
c000d047:	51                   	push   ecx
c000d048:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d04f:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d051:	83 e8 41             	sub    eax,0x41
c000d054:	50                   	push   eax
c000d055:	56                   	push   esi
c000d056:	53                   	push   ebx
c000d057:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d05a:	83 c4 10             	add    esp,0x10
c000d05d:	84 c0                	test   al,al
c000d05f:	74 08                	je     c000d069 <LogicalDisk::mount()+0x3d>
c000d061:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d067:	eb 07                	jmp    c000d070 <LogicalDisk::mount()+0x44>
c000d069:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d06c:	eb d5                	jmp    c000d043 <LogicalDisk::mount()+0x17>
c000d06e:	31 c0                	xor    eax,eax
c000d070:	5a                   	pop    edx
c000d071:	5b                   	pop    ebx
c000d072:	5e                   	pop    esi
c000d073:	c3                   	ret    

c000d074 <LogicalDisk::unmount()>:
c000d074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d078:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d082:	c3                   	ret    
c000d083:	90                   	nop

c000d084 <LogicalDisk::eject()>:
c000d084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d088:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d08e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d090:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d094:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d097:	90                   	nop

c000d098 <LogicalDisk::unassignDriveLetter()>:
c000d098:	57                   	push   edi
c000d099:	56                   	push   esi
c000d09a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d09e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d0a5:	85 c9                	test   ecx,ecx
c000d0a7:	75 0f                	jne    c000d0b8 <LogicalDisk::unassignDriveLetter()+0x20>
c000d0a9:	c7 44 24 0c 6c 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc002056c
c000d0b1:	5e                   	pop    esi
c000d0b2:	5f                   	pop    edi
c000d0b3:	e9 4f 37 00 00       	jmp    c0010807 <KePanic(char const*)>
c000d0b8:	83 e9 41             	sub    ecx,0x41
c000d0bb:	b8 01 00 00 00       	mov    eax,0x1
c000d0c0:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d0c7:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d0d2:	d3 e0                	shl    eax,cl
c000d0d4:	89 c7                	mov    edi,eax
c000d0d6:	f7 d0                	not    eax
c000d0d8:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d0de:	c1 ff 1f             	sar    edi,0x1f
c000d0e1:	89 fe                	mov    esi,edi
c000d0e3:	f7 d6                	not    esi
c000d0e5:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d0eb:	5e                   	pop    esi
c000d0ec:	5f                   	pop    edi
c000d0ed:	c3                   	ret    

c000d0ee <LogicalDisk::read(unsigned long long, int, void*)>:
c000d0ee:	57                   	push   edi
c000d0ef:	56                   	push   esi
c000d0f0:	53                   	push   ebx
c000d0f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d0f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d0f9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d0fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d101:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d107:	77 41                	ja     c000d14a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d109:	99                   	cdq    
c000d10a:	01 c8                	add    eax,ecx
c000d10c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d112:	11 da                	adc    edx,ebx
c000d114:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d11a:	19 d7                	sbb    edi,edx
c000d11c:	72 33                	jb     c000d151 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d11e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d124:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d12a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d12e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d132:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d138:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d13e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d142:	5b                   	pop    ebx
c000d143:	5e                   	pop    esi
c000d144:	5f                   	pop    edi
c000d145:	e9 c8 0a 00 00       	jmp    c000dc12 <VCache::read(unsigned long long, int, void*)>
c000d14a:	b8 05 00 00 00       	mov    eax,0x5
c000d14f:	eb 05                	jmp    c000d156 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d151:	b8 07 00 00 00       	mov    eax,0x7
c000d156:	5b                   	pop    ebx
c000d157:	5e                   	pop    esi
c000d158:	5f                   	pop    edi
c000d159:	c3                   	ret    

c000d15a <LogicalDisk::write(unsigned long long, int, void*)>:
c000d15a:	57                   	push   edi
c000d15b:	56                   	push   esi
c000d15c:	53                   	push   ebx
c000d15d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d161:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d165:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d169:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d16d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d173:	77 41                	ja     c000d1b6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d175:	99                   	cdq    
c000d176:	01 c8                	add    eax,ecx
c000d178:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d17e:	11 da                	adc    edx,ebx
c000d180:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d186:	19 d7                	sbb    edi,edx
c000d188:	72 33                	jb     c000d1bd <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d18a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d190:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d196:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d19a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d19e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d1a4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d1aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1ae:	5b                   	pop    ebx
c000d1af:	5e                   	pop    esi
c000d1b0:	5f                   	pop    edi
c000d1b1:	e9 6e 09 00 00       	jmp    c000db24 <VCache::write(unsigned long long, int, void*)>
c000d1b6:	b8 05 00 00 00       	mov    eax,0x5
c000d1bb:	eb 05                	jmp    c000d1c2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d1bd:	b8 07 00 00 00       	mov    eax,0x7
c000d1c2:	5b                   	pop    ebx
c000d1c3:	5e                   	pop    esi
c000d1c4:	5f                   	pop    edi
c000d1c5:	c3                   	ret    
c000d1c6:	66 90                	xchg   ax,ax

c000d1c8 <Mouse::Mouse(char const*)>:
c000d1c8:	83 ec 0c             	sub    esp,0xc
c000d1cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1cf:	83 ec 08             	sub    esp,0x8
c000d1d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1d6:	50                   	push   eax
c000d1d7:	e8 c2 ec ff ff       	call   c000be9e <Device::Device(char const*)>
c000d1dc:	83 c4 10             	add    esp,0x10
c000d1df:	ba c0 05 02 c0       	mov    edx,0xc00205c0
c000d1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e8:	89 10                	mov    DWORD PTR [eax],edx
c000d1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1ee:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d1f8:	90                   	nop
c000d1f9:	83 c4 0c             	add    esp,0xc
c000d1fc:	c3                   	ret    
c000d1fd:	90                   	nop
c000d1fe:	66 90                	xchg   ax,ax

c000d200 <Mouse::~Mouse()>:
c000d200:	83 ec 0c             	sub    esp,0xc
c000d203:	ba c0 05 02 c0       	mov    edx,0xc00205c0
c000d208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d20c:	89 10                	mov    DWORD PTR [eax],edx
c000d20e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d212:	83 ec 0c             	sub    esp,0xc
c000d215:	50                   	push   eax
c000d216:	e8 ed e9 ff ff       	call   c000bc08 <Device::~Device()>
c000d21b:	83 c4 10             	add    esp,0x10
c000d21e:	90                   	nop
c000d21f:	83 c4 0c             	add    esp,0xc
c000d222:	c3                   	ret    
c000d223:	90                   	nop

c000d224 <Mouse::~Mouse()>:
c000d224:	83 ec 0c             	sub    esp,0xc
c000d227:	83 ec 0c             	sub    esp,0xc
c000d22a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d22e:	e8 cd ff ff ff       	call   c000d200 <Mouse::~Mouse()>
c000d233:	83 c4 10             	add    esp,0x10
c000d236:	83 ec 08             	sub    esp,0x8
c000d239:	68 58 01 00 00       	push   0x158
c000d23e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d242:	e8 5c d5 ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c000d247:	83 c4 10             	add    esp,0x10
c000d24a:	83 c4 0c             	add    esp,0xc
c000d24d:	c3                   	ret    

c000d24e <NIC::getMAC()>:
c000d24e:	31 c0                	xor    eax,eax
c000d250:	31 d2                	xor    edx,edx
c000d252:	c3                   	ret    
c000d253:	90                   	nop

c000d254 <NIC::write(int, unsigned char*, int*)>:
c000d254:	b8 01 00 00 00       	mov    eax,0x1
c000d259:	c3                   	ret    

c000d25a <NIC::NIC(char const*)>:
c000d25a:	83 ec 0c             	sub    esp,0xc
c000d25d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d261:	83 ec 08             	sub    esp,0x8
c000d264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d268:	50                   	push   eax
c000d269:	e8 30 ec ff ff       	call   c000be9e <Device::Device(char const*)>
c000d26e:	83 c4 10             	add    esp,0x10
c000d271:	ba ec 05 02 c0       	mov    edx,0xc00205ec
c000d276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d27a:	89 10                	mov    DWORD PTR [eax],edx
c000d27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d280:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d28a:	90                   	nop
c000d28b:	83 c4 0c             	add    esp,0xc
c000d28e:	c3                   	ret    
c000d28f:	90                   	nop

c000d290 <NIC::~NIC()>:
c000d290:	83 ec 0c             	sub    esp,0xc
c000d293:	ba ec 05 02 c0       	mov    edx,0xc00205ec
c000d298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d29c:	89 10                	mov    DWORD PTR [eax],edx
c000d29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a2:	83 ec 0c             	sub    esp,0xc
c000d2a5:	50                   	push   eax
c000d2a6:	e8 5d e9 ff ff       	call   c000bc08 <Device::~Device()>
c000d2ab:	83 c4 10             	add    esp,0x10
c000d2ae:	90                   	nop
c000d2af:	83 c4 0c             	add    esp,0xc
c000d2b2:	c3                   	ret    
c000d2b3:	90                   	nop

c000d2b4 <NIC::~NIC()>:
c000d2b4:	83 ec 0c             	sub    esp,0xc
c000d2b7:	83 ec 0c             	sub    esp,0xc
c000d2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2be:	e8 cd ff ff ff       	call   c000d290 <NIC::~NIC()>
c000d2c3:	83 c4 10             	add    esp,0x10
c000d2c6:	83 ec 08             	sub    esp,0x8
c000d2c9:	68 58 01 00 00       	push   0x158
c000d2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2d2:	e8 cc d4 ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	83 c4 0c             	add    esp,0xc
c000d2dd:	c3                   	ret    

c000d2de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d2de:	55                   	push   ebp
c000d2df:	57                   	push   edi
c000d2e0:	56                   	push   esi
c000d2e1:	53                   	push   ebx
c000d2e2:	81 ec 28 01 00 00    	sub    esp,0x128
c000d2e8:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d2ef:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d2f6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d2fd:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d304:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d308:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d30c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d313:	e8 82 ec ff ff       	call   c000bf9a <Device::getName()>
c000d318:	5a                   	pop    edx
c000d319:	59                   	pop    ecx
c000d31a:	50                   	push   eax
c000d31b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d31f:	55                   	push   ebp
c000d320:	e8 cb 32 ff ff       	call   c00005f0 <strcpy>
c000d325:	5b                   	pop    ebx
c000d326:	58                   	pop    eax
c000d327:	68 18 06 02 c0       	push   0xc0020618
c000d32c:	55                   	push   ebp
c000d32d:	e8 8e 34 ff ff       	call   c00007c0 <strcat>
c000d332:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d339:	e8 f1 a6 ff ff       	call   c0007a2f <malloc>
c000d33e:	83 c4 0c             	add    esp,0xc
c000d341:	57                   	push   edi
c000d342:	89 c3                	mov    ebx,eax
c000d344:	56                   	push   esi
c000d345:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d349:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d34d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d354:	55                   	push   ebp
c000d355:	50                   	push   eax
c000d356:	e8 57 fb ff ff       	call   c000ceb2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d35b:	83 c4 14             	add    esp,0x14
c000d35e:	53                   	push   ebx
c000d35f:	e8 0e fc ff ff       	call   c000cf72 <LogicalDisk::assignDriveLetter()>
c000d364:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d367:	e8 c0 fc ff ff       	call   c000d02c <LogicalDisk::mount()>
c000d36c:	58                   	pop    eax
c000d36d:	5a                   	pop    edx
c000d36e:	53                   	push   ebx
c000d36f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d376:	e8 8b e9 ff ff       	call   c000bd06 <Device::addChild(Device*)>
c000d37b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d381:	5b                   	pop    ebx
c000d382:	5e                   	pop    esi
c000d383:	5f                   	pop    edi
c000d384:	5d                   	pop    ebp
c000d385:	c3                   	ret    

c000d386 <createPartitionsForDisk(PhysicalDisk*)>:
c000d386:	55                   	push   ebp
c000d387:	57                   	push   edi
c000d388:	56                   	push   esi
c000d389:	53                   	push   ebx
c000d38a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d390:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d397:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d39d:	3d 00 02 00 00       	cmp    eax,0x200
c000d3a2:	74 27                	je     c000d3cb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d3a4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d3aa:	83 ec 10             	sub    esp,0x10
c000d3ad:	99                   	cdq    
c000d3ae:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d3b4:	52                   	push   edx
c000d3b5:	50                   	push   eax
c000d3b6:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d3ba:	c1 e6 0a             	shl    esi,0xa
c000d3bd:	89 fd                	mov    ebp,edi
c000d3bf:	55                   	push   ebp
c000d3c0:	56                   	push   esi
c000d3c1:	e8 aa 11 01 00       	call   c001e570 <__udivdi3>
c000d3c6:	e9 b9 00 00 00       	jmp    c000d484 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d3cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3cd:	83 ec 0c             	sub    esp,0xc
c000d3d0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d3d4:	56                   	push   esi
c000d3d5:	6a 01                	push   0x1
c000d3d7:	6a 00                	push   0x0
c000d3d9:	6a 00                	push   0x0
c000d3db:	53                   	push   ebx
c000d3dc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d3df:	83 c4 20             	add    esp,0x20
c000d3e2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d3ea:	75 0a                	jne    c000d3f6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d3ec:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d3f4:	74 2c                	je     c000d422 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d3f6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d3fc:	83 ec 10             	sub    esp,0x10
c000d3ff:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d405:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d40b:	89 f7                	mov    edi,esi
c000d40d:	c1 ff 1f             	sar    edi,0x1f
c000d410:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d414:	c1 e0 0a             	shl    eax,0xa
c000d417:	57                   	push   edi
c000d418:	56                   	push   esi
c000d419:	52                   	push   edx
c000d41a:	50                   	push   eax
c000d41b:	e8 50 11 01 00       	call   c001e570 <__udivdi3>
c000d420:	eb 62                	jmp    c000d484 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d422:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d429:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d430:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d437:	89 cf                	mov    edi,ecx
c000d439:	83 e2 7f             	and    edx,0x7f
c000d43c:	83 e7 7f             	and    edi,0x7f
c000d43f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d442:	83 e0 7f             	and    eax,0x7f
c000d445:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d448:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d44f:	83 e0 7f             	and    eax,0x7f
c000d452:	01 d0                	add    eax,edx
c000d454:	84 c0                	test   al,al
c000d456:	89 c5                	mov    ebp,eax
c000d458:	74 41                	je     c000d49b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d45a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d460:	83 ec 10             	sub    esp,0x10
c000d463:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d469:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d46f:	89 f7                	mov    edi,esi
c000d471:	c1 ff 1f             	sar    edi,0x1f
c000d474:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d478:	c1 e0 0a             	shl    eax,0xa
c000d47b:	57                   	push   edi
c000d47c:	56                   	push   esi
c000d47d:	52                   	push   edx
c000d47e:	50                   	push   eax
c000d47f:	e8 ec 10 01 00       	call   c001e570 <__udivdi3>
c000d484:	83 c4 14             	add    esp,0x14
c000d487:	52                   	push   edx
c000d488:	50                   	push   eax
c000d489:	6a 00                	push   0x0
c000d48b:	6a 00                	push   0x0
c000d48d:	53                   	push   ebx
c000d48e:	e8 4b fe ff ff       	call   c000d2de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d493:	83 c4 20             	add    esp,0x20
c000d496:	e9 73 01 00 00       	jmp    c000d60e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d49b:	89 f0                	mov    eax,esi
c000d49d:	31 c9                	xor    ecx,ecx
c000d49f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d4a6:	75 02                	jne    c000d4aa <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d4a8:	89 cd                	mov    ebp,ecx
c000d4aa:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d4b1:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d4b9:	83 c0 10             	add    eax,0x10
c000d4bc:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000d4c3:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d4cb:	c1 e2 08             	shl    edx,0x8
c000d4ce:	c1 e6 10             	shl    esi,0x10
c000d4d1:	09 f2                	or     edx,esi
c000d4d3:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000d4da:	09 f2                	or     edx,esi
c000d4dc:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d4e3:	c1 e6 18             	shl    esi,0x18
c000d4e6:	09 f2                	or     edx,esi
c000d4e8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d4ef:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d4f3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d4fa:	c1 e6 10             	shl    esi,0x10
c000d4fd:	c1 e2 08             	shl    edx,0x8
c000d500:	09 f2                	or     edx,esi
c000d502:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d509:	09 f2                	or     edx,esi
c000d50b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d512:	c1 e6 18             	shl    esi,0x18
c000d515:	09 f2                	or     edx,esi
c000d517:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d51b:	41                   	inc    ecx
c000d51c:	83 f9 04             	cmp    ecx,0x4
c000d51f:	0f 85 7a ff ff ff    	jne    c000d49f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d529:	83 f0 01             	xor    eax,0x1
c000d52c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d530:	75 4f                	jne    c000d581 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d532:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d536:	83 f0 01             	xor    eax,0x1
c000d539:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d53d:	75 42                	jne    c000d581 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d53f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d545:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d54d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d553:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d55b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d561:	89 f7                	mov    edi,esi
c000d563:	c1 ff 1f             	sar    edi,0x1f
c000d566:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d56a:	c1 e0 0a             	shl    eax,0xa
c000d56d:	57                   	push   edi
c000d56e:	56                   	push   esi
c000d56f:	52                   	push   edx
c000d570:	50                   	push   eax
c000d571:	e8 fa 0f 01 00       	call   c001e570 <__udivdi3>
c000d576:	83 c4 10             	add    esp,0x10
c000d579:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d57d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d581:	89 e8                	mov    eax,ebp
c000d583:	0f b6 e8             	movzx  ebp,al
c000d586:	85 ed                	test   ebp,ebp
c000d588:	74 50                	je     c000d5da <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d58a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d58e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d592:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d596:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d59a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d59e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d5a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5a6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d5aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d5b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d5ba:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d5be:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d5c2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d5c6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d5ca:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d5ce:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d5d2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d5d6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d5da:	31 ed                	xor    ebp,ebp
c000d5dc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d5e0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d5e4:	89 f8                	mov    eax,edi
c000d5e6:	09 f0                	or     eax,esi
c000d5e8:	74 1e                	je     c000d608 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d5ea:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d5ee:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d5f2:	89 d1                	mov    ecx,edx
c000d5f4:	09 c1                	or     ecx,eax
c000d5f6:	74 10                	je     c000d608 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d5f8:	83 ec 0c             	sub    esp,0xc
c000d5fb:	57                   	push   edi
c000d5fc:	56                   	push   esi
c000d5fd:	52                   	push   edx
c000d5fe:	50                   	push   eax
c000d5ff:	53                   	push   ebx
c000d600:	e8 d9 fc ff ff       	call   c000d2de <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d605:	83 c4 20             	add    esp,0x20
c000d608:	45                   	inc    ebp
c000d609:	83 fd 04             	cmp    ebp,0x4
c000d60c:	75 ce                	jne    c000d5dc <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d60e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d614:	5b                   	pop    ebx
c000d615:	5e                   	pop    esi
c000d616:	5f                   	pop    edi
c000d617:	5d                   	pop    ebp
c000d618:	c3                   	ret    
c000d619:	66 90                	xchg   ax,ax
c000d61b:	90                   	nop

c000d61c <Serial::Serial(char const*)>:
c000d61c:	83 ec 0c             	sub    esp,0xc
c000d61f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d623:	83 ec 08             	sub    esp,0x8
c000d626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d62a:	50                   	push   eax
c000d62b:	e8 6e e8 ff ff       	call   c000be9e <Device::Device(char const*)>
c000d630:	83 c4 10             	add    esp,0x10
c000d633:	ba 2c 06 02 c0       	mov    edx,0xc002062c
c000d638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d63c:	89 10                	mov    DWORD PTR [eax],edx
c000d63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d642:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d64c:	90                   	nop
c000d64d:	83 c4 0c             	add    esp,0xc
c000d650:	c3                   	ret    
c000d651:	90                   	nop
c000d652:	66 90                	xchg   ax,ax

c000d654 <Serial::~Serial()>:
c000d654:	83 ec 0c             	sub    esp,0xc
c000d657:	ba 2c 06 02 c0       	mov    edx,0xc002062c
c000d65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d660:	89 10                	mov    DWORD PTR [eax],edx
c000d662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d666:	83 ec 0c             	sub    esp,0xc
c000d669:	50                   	push   eax
c000d66a:	e8 99 e5 ff ff       	call   c000bc08 <Device::~Device()>
c000d66f:	83 c4 10             	add    esp,0x10
c000d672:	90                   	nop
c000d673:	83 c4 0c             	add    esp,0xc
c000d676:	c3                   	ret    
c000d677:	90                   	nop

c000d678 <Serial::~Serial()>:
c000d678:	83 ec 0c             	sub    esp,0xc
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d682:	e8 cd ff ff ff       	call   c000d654 <Serial::~Serial()>
c000d687:	83 c4 10             	add    esp,0x10
c000d68a:	83 ec 08             	sub    esp,0x8
c000d68d:	68 58 01 00 00       	push   0x158
c000d692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d696:	e8 08 d1 ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c000d69b:	83 c4 10             	add    esp,0x10
c000d69e:	83 c4 0c             	add    esp,0xc
c000d6a1:	c3                   	ret    
c000d6a2:	66 90                	xchg   ax,ax

c000d6a4 <Timer::Timer(char const*)>:
c000d6a4:	83 ec 0c             	sub    esp,0xc
c000d6a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ab:	83 ec 08             	sub    esp,0x8
c000d6ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b2:	50                   	push   eax
c000d6b3:	e8 e6 e7 ff ff       	call   c000be9e <Device::Device(char const*)>
c000d6b8:	83 c4 10             	add    esp,0x10
c000d6bb:	ba 70 06 02 c0       	mov    edx,0xc0020670
c000d6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c4:	89 10                	mov    DWORD PTR [eax],edx
c000d6c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ca:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d6d4:	90                   	nop
c000d6d5:	83 c4 0c             	add    esp,0xc
c000d6d8:	c3                   	ret    
c000d6d9:	90                   	nop
c000d6da:	66 90                	xchg   ax,ax

c000d6dc <Timer::~Timer()>:
c000d6dc:	83 ec 0c             	sub    esp,0xc
c000d6df:	ba 70 06 02 c0       	mov    edx,0xc0020670
c000d6e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6e8:	89 10                	mov    DWORD PTR [eax],edx
c000d6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ee:	83 ec 0c             	sub    esp,0xc
c000d6f1:	50                   	push   eax
c000d6f2:	e8 11 e5 ff ff       	call   c000bc08 <Device::~Device()>
c000d6f7:	83 c4 10             	add    esp,0x10
c000d6fa:	90                   	nop
c000d6fb:	83 c4 0c             	add    esp,0xc
c000d6fe:	c3                   	ret    
c000d6ff:	90                   	nop

c000d700 <Timer::~Timer()>:
c000d700:	83 ec 0c             	sub    esp,0xc
c000d703:	83 ec 0c             	sub    esp,0xc
c000d706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d70a:	e8 cd ff ff ff       	call   c000d6dc <Timer::~Timer()>
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	83 ec 08             	sub    esp,0x8
c000d715:	68 5c 01 00 00       	push   0x15c
c000d71a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d71e:	e8 80 d0 ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c000d723:	83 c4 10             	add    esp,0x10
c000d726:	83 c4 0c             	add    esp,0xc
c000d729:	c3                   	ret    

c000d72a <Timer::read()>:
c000d72a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d72e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d734:	c3                   	ret    

c000d735 <setupTimer(int)>:
c000d735:	53                   	push   ebx
c000d736:	83 ec 14             	sub    esp,0x14
c000d739:	68 5c 01 00 00       	push   0x15c
c000d73e:	e8 ec a2 ff ff       	call   c0007a2f <malloc>
c000d743:	89 04 24             	mov    DWORD PTR [esp],eax
c000d746:	89 c3                	mov    ebx,eax
c000d748:	e8 83 06 01 00       	call   c001ddd0 <PIT::PIT()>
c000d74d:	58                   	pop    eax
c000d74e:	5a                   	pop    edx
c000d74f:	53                   	push   ebx
c000d750:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d756:	e8 ab e5 ff ff       	call   c000bd06 <Device::addChild(Device*)>
c000d75b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d75d:	6a 00                	push   0x0
c000d75f:	6a 00                	push   0x0
c000d761:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d765:	53                   	push   ebx
c000d766:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d769:	83 c4 28             	add    esp,0x28
c000d76c:	89 d8                	mov    eax,ebx
c000d76e:	5b                   	pop    ebx
c000d76f:	c3                   	ret    

c000d770 <timerHandler(unsigned int)>:
c000d770:	56                   	push   esi
c000d771:	53                   	push   ebx
c000d772:	51                   	push   ecx
c000d773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d777:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d77d:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d784:	0f 84 4a 01 00 00    	je     c000d8d4 <timerHandler(unsigned int)+0x164>
c000d78a:	fa                   	cli    
c000d78b:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d791:	83 ec 0c             	sub    esp,0xc
c000d794:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d79a:	68 78 81 02 c0       	push   0xc0028178
c000d79f:	e8 9c 13 01 00       	call   c001eb40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d7a4:	83 c4 10             	add    esp,0x10
c000d7a7:	84 c0                	test   al,al
c000d7a9:	0f 85 a1 00 00 00    	jne    c000d850 <timerHandler(unsigned int)+0xe0>
c000d7af:	83 ec 0c             	sub    esp,0xc
c000d7b2:	68 78 81 02 c0       	push   0xc0028178
c000d7b7:	e8 a0 13 01 00       	call   c001eb5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d7bc:	83 c4 10             	add    esp,0x10
c000d7bf:	89 c6                	mov    esi,eax
c000d7c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d7c4:	83 ec 0c             	sub    esp,0xc
c000d7c7:	68 78 81 02 c0       	push   0xc0028178
c000d7cc:	e8 8b 13 01 00       	call   c001eb5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d7d1:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d7d8:	89 c3                	mov    ebx,eax
c000d7da:	e8 85 13 01 00       	call   c001eb64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d7df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d7e2:	83 c4 10             	add    esp,0x10
c000d7e5:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d7eb:	77 23                	ja     c000d810 <timerHandler(unsigned int)+0xa0>
c000d7ed:	83 ec 0c             	sub    esp,0xc
c000d7f0:	53                   	push   ebx
c000d7f1:	e8 d2 7c 00 00       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c000d7f6:	83 c4 10             	add    esp,0x10
c000d7f9:	39 de                	cmp    esi,ebx
c000d7fb:	75 27                	jne    c000d824 <timerHandler(unsigned int)+0xb4>
c000d7fd:	83 ec 0c             	sub    esp,0xc
c000d800:	68 78 81 02 c0       	push   0xc0028178
c000d805:	e8 52 13 01 00       	call   c001eb5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d80a:	89 c6                	mov    esi,eax
c000d80c:	eb 12                	jmp    c000d820 <timerHandler(unsigned int)+0xb0>
c000d80e:	66 90                	xchg   ax,ax
c000d810:	52                   	push   edx
c000d811:	52                   	push   edx
c000d812:	53                   	push   ebx
c000d813:	68 78 81 02 c0       	push   0xc0028178
c000d818:	e8 03 14 01 00       	call   c001ec20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d81d:	8d 76 00             	lea    esi,[esi+0x0]
c000d820:	83 c4 10             	add    esp,0x10
c000d823:	90                   	nop
c000d824:	83 ec 0c             	sub    esp,0xc
c000d827:	68 78 81 02 c0       	push   0xc0028178
c000d82c:	e8 0f 13 01 00       	call   c001eb40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d831:	83 c4 10             	add    esp,0x10
c000d834:	84 c0                	test   al,al
c000d836:	75 18                	jne    c000d850 <timerHandler(unsigned int)+0xe0>
c000d838:	83 ec 0c             	sub    esp,0xc
c000d83b:	68 78 81 02 c0       	push   0xc0028178
c000d840:	e8 17 13 01 00       	call   c001eb5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d845:	83 c4 10             	add    esp,0x10
c000d848:	39 f0                	cmp    eax,esi
c000d84a:	0f 85 74 ff ff ff    	jne    c000d7c4 <timerHandler(unsigned int)+0x54>
c000d850:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d855:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d859:	74 41                	je     c000d89c <timerHandler(unsigned int)+0x12c>
c000d85b:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d862:	74 38                	je     c000d89c <timerHandler(unsigned int)+0x12c>
c000d864:	fa                   	cli    
c000d865:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d86b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d871:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d876:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d879:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d87f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d882:	72 08                	jb     c000d88c <timerHandler(unsigned int)+0x11c>
c000d884:	e8 47 77 00 00       	call   c0014fd0 <schedule()>
c000d889:	8d 76 00             	lea    esi,[esi+0x0]
c000d88c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d891:	48                   	dec    eax
c000d892:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d897:	75 03                	jne    c000d89c <timerHandler(unsigned int)+0x12c>
c000d899:	fb                   	sti    
c000d89a:	66 90                	xchg   ax,ax
c000d89c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d8a1:	48                   	dec    eax
c000d8a2:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d8a7:	75 1b                	jne    c000d8c4 <timerHandler(unsigned int)+0x154>
c000d8a9:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d8b0:	74 12                	je     c000d8c4 <timerHandler(unsigned int)+0x154>
c000d8b2:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d8bc:	e8 0f 77 00 00       	call   c0014fd0 <schedule()>
c000d8c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d8c4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d8c9:	48                   	dec    eax
c000d8ca:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d8cf:	75 03                	jne    c000d8d4 <timerHandler(unsigned int)+0x164>
c000d8d1:	fb                   	sti    
c000d8d2:	66 90                	xchg   ax,ax
c000d8d4:	58                   	pop    eax
c000d8d5:	5b                   	pop    ebx
c000d8d6:	5e                   	pop    esi
c000d8d7:	c3                   	ret    

c000d8d8 <VCache::VCache(PhysicalDisk*)>:
c000d8d8:	53                   	push   ebx
c000d8d9:	83 ec 18             	sub    esp,0x18
c000d8dc:	ba a0 06 02 c0       	mov    edx,0xc00206a0
c000d8e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e5:	89 10                	mov    DWORD PTR [eax],edx
c000d8e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8eb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d8f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8f6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d8fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d901:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d908:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d90f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d913:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d91a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d921:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d925:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d92c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d930:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d938:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d93f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d94a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d94e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d952:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d95a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d95e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d962:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d969:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d971:	83 ec 0c             	sub    esp,0xc
c000d974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d978:	e8 b2 a0 ff ff       	call   c0007a2f <malloc>
c000d97d:	83 c4 10             	add    esp,0x10
c000d980:	89 c3                	mov    ebx,eax
c000d982:	83 ec 0c             	sub    esp,0xc
c000d985:	53                   	push   ebx
c000d986:	e8 f1 73 00 00       	call   c0014d7c <Mutex::Mutex()>
c000d98b:	83 c4 10             	add    esp,0x10
c000d98e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d992:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d999:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d99d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d9a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9a4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d9ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d9af:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d9b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d9bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d9c0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d9c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d9cc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d9d0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d9d3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d9d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9da:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d9de:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d9e2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d9e8:	05 00 02 00 00       	add    eax,0x200
c000d9ed:	c1 e0 03             	shl    eax,0x3
c000d9f0:	83 ec 0c             	sub    esp,0xc
c000d9f3:	50                   	push   eax
c000d9f4:	e8 36 a0 ff ff       	call   c0007a2f <malloc>
c000d9f9:	83 c4 10             	add    esp,0x10
c000d9fc:	89 c2                	mov    edx,eax
c000d9fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da02:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000da05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da09:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da14:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da18:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da1c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000da22:	89 d0                	mov    eax,edx
c000da24:	c1 e0 02             	shl    eax,0x2
c000da27:	01 d0                	add    eax,edx
c000da29:	c1 e0 04             	shl    eax,0x4
c000da2c:	83 ec 0c             	sub    esp,0xc
c000da2f:	50                   	push   eax
c000da30:	e8 fa 9f ff ff       	call   c0007a2f <malloc>
c000da35:	83 c4 10             	add    esp,0x10
c000da38:	89 c2                	mov    edx,eax
c000da3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da3e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000da41:	90                   	nop
c000da42:	83 c4 18             	add    esp,0x18
c000da45:	5b                   	pop    ebx
c000da46:	c3                   	ret    
c000da47:	90                   	nop

c000da48 <VCache::invalidateReadBuffer()>:
c000da48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da4c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000da52:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da56:	c3                   	ret    
c000da57:	90                   	nop

c000da58 <VCache::writeWriteBuffer()>:
c000da58:	53                   	push   ebx
c000da59:	83 ec 08             	sub    esp,0x8
c000da5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000da60:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000da64:	74 1e                	je     c000da84 <VCache::writeWriteBuffer()+0x2c>
c000da66:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000da69:	83 ec 0c             	sub    esp,0xc
c000da6c:	8b 10                	mov    edx,DWORD PTR [eax]
c000da6e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000da71:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000da74:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000da77:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da7a:	50                   	push   eax
c000da7b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000da7e:	83 c4 20             	add    esp,0x20
c000da81:	8d 76 00             	lea    esi,[esi+0x0]
c000da84:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da8b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000da92:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000da96:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000da9d:	83 c4 08             	add    esp,0x8
c000daa0:	5b                   	pop    ebx
c000daa1:	c3                   	ret    
c000daa2:	66 90                	xchg   ax,ax

c000daa4 <VCache::~VCache()>:
c000daa4:	83 ec 0c             	sub    esp,0xc
c000daa7:	ba a0 06 02 c0       	mov    edx,0xc00206a0
c000daac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab0:	89 10                	mov    DWORD PTR [eax],edx
c000dab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dab6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000dab9:	0f b6 c0             	movzx  eax,al
c000dabc:	85 c0                	test   eax,eax
c000dabe:	74 10                	je     c000dad0 <VCache::~VCache()+0x2c>
c000dac0:	83 ec 0c             	sub    esp,0xc
c000dac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dac7:	e8 8c ff ff ff       	call   c000da58 <VCache::writeWriteBuffer()>
c000dacc:	83 c4 10             	add    esp,0x10
c000dacf:	90                   	nop
c000dad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dad4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dad7:	83 ec 0c             	sub    esp,0xc
c000dada:	50                   	push   eax
c000dadb:	e8 5f 9f ff ff       	call   c0007a3f <free>
c000dae0:	83 c4 10             	add    esp,0x10
c000dae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000daea:	83 ec 0c             	sub    esp,0xc
c000daed:	50                   	push   eax
c000daee:	e8 4c 9f ff ff       	call   c0007a3f <free>
c000daf3:	83 c4 10             	add    esp,0x10
c000daf6:	90                   	nop
c000daf7:	83 c4 0c             	add    esp,0xc
c000dafa:	c3                   	ret    
c000dafb:	90                   	nop

c000dafc <VCache::~VCache()>:
c000dafc:	83 ec 0c             	sub    esp,0xc
c000daff:	83 ec 0c             	sub    esp,0xc
c000db02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db06:	e8 99 ff ff ff       	call   c000daa4 <VCache::~VCache()>
c000db0b:	83 c4 10             	add    esp,0x10
c000db0e:	83 ec 08             	sub    esp,0x8
c000db11:	6a 44                	push   0x44
c000db13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db17:	e8 87 cc ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c000db1c:	83 c4 10             	add    esp,0x10
c000db1f:	83 c4 0c             	add    esp,0xc
c000db22:	c3                   	ret    
c000db23:	90                   	nop

c000db24 <VCache::write(unsigned long long, int, void*)>:
c000db24:	55                   	push   ebp
c000db25:	57                   	push   edi
c000db26:	56                   	push   esi
c000db27:	53                   	push   ebx
c000db28:	83 ec 1c             	sub    esp,0x1c
c000db2b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000db2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db33:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000db37:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000db3b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000db3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db43:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000db47:	74 07                	je     c000db50 <VCache::write(unsigned long long, int, void*)+0x2c>
c000db49:	53                   	push   ebx
c000db4a:	e8 f9 fe ff ff       	call   c000da48 <VCache::invalidateReadBuffer()>
c000db4f:	58                   	pop    eax
c000db50:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db54:	74 62                	je     c000dbb8 <VCache::write(unsigned long long, int, void*)+0x94>
c000db56:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000db59:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000db5d:	99                   	cdq    
c000db5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db62:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000db65:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000db68:	31 c1                	xor    ecx,eax
c000db6a:	89 d0                	mov    eax,edx
c000db6c:	89 ca                	mov    edx,ecx
c000db6e:	31 e8                	xor    eax,ebp
c000db70:	09 c2                	or     edx,eax
c000db72:	75 38                	jne    c000dbac <VCache::write(unsigned long long, int, void*)+0x88>
c000db74:	83 ff 01             	cmp    edi,0x1
c000db77:	75 33                	jne    c000dbac <VCache::write(unsigned long long, int, void*)+0x88>
c000db79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db80:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000db83:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db89:	0f af c8             	imul   ecx,eax
c000db8c:	01 cf                	add    edi,ecx
c000db8e:	89 c1                	mov    ecx,eax
c000db90:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000db92:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000db95:	40                   	inc    eax
c000db96:	83 f8 50             	cmp    eax,0x50
c000db99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000db9c:	75 6a                	jne    c000dc08 <VCache::write(unsigned long long, int, void*)+0xe4>
c000db9e:	83 ec 0c             	sub    esp,0xc
c000dba1:	53                   	push   ebx
c000dba2:	e8 b1 fe ff ff       	call   c000da58 <VCache::writeWriteBuffer()>
c000dba7:	83 c4 10             	add    esp,0x10
c000dbaa:	eb 5c                	jmp    c000dc08 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dbac:	83 ec 0c             	sub    esp,0xc
c000dbaf:	53                   	push   ebx
c000dbb0:	e8 a3 fe ff ff       	call   c000da58 <VCache::writeWriteBuffer()>
c000dbb5:	83 c4 10             	add    esp,0x10
c000dbb8:	83 ff 4f             	cmp    edi,0x4f
c000dbbb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dbbe:	7f 20                	jg     c000dbe0 <VCache::write(unsigned long long, int, void*)+0xbc>
c000dbc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dbc4:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dbc7:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dbca:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dbcd:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dbd1:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000dbd4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dbda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dbdc:	eb 2a                	jmp    c000dc08 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dbde:	66 90                	xchg   ax,ax
c000dbe0:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbe2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dbe6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dbea:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dbee:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dbf2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dbf6:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dbfa:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dbfd:	83 c4 1c             	add    esp,0x1c
c000dc00:	5b                   	pop    ebx
c000dc01:	5e                   	pop    esi
c000dc02:	5f                   	pop    edi
c000dc03:	5d                   	pop    ebp
c000dc04:	ff e0                	jmp    eax
c000dc06:	66 90                	xchg   ax,ax
c000dc08:	83 c4 1c             	add    esp,0x1c
c000dc0b:	31 c0                	xor    eax,eax
c000dc0d:	5b                   	pop    ebx
c000dc0e:	5e                   	pop    esi
c000dc0f:	5f                   	pop    edi
c000dc10:	5d                   	pop    ebp
c000dc11:	c3                   	ret    

c000dc12 <VCache::read(unsigned long long, int, void*)>:
c000dc12:	55                   	push   ebp
c000dc13:	57                   	push   edi
c000dc14:	56                   	push   esi
c000dc15:	53                   	push   ebx
c000dc16:	83 ec 1c             	sub    esp,0x1c
c000dc19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dc1d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dc21:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dc25:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dc29:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dc2d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dc31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc35:	74 0d                	je     c000dc44 <VCache::read(unsigned long long, int, void*)+0x32>
c000dc37:	83 ec 0c             	sub    esp,0xc
c000dc3a:	57                   	push   edi
c000dc3b:	e8 18 fe ff ff       	call   c000da58 <VCache::writeWriteBuffer()>
c000dc40:	83 c4 10             	add    esp,0x10
c000dc43:	90                   	nop
c000dc44:	83 fd 01             	cmp    ebp,0x1
c000dc47:	0f 85 93 00 00 00    	jne    c000dce0 <VCache::read(unsigned long long, int, void*)+0xce>
c000dc4d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dc50:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dc57:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc5a:	0f 85 80 00 00 00    	jne    c000dce0 <VCache::read(unsigned long long, int, void*)+0xce>
c000dc60:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000dc63:	89 cd                	mov    ebp,ecx
c000dc65:	f7 dd                	neg    ebp
c000dc67:	89 e8                	mov    eax,ebp
c000dc69:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000dc6d:	21 dd                	and    ebp,ebx
c000dc6f:	c1 f8 1f             	sar    eax,0x1f
c000dc72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc76:	89 e8                	mov    eax,ebp
c000dc78:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dc7c:	21 f5                	and    ebp,esi
c000dc7e:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dc82:	89 ea                	mov    edx,ebp
c000dc84:	74 2e                	je     c000dcb4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dc86:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000dc89:	75 29                	jne    c000dcb4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dc8b:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dc8e:	75 24                	jne    c000dcb4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dc90:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dc93:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc99:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dc9c:	8d 70 ff             	lea    esi,[eax-0x1]
c000dc9f:	21 f3                	and    ebx,esi
c000dca1:	0f af d9             	imul   ebx,ecx
c000dca4:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000dca7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dcab:	89 de                	mov    esi,ebx
c000dcad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcaf:	31 c0                	xor    eax,eax
c000dcb1:	eb 61                	jmp    c000dd14 <VCache::read(unsigned long long, int, void*)+0x102>
c000dcb3:	90                   	nop
c000dcb4:	83 ec 0c             	sub    esp,0xc
c000dcb7:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dcbb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dcbf:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000dcc2:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000dcc5:	8b 36                	mov    esi,DWORD PTR [esi]
c000dcc7:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000dcca:	51                   	push   ecx
c000dccb:	52                   	push   edx
c000dccc:	50                   	push   eax
c000dccd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcd1:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000dcd4:	83 c4 20             	add    esp,0x20
c000dcd7:	85 c0                	test   eax,eax
c000dcd9:	75 39                	jne    c000dd14 <VCache::read(unsigned long long, int, void*)+0x102>
c000dcdb:	eb b3                	jmp    c000dc90 <VCache::read(unsigned long long, int, void*)+0x7e>
c000dcdd:	8d 76 00             	lea    esi,[esi+0x0]
c000dce0:	83 ec 0c             	sub    esp,0xc
c000dce3:	57                   	push   edi
c000dce4:	e8 5f fd ff ff       	call   c000da48 <VCache::invalidateReadBuffer()>
c000dce9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dcec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dcf0:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcf2:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000dcf6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000dcfa:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000dcfe:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000dd02:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd06:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000dd09:	83 c4 2c             	add    esp,0x2c
c000dd0c:	5b                   	pop    ebx
c000dd0d:	5e                   	pop    esi
c000dd0e:	5f                   	pop    edi
c000dd0f:	5d                   	pop    ebp
c000dd10:	ff e0                	jmp    eax
c000dd12:	66 90                	xchg   ax,ax
c000dd14:	83 c4 1c             	add    esp,0x1c
c000dd17:	5b                   	pop    ebx
c000dd18:	5e                   	pop    esi
c000dd19:	5f                   	pop    edi
c000dd1a:	5d                   	pop    ebp
c000dd1b:	c3                   	ret    

c000dd1c <Video::putrect(int, int, int, int, unsigned int)>:
c000dd1c:	55                   	push   ebp
c000dd1d:	57                   	push   edi
c000dd1e:	56                   	push   esi
c000dd1f:	53                   	push   ebx
c000dd20:	83 ec 0c             	sub    esp,0xc
c000dd23:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c000dd27:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dd2b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dd2f:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c000dd33:	01 ef                	add    edi,ebp
c000dd35:	39 fd                	cmp    ebp,edi
c000dd37:	7d 24                	jge    c000dd5d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000dd39:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000dd3d:	39 f3                	cmp    ebx,esi
c000dd3f:	7d 19                	jge    c000dd5a <Video::putrect(int, int, int, int, unsigned int)+0x3e>
c000dd41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd45:	8b 08                	mov    ecx,DWORD PTR [eax]
c000dd47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd4b:	55                   	push   ebp
c000dd4c:	53                   	push   ebx
c000dd4d:	43                   	inc    ebx
c000dd4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd52:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000dd55:	83 c4 10             	add    esp,0x10
c000dd58:	eb e3                	jmp    c000dd3d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000dd5a:	45                   	inc    ebp
c000dd5b:	eb d8                	jmp    c000dd35 <Video::putrect(int, int, int, int, unsigned int)+0x19>
c000dd5d:	83 c4 0c             	add    esp,0xc
c000dd60:	5b                   	pop    ebx
c000dd61:	5e                   	pop    esi
c000dd62:	5f                   	pop    edi
c000dd63:	5d                   	pop    ebp
c000dd64:	c3                   	ret    
c000dd65:	90                   	nop

c000dd66 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000dd66:	55                   	push   ebp
c000dd67:	57                   	push   edi
c000dd68:	31 ff                	xor    edi,edi
c000dd6a:	56                   	push   esi
c000dd6b:	53                   	push   ebx
c000dd6c:	83 ec 1c             	sub    esp,0x1c
c000dd6f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000dd73:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000dd7a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000dd7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd83:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000dd87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dd8b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000dd8e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dd92:	01 fd                	add    ebp,edi
c000dd94:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000dd98:	7d 2d                	jge    c000ddc7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x61>
c000dd9a:	31 f6                	xor    esi,esi
c000dd9c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dda0:	01 f2                	add    edx,esi
c000dda2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000dda6:	7d 18                	jge    c000ddc0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x5a>
c000dda8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ddac:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddae:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ddb1:	55                   	push   ebp
c000ddb2:	46                   	inc    esi
c000ddb3:	52                   	push   edx
c000ddb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ddb8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ddbb:	83 c4 10             	add    esp,0x10
c000ddbe:	eb dc                	jmp    c000dd9c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x36>
c000ddc0:	47                   	inc    edi
c000ddc1:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c000ddc5:	eb c7                	jmp    c000dd8e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x28>
c000ddc7:	83 c4 1c             	add    esp,0x1c
c000ddca:	5b                   	pop    ebx
c000ddcb:	5e                   	pop    esi
c000ddcc:	5f                   	pop    edi
c000ddcd:	5d                   	pop    ebp
c000ddce:	c3                   	ret    
c000ddcf:	90                   	nop

c000ddd0 <Video::blit(unsigned int*, int, int, int, int)>:
c000ddd0:	55                   	push   ebp
c000ddd1:	57                   	push   edi
c000ddd2:	56                   	push   esi
c000ddd3:	53                   	push   ebx
c000ddd4:	bb 00 00 00 00       	mov    ebx,0x0
c000ddd9:	83 ec 1c             	sub    esp,0x1c
c000dddc:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000dde1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dde5:	0f 49 5c 24 40       	cmovns ebx,DWORD PTR [esp+0x40]
c000ddea:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ddee:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ddf5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ddf9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ddfd:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000de01:	39 f0                	cmp    eax,esi
c000de03:	7e 49                	jle    c000de4e <Video::blit(unsigned int*, int, int, int, int)+0x7e>
c000de05:	39 b7 5c 01 00 00    	cmp    DWORD PTR [edi+0x15c],esi
c000de0b:	7c 41                	jl     c000de4e <Video::blit(unsigned int*, int, int, int, int)+0x7e>
c000de0d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000de11:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000de15:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de19:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000de1d:	39 e9                	cmp    ecx,ebp
c000de1f:	7e 22                	jle    c000de43 <Video::blit(unsigned int*, int, int, int, int)+0x73>
c000de21:	83 c3 04             	add    ebx,0x4
c000de24:	39 af 58 01 00 00    	cmp    DWORD PTR [edi+0x158],ebp
c000de2a:	7c 14                	jl     c000de40 <Video::blit(unsigned int*, int, int, int, int)+0x70>
c000de2c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000de2e:	ff 73 fc             	push   DWORD PTR [ebx-0x4]
c000de31:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000de35:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000de39:	57                   	push   edi
c000de3a:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000de3d:	83 c4 10             	add    esp,0x10
c000de40:	45                   	inc    ebp
c000de41:	eb d2                	jmp    c000de15 <Video::blit(unsigned int*, int, int, int, int)+0x45>
c000de43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de47:	46                   	inc    esi
c000de48:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000de4c:	eb ab                	jmp    c000ddf9 <Video::blit(unsigned int*, int, int, int, int)+0x29>
c000de4e:	83 c4 1c             	add    esp,0x1c
c000de51:	5b                   	pop    ebx
c000de52:	5e                   	pop    esi
c000de53:	5f                   	pop    edi
c000de54:	5d                   	pop    ebp
c000de55:	c3                   	ret    

c000de56 <Video::clearScreen(unsigned int)>:
c000de56:	57                   	push   edi
c000de57:	56                   	push   esi
c000de58:	53                   	push   ebx
c000de59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de5d:	31 db                	xor    ebx,ebx
c000de5f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000de65:	7e 1f                	jle    c000de86 <Video::clearScreen(unsigned int)+0x30>
c000de67:	31 ff                	xor    edi,edi
c000de69:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000de6f:	7e 12                	jle    c000de83 <Video::clearScreen(unsigned int)+0x2d>
c000de71:	8b 06                	mov    eax,DWORD PTR [esi]
c000de73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de77:	53                   	push   ebx
c000de78:	57                   	push   edi
c000de79:	47                   	inc    edi
c000de7a:	56                   	push   esi
c000de7b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de7e:	83 c4 10             	add    esp,0x10
c000de81:	eb e6                	jmp    c000de69 <Video::clearScreen(unsigned int)+0x13>
c000de83:	43                   	inc    ebx
c000de84:	eb d9                	jmp    c000de5f <Video::clearScreen(unsigned int)+0x9>
c000de86:	5b                   	pop    ebx
c000de87:	5e                   	pop    esi
c000de88:	5f                   	pop    edi
c000de89:	c3                   	ret    

c000de8a <Video::putpixel(int, int, unsigned int)>:
c000de8a:	c7 44 24 04 a8 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc00206a8
c000de92:	e9 70 29 00 00       	jmp    c0010807 <KePanic(char const*)>
c000de97:	90                   	nop

c000de98 <Video::readPixelApprox(int, int)>:
c000de98:	83 ec 18             	sub    esp,0x18
c000de9b:	68 c9 06 02 c0       	push   0xc00206c9
c000dea0:	e8 62 29 00 00       	call   c0010807 <KePanic(char const*)>
c000dea5:	31 c0                	xor    eax,eax
c000dea7:	83 c4 1c             	add    esp,0x1c
c000deaa:	c3                   	ret    
c000deab:	90                   	nop

c000deac <Video::Video(char const*)>:
c000deac:	83 ec 0c             	sub    esp,0xc
c000deaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deb3:	83 ec 08             	sub    esp,0x8
c000deb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deba:	50                   	push   eax
c000debb:	e8 de df ff ff       	call   c000be9e <Device::Device(char const*)>
c000dec0:	83 c4 10             	add    esp,0x10
c000dec3:	ba 44 07 02 c0       	mov    edx,0xc0020744
c000dec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000decc:	89 10                	mov    DWORD PTR [eax],edx
c000dece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dedc:	90                   	nop
c000dedd:	83 c4 0c             	add    esp,0xc
c000dee0:	c3                   	ret    
c000dee1:	90                   	nop

c000dee2 <Video::~Video()>:
c000dee2:	83 ec 0c             	sub    esp,0xc
c000dee5:	ba 44 07 02 c0       	mov    edx,0xc0020744
c000deea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deee:	89 10                	mov    DWORD PTR [eax],edx
c000def0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def4:	83 ec 0c             	sub    esp,0xc
c000def7:	50                   	push   eax
c000def8:	e8 0b dd ff ff       	call   c000bc08 <Device::~Device()>
c000defd:	83 c4 10             	add    esp,0x10
c000df00:	90                   	nop
c000df01:	83 c4 0c             	add    esp,0xc
c000df04:	c3                   	ret    
c000df05:	90                   	nop

c000df06 <Video::~Video()>:
c000df06:	83 ec 0c             	sub    esp,0xc
c000df09:	83 ec 0c             	sub    esp,0xc
c000df0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df10:	e8 cd ff ff ff       	call   c000dee2 <Video::~Video()>
c000df15:	83 c4 10             	add    esp,0x10
c000df18:	83 ec 08             	sub    esp,0x8
c000df1b:	68 64 01 00 00       	push   0x164
c000df20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df24:	e8 7a c8 ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	83 c4 0c             	add    esp,0xc
c000df2f:	c3                   	ret    

c000df30 <Video::isMonochrome()>:
c000df30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df34:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000df3a:	c3                   	ret    
c000df3b:	90                   	nop

c000df3c <Video::getWidth()>:
c000df3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df40:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000df46:	c3                   	ret    
c000df47:	90                   	nop

c000df48 <Video::getHeight()>:
c000df48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df4c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000df52:	c3                   	ret    
c000df53:	90                   	nop

c000df54 <Video::drawCursor(int, int, unsigned int*, int)>:
c000df54:	55                   	push   ebp
c000df55:	57                   	push   edi
c000df56:	56                   	push   esi
c000df57:	53                   	push   ebx
c000df58:	83 ec 2c             	sub    esp,0x2c
c000df5b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000df5f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000df63:	83 f8 01             	cmp    eax,0x1
c000df66:	19 c9                	sbb    ecx,ecx
c000df68:	31 db                	xor    ebx,ebx
c000df6a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000df6e:	89 cd                	mov    ebp,ecx
c000df70:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000df78:	f7 d5                	not    ebp
c000df7a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000df80:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000df84:	01 d8                	add    eax,ebx
c000df86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000df8a:	56                   	push   esi
c000df8b:	e8 b8 ff ff ff       	call   c000df48 <Video::getHeight()>
c000df90:	59                   	pop    ecx
c000df91:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000df95:	7e 70                	jle    c000e007 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000df97:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000df9b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000df9f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dfa2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfa6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dfaa:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dfb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfb5:	89 f8                	mov    eax,edi
c000dfb7:	83 c0 20             	add    eax,0x20
c000dfba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfbe:	56                   	push   esi
c000dfbf:	e8 78 ff ff ff       	call   c000df3c <Video::getWidth()>
c000dfc4:	5a                   	pop    edx
c000dfc5:	39 c7                	cmp    edi,eax
c000dfc7:	7d 34                	jge    c000dffd <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000dfc9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dfce:	74 05                	je     c000dfd5 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000dfd0:	8b 06                	mov    eax,DWORD PTR [esi]
c000dfd2:	55                   	push   ebp
c000dfd3:	eb 0d                	jmp    c000dfe2 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000dfd5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dfda:	74 12                	je     c000dfee <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000dfdc:	8b 06                	mov    eax,DWORD PTR [esi]
c000dfde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dfe2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfe6:	57                   	push   edi
c000dfe7:	56                   	push   esi
c000dfe8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dfeb:	83 c4 10             	add    esp,0x10
c000dfee:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dff2:	47                   	inc    edi
c000dff3:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dff7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000dffb:	75 c1                	jne    c000dfbe <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000dffd:	43                   	inc    ebx
c000dffe:	83 fb 20             	cmp    ebx,0x20
c000e001:	0f 85 79 ff ff ff    	jne    c000df80 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e007:	83 c4 2c             	add    esp,0x2c
c000e00a:	5b                   	pop    ebx
c000e00b:	5e                   	pop    esi
c000e00c:	5f                   	pop    edi
c000e00d:	5d                   	pop    ebp
c000e00e:	c3                   	ret    
c000e00f:	90                   	nop

c000e010 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e010:	55                   	push   ebp
c000e011:	57                   	push   edi
c000e012:	56                   	push   esi
c000e013:	53                   	push   ebx
c000e014:	83 ec 28             	sub    esp,0x28
c000e017:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e01b:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e01f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e023:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e027:	c1 e6 08             	shl    esi,0x8
c000e02a:	01 c6                	add    esi,eax
c000e02c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e030:	c1 e0 08             	shl    eax,0x8
c000e033:	01 d0                	add    eax,edx
c000e035:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e039:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e03d:	0f af c6             	imul   eax,esi
c000e040:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e047:	50                   	push   eax
c000e048:	e8 e2 99 ff ff       	call   c0007a2f <malloc>
c000e04d:	83 c4 10             	add    esp,0x10
c000e050:	85 c0                	test   eax,eax
c000e052:	89 c7                	mov    edi,eax
c000e054:	75 10                	jne    c000e066 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e056:	83 ec 0c             	sub    esp,0xc
c000e059:	68 f4 06 02 c0       	push   0xc00206f4
c000e05e:	e8 a4 27 00 00       	call   c0010807 <KePanic(char const*)>
c000e063:	83 c4 10             	add    esp,0x10
c000e066:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e06a:	ba 12 00 00 00       	mov    edx,0x12
c000e06f:	85 c0                	test   eax,eax
c000e071:	74 11                	je     c000e084 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e073:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e077:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e07b:	c1 fa 03             	sar    edx,0x3
c000e07e:	0f af d1             	imul   edx,ecx
c000e081:	83 c2 12             	add    edx,0x12
c000e084:	85 f6                	test   esi,esi
c000e086:	74 06                	je     c000e08e <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e088:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e08c:	75 12                	jne    c000e0a0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e08e:	83 ec 0c             	sub    esp,0xc
c000e091:	68 04 07 02 c0       	push   0xc0020704
c000e096:	e8 06 c8 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c000e09b:	e9 b8 00 00 00       	jmp    c000e158 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e0a0:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e0a4:	83 f9 02             	cmp    ecx,0x2
c000e0a7:	0f 85 96 00 00 00    	jne    c000e143 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e0ad:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e0b2:	75 0e                	jne    c000e0c2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e0b4:	85 c0                	test   eax,eax
c000e0b6:	75 0a                	jne    c000e0c2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e0b8:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e0bb:	83 e8 18             	sub    eax,0x18
c000e0be:	a8 f7                	test   al,0xf7
c000e0c0:	74 0a                	je     c000e0cc <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e0c2:	83 ec 0c             	sub    esp,0xc
c000e0c5:	68 19 07 02 c0       	push   0xc0020719
c000e0ca:	eb 7f                	jmp    c000e14b <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e0cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e0d4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e0dc:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e0e0:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e0e4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e0ec:	75 0c                	jne    c000e0fa <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e0ee:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e0f3:	c1 e0 18             	shl    eax,0x18
c000e0f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0fa:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e0ff:	45                   	inc    ebp
c000e100:	c1 e1 10             	shl    ecx,0x10
c000e103:	89 c8                	mov    eax,ecx
c000e105:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e10a:	c1 e1 08             	shl    ecx,0x8
c000e10d:	09 c1                	or     ecx,eax
c000e10f:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e113:	09 c1                	or     ecx,eax
c000e115:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e119:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e11d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e121:	c1 f8 03             	sar    eax,0x3
c000e124:	01 c2                	add    edx,eax
c000e126:	89 e8                	mov    eax,ebp
c000e128:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e12c:	39 c6                	cmp    esi,eax
c000e12e:	7f b0                	jg     c000e0e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e130:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e134:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e138:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e13b:	7e 22                	jle    c000e15f <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e13d:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e141:	eb 99                	jmp    c000e0dc <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e143:	50                   	push   eax
c000e144:	50                   	push   eax
c000e145:	51                   	push   ecx
c000e146:	68 27 07 02 c0       	push   0xc0020727
c000e14b:	e8 51 c7 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c000e150:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e153:	e8 e7 98 ff ff       	call   c0007a3f <free>
c000e158:	83 c4 10             	add    esp,0x10
c000e15b:	31 ff                	xor    edi,edi
c000e15d:	eb 0f                	jmp    c000e16e <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e15f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e163:	89 30                	mov    DWORD PTR [eax],esi
c000e165:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e169:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e16c:	89 30                	mov    DWORD PTR [eax],esi
c000e16e:	83 c4 1c             	add    esp,0x1c
c000e171:	89 f8                	mov    eax,edi
c000e173:	5b                   	pop    ebx
c000e174:	5e                   	pop    esi
c000e175:	5f                   	pop    edi
c000e176:	5d                   	pop    ebp
c000e177:	c3                   	ret    

c000e178 <Video::putTGA(int, int, unsigned char*, int)>:
c000e178:	55                   	push   ebp
c000e179:	57                   	push   edi
c000e17a:	56                   	push   esi
c000e17b:	53                   	push   ebx
c000e17c:	83 ec 28             	sub    esp,0x28
c000e17f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e183:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e187:	50                   	push   eax
c000e188:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e18c:	50                   	push   eax
c000e18d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e191:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e195:	56                   	push   esi
c000e196:	e8 75 fe ff ff       	call   c000e010 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e19b:	83 c4 20             	add    esp,0x20
c000e19e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e1a2:	85 c0                	test   eax,eax
c000e1a4:	74 35                	je     c000e1db <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e1a6:	89 c7                	mov    edi,eax
c000e1a8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000e1ac:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c000e1b0:	39 da                	cmp    edx,ebx
c000e1b2:	7e 27                	jle    c000e1db <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e1b4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e1b8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e1bc:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000e1c0:	39 e9                	cmp    ecx,ebp
c000e1c2:	7e 14                	jle    c000e1d8 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e1c4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e1c6:	83 c7 04             	add    edi,0x4
c000e1c9:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e1cc:	53                   	push   ebx
c000e1cd:	55                   	push   ebp
c000e1ce:	45                   	inc    ebp
c000e1cf:	56                   	push   esi
c000e1d0:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e1d3:	83 c4 10             	add    esp,0x10
c000e1d6:	eb e0                	jmp    c000e1b8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e1d8:	43                   	inc    ebx
c000e1d9:	eb cd                	jmp    c000e1a8 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e1db:	83 c4 1c             	add    esp,0x1c
c000e1de:	5b                   	pop    ebx
c000e1df:	5e                   	pop    esi
c000e1e0:	5f                   	pop    edi
c000e1e1:	5d                   	pop    ebp
c000e1e2:	c3                   	ret    
c000e1e3:	90                   	nop

c000e1e4 <ACPI::close(int, int, void*)>:
c000e1e4:	83 ec 1c             	sub    esp,0x1c
c000e1e7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e1ef:	74 0b                	je     c000e1fc <ACPI::close(int, int, void*)+0x18>
c000e1f1:	b8 00 00 00 00       	mov    eax,0x0
c000e1f6:	e9 99 00 00 00       	jmp    c000e294 <ACPI::close(int, int, void*)+0xb0>
c000e1fb:	90                   	nop
c000e1fc:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e201:	75 29                	jne    c000e22c <ACPI::close(int, int, void*)+0x48>
c000e203:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e208:	85 c0                	test   eax,eax
c000e20a:	74 08                	je     c000e214 <ACPI::close(int, int, void*)+0x30>
c000e20c:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e211:	ff d0                	call   eax
c000e213:	90                   	nop
c000e214:	83 ec 0c             	sub    esp,0xc
c000e217:	68 88 07 02 c0       	push   0xc0020788
c000e21c:	e8 e6 25 00 00       	call   c0010807 <KePanic(char const*)>
c000e221:	83 c4 10             	add    esp,0x10
c000e224:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e229:	eb 69                	jmp    c000e294 <ACPI::close(int, int, void*)+0xb0>
c000e22b:	90                   	nop
c000e22c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e231:	75 59                	jne    c000e28c <ACPI::close(int, int, void*)+0xa8>
c000e233:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e238:	85 c0                	test   eax,eax
c000e23a:	74 08                	je     c000e244 <ACPI::close(int, int, void*)+0x60>
c000e23c:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e241:	ff d0                	call   eax
c000e243:	90                   	nop
c000e244:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e249:	8d 76 00             	lea    esi,[esi+0x0]
c000e24c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e251:	83 e0 02             	and    eax,0x2
c000e254:	74 1e                	je     c000e274 <ACPI::close(int, int, void*)+0x90>
c000e256:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e25d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e261:	89 c2                	mov    edx,eax
c000e263:	ec                   	in     al,dx
c000e264:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e268:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e26c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e270:	eb da                	jmp    c000e24c <ACPI::close(int, int, void*)+0x68>
c000e272:	66 90                	xchg   ax,ax
c000e274:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e27b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e280:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e284:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e288:	ee                   	out    dx,al
c000e289:	8d 76 00             	lea    esi,[esi+0x0]
c000e28c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e291:	8d 76 00             	lea    esi,[esi+0x0]
c000e294:	83 c4 1c             	add    esp,0x1c
c000e297:	c3                   	ret    

c000e298 <findRSDP()>:
c000e298:	83 ec 1c             	sub    esp,0x1c
c000e29b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e2a0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e2a6:	83 e0 04             	and    eax,0x4
c000e2a9:	0f b6 c0             	movzx  eax,al
c000e2ac:	85 c0                	test   eax,eax
c000e2ae:	75 08                	jne    c000e2b8 <findRSDP()+0x20>
c000e2b0:	b8 00 00 00 00       	mov    eax,0x0
c000e2b5:	eb 75                	jmp    c000e32c <findRSDP()+0x94>
c000e2b7:	90                   	nop
c000e2b8:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e2bd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e2c2:	7f 1c                	jg     c000e2e0 <findRSDP()+0x48>
c000e2c4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e2c9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e2cf:	83 e2 fb             	and    edx,0xfffffffb
c000e2d2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2d8:	b8 00 00 00 00       	mov    eax,0x0
c000e2dd:	eb 4d                	jmp    c000e32c <findRSDP()+0x94>
c000e2df:	90                   	nop
c000e2e0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e2e8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e2f0:	77 32                	ja     c000e324 <findRSDP()+0x8c>
c000e2f2:	83 ec 04             	sub    esp,0x4
c000e2f5:	6a 08                	push   0x8
c000e2f7:	68 23 08 02 c0       	push   0xc0020823
c000e2fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e300:	e8 7b 20 ff ff       	call   c0000380 <memcmp>
c000e305:	83 c4 10             	add    esp,0x10
c000e308:	85 c0                	test   eax,eax
c000e30a:	0f 94 c0             	sete   al
c000e30d:	0f b6 c0             	movzx  eax,al
c000e310:	85 c0                	test   eax,eax
c000e312:	74 08                	je     c000e31c <findRSDP()+0x84>
c000e314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e318:	eb 12                	jmp    c000e32c <findRSDP()+0x94>
c000e31a:	66 90                	xchg   ax,ax
c000e31c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e321:	eb c5                	jmp    c000e2e8 <findRSDP()+0x50>
c000e323:	90                   	nop
c000e324:	b8 00 00 00 00       	mov    eax,0x0
c000e329:	8d 76 00             	lea    esi,[esi+0x0]
c000e32c:	83 c4 1c             	add    esp,0x1c
c000e32f:	c3                   	ret    

c000e330 <loadACPITables(unsigned char*)>:
c000e330:	57                   	push   edi
c000e331:	56                   	push   esi
c000e332:	53                   	push   ebx
c000e333:	83 ec 60             	sub    esp,0x60
c000e336:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e33b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e341:	83 e0 04             	and    eax,0x4
c000e344:	0f b6 c0             	movzx  eax,al
c000e347:	85 c0                	test   eax,eax
c000e349:	0f 84 41 02 00 00    	je     c000e590 <loadACPITables(unsigned char*)+0x260>
c000e34f:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e354:	0f b6 c0             	movzx  eax,al
c000e357:	85 c0                	test   eax,eax
c000e359:	74 79                	je     c000e3d4 <loadACPITables(unsigned char*)+0xa4>
c000e35b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e35f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e363:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e367:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e36a:	83 e8 24             	sub    eax,0x24
c000e36d:	c1 e8 03             	shr    eax,0x3
c000e370:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e374:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e37c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e380:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e384:	0f 8d ba 00 00 00    	jge    c000e444 <loadACPITables(unsigned char*)+0x114>
c000e38a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e38e:	83 c0 24             	add    eax,0x24
c000e391:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e399:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e39d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e3a1:	c1 e0 03             	shl    eax,0x3
c000e3a4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e3a8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e3ac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e3af:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3b1:	89 c1                	mov    ecx,eax
c000e3b3:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e3b8:	8d 50 01             	lea    edx,[eax+0x1]
c000e3bb:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e3c1:	89 ca                	mov    edx,ecx
c000e3c3:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e3ca:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e3cf:	eb ab                	jmp    c000e37c <loadACPITables(unsigned char*)+0x4c>
c000e3d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e3d4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e3d8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e3dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e3e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e3e3:	83 e8 24             	sub    eax,0x24
c000e3e6:	c1 e8 02             	shr    eax,0x2
c000e3e9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e3ed:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e3f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3f8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e3fc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e400:	7d 42                	jge    c000e444 <loadACPITables(unsigned char*)+0x114>
c000e402:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e406:	83 c0 24             	add    eax,0x24
c000e409:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e40d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e411:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e415:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e419:	c1 e0 02             	shl    eax,0x2
c000e41c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e420:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e424:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e426:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e42b:	8d 50 01             	lea    edx,[eax+0x1]
c000e42e:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e434:	89 ca                	mov    edx,ecx
c000e436:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e43d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e442:	eb b4                	jmp    c000e3f8 <loadACPITables(unsigned char*)+0xc8>
c000e444:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e44c:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e451:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e455:	0f 8d 39 01 00 00    	jge    c000e594 <loadACPITables(unsigned char*)+0x264>
c000e45b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e45f:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e466:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e46a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e46e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e472:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e476:	25 ff 0f 00 00       	and    eax,0xfff
c000e47b:	89 c6                	mov    esi,eax
c000e47d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e483:	83 ec 0c             	sub    esp,0xc
c000e486:	6a 01                	push   0x1
c000e488:	e8 e0 b0 ff ff       	call   c000956d <Virt::allocateKernelVirtualPages(int)>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e496:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e49b:	83 ec 0c             	sub    esp,0xc
c000e49e:	6a 01                	push   0x1
c000e4a0:	6a 01                	push   0x1
c000e4a2:	52                   	push   edx
c000e4a3:	50                   	push   eax
c000e4a4:	53                   	push   ebx
c000e4a5:	e8 b8 ba ff ff       	call   c0009f62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e4aa:	83 c4 20             	add    esp,0x20
c000e4ad:	09 f0                	or     eax,esi
c000e4af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e4b3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e4b7:	c1 e0 03             	shl    eax,0x3
c000e4ba:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e4bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e4c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e4cb:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e4d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e4d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e4df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e4e3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e4e7:	89 c6                	mov    esi,eax
c000e4e9:	89 d7                	mov    edi,edx
c000e4eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4ed:	89 c8                	mov    eax,ecx
c000e4ef:	89 fa                	mov    edx,edi
c000e4f1:	89 f3                	mov    ebx,esi
c000e4f3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e4f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e4fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e4ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e503:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e506:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e50a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e50e:	05 00 10 00 00       	add    eax,0x1000
c000e513:	c1 e8 0c             	shr    eax,0xc
c000e516:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e51a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e51e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e522:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e526:	25 ff 0f 00 00       	and    eax,0xfff
c000e52b:	89 c6                	mov    esi,eax
c000e52d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e533:	83 ec 0c             	sub    esp,0xc
c000e536:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e53a:	e8 2e b0 ff ff       	call   c000956d <Virt::allocateKernelVirtualPages(int)>
c000e53f:	83 c4 10             	add    esp,0x10
c000e542:	89 c2                	mov    edx,eax
c000e544:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e548:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e54d:	83 ec 0c             	sub    esp,0xc
c000e550:	6a 01                	push   0x1
c000e552:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e556:	52                   	push   edx
c000e557:	50                   	push   eax
c000e558:	53                   	push   ebx
c000e559:	e8 04 ba ff ff       	call   c0009f62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e55e:	83 c4 20             	add    esp,0x20
c000e561:	09 f0                	or     eax,esi
c000e563:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e56b:	83 ec 0c             	sub    esp,0xc
c000e56e:	50                   	push   eax
c000e56f:	e8 13 b3 ff ff       	call   c0009887 <Virt::freeKernelVirtualPages(unsigned long)>
c000e574:	83 c4 10             	add    esp,0x10
c000e577:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e57b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e57f:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e586:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e58b:	e9 bc fe ff ff       	jmp    c000e44c <loadACPITables(unsigned char*)+0x11c>
c000e590:	90                   	nop
c000e591:	8d 76 00             	lea    esi,[esi+0x0]
c000e594:	83 c4 60             	add    esp,0x60
c000e597:	5b                   	pop    ebx
c000e598:	5e                   	pop    esi
c000e599:	5f                   	pop    edi
c000e59a:	c3                   	ret    
c000e59b:	90                   	nop

c000e59c <findRSDT(unsigned char*)>:
c000e59c:	57                   	push   edi
c000e59d:	56                   	push   esi
c000e59e:	53                   	push   ebx
c000e59f:	83 ec 50             	sub    esp,0x50
c000e5a2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e5a7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e5ad:	83 e0 04             	and    eax,0x4
c000e5b0:	0f b6 c0             	movzx  eax,al
c000e5b3:	85 c0                	test   eax,eax
c000e5b5:	75 0d                	jne    c000e5c4 <findRSDT(unsigned char*)+0x28>
c000e5b7:	b8 00 00 00 00       	mov    eax,0x0
c000e5bc:	e9 2f 01 00 00       	jmp    c000e6f0 <findRSDT(unsigned char*)+0x154>
c000e5c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5c4:	89 e0                	mov    eax,esp
c000e5c6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e5ca:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e5ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e5d2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e5da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e5de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e5e6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e5ea:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e5ee:	89 c6                	mov    esi,eax
c000e5f0:	89 d7                	mov    edi,edx
c000e5f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5f4:	89 c8                	mov    eax,ecx
c000e5f6:	89 fa                	mov    edx,edi
c000e5f8:	89 f3                	mov    ebx,esi
c000e5fa:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e5fe:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e602:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e606:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e60a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e60e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e616:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e61a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e61e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e626:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e62a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e62e:	25 ff 0f 00 00       	and    eax,0xfff
c000e633:	89 c6                	mov    esi,eax
c000e635:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e63b:	83 ec 0c             	sub    esp,0xc
c000e63e:	6a 02                	push   0x2
c000e640:	e8 28 af ff ff       	call   c000956d <Virt::allocateKernelVirtualPages(int)>
c000e645:	83 c4 10             	add    esp,0x10
c000e648:	89 c2                	mov    edx,eax
c000e64a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e64e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e653:	83 ec 0c             	sub    esp,0xc
c000e656:	6a 01                	push   0x1
c000e658:	6a 02                	push   0x2
c000e65a:	52                   	push   edx
c000e65b:	50                   	push   eax
c000e65c:	53                   	push   ebx
c000e65d:	e8 00 b9 ff ff       	call   c0009f62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e662:	83 c4 20             	add    esp,0x20
c000e665:	09 f0                	or     eax,esi
c000e667:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e66b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e66f:	25 ff 0f 00 00       	and    eax,0xfff
c000e674:	89 c6                	mov    esi,eax
c000e676:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e67c:	83 ec 0c             	sub    esp,0xc
c000e67f:	6a 02                	push   0x2
c000e681:	e8 e7 ae ff ff       	call   c000956d <Virt::allocateKernelVirtualPages(int)>
c000e686:	83 c4 10             	add    esp,0x10
c000e689:	89 c2                	mov    edx,eax
c000e68b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e68f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e694:	83 ec 0c             	sub    esp,0xc
c000e697:	6a 01                	push   0x1
c000e699:	6a 02                	push   0x2
c000e69b:	52                   	push   edx
c000e69c:	50                   	push   eax
c000e69d:	53                   	push   ebx
c000e69e:	e8 bf b8 ff ff       	call   c0009f62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e6a3:	83 c4 20             	add    esp,0x20
c000e6a6:	09 f0                	or     eax,esi
c000e6a8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e6ac:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e6b1:	85 c0                	test   eax,eax
c000e6b3:	75 13                	jne    c000e6c8 <findRSDT(unsigned char*)+0x12c>
c000e6b5:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e6bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e6c0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e6c4:	eb 26                	jmp    c000e6ec <findRSDT(unsigned char*)+0x150>
c000e6c6:	66 90                	xchg   ax,ax
c000e6c8:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e6cd:	83 f8 02             	cmp    eax,0x2
c000e6d0:	75 12                	jne    c000e6e4 <findRSDT(unsigned char*)+0x148>
c000e6d2:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e6d9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e6dd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e6e1:	eb 09                	jmp    c000e6ec <findRSDT(unsigned char*)+0x150>
c000e6e3:	90                   	nop
c000e6e4:	b8 00 00 00 00       	mov    eax,0x0
c000e6e9:	eb 05                	jmp    c000e6f0 <findRSDT(unsigned char*)+0x154>
c000e6eb:	90                   	nop
c000e6ec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e6f0:	83 c4 50             	add    esp,0x50
c000e6f3:	5b                   	pop    ebx
c000e6f4:	5e                   	pop    esi
c000e6f5:	5f                   	pop    edi
c000e6f6:	c3                   	ret    
c000e6f7:	90                   	nop

c000e6f8 <findDataTable(unsigned char*, char*)>:
c000e6f8:	83 ec 1c             	sub    esp,0x1c
c000e6fb:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e700:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e706:	83 e0 04             	and    eax,0x4
c000e709:	0f b6 c0             	movzx  eax,al
c000e70c:	85 c0                	test   eax,eax
c000e70e:	75 08                	jne    c000e718 <findDataTable(unsigned char*, char*)+0x20>
c000e710:	b8 00 00 00 00       	mov    eax,0x0
c000e715:	eb 5d                	jmp    c000e774 <findDataTable(unsigned char*, char*)+0x7c>
c000e717:	90                   	nop
c000e718:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e720:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e725:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e729:	7d 41                	jge    c000e76c <findDataTable(unsigned char*, char*)+0x74>
c000e72b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e72f:	c1 e0 03             	shl    eax,0x3
c000e732:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e737:	83 ec 04             	sub    esp,0x4
c000e73a:	6a 04                	push   0x4
c000e73c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e740:	50                   	push   eax
c000e741:	e8 3a 1c ff ff       	call   c0000380 <memcmp>
c000e746:	83 c4 10             	add    esp,0x10
c000e749:	85 c0                	test   eax,eax
c000e74b:	0f 94 c0             	sete   al
c000e74e:	0f b6 c0             	movzx  eax,al
c000e751:	85 c0                	test   eax,eax
c000e753:	74 0f                	je     c000e764 <findDataTable(unsigned char*, char*)+0x6c>
c000e755:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e759:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e760:	eb 12                	jmp    c000e774 <findDataTable(unsigned char*, char*)+0x7c>
c000e762:	66 90                	xchg   ax,ax
c000e764:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e769:	eb b5                	jmp    c000e720 <findDataTable(unsigned char*, char*)+0x28>
c000e76b:	90                   	nop
c000e76c:	b8 00 00 00 00       	mov    eax,0x0
c000e771:	8d 76 00             	lea    esi,[esi+0x0]
c000e774:	83 c4 1c             	add    esp,0x1c
c000e777:	c3                   	ret    

c000e778 <scanMADT()>:
c000e778:	53                   	push   ebx
c000e779:	83 ec 38             	sub    esp,0x38
c000e77c:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e781:	25 00 04 00 00       	and    eax,0x400
c000e786:	74 14                	je     c000e79c <scanMADT()+0x24>
c000e788:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e78d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e793:	83 e2 fb             	and    edx,0xfffffffb
c000e796:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e79c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7a1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e7a7:	83 e0 04             	and    eax,0x4
c000e7aa:	0f b6 c0             	movzx  eax,al
c000e7ad:	85 c0                	test   eax,eax
c000e7af:	0f 84 6b 04 00 00    	je     c000ec20 <scanMADT()+0x4a8>
c000e7b5:	e8 de fa ff ff       	call   c000e298 <findRSDP()>
c000e7ba:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e7bf:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e7c4:	85 c0                	test   eax,eax
c000e7c6:	75 1c                	jne    c000e7e4 <scanMADT()+0x6c>
c000e7c8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7cd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e7d3:	83 e2 fb             	and    edx,0xfffffffb
c000e7d6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e7dc:	e9 47 04 00 00       	jmp    c000ec28 <scanMADT()+0x4b0>
c000e7e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e7e4:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e7e9:	83 ec 0c             	sub    esp,0xc
c000e7ec:	50                   	push   eax
c000e7ed:	e8 aa fd ff ff       	call   c000e59c <findRSDT(unsigned char*)>
c000e7f2:	83 c4 10             	add    esp,0x10
c000e7f5:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e7fa:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e7ff:	85 c0                	test   eax,eax
c000e801:	75 19                	jne    c000e81c <scanMADT()+0xa4>
c000e803:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e808:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e80e:	83 e2 fb             	and    edx,0xfffffffb
c000e811:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e817:	e9 0c 04 00 00       	jmp    c000ec28 <scanMADT()+0x4b0>
c000e81c:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e821:	83 ec 0c             	sub    esp,0xc
c000e824:	50                   	push   eax
c000e825:	e8 06 fb ff ff       	call   c000e330 <loadACPITables(unsigned char*)>
c000e82a:	83 c4 10             	add    esp,0x10
c000e82d:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e832:	83 ec 08             	sub    esp,0x8
c000e835:	68 2c 08 02 c0       	push   0xc002082c
c000e83a:	50                   	push   eax
c000e83b:	e8 b8 fe ff ff       	call   c000e6f8 <findDataTable(unsigned char*, char*)>
c000e840:	83 c4 10             	add    esp,0x10
c000e843:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e847:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e84c:	75 1a                	jne    c000e868 <scanMADT()+0xf0>
c000e84e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e853:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e859:	83 e2 fe             	and    edx,0xfffffffe
c000e85c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e862:	e9 c1 03 00 00       	jmp    c000ec28 <scanMADT()+0x4b0>
c000e867:	90                   	nop
c000e868:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e870:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e874:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e877:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e87b:	0f 87 a7 03 00 00    	ja     c000ec28 <scanMADT()+0x4b0>
c000e881:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e889:	0f 87 99 03 00 00    	ja     c000ec28 <scanMADT()+0x4b0>
c000e88f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e893:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e897:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e89b:	8d 50 01             	lea    edx,[eax+0x1]
c000e89e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e8a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e8a6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e8aa:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e8ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e8b2:	8d 50 01             	lea    edx,[eax+0x1]
c000e8b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e8b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e8bd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e8c1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e8c5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000e8ca:	83 f8 02             	cmp    eax,0x2
c000e8cd:	0f 86 51 03 00 00    	jbe    c000ec24 <scanMADT()+0x4ac>
c000e8d3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e8d8:	85 c0                	test   eax,eax
c000e8da:	75 58                	jne    c000e934 <scanMADT()+0x1bc>
c000e8dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e8e0:	8d 50 01             	lea    edx,[eax+0x1]
c000e8e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e8e7:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e8ed:	0f b6 d2             	movzx  edx,dl
c000e8f0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e8f4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e8f8:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000e8fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e902:	8d 50 01             	lea    edx,[eax+0x1]
c000e905:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e909:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e90f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e912:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000e918:	0f b6 d2             	movzx  edx,dl
c000e91b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e91f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e923:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000e929:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e92e:	e9 d9 02 00 00       	jmp    c000ec0c <scanMADT()+0x494>
c000e933:	90                   	nop
c000e934:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e939:	83 f8 01             	cmp    eax,0x1
c000e93c:	0f 85 1a 01 00 00    	jne    c000ea5c <scanMADT()+0x2e4>
c000e942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e946:	8d 50 01             	lea    edx,[eax+0x1]
c000e949:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e94d:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000e953:	0f b6 d2             	movzx  edx,dl
c000e956:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e95a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e95e:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000e964:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000e969:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e96d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e971:	01 d0                	add    eax,edx
c000e973:	83 c0 2c             	add    eax,0x2c
c000e976:	8a 00                	mov    al,BYTE PTR [eax]
c000e978:	0f b6 c0             	movzx  eax,al
c000e97b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e97f:	83 c2 01             	add    edx,0x1
c000e982:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e986:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e98a:	0f b6 d2             	movzx  edx,dl
c000e98d:	c1 e2 08             	shl    edx,0x8
c000e990:	09 d0                	or     eax,edx
c000e992:	89 c1                	mov    ecx,eax
c000e994:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e998:	83 c0 02             	add    eax,0x2
c000e99b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e99f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9a3:	0f b6 c0             	movzx  eax,al
c000e9a6:	c1 e0 10             	shl    eax,0x10
c000e9a9:	09 c1                	or     ecx,eax
c000e9ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9af:	83 c0 03             	add    eax,0x3
c000e9b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9b6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9ba:	0f b6 c0             	movzx  eax,al
c000e9bd:	c1 e0 18             	shl    eax,0x18
c000e9c0:	09 c1                	or     ecx,eax
c000e9c2:	89 ca                	mov    edx,ecx
c000e9c4:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000e9c9:	0f b6 c0             	movzx  eax,al
c000e9cc:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000e9d3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e9d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9e0:	01 d0                	add    eax,edx
c000e9e2:	83 c0 2c             	add    eax,0x2c
c000e9e5:	8a 00                	mov    al,BYTE PTR [eax]
c000e9e7:	0f b6 c0             	movzx  eax,al
c000e9ea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e9ee:	83 c2 01             	add    edx,0x1
c000e9f1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9f5:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e9f9:	0f b6 d2             	movzx  edx,dl
c000e9fc:	c1 e2 08             	shl    edx,0x8
c000e9ff:	09 d0                	or     eax,edx
c000ea01:	89 c1                	mov    ecx,eax
c000ea03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea07:	83 c0 02             	add    eax,0x2
c000ea0a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea0e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ea12:	0f b6 c0             	movzx  eax,al
c000ea15:	c1 e0 10             	shl    eax,0x10
c000ea18:	09 c1                	or     ecx,eax
c000ea1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea1e:	83 c0 03             	add    eax,0x3
c000ea21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea25:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ea29:	0f b6 c0             	movzx  eax,al
c000ea2c:	c1 e0 18             	shl    eax,0x18
c000ea2f:	09 c1                	or     ecx,eax
c000ea31:	89 ca                	mov    edx,ecx
c000ea33:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ea38:	0f b6 c0             	movzx  eax,al
c000ea3b:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000ea42:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea47:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ea4c:	83 c0 01             	add    eax,0x1
c000ea4f:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000ea54:	e9 b3 01 00 00       	jmp    c000ec0c <scanMADT()+0x494>
c000ea59:	8d 76 00             	lea    esi,[esi+0x0]
c000ea5c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ea61:	83 f8 02             	cmp    eax,0x2
c000ea64:	0f 85 ea 00 00 00    	jne    c000eb54 <scanMADT()+0x3dc>
c000ea6a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea6e:	8d 50 01             	lea    edx,[eax+0x1]
c000ea71:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea75:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea79:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ea7d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000ea81:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea85:	8d 50 01             	lea    edx,[eax+0x1]
c000ea88:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea8c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea90:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ea94:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000ea98:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaa0:	01 d0                	add    eax,edx
c000eaa2:	83 c0 2c             	add    eax,0x2c
c000eaa5:	8a 00                	mov    al,BYTE PTR [eax]
c000eaa7:	0f b6 c0             	movzx  eax,al
c000eaaa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eaae:	83 c2 01             	add    edx,0x1
c000eab1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000eab5:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000eab9:	0f b6 d2             	movzx  edx,dl
c000eabc:	c1 e2 08             	shl    edx,0x8
c000eabf:	09 d0                	or     eax,edx
c000eac1:	89 c1                	mov    ecx,eax
c000eac3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eac7:	83 c0 02             	add    eax,0x2
c000eaca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eace:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ead2:	0f b6 c0             	movzx  eax,al
c000ead5:	c1 e0 10             	shl    eax,0x10
c000ead8:	09 c1                	or     ecx,eax
c000eada:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eade:	83 c0 03             	add    eax,0x3
c000eae1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eae5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eae9:	0f b6 c0             	movzx  eax,al
c000eaec:	c1 e0 18             	shl    eax,0x18
c000eaef:	09 c8                	or     eax,ecx
c000eaf1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eaf5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eafa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eafe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb02:	01 d0                	add    eax,edx
c000eb04:	83 c0 2c             	add    eax,0x2c
c000eb07:	8a 00                	mov    al,BYTE PTR [eax]
c000eb09:	0f b6 c0             	movzx  eax,al
c000eb0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eb10:	83 c2 01             	add    edx,0x1
c000eb13:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000eb17:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000eb1b:	0f b6 d2             	movzx  edx,dl
c000eb1e:	c1 e2 08             	shl    edx,0x8
c000eb21:	09 d0                	or     eax,edx
c000eb23:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000eb28:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000eb2d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000eb32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eb36:	88 90 60 1e 02 c0    	mov    BYTE PTR [eax-0x3ffde1a0],dl
c000eb3c:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000eb41:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000eb46:	66 89 94 00 60 77 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd88a0],dx
c000eb4e:	e9 b9 00 00 00       	jmp    c000ec0c <scanMADT()+0x494>
c000eb53:	90                   	nop
c000eb54:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eb59:	83 f8 04             	cmp    eax,0x4
c000eb5c:	0f 85 9a 00 00 00    	jne    c000ebfc <scanMADT()+0x484>
c000eb62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb66:	8d 50 01             	lea    edx,[eax+0x1]
c000eb69:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb6d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb71:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb75:	0f b6 c0             	movzx  eax,al
c000eb78:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eb7c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb84:	01 d0                	add    eax,edx
c000eb86:	83 c0 2c             	add    eax,0x2c
c000eb89:	8a 00                	mov    al,BYTE PTR [eax]
c000eb8b:	0f b6 c0             	movzx  eax,al
c000eb8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eb92:	83 c2 01             	add    edx,0x1
c000eb95:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000eb99:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000eb9d:	0f b6 d2             	movzx  edx,dl
c000eba0:	c1 e2 08             	shl    edx,0x8
c000eba3:	09 d0                	or     eax,edx
c000eba5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eba9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ebae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebb2:	8d 50 01             	lea    edx,[eax+0x1]
c000ebb5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ebb9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebbd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebc1:	0f b6 c0             	movzx  eax,al
c000ebc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ebc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebcc:	c1 e0 08             	shl    eax,0x8
c000ebcf:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ebd3:	89 c1                	mov    ecx,eax
c000ebd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebd9:	c1 e0 18             	shl    eax,0x18
c000ebdc:	89 c3                	mov    ebx,eax
c000ebde:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ebe3:	8d 50 01             	lea    edx,[eax+0x1]
c000ebe6:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ebec:	09 d9                	or     ecx,ebx
c000ebee:	89 ca                	mov    edx,ecx
c000ebf0:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ebf7:	eb 13                	jmp    c000ec0c <scanMADT()+0x494>
c000ebf9:	8d 76 00             	lea    esi,[esi+0x0]
c000ebfc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec01:	83 f8 05             	cmp    eax,0x5
c000ec04:	75 06                	jne    c000ec0c <scanMADT()+0x494>
c000ec06:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ec0b:	90                   	nop
c000ec0c:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000ec11:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ec15:	01 d0                	add    eax,edx
c000ec17:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ec1b:	e9 50 fc ff ff       	jmp    c000e870 <scanMADT()+0xf8>
c000ec20:	90                   	nop
c000ec21:	eb 05                	jmp    c000ec28 <scanMADT()+0x4b0>
c000ec23:	90                   	nop
c000ec24:	90                   	nop
c000ec25:	8d 76 00             	lea    esi,[esi+0x0]
c000ec28:	83 c4 38             	add    esp,0x38
c000ec2b:	5b                   	pop    ebx
c000ec2c:	c3                   	ret    
c000ec2d:	90                   	nop
c000ec2e:	66 90                	xchg   ax,ax

c000ec30 <ACPI::ACPI()>:
c000ec30:	83 ec 0c             	sub    esp,0xc
c000ec33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec37:	83 ec 08             	sub    esp,0x8
c000ec3a:	68 31 08 02 c0       	push   0xc0020831
c000ec3f:	50                   	push   eax
c000ec40:	e8 59 d2 ff ff       	call   c000be9e <Device::Device(char const*)>
c000ec45:	83 c4 10             	add    esp,0x10
c000ec48:	ba 68 09 02 c0       	mov    edx,0xc0020968
c000ec4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec51:	89 10                	mov    DWORD PTR [eax],edx
c000ec53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec57:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ec5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec62:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ec6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec70:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ec7a:	e8 f9 fa ff ff       	call   c000e778 <scanMADT()>
c000ec7f:	90                   	nop
c000ec80:	83 c4 0c             	add    esp,0xc
c000ec83:	c3                   	ret    

c000ec84 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ec84:	83 ec 2c             	sub    esp,0x2c
c000ec87:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ec8b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec8f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ec93:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000ec97:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ec9c:	88 d0                	mov    al,dl
c000ec9e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000eca2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eca7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ecaf:	90                   	nop
c000ecb0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecb4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ecba:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000ecbe:	0f 8d b0 00 00 00    	jge    c000ed74 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000ecc4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecc8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eccc:	83 c2 2a             	add    edx,0x2a
c000eccf:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000ecd3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000ecd8:	0f b7 c0             	movzx  eax,ax
c000ecdb:	39 c2                	cmp    edx,eax
c000ecdd:	0f 85 85 00 00 00    	jne    c000ed68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ece3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ece7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eceb:	83 c2 2a             	add    edx,0x2a
c000ecee:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000ecf2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000ecf7:	0f b6 c0             	movzx  eax,al
c000ecfa:	39 c2                	cmp    edx,eax
c000ecfc:	75 6a                	jne    c000ed68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ecfe:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ed03:	85 c0                	test   eax,eax
c000ed05:	74 3d                	je     c000ed44 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000ed07:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed0f:	83 c2 2a             	add    edx,0x2a
c000ed12:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ed16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed1d:	39 c2                	cmp    edx,eax
c000ed1f:	74 13                	je     c000ed34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000ed21:	83 ec 0c             	sub    esp,0xc
c000ed24:	68 ac 07 02 c0       	push   0xc00207ac
c000ed29:	e8 d9 1a 00 00       	call   c0010807 <KePanic(char const*)>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	8d 76 00             	lea    esi,[esi+0x0]
c000ed34:	83 ec 0c             	sub    esp,0xc
c000ed37:	68 36 08 02 c0       	push   0xc0020836
c000ed3c:	e8 c6 1a 00 00       	call   c0010807 <KePanic(char const*)>
c000ed41:	83 c4 10             	add    esp,0x10
c000ed44:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ed48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed4c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed50:	83 c2 2a             	add    edx,0x2a
c000ed53:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ed57:	8b 02                	mov    eax,DWORD PTR [edx]
c000ed59:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ed5c:	89 01                	mov    DWORD PTR [ecx],eax
c000ed5e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ed61:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ed66:	66 90                	xchg   ax,ax
c000ed68:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000ed6d:	e9 3e ff ff ff       	jmp    c000ecb0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ed72:	66 90                	xchg   ax,ax
c000ed74:	90                   	nop
c000ed75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed79:	83 c4 2c             	add    esp,0x2c
c000ed7c:	c2 04 00             	ret    0x4
c000ed7f:	90                   	nop

c000ed80 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ed80:	83 ec 1c             	sub    esp,0x1c
c000ed83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed87:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ed8b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ed8f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ed94:	88 c8                	mov    al,cl
c000ed96:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ed9a:	88 d0                	mov    al,dl
c000ed9c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000eda0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eda4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000edaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edae:	83 c2 2a             	add    edx,0x2a
c000edb1:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000edb5:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000edb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edbd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000edc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edc7:	83 c2 2a             	add    edx,0x2a
c000edca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edce:	66 89 4c d0 0c       	mov    WORD PTR [eax+edx*8+0xc],cx
c000edd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edd7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eddd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ede1:	83 c0 01             	add    eax,0x1
c000ede4:	88 c1                	mov    cl,al
c000ede6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edea:	83 c2 2a             	add    edx,0x2a
c000eded:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000edf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edf5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000edfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edff:	83 c2 2a             	add    edx,0x2a
c000ee02:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ee06:	89 4c d0 10          	mov    DWORD PTR [eax+edx*8+0x10],ecx
c000ee0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee0e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee14:	8d 50 01             	lea    edx,[eax+0x1]
c000ee17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee1b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ee21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee25:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee2b:	3d 00 02 00 00       	cmp    eax,0x200
c000ee30:	75 12                	jne    c000ee44 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ee32:	83 ec 0c             	sub    esp,0xc
c000ee35:	68 45 08 02 c0       	push   0xc0020845
c000ee3a:	e8 c8 19 00 00       	call   c0010807 <KePanic(char const*)>
c000ee3f:	83 c4 10             	add    esp,0x10
c000ee42:	66 90                	xchg   ax,ax
c000ee44:	90                   	nop
c000ee45:	83 c4 1c             	add    esp,0x1c
c000ee48:	c3                   	ret    
c000ee49:	90                   	nop
c000ee4a:	66 90                	xchg   ax,ax

c000ee4c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ee4c:	b8 00 00 00 00       	mov    eax,0x0
c000ee51:	c3                   	ret    
c000ee52:	66 90                	xchg   ax,ax

c000ee54 <ACPI::detectPCI()>:
c000ee54:	53                   	push   ebx
c000ee55:	83 ec 28             	sub    esp,0x28
c000ee58:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ee5d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ee62:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ee67:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ee6d:	83 e0 04             	and    eax,0x4
c000ee70:	0f b6 c0             	movzx  eax,al
c000ee73:	85 c0                	test   eax,eax
c000ee75:	74 2d                	je     c000eea4 <ACPI::detectPCI()+0x50>
c000ee77:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ee7c:	83 ec 08             	sub    esp,0x8
c000ee7f:	68 62 08 02 c0       	push   0xc0020862
c000ee84:	50                   	push   eax
c000ee85:	e8 6e f8 ff ff       	call   c000e6f8 <findDataTable(unsigned char*, char*)>
c000ee8a:	83 c4 10             	add    esp,0x10
c000ee8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ee91:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ee96:	74 0c                	je     c000eea4 <ACPI::detectPCI()+0x50>
c000ee98:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee9d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eea2:	66 90                	xchg   ax,ax
c000eea4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000eeac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eeb0:	8a 00                	mov    al,BYTE PTR [eax]
c000eeb2:	0f b6 c0             	movzx  eax,al
c000eeb5:	83 f8 01             	cmp    eax,0x1
c000eeb8:	75 0e                	jne    c000eec8 <ACPI::detectPCI()+0x74>
c000eeba:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eebf:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eec4:	eb 2e                	jmp    c000eef4 <ACPI::detectPCI()+0xa0>
c000eec6:	66 90                	xchg   ax,ax
c000eec8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eecc:	8a 00                	mov    al,BYTE PTR [eax]
c000eece:	0f b6 c0             	movzx  eax,al
c000eed1:	83 f8 02             	cmp    eax,0x2
c000eed4:	75 1e                	jne    c000eef4 <ACPI::detectPCI()+0xa0>
c000eed6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eedb:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000eee0:	85 c0                	test   eax,eax
c000eee2:	74 10                	je     c000eef4 <ACPI::detectPCI()+0xa0>
c000eee4:	83 ec 0c             	sub    esp,0xc
c000eee7:	68 dc 07 02 c0       	push   0xc00207dc
c000eeec:	e8 16 19 00 00       	call   c0010807 <KePanic(char const*)>
c000eef1:	83 c4 10             	add    esp,0x10
c000eef4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000eef8:	83 f0 01             	xor    eax,0x1
c000eefb:	0f b6 c0             	movzx  eax,al
c000eefe:	85 c0                	test   eax,eax
c000ef00:	74 46                	je     c000ef48 <ACPI::detectPCI()+0xf4>
c000ef02:	e8 29 12 ff ff       	call   c0000130 <manualPCIProbe>
c000ef07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef0b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ef10:	75 0e                	jne    c000ef20 <ACPI::detectPCI()+0xcc>
c000ef12:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef17:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef1c:	eb 2a                	jmp    c000ef48 <ACPI::detectPCI()+0xf4>
c000ef1e:	66 90                	xchg   ax,ax
c000ef20:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000ef25:	75 21                	jne    c000ef48 <ACPI::detectPCI()+0xf4>
c000ef27:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef2c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000ef31:	85 c0                	test   eax,eax
c000ef33:	74 13                	je     c000ef48 <ACPI::detectPCI()+0xf4>
c000ef35:	83 ec 0c             	sub    esp,0xc
c000ef38:	68 dc 07 02 c0       	push   0xc00207dc
c000ef3d:	e8 c5 18 00 00       	call   c0010807 <KePanic(char const*)>
c000ef42:	83 c4 10             	add    esp,0x10
c000ef45:	8d 76 00             	lea    esi,[esi+0x0]
c000ef48:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ef4d:	85 c0                	test   eax,eax
c000ef4f:	0f 84 87 00 00 00    	je     c000efdc <ACPI::detectPCI()+0x188>
c000ef55:	83 ec 0c             	sub    esp,0xc
c000ef58:	68 67 08 02 c0       	push   0xc0020867
c000ef5d:	e8 2a 12 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c000ef62:	83 c4 10             	add    esp,0x10
c000ef65:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ef6d:	83 ec 0c             	sub    esp,0xc
c000ef70:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ef74:	e8 b6 8a ff ff       	call   c0007a2f <malloc>
c000ef79:	83 c4 10             	add    esp,0x10
c000ef7c:	89 c3                	mov    ebx,eax
c000ef7e:	83 ec 0c             	sub    esp,0xc
c000ef81:	53                   	push   ebx
c000ef82:	e8 07 b0 00 00       	call   c0019f8e <PCI::PCI()>
c000ef87:	83 c4 10             	add    esp,0x10
c000ef8a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ef8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef92:	83 ec 08             	sub    esp,0x8
c000ef95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ef99:	50                   	push   eax
c000ef9a:	e8 67 cd ff ff       	call   c000bd06 <Device::addChild(Device*)>
c000ef9f:	83 c4 10             	add    esp,0x10
c000efa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa6:	8b 00                	mov    eax,DWORD PTR [eax]
c000efa8:	83 c0 08             	add    eax,0x8
c000efab:	8b 10                	mov    edx,DWORD PTR [eax]
c000efad:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000efb2:	85 c0                	test   eax,eax
c000efb4:	74 0a                	je     c000efc0 <ACPI::detectPCI()+0x16c>
c000efb6:	b8 01 00 00 00       	mov    eax,0x1
c000efbb:	eb 0b                	jmp    c000efc8 <ACPI::detectPCI()+0x174>
c000efbd:	8d 76 00             	lea    esi,[esi+0x0]
c000efc0:	b8 02 00 00 00       	mov    eax,0x2
c000efc5:	8d 76 00             	lea    esi,[esi+0x0]
c000efc8:	6a 00                	push   0x0
c000efca:	6a 00                	push   0x0
c000efcc:	50                   	push   eax
c000efcd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000efd1:	ff d2                	call   edx
c000efd3:	83 c4 10             	add    esp,0x10
c000efd6:	e9 91 00 00 00       	jmp    c000f06c <ACPI::detectPCI()+0x218>
c000efdb:	90                   	nop
c000efdc:	83 ec 0c             	sub    esp,0xc
c000efdf:	68 7f 08 02 c0       	push   0xc002087f
c000efe4:	e8 a3 11 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c000efe9:	83 c4 10             	add    esp,0x10
c000efec:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000eff3:	83 ec 0c             	sub    esp,0xc
c000eff6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000effa:	e8 30 8a ff ff       	call   c0007a2f <malloc>
c000efff:	83 c4 10             	add    esp,0x10
c000f002:	89 c3                	mov    ebx,eax
c000f004:	83 ec 0c             	sub    esp,0xc
c000f007:	53                   	push   ebx
c000f008:	e8 35 bb 00 00       	call   c001ab42 <IDE::IDE()>
c000f00d:	83 c4 10             	add    esp,0x10
c000f010:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f014:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f018:	83 ec 08             	sub    esp,0x8
c000f01b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f01f:	50                   	push   eax
c000f020:	e8 e1 cc ff ff       	call   c000bd06 <Device::addChild(Device*)>
c000f025:	83 c4 10             	add    esp,0x10
c000f028:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f03a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f043:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f047:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f050:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f054:	8b 00                	mov    eax,DWORD PTR [eax]
c000f056:	83 c0 08             	add    eax,0x8
c000f059:	8b 00                	mov    eax,DWORD PTR [eax]
c000f05b:	6a 00                	push   0x0
c000f05d:	6a 00                	push   0x0
c000f05f:	6a 00                	push   0x0
c000f061:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f065:	ff d0                	call   eax
c000f067:	83 c4 10             	add    esp,0x10
c000f06a:	66 90                	xchg   ax,ax
c000f06c:	90                   	nop
c000f06d:	83 c4 28             	add    esp,0x28
c000f070:	5b                   	pop    ebx
c000f071:	c3                   	ret    
c000f072:	66 90                	xchg   ax,ax

c000f074 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f074:	83 ec 1c             	sub    esp,0x1c
c000f077:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f07b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f07e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f082:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000f088:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f08d:	83 ec 08             	sub    esp,0x8
c000f090:	50                   	push   eax
c000f091:	52                   	push   edx
c000f092:	e8 5f 80 ff ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c000f097:	83 c4 10             	add    esp,0x10
c000f09a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f09e:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000f0a4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f0a9:	83 ec 04             	sub    esp,0x4
c000f0ac:	6a 01                	push   0x1
c000f0ae:	50                   	push   eax
c000f0af:	52                   	push   edx
c000f0b0:	e8 59 81 ff ff       	call   c000720e <Computer::writeCMOS(unsigned char, unsigned char)>
c000f0b5:	83 c4 10             	add    esp,0x10
c000f0b8:	90                   	nop
c000f0b9:	83 c4 1c             	add    esp,0x1c
c000f0bc:	c3                   	ret    
c000f0bd:	90                   	nop
c000f0be:	66 90                	xchg   ax,ax

c000f0c0 <ACPI::sleep()>:
c000f0c0:	83 ec 0c             	sub    esp,0xc
c000f0c3:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f0c8:	85 c0                	test   eax,eax
c000f0ca:	74 08                	je     c000f0d4 <ACPI::sleep()+0x14>
c000f0cc:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f0d1:	ff d0                	call   eax
c000f0d3:	90                   	nop
c000f0d4:	90                   	nop
c000f0d5:	83 c4 0c             	add    esp,0xc
c000f0d8:	c3                   	ret    
c000f0d9:	90                   	nop
c000f0da:	66 90                	xchg   ax,ax

c000f0dc <ACPI::open(int, int, void*)>:
c000f0dc:	53                   	push   ebx
c000f0dd:	81 ec 78 01 00 00    	sub    esp,0x178
c000f0e3:	83 ec 0c             	sub    esp,0xc
c000f0e6:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f0ed:	e8 62 fd ff ff       	call   c000ee54 <ACPI::detectPCI()>
c000f0f2:	83 c4 10             	add    esp,0x10
c000f0f5:	83 ec 0c             	sub    esp,0xc
c000f0f8:	68 04 08 02 c0       	push   0xc0020804
c000f0fd:	e8 8a 10 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c000f102:	83 c4 10             	add    esp,0x10
c000f105:	83 ec 0c             	sub    esp,0xc
c000f108:	68 94 08 02 c0       	push   0xc0020894
c000f10d:	e8 f0 49 00 00       	call   c0013b02 <Thr::loadKernelSymbolTable(char const*)>
c000f112:	83 c4 10             	add    esp,0x10
c000f115:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f11d:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f128:	83 ec 0c             	sub    esp,0xc
c000f12b:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f132:	e8 f8 88 ff ff       	call   c0007a2f <malloc>
c000f137:	83 c4 10             	add    esp,0x10
c000f13a:	89 c3                	mov    ebx,eax
c000f13c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f141:	83 ec 04             	sub    esp,0x4
c000f144:	50                   	push   eax
c000f145:	68 b2 08 02 c0       	push   0xc00208b2
c000f14a:	53                   	push   ebx
c000f14b:	e8 fa bc ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c000f150:	83 c4 10             	add    esp,0x10
c000f153:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f15a:	83 ec 08             	sub    esp,0x8
c000f15d:	6a 01                	push   0x1
c000f15f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f166:	e8 9b bd ff ff       	call   c000af06 <File::open(FileOpenMode)>
c000f16b:	83 c4 10             	add    esp,0x10
c000f16e:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f175:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f17d:	75 15                	jne    c000f194 <ACPI::open(int, int, void*)+0xb8>
c000f17f:	83 ec 0c             	sub    esp,0xc
c000f182:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f189:	e8 d6 bd ff ff       	call   c000af64 <File::close()>
c000f18e:	83 c4 10             	add    esp,0x10
c000f191:	eb 09                	jmp    c000f19c <ACPI::open(int, int, void*)+0xc0>
c000f193:	90                   	nop
c000f194:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f19c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f1a4:	74 1e                	je     c000f1c4 <ACPI::open(int, int, void*)+0xe8>
c000f1a6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f1ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1af:	83 c0 08             	add    eax,0x8
c000f1b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1b4:	83 ec 0c             	sub    esp,0xc
c000f1b7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f1be:	ff d0                	call   eax
c000f1c0:	83 c4 10             	add    esp,0x10
c000f1c3:	90                   	nop
c000f1c4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f1cb:	83 f0 01             	xor    eax,0x1
c000f1ce:	0f b6 c0             	movzx  eax,al
c000f1d1:	85 c0                	test   eax,eax
c000f1d3:	74 43                	je     c000f218 <ACPI::open(int, int, void*)+0x13c>
c000f1d5:	83 ec 0c             	sub    esp,0xc
c000f1d8:	68 d0 08 02 c0       	push   0xc00208d0
c000f1dd:	e8 aa 0f 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c000f1e2:	83 c4 10             	add    esp,0x10
c000f1e5:	83 ec 04             	sub    esp,0x4
c000f1e8:	6a 0c                	push   0xc
c000f1ea:	68 eb 08 02 c0       	push   0xc00208eb
c000f1ef:	68 fc 08 02 c0       	push   0xc00208fc
c000f1f4:	e8 ae 3c 00 00       	call   c0012ea7 <Reg::readIntWithDefault(char*, char*, int)>
c000f1f9:	83 c4 10             	add    esp,0x10
c000f1fc:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f203:	83 ec 0c             	sub    esp,0xc
c000f206:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f20d:	e8 88 a5 ff ff       	call   c000979a <Virt::setupPageSwapping(int)>
c000f212:	83 c4 10             	add    esp,0x10
c000f215:	8d 76 00             	lea    esi,[esi+0x0]
c000f218:	83 ec 0c             	sub    esp,0xc
c000f21b:	68 55 f9 01 c0       	push   0xc001f955
c000f220:	e8 67 0f 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c000f225:	83 c4 10             	add    esp,0x10
c000f228:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f22f:	83 ec 08             	sub    esp,0x8
c000f232:	6a 13                	push   0x13
c000f234:	50                   	push   eax
c000f235:	e8 e4 cd ff ff       	call   c000c01e <getDevicesOfType(DeviceType)>
c000f23a:	83 c4 0c             	add    esp,0xc
c000f23d:	8d 76 00             	lea    esi,[esi+0x0]
c000f240:	83 ec 0c             	sub    esp,0xc
c000f243:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f24a:	50                   	push   eax
c000f24b:	e8 00 fb 00 00       	call   c001ed50 <LinkedList<Device>::isEmpty()>
c000f250:	83 c4 10             	add    esp,0x10
c000f253:	83 f0 01             	xor    eax,0x1
c000f256:	0f b6 c0             	movzx  eax,al
c000f259:	85 c0                	test   eax,eax
c000f25b:	0f 84 97 01 00 00    	je     c000f3f8 <ACPI::open(int, int, void*)+0x31c>
c000f261:	83 ec 0c             	sub    esp,0xc
c000f264:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f26b:	50                   	push   eax
c000f26c:	e8 fb fa 00 00       	call   c001ed6c <LinkedList<Device>::getFirstElement()>
c000f271:	83 c4 10             	add    esp,0x10
c000f274:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f27b:	83 ec 0c             	sub    esp,0xc
c000f27e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f285:	50                   	push   eax
c000f286:	e8 e9 fa 00 00       	call   c001ed74 <LinkedList<Device>::removeFirst()>
c000f28b:	83 c4 10             	add    esp,0x10
c000f28e:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f295:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f29c:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c000f2a3:	8b 90 18 01 00 00    	mov    edx,DWORD PTR [eax+0x118]
c000f2a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2ad:	8b 90 1c 01 00 00    	mov    edx,DWORD PTR [eax+0x11c]
c000f2b3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f2b7:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c000f2bd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000f2c1:	8b 90 24 01 00 00    	mov    edx,DWORD PTR [eax+0x124]
c000f2c7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000f2cb:	8b 90 28 01 00 00    	mov    edx,DWORD PTR [eax+0x128]
c000f2d1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f2d5:	8b 90 2c 01 00 00    	mov    edx,DWORD PTR [eax+0x12c]
c000f2db:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000f2df:	8b 90 30 01 00 00    	mov    edx,DWORD PTR [eax+0x130]
c000f2e5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000f2e9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c000f2ef:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f2f3:	8b 80 38 01 00 00    	mov    eax,DWORD PTR [eax+0x138]
c000f2f9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f2fd:	83 ec 08             	sub    esp,0x8
c000f300:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f304:	50                   	push   eax
c000f305:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f309:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f30d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f311:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f315:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f319:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f31d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f321:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f325:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f329:	e8 48 b1 00 00       	call   c001a476 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f32e:	83 c4 30             	add    esp,0x30
c000f331:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f338:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f340:	0f 84 fa fe ff ff    	je     c000f240 <ACPI::open(int, int, void*)+0x164>
c000f346:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f351:	83 ec 0c             	sub    esp,0xc
c000f354:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f35b:	e8 cf 86 ff ff       	call   c0007a2f <malloc>
c000f360:	83 c4 10             	add    esp,0x10
c000f363:	89 c3                	mov    ebx,eax
c000f365:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f36a:	83 ec 04             	sub    esp,0x4
c000f36d:	50                   	push   eax
c000f36e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f375:	53                   	push   ebx
c000f376:	e8 cf ba ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c000f37b:	83 c4 10             	add    esp,0x10
c000f37e:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f385:	83 ec 0c             	sub    esp,0xc
c000f388:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f38f:	e8 e0 bd ff ff       	call   c000b174 <File::exists()>
c000f394:	83 c4 10             	add    esp,0x10
c000f397:	0f b6 c0             	movzx  eax,al
c000f39a:	85 c0                	test   eax,eax
c000f39c:	74 2a                	je     c000f3c8 <ACPI::open(int, int, void*)+0x2ec>
c000f39e:	83 ec 08             	sub    esp,0x8
c000f3a1:	6a 01                	push   0x1
c000f3a3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f3aa:	e8 c6 51 00 00       	call   c0014575 <Thr::loadDLL(char const*, bool)>
c000f3af:	83 c4 10             	add    esp,0x10
c000f3b2:	83 ec 08             	sub    esp,0x8
c000f3b5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f3bc:	50                   	push   eax
c000f3bd:	e8 ef 53 00 00       	call   c00147b1 <Thr::executeDLL(unsigned long, void*)>
c000f3c2:	83 c4 10             	add    esp,0x10
c000f3c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f3c8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f3d0:	0f 84 6a fe ff ff    	je     c000f240 <ACPI::open(int, int, void*)+0x164>
c000f3d6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f3dd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3df:	83 c0 08             	add    eax,0x8
c000f3e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3e4:	83 ec 0c             	sub    esp,0xc
c000f3e7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f3ee:	ff d0                	call   eax
c000f3f0:	83 c4 10             	add    esp,0x10
c000f3f3:	e9 48 fe ff ff       	jmp    c000f240 <ACPI::open(int, int, void*)+0x164>
c000f3f8:	83 ec 0c             	sub    esp,0xc
c000f3fb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f402:	50                   	push   eax
c000f403:	e8 44 f9 00 00       	call   c001ed4c <LinkedList<Device>::~LinkedList()>
c000f408:	83 c4 10             	add    esp,0x10
c000f40b:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f411:	83 ec 08             	sub    esp,0x8
c000f414:	6a 01                	push   0x1
c000f416:	68 03 09 02 c0       	push   0xc0020903
c000f41b:	e8 55 51 00 00       	call   c0014575 <Thr::loadDLL(char const*, bool)>
c000f420:	83 c4 10             	add    esp,0x10
c000f423:	83 ec 08             	sub    esp,0x8
c000f426:	53                   	push   ebx
c000f427:	50                   	push   eax
c000f428:	e8 84 53 00 00       	call   c00147b1 <Thr::executeDLL(unsigned long, void*)>
c000f42d:	83 c4 10             	add    esp,0x10
c000f430:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f435:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f43b:	83 e0 04             	and    eax,0x4
c000f43e:	0f b6 c0             	movzx  eax,al
c000f441:	85 c0                	test   eax,eax
c000f443:	0f 84 1b 01 00 00    	je     c000f564 <ACPI::open(int, int, void*)+0x488>
c000f449:	83 ec 0c             	sub    esp,0xc
c000f44c:	68 20 09 02 c0       	push   0xc0020920
c000f451:	e8 36 0d 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c000f456:	83 c4 10             	add    esp,0x10
c000f459:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f464:	83 ec 0c             	sub    esp,0xc
c000f467:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f46e:	e8 bc 85 ff ff       	call   c0007a2f <malloc>
c000f473:	83 c4 10             	add    esp,0x10
c000f476:	89 c3                	mov    ebx,eax
c000f478:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f47d:	83 ec 04             	sub    esp,0x4
c000f480:	50                   	push   eax
c000f481:	68 3d 09 02 c0       	push   0xc002093d
c000f486:	53                   	push   ebx
c000f487:	e8 be b9 ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c000f48c:	83 c4 10             	add    esp,0x10
c000f48f:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f496:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f49e:	74 20                	je     c000f4c0 <ACPI::open(int, int, void*)+0x3e4>
c000f4a0:	83 ec 0c             	sub    esp,0xc
c000f4a3:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f4aa:	e8 c5 bc ff ff       	call   c000b174 <File::exists()>
c000f4af:	83 c4 10             	add    esp,0x10
c000f4b2:	0f b6 c0             	movzx  eax,al
c000f4b5:	85 c0                	test   eax,eax
c000f4b7:	74 07                	je     c000f4c0 <ACPI::open(int, int, void*)+0x3e4>
c000f4b9:	b0 01                	mov    al,0x1
c000f4bb:	eb 07                	jmp    c000f4c4 <ACPI::open(int, int, void*)+0x3e8>
c000f4bd:	8d 76 00             	lea    esi,[esi+0x0]
c000f4c0:	b0 00                	mov    al,0x0
c000f4c2:	66 90                	xchg   ax,ax
c000f4c4:	0f b6 c0             	movzx  eax,al
c000f4c7:	85 c0                	test   eax,eax
c000f4c9:	74 25                	je     c000f4f0 <ACPI::open(int, int, void*)+0x414>
c000f4cb:	83 ec 08             	sub    esp,0x8
c000f4ce:	6a 01                	push   0x1
c000f4d0:	68 3d 09 02 c0       	push   0xc002093d
c000f4d5:	e8 9b 50 00 00       	call   c0014575 <Thr::loadDLL(char const*, bool)>
c000f4da:	83 c4 10             	add    esp,0x10
c000f4dd:	83 ec 08             	sub    esp,0x8
c000f4e0:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f4e7:	50                   	push   eax
c000f4e8:	e8 c4 52 00 00       	call   c00147b1 <Thr::executeDLL(unsigned long, void*)>
c000f4ed:	83 c4 10             	add    esp,0x10
c000f4f0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f4f8:	74 2a                	je     c000f524 <ACPI::open(int, int, void*)+0x448>
c000f4fa:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f502:	74 20                	je     c000f524 <ACPI::open(int, int, void*)+0x448>
c000f504:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f50b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f50d:	83 c0 08             	add    eax,0x8
c000f510:	8b 00                	mov    eax,DWORD PTR [eax]
c000f512:	83 ec 0c             	sub    esp,0xc
c000f515:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f51c:	ff d0                	call   eax
c000f51e:	83 c4 10             	add    esp,0x10
c000f521:	8d 76 00             	lea    esi,[esi+0x0]
c000f524:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f529:	83 ec 08             	sub    esp,0x8
c000f52c:	68 5a 09 02 c0       	push   0xc002095a
c000f531:	50                   	push   eax
c000f532:	e8 c1 f1 ff ff       	call   c000e6f8 <findDataTable(unsigned char*, char*)>
c000f537:	83 c4 10             	add    esp,0x10
c000f53a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f541:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f549:	74 19                	je     c000f564 <ACPI::open(int, int, void*)+0x488>
c000f54b:	83 ec 08             	sub    esp,0x8
c000f54e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f555:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f55c:	e8 13 fb ff ff       	call   c000f074 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f561:	83 c4 10             	add    esp,0x10
c000f564:	b8 00 00 00 00       	mov    eax,0x0
c000f569:	81 c4 78 01 00 00    	add    esp,0x178
c000f56f:	5b                   	pop    ebx
c000f570:	c3                   	ret    
c000f571:	90                   	nop

c000f572 <CPU::close(int, int, void*)>:
c000f572:	31 c0                	xor    eax,eax
c000f574:	c3                   	ret    
c000f575:	90                   	nop

c000f576 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f576:	60                   	pusha  
c000f577:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f57b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f57f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f583:	9c                   	pushf  
c000f584:	fa                   	cli    
c000f585:	0f 09                	wbinvd 
c000f587:	0f 30                	wrmsr  
c000f589:	9d                   	popf   
c000f58a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f58e:	89 02                	mov    DWORD PTR [edx],eax
c000f590:	61                   	popa   
c000f591:	c3                   	ret    

c000f592 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f592:	60                   	pusha  
c000f593:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f597:	9c                   	pushf  
c000f598:	fa                   	cli    
c000f599:	0f 09                	wbinvd 
c000f59b:	31 c0                	xor    eax,eax
c000f59d:	31 d2                	xor    edx,edx
c000f59f:	0f 32                	rdmsr  
c000f5a1:	9d                   	popf   
c000f5a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f5a6:	89 02                	mov    DWORD PTR [edx],eax
c000f5a8:	61                   	popa   
c000f5a9:	c3                   	ret    

c000f5aa <CPU::AMD_K6_writeback(int, int, int)>:
c000f5aa:	56                   	push   esi
c000f5ab:	53                   	push   ebx
c000f5ac:	83 ec 10             	sub    esp,0x10
c000f5af:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f5b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5b8:	75 5d                	jne    c000f617 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f5ba:	83 f8 08             	cmp    eax,0x8
c000f5bd:	75 09                	jne    c000f5c8 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f5bf:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f5c4:	7e 13                	jle    c000f5d9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f5c6:	eb 30                	jmp    c000f5f8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f5c8:	83 f8 06             	cmp    eax,0x6
c000f5cb:	7c 4a                	jl     c000f617 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f5cd:	83 f8 07             	cmp    eax,0x7
c000f5d0:	7e 07                	jle    c000f5d9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f5d2:	83 f8 09             	cmp    eax,0x9
c000f5d5:	74 21                	je     c000f5f8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f5d7:	eb 3e                	jmp    c000f617 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f5d9:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f5df:	89 e6                	mov    esi,esp
c000f5e1:	56                   	push   esi
c000f5e2:	68 82 00 00 c0       	push   0xc0000082
c000f5e7:	e8 a6 ff ff ff       	call   c000f592 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f5ec:	56                   	push   esi
c000f5ed:	c1 eb 15             	shr    ebx,0x15
c000f5f0:	6a 00                	push   0x0
c000f5f2:	83 e3 7e             	and    ebx,0x7e
c000f5f5:	53                   	push   ebx
c000f5f6:	eb 12                	jmp    c000f60a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f5f8:	89 e3                	mov    ebx,esp
c000f5fa:	53                   	push   ebx
c000f5fb:	68 82 00 00 c0       	push   0xc0000082
c000f600:	e8 8d ff ff ff       	call   c000f592 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f605:	53                   	push   ebx
c000f606:	6a 00                	push   0x0
c000f608:	6a 00                	push   0x0
c000f60a:	68 82 00 00 c0       	push   0xc0000082
c000f60f:	e8 62 ff ff ff       	call   c000f576 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f614:	83 c4 18             	add    esp,0x18
c000f617:	83 c4 10             	add    esp,0x10
c000f61a:	5b                   	pop    ebx
c000f61b:	5e                   	pop    esi
c000f61c:	c3                   	ret    
c000f61d:	90                   	nop

c000f61e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f61e:	55                   	push   ebp
c000f61f:	57                   	push   edi
c000f620:	56                   	push   esi
c000f621:	53                   	push   ebx
c000f622:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f626:	39 05 70 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e70,eax
c000f62c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f630:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f634:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f638:	75 23                	jne    c000f65d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f63a:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f63f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f643:	89 06                	mov    DWORD PTR [esi],eax
c000f645:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f64a:	89 07                	mov    DWORD PTR [edi],eax
c000f64c:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f651:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f654:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f659:	89 02                	mov    DWORD PTR [edx],eax
c000f65b:	eb 3f                	jmp    c000f69c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f65d:	31 c9                	xor    ecx,ecx
c000f65f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f663:	0f a2                	cpuid  
c000f665:	89 06                	mov    DWORD PTR [esi],eax
c000f667:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f66b:	89 1f                	mov    DWORD PTR [edi],ebx
c000f66d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f670:	89 10                	mov    DWORD PTR [eax],edx
c000f672:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f676:	a3 70 1e 02 c0       	mov    ds:0xc0021e70,eax
c000f67b:	8b 06                	mov    eax,DWORD PTR [esi]
c000f67d:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f682:	8b 07                	mov    eax,DWORD PTR [edi]
c000f684:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f68c:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f691:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f695:	8b 00                	mov    eax,DWORD PTR [eax]
c000f697:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f69c:	5b                   	pop    ebx
c000f69d:	5e                   	pop    esi
c000f69e:	5f                   	pop    edi
c000f69f:	5d                   	pop    ebp
c000f6a0:	c3                   	ret    
c000f6a1:	90                   	nop

c000f6a2 <CPU::cpuidCheckEDX(unsigned int)>:
c000f6a2:	83 ec 10             	sub    esp,0x10
c000f6a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6a9:	50                   	push   eax
c000f6aa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6ae:	50                   	push   eax
c000f6af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6b3:	50                   	push   eax
c000f6b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6b8:	50                   	push   eax
c000f6b9:	6a 01                	push   0x1
c000f6bb:	e8 5e ff ff ff       	call   c000f61e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6c4:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f6c8:	0f 95 c0             	setne  al
c000f6cb:	83 c4 24             	add    esp,0x24
c000f6ce:	c3                   	ret    
c000f6cf:	90                   	nop

c000f6d0 <CPU::cpuidCheckECX(unsigned int)>:
c000f6d0:	83 ec 10             	sub    esp,0x10
c000f6d3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6d7:	50                   	push   eax
c000f6d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6dc:	50                   	push   eax
c000f6dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6e1:	50                   	push   eax
c000f6e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6e6:	50                   	push   eax
c000f6e7:	6a 01                	push   0x1
c000f6e9:	e8 30 ff ff ff       	call   c000f61e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6f2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f6f6:	0f 95 c0             	setne  al
c000f6f9:	83 c4 24             	add    esp,0x24
c000f6fc:	c3                   	ret    
c000f6fd:	90                   	nop

c000f6fe <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f6fe:	83 ec 10             	sub    esp,0x10
c000f701:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f705:	50                   	push   eax
c000f706:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f70a:	50                   	push   eax
c000f70b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f70f:	50                   	push   eax
c000f710:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f714:	50                   	push   eax
c000f715:	6a 07                	push   0x7
c000f717:	e8 02 ff ff ff       	call   c000f61e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f71c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f720:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f724:	0f 95 c0             	setne  al
c000f727:	83 c4 24             	add    esp,0x24
c000f72a:	c3                   	ret    
c000f72b:	90                   	nop

c000f72c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f72c:	83 ec 10             	sub    esp,0x10
c000f72f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f733:	50                   	push   eax
c000f734:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f738:	50                   	push   eax
c000f739:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f73d:	50                   	push   eax
c000f73e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f742:	50                   	push   eax
c000f743:	6a 07                	push   0x7
c000f745:	e8 d4 fe ff ff       	call   c000f61e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f74a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f74e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f752:	0f 95 c0             	setne  al
c000f755:	83 c4 24             	add    esp,0x24
c000f758:	c3                   	ret    
c000f759:	90                   	nop

c000f75a <CPU::CPU()>:
c000f75a:	83 ec 0c             	sub    esp,0xc
c000f75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f761:	83 ec 08             	sub    esp,0x8
c000f764:	68 7d 0a 02 c0       	push   0xc0020a7d
c000f769:	50                   	push   eax
c000f76a:	e8 2f c7 ff ff       	call   c000be9e <Device::Device(char const*)>
c000f76f:	83 c4 10             	add    esp,0x10
c000f772:	ba 04 0b 02 c0       	mov    edx,0xc0020b04
c000f777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f77b:	89 10                	mov    DWORD PTR [eax],edx
c000f77d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f781:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f78b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f78f:	05 78 01 00 00       	add    eax,0x178
c000f794:	83 ec 0c             	sub    esp,0xc
c000f797:	50                   	push   eax
c000f798:	e8 3b 7b ff ff       	call   c00072d8 <GDT::GDT()>
c000f79d:	83 c4 10             	add    esp,0x10
c000f7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7a4:	05 7c 09 00 00       	add    eax,0x97c
c000f7a9:	83 ec 0c             	sub    esp,0xc
c000f7ac:	50                   	push   eax
c000f7ad:	e8 76 7d ff ff       	call   c0007528 <IDT::IDT()>
c000f7b2:	83 c4 10             	add    esp,0x10
c000f7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7b9:	05 7c 11 00 00       	add    eax,0x117c
c000f7be:	83 ec 0c             	sub    esp,0xc
c000f7c1:	50                   	push   eax
c000f7c2:	e8 dd 96 ff ff       	call   c0008ea4 <TSS::TSS()>
c000f7c7:	83 c4 10             	add    esp,0x10
c000f7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7ce:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7d9:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f7e3:	90                   	nop
c000f7e4:	83 c4 0c             	add    esp,0xc
c000f7e7:	c3                   	ret    

c000f7e8 <CPU::displayFeatures()>:
c000f7e8:	c3                   	ret    
c000f7e9:	90                   	nop

c000f7ea <CPU::detectFeatures()>:
c000f7ea:	55                   	push   ebp
c000f7eb:	57                   	push   edi
c000f7ec:	56                   	push   esi
c000f7ed:	53                   	push   ebx
c000f7ee:	83 ec 30             	sub    esp,0x30
c000f7f1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f7f5:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f7ff:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f805:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f80c:	6a 0d                	push   0xd
c000f80e:	6a 00                	push   0x0
c000f810:	55                   	push   ebp
c000f811:	e8 da 0c ff ff       	call   c00004f0 <memset>
c000f816:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f81b:	83 c4 10             	add    esp,0x10
c000f81e:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f825:	0f 84 db 05 00 00    	je     c000fe06 <CPU::detectFeatures()+0x61c>
c000f82b:	83 ec 0c             	sub    esp,0xc
c000f82e:	89 ef                	mov    edi,ebp
c000f830:	6a 10                	push   0x10
c000f832:	e8 6b fe ff ff       	call   c000f6a2 <CPU::cpuidCheckEDX(unsigned int)>
c000f837:	83 e0 01             	and    eax,0x1
c000f83a:	8d 14 00             	lea    edx,[eax+eax*1]
c000f83d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f843:	83 e0 fd             	and    eax,0xfffffffd
c000f846:	09 d0                	or     eax,edx
c000f848:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f84e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f855:	e8 48 fe ff ff       	call   c000f6a2 <CPU::cpuidCheckEDX(unsigned int)>
c000f85a:	83 e0 01             	and    eax,0x1
c000f85d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f864:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f86a:	83 e0 fb             	and    eax,0xfffffffb
c000f86d:	09 d0                	or     eax,edx
c000f86f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f875:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f87c:	e8 21 fe ff ff       	call   c000f6a2 <CPU::cpuidCheckEDX(unsigned int)>
c000f881:	83 e0 01             	and    eax,0x1
c000f884:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f88b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f891:	83 e0 f7             	and    eax,0xfffffff7
c000f894:	09 d0                	or     eax,edx
c000f896:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f89c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f8a3:	e8 fa fd ff ff       	call   c000f6a2 <CPU::cpuidCheckEDX(unsigned int)>
c000f8a8:	83 e0 01             	and    eax,0x1
c000f8ab:	c1 e0 04             	shl    eax,0x4
c000f8ae:	89 c2                	mov    edx,eax
c000f8b0:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8b6:	83 e0 ef             	and    eax,0xffffffef
c000f8b9:	09 d0                	or     eax,edx
c000f8bb:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8c1:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f8c8:	e8 d5 fd ff ff       	call   c000f6a2 <CPU::cpuidCheckEDX(unsigned int)>
c000f8cd:	83 e0 01             	and    eax,0x1
c000f8d0:	c1 e0 05             	shl    eax,0x5
c000f8d3:	89 c2                	mov    edx,eax
c000f8d5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8db:	83 e0 df             	and    eax,0xffffffdf
c000f8de:	09 d0                	or     eax,edx
c000f8e0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8e6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f8ed:	e8 b0 fd ff ff       	call   c000f6a2 <CPU::cpuidCheckEDX(unsigned int)>
c000f8f2:	83 e0 01             	and    eax,0x1
c000f8f5:	8d 14 00             	lea    edx,[eax+eax*1]
c000f8f8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f8fe:	83 e0 fd             	and    eax,0xfffffffd
c000f901:	09 d0                	or     eax,edx
c000f903:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f909:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f910:	e8 8d fd ff ff       	call   c000f6a2 <CPU::cpuidCheckEDX(unsigned int)>
c000f915:	83 e0 01             	and    eax,0x1
c000f918:	c1 e0 06             	shl    eax,0x6
c000f91b:	89 c2                	mov    edx,eax
c000f91d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f923:	83 e0 bf             	and    eax,0xffffffbf
c000f926:	09 d0                	or     eax,edx
c000f928:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f92e:	58                   	pop    eax
c000f92f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f933:	50                   	push   eax
c000f934:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f938:	50                   	push   eax
c000f939:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f93d:	56                   	push   esi
c000f93e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f942:	50                   	push   eax
c000f943:	6a 00                	push   0x0
c000f945:	e8 d4 fc ff ff       	call   c000f61e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f94a:	b8 04 00 00 00       	mov    eax,0x4
c000f94f:	89 c1                	mov    ecx,eax
c000f951:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f953:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f959:	89 c1                	mov    ecx,eax
c000f95b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f95f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f961:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f967:	89 c1                	mov    ecx,eax
c000f969:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f96d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f96f:	83 c4 18             	add    esp,0x18
c000f972:	68 8c 09 02 c0       	push   0xc002098c
c000f977:	55                   	push   ebp
c000f978:	e8 53 0d ff ff       	call   c00006d0 <strcmp>
c000f97d:	83 c4 10             	add    esp,0x10
c000f980:	85 c0                	test   eax,eax
c000f982:	75 0f                	jne    c000f993 <CPU::detectFeatures()+0x1a9>
c000f984:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f98e:	e9 22 02 00 00       	jmp    c000fbb5 <CPU::detectFeatures()+0x3cb>
c000f993:	50                   	push   eax
c000f994:	50                   	push   eax
c000f995:	68 99 09 02 c0       	push   0xc0020999
c000f99a:	55                   	push   ebp
c000f99b:	e8 30 0d ff ff       	call   c00006d0 <strcmp>
c000f9a0:	83 c4 10             	add    esp,0x10
c000f9a3:	85 c0                	test   eax,eax
c000f9a5:	74 dd                	je     c000f984 <CPU::detectFeatures()+0x19a>
c000f9a7:	50                   	push   eax
c000f9a8:	50                   	push   eax
c000f9a9:	68 a6 09 02 c0       	push   0xc00209a6
c000f9ae:	55                   	push   ebp
c000f9af:	e8 1c 0d ff ff       	call   c00006d0 <strcmp>
c000f9b4:	83 c4 10             	add    esp,0x10
c000f9b7:	85 c0                	test   eax,eax
c000f9b9:	74 2a                	je     c000f9e5 <CPU::detectFeatures()+0x1fb>
c000f9bb:	50                   	push   eax
c000f9bc:	50                   	push   eax
c000f9bd:	68 b3 09 02 c0       	push   0xc00209b3
c000f9c2:	55                   	push   ebp
c000f9c3:	e8 08 0d ff ff       	call   c00006d0 <strcmp>
c000f9c8:	83 c4 10             	add    esp,0x10
c000f9cb:	85 c0                	test   eax,eax
c000f9cd:	74 16                	je     c000f9e5 <CPU::detectFeatures()+0x1fb>
c000f9cf:	50                   	push   eax
c000f9d0:	50                   	push   eax
c000f9d1:	68 c0 09 02 c0       	push   0xc00209c0
c000f9d6:	55                   	push   ebp
c000f9d7:	e8 f4 0c ff ff       	call   c00006d0 <strcmp>
c000f9dc:	83 c4 10             	add    esp,0x10
c000f9df:	85 c0                	test   eax,eax
c000f9e1:	74 48                	je     c000fa2b <CPU::detectFeatures()+0x241>
c000f9e3:	eb 0f                	jmp    c000f9f4 <CPU::detectFeatures()+0x20a>
c000f9e5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f9ef:	e9 c1 01 00 00       	jmp    c000fbb5 <CPU::detectFeatures()+0x3cb>
c000f9f4:	50                   	push   eax
c000f9f5:	50                   	push   eax
c000f9f6:	68 cd 09 02 c0       	push   0xc00209cd
c000f9fb:	55                   	push   ebp
c000f9fc:	e8 cf 0c ff ff       	call   c00006d0 <strcmp>
c000fa01:	83 c4 10             	add    esp,0x10
c000fa04:	85 c0                	test   eax,eax
c000fa06:	74 23                	je     c000fa2b <CPU::detectFeatures()+0x241>
c000fa08:	57                   	push   edi
c000fa09:	57                   	push   edi
c000fa0a:	68 da 09 02 c0       	push   0xc00209da
c000fa0f:	55                   	push   ebp
c000fa10:	e8 bb 0c ff ff       	call   c00006d0 <strcmp>
c000fa15:	83 c4 10             	add    esp,0x10
c000fa18:	85 c0                	test   eax,eax
c000fa1a:	75 1e                	jne    c000fa3a <CPU::detectFeatures()+0x250>
c000fa1c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa26:	e9 8a 01 00 00       	jmp    c000fbb5 <CPU::detectFeatures()+0x3cb>
c000fa2b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fa35:	e9 7b 01 00 00       	jmp    c000fbb5 <CPU::detectFeatures()+0x3cb>
c000fa3a:	56                   	push   esi
c000fa3b:	56                   	push   esi
c000fa3c:	68 e7 09 02 c0       	push   0xc00209e7
c000fa41:	55                   	push   ebp
c000fa42:	e8 89 0c ff ff       	call   c00006d0 <strcmp>
c000fa47:	83 c4 10             	add    esp,0x10
c000fa4a:	85 c0                	test   eax,eax
c000fa4c:	75 0f                	jne    c000fa5d <CPU::detectFeatures()+0x273>
c000fa4e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fa58:	e9 58 01 00 00       	jmp    c000fbb5 <CPU::detectFeatures()+0x3cb>
c000fa5d:	51                   	push   ecx
c000fa5e:	51                   	push   ecx
c000fa5f:	68 a6 09 02 c0       	push   0xc00209a6
c000fa64:	55                   	push   ebp
c000fa65:	e8 66 0c ff ff       	call   c00006d0 <strcmp>
c000fa6a:	83 c4 10             	add    esp,0x10
c000fa6d:	85 c0                	test   eax,eax
c000fa6f:	75 0f                	jne    c000fa80 <CPU::detectFeatures()+0x296>
c000fa71:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fa7b:	e9 35 01 00 00       	jmp    c000fbb5 <CPU::detectFeatures()+0x3cb>
c000fa80:	52                   	push   edx
c000fa81:	52                   	push   edx
c000fa82:	68 f4 09 02 c0       	push   0xc00209f4
c000fa87:	55                   	push   ebp
c000fa88:	e8 43 0c ff ff       	call   c00006d0 <strcmp>
c000fa8d:	83 c4 10             	add    esp,0x10
c000fa90:	85 c0                	test   eax,eax
c000fa92:	75 0f                	jne    c000faa3 <CPU::detectFeatures()+0x2b9>
c000fa94:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fa9e:	e9 12 01 00 00       	jmp    c000fbb5 <CPU::detectFeatures()+0x3cb>
c000faa3:	50                   	push   eax
c000faa4:	50                   	push   eax
c000faa5:	68 01 0a 02 c0       	push   0xc0020a01
c000faaa:	55                   	push   ebp
c000faab:	e8 20 0c ff ff       	call   c00006d0 <strcmp>
c000fab0:	83 c4 10             	add    esp,0x10
c000fab3:	85 c0                	test   eax,eax
c000fab5:	75 0f                	jne    c000fac6 <CPU::detectFeatures()+0x2dc>
c000fab7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fac1:	e9 ef 00 00 00       	jmp    c000fbb5 <CPU::detectFeatures()+0x3cb>
c000fac6:	50                   	push   eax
c000fac7:	50                   	push   eax
c000fac8:	68 0e 0a 02 c0       	push   0xc0020a0e
c000facd:	55                   	push   ebp
c000face:	e8 fd 0b ff ff       	call   c00006d0 <strcmp>
c000fad3:	83 c4 10             	add    esp,0x10
c000fad6:	85 c0                	test   eax,eax
c000fad8:	75 0f                	jne    c000fae9 <CPU::detectFeatures()+0x2ff>
c000fada:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fae4:	e9 cc 00 00 00       	jmp    c000fbb5 <CPU::detectFeatures()+0x3cb>
c000fae9:	50                   	push   eax
c000faea:	50                   	push   eax
c000faeb:	68 1b 0a 02 c0       	push   0xc0020a1b
c000faf0:	55                   	push   ebp
c000faf1:	e8 da 0b ff ff       	call   c00006d0 <strcmp>
c000faf6:	83 c4 10             	add    esp,0x10
c000faf9:	85 c0                	test   eax,eax
c000fafb:	75 0f                	jne    c000fb0c <CPU::detectFeatures()+0x322>
c000fafd:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fb07:	e9 a9 00 00 00       	jmp    c000fbb5 <CPU::detectFeatures()+0x3cb>
c000fb0c:	50                   	push   eax
c000fb0d:	50                   	push   eax
c000fb0e:	68 28 0a 02 c0       	push   0xc0020a28
c000fb13:	55                   	push   ebp
c000fb14:	e8 b7 0b ff ff       	call   c00006d0 <strcmp>
c000fb19:	83 c4 10             	add    esp,0x10
c000fb1c:	85 c0                	test   eax,eax
c000fb1e:	75 0f                	jne    c000fb2f <CPU::detectFeatures()+0x345>
c000fb20:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fb2a:	e9 86 00 00 00       	jmp    c000fbb5 <CPU::detectFeatures()+0x3cb>
c000fb2f:	50                   	push   eax
c000fb30:	50                   	push   eax
c000fb31:	68 35 0a 02 c0       	push   0xc0020a35
c000fb36:	55                   	push   ebp
c000fb37:	e8 94 0b ff ff       	call   c00006d0 <strcmp>
c000fb3c:	83 c4 10             	add    esp,0x10
c000fb3f:	85 c0                	test   eax,eax
c000fb41:	75 0c                	jne    c000fb4f <CPU::detectFeatures()+0x365>
c000fb43:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fb4d:	eb 66                	jmp    c000fbb5 <CPU::detectFeatures()+0x3cb>
c000fb4f:	50                   	push   eax
c000fb50:	50                   	push   eax
c000fb51:	68 42 0a 02 c0       	push   0xc0020a42
c000fb56:	55                   	push   ebp
c000fb57:	e8 74 0b ff ff       	call   c00006d0 <strcmp>
c000fb5c:	83 c4 10             	add    esp,0x10
c000fb5f:	85 c0                	test   eax,eax
c000fb61:	75 0c                	jne    c000fb6f <CPU::detectFeatures()+0x385>
c000fb63:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fb6d:	eb 46                	jmp    c000fbb5 <CPU::detectFeatures()+0x3cb>
c000fb6f:	57                   	push   edi
c000fb70:	57                   	push   edi
c000fb71:	68 4f 0a 02 c0       	push   0xc0020a4f
c000fb76:	55                   	push   ebp
c000fb77:	e8 54 0b ff ff       	call   c00006d0 <strcmp>
c000fb7c:	83 c4 10             	add    esp,0x10
c000fb7f:	85 c0                	test   eax,eax
c000fb81:	74 e0                	je     c000fb63 <CPU::detectFeatures()+0x379>
c000fb83:	56                   	push   esi
c000fb84:	56                   	push   esi
c000fb85:	68 5c 0a 02 c0       	push   0xc0020a5c
c000fb8a:	55                   	push   ebp
c000fb8b:	e8 40 0b ff ff       	call   c00006d0 <strcmp>
c000fb90:	83 c4 10             	add    esp,0x10
c000fb93:	85 c0                	test   eax,eax
c000fb95:	74 cc                	je     c000fb63 <CPU::detectFeatures()+0x379>
c000fb97:	51                   	push   ecx
c000fb98:	51                   	push   ecx
c000fb99:	68 69 0a 02 c0       	push   0xc0020a69
c000fb9e:	55                   	push   ebp
c000fb9f:	e8 2c 0b ff ff       	call   c00006d0 <strcmp>
c000fba4:	83 c4 10             	add    esp,0x10
c000fba7:	85 c0                	test   eax,eax
c000fba9:	74 b8                	je     c000fb63 <CPU::detectFeatures()+0x379>
c000fbab:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fbb5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fbba:	0f 86 be 00 00 00    	jbe    c000fc7e <CPU::detectFeatures()+0x494>
c000fbc0:	83 ec 0c             	sub    esp,0xc
c000fbc3:	68 80 00 00 00       	push   0x80
c000fbc8:	e8 31 fb ff ff       	call   c000f6fe <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fbcd:	83 e0 01             	and    eax,0x1
c000fbd0:	c1 e0 06             	shl    eax,0x6
c000fbd3:	89 c2                	mov    edx,eax
c000fbd5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fbdb:	83 e0 bf             	and    eax,0xffffffbf
c000fbde:	09 d0                	or     eax,edx
c000fbe0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fbe6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fbed:	e8 0c fb ff ff       	call   c000f6fe <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fbf2:	83 e0 01             	and    eax,0x1
c000fbf5:	c1 e0 04             	shl    eax,0x4
c000fbf8:	89 c2                	mov    edx,eax
c000fbfa:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc00:	83 e0 ef             	and    eax,0xffffffef
c000fc03:	09 d0                	or     eax,edx
c000fc05:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc0b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fc12:	e8 e7 fa ff ff       	call   c000f6fe <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc17:	89 c2                	mov    edx,eax
c000fc19:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc1f:	c1 e2 07             	shl    edx,0x7
c000fc22:	83 e0 7f             	and    eax,0x7f
c000fc25:	09 d0                	or     eax,edx
c000fc27:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc2d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fc34:	e8 f3 fa ff ff       	call   c000f72c <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc39:	83 e0 01             	and    eax,0x1
c000fc3c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fc43:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc49:	83 e0 f7             	and    eax,0xfffffff7
c000fc4c:	09 d0                	or     eax,edx
c000fc4e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc54:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fc5b:	e8 cc fa ff ff       	call   c000f72c <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc60:	83 c4 10             	add    esp,0x10
c000fc63:	83 e0 01             	and    eax,0x1
c000fc66:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc6d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fc73:	83 e0 fb             	and    eax,0xfffffffb
c000fc76:	09 d0                	or     eax,edx
c000fc78:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fc7e:	83 ec 0c             	sub    esp,0xc
c000fc81:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc85:	50                   	push   eax
c000fc86:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fc8a:	50                   	push   eax
c000fc8b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fc8f:	57                   	push   edi
c000fc90:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fc94:	56                   	push   esi
c000fc95:	6a 01                	push   0x1
c000fc97:	e8 82 f9 ff ff       	call   c000f61e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fc9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fca0:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fca6:	89 c1                	mov    ecx,eax
c000fca8:	83 e1 0f             	and    ecx,0xf
c000fcab:	83 e2 f0             	and    edx,0xfffffff0
c000fcae:	09 ca                	or     edx,ecx
c000fcb0:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fcb6:	89 c2                	mov    edx,eax
c000fcb8:	c1 ea 04             	shr    edx,0x4
c000fcbb:	83 e2 0f             	and    edx,0xf
c000fcbe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fcc2:	89 d1                	mov    ecx,edx
c000fcc4:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fcca:	83 c4 20             	add    esp,0x20
c000fccd:	c1 e1 06             	shl    ecx,0x6
c000fcd0:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fcd6:	09 ca                	or     edx,ecx
c000fcd8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fcdf:	89 c2                	mov    edx,eax
c000fce1:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fce7:	c1 ea 08             	shr    edx,0x8
c000fcea:	83 e2 0f             	and    edx,0xf
c000fced:	89 d5                	mov    ebp,edx
c000fcef:	83 e5 03             	and    ebp,0x3
c000fcf2:	83 e1 3f             	and    ecx,0x3f
c000fcf5:	c1 e5 06             	shl    ebp,0x6
c000fcf8:	09 e9                	or     ecx,ebp
c000fcfa:	89 d5                	mov    ebp,edx
c000fcfc:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000fd02:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000fd08:	c1 ed 02             	shr    ebp,0x2
c000fd0b:	83 e1 c0             	and    ecx,0xffffffc0
c000fd0e:	09 e9                	or     ecx,ebp
c000fd10:	89 c5                	mov    ebp,eax
c000fd12:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fd18:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fd1e:	c1 ed 08             	shr    ebp,0x8
c000fd21:	83 e5 30             	and    ebp,0x30
c000fd24:	83 e1 cf             	and    ecx,0xffffffcf
c000fd27:	09 e9                	or     ecx,ebp
c000fd29:	83 fa 06             	cmp    edx,0x6
c000fd2c:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000fd32:	74 05                	je     c000fd39 <CPU::detectFeatures()+0x54f>
c000fd34:	83 fa 0f             	cmp    edx,0xf
c000fd37:	75 64                	jne    c000fd9d <CPU::detectFeatures()+0x5b3>
c000fd39:	89 c1                	mov    ecx,eax
c000fd3b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fd41:	c1 e9 10             	shr    ecx,0x10
c000fd44:	c1 e1 04             	shl    ecx,0x4
c000fd47:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000fd4b:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c000fd51:	0f b6 c9             	movzx  ecx,cl
c000fd54:	c1 e1 06             	shl    ecx,0x6
c000fd57:	09 e9                	or     ecx,ebp
c000fd59:	83 fa 0f             	cmp    edx,0xf
c000fd5c:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c000fd63:	75 38                	jne    c000fd9d <CPU::detectFeatures()+0x5b3>
c000fd65:	c1 e8 14             	shr    eax,0x14
c000fd68:	83 c0 0f             	add    eax,0xf
c000fd6b:	0f b6 c0             	movzx  eax,al
c000fd6e:	89 c2                	mov    edx,eax
c000fd70:	c1 e8 02             	shr    eax,0x2
c000fd73:	83 e2 03             	and    edx,0x3
c000fd76:	89 d1                	mov    ecx,edx
c000fd78:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fd7e:	c1 e1 06             	shl    ecx,0x6
c000fd81:	83 e2 3f             	and    edx,0x3f
c000fd84:	09 ca                	or     edx,ecx
c000fd86:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fd8c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fd92:	83 e2 c0             	and    edx,0xffffffc0
c000fd95:	09 d0                	or     eax,edx
c000fd97:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fd9d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fda3:	83 ec 0c             	sub    esp,0xc
c000fda6:	83 c8 07             	or     eax,0x7
c000fda9:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fdaf:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fdb3:	50                   	push   eax
c000fdb4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fdb8:	55                   	push   ebp
c000fdb9:	57                   	push   edi
c000fdba:	56                   	push   esi
c000fdbb:	68 00 00 00 80       	push   0x80000000
c000fdc0:	e8 59 f8 ff ff       	call   c000f61e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fdc5:	83 c4 20             	add    esp,0x20
c000fdc8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fdd0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000fdd4:	76 1e                	jbe    c000fdf4 <CPU::detectFeatures()+0x60a>
c000fdd6:	83 ec 0c             	sub    esp,0xc
c000fdd9:	50                   	push   eax
c000fdda:	55                   	push   ebp
c000fddb:	57                   	push   edi
c000fddc:	56                   	push   esi
c000fddd:	68 01 00 00 80       	push   0x80000001
c000fde2:	e8 37 f8 ff ff       	call   c000f61e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fde7:	83 c4 20             	add    esp,0x20
c000fdea:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fdf4:	52                   	push   edx
c000fdf5:	52                   	push   edx
c000fdf6:	68 75 0a 02 c0       	push   0xc0020a75
c000fdfb:	53                   	push   ebx
c000fdfc:	e8 8f c0 ff ff       	call   c000be90 <Device::setName(char const*)>
c000fe01:	83 c4 10             	add    esp,0x10
c000fe04:	eb 69                	jmp    c000fe6f <CPU::detectFeatures()+0x685>
c000fe06:	50                   	push   eax
c000fe07:	50                   	push   eax
c000fe08:	68 da 09 02 c0       	push   0xc00209da
c000fe0d:	55                   	push   ebp
c000fe0e:	e8 dd 07 ff ff       	call   c00005f0 <strcpy>
c000fe13:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fe1d:	e8 a1 03 ff ff       	call   c00001c3 <is486>
c000fe22:	83 c4 10             	add    esp,0x10
c000fe25:	85 c0                	test   eax,eax
c000fe27:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe2d:	74 1f                	je     c000fe4e <CPU::detectFeatures()+0x664>
c000fe2f:	83 c8 07             	or     eax,0x7
c000fe32:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe38:	0f 20 c0             	mov    eax,cr0
c000fe3b:	83 e0 14             	and    eax,0x14
c000fe3e:	83 f8 04             	cmp    eax,0x4
c000fe41:	75 10                	jne    c000fe53 <CPU::detectFeatures()+0x669>
c000fe43:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe49:	83 e0 fd             	and    eax,0xfffffffd
c000fe4c:	eb 1b                	jmp    c000fe69 <CPU::detectFeatures()+0x67f>
c000fe4e:	83 e0 f8             	and    eax,0xfffffff8
c000fe51:	eb df                	jmp    c000fe32 <CPU::detectFeatures()+0x648>
c000fe53:	e8 46 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fe58:	83 e0 01             	and    eax,0x1
c000fe5b:	8d 14 00             	lea    edx,[eax+eax*1]
c000fe5e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe64:	83 e0 fd             	and    eax,0xfffffffd
c000fe67:	09 d0                	or     eax,edx
c000fe69:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fe6f:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fe76:	74 17                	je     c000fe8f <CPU::detectFeatures()+0x6a5>
c000fe78:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000fe7e:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c000fe84:	83 c8 10             	or     eax,0x10
c000fe87:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c000fe8d:	eb 20                	jmp    c000feaf <CPU::detectFeatures()+0x6c5>
c000fe8f:	e8 0a 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fe94:	83 e0 01             	and    eax,0x1
c000fe97:	8d 14 00             	lea    edx,[eax+eax*1]
c000fe9a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fea0:	83 e0 fd             	and    eax,0xfffffffd
c000fea3:	09 d0                	or     eax,edx
c000fea5:	a8 02                	test   al,0x2
c000fea7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fead:	75 c9                	jne    c000fe78 <CPU::detectFeatures()+0x68e>
c000feaf:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000feb6:	83 c4 2c             	add    esp,0x2c
c000feb9:	5b                   	pop    ebx
c000feba:	5e                   	pop    esi
c000febb:	5f                   	pop    edi
c000febc:	5d                   	pop    ebp
c000febd:	c3                   	ret    

c000febe <CPU::setupSMEP()>:
c000febe:	0f 20 e0             	mov    eax,cr4
c000fec1:	0d 00 00 10 00       	or     eax,0x100000
c000fec6:	0f 22 e0             	mov    cr4,eax
c000fec9:	c3                   	ret    

c000feca <CPU::setupUMIP()>:
c000feca:	0f 20 e0             	mov    eax,cr4
c000fecd:	80 cc 08             	or     ah,0x8
c000fed0:	0f 22 e0             	mov    cr4,eax
c000fed3:	c3                   	ret    

c000fed4 <CPU::setupTSC()>:
c000fed4:	0f 20 e0             	mov    eax,cr4
c000fed7:	83 c8 04             	or     eax,0x4
c000feda:	0f 22 e0             	mov    cr4,eax
c000fedd:	c3                   	ret    

c000fede <CPU::setupLargePages()>:
c000fede:	0f 20 e0             	mov    eax,cr4
c000fee1:	83 c8 10             	or     eax,0x10
c000fee4:	0f 22 e0             	mov    cr4,eax
c000fee7:	c3                   	ret    

c000fee8 <CPU::setupPAT()>:
c000fee8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000feed:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fef4:	74 2c                	je     c000ff22 <CPU::setupPAT()+0x3a>
c000fef6:	53                   	push   ebx
c000fef7:	83 ec 10             	sub    esp,0x10
c000fefa:	68 77 02 00 00       	push   0x277
c000feff:	50                   	push   eax
c000ff00:	e8 39 71 ff ff       	call   c000703e <Computer::rdmsr(unsigned int)>
c000ff05:	83 e2 f8             	and    edx,0xfffffff8
c000ff08:	83 ca 01             	or     edx,0x1
c000ff0b:	52                   	push   edx
c000ff0c:	50                   	push   eax
c000ff0d:	68 77 02 00 00       	push   0x277
c000ff12:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000ff18:	e8 4d 71 ff ff       	call   c000706a <Computer::wrmsr(unsigned int, unsigned long long)>
c000ff1d:	83 c4 28             	add    esp,0x28
c000ff20:	5b                   	pop    ebx
c000ff21:	c3                   	ret    
c000ff22:	c3                   	ret    
c000ff23:	90                   	nop

c000ff24 <CPU::setupMTRR()>:
c000ff24:	c3                   	ret    
c000ff25:	90                   	nop

c000ff26 <CPU::setupGlobalPages()>:
c000ff26:	0f 20 e0             	mov    eax,cr4
c000ff29:	0c 80                	or     al,0x80
c000ff2b:	0f 22 e0             	mov    cr4,eax
c000ff2e:	c3                   	ret    
c000ff2f:	90                   	nop

c000ff30 <CPU::allowUsermodeDataAccess()>:
c000ff30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff34:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff3b:	74 03                	je     c000ff40 <CPU::allowUsermodeDataAccess()+0x10>
c000ff3d:	0f 01 cb             	stac   
c000ff40:	c3                   	ret    
c000ff41:	90                   	nop

c000ff42 <CPU::prohibitUsermodeDataAccess()>:
c000ff42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff46:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff4d:	74 03                	je     c000ff52 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ff4f:	0f 01 ca             	clac   
c000ff52:	c3                   	ret    
c000ff53:	90                   	nop

c000ff54 <CPU::setupSMAP()>:
c000ff54:	0f 20 e0             	mov    eax,cr4
c000ff57:	0d 00 00 20 00       	or     eax,0x200000
c000ff5c:	0f 22 e0             	mov    cr4,eax
c000ff5f:	eb e1                	jmp    c000ff42 <CPU::prohibitUsermodeDataAccess()>
c000ff61:	90                   	nop

c000ff62 <CPU::setupFeatures()>:
c000ff62:	53                   	push   ebx
c000ff63:	83 ec 08             	sub    esp,0x8
c000ff66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff6a:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ff71:	74 18                	je     c000ff8b <CPU::setupFeatures()+0x29>
c000ff73:	83 ec 0c             	sub    esp,0xc
c000ff76:	68 81 0a 02 c0       	push   0xc0020a81
c000ff7b:	e8 21 a9 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c000ff80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff83:	e8 42 ff ff ff       	call   c000feca <CPU::setupUMIP()>
c000ff88:	83 c4 10             	add    esp,0x10
c000ff8b:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ff92:	74 18                	je     c000ffac <CPU::setupFeatures()+0x4a>
c000ff94:	83 ec 0c             	sub    esp,0xc
c000ff97:	68 8b 0a 02 c0       	push   0xc0020a8b
c000ff9c:	e8 00 a9 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c000ffa1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffa4:	e8 2b ff ff ff       	call   c000fed4 <CPU::setupTSC()>
c000ffa9:	83 c4 10             	add    esp,0x10
c000ffac:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ffb3:	74 18                	je     c000ffcd <CPU::setupFeatures()+0x6b>
c000ffb5:	83 ec 0c             	sub    esp,0xc
c000ffb8:	68 94 0a 02 c0       	push   0xc0020a94
c000ffbd:	e8 df a8 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c000ffc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffc5:	e8 14 ff ff ff       	call   c000fede <CPU::setupLargePages()>
c000ffca:	83 c4 10             	add    esp,0x10
c000ffcd:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000ffd4:	74 18                	je     c000ffee <CPU::setupFeatures()+0x8c>
c000ffd6:	83 ec 0c             	sub    esp,0xc
c000ffd9:	68 9d 0a 02 c0       	push   0xc0020a9d
c000ffde:	e8 be a8 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c000ffe3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffe6:	e8 3b ff ff ff       	call   c000ff26 <CPU::setupGlobalPages()>
c000ffeb:	83 c4 10             	add    esp,0x10
c000ffee:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fff5:	74 18                	je     c001000f <CPU::setupFeatures()+0xad>
c000fff7:	83 ec 0c             	sub    esp,0xc
c000fffa:	68 af 0a 02 c0       	push   0xc0020aaf
c000ffff:	e8 9d a8 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0010004:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010007:	e8 dc fe ff ff       	call   c000fee8 <CPU::setupPAT()>
c001000c:	83 c4 10             	add    esp,0x10
c001000f:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010016:	74 11                	je     c0010029 <CPU::setupFeatures()+0xc7>
c0010018:	c7 44 24 10 b8 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ab8
c0010020:	83 c4 08             	add    esp,0x8
c0010023:	5b                   	pop    ebx
c0010024:	e9 78 a8 ff ff       	jmp    c000a8a1 <Dbg::kprintf(char const*, ...)>
c0010029:	83 c4 08             	add    esp,0x8
c001002c:	5b                   	pop    ebx
c001002d:	c3                   	ret    

c001002e <CPU::open(int, int, void*)>:
c001002e:	57                   	push   edi
c001002f:	56                   	push   esi
c0010030:	53                   	push   ebx
c0010031:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010035:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010039:	83 ec 0c             	sub    esp,0xc
c001003c:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010042:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0010048:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001004e:	50                   	push   eax
c001004f:	e8 e6 72 ff ff       	call   c000733a <GDT::setup()>
c0010054:	83 c4 0c             	add    esp,0xc
c0010057:	6a 00                	push   0x0
c0010059:	68 ef be ad de       	push   0xdeadbeef
c001005e:	57                   	push   edi
c001005f:	e8 84 8e ff ff       	call   c0008ee8 <TSS::setup(unsigned long, unsigned long)>
c0010064:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010067:	e8 5c 8e ff ff       	call   c0008ec8 <TSS::flush()>
c001006c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010072:	89 04 24             	mov    DWORD PTR [esp],eax
c0010075:	e8 24 75 ff ff       	call   c000759e <IDT::setup()>
c001007a:	b8 00 04 00 00       	mov    eax,0x400
c001007f:	0f 23 f8             	mov    db7,eax
c0010082:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001008c:	e8 a9 7c ff ff       	call   c0007d3a <Phys::allocatePage()>
c0010091:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010097:	89 30                	mov    DWORD PTR [eax],esi
c0010099:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001009f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00100a2:	58                   	pop    eax
c00100a3:	5a                   	pop    edx
c00100a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00100aa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00100ae:	e8 91 9e ff ff       	call   c0009f44 <VAS::setCPUSpecific(unsigned long)>
c00100b3:	c7 04 24 c2 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ac2
c00100ba:	e8 cd 00 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c00100bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100c2:	e8 23 f7 ff ff       	call   c000f7ea <CPU::detectFeatures()>
c00100c7:	c7 04 24 e5 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ae5
c00100ce:	e8 b9 00 00 00       	call   c001018c <KeSetBootMessage(char const*)>
c00100d3:	e8 28 6f 00 00       	call   c0017000 <HalInitialise()>
c00100d8:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c00100dd:	83 e0 10             	and    eax,0x10
c00100e0:	83 f8 01             	cmp    eax,0x1
c00100e3:	19 c0                	sbb    eax,eax
c00100e5:	83 e0 46             	and    eax,0x46
c00100e8:	83 c0 1e             	add    eax,0x1e
c00100eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00100ee:	e8 42 d6 ff ff       	call   c000d735 <setupTimer(int)>
c00100f3:	83 c4 10             	add    esp,0x10
c00100f6:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c00100fd:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010103:	74 0c                	je     c0010111 <CPU::open(int, int, void*)+0xe3>
c0010105:	83 ec 0c             	sub    esp,0xc
c0010108:	53                   	push   ebx
c0010109:	e8 54 fe ff ff       	call   c000ff62 <CPU::setupFeatures()>
c001010e:	83 c4 10             	add    esp,0x10
c0010111:	5b                   	pop    ebx
c0010112:	31 c0                	xor    eax,eax
c0010114:	5e                   	pop    esi
c0010115:	5f                   	pop    edi
c0010116:	c3                   	ret    

c0010117 <KeDisplaySplashScreen()>:
c0010117:	55                   	push   ebp
c0010118:	bd 05 00 00 00       	mov    ebp,0x5
c001011d:	57                   	push   edi
c001011e:	bf 80 1e 02 c0       	mov    edi,0xc0021e80
c0010123:	56                   	push   esi
c0010124:	be 0a 00 00 00       	mov    esi,0xa
c0010129:	53                   	push   ebx
c001012a:	31 db                	xor    ebx,ebx
c001012c:	83 ec 0c             	sub    esp,0xc
c001012f:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0010132:	85 d2                	test   edx,edx
c0010134:	89 d0                	mov    eax,edx
c0010136:	74 4c                	je     c0010184 <KeDisplaySplashScreen()+0x6d>
c0010138:	80 bb b6 1e 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde14a],0xdb
c001013f:	75 13                	jne    c0010154 <KeDisplaySplashScreen()+0x3d>
c0010141:	0f b6 8b b5 1e 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffde14b]
c0010148:	83 e1 fe             	and    ecx,0xfffffffe
c001014b:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010151:	75 01                	jne    c0010154 <KeDisplaySplashScreen()+0x3d>
c0010153:	46                   	inc    esi
c0010154:	83 fa 0d             	cmp    edx,0xd
c0010157:	74 28                	je     c0010181 <KeDisplaySplashScreen()+0x6a>
c0010159:	83 fa 0a             	cmp    edx,0xa
c001015c:	75 0a                	jne    c0010168 <KeDisplaySplashScreen()+0x51>
c001015e:	45                   	inc    ebp
c001015f:	be 0a 00 00 00       	mov    esi,0xa
c0010164:	31 db                	xor    ebx,ebx
c0010166:	eb 19                	jmp    c0010181 <KeDisplaySplashScreen()+0x6a>
c0010168:	8d 14 33             	lea    edx,[ebx+esi*1]
c001016b:	83 ec 0c             	sub    esp,0xc
c001016e:	0f be c0             	movsx  eax,al
c0010171:	55                   	push   ebp
c0010172:	43                   	inc    ebx
c0010173:	52                   	push   edx
c0010174:	6a 00                	push   0x0
c0010176:	6a 0e                	push   0xe
c0010178:	50                   	push   eax
c0010179:	e8 fe 7a 00 00       	call   c0017c7c <HalConsoleWriteCharacter(char, int, int, int, int)>
c001017e:	83 c4 20             	add    esp,0x20
c0010181:	47                   	inc    edi
c0010182:	eb ab                	jmp    c001012f <KeDisplaySplashScreen()+0x18>
c0010184:	83 c4 0c             	add    esp,0xc
c0010187:	5b                   	pop    ebx
c0010188:	5e                   	pop    esi
c0010189:	5f                   	pop    edi
c001018a:	5d                   	pop    ebp
c001018b:	c3                   	ret    

c001018c <KeSetBootMessage(char const*)>:
c001018c:	57                   	push   edi
c001018d:	56                   	push   esi
c001018e:	53                   	push   ebx
c001018f:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010195:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001019c:	68 9e 00 00 00       	push   0x9e
c00101a1:	6a 00                	push   0x0
c00101a3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00101a7:	56                   	push   esi
c00101a8:	e8 43 03 ff ff       	call   c00004f0 <memset>
c00101ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101b0:	e8 6b 03 ff ff       	call   c0000520 <strlen>
c00101b5:	ba 50 00 00 00       	mov    edx,0x50
c00101ba:	83 c4 10             	add    esp,0x10
c00101bd:	31 c9                	xor    ecx,ecx
c00101bf:	29 c2                	sub    edx,eax
c00101c1:	83 e2 fe             	and    edx,0xfffffffe
c00101c4:	01 f2                	add    edx,esi
c00101c6:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c00101cb:	84 c0                	test   al,al
c00101cd:	74 0a                	je     c00101d9 <KeSetBootMessage(char const*)+0x4d>
c00101cf:	80 cc 0f             	or     ah,0xf
c00101d2:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c00101d6:	41                   	inc    ecx
c00101d7:	eb ed                	jmp    c00101c6 <KeSetBootMessage(char const*)+0x3a>
c00101d9:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c00101de:	b9 9e 00 00 00       	mov    ecx,0x9e
c00101e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101e5:	81 c4 a0 00 00 00    	add    esp,0xa0
c00101eb:	5b                   	pop    ebx
c00101ec:	5e                   	pop    esi
c00101ed:	5f                   	pop    edi
c00101ee:	c3                   	ret    
c00101ef:	90                   	nop

c00101f0 <EnvVarContainer::getEnv(char const*)>:
c00101f0:	57                   	push   edi
c00101f1:	56                   	push   esi
c00101f2:	53                   	push   ebx
c00101f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101f7:	31 db                	xor    ebx,ebx
c00101f9:	39 1e                	cmp    DWORD PTR [esi],ebx
c00101fb:	7e 2b                	jle    c0010228 <EnvVarContainer::getEnv(char const*)+0x38>
c00101fd:	50                   	push   eax
c00101fe:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010205:	50                   	push   eax
c0010206:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010209:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001020c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010210:	e8 bb 04 ff ff       	call   c00006d0 <strcmp>
c0010215:	83 c4 10             	add    esp,0x10
c0010218:	85 c0                	test   eax,eax
c001021a:	75 09                	jne    c0010225 <EnvVarContainer::getEnv(char const*)+0x35>
c001021c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001021f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010223:	eb 05                	jmp    c001022a <EnvVarContainer::getEnv(char const*)+0x3a>
c0010225:	43                   	inc    ebx
c0010226:	eb d1                	jmp    c00101f9 <EnvVarContainer::getEnv(char const*)+0x9>
c0010228:	31 c0                	xor    eax,eax
c001022a:	5b                   	pop    ebx
c001022b:	5e                   	pop    esi
c001022c:	5f                   	pop    edi
c001022d:	c3                   	ret    

c001022e <EnvVarContainer::setEnv(char const*, char const*)>:
c001022e:	55                   	push   ebp
c001022f:	57                   	push   edi
c0010230:	56                   	push   esi
c0010231:	53                   	push   ebx
c0010232:	83 ec 28             	sub    esp,0x28
c0010235:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010239:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001023d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010241:	56                   	push   esi
c0010242:	e8 d9 02 ff ff       	call   c0000520 <strlen>
c0010247:	40                   	inc    eax
c0010248:	89 04 24             	mov    DWORD PTR [esp],eax
c001024b:	e8 df 77 ff ff       	call   c0007a2f <malloc>
c0010250:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010253:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010257:	e8 c4 02 ff ff       	call   c0000520 <strlen>
c001025c:	40                   	inc    eax
c001025d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010260:	e8 ca 77 ff ff       	call   c0007a2f <malloc>
c0010265:	89 34 24             	mov    DWORD PTR [esp],esi
c0010268:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001026c:	e8 af 02 ff ff       	call   c0000520 <strlen>
c0010271:	83 c4 0c             	add    esp,0xc
c0010274:	40                   	inc    eax
c0010275:	50                   	push   eax
c0010276:	6a 00                	push   0x0
c0010278:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001027c:	e8 6f 02 ff ff       	call   c00004f0 <memset>
c0010281:	89 34 24             	mov    DWORD PTR [esp],esi
c0010284:	e8 97 02 ff ff       	call   c0000520 <strlen>
c0010289:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001028d:	8d 48 01             	lea    ecx,[eax+0x1]
c0010290:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010292:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010295:	89 de                	mov    esi,ebx
c0010297:	e8 84 02 ff ff       	call   c0000520 <strlen>
c001029c:	83 c4 0c             	add    esp,0xc
c001029f:	40                   	inc    eax
c00102a0:	50                   	push   eax
c00102a1:	6a 00                	push   0x0
c00102a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102a7:	e8 44 02 ff ff       	call   c00004f0 <memset>
c00102ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102af:	e8 6c 02 ff ff       	call   c0000520 <strlen>
c00102b4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102b8:	8d 48 01             	lea    ecx,[eax+0x1]
c00102bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00102c0:	40                   	inc    eax
c00102c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00102c4:	5a                   	pop    edx
c00102c5:	c1 e0 03             	shl    eax,0x3
c00102c8:	59                   	pop    ecx
c00102c9:	50                   	push   eax
c00102ca:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00102cd:	e8 49 77 ff ff       	call   c0007a1b <realloc>
c00102d2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00102d5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00102d9:	b9 08 00 00 00       	mov    ecx,0x8
c00102de:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00102e1:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00102e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102e7:	83 c4 2c             	add    esp,0x2c
c00102ea:	5b                   	pop    ebx
c00102eb:	5e                   	pop    esi
c00102ec:	5f                   	pop    edi
c00102ed:	5d                   	pop    ebp
c00102ee:	c3                   	ret    
c00102ef:	90                   	nop

c00102f0 <EnvVarContainer::deleteEnv(char const*)>:
c00102f0:	c3                   	ret    
c00102f1:	90                   	nop

c00102f2 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00102f2:	55                   	push   ebp
c00102f3:	57                   	push   edi
c00102f4:	56                   	push   esi
c00102f5:	53                   	push   ebx
c00102f6:	81 ec 38 01 00 00    	sub    esp,0x138
c00102fc:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010303:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001030a:	68 14 01 00 00       	push   0x114
c001030f:	e8 1b 77 ff ff       	call   c0007a2f <malloc>
c0010314:	83 c4 0c             	add    esp,0xc
c0010317:	89 c3                	mov    ebx,eax
c0010319:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001031c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010323:	50                   	push   eax
c0010324:	e8 21 ab ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c0010329:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001032c:	e8 43 ae ff ff       	call   c000b174 <File::exists()>
c0010331:	83 c4 10             	add    esp,0x10
c0010334:	84 c0                	test   al,al
c0010336:	75 31                	jne    c0010369 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010338:	50                   	push   eax
c0010339:	50                   	push   eax
c001033a:	6a 12                	push   0x12
c001033c:	53                   	push   ebx
c001033d:	e8 c4 ab ff ff       	call   c000af06 <File::open(FileOpenMode)>
c0010342:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010344:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010347:	89 34 24             	mov    DWORD PTR [esp],esi
c001034a:	e8 d1 01 ff ff       	call   c0000520 <strlen>
c001034f:	5a                   	pop    edx
c0010350:	31 d2                	xor    edx,edx
c0010352:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010356:	51                   	push   ecx
c0010357:	56                   	push   esi
c0010358:	52                   	push   edx
c0010359:	50                   	push   eax
c001035a:	53                   	push   ebx
c001035b:	ff d7                	call   edi
c001035d:	83 c4 14             	add    esp,0x14
c0010360:	53                   	push   ebx
c0010361:	e8 fe ab ff ff       	call   c000af64 <File::close()>
c0010366:	83 c4 10             	add    esp,0x10
c0010369:	56                   	push   esi
c001036a:	31 f6                	xor    esi,esi
c001036c:	68 00 01 00 00       	push   0x100
c0010371:	6a 00                	push   0x0
c0010373:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010377:	50                   	push   eax
c0010378:	e8 73 01 ff ff       	call   c00004f0 <memset>
c001037d:	5f                   	pop    edi
c001037e:	58                   	pop    eax
c001037f:	6a 01                	push   0x1
c0010381:	53                   	push   ebx
c0010382:	e8 7f ab ff ff       	call   c000af06 <File::open(FileOpenMode)>
c0010387:	83 c4 10             	add    esp,0x10
c001038a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010392:	83 ec 0c             	sub    esp,0xc
c0010395:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010397:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001039b:	51                   	push   ecx
c001039c:	8d 54 24 23          	lea    edx,[esp+0x23]
c00103a0:	52                   	push   edx
c00103a1:	6a 00                	push   0x0
c00103a3:	6a 01                	push   0x1
c00103a5:	53                   	push   ebx
c00103a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00103a9:	0f be 54 24 33       	movsx  edx,BYTE PTR [esp+0x33]
c00103ae:	83 c4 20             	add    esp,0x20
c00103b1:	83 fa 0d             	cmp    edx,0xd
c00103b4:	89 d0                	mov    eax,edx
c00103b6:	0f 84 0a 01 00 00    	je     c00104c6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00103bc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00103c1:	0f 84 f0 00 00 00    	je     c00104b7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00103c7:	83 fa 0a             	cmp    edx,0xa
c00103ca:	74 13                	je     c00103df <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c00103cc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00103d1:	74 0c                	je     c00103df <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c00103d3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00103d9:	0f 8e d8 00 00 00    	jle    c00104b7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00103df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00103e3:	83 ec 0c             	sub    esp,0xc
c00103e6:	8d 78 01             	lea    edi,[eax+0x1]
c00103e9:	57                   	push   edi
c00103ea:	e8 40 76 ff ff       	call   c0007a2f <malloc>
c00103ef:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00103f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00103f7:	8d 56 04             	lea    edx,[esi+0x4]
c00103fa:	89 14 24             	mov    DWORD PTR [esp],edx
c00103fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010401:	e8 29 76 ff ff       	call   c0007a2f <malloc>
c0010406:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001040a:	83 c4 0c             	add    esp,0xc
c001040d:	57                   	push   edi
c001040e:	6a 00                	push   0x0
c0010410:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010414:	e8 d7 00 ff ff       	call   c00004f0 <memset>
c0010419:	8d 74 24 30          	lea    esi,[esp+0x30]
c001041d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010421:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010425:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010427:	83 c4 0c             	add    esp,0xc
c001042a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001042e:	52                   	push   edx
c001042f:	6a 00                	push   0x0
c0010431:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010435:	e8 b6 00 ff ff       	call   c00004f0 <memset>
c001043a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001043e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010442:	89 34 24             	mov    DWORD PTR [esp],esi
c0010445:	e8 d6 00 ff ff       	call   c0000520 <strlen>
c001044a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001044e:	89 c1                	mov    ecx,eax
c0010450:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010452:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010455:	83 c4 10             	add    esp,0x10
c0010458:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001045b:	40                   	inc    eax
c001045c:	85 d2                	test   edx,edx
c001045e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010461:	75 0c                	jne    c001046f <EnvVarContainer::loadFrom(char const*, char const*)+0x17d>
c0010463:	83 ec 0c             	sub    esp,0xc
c0010466:	6a 08                	push   0x8
c0010468:	e8 c2 75 ff ff       	call   c0007a2f <malloc>
c001046d:	eb 0c                	jmp    c001047b <EnvVarContainer::loadFrom(char const*, char const*)+0x189>
c001046f:	c1 e0 03             	shl    eax,0x3
c0010472:	51                   	push   ecx
c0010473:	51                   	push   ecx
c0010474:	50                   	push   eax
c0010475:	52                   	push   edx
c0010476:	e8 a0 75 ff ff       	call   c0007a1b <realloc>
c001047b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001047e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010481:	83 c4 10             	add    esp,0x10
c0010484:	b9 08 00 00 00       	mov    ecx,0x8
c0010489:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001048c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010490:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010494:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010496:	50                   	push   eax
c0010497:	31 f6                	xor    esi,esi
c0010499:	68 00 01 00 00       	push   0x100
c001049e:	6a 00                	push   0x0
c00104a0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00104a4:	50                   	push   eax
c00104a5:	e8 46 00 ff ff       	call   c00004f0 <memset>
c00104aa:	83 c4 10             	add    esp,0x10
c00104ad:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00104b5:	eb 0f                	jmp    c00104c6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00104b7:	3c 3d                	cmp    al,0x3d
c00104b9:	74 07                	je     c00104c2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00104bb:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00104bf:	46                   	inc    esi
c00104c0:	eb 04                	jmp    c00104c6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00104c2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00104c6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00104cb:	0f 85 c1 fe ff ff    	jne    c0010392 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00104d1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00104d7:	5b                   	pop    ebx
c00104d8:	5e                   	pop    esi
c00104d9:	5f                   	pop    edi
c00104da:	5d                   	pop    ebp
c00104db:	c3                   	ret    

c00104dc <EnvVarContainer::__loadSystem()>:
c00104dc:	83 ec 10             	sub    esp,0x10
c00104df:	68 e0 1f 02 c0       	push   0xc0021fe0
c00104e4:	68 28 0b 02 c0       	push   0xc0020b28
c00104e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104ed:	e8 00 fe ff ff       	call   c00102f2 <EnvVarContainer::loadFrom(char const*, char const*)>
c00104f2:	83 c4 1c             	add    esp,0x1c
c00104f5:	c3                   	ret    

c00104f6 <EnvVarContainer::__loadUser()>:
c00104f6:	c3                   	ret    
c00104f7:	90                   	nop

c00104f8 <EnvVarContainer::EnvVarContainer(Process*)>:
c00104f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010502:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010506:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001050a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001050d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010511:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010518:	90                   	nop
c0010519:	c3                   	ret    

c001051a <EnvVarContainer::~EnvVarContainer()>:
c001051a:	83 ec 0c             	sub    esp,0xc
c001051d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010521:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010524:	85 c0                	test   eax,eax
c0010526:	74 1d                	je     c0010545 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052c:	8b 00                	mov    eax,DWORD PTR [eax]
c001052e:	85 c0                	test   eax,eax
c0010530:	74 13                	je     c0010545 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010536:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010539:	83 ec 0c             	sub    esp,0xc
c001053c:	50                   	push   eax
c001053d:	e8 fd 74 ff ff       	call   c0007a3f <free>
c0010542:	83 c4 10             	add    esp,0x10
c0010545:	90                   	nop
c0010546:	83 c4 0c             	add    esp,0xc
c0010549:	c3                   	ret    

c001054a <Krnl::getEnv(Process*, char const*)>:
c001054a:	53                   	push   ebx
c001054b:	83 ec 08             	sub    esp,0x8
c001054e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010552:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c0010558:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001055c:	74 04                	je     c0010562 <Krnl::getEnv(Process*, char const*)+0x18>
c001055e:	85 c0                	test   eax,eax
c0010560:	75 0b                	jne    c001056d <Krnl::getEnv(Process*, char const*)+0x23>
c0010562:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010567:	85 c0                	test   eax,eax
c0010569:	75 19                	jne    c0010584 <Krnl::getEnv(Process*, char const*)+0x3a>
c001056b:	eb 27                	jmp    c0010594 <Krnl::getEnv(Process*, char const*)+0x4a>
c001056d:	52                   	push   edx
c001056e:	52                   	push   edx
c001056f:	53                   	push   ebx
c0010570:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010576:	e8 75 fc ff ff       	call   c00101f0 <EnvVarContainer::getEnv(char const*)>
c001057b:	83 c4 10             	add    esp,0x10
c001057e:	85 c0                	test   eax,eax
c0010580:	75 28                	jne    c00105aa <Krnl::getEnv(Process*, char const*)+0x60>
c0010582:	eb de                	jmp    c0010562 <Krnl::getEnv(Process*, char const*)+0x18>
c0010584:	52                   	push   edx
c0010585:	52                   	push   edx
c0010586:	53                   	push   ebx
c0010587:	50                   	push   eax
c0010588:	e8 63 fc ff ff       	call   c00101f0 <EnvVarContainer::getEnv(char const*)>
c001058d:	83 c4 10             	add    esp,0x10
c0010590:	85 c0                	test   eax,eax
c0010592:	75 16                	jne    c00105aa <Krnl::getEnv(Process*, char const*)+0x60>
c0010594:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010599:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001059d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105a1:	83 c4 08             	add    esp,0x8
c00105a4:	5b                   	pop    ebx
c00105a5:	e9 46 fc ff ff       	jmp    c00101f0 <EnvVarContainer::getEnv(char const*)>
c00105aa:	83 c4 08             	add    esp,0x8
c00105ad:	5b                   	pop    ebx
c00105ae:	c3                   	ret    

c00105af <Krnl::setEnvSystem(char const*, char const*)>:
c00105af:	83 ec 10             	sub    esp,0x10
c00105b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105ba:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c00105c0:	e8 69 fc ff ff       	call   c001022e <EnvVarContainer::setEnv(char const*, char const*)>
c00105c5:	83 c4 1c             	add    esp,0x1c
c00105c8:	c3                   	ret    

c00105c9 <Krnl::setEnvUser(char const*, char const*)>:
c00105c9:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00105ce:	85 c0                	test   eax,eax
c00105d0:	74 15                	je     c00105e7 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00105d2:	83 ec 10             	sub    esp,0x10
c00105d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105dd:	50                   	push   eax
c00105de:	e8 4b fc ff ff       	call   c001022e <EnvVarContainer::setEnv(char const*, char const*)>
c00105e3:	83 c4 1c             	add    esp,0x1c
c00105e6:	c3                   	ret    
c00105e7:	c3                   	ret    

c00105e8 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00105e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105ec:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00105f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00105f6:	e9 33 fc ff ff       	jmp    c001022e <EnvVarContainer::setEnv(char const*, char const*)>

c00105fb <Krnl::deleteEnvSystem(char const*)>:
c00105fb:	c3                   	ret    

c00105fc <Krnl::deleteEnvUser(char const*)>:
c00105fc:	c3                   	ret    

c00105fd <Krnl::deleteEnvProcess(Process*, char const*)>:
c00105fd:	c3                   	ret    

c00105fe <Krnl::newProcessEnv(Process*)>:
c00105fe:	53                   	push   ebx
c00105ff:	83 ec 14             	sub    esp,0x14
c0010602:	6a 0c                	push   0xc
c0010604:	e8 26 74 ff ff       	call   c0007a2f <malloc>
c0010609:	89 c3                	mov    ebx,eax
c001060b:	58                   	pop    eax
c001060c:	5a                   	pop    edx
c001060d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010611:	53                   	push   ebx
c0010612:	e8 e1 fe ff ff       	call   c00104f8 <EnvVarContainer::EnvVarContainer(Process*)>
c0010617:	83 c4 18             	add    esp,0x18
c001061a:	89 d8                	mov    eax,ebx
c001061c:	5b                   	pop    ebx
c001061d:	c3                   	ret    

c001061e <Krnl::copyProcessEnv(Process*, Process*)>:
c001061e:	57                   	push   edi
c001061f:	56                   	push   esi
c0010620:	53                   	push   ebx
c0010621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010625:	83 ec 0c             	sub    esp,0xc
c0010628:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001062e:	6a 0c                	push   0xc
c0010630:	e8 fa 73 ff ff       	call   c0007a2f <malloc>
c0010635:	89 c3                	mov    ebx,eax
c0010637:	58                   	pop    eax
c0010638:	5a                   	pop    edx
c0010639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001063d:	53                   	push   ebx
c001063e:	e8 b5 fe ff ff       	call   c00104f8 <EnvVarContainer::EnvVarContainer(Process*)>
c0010643:	8b 07                	mov    eax,DWORD PTR [edi]
c0010645:	89 03                	mov    DWORD PTR [ebx],eax
c0010647:	c1 e0 03             	shl    eax,0x3
c001064a:	89 04 24             	mov    DWORD PTR [esp],eax
c001064d:	e8 dd 73 ff ff       	call   c0007a2f <malloc>
c0010652:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010655:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010657:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001065a:	89 c7                	mov    edi,eax
c001065c:	c1 e1 03             	shl    ecx,0x3
c001065f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010661:	83 c4 10             	add    esp,0x10
c0010664:	89 d8                	mov    eax,ebx
c0010666:	5b                   	pop    ebx
c0010667:	5e                   	pop    esi
c0010668:	5f                   	pop    edi
c0010669:	c3                   	ret    

c001066a <Krnl::loadSystemEnv()>:
c001066a:	53                   	push   ebx
c001066b:	83 ec 14             	sub    esp,0x14
c001066e:	6a 0c                	push   0xc
c0010670:	e8 ba 73 ff ff       	call   c0007a2f <malloc>
c0010675:	89 c3                	mov    ebx,eax
c0010677:	58                   	pop    eax
c0010678:	5a                   	pop    edx
c0010679:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001067f:	53                   	push   ebx
c0010680:	e8 73 fe ff ff       	call   c00104f8 <EnvVarContainer::EnvVarContainer(Process*)>
c0010685:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010688:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c001068e:	e8 49 fe ff ff       	call   c00104dc <EnvVarContainer::__loadSystem()>
c0010693:	83 c4 18             	add    esp,0x18
c0010696:	5b                   	pop    ebx
c0010697:	c3                   	ret    

c0010698 <Krnl::loadUserEnv()>:
c0010698:	53                   	push   ebx
c0010699:	83 ec 14             	sub    esp,0x14
c001069c:	6a 0c                	push   0xc
c001069e:	e8 8c 73 ff ff       	call   c0007a2f <malloc>
c00106a3:	89 c3                	mov    ebx,eax
c00106a5:	58                   	pop    eax
c00106a6:	5a                   	pop    edx
c00106a7:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00106ad:	53                   	push   ebx
c00106ae:	e8 45 fe ff ff       	call   c00104f8 <EnvVarContainer::EnvVarContainer(Process*)>
c00106b3:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c00106b9:	83 c4 18             	add    esp,0x18
c00106bc:	5b                   	pop    ebx
c00106bd:	c3                   	ret    

c00106be <Krnl::flushEnv()>:
c00106be:	c3                   	ret    

c00106bf <Krnl::getProcessTotalEnvCount(Process*)>:
c00106bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106c3:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c00106c9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00106cf:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00106d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00106d6:	03 01                	add    eax,DWORD PTR [ecx]
c00106d8:	85 d2                	test   edx,edx
c00106da:	74 02                	je     c00106de <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00106dc:	03 02                	add    eax,DWORD PTR [edx]
c00106de:	c3                   	ret    

c00106df <Krnl::getProcessEnvPair(Process*, int)>:
c00106df:	57                   	push   edi
c00106e0:	56                   	push   esi
c00106e1:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c00106e7:	53                   	push   ebx
c00106e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00106f4:	85 f6                	test   esi,esi
c00106f6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00106fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00106fe:	75 16                	jne    c0010716 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010700:	39 c2                	cmp    edx,eax
c0010702:	7c 16                	jl     c001071a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010704:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c001070a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001070c:	01 c6                	add    esi,eax
c001070e:	39 d6                	cmp    esi,edx
c0010710:	7e 3c                	jle    c001074e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010712:	29 c2                	sub    edx,eax
c0010714:	eb 04                	jmp    c001071a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010716:	39 c2                	cmp    edx,eax
c0010718:	7d 05                	jge    c001071f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001071a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001071d:	eb 20                	jmp    c001073f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001071f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010721:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010724:	39 d1                	cmp    ecx,edx
c0010726:	7e 04                	jle    c001072c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010728:	29 c2                	sub    edx,eax
c001072a:	eb 10                	jmp    c001073c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001072c:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c0010732:	03 0e                	add    ecx,DWORD PTR [esi]
c0010734:	39 d1                	cmp    ecx,edx
c0010736:	7e 16                	jle    c001074e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010738:	29 c2                	sub    edx,eax
c001073a:	29 fa                	sub    edx,edi
c001073c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001073f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010742:	8b 02                	mov    eax,DWORD PTR [edx]
c0010744:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010747:	89 03                	mov    DWORD PTR [ebx],eax
c0010749:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001074c:	eb 1d                	jmp    c001076b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001074e:	83 ec 0c             	sub    esp,0xc
c0010751:	68 4a 0b 02 c0       	push   0xc0020b4a
c0010756:	e8 ac 00 00 00       	call   c0010807 <KePanic(char const*)>
c001075b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010761:	83 c4 10             	add    esp,0x10
c0010764:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001076b:	89 d8                	mov    eax,ebx
c001076d:	5b                   	pop    ebx
c001076e:	5e                   	pop    esi
c001076f:	5f                   	pop    edi
c0010770:	c2 04 00             	ret    0x4

c0010773 <CPU::current()>:
c0010773:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010778:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001077e:	c3                   	ret    

c001077f <operator new(unsigned long)>:
c001077f:	e9 ab 72 ff ff       	jmp    c0007a2f <malloc>

c0010784 <operator delete(void*)>:
c0010784:	e9 c6 72 ff ff       	jmp    c0007a4f <rfree>

c0010789 <disableIRQs()>:
c0010789:	fa                   	cli    
c001078a:	c3                   	ret    

c001078b <enableIRQs()>:
c001078b:	fb                   	sti    
c001078c:	c3                   	ret    

c001078d <lockScheduler()>:
c001078d:	fa                   	cli    
c001078e:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010794:	c3                   	ret    

c0010795 <unlockScheduler()>:
c0010795:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001079a:	48                   	dec    eax
c001079b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00107a0:	75 01                	jne    c00107a3 <unlockScheduler()+0xe>
c00107a2:	fb                   	sti    
c00107a3:	c3                   	ret    

c00107a4 <lockStuff()>:
c00107a4:	fa                   	cli    
c00107a5:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00107ab:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00107b1:	c3                   	ret    

c00107b2 <unlockStuff()>:
c00107b2:	83 ec 0c             	sub    esp,0xc
c00107b5:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00107ba:	48                   	dec    eax
c00107bb:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00107c0:	75 18                	jne    c00107da <unlockStuff()+0x28>
c00107c2:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c00107c9:	74 0f                	je     c00107da <unlockStuff()+0x28>
c00107cb:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00107d5:	e8 f6 47 00 00       	call   c0014fd0 <schedule()>
c00107da:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00107df:	48                   	dec    eax
c00107e0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00107e5:	75 01                	jne    c00107e8 <unlockStuff()+0x36>
c00107e7:	fb                   	sti    
c00107e8:	83 c4 0c             	add    esp,0xc
c00107eb:	c3                   	ret    

c00107ec <Virt::getAKernelVAS()>:
c00107ec:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c00107f1:	c3                   	ret    

c00107f2 <__not_memcpy>:
c00107f2:	57                   	push   edi
c00107f3:	56                   	push   esi
c00107f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00107fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010800:	89 c7                	mov    edi,eax
c0010802:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010804:	5e                   	pop    esi
c0010805:	5f                   	pop    edi
c0010806:	c3                   	ret    

c0010807 <KePanic(char const*)>:
c0010807:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c001080e:	e9 d9 66 00 00       	jmp    c0016eec <HalPanic(char const*)>

c0010813 <Krnl::powerThread(void*)>:
c0010813:	83 ec 0c             	sub    esp,0xc
c0010816:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001081b:	48                   	dec    eax
c001081c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010821:	75 01                	jne    c0010824 <Krnl::powerThread(void*)+0x11>
c0010823:	fb                   	sti    
c0010824:	83 ec 0c             	sub    esp,0xc
c0010827:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c001082e:	6a 0a                	push   0xa
c0010830:	e8 cb 4a 00 00       	call   c0015300 <sleep(unsigned int)>
c0010835:	83 c4 10             	add    esp,0x10
c0010838:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c001083f:	eb e3                	jmp    c0010824 <Krnl::powerThread(void*)+0x11>

c0010841 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010841:	57                   	push   edi
c0010842:	b9 09 00 00 00       	mov    ecx,0x9
c0010847:	bf 60 79 02 c0       	mov    edi,0xc0027960
c001084c:	56                   	push   esi
c001084d:	fc                   	cld    
c001084e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010852:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010854:	5e                   	pop    esi
c0010855:	5f                   	pop    edi
c0010856:	c3                   	ret    

c0010857 <Krnl::userIOReceived()>:
c0010857:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010861:	c3                   	ret    

c0010862 <Krnl::handlePowerButton()>:
c0010862:	83 ec 0c             	sub    esp,0xc
c0010865:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c001086a:	83 f8 02             	cmp    eax,0x2
c001086d:	75 10                	jne    c001087f <Krnl::handlePowerButton()+0x1d>
c001086f:	83 ec 0c             	sub    esp,0xc
c0010872:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010878:	e8 29 68 ff ff       	call   c00070a6 <Computer::shutdown()>
c001087d:	eb 11                	jmp    c0010890 <Krnl::handlePowerButton()+0x2e>
c001087f:	48                   	dec    eax
c0010880:	75 11                	jne    c0010893 <Krnl::handlePowerButton()+0x31>
c0010882:	83 ec 0c             	sub    esp,0xc
c0010885:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001088b:	e8 46 68 ff ff       	call   c00070d6 <Computer::sleep()>
c0010890:	83 c4 10             	add    esp,0x10
c0010893:	83 c4 0c             	add    esp,0xc
c0010896:	c3                   	ret    

c0010897 <Krnl::handleSleepButton()>:
c0010897:	83 ec 0c             	sub    esp,0xc
c001089a:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c001089f:	83 f8 02             	cmp    eax,0x2
c00108a2:	75 10                	jne    c00108b4 <Krnl::handleSleepButton()+0x1d>
c00108a4:	83 ec 0c             	sub    esp,0xc
c00108a7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108ad:	e8 f4 67 ff ff       	call   c00070a6 <Computer::shutdown()>
c00108b2:	eb 11                	jmp    c00108c5 <Krnl::handleSleepButton()+0x2e>
c00108b4:	48                   	dec    eax
c00108b5:	75 11                	jne    c00108c8 <Krnl::handleSleepButton()+0x31>
c00108b7:	83 ec 0c             	sub    esp,0xc
c00108ba:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108c0:	e8 11 68 ff ff       	call   c00070d6 <Computer::sleep()>
c00108c5:	83 c4 10             	add    esp,0x10
c00108c8:	83 c4 0c             	add    esp,0xc
c00108cb:	c3                   	ret    

c00108cc <Krnl::setupPowerManager()>:
c00108cc:	83 ec 0c             	sub    esp,0xc
c00108cf:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c00108d6:	68 f0 00 00 00       	push   0xf0
c00108db:	6a 00                	push   0x0
c00108dd:	68 13 08 01 c0       	push   0xc0010813
c00108e2:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00108e8:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c00108f2:	e8 99 44 00 00       	call   c0014d90 <Process::createThread(void (*)(void*), void*, int)>
c00108f7:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c0010901:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c001090b:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c0010915:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c001091f:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010929:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010933:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c001093d:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010947:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c0010951:	83 c4 1c             	add    esp,0x1c
c0010954:	c3                   	ret    

c0010955 <KeRand()>:
c0010955:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c001095f:	53                   	push   ebx
c0010960:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c001096a:	01 c1                	add    ecx,eax
c001096c:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010971:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c0010977:	01 ca                	add    edx,ecx
c0010979:	05 ef 04 b5 00       	add    eax,0xb504ef
c001097e:	83 d2 00             	adc    edx,0x0
c0010981:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010986:	0f b7 da             	movzx  ebx,dx
c0010989:	0f ac d8 0e          	shrd   eax,ebx,0xe
c001098d:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c0010993:	5b                   	pop    ebx
c0010994:	c3                   	ret    

c0010995 <KeSeedRand(unsigned int)>:
c0010995:	53                   	push   ebx
c0010996:	83 ec 08             	sub    esp,0x8
c0010999:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001099d:	e8 4e 68 00 00       	call   c00171f0 <HalGetRand()>
c00109a2:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c00109ac:	31 d8                	xor    eax,ebx
c00109ae:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00109b3:	e8 9d ff ff ff       	call   c0010955 <KeRand()>
c00109b8:	83 c4 08             	add    esp,0x8
c00109bb:	5b                   	pop    ebx
c00109bc:	eb 97                	jmp    c0010955 <KeRand()>

c00109be <KeInitRand()>:
c00109be:	83 ec 0c             	sub    esp,0xc
c00109c1:	e8 1f 66 00 00       	call   c0016fe5 <HalQueryPerformanceCounter()>
c00109c6:	0f 20 da             	mov    edx,cr3
c00109c9:	0f 22 da             	mov    cr3,edx
c00109cc:	0f 20 da             	mov    edx,cr3
c00109cf:	0f 22 da             	mov    cr3,edx
c00109d2:	0f 20 da             	mov    edx,cr3
c00109d5:	0f 22 da             	mov    cr3,edx
c00109d8:	0f 20 da             	mov    edx,cr3
c00109db:	0f 22 da             	mov    cr3,edx
c00109de:	83 ec 0c             	sub    esp,0xc
c00109e1:	35 03 8a 95 38       	xor    eax,0x38958a03
c00109e6:	50                   	push   eax
c00109e7:	e8 a9 ff ff ff       	call   c0010995 <KeSeedRand(unsigned int)>
c00109ec:	83 c4 1c             	add    esp,0x1c
c00109ef:	c3                   	ret    

c00109f0 <KeResolveCompatibilitySymbol(char*)>:
c00109f0:	83 ec 0c             	sub    esp,0xc
c00109f3:	83 ec 08             	sub    esp,0x8
c00109f6:	68 64 0b 02 c0       	push   0xc0020b64
c00109fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109ff:	e8 cc fc fe ff       	call   c00006d0 <strcmp>
c0010a04:	83 c4 10             	add    esp,0x10
c0010a07:	85 c0                	test   eax,eax
c0010a09:	0f 94 c0             	sete   al
c0010a0c:	0f b6 c0             	movzx  eax,al
c0010a0f:	85 c0                	test   eax,eax
c0010a11:	74 0d                	je     c0010a20 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010a13:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010a18:	e9 8b 01 00 00       	jmp    c0010ba8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0010a20:	83 ec 08             	sub    esp,0x8
c0010a23:	68 6d 0b 02 c0       	push   0xc0020b6d
c0010a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a2c:	e8 9f fc fe ff       	call   c00006d0 <strcmp>
c0010a31:	83 c4 10             	add    esp,0x10
c0010a34:	85 c0                	test   eax,eax
c0010a36:	0f 94 c0             	sete   al
c0010a39:	0f b6 c0             	movzx  eax,al
c0010a3c:	85 c0                	test   eax,eax
c0010a3e:	74 0c                	je     c0010a4c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010a40:	b8 70 e5 01 c0       	mov    eax,0xc001e570
c0010a45:	e9 5e 01 00 00       	jmp    c0010ba8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a4a:	66 90                	xchg   ax,ax
c0010a4c:	83 ec 08             	sub    esp,0x8
c0010a4f:	68 77 0b 02 c0       	push   0xc0020b77
c0010a54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a58:	e8 73 fc fe ff       	call   c00006d0 <strcmp>
c0010a5d:	83 c4 10             	add    esp,0x10
c0010a60:	85 c0                	test   eax,eax
c0010a62:	0f 94 c0             	sete   al
c0010a65:	0f b6 c0             	movzx  eax,al
c0010a68:	85 c0                	test   eax,eax
c0010a6a:	74 0c                	je     c0010a78 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010a6c:	b8 a4 e2 01 c0       	mov    eax,0xc001e2a4
c0010a71:	e9 32 01 00 00       	jmp    c0010ba8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a76:	66 90                	xchg   ax,ax
c0010a78:	83 ec 08             	sub    esp,0x8
c0010a7b:	68 80 0b 02 c0       	push   0xc0020b80
c0010a80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a84:	e8 47 fc fe ff       	call   c00006d0 <strcmp>
c0010a89:	83 c4 10             	add    esp,0x10
c0010a8c:	85 c0                	test   eax,eax
c0010a8e:	0f 94 c0             	sete   al
c0010a91:	0f b6 c0             	movzx  eax,al
c0010a94:	85 c0                	test   eax,eax
c0010a96:	74 0c                	je     c0010aa4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010a98:	b8 07 08 01 c0       	mov    eax,0xc0010807
c0010a9d:	e9 06 01 00 00       	jmp    c0010ba8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010aa2:	66 90                	xchg   ax,ax
c0010aa4:	83 ec 08             	sub    esp,0x8
c0010aa7:	68 93 0b 02 c0       	push   0xc0020b93
c0010aac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ab0:	e8 1b fc fe ff       	call   c00006d0 <strcmp>
c0010ab5:	83 c4 10             	add    esp,0x10
c0010ab8:	85 c0                	test   eax,eax
c0010aba:	0f 94 c0             	sete   al
c0010abd:	0f b6 c0             	movzx  eax,al
c0010ac0:	85 c0                	test   eax,eax
c0010ac2:	74 0c                	je     c0010ad0 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010ac4:	b8 8c 01 01 c0       	mov    eax,0xc001018c
c0010ac9:	e9 da 00 00 00       	jmp    c0010ba8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ace:	66 90                	xchg   ax,ax
c0010ad0:	83 ec 08             	sub    esp,0x8
c0010ad3:	68 b0 0b 02 c0       	push   0xc0020bb0
c0010ad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010adc:	e8 ef fb fe ff       	call   c00006d0 <strcmp>
c0010ae1:	83 c4 10             	add    esp,0x10
c0010ae4:	85 c0                	test   eax,eax
c0010ae6:	0f 94 c0             	sete   al
c0010ae9:	0f b6 c0             	movzx  eax,al
c0010aec:	85 c0                	test   eax,eax
c0010aee:	74 0c                	je     c0010afc <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010af0:	b8 70 e6 01 c0       	mov    eax,0xc001e670
c0010af5:	e9 ae 00 00 00       	jmp    c0010ba8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010afa:	66 90                	xchg   ax,ax
c0010afc:	83 ec 08             	sub    esp,0x8
c0010aff:	68 ba 0b 02 c0       	push   0xc0020bba
c0010b04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b08:	e8 c3 fb fe ff       	call   c00006d0 <strcmp>
c0010b0d:	83 c4 10             	add    esp,0x10
c0010b10:	85 c0                	test   eax,eax
c0010b12:	0f 94 c0             	sete   al
c0010b15:	0f b6 c0             	movzx  eax,al
c0010b18:	85 c0                	test   eax,eax
c0010b1a:	74 0c                	je     c0010b28 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010b1c:	b8 f0 e3 01 c0       	mov    eax,0xc001e3f0
c0010b21:	e9 82 00 00 00       	jmp    c0010ba8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b26:	66 90                	xchg   ax,ax
c0010b28:	83 ec 08             	sub    esp,0x8
c0010b2b:	68 c3 0b 02 c0       	push   0xc0020bc3
c0010b30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b34:	e8 97 fb fe ff       	call   c00006d0 <strcmp>
c0010b39:	83 c4 10             	add    esp,0x10
c0010b3c:	85 c0                	test   eax,eax
c0010b3e:	0f 94 c0             	sete   al
c0010b41:	0f b6 c0             	movzx  eax,al
c0010b44:	85 c0                	test   eax,eax
c0010b46:	74 08                	je     c0010b50 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010b48:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010b4d:	eb 59                	jmp    c0010ba8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b4f:	90                   	nop
c0010b50:	83 ec 08             	sub    esp,0x8
c0010b53:	68 db 0b 02 c0       	push   0xc0020bdb
c0010b58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b5c:	e8 6f fb fe ff       	call   c00006d0 <strcmp>
c0010b61:	83 c4 10             	add    esp,0x10
c0010b64:	85 c0                	test   eax,eax
c0010b66:	0f 94 c0             	sete   al
c0010b69:	0f b6 c0             	movzx  eax,al
c0010b6c:	85 c0                	test   eax,eax
c0010b6e:	74 08                	je     c0010b78 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010b70:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010b75:	eb 31                	jmp    c0010ba8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b77:	90                   	nop
c0010b78:	83 ec 08             	sub    esp,0x8
c0010b7b:	68 e8 0b 02 c0       	push   0xc0020be8
c0010b80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b84:	e8 47 fb fe ff       	call   c00006d0 <strcmp>
c0010b89:	83 c4 10             	add    esp,0x10
c0010b8c:	85 c0                	test   eax,eax
c0010b8e:	0f 94 c0             	sete   al
c0010b91:	0f b6 c0             	movzx  eax,al
c0010b94:	85 c0                	test   eax,eax
c0010b96:	74 08                	je     c0010ba0 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010b98:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010b9d:	eb 09                	jmp    c0010ba8 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b9f:	90                   	nop
c0010ba0:	b8 00 00 00 00       	mov    eax,0x0
c0010ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ba8:	83 c4 0c             	add    esp,0xc
c0010bab:	c3                   	ret    

c0010bac <KiSigKill(int)>:
c0010bac:	83 ec 0c             	sub    esp,0xc
c0010baf:	6a 00                	push   0x0
c0010bb1:	6a 00                	push   0x0
c0010bb3:	6a ff                	push   0xffffffff
c0010bb5:	6a 01                	push   0x1
c0010bb7:	e8 96 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010bbc:	83 c4 1c             	add    esp,0x1c
c0010bbf:	c3                   	ret    

c0010bc0 <KiDefaultSignalHandlerIgnore(int)>:
c0010bc0:	c3                   	ret    

c0010bc1 <KiDefaultSignalHandlerPause(int)>:
c0010bc1:	57                   	push   edi
c0010bc2:	b9 07 00 00 00       	mov    ecx,0x7
c0010bc7:	56                   	push   esi
c0010bc8:	be 31 0c 02 c0       	mov    esi,0xc0020c31
c0010bcd:	83 ec 24             	sub    esp,0x24
c0010bd0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010bd4:	fc                   	cld    
c0010bd5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010bd7:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010bdb:	50                   	push   eax
c0010bdc:	6a 00                	push   0x0
c0010bde:	6a 00                	push   0x0
c0010be0:	6a 27                	push   0x27
c0010be2:	e8 6b 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010be7:	83 c4 34             	add    esp,0x34
c0010bea:	5e                   	pop    esi
c0010beb:	5f                   	pop    edi
c0010bec:	c3                   	ret    

c0010bed <KiDefaultSignalHandlerResume(int)>:
c0010bed:	57                   	push   edi
c0010bee:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010bf3:	56                   	push   esi
c0010bf4:	be 4d 0c 02 c0       	mov    esi,0xc0020c4d
c0010bf9:	83 ec 24             	sub    esp,0x24
c0010bfc:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010c00:	fc                   	cld    
c0010c01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c03:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010c07:	50                   	push   eax
c0010c08:	6a 00                	push   0x0
c0010c0a:	6a 00                	push   0x0
c0010c0c:	6a 27                	push   0x27
c0010c0e:	e8 3f 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c13:	83 c4 34             	add    esp,0x34
c0010c16:	5e                   	pop    esi
c0010c17:	5f                   	pop    edi
c0010c18:	c3                   	ret    

c0010c19 <KeDeinitSignals(SigHandlerBlock*)>:
c0010c19:	e9 21 6e ff ff       	jmp    c0007a3f <free>

c0010c1e <KeInitSignals()>:
c0010c1e:	53                   	push   ebx
c0010c1f:	83 ec 14             	sub    esp,0x14
c0010c22:	68 c8 00 00 00       	push   0xc8
c0010c27:	e8 03 6e ff ff       	call   c0007a2f <malloc>
c0010c2c:	83 c4 0c             	add    esp,0xc
c0010c2f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010c39:	89 c3                	mov    ebx,eax
c0010c3b:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010c45:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010c4b:	6a 20                	push   0x20
c0010c4d:	6a 00                	push   0x0
c0010c4f:	50                   	push   eax
c0010c50:	e8 9b f8 fe ff       	call   c00004f0 <memset>
c0010c55:	83 c4 0c             	add    esp,0xc
c0010c58:	6a 44                	push   0x44
c0010c5a:	6a 00                	push   0x0
c0010c5c:	53                   	push   ebx
c0010c5d:	e8 8e f8 fe ff       	call   c00004f0 <memset>
c0010c62:	83 c4 18             	add    esp,0x18
c0010c65:	89 d8                	mov    eax,ebx
c0010c67:	5b                   	pop    ebx
c0010c68:	c3                   	ret    

c0010c69 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010c69:	53                   	push   ebx
c0010c6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c6e:	b8 01 00 00 00       	mov    eax,0x1
c0010c73:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c77:	83 f9 10             	cmp    ecx,0x10
c0010c7a:	7f 21                	jg     c0010c9d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c80:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010c83:	89 03                	mov    DWORD PTR [ebx],eax
c0010c85:	b8 01 00 00 00       	mov    eax,0x1
c0010c8a:	d3 e0                	shl    eax,cl
c0010c8c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010c90:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010c93:	31 c0                	xor    eax,eax
c0010c95:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010c9d:	5b                   	pop    ebx
c0010c9e:	c3                   	ret    

c0010c9f <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010c9f:	55                   	push   ebp
c0010ca0:	57                   	push   edi
c0010ca1:	bf 08 00 00 00       	mov    edi,0x8
c0010ca6:	56                   	push   esi
c0010ca7:	53                   	push   ebx
c0010ca8:	83 ec 18             	sub    esp,0x18
c0010cab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010caf:	68 6a 0c 02 c0       	push   0xc0020c6a
c0010cb4:	e8 e8 9b ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0010cb9:	83 c4 10             	add    esp,0x10
c0010cbc:	31 c9                	xor    ecx,ecx
c0010cbe:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010cc4:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010ccb:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010ccf:	99                   	cdq    
c0010cd0:	f7 ff                	idiv   edi
c0010cd2:	8d 42 24             	lea    eax,[edx+0x24]
c0010cd5:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010cd9:	85 f6                	test   esi,esi
c0010cdb:	75 1a                	jne    c0010cf7 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010cdd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010ce1:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010ce5:	50                   	push   eax
c0010ce6:	50                   	push   eax
c0010ce7:	52                   	push   edx
c0010ce8:	68 7b 0c 02 c0       	push   0xc0020c7b
c0010ced:	e8 af 9b ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0010cf2:	83 c4 10             	add    esp,0x10
c0010cf5:	eb 1b                	jmp    c0010d12 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010cf7:	41                   	inc    ecx
c0010cf8:	83 f9 08             	cmp    ecx,0x8
c0010cfb:	75 ce                	jne    c0010ccb <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010cfd:	83 ec 0c             	sub    esp,0xc
c0010d00:	be 01 00 00 00       	mov    esi,0x1
c0010d05:	68 9c 0c 02 c0       	push   0xc0020c9c
c0010d0a:	e8 92 9b ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0010d0f:	83 c4 10             	add    esp,0x10
c0010d12:	83 c4 0c             	add    esp,0xc
c0010d15:	89 f0                	mov    eax,esi
c0010d17:	5b                   	pop    ebx
c0010d18:	5e                   	pop    esi
c0010d19:	5f                   	pop    edi
c0010d1a:	5d                   	pop    ebp
c0010d1b:	c3                   	ret    

c0010d1c <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010d1c:	55                   	push   ebp
c0010d1d:	57                   	push   edi
c0010d1e:	56                   	push   esi
c0010d1f:	53                   	push   ebx
c0010d20:	51                   	push   ecx
c0010d21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d25:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010d2c:	0f 84 af 00 00 00    	je     c0010de1 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010d32:	31 c9                	xor    ecx,ecx
c0010d34:	bf 08 00 00 00       	mov    edi,0x8
c0010d39:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010d3f:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010d42:	99                   	cdq    
c0010d43:	f7 ff                	idiv   edi
c0010d45:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010d4c:	85 ed                	test   ebp,ebp
c0010d4e:	0f 84 9e 00 00 00    	je     c0010df2 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010d54:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010d5a:	89 e9                	mov    ecx,ebp
c0010d5c:	bf 01 00 00 00       	mov    edi,0x1
c0010d61:	d3 e7                	shl    edi,cl
c0010d63:	31 c9                	xor    ecx,ecx
c0010d65:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d68:	b8 01 00 00 00       	mov    eax,0x1
c0010d6d:	d3 e0                	shl    eax,cl
c0010d6f:	85 04 24             	test   DWORD PTR [esp],eax
c0010d72:	74 06                	je     c0010d7a <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010d74:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010d78:	75 67                	jne    c0010de1 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010d7a:	41                   	inc    ecx
c0010d7b:	83 f9 11             	cmp    ecx,0x11
c0010d7e:	75 e8                	jne    c0010d68 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010d80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010d83:	46                   	inc    esi
c0010d84:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010d8a:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010d95:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010d9c:	09 f8                	or     eax,edi
c0010d9e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010da4:	31 c0                	xor    eax,eax
c0010da6:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010dae:	74 09                	je     c0010db9 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010db0:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010db7:	eb 06                	jmp    c0010dbf <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010db9:	40                   	inc    eax
c0010dba:	83 f8 08             	cmp    eax,0x8
c0010dbd:	75 e7                	jne    c0010da6 <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c0010dbf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010dc3:	83 fd 09             	cmp    ebp,0x9
c0010dc6:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010dc9:	89 2a                	mov    DWORD PTR [edx],ebp
c0010dcb:	75 07                	jne    c0010dd4 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c0010dcd:	b8 ac 0b 01 c0       	mov    eax,0xc0010bac
c0010dd2:	eb 31                	jmp    c0010e05 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010dd4:	83 f8 01             	cmp    eax,0x1
c0010dd7:	75 0c                	jne    c0010de5 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c0010dd9:	f7 d7                	not    edi
c0010ddb:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010de1:	31 c0                	xor    eax,eax
c0010de3:	eb 20                	jmp    c0010e05 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010de5:	85 c0                	test   eax,eax
c0010de7:	75 1c                	jne    c0010e05 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010de9:	8b 04 ad 40 20 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffddfc0]
c0010df0:	eb 13                	jmp    c0010e05 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010df2:	41                   	inc    ecx
c0010df3:	46                   	inc    esi
c0010df4:	83 f9 08             	cmp    ecx,0x8
c0010df7:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010dfd:	0f 85 36 ff ff ff    	jne    c0010d39 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010e03:	eb dc                	jmp    c0010de1 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e05:	5a                   	pop    edx
c0010e06:	5b                   	pop    ebx
c0010e07:	5e                   	pop    esi
c0010e08:	5f                   	pop    edi
c0010e09:	5d                   	pop    ebp
c0010e0a:	c3                   	ret    

c0010e0b <KiCheckSignalZ>:
c0010e0b:	83 ec 10             	sub    esp,0x10
c0010e0e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010e12:	50                   	push   eax
c0010e13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e18:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e1b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010e21:	e8 f6 fe ff ff       	call   c0010d1c <KeCheckSignal(SigHandlerBlock*, int*)>
c0010e26:	5a                   	pop    edx
c0010e27:	31 d2                	xor    edx,edx
c0010e29:	85 c0                	test   eax,eax
c0010e2b:	59                   	pop    ecx
c0010e2c:	74 19                	je     c0010e47 <KiCheckSignalZ+0x3c>
c0010e2e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010e34:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010e37:	89 02                	mov    DWORD PTR [edx],eax
c0010e39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e3d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010e44:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010e47:	89 d0                	mov    eax,edx
c0010e49:	83 c4 10             	add    esp,0x10
c0010e4c:	c3                   	ret    

c0010e4d <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010e4d:	56                   	push   esi
c0010e4e:	53                   	push   ebx
c0010e4f:	bb 01 00 00 00       	mov    ebx,0x1
c0010e54:	52                   	push   edx
c0010e55:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010e59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e5d:	d3 e3                	shl    ebx,cl
c0010e5f:	83 f9 10             	cmp    ecx,0x10
c0010e62:	7f 08                	jg     c0010e6c <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010e64:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010e6a:	75 10                	jne    c0010e7c <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010e6c:	83 ec 0c             	sub    esp,0xc
c0010e6f:	68 ad 0c 02 c0       	push   0xc0020cad
c0010e74:	e8 8e f9 ff ff       	call   c0010807 <KePanic(char const*)>
c0010e79:	83 c4 10             	add    esp,0x10
c0010e7c:	f7 d3                	not    ebx
c0010e7e:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010e84:	58                   	pop    eax
c0010e85:	5b                   	pop    ebx
c0010e86:	5e                   	pop    esi
c0010e87:	c3                   	ret    

c0010e88 <KiFinishSignalZ>:
c0010e88:	53                   	push   ebx
c0010e89:	83 ec 10             	sub    esp,0x10
c0010e8c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e90:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010e93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e98:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e9b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010ea1:	e8 a7 ff ff ff       	call   c0010e4d <KeCompleteSignal(SigHandlerBlock*, int)>
c0010ea6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010eac:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010eb3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010eba:	83 c4 18             	add    esp,0x18
c0010ebd:	5b                   	pop    ebx
c0010ebe:	c3                   	ret    

c0010ebf <SysSeekDir(regs*)>:
c0010ebf:	31 c0                	xor    eax,eax
c0010ec1:	31 d2                	xor    edx,edx
c0010ec3:	c3                   	ret    

c0010ec4 <SysTellDir(regs*)>:
c0010ec4:	31 c0                	xor    eax,eax
c0010ec6:	31 d2                	xor    edx,edx
c0010ec8:	c3                   	ret    

c0010ec9 <SysVerify(regs*)>:
c0010ec9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ecd:	31 d2                	xor    edx,edx
c0010ecf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010ed2:	c3                   	ret    

c0010ed3 <SysGetArgc(regs*)>:
c0010ed3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ed8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010edb:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010ee1:	89 c2                	mov    edx,eax
c0010ee3:	c1 fa 1f             	sar    edx,0x1f
c0010ee6:	c3                   	ret    

c0010ee7 <SysTTYName(regs*)>:
c0010ee7:	b8 01 00 00 00       	mov    eax,0x1
c0010eec:	31 d2                	xor    edx,edx
c0010eee:	c3                   	ret    

c0010eef <SysFormatDisk(regs*)>:
c0010eef:	56                   	push   esi
c0010ef0:	53                   	push   ebx
c0010ef1:	83 ec 04             	sub    esp,0x4
c0010ef4:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010efa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010efe:	eb 2a                	jmp    c0010f2a <SysFormatDisk(regs*)+0x3b>
c0010f00:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010f03:	83 ec 0c             	sub    esp,0xc
c0010f06:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010f09:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f0b:	51                   	push   ecx
c0010f0c:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010f0f:	51                   	push   ecx
c0010f10:	50                   	push   eax
c0010f11:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0010f18:	50                   	push   eax
c0010f19:	53                   	push   ebx
c0010f1a:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010f1d:	83 c4 20             	add    esp,0x20
c0010f20:	83 f8 08             	cmp    eax,0x8
c0010f23:	89 c1                	mov    ecx,eax
c0010f25:	75 14                	jne    c0010f3b <SysFormatDisk(regs*)+0x4c>
c0010f27:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010f2a:	85 db                	test   ebx,ebx
c0010f2c:	75 d2                	jne    c0010f00 <SysFormatDisk(regs*)+0x11>
c0010f2e:	b8 03 00 00 00       	mov    eax,0x3
c0010f33:	31 d2                	xor    edx,edx
c0010f35:	83 c4 04             	add    esp,0x4
c0010f38:	5b                   	pop    ebx
c0010f39:	5e                   	pop    esi
c0010f3a:	c3                   	ret    
c0010f3b:	31 c0                	xor    eax,eax
c0010f3d:	31 d2                	xor    edx,edx
c0010f3f:	85 c9                	test   ecx,ecx
c0010f41:	74 f2                	je     c0010f35 <SysFormatDisk(regs*)+0x46>
c0010f43:	31 d2                	xor    edx,edx
c0010f45:	83 f9 09             	cmp    ecx,0x9
c0010f48:	b8 01 00 00 00       	mov    eax,0x1
c0010f4d:	74 e6                	je     c0010f35 <SysFormatDisk(regs*)+0x46>
c0010f4f:	b8 02 00 00 00       	mov    eax,0x2
c0010f54:	eb dd                	jmp    c0010f33 <SysFormatDisk(regs*)+0x44>

c0010f56 <SysSetDiskVolumeLabel(regs*)>:
c0010f56:	57                   	push   edi
c0010f57:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010f5c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f61:	56                   	push   esi
c0010f62:	53                   	push   ebx
c0010f63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f67:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010f6a:	83 f9 19             	cmp    ecx,0x19
c0010f6d:	77 2d                	ja     c0010f9c <SysSetDiskVolumeLabel(regs*)+0x46>
c0010f6f:	8b 34 8d 20 74 02 c0 	mov    esi,DWORD PTR [ecx*4-0x3ffd8be0]
c0010f76:	85 f6                	test   esi,esi
c0010f78:	74 22                	je     c0010f9c <SysSetDiskVolumeLabel(regs*)+0x46>
c0010f7a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0010f7d:	85 ff                	test   edi,edi
c0010f7f:	74 1b                	je     c0010f9c <SysSetDiskVolumeLabel(regs*)+0x46>
c0010f81:	8b 9e 74 01 00 00    	mov    ebx,DWORD PTR [esi+0x174]
c0010f87:	85 db                	test   ebx,ebx
c0010f89:	74 11                	je     c0010f9c <SysSetDiskVolumeLabel(regs*)+0x46>
c0010f8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f8d:	57                   	push   edi
c0010f8e:	51                   	push   ecx
c0010f8f:	56                   	push   esi
c0010f90:	53                   	push   ebx
c0010f91:	ff 50 58             	call   DWORD PTR [eax+0x58]
c0010f94:	83 c4 10             	add    esp,0x10
c0010f97:	89 c2                	mov    edx,eax
c0010f99:	c1 fa 1f             	sar    edx,0x1f
c0010f9c:	5b                   	pop    ebx
c0010f9d:	5e                   	pop    esi
c0010f9e:	5f                   	pop    edi
c0010f9f:	c3                   	ret    

c0010fa0 <SysGetDiskVolumeLabel(regs*)>:
c0010fa0:	55                   	push   ebp
c0010fa1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010fa6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fab:	57                   	push   edi
c0010fac:	56                   	push   esi
c0010fad:	53                   	push   ebx
c0010fae:	83 ec 0c             	sub    esp,0xc
c0010fb1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010fb5:	8b 4f 20             	mov    ecx,DWORD PTR [edi+0x20]
c0010fb8:	83 f9 19             	cmp    ecx,0x19
c0010fbb:	77 38                	ja     c0010ff5 <SysGetDiskVolumeLabel(regs*)+0x55>
c0010fbd:	8b 34 8d 20 74 02 c0 	mov    esi,DWORD PTR [ecx*4-0x3ffd8be0]
c0010fc4:	85 f6                	test   esi,esi
c0010fc6:	74 2d                	je     c0010ff5 <SysGetDiskVolumeLabel(regs*)+0x55>
c0010fc8:	8b 5f 24             	mov    ebx,DWORD PTR [edi+0x24]
c0010fcb:	85 db                	test   ebx,ebx
c0010fcd:	74 26                	je     c0010ff5 <SysGetDiskVolumeLabel(regs*)+0x55>
c0010fcf:	8b 6f 28             	mov    ebp,DWORD PTR [edi+0x28]
c0010fd2:	85 ed                	test   ebp,ebp
c0010fd4:	74 1f                	je     c0010ff5 <SysGetDiskVolumeLabel(regs*)+0x55>
c0010fd6:	8b be 74 01 00 00    	mov    edi,DWORD PTR [esi+0x174]
c0010fdc:	85 ff                	test   edi,edi
c0010fde:	74 15                	je     c0010ff5 <SysGetDiskVolumeLabel(regs*)+0x55>
c0010fe0:	8b 07                	mov    eax,DWORD PTR [edi]
c0010fe2:	83 ec 0c             	sub    esp,0xc
c0010fe5:	55                   	push   ebp
c0010fe6:	53                   	push   ebx
c0010fe7:	51                   	push   ecx
c0010fe8:	56                   	push   esi
c0010fe9:	57                   	push   edi
c0010fea:	ff 50 54             	call   DWORD PTR [eax+0x54]
c0010fed:	83 c4 20             	add    esp,0x20
c0010ff0:	89 c2                	mov    edx,eax
c0010ff2:	c1 fa 1f             	sar    edx,0x1f
c0010ff5:	83 c4 0c             	add    esp,0xc
c0010ff8:	5b                   	pop    ebx
c0010ff9:	5e                   	pop    esi
c0010ffa:	5f                   	pop    edi
c0010ffb:	5d                   	pop    ebp
c0010ffc:	c3                   	ret    

c0010ffd <SysShutdown(regs*)>:
c0010ffd:	57                   	push   edi
c0010ffe:	56                   	push   esi
c0010fff:	83 ec 04             	sub    esp,0x4
c0011002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011006:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011009:	85 c0                	test   eax,eax
c001100b:	74 1e                	je     c001102b <SysShutdown(regs*)+0x2e>
c001100d:	83 f8 01             	cmp    eax,0x1
c0011010:	74 5f                	je     c0011071 <SysShutdown(regs*)+0x74>
c0011012:	83 f8 02             	cmp    eax,0x2
c0011015:	be ff ff ff ff       	mov    esi,0xffffffff
c001101a:	bf ff ff ff ff       	mov    edi,0xffffffff
c001101f:	74 32                	je     c0011053 <SysShutdown(regs*)+0x56>
c0011021:	83 c4 04             	add    esp,0x4
c0011024:	89 f0                	mov    eax,esi
c0011026:	89 fa                	mov    edx,edi
c0011028:	5e                   	pop    esi
c0011029:	5f                   	pop    edi
c001102a:	c3                   	ret    
c001102b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011030:	be ff ff ff ff       	mov    esi,0xffffffff
c0011035:	bf ff ff ff ff       	mov    edi,0xffffffff
c001103a:	8b 10                	mov    edx,DWORD PTR [eax]
c001103c:	6a 00                	push   0x0
c001103e:	6a 00                	push   0x0
c0011040:	6a 00                	push   0x0
c0011042:	50                   	push   eax
c0011043:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011046:	83 c4 10             	add    esp,0x10
c0011049:	89 f0                	mov    eax,esi
c001104b:	89 fa                	mov    edx,edi
c001104d:	83 c4 04             	add    esp,0x4
c0011050:	5e                   	pop    esi
c0011051:	5f                   	pop    edi
c0011052:	c3                   	ret    
c0011053:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011058:	8b 10                	mov    edx,DWORD PTR [eax]
c001105a:	6a 00                	push   0x0
c001105c:	6a 00                	push   0x0
c001105e:	6a 01                	push   0x1
c0011060:	50                   	push   eax
c0011061:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011064:	83 c4 10             	add    esp,0x10
c0011067:	89 f0                	mov    eax,esi
c0011069:	89 fa                	mov    edx,edi
c001106b:	83 c4 04             	add    esp,0x4
c001106e:	5e                   	pop    esi
c001106f:	5f                   	pop    edi
c0011070:	c3                   	ret    
c0011071:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c0011076:	31 f6                	xor    esi,esi
c0011078:	31 ff                	xor    edi,edi
c001107a:	85 c0                	test   eax,eax
c001107c:	74 a3                	je     c0011021 <SysShutdown(regs*)+0x24>
c001107e:	ff d0                	call   eax
c0011080:	83 c4 04             	add    esp,0x4
c0011083:	89 f0                	mov    eax,esi
c0011085:	89 fa                	mov    edx,edi
c0011087:	5e                   	pop    esi
c0011088:	5f                   	pop    edi
c0011089:	c3                   	ret    

c001108a <SysRealpath(regs*)>:
c001108a:	56                   	push   esi
c001108b:	31 d2                	xor    edx,edx
c001108d:	b8 01 00 00 00       	mov    eax,0x1
c0011092:	53                   	push   ebx
c0011093:	83 ec 04             	sub    esp,0x4
c0011096:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001109a:	8b 71 28             	mov    esi,DWORD PTR [ecx+0x28]
c001109d:	85 f6                	test   esi,esi
c001109f:	74 07                	je     c00110a8 <SysRealpath(regs*)+0x1e>
c00110a1:	8b 59 24             	mov    ebx,DWORD PTR [ecx+0x24]
c00110a4:	85 db                	test   ebx,ebx
c00110a6:	75 06                	jne    c00110ae <SysRealpath(regs*)+0x24>
c00110a8:	83 c4 04             	add    esp,0x4
c00110ab:	5b                   	pop    ebx
c00110ac:	5e                   	pop    esi
c00110ad:	c3                   	ret    
c00110ae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00110b4:	83 ec 04             	sub    esp,0x4
c00110b7:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00110ba:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00110c0:	51                   	push   ecx
c00110c1:	56                   	push   esi
c00110c2:	53                   	push   ebx
c00110c3:	e8 a6 9b ff ff       	call   c000ac6e <Fs::standardiseFiles(char*, char const*, char const*)>
c00110c8:	83 c4 10             	add    esp,0x10
c00110cb:	31 c0                	xor    eax,eax
c00110cd:	31 d2                	xor    edx,edx
c00110cf:	83 c4 04             	add    esp,0x4
c00110d2:	5b                   	pop    ebx
c00110d3:	5e                   	pop    esi
c00110d4:	c3                   	ret    

c00110d5 <SysReadDir(regs*)>:
c00110d5:	53                   	push   ebx
c00110d6:	83 ec 18             	sub    esp,0x18
c00110d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00110dd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00110e0:	83 f8 02             	cmp    eax,0x2
c00110e3:	76 53                	jbe    c0011138 <SysReadDir(regs*)+0x63>
c00110e5:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00110ec:	77 56                	ja     c0011144 <SysReadDir(regs*)+0x6f>
c00110ee:	83 ec 0c             	sub    esp,0xc
c00110f1:	50                   	push   eax
c00110f2:	e8 1c 83 ff ff       	call   c0009413 <getFromFileDescriptor(int)>
c00110f7:	83 c4 10             	add    esp,0x10
c00110fa:	85 c0                	test   eax,eax
c00110fc:	74 46                	je     c0011144 <SysReadDir(regs*)+0x6f>
c00110fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011106:	83 ec 0c             	sub    esp,0xc
c0011109:	8b 10                	mov    edx,DWORD PTR [eax]
c001110b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001110f:	51                   	push   ecx
c0011110:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011113:	51                   	push   ecx
c0011114:	6a 00                	push   0x0
c0011116:	68 10 01 00 00       	push   0x110
c001111b:	50                   	push   eax
c001111c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001111f:	83 c4 20             	add    esp,0x20
c0011122:	31 d2                	xor    edx,edx
c0011124:	89 c1                	mov    ecx,eax
c0011126:	31 c0                	xor    eax,eax
c0011128:	85 c9                	test   ecx,ecx
c001112a:	74 22                	je     c001114e <SysReadDir(regs*)+0x79>
c001112c:	31 d2                	xor    edx,edx
c001112e:	83 f9 07             	cmp    ecx,0x7
c0011131:	b8 02 00 00 00       	mov    eax,0x2
c0011136:	75 16                	jne    c001114e <SysReadDir(regs*)+0x79>
c0011138:	83 c4 18             	add    esp,0x18
c001113b:	b8 01 00 00 00       	mov    eax,0x1
c0011140:	31 d2                	xor    edx,edx
c0011142:	5b                   	pop    ebx
c0011143:	c3                   	ret    
c0011144:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011149:	ba ff ff ff ff       	mov    edx,0xffffffff
c001114e:	83 c4 18             	add    esp,0x18
c0011151:	5b                   	pop    ebx
c0011152:	c3                   	ret    

c0011153 <SysIsATTY(regs*)>:
c0011153:	83 ec 0c             	sub    esp,0xc
c0011156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001115a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001115d:	83 f8 02             	cmp    eax,0x2
c0011160:	76 07                	jbe    c0011169 <SysIsATTY(regs*)+0x16>
c0011162:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011167:	75 26                	jne    c001118f <SysIsATTY(regs*)+0x3c>
c0011169:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001116e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011171:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011177:	85 c0                	test   eax,eax
c0011179:	74 24                	je     c001119f <SysIsATTY(regs*)+0x4c>
c001117b:	8b 10                	mov    edx,DWORD PTR [eax]
c001117d:	83 ec 0c             	sub    esp,0xc
c0011180:	50                   	push   eax
c0011181:	ff 12                	call   DWORD PTR [edx]
c0011183:	83 c4 10             	add    esp,0x10
c0011186:	31 d2                	xor    edx,edx
c0011188:	0f b6 c0             	movzx  eax,al
c001118b:	83 c4 0c             	add    esp,0xc
c001118e:	c3                   	ret    
c001118f:	83 ec 0c             	sub    esp,0xc
c0011192:	50                   	push   eax
c0011193:	e8 7b 82 ff ff       	call   c0009413 <getFromFileDescriptor(int)>
c0011198:	83 c4 10             	add    esp,0x10
c001119b:	85 c0                	test   eax,eax
c001119d:	75 dc                	jne    c001117b <SysIsATTY(regs*)+0x28>
c001119f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111a9:	83 c4 0c             	add    esp,0xc
c00111ac:	c3                   	ret    

c00111ad <SysSeek(regs*)>:
c00111ad:	56                   	push   esi
c00111ae:	53                   	push   ebx
c00111af:	83 ec 04             	sub    esp,0x4
c00111b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111b6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00111b9:	8d 71 fd             	lea    esi,[ecx-0x3]
c00111bc:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c00111c2:	77 33                	ja     c00111f7 <SysSeek(regs*)+0x4a>
c00111c4:	83 ec 0c             	sub    esp,0xc
c00111c7:	51                   	push   ecx
c00111c8:	e8 46 82 ff ff       	call   c0009413 <getFromFileDescriptor(int)>
c00111cd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00111d0:	83 c4 0c             	add    esp,0xc
c00111d3:	31 db                	xor    ebx,ebx
c00111d5:	53                   	push   ebx
c00111d6:	51                   	push   ecx
c00111d7:	50                   	push   eax
c00111d8:	e8 e7 9d ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c00111dd:	83 c4 10             	add    esp,0x10
c00111e0:	85 c0                	test   eax,eax
c00111e2:	0f 95 c0             	setne  al
c00111e5:	31 d2                	xor    edx,edx
c00111e7:	0f b6 c0             	movzx  eax,al
c00111ea:	f7 d8                	neg    eax
c00111ec:	83 d2 00             	adc    edx,0x0
c00111ef:	83 c4 04             	add    esp,0x4
c00111f2:	f7 da                	neg    edx
c00111f4:	5b                   	pop    ebx
c00111f5:	5e                   	pop    esi
c00111f6:	c3                   	ret    
c00111f7:	83 c4 04             	add    esp,0x4
c00111fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011204:	5b                   	pop    ebx
c0011205:	5e                   	pop    esi
c0011206:	c3                   	ret    

c0011207 <SysTell(regs*)>:
c0011207:	53                   	push   ebx
c0011208:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001120d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011212:	83 ec 08             	sub    esp,0x8
c0011215:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011219:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001121c:	83 f9 02             	cmp    ecx,0x2
c001121f:	76 1c                	jbe    c001123d <SysTell(regs*)+0x36>
c0011221:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011227:	76 19                	jbe    c0011242 <SysTell(regs*)+0x3b>
c0011229:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001122c:	31 d2                	xor    edx,edx
c001122e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011234:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001123b:	31 c0                	xor    eax,eax
c001123d:	83 c4 08             	add    esp,0x8
c0011240:	5b                   	pop    ebx
c0011241:	c3                   	ret    
c0011242:	83 ec 0c             	sub    esp,0xc
c0011245:	51                   	push   ecx
c0011246:	e8 c8 81 ff ff       	call   c0009413 <getFromFileDescriptor(int)>
c001124b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001124e:	5a                   	pop    edx
c001124f:	59                   	pop    ecx
c0011250:	53                   	push   ebx
c0011251:	50                   	push   eax
c0011252:	e8 c3 9d ff ff       	call   c000b01a <File::tell(unsigned long long*)>
c0011257:	83 c4 10             	add    esp,0x10
c001125a:	85 c0                	test   eax,eax
c001125c:	0f 95 c0             	setne  al
c001125f:	31 d2                	xor    edx,edx
c0011261:	0f b6 c0             	movzx  eax,al
c0011264:	f7 d8                	neg    eax
c0011266:	83 d2 00             	adc    edx,0x0
c0011269:	83 c4 08             	add    esp,0x8
c001126c:	f7 da                	neg    edx
c001126e:	5b                   	pop    ebx
c001126f:	c3                   	ret    

c0011270 <SysSize(regs*)>:
c0011270:	53                   	push   ebx
c0011271:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011276:	ba ff ff ff ff       	mov    edx,0xffffffff
c001127b:	83 ec 18             	sub    esp,0x18
c001127e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011282:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011285:	83 f9 02             	cmp    ecx,0x2
c0011288:	76 1c                	jbe    c00112a6 <SysSize(regs*)+0x36>
c001128a:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011290:	76 19                	jbe    c00112ab <SysSize(regs*)+0x3b>
c0011292:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011295:	31 d2                	xor    edx,edx
c0011297:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001129d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112a4:	31 c0                	xor    eax,eax
c00112a6:	83 c4 18             	add    esp,0x18
c00112a9:	5b                   	pop    ebx
c00112aa:	c3                   	ret    
c00112ab:	83 ec 0c             	sub    esp,0xc
c00112ae:	51                   	push   ecx
c00112af:	e8 5f 81 ff ff       	call   c0009413 <getFromFileDescriptor(int)>
c00112b4:	83 c4 0c             	add    esp,0xc
c00112b7:	8d 54 24 13          	lea    edx,[esp+0x13]
c00112bb:	52                   	push   edx
c00112bc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00112bf:	52                   	push   edx
c00112c0:	50                   	push   eax
c00112c1:	e8 ec 9e ff ff       	call   c000b1b2 <File::stat(unsigned long long*, bool*)>
c00112c6:	83 c4 10             	add    esp,0x10
c00112c9:	85 c0                	test   eax,eax
c00112cb:	0f 95 c0             	setne  al
c00112ce:	31 d2                	xor    edx,edx
c00112d0:	0f b6 c0             	movzx  eax,al
c00112d3:	f7 d8                	neg    eax
c00112d5:	83 d2 00             	adc    edx,0x0
c00112d8:	83 c4 18             	add    esp,0x18
c00112db:	f7 da                	neg    edx
c00112dd:	5b                   	pop    ebx
c00112de:	c3                   	ret    

c00112df <SysSizeFromFilename(regs*)>:
c00112df:	57                   	push   edi
c00112e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112e5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112ea:	56                   	push   esi
c00112eb:	53                   	push   ebx
c00112ec:	83 ec 10             	sub    esp,0x10
c00112ef:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00112f3:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00112f6:	83 fb 02             	cmp    ebx,0x2
c00112f9:	76 1c                	jbe    c0011317 <SysSizeFromFilename(regs*)+0x38>
c00112fb:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011301:	76 1b                	jbe    c001131e <SysSizeFromFilename(regs*)+0x3f>
c0011303:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011306:	31 d2                	xor    edx,edx
c0011308:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001130e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011315:	31 c0                	xor    eax,eax
c0011317:	83 c4 10             	add    esp,0x10
c001131a:	5b                   	pop    ebx
c001131b:	5e                   	pop    esi
c001131c:	5f                   	pop    edi
c001131d:	c3                   	ret    
c001131e:	83 ec 0c             	sub    esp,0xc
c0011321:	68 14 01 00 00       	push   0x114
c0011326:	e8 04 67 ff ff       	call   c0007a2f <malloc>
c001132b:	83 c4 0c             	add    esp,0xc
c001132e:	89 c7                	mov    edi,eax
c0011330:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011335:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011338:	50                   	push   eax
c0011339:	53                   	push   ebx
c001133a:	57                   	push   edi
c001133b:	e8 0a 9b ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c0011340:	83 c4 0c             	add    esp,0xc
c0011343:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011347:	50                   	push   eax
c0011348:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c001134b:	52                   	push   edx
c001134c:	57                   	push   edi
c001134d:	e8 60 9e ff ff       	call   c000b1b2 <File::stat(unsigned long long*, bool*)>
c0011352:	83 c4 10             	add    esp,0x10
c0011355:	85 ff                	test   edi,edi
c0011357:	89 c3                	mov    ebx,eax
c0011359:	74 0c                	je     c0011367 <SysSizeFromFilename(regs*)+0x88>
c001135b:	8b 07                	mov    eax,DWORD PTR [edi]
c001135d:	83 ec 0c             	sub    esp,0xc
c0011360:	57                   	push   edi
c0011361:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011364:	83 c4 10             	add    esp,0x10
c0011367:	31 c0                	xor    eax,eax
c0011369:	85 db                	test   ebx,ebx
c001136b:	0f 95 c0             	setne  al
c001136e:	31 d2                	xor    edx,edx
c0011370:	f7 d8                	neg    eax
c0011372:	83 d2 00             	adc    edx,0x0
c0011375:	83 c4 10             	add    esp,0x10
c0011378:	5b                   	pop    ebx
c0011379:	f7 da                	neg    edx
c001137b:	5e                   	pop    esi
c001137c:	5f                   	pop    edi
c001137d:	c3                   	ret    

c001137e <SysClose(regs*)>:
c001137e:	53                   	push   ebx
c001137f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011384:	83 ec 08             	sub    esp,0x8
c0011387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001138b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001138e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011393:	83 f9 02             	cmp    ecx,0x2
c0011396:	76 3d                	jbe    c00113d5 <SysClose(regs*)+0x57>
c0011398:	8d 99 00 01 00 f0    	lea    ebx,[ecx-0xfffff00]
c001139e:	83 fb 01             	cmp    ebx,0x1
c00113a1:	76 2e                	jbe    c00113d1 <SysClose(regs*)+0x53>
c00113a3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00113a9:	77 2a                	ja     c00113d5 <SysClose(regs*)+0x57>
c00113ab:	83 ec 0c             	sub    esp,0xc
c00113ae:	51                   	push   ecx
c00113af:	e8 5f 80 ff ff       	call   c0009413 <getFromFileDescriptor(int)>
c00113b4:	89 c3                	mov    ebx,eax
c00113b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00113b9:	e8 a6 9b ff ff       	call   c000af64 <File::close()>
c00113be:	83 c4 10             	add    esp,0x10
c00113c1:	85 db                	test   ebx,ebx
c00113c3:	74 0c                	je     c00113d1 <SysClose(regs*)+0x53>
c00113c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00113c7:	83 ec 0c             	sub    esp,0xc
c00113ca:	53                   	push   ebx
c00113cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00113ce:	83 c4 10             	add    esp,0x10
c00113d1:	31 c0                	xor    eax,eax
c00113d3:	31 d2                	xor    edx,edx
c00113d5:	83 c4 08             	add    esp,0x8
c00113d8:	5b                   	pop    ebx
c00113d9:	c3                   	ret    

c00113da <SysOpenDir(regs*)>:
c00113da:	56                   	push   esi
c00113db:	53                   	push   ebx
c00113dc:	83 ec 04             	sub    esp,0x4
c00113df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113e3:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00113e6:	85 c9                	test   ecx,ecx
c00113e8:	74 5d                	je     c0011447 <SysOpenDir(regs*)+0x6d>
c00113ea:	83 ec 0c             	sub    esp,0xc
c00113ed:	68 14 01 00 00       	push   0x114
c00113f2:	e8 38 66 ff ff       	call   c0007a2f <malloc>
c00113f7:	83 c4 0c             	add    esp,0xc
c00113fa:	89 c6                	mov    esi,eax
c00113fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011401:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011404:	50                   	push   eax
c0011405:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011408:	52                   	push   edx
c0011409:	56                   	push   esi
c001140a:	e8 61 9f ff ff       	call   c000b370 <Directory::Directory(char const*, Process*)>
c001140f:	83 c4 10             	add    esp,0x10
c0011412:	85 f6                	test   esi,esi
c0011414:	74 31                	je     c0011447 <SysOpenDir(regs*)+0x6d>
c0011416:	83 ec 0c             	sub    esp,0xc
c0011419:	56                   	push   esi
c001141a:	e8 0d a0 ff ff       	call   c000b42c <Directory::open()>
c001141f:	83 c4 10             	add    esp,0x10
c0011422:	85 c0                	test   eax,eax
c0011424:	75 21                	jne    c0011447 <SysOpenDir(regs*)+0x6d>
c0011426:	83 ec 0c             	sub    esp,0xc
c0011429:	56                   	push   esi
c001142a:	e8 e7 7c ff ff       	call   c0009116 <UnixFile::getFileDescriptor()>
c001142f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011432:	83 c4 10             	add    esp,0x10
c0011435:	89 02                	mov    DWORD PTR [edx],eax
c0011437:	c1 f8 1f             	sar    eax,0x1f
c001143a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001143d:	83 c4 04             	add    esp,0x4
c0011440:	31 c0                	xor    eax,eax
c0011442:	31 d2                	xor    edx,edx
c0011444:	5b                   	pop    ebx
c0011445:	5e                   	pop    esi
c0011446:	c3                   	ret    
c0011447:	83 c4 04             	add    esp,0x4
c001144a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001144f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011454:	5b                   	pop    ebx
c0011455:	5e                   	pop    esi
c0011456:	c3                   	ret    

c0011457 <SysMakeDir(regs*)>:
c0011457:	56                   	push   esi
c0011458:	53                   	push   ebx
c0011459:	83 ec 10             	sub    esp,0x10
c001145c:	68 14 01 00 00       	push   0x114
c0011461:	e8 c9 65 ff ff       	call   c0007a2f <malloc>
c0011466:	83 c4 0c             	add    esp,0xc
c0011469:	89 c3                	mov    ebx,eax
c001146b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011470:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011473:	50                   	push   eax
c0011474:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011478:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001147b:	52                   	push   edx
c001147c:	53                   	push   ebx
c001147d:	e8 ee 9e ff ff       	call   c000b370 <Directory::Directory(char const*, Process*)>
c0011482:	83 c4 10             	add    esp,0x10
c0011485:	85 db                	test   ebx,ebx
c0011487:	74 2c                	je     c00114b5 <SysMakeDir(regs*)+0x5e>
c0011489:	83 ec 0c             	sub    esp,0xc
c001148c:	53                   	push   ebx
c001148d:	e8 7a a1 ff ff       	call   c000b60c <Directory::create()>
c0011492:	89 c6                	mov    esi,eax
c0011494:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011496:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011499:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001149c:	83 c4 10             	add    esp,0x10
c001149f:	31 c0                	xor    eax,eax
c00114a1:	85 f6                	test   esi,esi
c00114a3:	0f 95 c0             	setne  al
c00114a6:	31 d2                	xor    edx,edx
c00114a8:	f7 d8                	neg    eax
c00114aa:	83 d2 00             	adc    edx,0x0
c00114ad:	83 c4 04             	add    esp,0x4
c00114b0:	f7 da                	neg    edx
c00114b2:	5b                   	pop    ebx
c00114b3:	5e                   	pop    esi
c00114b4:	c3                   	ret    
c00114b5:	83 c4 04             	add    esp,0x4
c00114b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114c2:	5b                   	pop    ebx
c00114c3:	5e                   	pop    esi
c00114c4:	c3                   	ret    

c00114c5 <SysCloseDir(regs*)>:
c00114c5:	53                   	push   ebx
c00114c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114cb:	83 ec 18             	sub    esp,0x18
c00114ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114d2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00114d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114da:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00114dd:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00114e3:	77 3a                	ja     c001151f <SysCloseDir(regs*)+0x5a>
c00114e5:	83 ec 0c             	sub    esp,0xc
c00114e8:	51                   	push   ecx
c00114e9:	e8 25 7f ff ff       	call   c0009413 <getFromFileDescriptor(int)>
c00114ee:	89 c3                	mov    ebx,eax
c00114f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00114f3:	e8 90 9f ff ff       	call   c000b488 <Directory::close()>
c00114f8:	83 c4 10             	add    esp,0x10
c00114fb:	31 c0                	xor    eax,eax
c00114fd:	31 d2                	xor    edx,edx
c00114ff:	85 db                	test   ebx,ebx
c0011501:	74 1c                	je     c001151f <SysCloseDir(regs*)+0x5a>
c0011503:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011505:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011509:	83 ec 0c             	sub    esp,0xc
c001150c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0011510:	53                   	push   ebx
c0011511:	ff 51 08             	call   DWORD PTR [ecx+0x8]
c0011514:	83 c4 10             	add    esp,0x10
c0011517:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001151b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001151f:	83 c4 18             	add    esp,0x18
c0011522:	5b                   	pop    ebx
c0011523:	c3                   	ret    

c0011524 <SysWait(regs*)>:
c0011524:	83 ec 10             	sub    esp,0x10
c0011527:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001152b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001152e:	52                   	push   edx
c001152f:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011532:	51                   	push   ecx
c0011533:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011536:	50                   	push   eax
c0011537:	e8 cc 3c 00 00       	call   c0015208 <waitTask(int, int*, int)>
c001153c:	83 c4 1c             	add    esp,0x1c
c001153f:	89 c2                	mov    edx,eax
c0011541:	c1 fa 1f             	sar    edx,0x1f
c0011544:	c3                   	ret    

c0011545 <SysNotImpl(regs*)>:
c0011545:	83 ec 18             	sub    esp,0x18
c0011548:	68 be 0c 02 c0       	push   0xc0020cbe
c001154d:	e8 b5 f2 ff ff       	call   c0010807 <KePanic(char const*)>
c0011552:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011557:	ba ff ff ff ff       	mov    edx,0xffffffff
c001155c:	83 c4 1c             	add    esp,0x1c
c001155f:	c3                   	ret    

c0011560 <SysPanic(regs*)>:
c0011560:	83 ec 18             	sub    esp,0x18
c0011563:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011567:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001156a:	50                   	push   eax
c001156b:	e8 97 f2 ff ff       	call   c0010807 <KePanic(char const*)>
c0011570:	b8 01 00 00 00       	mov    eax,0x1
c0011575:	31 d2                	xor    edx,edx
c0011577:	83 c4 1c             	add    esp,0x1c
c001157a:	c3                   	ret    

c001157b <SysRmdir(regs*)>:
c001157b:	56                   	push   esi
c001157c:	53                   	push   ebx
c001157d:	83 ec 10             	sub    esp,0x10
c0011580:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011584:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011587:	68 14 01 00 00       	push   0x114
c001158c:	e8 9e 64 ff ff       	call   c0007a2f <malloc>
c0011591:	83 c4 0c             	add    esp,0xc
c0011594:	89 c3                	mov    ebx,eax
c0011596:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001159b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001159e:	50                   	push   eax
c001159f:	56                   	push   esi
c00115a0:	53                   	push   ebx
c00115a1:	e8 a4 98 ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c00115a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115a9:	e8 d0 9a ff ff       	call   c000b07e <File::unlink()>
c00115ae:	83 c4 10             	add    esp,0x10
c00115b1:	85 db                	test   ebx,ebx
c00115b3:	89 c6                	mov    esi,eax
c00115b5:	74 0c                	je     c00115c3 <SysRmdir(regs*)+0x48>
c00115b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115b9:	83 ec 0c             	sub    esp,0xc
c00115bc:	53                   	push   ebx
c00115bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00115c0:	83 c4 10             	add    esp,0x10
c00115c3:	31 c0                	xor    eax,eax
c00115c5:	85 f6                	test   esi,esi
c00115c7:	0f 95 c0             	setne  al
c00115ca:	31 d2                	xor    edx,edx
c00115cc:	f7 d8                	neg    eax
c00115ce:	83 d2 00             	adc    edx,0x0
c00115d1:	83 c4 04             	add    esp,0x4
c00115d4:	f7 da                	neg    edx
c00115d6:	5b                   	pop    ebx
c00115d7:	5e                   	pop    esi
c00115d8:	c3                   	ret    

c00115d9 <SysUnlink(regs*)>:
c00115d9:	56                   	push   esi
c00115da:	53                   	push   ebx
c00115db:	83 ec 10             	sub    esp,0x10
c00115de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115e2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00115e5:	68 14 01 00 00       	push   0x114
c00115ea:	e8 40 64 ff ff       	call   c0007a2f <malloc>
c00115ef:	83 c4 0c             	add    esp,0xc
c00115f2:	89 c3                	mov    ebx,eax
c00115f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115fc:	50                   	push   eax
c00115fd:	56                   	push   esi
c00115fe:	53                   	push   ebx
c00115ff:	e8 46 98 ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c0011604:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011607:	e8 72 9a ff ff       	call   c000b07e <File::unlink()>
c001160c:	83 c4 10             	add    esp,0x10
c001160f:	85 db                	test   ebx,ebx
c0011611:	89 c6                	mov    esi,eax
c0011613:	74 0c                	je     c0011621 <SysUnlink(regs*)+0x48>
c0011615:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011617:	83 ec 0c             	sub    esp,0xc
c001161a:	53                   	push   ebx
c001161b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001161e:	83 c4 10             	add    esp,0x10
c0011621:	31 c0                	xor    eax,eax
c0011623:	85 f6                	test   esi,esi
c0011625:	0f 95 c0             	setne  al
c0011628:	31 d2                	xor    edx,edx
c001162a:	f7 d8                	neg    eax
c001162c:	83 d2 00             	adc    edx,0x0
c001162f:	83 c4 04             	add    esp,0x4
c0011632:	f7 da                	neg    edx
c0011634:	5b                   	pop    ebx
c0011635:	5e                   	pop    esi
c0011636:	c3                   	ret    

c0011637 <SysGetArgv(regs*)>:
c0011637:	56                   	push   esi
c0011638:	31 c0                	xor    eax,eax
c001163a:	31 d2                	xor    edx,edx
c001163c:	53                   	push   ebx
c001163d:	83 ec 04             	sub    esp,0x4
c0011640:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011644:	8b 59 20             	mov    ebx,DWORD PTR [ecx+0x20]
c0011647:	85 db                	test   ebx,ebx
c0011649:	78 37                	js     c0011682 <SysGetArgv(regs*)+0x4b>
c001164b:	8b 35 00 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002000
c0011651:	8b 76 3c             	mov    esi,DWORD PTR [esi+0x3c]
c0011654:	3b 9e 16 05 00 00    	cmp    ebx,DWORD PTR [esi+0x516]
c001165a:	7d 26                	jge    c0011682 <SysGetArgv(regs*)+0x4b>
c001165c:	8b 9c 9e 1a 05 00 00 	mov    ebx,DWORD PTR [esi+ebx*4+0x51a]
c0011663:	31 d2                	xor    edx,edx
c0011665:	b8 01 00 00 00       	mov    eax,0x1
c001166a:	85 db                	test   ebx,ebx
c001166c:	74 14                	je     c0011682 <SysGetArgv(regs*)+0x4b>
c001166e:	83 ec 08             	sub    esp,0x8
c0011671:	53                   	push   ebx
c0011672:	8b 41 24             	mov    eax,DWORD PTR [ecx+0x24]
c0011675:	50                   	push   eax
c0011676:	e8 75 ef fe ff       	call   c00005f0 <strcpy>
c001167b:	83 c4 10             	add    esp,0x10
c001167e:	31 c0                	xor    eax,eax
c0011680:	31 d2                	xor    edx,edx
c0011682:	83 c4 04             	add    esp,0x4
c0011685:	5b                   	pop    ebx
c0011686:	5e                   	pop    esi
c0011687:	c3                   	ret    

c0011688 <SysUSleep(regs*)>:
c0011688:	83 ec 1c             	sub    esp,0x1c
c001168b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001168f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011692:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011695:	6a 00                	push   0x0
c0011697:	6a 64                	push   0x64
c0011699:	52                   	push   edx
c001169a:	50                   	push   eax
c001169b:	e8 d0 ce 00 00       	call   c001e570 <__udivdi3>
c00116a0:	83 c4 14             	add    esp,0x14
c00116a3:	50                   	push   eax
c00116a4:	e8 43 3c 00 00       	call   c00152ec <milliTenthSleep(unsigned int)>
c00116a9:	31 c0                	xor    eax,eax
c00116ab:	31 d2                	xor    edx,edx
c00116ad:	83 c4 1c             	add    esp,0x1c
c00116b0:	c3                   	ret    

c00116b1 <SysSpawn(regs*)>:
c00116b1:	56                   	push   esi
c00116b2:	53                   	push   ebx
c00116b3:	83 ec 04             	sub    esp,0x4
c00116b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00116ba:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00116bd:	85 f6                	test   esi,esi
c00116bf:	75 0a                	jne    c00116cb <SysSpawn(regs*)+0x1a>
c00116c1:	83 c4 04             	add    esp,0x4
c00116c4:	31 c0                	xor    eax,eax
c00116c6:	31 d2                	xor    edx,edx
c00116c8:	5b                   	pop    ebx
c00116c9:	5e                   	pop    esi
c00116ca:	c3                   	ret    
c00116cb:	83 ec 0c             	sub    esp,0xc
c00116ce:	68 24 07 00 00       	push   0x724
c00116d3:	e8 57 63 ff ff       	call   c0007a2f <malloc>
c00116d8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00116db:	83 c4 10             	add    esp,0x10
c00116de:	89 c6                	mov    esi,eax
c00116e0:	31 c0                	xor    eax,eax
c00116e2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00116e5:	85 c9                	test   ecx,ecx
c00116e7:	75 08                	jne    c00116f1 <SysSpawn(regs*)+0x40>
c00116e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116f1:	52                   	push   edx
c00116f2:	50                   	push   eax
c00116f3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00116f6:	50                   	push   eax
c00116f7:	56                   	push   esi
c00116f8:	e8 63 32 00 00       	call   c0014960 <Process::Process(char const*, Process*, char**)>
c00116fd:	83 c4 10             	add    esp,0x10
c0011700:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011707:	75 b8                	jne    c00116c1 <SysSpawn(regs*)+0x10>
c0011709:	83 ec 0c             	sub    esp,0xc
c001170c:	56                   	push   esi
c001170d:	e8 7a 37 00 00       	call   c0014e8c <Process::createUserThread()>
c0011712:	8b 06                	mov    eax,DWORD PTR [esi]
c0011714:	83 c4 10             	add    esp,0x10
c0011717:	83 c4 04             	add    esp,0x4
c001171a:	5b                   	pop    ebx
c001171b:	5e                   	pop    esi
c001171c:	89 c2                	mov    edx,eax
c001171e:	c1 fa 1f             	sar    edx,0x1f
c0011721:	c3                   	ret    

c0011722 <SysGetEnv(regs*)>:
c0011722:	57                   	push   edi
c0011723:	56                   	push   esi
c0011724:	53                   	push   ebx
c0011725:	83 ec 1c             	sub    esp,0x1c
c0011728:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001172d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011731:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011734:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011737:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001173a:	51                   	push   ecx
c001173b:	e8 7f ef ff ff       	call   c00106bf <Krnl::getProcessTotalEnvCount(Process*)>
c0011740:	83 c4 10             	add    esp,0x10
c0011743:	39 c7                	cmp    edi,eax
c0011745:	7c 12                	jl     c0011759 <SysGetEnv(regs*)+0x37>
c0011747:	31 c0                	xor    eax,eax
c0011749:	31 d2                	xor    edx,edx
c001174b:	85 f6                	test   esi,esi
c001174d:	74 03                	je     c0011752 <SysGetEnv(regs*)+0x30>
c001174f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011752:	83 c4 10             	add    esp,0x10
c0011755:	5b                   	pop    ebx
c0011756:	5e                   	pop    esi
c0011757:	5f                   	pop    edi
c0011758:	c3                   	ret    
c0011759:	8d 44 24 08          	lea    eax,[esp+0x8]
c001175d:	83 ec 04             	sub    esp,0x4
c0011760:	57                   	push   edi
c0011761:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011767:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001176a:	57                   	push   edi
c001176b:	50                   	push   eax
c001176c:	e8 6e ef ff ff       	call   c00106df <Krnl::getProcessEnvPair(Process*, int)>
c0011771:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011774:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011778:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001177c:	83 c4 0c             	add    esp,0xc
c001177f:	85 d2                	test   edx,edx
c0011781:	75 23                	jne    c00117a6 <SysGetEnv(regs*)+0x84>
c0011783:	83 ec 0c             	sub    esp,0xc
c0011786:	50                   	push   eax
c0011787:	e8 94 ed fe ff       	call   c0000520 <strlen>
c001178c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001178f:	89 c3                	mov    ebx,eax
c0011791:	e8 8a ed fe ff       	call   c0000520 <strlen>
c0011796:	83 c4 10             	add    esp,0x10
c0011799:	31 d2                	xor    edx,edx
c001179b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001179f:	83 c4 10             	add    esp,0x10
c00117a2:	5b                   	pop    ebx
c00117a3:	5e                   	pop    esi
c00117a4:	5f                   	pop    edi
c00117a5:	c3                   	ret    
c00117a6:	83 ec 08             	sub    esp,0x8
c00117a9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00117ac:	50                   	push   eax
c00117ad:	56                   	push   esi
c00117ae:	e8 3d ee fe ff       	call   c00005f0 <strcpy>
c00117b3:	58                   	pop    eax
c00117b4:	5a                   	pop    edx
c00117b5:	68 d8 0c 02 c0       	push   0xc0020cd8
c00117ba:	56                   	push   esi
c00117bb:	e8 00 f0 fe ff       	call   c00007c0 <strcat>
c00117c0:	59                   	pop    ecx
c00117c1:	5b                   	pop    ebx
c00117c2:	57                   	push   edi
c00117c3:	56                   	push   esi
c00117c4:	e8 f7 ef fe ff       	call   c00007c0 <strcat>
c00117c9:	83 c4 10             	add    esp,0x10
c00117cc:	31 c0                	xor    eax,eax
c00117ce:	31 d2                	xor    edx,edx
c00117d0:	83 c4 10             	add    esp,0x10
c00117d3:	5b                   	pop    ebx
c00117d4:	5e                   	pop    esi
c00117d5:	5f                   	pop    edi
c00117d6:	c3                   	ret    

c00117d7 <SysSetFatAttrib(regs*)>:
c00117d7:	57                   	push   edi
c00117d8:	56                   	push   esi
c00117d9:	53                   	push   ebx
c00117da:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00117de:	83 ec 0c             	sub    esp,0xc
c00117e1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00117e4:	68 14 01 00 00       	push   0x114
c00117e9:	e8 41 62 ff ff       	call   c0007a2f <malloc>
c00117ee:	83 c4 0c             	add    esp,0xc
c00117f1:	89 c3                	mov    ebx,eax
c00117f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117fb:	50                   	push   eax
c00117fc:	57                   	push   edi
c00117fd:	53                   	push   ebx
c00117fe:	e8 47 96 ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c0011803:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011806:	83 c4 0c             	add    esp,0xc
c0011809:	0f b6 d4             	movzx  edx,ah
c001180c:	0f b6 c0             	movzx  eax,al
c001180f:	52                   	push   edx
c0011810:	50                   	push   eax
c0011811:	53                   	push   ebx
c0011812:	e8 01 99 ff ff       	call   c000b118 <File::chfatattr(unsigned char, unsigned char)>
c0011817:	83 c4 10             	add    esp,0x10
c001181a:	85 db                	test   ebx,ebx
c001181c:	89 c6                	mov    esi,eax
c001181e:	74 0c                	je     c001182c <SysSetFatAttrib(regs*)+0x55>
c0011820:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011822:	83 ec 0c             	sub    esp,0xc
c0011825:	53                   	push   ebx
c0011826:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011829:	83 c4 10             	add    esp,0x10
c001182c:	31 c0                	xor    eax,eax
c001182e:	85 f6                	test   esi,esi
c0011830:	5b                   	pop    ebx
c0011831:	0f 95 c0             	setne  al
c0011834:	31 d2                	xor    edx,edx
c0011836:	5e                   	pop    esi
c0011837:	f7 d8                	neg    eax
c0011839:	5f                   	pop    edi
c001183a:	83 d2 00             	adc    edx,0x0
c001183d:	f7 da                	neg    edx
c001183f:	c3                   	ret    

c0011840 <SysPipe(regs*)>:
c0011840:	57                   	push   edi
c0011841:	56                   	push   esi
c0011842:	53                   	push   ebx
c0011843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011847:	83 ec 0c             	sub    esp,0xc
c001184a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001184d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011850:	6a 20                	push   0x20
c0011852:	e8 d8 61 ff ff       	call   c0007a2f <malloc>
c0011857:	89 c3                	mov    ebx,eax
c0011859:	58                   	pop    eax
c001185a:	5a                   	pop    edx
c001185b:	68 00 50 00 00       	push   0x5000
c0011860:	53                   	push   ebx
c0011861:	e8 1c 6b ff ff       	call   c0008382 <Pipe::Pipe(int)>
c0011866:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011869:	e8 a8 78 ff ff       	call   c0009116 <UnixFile::getFileDescriptor()>
c001186e:	89 07                	mov    DWORD PTR [edi],eax
c0011870:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011873:	e8 9e 78 ff ff       	call   c0009116 <UnixFile::getFileDescriptor()>
c0011878:	83 c4 10             	add    esp,0x10
c001187b:	31 d2                	xor    edx,edx
c001187d:	89 06                	mov    DWORD PTR [esi],eax
c001187f:	31 c0                	xor    eax,eax
c0011881:	5b                   	pop    ebx
c0011882:	5e                   	pop    esi
c0011883:	5f                   	pop    edi
c0011884:	c3                   	ret    

c0011885 <SysGetUnixTime(regs*)>:
c0011885:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001188a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011890:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011894:	e9 b9 9f ff ff       	jmp    c000b852 <Clock::timeInSecondsLocal()>

c0011899 <string_ends_with(char const*, char const*)>:
c0011899:	57                   	push   edi
c001189a:	56                   	push   esi
c001189b:	53                   	push   ebx
c001189c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118a0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00118a4:	83 ec 0c             	sub    esp,0xc
c00118a7:	53                   	push   ebx
c00118a8:	e8 73 ec fe ff       	call   c0000520 <strlen>
c00118ad:	89 3c 24             	mov    DWORD PTR [esp],edi
c00118b0:	89 c6                	mov    esi,eax
c00118b2:	e8 69 ec fe ff       	call   c0000520 <strlen>
c00118b7:	83 c4 10             	add    esp,0x10
c00118ba:	31 d2                	xor    edx,edx
c00118bc:	39 c6                	cmp    esi,eax
c00118be:	7d 06                	jge    c00118c6 <string_ends_with(char const*, char const*)+0x2d>
c00118c0:	5b                   	pop    ebx
c00118c1:	89 d0                	mov    eax,edx
c00118c3:	5e                   	pop    esi
c00118c4:	5f                   	pop    edi
c00118c5:	c3                   	ret    
c00118c6:	29 c6                	sub    esi,eax
c00118c8:	83 ec 08             	sub    esp,0x8
c00118cb:	01 f3                	add    ebx,esi
c00118cd:	57                   	push   edi
c00118ce:	53                   	push   ebx
c00118cf:	e8 fc ed fe ff       	call   c00006d0 <strcmp>
c00118d4:	83 c4 10             	add    esp,0x10
c00118d7:	31 d2                	xor    edx,edx
c00118d9:	85 c0                	test   eax,eax
c00118db:	5b                   	pop    ebx
c00118dc:	0f 94 c2             	sete   dl
c00118df:	5e                   	pop    esi
c00118e0:	89 d0                	mov    eax,edx
c00118e2:	5f                   	pop    edi
c00118e3:	c3                   	ret    

c00118e4 <SysOpen(regs*)>:
c00118e4:	56                   	push   esi
c00118e5:	53                   	push   ebx
c00118e6:	81 ec 04 01 00 00    	sub    esp,0x104
c00118ec:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00118f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00118f6:	85 c0                	test   eax,eax
c00118f8:	0f 84 bb 01 00 00    	je     c0011ab9 <SysOpen(regs*)+0x1d5>
c00118fe:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011901:	85 c0                	test   eax,eax
c0011903:	0f 84 b0 01 00 00    	je     c0011ab9 <SysOpen(regs*)+0x1d5>
c0011909:	83 ec 04             	sub    esp,0x4
c001190c:	68 da 0c 02 c0       	push   0xc0020cda
c0011911:	50                   	push   eax
c0011912:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011916:	56                   	push   esi
c0011917:	e8 52 93 ff ff       	call   c000ac6e <Fs::standardiseFiles(char*, char const*, char const*)>
c001191c:	89 34 24             	mov    DWORD PTR [esp],esi
c001191f:	e8 fc eb fe ff       	call   c0000520 <strlen>
c0011924:	83 c4 10             	add    esp,0x10
c0011927:	83 e8 01             	sub    eax,0x1
c001192a:	74 29                	je     c0011955 <SysOpen(regs*)+0x71>
c001192c:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011930:	83 fa 2e             	cmp    edx,0x2e
c0011933:	74 1c                	je     c0011951 <SysOpen(regs*)+0x6d>
c0011935:	83 fa 3a             	cmp    edx,0x3a
c0011938:	74 17                	je     c0011951 <SysOpen(regs*)+0x6d>
c001193a:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001193e:	83 e8 01             	sub    eax,0x1
c0011941:	74 12                	je     c0011955 <SysOpen(regs*)+0x71>
c0011943:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011947:	83 fa 3a             	cmp    edx,0x3a
c001194a:	74 05                	je     c0011951 <SysOpen(regs*)+0x6d>
c001194c:	83 fa 2e             	cmp    edx,0x2e
c001194f:	75 e9                	jne    c001193a <SysOpen(regs*)+0x56>
c0011951:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011955:	83 ec 08             	sub    esp,0x8
c0011958:	68 de 0c 02 c0       	push   0xc0020cde
c001195d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011960:	50                   	push   eax
c0011961:	e8 33 ff ff ff       	call   c0011899 <string_ends_with(char const*, char const*)>
c0011966:	83 c4 10             	add    esp,0x10
c0011969:	85 c0                	test   eax,eax
c001196b:	74 1d                	je     c001198a <SysOpen(regs*)+0xa6>
c001196d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011970:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011976:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001197d:	81 c4 04 01 00 00    	add    esp,0x104
c0011983:	31 c0                	xor    eax,eax
c0011985:	31 d2                	xor    edx,edx
c0011987:	5b                   	pop    ebx
c0011988:	5e                   	pop    esi
c0011989:	c3                   	ret    
c001198a:	83 ec 08             	sub    esp,0x8
c001198d:	68 e3 0c 02 c0       	push   0xc0020ce3
c0011992:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011995:	50                   	push   eax
c0011996:	e8 fe fe ff ff       	call   c0011899 <string_ends_with(char const*, char const*)>
c001199b:	83 c4 10             	add    esp,0x10
c001199e:	85 c0                	test   eax,eax
c00119a0:	75 cb                	jne    c001196d <SysOpen(regs*)+0x89>
c00119a2:	83 ec 08             	sub    esp,0x8
c00119a5:	68 df 0c 02 c0       	push   0xc0020cdf
c00119aa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119ad:	50                   	push   eax
c00119ae:	e8 1d ed fe ff       	call   c00006d0 <strcmp>
c00119b3:	83 c4 10             	add    esp,0x10
c00119b6:	85 c0                	test   eax,eax
c00119b8:	74 b3                	je     c001196d <SysOpen(regs*)+0x89>
c00119ba:	83 ec 08             	sub    esp,0x8
c00119bd:	68 de 0c 02 c0       	push   0xc0020cde
c00119c2:	56                   	push   esi
c00119c3:	e8 d1 fe ff ff       	call   c0011899 <string_ends_with(char const*, char const*)>
c00119c8:	83 c4 10             	add    esp,0x10
c00119cb:	85 c0                	test   eax,eax
c00119cd:	75 9e                	jne    c001196d <SysOpen(regs*)+0x89>
c00119cf:	83 ec 08             	sub    esp,0x8
c00119d2:	68 e8 0c 02 c0       	push   0xc0020ce8
c00119d7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119da:	50                   	push   eax
c00119db:	e8 b9 fe ff ff       	call   c0011899 <string_ends_with(char const*, char const*)>
c00119e0:	83 c4 10             	add    esp,0x10
c00119e3:	85 c0                	test   eax,eax
c00119e5:	0f 85 e1 00 00 00    	jne    c0011acc <SysOpen(regs*)+0x1e8>
c00119eb:	83 ec 08             	sub    esp,0x8
c00119ee:	68 ed 0c 02 c0       	push   0xc0020ced
c00119f3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119f6:	50                   	push   eax
c00119f7:	e8 9d fe ff ff       	call   c0011899 <string_ends_with(char const*, char const*)>
c00119fc:	83 c4 10             	add    esp,0x10
c00119ff:	85 c0                	test   eax,eax
c0011a01:	0f 85 c5 00 00 00    	jne    c0011acc <SysOpen(regs*)+0x1e8>
c0011a07:	83 ec 08             	sub    esp,0x8
c0011a0a:	68 e9 0c 02 c0       	push   0xc0020ce9
c0011a0f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011a12:	51                   	push   ecx
c0011a13:	e8 b8 ec fe ff       	call   c00006d0 <strcmp>
c0011a18:	83 c4 10             	add    esp,0x10
c0011a1b:	85 c0                	test   eax,eax
c0011a1d:	0f 84 a9 00 00 00    	je     c0011acc <SysOpen(regs*)+0x1e8>
c0011a23:	83 ec 08             	sub    esp,0x8
c0011a26:	68 e8 0c 02 c0       	push   0xc0020ce8
c0011a2b:	56                   	push   esi
c0011a2c:	e8 68 fe ff ff       	call   c0011899 <string_ends_with(char const*, char const*)>
c0011a31:	83 c4 10             	add    esp,0x10
c0011a34:	85 c0                	test   eax,eax
c0011a36:	0f 85 90 00 00 00    	jne    c0011acc <SysOpen(regs*)+0x1e8>
c0011a3c:	83 ec 0c             	sub    esp,0xc
c0011a3f:	68 14 01 00 00       	push   0x114
c0011a44:	e8 e6 5f ff ff       	call   c0007a2f <malloc>
c0011a49:	83 c4 0c             	add    esp,0xc
c0011a4c:	89 c6                	mov    esi,eax
c0011a4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a53:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a56:	50                   	push   eax
c0011a57:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011a5a:	52                   	push   edx
c0011a5b:	56                   	push   esi
c0011a5c:	e8 e9 93 ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c0011a61:	83 c4 10             	add    esp,0x10
c0011a64:	85 f6                	test   esi,esi
c0011a66:	74 51                	je     c0011ab9 <SysOpen(regs*)+0x1d5>
c0011a68:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011a6b:	0f b6 c2             	movzx  eax,dl
c0011a6e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011a71:	89 d0                	mov    eax,edx
c0011a73:	83 e0 07             	and    eax,0x7
c0011a76:	89 c1                	mov    ecx,eax
c0011a78:	83 c9 0a             	or     ecx,0xa
c0011a7b:	f6 c2 08             	test   dl,0x8
c0011a7e:	0f 45 c1             	cmovne eax,ecx
c0011a81:	89 c1                	mov    ecx,eax
c0011a83:	83 c9 12             	or     ecx,0x12
c0011a86:	80 e2 10             	and    dl,0x10
c0011a89:	0f 45 c1             	cmovne eax,ecx
c0011a8c:	83 ec 08             	sub    esp,0x8
c0011a8f:	50                   	push   eax
c0011a90:	56                   	push   esi
c0011a91:	e8 70 94 ff ff       	call   c000af06 <File::open(FileOpenMode)>
c0011a96:	83 c4 10             	add    esp,0x10
c0011a99:	85 c0                	test   eax,eax
c0011a9b:	75 1c                	jne    c0011ab9 <SysOpen(regs*)+0x1d5>
c0011a9d:	83 ec 0c             	sub    esp,0xc
c0011aa0:	56                   	push   esi
c0011aa1:	e8 70 76 ff ff       	call   c0009116 <UnixFile::getFileDescriptor()>
c0011aa6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011aa9:	83 c4 10             	add    esp,0x10
c0011aac:	89 02                	mov    DWORD PTR [edx],eax
c0011aae:	c1 f8 1f             	sar    eax,0x1f
c0011ab1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011ab4:	e9 c4 fe ff ff       	jmp    c001197d <SysOpen(regs*)+0x99>
c0011ab9:	81 c4 04 01 00 00    	add    esp,0x104
c0011abf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ac4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ac9:	5b                   	pop    ebx
c0011aca:	5e                   	pop    esi
c0011acb:	c3                   	ret    
c0011acc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011acf:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011ad5:	e9 9c fe ff ff       	jmp    c0011976 <SysOpen(regs*)+0x92>

c0011ada <KeSystemCall(regs*, void*)>:
c0011ada:	53                   	push   ebx
c0011adb:	83 ec 08             	sub    esp,0x8
c0011ade:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ae2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011ae5:	83 f8 3b             	cmp    eax,0x3b
c0011ae8:	77 16                	ja     c0011b00 <KeSystemCall(regs*, void*)+0x26>
c0011aea:	8b 14 85 a0 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddf60]
c0011af1:	85 d2                	test   edx,edx
c0011af3:	74 0b                	je     c0011b00 <KeSystemCall(regs*, void*)+0x26>
c0011af5:	83 ec 0c             	sub    esp,0xc
c0011af8:	53                   	push   ebx
c0011af9:	ff d2                	call   edx
c0011afb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011afe:	eb 0d                	jmp    c0011b0d <KeSystemCall(regs*, void*)+0x33>
c0011b00:	52                   	push   edx
c0011b01:	52                   	push   edx
c0011b02:	50                   	push   eax
c0011b03:	68 f2 0c 02 c0       	push   0xc0020cf2
c0011b08:	e8 94 8d ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0011b0d:	83 c4 10             	add    esp,0x10
c0011b10:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011b15:	31 d2                	xor    edx,edx
c0011b17:	83 c4 08             	add    esp,0x8
c0011b1a:	5b                   	pop    ebx
c0011b1b:	c3                   	ret    

c0011b1c <KeSwitchEndian16(unsigned short)>:
c0011b1c:	83 ec 04             	sub    esp,0x4
c0011b1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011b27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b2b:	c1 f8 08             	sar    eax,0x8
c0011b2e:	89 c2                	mov    edx,eax
c0011b30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b34:	c1 e0 08             	shl    eax,0x8
c0011b37:	09 d0                	or     eax,edx
c0011b39:	83 c4 04             	add    esp,0x4
c0011b3c:	c3                   	ret    
c0011b3d:	8d 76 00             	lea    esi,[esi+0x0]

c0011b40 <KeSwitchEndian32(unsigned int)>:
c0011b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b44:	c1 e8 18             	shr    eax,0x18
c0011b47:	89 c2                	mov    edx,eax
c0011b49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b4d:	c1 e0 08             	shl    eax,0x8
c0011b50:	25 00 00 ff 00       	and    eax,0xff0000
c0011b55:	09 c2                	or     edx,eax
c0011b57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b5b:	c1 e8 08             	shr    eax,0x8
c0011b5e:	25 00 ff 00 00       	and    eax,0xff00
c0011b63:	09 c2                	or     edx,eax
c0011b65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b69:	c1 e0 18             	shl    eax,0x18
c0011b6c:	09 d0                	or     eax,edx
c0011b6e:	c3                   	ret    
c0011b6f:	90                   	nop

c0011b70 <EthernetCRC32(unsigned char*, int)>:
c0011b70:	83 ec 10             	sub    esp,0x10
c0011b73:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011b78:	75 0a                	jne    c0011b84 <EthernetCRC32(unsigned char*, int)+0x14>
c0011b7a:	b8 00 00 00 00       	mov    eax,0x0
c0011b7f:	e9 8c 00 00 00       	jmp    c0011c10 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011b84:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011b89:	7f 09                	jg     c0011b94 <EthernetCRC32(unsigned char*, int)+0x24>
c0011b8b:	b8 00 00 00 00       	mov    eax,0x0
c0011b90:	eb 7e                	jmp    c0011c10 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011b92:	66 90                	xchg   ax,ax
c0011b94:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011b9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ba8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011bac:	7d 5a                	jge    c0011c08 <EthernetCRC32(unsigned char*, int)+0x98>
c0011bae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011bb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011bb6:	01 d0                	add    eax,edx
c0011bb8:	8a 00                	mov    al,BYTE PTR [eax]
c0011bba:	0f b6 c0             	movzx  eax,al
c0011bbd:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011bc1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011bc9:	8d 76 00             	lea    esi,[esi+0x0]
c0011bcc:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011bd1:	7f 2d                	jg     c0011c00 <EthernetCRC32(unsigned char*, int)+0x90>
c0011bd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bd7:	83 e0 01             	and    eax,0x1
c0011bda:	74 10                	je     c0011bec <EthernetCRC32(unsigned char*, int)+0x7c>
c0011bdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be0:	d1 e8                	shr    eax,1
c0011be2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011be7:	eb 0b                	jmp    c0011bf4 <EthernetCRC32(unsigned char*, int)+0x84>
c0011be9:	8d 76 00             	lea    esi,[esi+0x0]
c0011bec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bf0:	d1 e8                	shr    eax,1
c0011bf2:	66 90                	xchg   ax,ax
c0011bf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011bf8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011bfd:	eb cd                	jmp    c0011bcc <EthernetCRC32(unsigned char*, int)+0x5c>
c0011bff:	90                   	nop
c0011c00:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011c05:	eb 9d                	jmp    c0011ba4 <EthernetCRC32(unsigned char*, int)+0x34>
c0011c07:	90                   	nop
c0011c08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c0c:	f7 d0                	not    eax
c0011c0e:	66 90                	xchg   ax,ax
c0011c10:	83 c4 10             	add    esp,0x10
c0011c13:	c3                   	ret    

c0011c14 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011c14:	83 ec 2c             	sub    esp,0x2c
c0011c17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c1b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011c20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c24:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c2c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c2f:	0f b7 c0             	movzx  eax,ax
c0011c32:	3d 06 08 00 00       	cmp    eax,0x806
c0011c37:	75 13                	jne    c0011c4c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011c39:	83 ec 0c             	sub    esp,0xc
c0011c3c:	68 06 0d 02 c0       	push   0xc0020d06
c0011c41:	e8 5b 8c ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0011c46:	83 c4 10             	add    esp,0x10
c0011c49:	eb 25                	jmp    c0011c70 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011c4b:	90                   	nop
c0011c4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c53:	0f b7 c0             	movzx  eax,ax
c0011c56:	3d 00 08 00 00       	cmp    eax,0x800
c0011c5b:	75 13                	jne    c0011c70 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011c5d:	83 ec 0c             	sub    esp,0xc
c0011c60:	68 1c 0d 02 c0       	push   0xc0020d1c
c0011c65:	e8 37 8c ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0011c6a:	83 c4 10             	add    esp,0x10
c0011c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c70:	90                   	nop
c0011c71:	83 c4 2c             	add    esp,0x2c
c0011c74:	c3                   	ret    

c0011c75 <CmOpen(char const*)>:
c0011c75:	57                   	push   edi
c0011c76:	56                   	push   esi
c0011c77:	53                   	push   ebx
c0011c78:	83 ec 1c             	sub    esp,0x1c
c0011c7b:	6a 30                	push   0x30
c0011c7d:	e8 ad 5d ff ff       	call   c0007a2f <malloc>
c0011c82:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011c89:	89 c3                	mov    ebx,eax
c0011c8b:	e8 9f 5d ff ff       	call   c0007a2f <malloc>
c0011c90:	83 c4 0c             	add    esp,0xc
c0011c93:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011c99:	89 c6                	mov    esi,eax
c0011c9b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011c9f:	50                   	push   eax
c0011ca0:	e8 a5 91 ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c0011ca5:	83 c4 0c             	add    esp,0xc
c0011ca8:	89 33                	mov    DWORD PTR [ebx],esi
c0011caa:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011cae:	50                   	push   eax
c0011caf:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011cb3:	50                   	push   eax
c0011cb4:	56                   	push   esi
c0011cb5:	e8 f8 94 ff ff       	call   c000b1b2 <File::stat(unsigned long long*, bool*)>
c0011cba:	5a                   	pop    edx
c0011cbb:	59                   	pop    ecx
c0011cbc:	6a 01                	push   0x1
c0011cbe:	ff 33                	push   DWORD PTR [ebx]
c0011cc0:	e8 41 92 ff ff       	call   c000af06 <File::open(FileOpenMode)>
c0011cc5:	5e                   	pop    esi
c0011cc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cca:	e8 60 5d ff ff       	call   c0007a2f <malloc>
c0011ccf:	5a                   	pop    edx
c0011cd0:	89 c7                	mov    edi,eax
c0011cd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011cd4:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011cd8:	8b 10                	mov    edx,DWORD PTR [eax]
c0011cda:	56                   	push   esi
c0011cdb:	57                   	push   edi
c0011cdc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011ce0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011ce4:	50                   	push   eax
c0011ce5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ce8:	83 c4 14             	add    esp,0x14
c0011ceb:	ff 33                	push   DWORD PTR [ebx]
c0011ced:	e8 72 92 ff ff       	call   c000af64 <File::close()>
c0011cf2:	59                   	pop    ecx
c0011cf3:	58                   	pop    eax
c0011cf4:	6a 13                	push   0x13
c0011cf6:	ff 33                	push   DWORD PTR [ebx]
c0011cf8:	e8 09 92 ff ff       	call   c000af06 <File::open(FileOpenMode)>
c0011cfd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011cff:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d01:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d04:	57                   	push   edi
c0011d05:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d09:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d0d:	50                   	push   eax
c0011d0e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011d11:	83 c4 14             	add    esp,0x14
c0011d14:	57                   	push   edi
c0011d15:	e8 25 5d ff ff       	call   c0007a3f <free>
c0011d1a:	83 c4 10             	add    esp,0x10
c0011d1d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011d20:	75 10                	jne    c0011d32 <CmOpen(char const*)+0xbd>
c0011d22:	83 ec 0c             	sub    esp,0xc
c0011d25:	68 31 0d 02 c0       	push   0xc0020d31
c0011d2a:	e8 d8 ea ff ff       	call   c0010807 <KePanic(char const*)>
c0011d2f:	83 c4 10             	add    esp,0x10
c0011d32:	50                   	push   eax
c0011d33:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011d36:	6a 00                	push   0x0
c0011d38:	6a 00                	push   0x0
c0011d3a:	ff 33                	push   DWORD PTR [ebx]
c0011d3c:	e8 83 92 ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c0011d41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d43:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d45:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d48:	57                   	push   edi
c0011d49:	6a 00                	push   0x0
c0011d4b:	6a 2b                	push   0x2b
c0011d4d:	50                   	push   eax
c0011d4e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d51:	83 c4 1c             	add    esp,0x1c
c0011d54:	6a 00                	push   0x0
c0011d56:	6a 00                	push   0x0
c0011d58:	ff 33                	push   DWORD PTR [ebx]
c0011d5a:	e8 65 92 ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c0011d5f:	83 c4 0c             	add    esp,0xc
c0011d62:	6a 08                	push   0x8
c0011d64:	68 42 0d 02 c0       	push   0xc0020d42
c0011d69:	57                   	push   edi
c0011d6a:	e8 11 e6 fe ff       	call   c0000380 <memcmp>
c0011d6f:	83 c4 10             	add    esp,0x10
c0011d72:	85 c0                	test   eax,eax
c0011d74:	74 10                	je     c0011d86 <CmOpen(char const*)+0x111>
c0011d76:	83 ec 0c             	sub    esp,0xc
c0011d79:	68 4b 0d 02 c0       	push   0xc0020d4b
c0011d7e:	e8 84 ea ff ff       	call   c0010807 <KePanic(char const*)>
c0011d83:	83 c4 10             	add    esp,0x10
c0011d86:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011d8a:	83 c4 10             	add    esp,0x10
c0011d8d:	89 d8                	mov    eax,ebx
c0011d8f:	5b                   	pop    ebx
c0011d90:	5e                   	pop    esi
c0011d91:	5f                   	pop    edi
c0011d92:	c3                   	ret    

c0011d93 <CmClose(Reghive_Tag*)>:
c0011d93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d97:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011d9b:	74 0b                	je     c0011da8 <CmClose(Reghive_Tag*)+0x15>
c0011d9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011da3:	e9 bc 91 ff ff       	jmp    c000af64 <File::close()>
c0011da8:	c3                   	ret    

c0011da9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011da9:	53                   	push   ebx
c0011daa:	83 ec 18             	sub    esp,0x18
c0011dad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011db1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011db5:	74 29                	je     c0011de0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011db7:	50                   	push   eax
c0011db8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011dbd:	99                   	cdq    
c0011dbe:	52                   	push   edx
c0011dbf:	50                   	push   eax
c0011dc0:	ff 33                	push   DWORD PTR [ebx]
c0011dc2:	e8 fd 91 ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c0011dc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011dc9:	5a                   	pop    edx
c0011dca:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dcc:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011dd0:	51                   	push   ecx
c0011dd1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011dd5:	6a 00                	push   0x0
c0011dd7:	6a 2b                	push   0x2b
c0011dd9:	50                   	push   eax
c0011dda:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011ddd:	83 c4 20             	add    esp,0x20
c0011de0:	83 c4 18             	add    esp,0x18
c0011de3:	5b                   	pop    ebx
c0011de4:	c3                   	ret    

c0011de5 <CmGetString(Reghive_Tag*, int, char*)>:
c0011de5:	55                   	push   ebp
c0011de6:	57                   	push   edi
c0011de7:	56                   	push   esi
c0011de8:	53                   	push   ebx
c0011de9:	31 db                	xor    ebx,ebx
c0011deb:	83 ec 70             	sub    esp,0x70
c0011dee:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011df5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011df9:	50                   	push   eax
c0011dfa:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011e01:	55                   	push   ebp
c0011e02:	e8 a2 ff ff ff       	call   c0011da9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e07:	83 c4 10             	add    esp,0x10
c0011e0a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011e0f:	c1 e0 08             	shl    eax,0x8
c0011e12:	89 c2                	mov    edx,eax
c0011e14:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011e19:	09 d0                	or     eax,edx
c0011e1b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011e20:	c1 e0 08             	shl    eax,0x8
c0011e23:	09 d0                	or     eax,edx
c0011e25:	74 25                	je     c0011e4c <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011e27:	52                   	push   edx
c0011e28:	6b fb 0d             	imul   edi,ebx,0xd
c0011e2b:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011e2f:	52                   	push   edx
c0011e30:	50                   	push   eax
c0011e31:	55                   	push   ebp
c0011e32:	e8 72 ff ff ff       	call   c0011da9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e37:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011e3b:	b9 27 00 00 00       	mov    ecx,0x27
c0011e40:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011e47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011e49:	83 c4 10             	add    esp,0x10
c0011e4c:	83 c3 03             	add    ebx,0x3
c0011e4f:	83 fb 15             	cmp    ebx,0x15
c0011e52:	75 b6                	jne    c0011e0a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011e54:	83 c4 6c             	add    esp,0x6c
c0011e57:	5b                   	pop    ebx
c0011e58:	5e                   	pop    esi
c0011e59:	5f                   	pop    edi
c0011e5a:	5d                   	pop    ebp
c0011e5b:	c3                   	ret    

c0011e5c <CmEnterDirectory(Reghive_Tag*, int)>:
c0011e5c:	83 ec 40             	sub    esp,0x40
c0011e5f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011e63:	50                   	push   eax
c0011e64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e6c:	e8 38 ff ff ff       	call   c0011da9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e71:	83 c4 10             	add    esp,0x10
c0011e74:	83 c8 ff             	or     eax,0xffffffff
c0011e77:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011e7c:	75 19                	jne    c0011e97 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011e7e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e83:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011e88:	c1 e0 08             	shl    eax,0x8
c0011e8b:	09 c2                	or     edx,eax
c0011e8d:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011e92:	c1 e0 10             	shl    eax,0x10
c0011e95:	09 d0                	or     eax,edx
c0011e97:	83 c4 3c             	add    esp,0x3c
c0011e9a:	c3                   	ret    

c0011e9b <CmGetNext(Reghive_Tag*, int)>:
c0011e9b:	83 ec 40             	sub    esp,0x40
c0011e9e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011ea2:	50                   	push   eax
c0011ea3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ea7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011eab:	e8 f9 fe ff ff       	call   c0011da9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011eb0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011eb5:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011eba:	c1 e0 08             	shl    eax,0x8
c0011ebd:	09 c2                	or     edx,eax
c0011ebf:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011ec4:	83 c4 4c             	add    esp,0x4c
c0011ec7:	c1 e0 10             	shl    eax,0x10
c0011eca:	09 d0                	or     eax,edx
c0011ecc:	c3                   	ret    

c0011ecd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011ecd:	53                   	push   ebx
c0011ece:	83 ec 18             	sub    esp,0x18
c0011ed1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ed5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011ed9:	74 29                	je     c0011f04 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011edb:	50                   	push   eax
c0011edc:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011ee1:	99                   	cdq    
c0011ee2:	52                   	push   edx
c0011ee3:	50                   	push   eax
c0011ee4:	ff 33                	push   DWORD PTR [ebx]
c0011ee6:	e8 d9 90 ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c0011eeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011eed:	5a                   	pop    edx
c0011eee:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ef0:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011ef4:	51                   	push   ecx
c0011ef5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011ef9:	6a 00                	push   0x0
c0011efb:	6a 2b                	push   0x2b
c0011efd:	50                   	push   eax
c0011efe:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011f01:	83 c4 20             	add    esp,0x20
c0011f04:	83 c4 18             	add    esp,0x18
c0011f07:	5b                   	pop    ebx
c0011f08:	c3                   	ret    

c0011f09 <CmFreeExtent(Reghive_Tag*, int)>:
c0011f09:	53                   	push   ebx
c0011f0a:	83 ec 3c             	sub    esp,0x3c
c0011f0d:	6a 2b                	push   0x2b
c0011f0f:	6a 00                	push   0x0
c0011f11:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011f15:	53                   	push   ebx
c0011f16:	e8 d5 e5 fe ff       	call   c00004f0 <memset>
c0011f1b:	83 c4 0c             	add    esp,0xc
c0011f1e:	53                   	push   ebx
c0011f1f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f27:	e8 a1 ff ff ff       	call   c0011ecd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f2c:	83 c4 48             	add    esp,0x48
c0011f2f:	5b                   	pop    ebx
c0011f30:	c3                   	ret    

c0011f31 <CmUpdateHeader(Reghive_Tag*)>:
c0011f31:	83 ec 0c             	sub    esp,0xc
c0011f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f38:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011f3c:	74 10                	je     c0011f4e <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011f3e:	52                   	push   edx
c0011f3f:	8d 50 05             	lea    edx,[eax+0x5]
c0011f42:	52                   	push   edx
c0011f43:	6a 00                	push   0x0
c0011f45:	50                   	push   eax
c0011f46:	e8 82 ff ff ff       	call   c0011ecd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f4b:	83 c4 10             	add    esp,0x10
c0011f4e:	83 c4 0c             	add    esp,0xc
c0011f51:	c3                   	ret    

c0011f52 <CmExpand(Reghive_Tag*, int)>:
c0011f52:	55                   	push   ebp
c0011f53:	57                   	push   edi
c0011f54:	83 cf ff             	or     edi,0xffffffff
c0011f57:	56                   	push   esi
c0011f58:	53                   	push   ebx
c0011f59:	83 ec 3c             	sub    esp,0x3c
c0011f5c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0011f60:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0011f64:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011f68:	74 59                	je     c0011fc3 <CmExpand(Reghive_Tag*, int)+0x71>
c0011f6a:	50                   	push   eax
c0011f6b:	31 d2                	xor    edx,edx
c0011f6d:	31 ff                	xor    edi,edi
c0011f6f:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011f73:	52                   	push   edx
c0011f74:	50                   	push   eax
c0011f75:	ff 33                	push   DWORD PTR [ebx]
c0011f77:	e8 48 90 ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c0011f7c:	83 c4 0c             	add    esp,0xc
c0011f7f:	6a 2b                	push   0x2b
c0011f81:	6a 00                	push   0x0
c0011f83:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0011f87:	55                   	push   ebp
c0011f88:	e8 63 e5 fe ff       	call   c00004f0 <memset>
c0011f8d:	83 c4 10             	add    esp,0x10
c0011f90:	39 f7                	cmp    edi,esi
c0011f92:	7d 1b                	jge    c0011faf <CmExpand(Reghive_Tag*, int)+0x5d>
c0011f94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f96:	83 ec 0c             	sub    esp,0xc
c0011f99:	47                   	inc    edi
c0011f9a:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0011f9e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011fa0:	51                   	push   ecx
c0011fa1:	55                   	push   ebp
c0011fa2:	6a 00                	push   0x0
c0011fa4:	6a 2b                	push   0x2b
c0011fa6:	50                   	push   eax
c0011fa7:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011faa:	83 c4 20             	add    esp,0x20
c0011fad:	eb e1                	jmp    c0011f90 <CmExpand(Reghive_Tag*, int)+0x3e>
c0011faf:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0011fb2:	83 ec 0c             	sub    esp,0xc
c0011fb5:	01 fe                	add    esi,edi
c0011fb7:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0011fba:	53                   	push   ebx
c0011fbb:	e8 71 ff ff ff       	call   c0011f31 <CmUpdateHeader(Reghive_Tag*)>
c0011fc0:	83 c4 10             	add    esp,0x10
c0011fc3:	83 c4 3c             	add    esp,0x3c
c0011fc6:	89 f8                	mov    eax,edi
c0011fc8:	5b                   	pop    ebx
c0011fc9:	5e                   	pop    esi
c0011fca:	5f                   	pop    edi
c0011fcb:	5d                   	pop    ebp
c0011fcc:	c3                   	ret    

c0011fcd <CmFindUnusedExtent(Reghive_Tag*)>:
c0011fcd:	55                   	push   ebp
c0011fce:	57                   	push   edi
c0011fcf:	56                   	push   esi
c0011fd0:	53                   	push   ebx
c0011fd1:	83 cb ff             	or     ebx,0xffffffff
c0011fd4:	83 ec 1c             	sub    esp,0x1c
c0011fd7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011fdb:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0011fdf:	74 68                	je     c0012049 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011fe1:	51                   	push   ecx
c0011fe2:	be 2b 00 00 00       	mov    esi,0x2b
c0011fe7:	31 ff                	xor    edi,edi
c0011fe9:	31 db                	xor    ebx,ebx
c0011feb:	6a 00                	push   0x0
c0011fed:	6a 00                	push   0x0
c0011fef:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011ff2:	e8 cd 8f ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c0011ff7:	83 c4 10             	add    esp,0x10
c0011ffa:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0011ffd:	76 3b                	jbe    c001203a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0011fff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012002:	83 ec 0c             	sub    esp,0xc
c0012005:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012009:	8b 10                	mov    edx,DWORD PTR [eax]
c001200b:	51                   	push   ecx
c001200c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012010:	51                   	push   ecx
c0012011:	6a 00                	push   0x0
c0012013:	6a 01                	push   0x1
c0012015:	50                   	push   eax
c0012016:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012019:	83 c4 20             	add    esp,0x20
c001201c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012021:	74 26                	je     c0012049 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012023:	52                   	push   edx
c0012024:	43                   	inc    ebx
c0012025:	57                   	push   edi
c0012026:	56                   	push   esi
c0012027:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001202a:	e8 95 8f ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c001202f:	83 c6 2b             	add    esi,0x2b
c0012032:	83 d7 00             	adc    edi,0x0
c0012035:	83 c4 10             	add    esp,0x10
c0012038:	eb c0                	jmp    c0011ffa <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c001203a:	50                   	push   eax
c001203b:	50                   	push   eax
c001203c:	6a 40                	push   0x40
c001203e:	55                   	push   ebp
c001203f:	e8 0e ff ff ff       	call   c0011f52 <CmExpand(Reghive_Tag*, int)>
c0012044:	83 c4 10             	add    esp,0x10
c0012047:	89 c3                	mov    ebx,eax
c0012049:	83 c4 1c             	add    esp,0x1c
c001204c:	89 d8                	mov    eax,ebx
c001204e:	5b                   	pop    ebx
c001204f:	5e                   	pop    esi
c0012050:	5f                   	pop    edi
c0012051:	5d                   	pop    ebp
c0012052:	c3                   	ret    

c0012053 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012053:	55                   	push   ebp
c0012054:	57                   	push   edi
c0012055:	56                   	push   esi
c0012056:	53                   	push   ebx
c0012057:	81 ec 88 00 00 00    	sub    esp,0x88
c001205d:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012064:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001206b:	e8 5d ff ff ff       	call   c0011fcd <CmFindUnusedExtent(Reghive_Tag*)>
c0012070:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012074:	83 c4 0c             	add    esp,0xc
c0012077:	6a 2b                	push   0x2b
c0012079:	6a 00                	push   0x0
c001207b:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c001207f:	55                   	push   ebp
c0012080:	e8 6b e4 fe ff       	call   c00004f0 <memset>
c0012085:	83 c4 10             	add    esp,0x10
c0012088:	85 db                	test   ebx,ebx
c001208a:	74 12                	je     c001209e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c001208c:	51                   	push   ecx
c001208d:	55                   	push   ebp
c001208e:	53                   	push   ebx
c001208f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012096:	e8 0e fd ff ff       	call   c0011da9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001209b:	83 c4 10             	add    esp,0x10
c001209e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00120a2:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00120a9:	b9 2b 00 00 00       	mov    ecx,0x2b
c00120ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00120b0:	85 db                	test   ebx,ebx
c00120b2:	74 49                	je     c00120fd <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00120b4:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00120b9:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00120be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120c2:	c1 e0 08             	shl    eax,0x8
c00120c5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00120cb:	09 c8                	or     eax,ecx
c00120cd:	74 11                	je     c00120e0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00120cf:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00120d3:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00120d7:	c1 e8 10             	shr    eax,0x10
c00120da:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00120de:	eb 0f                	jmp    c00120ef <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00120e0:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00120e5:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00120ea:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00120ef:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00120f3:	c1 ea 08             	shr    edx,0x8
c00120f6:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00120fb:	eb 0f                	jmp    c001210c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00120fd:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012102:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012107:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001210c:	52                   	push   edx
c001210d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012111:	50                   	push   eax
c0012112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012116:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001211d:	e8 ab fd ff ff       	call   c0011ecd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012122:	83 c4 10             	add    esp,0x10
c0012125:	85 db                	test   ebx,ebx
c0012127:	74 12                	je     c001213b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012129:	50                   	push   eax
c001212a:	55                   	push   ebp
c001212b:	53                   	push   ebx
c001212c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012133:	e8 95 fd ff ff       	call   c0011ecd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012138:	83 c4 10             	add    esp,0x10
c001213b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001213f:	83 c4 7c             	add    esp,0x7c
c0012142:	5b                   	pop    ebx
c0012143:	5e                   	pop    esi
c0012144:	5f                   	pop    edi
c0012145:	5d                   	pop    ebp
c0012146:	c3                   	ret    

c0012147 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012147:	55                   	push   ebp
c0012148:	57                   	push   edi
c0012149:	56                   	push   esi
c001214a:	53                   	push   ebx
c001214b:	bb 27 00 00 00       	mov    ebx,0x27
c0012150:	81 ec 88 00 00 00    	sub    esp,0x88
c0012156:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c001215d:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012164:	e8 b7 e3 fe ff       	call   c0000520 <strlen>
c0012169:	8d 48 26             	lea    ecx,[eax+0x26]
c001216c:	89 c8                	mov    eax,ecx
c001216e:	99                   	cdq    
c001216f:	f7 fb                	idiv   ebx
c0012171:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012175:	83 c4 10             	add    esp,0x10
c0012178:	81 f9 37 01 00 00    	cmp    ecx,0x137
c001217e:	7e 10                	jle    c0012190 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012180:	83 ec 0c             	sub    esp,0xc
c0012183:	68 5c 0d 02 c0       	push   0xc0020d5c
c0012188:	e8 7a e6 ff ff       	call   c0010807 <KePanic(char const*)>
c001218d:	83 c4 10             	add    esp,0x10
c0012190:	53                   	push   ebx
c0012191:	31 ed                	xor    ebp,ebp
c0012193:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012197:	53                   	push   ebx
c0012198:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001219f:	57                   	push   edi
c00121a0:	e8 04 fc ff ff       	call   c0011da9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121a5:	83 c4 10             	add    esp,0x10
c00121a8:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c00121ac:	89 f0                	mov    eax,esi
c00121ae:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c00121b2:	c1 e0 08             	shl    eax,0x8
c00121b5:	09 c6                	or     esi,eax
c00121b7:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00121bb:	c1 e6 08             	shl    esi,0x8
c00121be:	09 c6                	or     esi,eax
c00121c0:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00121c4:	7e 72                	jle    c0012238 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c00121c6:	85 f6                	test   esi,esi
c00121c8:	75 25                	jne    c00121ef <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00121ca:	8d 44 24 45          	lea    eax,[esp+0x45]
c00121ce:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00121d3:	50                   	push   eax
c00121d4:	6a 00                	push   0x0
c00121d6:	6a 00                	push   0x0
c00121d8:	57                   	push   edi
c00121d9:	e8 75 fe ff ff       	call   c0012053 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00121de:	83 c4 10             	add    esp,0x10
c00121e1:	89 c6                	mov    esi,eax
c00121e3:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00121e6:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00121e9:	c1 f8 10             	sar    eax,0x10
c00121ec:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00121ef:	51                   	push   ecx
c00121f0:	8d 54 24 49          	lea    edx,[esp+0x49]
c00121f4:	52                   	push   edx
c00121f5:	56                   	push   esi
c00121f6:	57                   	push   edi
c00121f7:	e8 ad fb ff ff       	call   c0011da9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121fc:	83 c4 0c             	add    esp,0xc
c00121ff:	6a 27                	push   0x27
c0012201:	6a 00                	push   0x0
c0012203:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012207:	51                   	push   ecx
c0012208:	e8 e3 e2 fe ff       	call   c00004f0 <memset>
c001220d:	83 c4 0c             	add    esp,0xc
c0012210:	6b c5 27             	imul   eax,ebp,0x27
c0012213:	6a 27                	push   0x27
c0012215:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c001221c:	50                   	push   eax
c001221d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012221:	51                   	push   ecx
c0012222:	e8 09 e4 fe ff       	call   c0000630 <strncpy>
c0012227:	83 c4 0c             	add    esp,0xc
c001222a:	8d 54 24 49          	lea    edx,[esp+0x49]
c001222e:	52                   	push   edx
c001222f:	56                   	push   esi
c0012230:	57                   	push   edi
c0012231:	e8 97 fc ff ff       	call   c0011ecd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012236:	eb 19                	jmp    c0012251 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012238:	85 f6                	test   esi,esi
c001223a:	74 18                	je     c0012254 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c001223c:	52                   	push   edx
c001223d:	52                   	push   edx
c001223e:	56                   	push   esi
c001223f:	57                   	push   edi
c0012240:	e8 c4 fc ff ff       	call   c0011f09 <CmFreeExtent(Reghive_Tag*, int)>
c0012245:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012249:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c001224d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012251:	83 c4 10             	add    esp,0x10
c0012254:	45                   	inc    ebp
c0012255:	83 c3 03             	add    ebx,0x3
c0012258:	83 fd 07             	cmp    ebp,0x7
c001225b:	0f 85 47 ff ff ff    	jne    c00121a8 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012261:	50                   	push   eax
c0012262:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012266:	50                   	push   eax
c0012267:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001226e:	57                   	push   edi
c001226f:	e8 59 fc ff ff       	call   c0011ecd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012274:	81 c4 8c 00 00 00    	add    esp,0x8c
c001227a:	5b                   	pop    ebx
c001227b:	5e                   	pop    esi
c001227c:	5f                   	pop    edi
c001227d:	5d                   	pop    ebp
c001227e:	c3                   	ret    

c001227f <CmGetMatch(char*, char*, bool, bool*)>:
c001227f:	56                   	push   esi
c0012280:	53                   	push   ebx
c0012281:	50                   	push   eax
c0012282:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012287:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001228b:	74 25                	je     c00122b2 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c001228d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012290:	31 db                	xor    ebx,ebx
c0012292:	50                   	push   eax
c0012293:	50                   	push   eax
c0012294:	8d 04 9d a0 21 02 c0 	lea    eax,[ebx*4-0x3ffdde60]
c001229b:	50                   	push   eax
c001229c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122a0:	e8 2b e4 fe ff       	call   c00006d0 <strcmp>
c00122a5:	83 c4 10             	add    esp,0x10
c00122a8:	85 c0                	test   eax,eax
c00122aa:	74 2e                	je     c00122da <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00122ac:	43                   	inc    ebx
c00122ad:	83 fb 3f             	cmp    ebx,0x3f
c00122b0:	75 e0                	jne    c0012292 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00122b2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00122b5:	31 db                	xor    ebx,ebx
c00122b7:	8d 04 9d a0 21 02 c0 	lea    eax,[ebx*4-0x3ffdde60]
c00122be:	51                   	push   ecx
c00122bf:	51                   	push   ecx
c00122c0:	50                   	push   eax
c00122c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00122c5:	e8 06 e4 fe ff       	call   c00006d0 <strcmp>
c00122ca:	83 c4 10             	add    esp,0x10
c00122cd:	85 c0                	test   eax,eax
c00122cf:	74 09                	je     c00122da <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00122d1:	43                   	inc    ebx
c00122d2:	83 fb 3f             	cmp    ebx,0x3f
c00122d5:	75 e0                	jne    c00122b7 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00122d7:	83 cb ff             	or     ebx,0xffffffff
c00122da:	89 d8                	mov    eax,ebx
c00122dc:	5a                   	pop    edx
c00122dd:	5b                   	pop    ebx
c00122de:	5e                   	pop    esi
c00122df:	c3                   	ret    

c00122e0 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00122e0:	55                   	push   ebp
c00122e1:	31 c0                	xor    eax,eax
c00122e3:	57                   	push   edi
c00122e4:	56                   	push   esi
c00122e5:	53                   	push   ebx
c00122e6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00122ea:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00122ee:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00122f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122f6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00122f8:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00122fb:	83 fd 1f             	cmp    ebp,0x1f
c00122fe:	7f 0b                	jg     c001230b <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012300:	0f b6 c2             	movzx  eax,dl
c0012303:	d3 e0                	shl    eax,cl
c0012305:	09 07                	or     DWORD PTR [edi],eax
c0012307:	b0 01                	mov    al,0x1
c0012309:	01 33                	add    DWORD PTR [ebx],esi
c001230b:	5b                   	pop    ebx
c001230c:	5e                   	pop    esi
c001230d:	5f                   	pop    edi
c001230e:	5d                   	pop    ebp
c001230f:	c3                   	ret    

c0012310 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012310:	57                   	push   edi
c0012311:	56                   	push   esi
c0012312:	53                   	push   ebx
c0012313:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012317:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001231b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001231f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012323:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012325:	7c 17                	jl     c001233e <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012327:	8b 17                	mov    edx,DWORD PTR [edi]
c0012329:	b8 01 00 00 00       	mov    eax,0x1
c001232e:	d3 e0                	shl    eax,cl
c0012330:	48                   	dec    eax
c0012331:	21 d0                	and    eax,edx
c0012333:	d3 ea                	shr    edx,cl
c0012335:	89 17                	mov    DWORD PTR [edi],edx
c0012337:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012339:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001233c:	eb 05                	jmp    c0012343 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c001233e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012341:	31 c0                	xor    eax,eax
c0012343:	5b                   	pop    ebx
c0012344:	5e                   	pop    esi
c0012345:	5f                   	pop    edi
c0012346:	c3                   	ret    

c0012347 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012347:	83 ec 40             	sub    esp,0x40
c001234a:	8d 44 24 09          	lea    eax,[esp+0x9]
c001234e:	50                   	push   eax
c001234f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012353:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012357:	e8 4d fa ff ff       	call   c0011da9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001235c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012360:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012364:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012368:	89 10                	mov    DWORD PTR [eax],edx
c001236a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001236d:	83 c4 4c             	add    esp,0x4c
c0012370:	c3                   	ret    

c0012371 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012371:	55                   	push   ebp
c0012372:	57                   	push   edi
c0012373:	56                   	push   esi
c0012374:	53                   	push   ebx
c0012375:	83 ec 40             	sub    esp,0x40
c0012378:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001237c:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012380:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012384:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012388:	53                   	push   ebx
c0012389:	56                   	push   esi
c001238a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001238e:	e8 16 fa ff ff       	call   c0011da9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012393:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012397:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001239b:	83 c4 0c             	add    esp,0xc
c001239e:	53                   	push   ebx
c001239f:	56                   	push   esi
c00123a0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00123a4:	e8 24 fb ff ff       	call   c0011ecd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00123a9:	83 c4 4c             	add    esp,0x4c
c00123ac:	5b                   	pop    ebx
c00123ad:	5e                   	pop    esi
c00123ae:	5f                   	pop    edi
c00123af:	5d                   	pop    ebp
c00123b0:	c3                   	ret    

c00123b1 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00123b1:	55                   	push   ebp
c00123b2:	57                   	push   edi
c00123b3:	56                   	push   esi
c00123b4:	31 f6                	xor    esi,esi
c00123b6:	53                   	push   ebx
c00123b7:	31 db                	xor    ebx,ebx
c00123b9:	83 ec 40             	sub    esp,0x40
c00123bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00123c4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00123cc:	6a 12                	push   0x12
c00123ce:	68 ee 00 00 00       	push   0xee
c00123d3:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00123d7:	e8 14 e1 fe ff       	call   c00004f0 <memset>
c00123dc:	83 c4 10             	add    esp,0x10
c00123df:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00123e3:	6a 08                	push   0x8
c00123e5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00123e9:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00123ed:	50                   	push   eax
c00123ee:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00123f2:	55                   	push   ebp
c00123f3:	57                   	push   edi
c00123f4:	e8 e7 fe ff ff       	call   c00122e0 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00123f9:	83 c4 10             	add    esp,0x10
c00123fc:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012400:	50                   	push   eax
c0012401:	6a 06                	push   0x6
c0012403:	55                   	push   ebp
c0012404:	57                   	push   edi
c0012405:	e8 06 ff ff ff       	call   c0012310 <CmGetShift(unsigned int*, int*, int, bool*)>
c001240a:	83 c4 10             	add    esp,0x10
c001240d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012412:	74 07                	je     c001241b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012414:	46                   	inc    esi
c0012415:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012419:	eb e1                	jmp    c00123fc <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001241b:	43                   	inc    ebx
c001241c:	83 fb 12             	cmp    ebx,0x12
c001241f:	75 c2                	jne    c00123e3 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012421:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012425:	31 f6                	xor    esi,esi
c0012427:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001242a:	50                   	push   eax
c001242b:	50                   	push   eax
c001242c:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012431:	46                   	inc    esi
c0012432:	8d 04 85 a0 21 02 c0 	lea    eax,[eax*4-0x3ffdde60]
c0012439:	50                   	push   eax
c001243a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001243e:	e8 7d e3 fe ff       	call   c00007c0 <strcat>
c0012443:	83 c4 10             	add    esp,0x10
c0012446:	83 fe 18             	cmp    esi,0x18
c0012449:	75 df                	jne    c001242a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001244b:	83 c4 3c             	add    esp,0x3c
c001244e:	31 c0                	xor    eax,eax
c0012450:	5b                   	pop    ebx
c0012451:	5e                   	pop    esi
c0012452:	5f                   	pop    edi
c0012453:	5d                   	pop    ebp
c0012454:	c3                   	ret    

c0012455 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012455:	83 ec 40             	sub    esp,0x40
c0012458:	8d 44 24 09          	lea    eax,[esp+0x9]
c001245c:	50                   	push   eax
c001245d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012461:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012465:	e8 3f f9 ff ff       	call   c0011da9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001246a:	58                   	pop    eax
c001246b:	5a                   	pop    edx
c001246c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012470:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012474:	50                   	push   eax
c0012475:	e8 37 ff ff ff       	call   c00123b1 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001247a:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001247f:	83 c4 4c             	add    esp,0x4c
c0012482:	c3                   	ret    

c0012483 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012483:	55                   	push   ebp
c0012484:	57                   	push   edi
c0012485:	56                   	push   esi
c0012486:	53                   	push   ebx
c0012487:	31 db                	xor    ebx,ebx
c0012489:	83 ec 70             	sub    esp,0x70
c001248c:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012493:	6a 30                	push   0x30
c0012495:	6a 00                	push   0x0
c0012497:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001249b:	56                   	push   esi
c001249c:	e8 4f e0 fe ff       	call   c00004f0 <memset>
c00124a1:	83 c4 10             	add    esp,0x10
c00124a4:	83 ec 0c             	sub    esp,0xc
c00124a7:	57                   	push   edi
c00124a8:	e8 73 e0 fe ff       	call   c0000520 <strlen>
c00124ad:	83 c4 10             	add    esp,0x10
c00124b0:	39 d8                	cmp    eax,ebx
c00124b2:	76 16                	jbe    c00124ca <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00124b4:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00124b8:	83 ec 0c             	sub    esp,0xc
c00124bb:	50                   	push   eax
c00124bc:	e8 ef e3 fe ff       	call   c00008b0 <toupper>
c00124c1:	83 c4 10             	add    esp,0x10
c00124c4:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00124c7:	43                   	inc    ebx
c00124c8:	eb da                	jmp    c00124a4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00124ca:	52                   	push   edx
c00124cb:	31 db                	xor    ebx,ebx
c00124cd:	31 ff                	xor    edi,edi
c00124cf:	6a 18                	push   0x18
c00124d1:	6a 3f                	push   0x3f
c00124d3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00124d7:	50                   	push   eax
c00124d8:	e8 13 e0 fe ff       	call   c00004f0 <memset>
c00124dd:	83 c4 10             	add    esp,0x10
c00124e0:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c00124e4:	8d 74 24 10          	lea    esi,[esp+0x10]
c00124e8:	84 c0                	test   al,al
c00124ea:	0f 84 af 00 00 00    	je     c001259f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00124f0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00124f3:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00124f7:	83 ec 0c             	sub    esp,0xc
c00124fa:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00124fe:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0012503:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012507:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c001250c:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012510:	56                   	push   esi
c0012511:	e8 0a e0 fe ff       	call   c0000520 <strlen>
c0012516:	83 c4 10             	add    esp,0x10
c0012519:	85 c0                	test   eax,eax
c001251b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001251f:	74 0b                	je     c001252c <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012521:	50                   	push   eax
c0012522:	6a 01                	push   0x1
c0012524:	56                   	push   esi
c0012525:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012529:	50                   	push   eax
c001252a:	eb 0a                	jmp    c0012536 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001252c:	50                   	push   eax
c001252d:	6a 00                	push   0x0
c001252f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012533:	50                   	push   eax
c0012534:	6a 00                	push   0x0
c0012536:	e8 44 fd ff ff       	call   c001227f <CmGetMatch(char*, char*, bool, bool*)>
c001253b:	83 c4 10             	add    esp,0x10
c001253e:	83 f8 ff             	cmp    eax,0xffffffff
c0012541:	75 1a                	jne    c001255d <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012543:	83 ec 0c             	sub    esp,0xc
c0012546:	68 71 0d 02 c0       	push   0xc0020d71
c001254b:	e8 b7 e2 ff ff       	call   c0010807 <KePanic(char const*)>
c0012550:	83 c4 10             	add    esp,0x10
c0012553:	b8 02 00 00 00       	mov    eax,0x2
c0012558:	e9 bb 00 00 00       	jmp    c0012618 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c001255d:	83 ff 18             	cmp    edi,0x18
c0012560:	75 1a                	jne    c001257c <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012562:	83 ec 0c             	sub    esp,0xc
c0012565:	68 86 0d 02 c0       	push   0xc0020d86
c001256a:	e8 98 e2 ff ff       	call   c0010807 <KePanic(char const*)>
c001256f:	83 c4 10             	add    esp,0x10
c0012572:	b8 01 00 00 00       	mov    eax,0x1
c0012577:	e9 9c 00 00 00       	jmp    c0012618 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c001257c:	47                   	inc    edi
c001257d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012582:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012586:	0f 45 dd             	cmovne ebx,ebp
c0012589:	83 ec 0c             	sub    esp,0xc
c001258c:	56                   	push   esi
c001258d:	e8 8e df fe ff       	call   c0000520 <strlen>
c0012592:	83 c4 10             	add    esp,0x10
c0012595:	85 c0                	test   eax,eax
c0012597:	74 06                	je     c001259f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012599:	43                   	inc    ebx
c001259a:	e9 41 ff ff ff       	jmp    c00124e0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001259f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00125a7:	31 db                	xor    ebx,ebx
c00125a9:	31 ff                	xor    edi,edi
c00125ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00125b3:	50                   	push   eax
c00125b4:	6a 12                	push   0x12
c00125b6:	68 ee 00 00 00       	push   0xee
c00125bb:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00125c2:	e8 29 df fe ff       	call   c00004f0 <memset>
c00125c7:	83 c4 10             	add    esp,0x10
c00125ca:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00125ce:	83 fb 17             	cmp    ebx,0x17
c00125d1:	7e 26                	jle    c00125f9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00125d3:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00125d7:	50                   	push   eax
c00125d8:	6a 08                	push   0x8
c00125da:	55                   	push   ebp
c00125db:	56                   	push   esi
c00125dc:	e8 2f fd ff ff       	call   c0012310 <CmGetShift(unsigned int*, int*, int, bool*)>
c00125e1:	83 c4 10             	add    esp,0x10
c00125e4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00125e9:	74 26                	je     c0012611 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c00125eb:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00125f2:	4b                   	dec    ebx
c00125f3:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00125f6:	47                   	inc    edi
c00125f7:	eb 1c                	jmp    c0012615 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c00125f9:	6a 06                	push   0x6
c00125fb:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0012600:	50                   	push   eax
c0012601:	55                   	push   ebp
c0012602:	56                   	push   esi
c0012603:	e8 d8 fc ff ff       	call   c00122e0 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012608:	83 c4 10             	add    esp,0x10
c001260b:	84 c0                	test   al,al
c001260d:	75 06                	jne    c0012615 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001260f:	eb c2                	jmp    c00125d3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0012611:	31 c0                	xor    eax,eax
c0012613:	eb 03                	jmp    c0012618 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012615:	43                   	inc    ebx
c0012616:	eb b2                	jmp    c00125ca <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0012618:	83 c4 6c             	add    esp,0x6c
c001261b:	5b                   	pop    ebx
c001261c:	5e                   	pop    esi
c001261d:	5f                   	pop    edi
c001261e:	5d                   	pop    ebp
c001261f:	c3                   	ret    

c0012620 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012620:	53                   	push   ebx
c0012621:	83 ec 3c             	sub    esp,0x3c
c0012624:	6a 2b                	push   0x2b
c0012626:	6a 00                	push   0x0
c0012628:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001262c:	53                   	push   ebx
c001262d:	e8 be de fe ff       	call   c00004f0 <memset>
c0012632:	58                   	pop    eax
c0012633:	5a                   	pop    edx
c0012634:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012638:	50                   	push   eax
c0012639:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001263d:	e8 41 fe ff ff       	call   c0012483 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012642:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012647:	83 c4 0c             	add    esp,0xc
c001264a:	6a 15                	push   0x15
c001264c:	6a 00                	push   0x0
c001264e:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012652:	50                   	push   eax
c0012653:	e8 98 de fe ff       	call   c00004f0 <memset>
c0012658:	53                   	push   ebx
c0012659:	6a 00                	push   0x0
c001265b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001265f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012663:	e8 eb f9 ff ff       	call   c0012053 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012668:	83 c4 58             	add    esp,0x58
c001266b:	5b                   	pop    ebx
c001266c:	c3                   	ret    

c001266d <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001266d:	56                   	push   esi
c001266e:	53                   	push   ebx
c001266f:	83 ec 48             	sub    esp,0x48
c0012672:	6a 12                	push   0x12
c0012674:	68 ff 00 00 00       	push   0xff
c0012679:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001267d:	56                   	push   esi
c001267e:	e8 6d de fe ff       	call   c00004f0 <memset>
c0012683:	5a                   	pop    edx
c0012684:	59                   	pop    ecx
c0012685:	56                   	push   esi
c0012686:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001268a:	e8 f4 fd ff ff       	call   c0012483 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001268f:	83 c4 10             	add    esp,0x10
c0012692:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012696:	85 db                	test   ebx,ebx
c0012698:	74 42                	je     c00126dc <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001269a:	50                   	push   eax
c001269b:	8d 44 24 19          	lea    eax,[esp+0x19]
c001269f:	50                   	push   eax
c00126a0:	53                   	push   ebx
c00126a1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126a5:	e8 ff f6 ff ff       	call   c0011da9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00126aa:	83 c4 0c             	add    esp,0xc
c00126ad:	6a 12                	push   0x12
c00126af:	8d 44 24 21          	lea    eax,[esp+0x21]
c00126b3:	50                   	push   eax
c00126b4:	56                   	push   esi
c00126b5:	e8 c6 dc fe ff       	call   c0000380 <memcmp>
c00126ba:	83 c4 10             	add    esp,0x10
c00126bd:	85 c0                	test   eax,eax
c00126bf:	74 1e                	je     c00126df <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00126c1:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00126c6:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00126cb:	c1 e3 08             	shl    ebx,0x8
c00126ce:	09 d8                	or     eax,ebx
c00126d0:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00126d5:	c1 e3 10             	shl    ebx,0x10
c00126d8:	09 c3                	or     ebx,eax
c00126da:	eb ba                	jmp    c0012696 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00126dc:	83 cb ff             	or     ebx,0xffffffff
c00126df:	83 c4 44             	add    esp,0x44
c00126e2:	89 d8                	mov    eax,ebx
c00126e4:	5b                   	pop    ebx
c00126e5:	5e                   	pop    esi
c00126e6:	c3                   	ret    

c00126e7 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00126e7:	57                   	push   edi
c00126e8:	56                   	push   esi
c00126e9:	53                   	push   ebx
c00126ea:	83 ec 34             	sub    esp,0x34
c00126ed:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00126f1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00126f5:	6a 2b                	push   0x2b
c00126f7:	6a 00                	push   0x0
c00126f9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00126fd:	53                   	push   ebx
c00126fe:	e8 ed dd fe ff       	call   c00004f0 <memset>
c0012703:	58                   	pop    eax
c0012704:	5a                   	pop    edx
c0012705:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012709:	50                   	push   eax
c001270a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001270e:	e8 70 fd ff ff       	call   c0012483 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012713:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0012717:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001271b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001271f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012723:	53                   	push   ebx
c0012724:	6a 00                	push   0x0
c0012726:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001272a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001272e:	e8 20 f9 ff ff       	call   c0012053 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012733:	83 c4 50             	add    esp,0x50
c0012736:	5b                   	pop    ebx
c0012737:	5e                   	pop    esi
c0012738:	5f                   	pop    edi
c0012739:	c3                   	ret    

c001273a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001273a:	55                   	push   ebp
c001273b:	57                   	push   edi
c001273c:	56                   	push   esi
c001273d:	53                   	push   ebx
c001273e:	83 ec 40             	sub    esp,0x40
c0012741:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012745:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012749:	6a 2b                	push   0x2b
c001274b:	6a 00                	push   0x0
c001274d:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012751:	56                   	push   esi
c0012752:	e8 99 dd fe ff       	call   c00004f0 <memset>
c0012757:	5f                   	pop    edi
c0012758:	89 ef                	mov    edi,ebp
c001275a:	58                   	pop    eax
c001275b:	8d 44 24 11          	lea    eax,[esp+0x11]
c001275f:	50                   	push   eax
c0012760:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012764:	e8 1a fd ff ff       	call   c0012483 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012769:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001276e:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012773:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012778:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001277d:	83 c4 10             	add    esp,0x10
c0012780:	85 ed                	test   ebp,ebp
c0012782:	74 14                	je     c0012798 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012784:	51                   	push   ecx
c0012785:	51                   	push   ecx
c0012786:	57                   	push   edi
c0012787:	53                   	push   ebx
c0012788:	e8 0e f7 ff ff       	call   c0011e9b <CmGetNext(Reghive_Tag*, int)>
c001278d:	83 c4 10             	add    esp,0x10
c0012790:	85 c0                	test   eax,eax
c0012792:	74 04                	je     c0012798 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012794:	89 c7                	mov    edi,eax
c0012796:	eb e8                	jmp    c0012780 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012798:	56                   	push   esi
c0012799:	6a 00                	push   0x0
c001279b:	57                   	push   edi
c001279c:	53                   	push   ebx
c001279d:	e8 b1 f8 ff ff       	call   c0012053 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00127a2:	83 c4 0c             	add    esp,0xc
c00127a5:	56                   	push   esi
c00127a6:	89 c7                	mov    edi,eax
c00127a8:	50                   	push   eax
c00127a9:	53                   	push   ebx
c00127aa:	e8 fa f5 ff ff       	call   c0011da9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127af:	58                   	pop    eax
c00127b0:	5a                   	pop    edx
c00127b1:	6a 6c                	push   0x6c
c00127b3:	6a 00                	push   0x0
c00127b5:	6a 00                	push   0x0
c00127b7:	68 97 0d 02 c0       	push   0xc0020d97
c00127bc:	57                   	push   edi
c00127bd:	53                   	push   ebx
c00127be:	e8 24 ff ff ff       	call   c00126e7 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00127c3:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00127c7:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00127cb:	c1 e8 10             	shr    eax,0x10
c00127ce:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00127d2:	83 c4 1c             	add    esp,0x1c
c00127d5:	56                   	push   esi
c00127d6:	57                   	push   edi
c00127d7:	53                   	push   ebx
c00127d8:	e8 f0 f6 ff ff       	call   c0011ecd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00127dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00127e2:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00127e7:	c1 e0 08             	shl    eax,0x8
c00127ea:	09 c2                	or     edx,eax
c00127ec:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00127f1:	83 c4 4c             	add    esp,0x4c
c00127f4:	5b                   	pop    ebx
c00127f5:	5e                   	pop    esi
c00127f6:	5f                   	pop    edi
c00127f7:	c1 e0 10             	shl    eax,0x10
c00127fa:	5d                   	pop    ebp
c00127fb:	09 d0                	or     eax,edx
c00127fd:	c3                   	ret    

c00127fe <zStrtok(char*, char const*)>:
c00127fe:	55                   	push   ebp
c00127ff:	57                   	push   edi
c0012800:	56                   	push   esi
c0012801:	53                   	push   ebx
c0012802:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012806:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001280a:	85 db                	test   ebx,ebx
c001280c:	74 2f                	je     c001283d <zStrtok(char*, char const*)+0x3f>
c001280e:	85 c0                	test   eax,eax
c0012810:	75 09                	jne    c001281b <zStrtok(char*, char const*)+0x1d>
c0012812:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012817:	85 c0                	test   eax,eax
c0012819:	74 50                	je     c001286b <zStrtok(char*, char const*)+0x6d>
c001281b:	31 c9                	xor    ecx,ecx
c001281d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012821:	74 03                	je     c0012826 <zStrtok(char*, char const*)+0x28>
c0012823:	41                   	inc    ecx
c0012824:	eb f7                	jmp    c001281d <zStrtok(char*, char const*)+0x1f>
c0012826:	31 d2                	xor    edx,edx
c0012828:	39 ca                	cmp    edx,ecx
c001282a:	74 15                	je     c0012841 <zStrtok(char*, char const*)+0x43>
c001282c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0012830:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012833:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0012836:	39 ee                	cmp    esi,ebp
c0012838:	74 13                	je     c001284d <zStrtok(char*, char const*)+0x4f>
c001283a:	42                   	inc    edx
c001283b:	eb eb                	jmp    c0012828 <zStrtok(char*, char const*)+0x2a>
c001283d:	31 c0                	xor    eax,eax
c001283f:	eb 2a                	jmp    c001286b <zStrtok(char*, char const*)+0x6d>
c0012841:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c001284b:	eb 1e                	jmp    c001286b <zStrtok(char*, char const*)+0x6d>
c001284d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012850:	39 ce                	cmp    esi,ecx
c0012852:	75 0a                	jne    c001285e <zStrtok(char*, char const*)+0x60>
c0012854:	40                   	inc    eax
c0012855:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c001285a:	89 d8                	mov    eax,ebx
c001285c:	eb 0d                	jmp    c001286b <zStrtok(char*, char const*)+0x6d>
c001285e:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0012862:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0012865:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c001286b:	5b                   	pop    ebx
c001286c:	5e                   	pop    esi
c001286d:	5f                   	pop    edi
c001286e:	5d                   	pop    ebp
c001286f:	c3                   	ret    

c0012870 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012870:	57                   	push   edi
c0012871:	56                   	push   esi
c0012872:	53                   	push   ebx
c0012873:	81 ec 08 01 00 00    	sub    esp,0x108
c0012879:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012880:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012887:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001288b:	53                   	push   ebx
c001288c:	e8 5f dd fe ff       	call   c00005f0 <strcpy>
c0012891:	59                   	pop    ecx
c0012892:	5e                   	pop    esi
c0012893:	68 fb 10 02 c0       	push   0xc00210fb
c0012898:	53                   	push   ebx
c0012899:	bb 01 00 00 00       	mov    ebx,0x1
c001289e:	e8 5b ff ff ff       	call   c00127fe <zStrtok(char*, char const*)>
c00128a3:	83 c4 10             	add    esp,0x10
c00128a6:	85 c0                	test   eax,eax
c00128a8:	74 3b                	je     c00128e5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00128aa:	52                   	push   edx
c00128ab:	50                   	push   eax
c00128ac:	6a 01                	push   0x1
c00128ae:	57                   	push   edi
c00128af:	e8 b9 fd ff ff       	call   c001266d <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00128b4:	59                   	pop    ecx
c00128b5:	5e                   	pop    esi
c00128b6:	68 fb 10 02 c0       	push   0xc00210fb
c00128bb:	89 c3                	mov    ebx,eax
c00128bd:	6a 00                	push   0x0
c00128bf:	e8 3a ff ff ff       	call   c00127fe <zStrtok(char*, char const*)>
c00128c4:	83 c4 10             	add    esp,0x10
c00128c7:	85 c0                	test   eax,eax
c00128c9:	89 c6                	mov    esi,eax
c00128cb:	74 18                	je     c00128e5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00128cd:	52                   	push   edx
c00128ce:	52                   	push   edx
c00128cf:	53                   	push   ebx
c00128d0:	57                   	push   edi
c00128d1:	e8 86 f5 ff ff       	call   c0011e5c <CmEnterDirectory(Reghive_Tag*, int)>
c00128d6:	83 c4 10             	add    esp,0x10
c00128d9:	83 f8 ff             	cmp    eax,0xffffffff
c00128dc:	89 c3                	mov    ebx,eax
c00128de:	74 05                	je     c00128e5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00128e0:	50                   	push   eax
c00128e1:	56                   	push   esi
c00128e2:	53                   	push   ebx
c00128e3:	eb c9                	jmp    c00128ae <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00128e5:	81 c4 00 01 00 00    	add    esp,0x100
c00128eb:	89 d8                	mov    eax,ebx
c00128ed:	5b                   	pop    ebx
c00128ee:	5e                   	pop    esi
c00128ef:	5f                   	pop    edi
c00128f0:	c3                   	ret    

c00128f1 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00128f1:	55                   	push   ebp
c00128f2:	57                   	push   edi
c00128f3:	56                   	push   esi
c00128f4:	53                   	push   ebx
c00128f5:	83 ec 5c             	sub    esp,0x5c
c00128f8:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00128fc:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012900:	85 db                	test   ebx,ebx
c0012902:	0f 8e 84 00 00 00    	jle    c001298c <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012908:	57                   	push   edi
c0012909:	31 ed                	xor    ebp,ebp
c001290b:	6a 32                	push   0x32
c001290d:	6a 00                	push   0x0
c001290f:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012913:	57                   	push   edi
c0012914:	e8 d7 db fe ff       	call   c00004f0 <memset>
c0012919:	83 c4 0c             	add    esp,0xc
c001291c:	57                   	push   edi
c001291d:	53                   	push   ebx
c001291e:	56                   	push   esi
c001291f:	e8 31 fb ff ff       	call   c0012455 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012924:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012928:	83 c4 10             	add    esp,0x10
c001292b:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c001292f:	7d 13                	jge    c0012944 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012931:	83 ec 0c             	sub    esp,0xc
c0012934:	45                   	inc    ebp
c0012935:	68 6c 14 02 c0       	push   0xc002146c
c001293a:	e8 62 7f ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c001293f:	83 c4 10             	add    esp,0x10
c0012942:	eb e7                	jmp    c001292b <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012944:	51                   	push   ecx
c0012945:	57                   	push   edi
c0012946:	53                   	push   ebx
c0012947:	68 9d 0d 02 c0       	push   0xc0020d9d
c001294c:	e8 50 7f ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0012951:	83 c4 10             	add    esp,0x10
c0012954:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012959:	75 1e                	jne    c0012979 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001295b:	52                   	push   edx
c001295c:	52                   	push   edx
c001295d:	53                   	push   ebx
c001295e:	56                   	push   esi
c001295f:	e8 f8 f4 ff ff       	call   c0011e5c <CmEnterDirectory(Reghive_Tag*, int)>
c0012964:	83 c4 0c             	add    esp,0xc
c0012967:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001296b:	8d 51 04             	lea    edx,[ecx+0x4]
c001296e:	52                   	push   edx
c001296f:	50                   	push   eax
c0012970:	56                   	push   esi
c0012971:	e8 7b ff ff ff       	call   c00128f1 <CmDisplayTree(Reghive_Tag*, int, int)>
c0012976:	83 c4 10             	add    esp,0x10
c0012979:	50                   	push   eax
c001297a:	50                   	push   eax
c001297b:	53                   	push   ebx
c001297c:	56                   	push   esi
c001297d:	e8 19 f5 ff ff       	call   c0011e9b <CmGetNext(Reghive_Tag*, int)>
c0012982:	83 c4 10             	add    esp,0x10
c0012985:	89 c3                	mov    ebx,eax
c0012987:	e9 74 ff ff ff       	jmp    c0012900 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c001298c:	83 c4 5c             	add    esp,0x5c
c001298f:	5b                   	pop    ebx
c0012990:	5e                   	pop    esi
c0012991:	5f                   	pop    edi
c0012992:	5d                   	pop    ebp
c0012993:	c3                   	ret    

c0012994 <CmSplitFinalSlashInPlace(char*)>:
c0012994:	53                   	push   ebx
c0012995:	83 ec 14             	sub    esp,0x14
c0012998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001299c:	53                   	push   ebx
c001299d:	e8 7e db fe ff       	call   c0000520 <strlen>
c00129a2:	83 c4 10             	add    esp,0x10
c00129a5:	48                   	dec    eax
c00129a6:	85 c0                	test   eax,eax
c00129a8:	74 15                	je     c00129bf <CmSplitFinalSlashInPlace(char*)+0x2b>
c00129aa:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00129ae:	8d 14 03             	lea    edx,[ebx+eax*1]
c00129b1:	75 09                	jne    c00129bc <CmSplitFinalSlashInPlace(char*)+0x28>
c00129b3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00129b6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00129ba:	eb 05                	jmp    c00129c1 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00129bc:	48                   	dec    eax
c00129bd:	eb e7                	jmp    c00129a6 <CmSplitFinalSlashInPlace(char*)+0x12>
c00129bf:	31 c0                	xor    eax,eax
c00129c1:	83 c4 08             	add    esp,0x8
c00129c4:	5b                   	pop    ebx
c00129c5:	c3                   	ret    

c00129c6 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00129c6:	55                   	push   ebp
c00129c7:	57                   	push   edi
c00129c8:	56                   	push   esi
c00129c9:	53                   	push   ebx
c00129ca:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00129d0:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00129d7:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00129da:	8d 43 01             	lea    eax,[ebx+0x1]
c00129dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129e1:	89 f0                	mov    eax,esi
c00129e3:	3c 40                	cmp    al,0x40
c00129e5:	75 1b                	jne    c0012a02 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c00129e7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00129ea:	85 c0                	test   eax,eax
c00129ec:	74 08                	je     c00129f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00129ee:	83 f8 3a             	cmp    eax,0x3a
c00129f1:	74 03                	je     c00129f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c00129f3:	43                   	inc    ebx
c00129f4:	eb f1                	jmp    c00129e7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c00129f6:	85 c0                	test   eax,eax
c00129f8:	0f 84 45 01 00 00    	je     c0012b43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00129fe:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012a01:	43                   	inc    ebx
c0012a02:	50                   	push   eax
c0012a03:	6a 40                	push   0x40
c0012a05:	6a 00                	push   0x0
c0012a07:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012a0b:	50                   	push   eax
c0012a0c:	e8 df da fe ff       	call   c00004f0 <memset>
c0012a11:	89 f1                	mov    ecx,esi
c0012a13:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012a1a:	31 c0                	xor    eax,eax
c0012a1c:	83 c4 10             	add    esp,0x10
c0012a1f:	0f be f1             	movsx  esi,cl
c0012a22:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012a25:	85 d2                	test   edx,edx
c0012a27:	89 d1                	mov    ecx,edx
c0012a29:	0f 84 14 01 00 00    	je     c0012b43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a2f:	3d c7 00 00 00       	cmp    eax,0xc7
c0012a34:	0f 8f 09 01 00 00    	jg     c0012b43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a3a:	83 fa 0a             	cmp    edx,0xa
c0012a3d:	0f 85 f1 00 00 00    	jne    c0012b34 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0012a43:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012a48:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012a4d:	89 c8                	mov    eax,ecx
c0012a4f:	a8 df                	test   al,0xdf
c0012a51:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012a56:	83 f9 23             	cmp    ecx,0x23
c0012a59:	0f 94 c2             	sete   dl
c0012a5c:	89 d5                	mov    ebp,edx
c0012a5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a62:	09 ea                	or     edx,ebp
c0012a64:	80 e2 01             	and    dl,0x1
c0012a67:	75 47                	jne    c0012ab0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012a69:	83 e8 09             	sub    eax,0x9
c0012a6c:	3c 01                	cmp    al,0x1
c0012a6e:	76 40                	jbe    c0012ab0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012a70:	83 f9 5b             	cmp    ecx,0x5b
c0012a73:	75 42                	jne    c0012ab7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012a75:	83 fe 40             	cmp    esi,0x40
c0012a78:	75 36                	jne    c0012ab0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012a7a:	83 ec 0c             	sub    esp,0xc
c0012a7d:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0012a81:	55                   	push   ebp
c0012a82:	e8 99 da fe ff       	call   c0000520 <strlen>
c0012a87:	83 c4 10             	add    esp,0x10
c0012a8a:	83 f8 3f             	cmp    eax,0x3f
c0012a8d:	0f 87 b0 00 00 00    	ja     c0012b43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012a93:	50                   	push   eax
c0012a94:	50                   	push   eax
c0012a95:	55                   	push   ebp
c0012a96:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0012a9a:	55                   	push   ebp
c0012a9b:	e8 50 db fe ff       	call   c00005f0 <strcpy>
c0012aa0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012aa3:	e8 78 da fe ff       	call   c0000520 <strlen>
c0012aa8:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012aad:	83 c4 10             	add    esp,0x10
c0012ab0:	31 d2                	xor    edx,edx
c0012ab2:	e9 84 00 00 00       	jmp    c0012b3b <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0012ab7:	83 fe 40             	cmp    esi,0x40
c0012aba:	74 06                	je     c0012ac2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0012abc:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012ac0:	eb 19                	jmp    c0012adb <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012ac2:	51                   	push   ecx
c0012ac3:	51                   	push   ecx
c0012ac4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ac8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012acc:	50                   	push   eax
c0012acd:	e8 fe db fe ff       	call   c00006d0 <strcmp>
c0012ad2:	83 c4 10             	add    esp,0x10
c0012ad5:	85 c0                	test   eax,eax
c0012ad7:	75 d7                	jne    c0012ab0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012ad9:	eb e1                	jmp    c0012abc <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0012adb:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0012ade:	85 c9                	test   ecx,ecx
c0012ae0:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012ae5:	83 f9 3d             	cmp    ecx,0x3d
c0012ae8:	0f 94 c0             	sete   al
c0012aeb:	89 c5                	mov    ebp,eax
c0012aed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012af1:	09 e8                	or     eax,ebp
c0012af3:	a8 01                	test   al,0x1
c0012af5:	89 c5                	mov    ebp,eax
c0012af7:	75 03                	jne    c0012afc <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0012af9:	42                   	inc    edx
c0012afa:	eb df                	jmp    c0012adb <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0012afc:	85 c9                	test   ecx,ecx
c0012afe:	74 43                	je     c0012b43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0012b00:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b04:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012b07:	52                   	push   edx
c0012b08:	52                   	push   edx
c0012b09:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012b0d:	50                   	push   eax
c0012b0e:	53                   	push   ebx
c0012b0f:	e8 bc db fe ff       	call   c00006d0 <strcmp>
c0012b14:	83 c4 10             	add    esp,0x10
c0012b17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b1b:	85 c0                	test   eax,eax
c0012b1d:	75 91                	jne    c0012ab0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0012b1f:	42                   	inc    edx
c0012b20:	50                   	push   eax
c0012b21:	50                   	push   eax
c0012b22:	52                   	push   edx
c0012b23:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012b2a:	e8 c1 da fe ff       	call   c00005f0 <strcpy>
c0012b2f:	83 c4 10             	add    esp,0x10
c0012b32:	eb 11                	jmp    c0012b45 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012b34:	8d 50 01             	lea    edx,[eax+0x1]
c0012b37:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012b3b:	47                   	inc    edi
c0012b3c:	89 d0                	mov    eax,edx
c0012b3e:	e9 df fe ff ff       	jmp    c0012a22 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0012b43:	31 ed                	xor    ebp,ebp
c0012b45:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012b4b:	89 e8                	mov    eax,ebp
c0012b4d:	5b                   	pop    ebx
c0012b4e:	5e                   	pop    esi
c0012b4f:	5f                   	pop    edi
c0012b50:	5d                   	pop    ebp
c0012b51:	c3                   	ret    

c0012b52 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012b52:	57                   	push   edi
c0012b53:	56                   	push   esi
c0012b54:	53                   	push   ebx
c0012b55:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0012b5b:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0012b62:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0012b69:	53                   	push   ebx
c0012b6a:	e8 b1 d9 fe ff       	call   c0000520 <strlen>
c0012b6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b72:	89 c7                	mov    edi,eax
c0012b74:	e8 a7 d9 fe ff       	call   c0000520 <strlen>
c0012b79:	83 c4 10             	add    esp,0x10
c0012b7c:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012b80:	3d ff 00 00 00       	cmp    eax,0xff
c0012b85:	0f 87 d3 00 00 00    	ja     c0012c5e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012b8b:	57                   	push   edi
c0012b8c:	57                   	push   edi
c0012b8d:	56                   	push   esi
c0012b8e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012b92:	56                   	push   esi
c0012b93:	e8 58 da fe ff       	call   c00005f0 <strcpy>
c0012b98:	58                   	pop    eax
c0012b99:	5a                   	pop    edx
c0012b9a:	68 fb 10 02 c0       	push   0xc00210fb
c0012b9f:	56                   	push   esi
c0012ba0:	e8 1b dc fe ff       	call   c00007c0 <strcat>
c0012ba5:	59                   	pop    ecx
c0012ba6:	5f                   	pop    edi
c0012ba7:	53                   	push   ebx
c0012ba8:	56                   	push   esi
c0012ba9:	e8 12 dc fe ff       	call   c00007c0 <strcat>
c0012bae:	58                   	pop    eax
c0012baf:	5a                   	pop    edx
c0012bb0:	68 a7 0d 02 c0       	push   0xc0020da7
c0012bb5:	56                   	push   esi
c0012bb6:	e8 05 dc fe ff       	call   c00007c0 <strcat>
c0012bbb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012bc2:	e8 68 4e ff ff       	call   c0007a2f <malloc>
c0012bc7:	83 c4 0c             	add    esp,0xc
c0012bca:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012bd0:	89 c3                	mov    ebx,eax
c0012bd2:	56                   	push   esi
c0012bd3:	50                   	push   eax
c0012bd4:	e8 71 82 ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c0012bd9:	83 c4 10             	add    esp,0x10
c0012bdc:	85 db                	test   ebx,ebx
c0012bde:	74 7e                	je     c0012c5e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012be0:	51                   	push   ecx
c0012be1:	51                   	push   ecx
c0012be2:	6a 01                	push   0x1
c0012be4:	53                   	push   ebx
c0012be5:	e8 1c 83 ff ff       	call   c000af06 <File::open(FileOpenMode)>
c0012bea:	83 c4 10             	add    esp,0x10
c0012bed:	85 c0                	test   eax,eax
c0012bef:	74 08                	je     c0012bf9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012bf1:	83 ec 0c             	sub    esp,0xc
c0012bf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bf6:	53                   	push   ebx
c0012bf7:	eb 5f                	jmp    c0012c58 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012bf9:	52                   	push   edx
c0012bfa:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012bfe:	50                   	push   eax
c0012bff:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c03:	50                   	push   eax
c0012c04:	53                   	push   ebx
c0012c05:	e8 a8 85 ff ff       	call   c000b1b2 <File::stat(unsigned long long*, bool*)>
c0012c0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c0e:	83 c4 10             	add    esp,0x10
c0012c11:	89 c1                	mov    ecx,eax
c0012c13:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0012c17:	74 31                	je     c0012c4a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c19:	83 ec 0c             	sub    esp,0xc
c0012c1c:	50                   	push   eax
c0012c1d:	e8 0d 4e ff ff       	call   c0007a2f <malloc>
c0012c22:	89 c6                	mov    esi,eax
c0012c24:	58                   	pop    eax
c0012c25:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c27:	8d 54 24 10          	lea    edx,[esp+0x10]
c0012c2b:	52                   	push   edx
c0012c2c:	56                   	push   esi
c0012c2d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c31:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c35:	53                   	push   ebx
c0012c36:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012c39:	83 c4 20             	add    esp,0x20
c0012c3c:	85 c0                	test   eax,eax
c0012c3e:	75 0a                	jne    c0012c4a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c44:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0012c48:	74 18                	je     c0012c62 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012c4a:	83 ec 0c             	sub    esp,0xc
c0012c4d:	53                   	push   ebx
c0012c4e:	e8 11 83 ff ff       	call   c000af64 <File::close()>
c0012c53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c5b:	83 c4 10             	add    esp,0x10
c0012c5e:	31 db                	xor    ebx,ebx
c0012c60:	eb 35                	jmp    c0012c97 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x145>
c0012c62:	83 ec 0c             	sub    esp,0xc
c0012c65:	53                   	push   ebx
c0012c66:	e8 f9 82 ff ff       	call   c000af64 <File::close()>
c0012c6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c70:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c73:	83 c4 0c             	add    esp,0xc
c0012c76:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0012c7d:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0012c84:	56                   	push   esi
c0012c85:	e8 3c fd ff ff       	call   c00129c6 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012c8a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c8d:	88 c3                	mov    bl,al
c0012c8f:	e8 ab 4d ff ff       	call   c0007a3f <free>
c0012c94:	83 c4 10             	add    esp,0x10
c0012c97:	81 c4 10 01 00 00    	add    esp,0x110
c0012c9d:	88 d8                	mov    al,bl
c0012c9f:	5b                   	pop    ebx
c0012ca0:	5e                   	pop    esi
c0012ca1:	5f                   	pop    edi
c0012ca2:	c3                   	ret    

c0012ca3 <Reg::getLine(char*, char*, char*)>:
c0012ca3:	57                   	push   edi
c0012ca4:	56                   	push   esi
c0012ca5:	53                   	push   ebx
c0012ca6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012caa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012cae:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012cb2:	57                   	push   edi
c0012cb3:	56                   	push   esi
c0012cb4:	53                   	push   ebx
c0012cb5:	68 ac 0d 02 c0       	push   0xc0020dac
c0012cba:	e8 93 fe ff ff       	call   c0012b52 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012cbf:	83 c4 10             	add    esp,0x10
c0012cc2:	84 c0                	test   al,al
c0012cc4:	75 10                	jne    c0012cd6 <Reg::getLine(char*, char*, char*)+0x33>
c0012cc6:	57                   	push   edi
c0012cc7:	56                   	push   esi
c0012cc8:	53                   	push   ebx
c0012cc9:	68 d1 0d 02 c0       	push   0xc0020dd1
c0012cce:	e8 7f fe ff ff       	call   c0012b52 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012cd3:	83 c4 10             	add    esp,0x10
c0012cd6:	5b                   	pop    ebx
c0012cd7:	5e                   	pop    esi
c0012cd8:	5f                   	pop    edi
c0012cd9:	c3                   	ret    

c0012cda <Reg::readInt(char*, char*, int*)>:
c0012cda:	55                   	push   ebp
c0012cdb:	57                   	push   edi
c0012cdc:	56                   	push   esi
c0012cdd:	53                   	push   ebx
c0012cde:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012ce4:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0012ce8:	53                   	push   ebx
c0012ce9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012cf0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012cf7:	e8 a7 ff ff ff       	call   c0012ca3 <Reg::getLine(char*, char*, char*)>
c0012cfc:	83 c4 10             	add    esp,0x10
c0012cff:	84 c0                	test   al,al
c0012d01:	0f 84 c3 00 00 00    	je     c0012dca <Reg::readInt(char*, char*, int*)+0xf0>
c0012d07:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0012d0c:	83 fa 2b             	cmp    edx,0x2b
c0012d0f:	74 0c                	je     c0012d1d <Reg::readInt(char*, char*, int*)+0x43>
c0012d11:	83 fa 2d             	cmp    edx,0x2d
c0012d14:	75 0e                	jne    c0012d24 <Reg::readInt(char*, char*, int*)+0x4a>
c0012d16:	ba 01 00 00 00       	mov    edx,0x1
c0012d1b:	eb 0b                	jmp    c0012d28 <Reg::readInt(char*, char*, int*)+0x4e>
c0012d1d:	ba 01 00 00 00       	mov    edx,0x1
c0012d22:	eb 02                	jmp    c0012d26 <Reg::readInt(char*, char*, int*)+0x4c>
c0012d24:	31 d2                	xor    edx,edx
c0012d26:	31 c0                	xor    eax,eax
c0012d28:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012d2d:	be 0a 00 00 00       	mov    esi,0xa
c0012d32:	75 21                	jne    c0012d55 <Reg::readInt(char*, char*, int*)+0x7b>
c0012d34:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0012d39:	83 f9 78             	cmp    ecx,0x78
c0012d3c:	75 0a                	jne    c0012d48 <Reg::readInt(char*, char*, int*)+0x6e>
c0012d3e:	83 c2 02             	add    edx,0x2
c0012d41:	be 10 00 00 00       	mov    esi,0x10
c0012d46:	eb 0d                	jmp    c0012d55 <Reg::readInt(char*, char*, int*)+0x7b>
c0012d48:	83 f9 62             	cmp    ecx,0x62
c0012d4b:	75 08                	jne    c0012d55 <Reg::readInt(char*, char*, int*)+0x7b>
c0012d4d:	83 c2 02             	add    edx,0x2
c0012d50:	be 02 00 00 00       	mov    esi,0x2
c0012d55:	8d 3c 13             	lea    edi,[ebx+edx*1]
c0012d58:	31 d2                	xor    edx,edx
c0012d5a:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0012d5e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012d62:	0f be 1b             	movsx  ebx,BYTE PTR [ebx]
c0012d65:	85 db                	test   ebx,ebx
c0012d67:	88 5c 24 08          	mov    BYTE PTR [esp+0x8],bl
c0012d6b:	0f 94 c1             	sete   cl
c0012d6e:	83 fb 0d             	cmp    ebx,0xd
c0012d71:	89 cf                	mov    edi,ecx
c0012d73:	0f 94 c1             	sete   cl
c0012d76:	89 cd                	mov    ebp,ecx
c0012d78:	09 ef                	or     edi,ebp
c0012d7a:	89 fd                	mov    ebp,edi
c0012d7c:	83 e7 01             	and    edi,0x1
c0012d7f:	75 38                	jne    c0012db9 <Reg::readInt(char*, char*, int*)+0xdf>
c0012d81:	89 d7                	mov    edi,edx
c0012d83:	0f af fe             	imul   edi,esi
c0012d86:	83 fe 10             	cmp    esi,0x10
c0012d89:	75 24                	jne    c0012daf <Reg::readInt(char*, char*, int*)+0xd5>
c0012d8b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d8f:	8d 51 bf             	lea    edx,[ecx-0x41]
c0012d92:	80 fa 05             	cmp    dl,0x5
c0012d95:	77 06                	ja     c0012d9d <Reg::readInt(char*, char*, int*)+0xc3>
c0012d97:	8d 54 1f c9          	lea    edx,[edi+ebx*1-0x37]
c0012d9b:	eb 16                	jmp    c0012db3 <Reg::readInt(char*, char*, int*)+0xd9>
c0012d9d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012da1:	83 ea 61             	sub    edx,0x61
c0012da4:	80 fa 05             	cmp    dl,0x5
c0012da7:	77 06                	ja     c0012daf <Reg::readInt(char*, char*, int*)+0xd5>
c0012da9:	8d 54 1f a9          	lea    edx,[edi+ebx*1-0x57]
c0012dad:	eb 04                	jmp    c0012db3 <Reg::readInt(char*, char*, int*)+0xd9>
c0012daf:	8d 54 1f d0          	lea    edx,[edi+ebx*1-0x30]
c0012db3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0012db7:	eb a5                	jmp    c0012d5e <Reg::readInt(char*, char*, int*)+0x84>
c0012db9:	84 c0                	test   al,al
c0012dbb:	74 02                	je     c0012dbf <Reg::readInt(char*, char*, int*)+0xe5>
c0012dbd:	f7 da                	neg    edx
c0012dbf:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012dc6:	89 10                	mov    DWORD PTR [eax],edx
c0012dc8:	89 e8                	mov    eax,ebp
c0012dca:	81 c4 ec 00 00 00    	add    esp,0xec
c0012dd0:	5b                   	pop    ebx
c0012dd1:	5e                   	pop    esi
c0012dd2:	5f                   	pop    edi
c0012dd3:	5d                   	pop    ebp
c0012dd4:	c3                   	ret    

c0012dd5 <Reg::readString(char*, char*, char*, int)>:
c0012dd5:	57                   	push   edi
c0012dd6:	56                   	push   esi
c0012dd7:	53                   	push   ebx
c0012dd8:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012dde:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012de2:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012de9:	57                   	push   edi
c0012dea:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012df1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012df8:	e8 a6 fe ff ff       	call   c0012ca3 <Reg::getLine(char*, char*, char*)>
c0012dfd:	83 c4 10             	add    esp,0x10
c0012e00:	84 c0                	test   al,al
c0012e02:	89 c6                	mov    esi,eax
c0012e04:	74 44                	je     c0012e4a <Reg::readString(char*, char*, char*, int)+0x75>
c0012e06:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012e0d:	31 c0                	xor    eax,eax
c0012e0f:	4a                   	dec    edx
c0012e10:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012e13:	84 c9                	test   cl,cl
c0012e15:	74 0f                	je     c0012e26 <Reg::readString(char*, char*, char*, int)+0x51>
c0012e17:	39 c2                	cmp    edx,eax
c0012e19:	7e 0b                	jle    c0012e26 <Reg::readString(char*, char*, char*, int)+0x51>
c0012e1b:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012e1e:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012e23:	40                   	inc    eax
c0012e24:	eb ea                	jmp    c0012e10 <Reg::readString(char*, char*, char*, int)+0x3b>
c0012e26:	83 ec 0c             	sub    esp,0xc
c0012e29:	53                   	push   ebx
c0012e2a:	e8 f1 d6 fe ff       	call   c0000520 <strlen>
c0012e2f:	83 c4 10             	add    esp,0x10
c0012e32:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012e37:	75 11                	jne    c0012e4a <Reg::readString(char*, char*, char*, int)+0x75>
c0012e39:	83 ec 0c             	sub    esp,0xc
c0012e3c:	53                   	push   ebx
c0012e3d:	e8 de d6 fe ff       	call   c0000520 <strlen>
c0012e42:	83 c4 10             	add    esp,0x10
c0012e45:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e4a:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012e50:	89 f0                	mov    eax,esi
c0012e52:	5b                   	pop    ebx
c0012e53:	5e                   	pop    esi
c0012e54:	5f                   	pop    edi
c0012e55:	c3                   	ret    

c0012e56 <Reg::readBool(char*, char*, bool*)>:
c0012e56:	83 ec 20             	sub    esp,0x20
c0012e59:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012e5d:	50                   	push   eax
c0012e5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e66:	e8 6f fe ff ff       	call   c0012cda <Reg::readInt(char*, char*, int*)>
c0012e6b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012e70:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012e74:	0f 95 02             	setne  BYTE PTR [edx]
c0012e77:	83 c4 2c             	add    esp,0x2c
c0012e7a:	c3                   	ret    

c0012e7b <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012e7b:	53                   	push   ebx
c0012e7c:	83 ec 1c             	sub    esp,0x1c
c0012e7f:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012e83:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012e87:	50                   	push   eax
c0012e88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e90:	e8 c1 ff ff ff       	call   c0012e56 <Reg::readBool(char*, char*, bool*)>
c0012e95:	83 c4 10             	add    esp,0x10
c0012e98:	84 c0                	test   al,al
c0012e9a:	74 04                	je     c0012ea0 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012e9c:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012ea0:	83 c4 18             	add    esp,0x18
c0012ea3:	88 d8                	mov    al,bl
c0012ea5:	5b                   	pop    ebx
c0012ea6:	c3                   	ret    

c0012ea7 <Reg::readIntWithDefault(char*, char*, int)>:
c0012ea7:	53                   	push   ebx
c0012ea8:	83 ec 1c             	sub    esp,0x1c
c0012eab:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012eaf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012eb3:	50                   	push   eax
c0012eb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012eb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ebc:	e8 19 fe ff ff       	call   c0012cda <Reg::readInt(char*, char*, int*)>
c0012ec1:	83 c4 10             	add    esp,0x10
c0012ec4:	84 c0                	test   al,al
c0012ec6:	74 04                	je     c0012ecc <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012ec8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ecc:	83 c4 18             	add    esp,0x18
c0012ecf:	89 d8                	mov    eax,ebx
c0012ed1:	5b                   	pop    ebx
c0012ed2:	c3                   	ret    

c0012ed3 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012ed3:	57                   	push   edi
c0012ed4:	56                   	push   esi
c0012ed5:	53                   	push   ebx
c0012ed6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012eda:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012ede:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012ee2:	56                   	push   esi
c0012ee3:	57                   	push   edi
c0012ee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eec:	e8 e4 fe ff ff       	call   c0012dd5 <Reg::readString(char*, char*, char*, int)>
c0012ef1:	83 c4 10             	add    esp,0x10
c0012ef4:	84 c0                	test   al,al
c0012ef6:	75 16                	jne    c0012f0e <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012ef8:	50                   	push   eax
c0012ef9:	56                   	push   esi
c0012efa:	6a 00                	push   0x0
c0012efc:	57                   	push   edi
c0012efd:	e8 ee d5 fe ff       	call   c00004f0 <memset>
c0012f02:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012f05:	89 de                	mov    esi,ebx
c0012f07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f09:	83 c4 10             	add    esp,0x10
c0012f0c:	89 df                	mov    edi,ebx
c0012f0e:	89 f8                	mov    eax,edi
c0012f10:	5b                   	pop    ebx
c0012f11:	5e                   	pop    esi
c0012f12:	5f                   	pop    edi
c0012f13:	c3                   	ret    

c0012f14 <SysEject(regs*)>:
c0012f14:	83 ec 0c             	sub    esp,0xc
c0012f17:	83 ca ff             	or     edx,0xffffffff
c0012f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012f21:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012f26:	83 e9 41             	sub    ecx,0x41
c0012f29:	83 f9 19             	cmp    ecx,0x19
c0012f2c:	77 18                	ja     c0012f46 <SysEject(regs*)+0x32>
c0012f2e:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0012f35:	85 c9                	test   ecx,ecx
c0012f37:	74 0d                	je     c0012f46 <SysEject(regs*)+0x32>
c0012f39:	83 ec 0c             	sub    esp,0xc
c0012f3c:	51                   	push   ecx
c0012f3d:	e8 42 a1 ff ff       	call   c000d084 <LogicalDisk::eject()>
c0012f42:	83 c4 10             	add    esp,0x10
c0012f45:	99                   	cdq    
c0012f46:	83 c4 0c             	add    esp,0xc
c0012f49:	c3                   	ret    

c0012f4a <SysExit(regs*)>:
c0012f4a:	83 ec 18             	sub    esp,0x18
c0012f4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f51:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f54:	e8 f3 29 00 00       	call   c001594c <terminateTask(int)>
c0012f59:	83 c8 ff             	or     eax,0xffffffff
c0012f5c:	83 c4 1c             	add    esp,0x1c
c0012f5f:	89 c2                	mov    edx,eax
c0012f61:	c3                   	ret    

c0012f62 <SysGetCwd(regs*)>:
c0012f62:	83 ec 10             	sub    esp,0x10
c0012f65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f69:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012f6c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f74:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012f77:	e8 9e 7c ff ff       	call   c000ac1a <Fs::getcwd(Process*, char*, int)>
c0012f7c:	83 c4 1c             	add    esp,0x1c
c0012f7f:	99                   	cdq    
c0012f80:	c3                   	ret    

c0012f81 <SysGetPID(regs*)>:
c0012f81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f86:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f89:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f8b:	99                   	cdq    
c0012f8c:	c3                   	ret    

c0012f8d <SysGetRAMData(regs*)>:
c0012f8d:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0012f93:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c0012f9d:	99                   	cdq    
c0012f9e:	f7 f9                	idiv   ecx
c0012fa0:	c1 e0 18             	shl    eax,0x18
c0012fa3:	09 c8                	or     eax,ecx
c0012fa5:	99                   	cdq    
c0012fa6:	c3                   	ret    

c0012fa7 <SysGetVGAPtr(regs*)>:
c0012fa7:	55                   	push   ebp
c0012fa8:	57                   	push   edi
c0012fa9:	56                   	push   esi
c0012faa:	53                   	push   ebx
c0012fab:	83 ec 18             	sub    esp,0x18
c0012fae:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012fb2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012fb5:	e8 62 24 00 00       	call   c001541c <Thr::processFromPID(int)>
c0012fba:	83 c4 10             	add    esp,0x10
c0012fbd:	89 c1                	mov    ecx,eax
c0012fbf:	b8 01 00 00 00       	mov    eax,0x1
c0012fc4:	85 c9                	test   ecx,ecx
c0012fc6:	74 57                	je     c001301f <SysGetVGAPtr(regs*)+0x78>
c0012fc8:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0012fcc:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0012fd2:	74 0c                	je     c0012fe0 <SysGetVGAPtr(regs*)+0x39>
c0012fd4:	83 ec 0c             	sub    esp,0xc
c0012fd7:	55                   	push   ebp
c0012fd8:	e8 de 56 ff ff       	call   c00086bb <setActiveTerminal(VgaText*)>
c0012fdd:	83 c4 10             	add    esp,0x10
c0012fe0:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0012fe3:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0012fe8:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012feb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012fed:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0012ff0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012ff3:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0012ff9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012ffc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0012fff:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013005:	50                   	push   eax
c0013006:	50                   	push   eax
c0013007:	68 ec 0d 02 c0       	push   0xc0020dec
c001300c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001300f:	05 a8 0f 00 00       	add    eax,0xfa8
c0013014:	50                   	push   eax
c0013015:	e8 d6 d5 fe ff       	call   c00005f0 <strcpy>
c001301a:	83 c4 10             	add    esp,0x10
c001301d:	31 c0                	xor    eax,eax
c001301f:	83 c4 0c             	add    esp,0xc
c0013022:	31 d2                	xor    edx,edx
c0013024:	5b                   	pop    ebx
c0013025:	5e                   	pop    esi
c0013026:	5f                   	pop    edi
c0013027:	5d                   	pop    ebp
c0013028:	c3                   	ret    
c0013029:	66 90                	xchg   ax,ax
c001302b:	90                   	nop

c001302c <SysKill(regs*)>:
c001302c:	53                   	push   ebx
c001302d:	83 ec 08             	sub    esp,0x8
c0013030:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013034:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013038:	75 16                	jne    c0013050 <SysKill(regs*)+0x24>
c001303a:	83 ec 0c             	sub    esp,0xc
c001303d:	68 f6 0d 02 c0       	push   0xc0020df6
c0013042:	e8 c0 d7 ff ff       	call   c0010807 <KePanic(char const*)>
c0013047:	83 c4 10             	add    esp,0x10
c001304a:	e9 89 00 00 00       	jmp    c00130d8 <SysKill(regs*)+0xac>
c001304f:	90                   	nop
c0013050:	83 ec 0c             	sub    esp,0xc
c0013053:	68 84 81 02 c0       	push   0xc0028184
c0013058:	e8 ff ba 00 00       	call   c001eb5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001305d:	8d 76 00             	lea    esi,[esi+0x0]
c0013060:	83 c4 10             	add    esp,0x10
c0013063:	85 c0                	test   eax,eax
c0013065:	74 19                	je     c0013080 <SysKill(regs*)+0x54>
c0013067:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001306a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001306d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001306f:	74 33                	je     c00130a4 <SysKill(regs*)+0x78>
c0013071:	52                   	push   edx
c0013072:	52                   	push   edx
c0013073:	50                   	push   eax
c0013074:	68 84 81 02 c0       	push   0xc0028184
c0013079:	e8 fe bd 00 00       	call   c001ee7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001307e:	eb e0                	jmp    c0013060 <SysKill(regs*)+0x34>
c0013080:	83 ec 0c             	sub    esp,0xc
c0013083:	68 78 81 02 c0       	push   0xc0028178
c0013088:	e8 cf ba 00 00       	call   c001eb5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001308d:	8d 76 00             	lea    esi,[esi+0x0]
c0013090:	83 c4 10             	add    esp,0x10
c0013093:	85 c0                	test   eax,eax
c0013095:	74 41                	je     c00130d8 <SysKill(regs*)+0xac>
c0013097:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001309a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001309d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001309f:	75 27                	jne    c00130c8 <SysKill(regs*)+0x9c>
c00130a1:	8d 76 00             	lea    esi,[esi+0x0]
c00130a4:	51                   	push   ecx
c00130a5:	51                   	push   ecx
c00130a6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00130a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00130b1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00130b7:	e8 e3 db ff ff       	call   c0010c9f <KeRaiseSignal(SigHandlerBlock*, int)>
c00130bc:	83 c4 10             	add    esp,0x10
c00130bf:	31 c0                	xor    eax,eax
c00130c1:	31 d2                	xor    edx,edx
c00130c3:	eb 1b                	jmp    c00130e0 <SysKill(regs*)+0xb4>
c00130c5:	8d 76 00             	lea    esi,[esi+0x0]
c00130c8:	52                   	push   edx
c00130c9:	52                   	push   edx
c00130ca:	50                   	push   eax
c00130cb:	68 78 81 02 c0       	push   0xc0028178
c00130d0:	e8 a7 bd 00 00       	call   c001ee7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00130d5:	eb b9                	jmp    c0013090 <SysKill(regs*)+0x64>
c00130d7:	90                   	nop
c00130d8:	83 c8 ff             	or     eax,0xffffffff
c00130db:	89 c2                	mov    edx,eax
c00130dd:	8d 76 00             	lea    esi,[esi+0x0]
c00130e0:	83 c4 08             	add    esp,0x8
c00130e3:	5b                   	pop    ebx
c00130e4:	c3                   	ret    

c00130e5 <SysLoadDLL(regs*)>:
c00130e5:	56                   	push   esi
c00130e6:	31 d2                	xor    edx,edx
c00130e8:	b8 01 00 00 00       	mov    eax,0x1
c00130ed:	53                   	push   ebx
c00130ee:	51                   	push   ecx
c00130ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00130f3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00130f7:	0f 84 8c 00 00 00    	je     c0013189 <SysLoadDLL(regs*)+0xa4>
c00130fd:	83 ec 0c             	sub    esp,0xc
c0013100:	68 14 01 00 00       	push   0x114
c0013105:	e8 25 49 ff ff       	call   c0007a2f <malloc>
c001310a:	83 c4 0c             	add    esp,0xc
c001310d:	89 c3                	mov    ebx,eax
c001310f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013114:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013117:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001311a:	53                   	push   ebx
c001311b:	e8 2a 7d ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c0013120:	83 c4 10             	add    esp,0x10
c0013123:	31 d2                	xor    edx,edx
c0013125:	85 db                	test   ebx,ebx
c0013127:	b8 02 00 00 00       	mov    eax,0x2
c001312c:	74 5b                	je     c0013189 <SysLoadDLL(regs*)+0xa4>
c001312e:	83 ec 0c             	sub    esp,0xc
c0013131:	53                   	push   ebx
c0013132:	e8 3d 80 ff ff       	call   c000b174 <File::exists()>
c0013137:	83 c4 10             	add    esp,0x10
c001313a:	84 c0                	test   al,al
c001313c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001313e:	75 11                	jne    c0013151 <SysLoadDLL(regs*)+0x6c>
c0013140:	83 ec 0c             	sub    esp,0xc
c0013143:	53                   	push   ebx
c0013144:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013147:	83 c4 10             	add    esp,0x10
c001314a:	b8 03 00 00 00       	mov    eax,0x3
c001314f:	eb 36                	jmp    c0013187 <SysLoadDLL(regs*)+0xa2>
c0013151:	83 ec 0c             	sub    esp,0xc
c0013154:	53                   	push   ebx
c0013155:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013158:	58                   	pop    eax
c0013159:	5a                   	pop    edx
c001315a:	6a 00                	push   0x0
c001315c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001315f:	e8 11 14 00 00       	call   c0014575 <Thr::loadDLL(char const*, bool)>
c0013164:	83 c4 10             	add    esp,0x10
c0013167:	31 d2                	xor    edx,edx
c0013169:	89 c1                	mov    ecx,eax
c001316b:	b8 04 00 00 00       	mov    eax,0x4
c0013170:	85 c9                	test   ecx,ecx
c0013172:	74 15                	je     c0013189 <SysLoadDLL(regs*)+0xa4>
c0013174:	53                   	push   ebx
c0013175:	53                   	push   ebx
c0013176:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001317c:	51                   	push   ecx
c001317d:	e8 2f 16 00 00       	call   c00147b1 <Thr::executeDLL(unsigned long, void*)>
c0013182:	83 c4 10             	add    esp,0x10
c0013185:	31 c0                	xor    eax,eax
c0013187:	31 d2                	xor    edx,edx
c0013189:	59                   	pop    ecx
c001318a:	5b                   	pop    ebx
c001318b:	5e                   	pop    esi
c001318c:	c3                   	ret    

c001318d <SysRead(regs*)>:
c001318d:	57                   	push   edi
c001318e:	56                   	push   esi
c001318f:	53                   	push   ebx
c0013190:	83 ec 10             	sub    esp,0x10
c0013193:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013197:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001319a:	83 f8 02             	cmp    eax,0x2
c001319d:	77 10                	ja     c00131af <SysRead(regs*)+0x22>
c001319f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131a7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00131ad:	eb 0e                	jmp    c00131bd <SysRead(regs*)+0x30>
c00131af:	83 ec 0c             	sub    esp,0xc
c00131b2:	50                   	push   eax
c00131b3:	e8 5b 62 ff ff       	call   c0009413 <getFromFileDescriptor(int)>
c00131b8:	83 c4 10             	add    esp,0x10
c00131bb:	89 c1                	mov    ecx,eax
c00131bd:	83 c8 ff             	or     eax,0xffffffff
c00131c0:	85 c9                	test   ecx,ecx
c00131c2:	89 c2                	mov    edx,eax
c00131c4:	74 28                	je     c00131ee <SysRead(regs*)+0x61>
c00131c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00131ce:	83 ec 0c             	sub    esp,0xc
c00131d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131d3:	31 ff                	xor    edi,edi
c00131d5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00131d9:	52                   	push   edx
c00131da:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00131dd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00131e0:	57                   	push   edi
c00131e1:	56                   	push   esi
c00131e2:	51                   	push   ecx
c00131e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00131e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00131ea:	83 c4 20             	add    esp,0x20
c00131ed:	99                   	cdq    
c00131ee:	83 c4 10             	add    esp,0x10
c00131f1:	5b                   	pop    ebx
c00131f2:	5e                   	pop    esi
c00131f3:	5f                   	pop    edi
c00131f4:	c3                   	ret    

c00131f5 <SysRegisterSignal(regs*)>:
c00131f5:	83 ec 18             	sub    esp,0x18
c00131f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131fc:	6a 00                	push   0x0
c00131fe:	6a 00                	push   0x0
c0013200:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013203:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013206:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001320b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001320e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013214:	e8 50 da ff ff       	call   c0010c69 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013219:	83 c4 2c             	add    esp,0x2c
c001321c:	99                   	cdq    
c001321d:	c3                   	ret    

c001321e <SysRegistryGetTypeFromPath(regs*)>:
c001321e:	57                   	push   edi
c001321f:	56                   	push   esi
c0013220:	53                   	push   ebx
c0013221:	81 ec 38 01 00 00    	sub    esp,0x138
c0013227:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001322e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013231:	68 17 0e 02 c0       	push   0xc0020e17
c0013236:	e8 66 76 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c001323b:	5a                   	pop    edx
c001323c:	59                   	pop    ecx
c001323d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013240:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013243:	e8 28 f6 ff ff       	call   c0012870 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013248:	5f                   	pop    edi
c0013249:	5a                   	pop    edx
c001324a:	89 c6                	mov    esi,eax
c001324c:	50                   	push   eax
c001324d:	68 37 0e 02 c0       	push   0xc0020e37
c0013252:	e8 4a 76 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0013257:	83 c4 10             	add    esp,0x10
c001325a:	85 f6                	test   esi,esi
c001325c:	74 28                	je     c0013286 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001325e:	50                   	push   eax
c001325f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013263:	57                   	push   edi
c0013264:	56                   	push   esi
c0013265:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013268:	e8 e8 f1 ff ff       	call   c0012455 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001326d:	83 c4 0c             	add    esp,0xc
c0013270:	57                   	push   edi
c0013271:	89 c3                	mov    ebx,eax
c0013273:	50                   	push   eax
c0013274:	68 3f 0e 02 c0       	push   0xc0020e3f
c0013279:	e8 23 76 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c001327e:	89 d8                	mov    eax,ebx
c0013280:	83 c4 10             	add    esp,0x10
c0013283:	99                   	cdq    
c0013284:	eb 05                	jmp    c001328b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013286:	83 c8 ff             	or     eax,0xffffffff
c0013289:	89 c2                	mov    edx,eax
c001328b:	81 c4 30 01 00 00    	add    esp,0x130
c0013291:	5b                   	pop    ebx
c0013292:	5e                   	pop    esi
c0013293:	5f                   	pop    edi
c0013294:	c3                   	ret    

c0013295 <SysRegistryReadExtent(regs*)>:
c0013295:	83 ec 1c             	sub    esp,0x1c
c0013298:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001329c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001329f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00132a2:	85 c0                	test   eax,eax
c00132a4:	79 1f                	jns    c00132c5 <SysRegistryReadExtent(regs*)+0x30>
c00132a6:	52                   	push   edx
c00132a7:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00132ac:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00132b0:	52                   	push   edx
c00132b1:	50                   	push   eax
c00132b2:	51                   	push   ecx
c00132b3:	e8 8f f0 ff ff       	call   c0012347 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00132b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00132c0:	83 c4 10             	add    esp,0x10
c00132c3:	eb 14                	jmp    c00132d9 <SysRegistryReadExtent(regs*)+0x44>
c00132c5:	83 ec 04             	sub    esp,0x4
c00132c8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00132cb:	50                   	push   eax
c00132cc:	51                   	push   ecx
c00132cd:	e8 13 eb ff ff       	call   c0011de5 <CmGetString(Reghive_Tag*, int, char*)>
c00132d2:	83 c4 10             	add    esp,0x10
c00132d5:	31 c0                	xor    eax,eax
c00132d7:	31 d2                	xor    edx,edx
c00132d9:	83 c4 1c             	add    esp,0x1c
c00132dc:	c3                   	ret    

c00132dd <SysRegistryPathToExtentLookup(regs*)>:
c00132dd:	53                   	push   ebx
c00132de:	83 ec 10             	sub    esp,0x10
c00132e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00132e5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132e8:	68 55 0e 02 c0       	push   0xc0020e55
c00132ed:	e8 af 75 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c00132f2:	58                   	pop    eax
c00132f3:	5a                   	pop    edx
c00132f4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132f7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00132fa:	e8 71 f5 ff ff       	call   c0012870 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00132ff:	83 c4 18             	add    esp,0x18
c0013302:	99                   	cdq    
c0013303:	5b                   	pop    ebx
c0013304:	c3                   	ret    

c0013305 <SysRegistryEnterDirectory(regs*)>:
c0013305:	53                   	push   ebx
c0013306:	83 ec 10             	sub    esp,0x10
c0013309:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001330d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013310:	68 78 0e 02 c0       	push   0xc0020e78
c0013315:	e8 87 75 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c001331a:	58                   	pop    eax
c001331b:	5a                   	pop    edx
c001331c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001331f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013322:	e8 35 eb ff ff       	call   c0011e5c <CmEnterDirectory(Reghive_Tag*, int)>
c0013327:	83 c4 18             	add    esp,0x18
c001332a:	99                   	cdq    
c001332b:	5b                   	pop    ebx
c001332c:	c3                   	ret    

c001332d <SysRegistryGetNext(regs*)>:
c001332d:	53                   	push   ebx
c001332e:	83 ec 10             	sub    esp,0x10
c0013331:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013335:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013338:	68 96 0e 02 c0       	push   0xc0020e96
c001333d:	e8 5f 75 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0013342:	58                   	pop    eax
c0013343:	5a                   	pop    edx
c0013344:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013347:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001334a:	e8 4c eb ff ff       	call   c0011e9b <CmGetNext(Reghive_Tag*, int)>
c001334f:	83 c4 18             	add    esp,0x18
c0013352:	99                   	cdq    
c0013353:	5b                   	pop    ebx
c0013354:	c3                   	ret    

c0013355 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013355:	57                   	push   edi
c0013356:	56                   	push   esi
c0013357:	53                   	push   ebx
c0013358:	81 ec 34 01 00 00    	sub    esp,0x134
c001335e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013365:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013369:	57                   	push   edi
c001336a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001336d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013370:	e8 e0 f0 ff ff       	call   c0012455 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013375:	89 c3                	mov    ebx,eax
c0013377:	58                   	pop    eax
c0013378:	5a                   	pop    edx
c0013379:	57                   	push   edi
c001337a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001337d:	e8 6e d2 fe ff       	call   c00005f0 <strcpy>
c0013382:	89 d8                	mov    eax,ebx
c0013384:	81 c4 40 01 00 00    	add    esp,0x140
c001338a:	5b                   	pop    ebx
c001338b:	99                   	cdq    
c001338c:	5e                   	pop    esi
c001338d:	5f                   	pop    edi
c001338e:	c3                   	ret    

c001338f <SysRegistryOpen(regs*)>:
c001338f:	83 ec 18             	sub    esp,0x18
c0013392:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013396:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013399:	e8 d7 e8 ff ff       	call   c0011c75 <CmOpen(char const*)>
c001339e:	83 c4 1c             	add    esp,0x1c
c00133a1:	99                   	cdq    
c00133a2:	c3                   	ret    

c00133a3 <SysRegistryClose(regs*)>:
c00133a3:	83 ec 18             	sub    esp,0x18
c00133a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133aa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00133ad:	e8 e1 e9 ff ff       	call   c0011d93 <CmClose(Reghive_Tag*)>
c00133b2:	31 c0                	xor    eax,eax
c00133b4:	31 d2                	xor    edx,edx
c00133b6:	83 c4 1c             	add    esp,0x1c
c00133b9:	c3                   	ret    

c00133ba <SysSbrk(regs*)>:
c00133ba:	56                   	push   esi
c00133bb:	53                   	push   ebx
c00133bc:	50                   	push   eax
c00133bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00133c9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00133cc:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00133d2:	85 db                	test   ebx,ebx
c00133d4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00133d7:	74 02                	je     c00133db <SysSbrk(regs*)+0x21>
c00133d9:	79 06                	jns    c00133e1 <SysSbrk(regs*)+0x27>
c00133db:	89 f0                	mov    eax,esi
c00133dd:	31 d2                	xor    edx,edx
c00133df:	eb 2a                	jmp    c001340b <SysSbrk(regs*)+0x51>
c00133e1:	83 c8 ff             	or     eax,0xffffffff
c00133e4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00133ea:	89 c2                	mov    edx,eax
c00133ec:	77 1d                	ja     c001340b <SysSbrk(regs*)+0x51>
c00133ee:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00133f4:	50                   	push   eax
c00133f5:	c1 ea 0c             	shr    edx,0xc
c00133f8:	68 07 0c 00 00       	push   0xc07
c00133fd:	52                   	push   edx
c00133fe:	51                   	push   ecx
c00133ff:	e8 58 69 ff ff       	call   c0009d5c <VAS::allocatePages(int, int)>
c0013404:	89 f0                	mov    eax,esi
c0013406:	31 d2                	xor    edx,edx
c0013408:	83 c4 10             	add    esp,0x10
c001340b:	59                   	pop    ecx
c001340c:	5b                   	pop    ebx
c001340d:	5e                   	pop    esi
c001340e:	c3                   	ret    

c001340f <SysSetCwd(regs*)>:
c001340f:	83 ec 14             	sub    esp,0x14
c0013412:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013416:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013419:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001341e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013421:	e8 ed 7d ff ff       	call   c000b213 <Fs::setcwd(Process*, char*)>
c0013426:	83 c4 1c             	add    esp,0x1c
c0013429:	99                   	cdq    
c001342a:	c3                   	ret    

c001342b <SysSetTime(regs*)>:
c001342b:	55                   	push   ebp
c001342c:	31 c9                	xor    ecx,ecx
c001342e:	bd 0c 00 00 00       	mov    ebp,0xc
c0013433:	57                   	push   edi
c0013434:	56                   	push   esi
c0013435:	53                   	push   ebx
c0013436:	31 db                	xor    ebx,ebx
c0013438:	83 ec 10             	sub    esp,0x10
c001343b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001343f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013442:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013445:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013448:	89 c2                	mov    edx,eax
c001344a:	c1 e8 05             	shr    eax,0x5
c001344d:	83 e2 1f             	and    edx,0x1f
c0013450:	42                   	inc    edx
c0013451:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013457:	88 d1                	mov    cl,dl
c0013459:	31 d2                	xor    edx,edx
c001345b:	c1 e7 10             	shl    edi,0x10
c001345e:	f7 f5                	div    ebp
c0013460:	89 dd                	mov    ebp,ebx
c0013462:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013468:	88 d5                	mov    ch,dl
c001346a:	31 d2                	xor    edx,edx
c001346c:	0f b7 c1             	movzx  eax,cx
c001346f:	09 f8                	or     eax,edi
c0013471:	bf 3c 00 00 00       	mov    edi,0x3c
c0013476:	89 c1                	mov    ecx,eax
c0013478:	89 f0                	mov    eax,esi
c001347a:	f7 f7                	div    edi
c001347c:	c1 e2 10             	shl    edx,0x10
c001347f:	09 d5                	or     ebp,edx
c0013481:	31 d2                	xor    edx,edx
c0013483:	f7 f7                	div    edi
c0013485:	89 eb                	mov    ebx,ebp
c0013487:	bf 10 0e 00 00       	mov    edi,0xe10
c001348c:	89 f0                	mov    eax,esi
c001348e:	88 d7                	mov    bh,dl
c0013490:	31 d2                	xor    edx,edx
c0013492:	f7 f7                	div    edi
c0013494:	bf 18 00 00 00       	mov    edi,0x18
c0013499:	31 d2                	xor    edx,edx
c001349b:	f7 f7                	div    edi
c001349d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00134a2:	88 d3                	mov    bl,dl
c00134a4:	53                   	push   ebx
c00134a5:	51                   	push   ecx
c00134a6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00134ac:	e8 69 85 ff ff       	call   c000ba1a <Clock::setTimeInDatetimeLocal(datetime_t)>
c00134b1:	83 c4 1c             	add    esp,0x1c
c00134b4:	31 d2                	xor    edx,edx
c00134b6:	83 f0 01             	xor    eax,0x1
c00134b9:	5b                   	pop    ebx
c00134ba:	0f b6 c0             	movzx  eax,al
c00134bd:	5e                   	pop    esi
c00134be:	5f                   	pop    edi
c00134bf:	5d                   	pop    ebp
c00134c0:	c3                   	ret    

c00134c1 <SysTimezone(regs*)>:
c00134c1:	53                   	push   ebx
c00134c2:	83 ec 08             	sub    esp,0x8
c00134c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134c9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00134cd:	75 17                	jne    c00134e6 <SysTimezone(regs*)+0x25>
c00134cf:	83 ec 0c             	sub    esp,0xc
c00134d2:	68 ad 0e 02 c0       	push   0xc0020ead
c00134d7:	e8 c5 73 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c00134dc:	83 c8 ff             	or     eax,0xffffffff
c00134df:	83 c4 10             	add    esp,0x10
c00134e2:	89 c2                	mov    edx,eax
c00134e4:	eb 20                	jmp    c0013506 <SysTimezone(regs*)+0x45>
c00134e6:	83 ec 0c             	sub    esp,0xc
c00134e9:	68 c2 0e 02 c0       	push   0xc0020ec2
c00134ee:	e8 ae 73 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c00134f3:	58                   	pop    eax
c00134f4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00134f7:	e8 80 82 ff ff       	call   c000b77c <User::loadClockSettings(int)>
c00134fc:	83 c4 10             	add    esp,0x10
c00134ff:	b8 01 00 00 00       	mov    eax,0x1
c0013504:	31 d2                	xor    edx,edx
c0013506:	83 c4 08             	add    esp,0x8
c0013509:	5b                   	pop    ebx
c001350a:	c3                   	ret    

c001350b <SysWrite(regs*)>:
c001350b:	57                   	push   edi
c001350c:	56                   	push   esi
c001350d:	53                   	push   ebx
c001350e:	83 ec 10             	sub    esp,0x10
c0013511:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013515:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013518:	83 f8 02             	cmp    eax,0x2
c001351b:	77 10                	ja     c001352d <SysWrite(regs*)+0x22>
c001351d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013522:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013525:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001352b:	eb 0e                	jmp    c001353b <SysWrite(regs*)+0x30>
c001352d:	83 ec 0c             	sub    esp,0xc
c0013530:	50                   	push   eax
c0013531:	e8 dd 5e ff ff       	call   c0009413 <getFromFileDescriptor(int)>
c0013536:	83 c4 10             	add    esp,0x10
c0013539:	89 c1                	mov    ecx,eax
c001353b:	83 c8 ff             	or     eax,0xffffffff
c001353e:	85 c9                	test   ecx,ecx
c0013540:	89 c2                	mov    edx,eax
c0013542:	74 28                	je     c001356c <SysWrite(regs*)+0x61>
c0013544:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001354c:	83 ec 0c             	sub    esp,0xc
c001354f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013551:	31 ff                	xor    edi,edi
c0013553:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013557:	52                   	push   edx
c0013558:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001355b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001355e:	57                   	push   edi
c001355f:	56                   	push   esi
c0013560:	51                   	push   ecx
c0013561:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013564:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013568:	83 c4 20             	add    esp,0x20
c001356b:	99                   	cdq    
c001356c:	83 c4 10             	add    esp,0x10
c001356f:	5b                   	pop    ebx
c0013570:	5e                   	pop    esi
c0013571:	5f                   	pop    edi
c0013572:	c3                   	ret    

c0013573 <SysWsbe(regs*)>:
c0013573:	57                   	push   edi
c0013574:	b9 0b 00 00 00       	mov    ecx,0xb
c0013579:	56                   	push   esi
c001357a:	be 01 0f 02 c0       	mov    esi,0xc0020f01
c001357f:	53                   	push   ebx
c0013580:	83 ec 30             	sub    esp,0x30
c0013583:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013587:	fc                   	cld    
c0013588:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001358a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001358f:	83 ec 0c             	sub    esp,0xc
c0013592:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013596:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013599:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001359f:	8b 06                	mov    eax,DWORD PTR [esi]
c00135a1:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00135a4:	57                   	push   edi
c00135a5:	e8 76 cf fe ff       	call   c0000520 <strlen>
c00135aa:	5a                   	pop    edx
c00135ab:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00135af:	52                   	push   edx
c00135b0:	31 d2                	xor    edx,edx
c00135b2:	57                   	push   edi
c00135b3:	52                   	push   edx
c00135b4:	50                   	push   eax
c00135b5:	56                   	push   esi
c00135b6:	ff d3                	call   ebx
c00135b8:	83 c4 14             	add    esp,0x14
c00135bb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00135bf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00135c2:	e8 85 23 00 00       	call   c001594c <terminateTask(int)>
c00135c7:	83 c4 40             	add    esp,0x40
c00135ca:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00135cf:	31 d2                	xor    edx,edx
c00135d1:	5b                   	pop    ebx
c00135d2:	5e                   	pop    esi
c00135d3:	5f                   	pop    edi
c00135d4:	c3                   	ret    

c00135d5 <SysYield(regs*)>:
c00135d5:	83 ec 0c             	sub    esp,0xc
c00135d8:	fa                   	cli    
c00135d9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00135df:	e8 ec 19 00 00       	call   c0014fd0 <schedule()>
c00135e4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00135e9:	48                   	dec    eax
c00135ea:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00135ef:	75 01                	jne    c00135f2 <SysYield(regs*)+0x1d>
c00135f1:	fb                   	sti    
c00135f2:	31 c0                	xor    eax,eax
c00135f4:	31 d2                	xor    edx,edx
c00135f6:	83 c4 0c             	add    esp,0xc
c00135f9:	c3                   	ret    

c00135fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00135fa:	55                   	push   ebp
c00135fb:	57                   	push   edi
c00135fc:	56                   	push   esi
c00135fd:	53                   	push   ebx
c00135fe:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013604:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001360f:	74 3b                	je     c001364c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013611:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013619:	74 31                	je     c001364c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001361b:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013623:	75 27                	jne    c001364c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013625:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001362c:	05 00 10 00 00       	add    eax,0x1000
c0013631:	89 c2                	mov    edx,eax
c0013633:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013638:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001363e:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013645:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001364c:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013653:	83 ec 0c             	sub    esp,0xc
c0013656:	6a 01                	push   0x1
c0013658:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001365e:	e8 0a 5f ff ff       	call   c000956d <Virt::allocateKernelVirtualPages(int)>
c0013663:	83 c4 10             	add    esp,0x10
c0013666:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001366c:	89 c3                	mov    ebx,eax
c001366e:	0f 86 26 01 00 00    	jbe    c001379a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c0013674:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001367b:	c1 ee 0c             	shr    esi,0xc
c001367e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013686:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001368a:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013691:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013698:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001369c:	29 ef                	sub    edi,ebp
c001369e:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00136a2:	0f 83 f9 00 00 00    	jae    c00137a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00136a8:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00136ae:	b8 00 10 00 00       	mov    eax,0x1000
c00136b3:	0f 47 f8             	cmova  edi,eax
c00136b6:	83 ec 0c             	sub    esp,0xc
c00136b9:	31 d2                	xor    edx,edx
c00136bb:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00136c2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00136c4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00136c8:	50                   	push   eax
c00136c9:	8d 74 24 30          	lea    esi,[esp+0x30]
c00136cd:	56                   	push   esi
c00136ce:	52                   	push   edx
c00136cf:	57                   	push   edi
c00136d0:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00136d7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00136da:	83 c4 20             	add    esp,0x20
c00136dd:	85 c0                	test   eax,eax
c00136df:	75 06                	jne    c00136e7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c00136e1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00136e5:	74 13                	je     c00136fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c00136e7:	83 ec 0c             	sub    esp,0xc
c00136ea:	53                   	push   ebx
c00136eb:	e8 97 61 ff ff       	call   c0009887 <Virt::freeKernelVirtualPages(unsigned long)>
c00136f0:	83 c4 10             	add    esp,0x10
c00136f3:	31 c0                	xor    eax,eax
c00136f5:	e9 7c 01 00 00       	jmp    c0013876 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c00136fa:	fa                   	cli    
c00136fb:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013701:	e8 34 46 ff ff       	call   c0007d3a <Phys::allocatePage()>
c0013706:	6a 07                	push   0x7
c0013708:	89 c7                	mov    edi,eax
c001370a:	53                   	push   ebx
c001370b:	50                   	push   eax
c001370c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013711:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013714:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001371a:	e8 35 65 ff ff       	call   c0009c54 <VAS::mapPage(unsigned long, unsigned long, int)>
c001371f:	83 c4 0c             	add    esp,0xc
c0013722:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013729:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001372f:	6a 00                	push   0x0
c0013731:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013736:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013739:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001373f:	e8 76 63 ff ff       	call   c0009aba <VAS::mapOtherVASIn(bool, VAS*)>
c0013744:	58                   	pop    eax
c0013745:	5a                   	pop    edx
c0013746:	68 07 0c 00 00       	push   0xc07
c001374b:	55                   	push   ebp
c001374c:	57                   	push   edi
c001374d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013754:	89 df                	mov    edi,ebx
c0013756:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001375c:	6a 00                	push   0x0
c001375e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013763:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013766:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001376c:	e8 b1 68 ff ff       	call   c000a022 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013771:	b9 00 10 00 00       	mov    ecx,0x1000
c0013776:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013778:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001377d:	83 c4 20             	add    esp,0x20
c0013780:	48                   	dec    eax
c0013781:	85 c0                	test   eax,eax
c0013783:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013788:	75 01                	jne    c001378b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c001378a:	fb                   	sti    
c001378b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001378f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013795:	e9 f0 fe ff ff       	jmp    c001368a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c001379a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00137a1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00137a8:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00137ae:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00137b4:	0f 86 ae 00 00 00    	jbe    c0013868 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00137ba:	fa                   	cli    
c00137bb:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00137c1:	51                   	push   ecx
c00137c2:	c1 ee 0c             	shr    esi,0xc
c00137c5:	31 ff                	xor    edi,edi
c00137c7:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00137ce:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137d4:	6a 00                	push   0x0
c00137d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137de:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137e4:	e8 d1 62 ff ff       	call   c0009aba <VAS::mapOtherVASIn(bool, VAS*)>
c00137e9:	83 c4 10             	add    esp,0x10
c00137ec:	e8 49 45 ff ff       	call   c0007d3a <Phys::allocatePage()>
c00137f1:	6a 07                	push   0x7
c00137f3:	47                   	inc    edi
c00137f4:	53                   	push   ebx
c00137f5:	50                   	push   eax
c00137f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00137fa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013800:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013803:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013809:	e8 46 64 ff ff       	call   c0009c54 <VAS::mapPage(unsigned long, unsigned long, int)>
c001380e:	58                   	pop    eax
c001380f:	5a                   	pop    edx
c0013810:	68 07 0c 00 00       	push   0xc07
c0013815:	55                   	push   ebp
c0013816:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001381a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013820:	50                   	push   eax
c0013821:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013828:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001382e:	6a 00                	push   0x0
c0013830:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013835:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013838:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001383e:	e8 df 67 ff ff       	call   c000a022 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013843:	83 c4 1c             	add    esp,0x1c
c0013846:	68 00 10 00 00       	push   0x1000
c001384b:	6a 00                	push   0x0
c001384d:	53                   	push   ebx
c001384e:	e8 9d cc fe ff       	call   c00004f0 <memset>
c0013853:	83 c4 10             	add    esp,0x10
c0013856:	39 fe                	cmp    esi,edi
c0013858:	77 92                	ja     c00137ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c001385a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001385f:	48                   	dec    eax
c0013860:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013865:	75 01                	jne    c0013868 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013867:	fb                   	sti    
c0013868:	83 ec 0c             	sub    esp,0xc
c001386b:	53                   	push   ebx
c001386c:	e8 16 60 ff ff       	call   c0009887 <Virt::freeKernelVirtualPages(unsigned long)>
c0013871:	83 c4 10             	add    esp,0x10
c0013874:	b0 01                	mov    al,0x1
c0013876:	81 c4 2c 10 00 00    	add    esp,0x102c
c001387c:	5b                   	pop    ebx
c001387d:	5e                   	pop    esi
c001387e:	5f                   	pop    edi
c001387f:	5d                   	pop    ebp
c0013880:	c3                   	ret    

c0013881 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013881:	55                   	push   ebp
c0013882:	57                   	push   edi
c0013883:	56                   	push   esi
c0013884:	53                   	push   ebx
c0013885:	83 ec 48             	sub    esp,0x48
c0013888:	68 14 01 00 00       	push   0x114
c001388d:	e8 9d 41 ff ff       	call   c0007a2f <malloc>
c0013892:	83 c4 0c             	add    esp,0xc
c0013895:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013899:	89 c6                	mov    esi,eax
c001389b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001389f:	50                   	push   eax
c00138a0:	e8 a5 75 ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c00138a5:	58                   	pop    eax
c00138a6:	5a                   	pop    edx
c00138a7:	6a 01                	push   0x1
c00138a9:	56                   	push   esi
c00138aa:	e8 57 76 ff ff       	call   c000af06 <File::open(FileOpenMode)>
c00138af:	83 c4 10             	add    esp,0x10
c00138b2:	85 c0                	test   eax,eax
c00138b4:	0f 85 4c 01 00 00    	jne    c0013a06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00138ba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00138c2:	83 ec 0c             	sub    esp,0xc
c00138c5:	6a 34                	push   0x34
c00138c7:	e8 63 41 ff ff       	call   c0007a2f <malloc>
c00138cc:	89 c3                	mov    ebx,eax
c00138ce:	58                   	pop    eax
c00138cf:	8b 06                	mov    eax,DWORD PTR [esi]
c00138d1:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00138d5:	57                   	push   edi
c00138d6:	53                   	push   ebx
c00138d7:	6a 00                	push   0x0
c00138d9:	6a 34                	push   0x34
c00138db:	56                   	push   esi
c00138dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00138df:	83 c4 20             	add    esp,0x20
c00138e2:	85 c0                	test   eax,eax
c00138e4:	0f 85 1c 01 00 00    	jne    c0013a06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00138ea:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00138f0:	0f 85 10 01 00 00    	jne    c0013a06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00138f6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00138f9:	85 c0                	test   eax,eax
c00138fb:	0f 84 05 01 00 00    	je     c0013a06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013901:	31 d2                	xor    edx,edx
c0013903:	55                   	push   ebp
c0013904:	52                   	push   edx
c0013905:	50                   	push   eax
c0013906:	56                   	push   esi
c0013907:	e8 b8 76 ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c001390c:	83 c4 10             	add    esp,0x10
c001390f:	85 c0                	test   eax,eax
c0013911:	0f 85 ef 00 00 00    	jne    c0013a06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013917:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001391a:	83 ec 0c             	sub    esp,0xc
c001391d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013921:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013925:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013929:	0f af c2             	imul   eax,edx
c001392c:	50                   	push   eax
c001392d:	e8 fd 40 ff ff       	call   c0007a2f <malloc>
c0013932:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013934:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013937:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001393b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001393f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013943:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013947:	0f af c2             	imul   eax,edx
c001394a:	99                   	cdq    
c001394b:	52                   	push   edx
c001394c:	50                   	push   eax
c001394d:	56                   	push   esi
c001394e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013951:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013954:	83 c4 20             	add    esp,0x20
c0013957:	85 c0                	test   eax,eax
c0013959:	0f 84 a7 00 00 00    	je     c0013a06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001395f:	31 d2                	xor    edx,edx
c0013961:	51                   	push   ecx
c0013962:	52                   	push   edx
c0013963:	50                   	push   eax
c0013964:	56                   	push   esi
c0013965:	e8 5a 76 ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c001396a:	83 c4 10             	add    esp,0x10
c001396d:	85 c0                	test   eax,eax
c001396f:	0f 85 91 00 00 00    	jne    c0013a06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013975:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013979:	83 ec 0c             	sub    esp,0xc
c001397c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013980:	0f af c2             	imul   eax,edx
c0013983:	50                   	push   eax
c0013984:	e8 a6 40 ff ff       	call   c0007a2f <malloc>
c0013989:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001398b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001398e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013996:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001399a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001399e:	0f af c2             	imul   eax,edx
c00139a1:	99                   	cdq    
c00139a2:	52                   	push   edx
c00139a3:	50                   	push   eax
c00139a4:	56                   	push   esi
c00139a5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00139a8:	83 c4 20             	add    esp,0x20
c00139ab:	31 c9                	xor    ecx,ecx
c00139ad:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00139b5:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c00139b9:	0f b7 e9             	movzx  ebp,cx
c00139bc:	0f 83 86 00 00 00    	jae    c0013a48 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c00139c2:	c1 e5 05             	shl    ebp,0x5
c00139c5:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c00139c9:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00139cd:	75 73                	jne    c0013a42 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c00139cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00139d2:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00139d6:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00139d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00139dd:	52                   	push   edx
c00139de:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00139e1:	31 d2                	xor    edx,edx
c00139e3:	52                   	push   edx
c00139e4:	50                   	push   eax
c00139e5:	56                   	push   esi
c00139e6:	e8 d9 75 ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c00139eb:	83 c4 10             	add    esp,0x10
c00139ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00139f2:	85 c0                	test   eax,eax
c00139f4:	74 17                	je     c0013a0d <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c00139f6:	83 ec 0c             	sub    esp,0xc
c00139f9:	68 2d 0f 02 c0       	push   0xc0020f2d
c00139fe:	e8 9e 6e ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0013a03:	83 c4 10             	add    esp,0x10
c0013a06:	31 c0                	xor    eax,eax
c0013a08:	e9 8b 00 00 00       	jmp    c0013a98 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0013a0d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013a10:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013a14:	83 ec 0c             	sub    esp,0xc
c0013a17:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013a1a:	50                   	push   eax
c0013a1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013a1f:	57                   	push   edi
c0013a20:	56                   	push   esi
c0013a21:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013a25:	e8 d0 fb ff ff       	call   c00135fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013a2a:	03 7c 24 34          	add    edi,DWORD PTR [esp+0x34]
c0013a2e:	83 c4 20             	add    esp,0x20
c0013a31:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013a35:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0013a39:	0f 43 7c 24 08       	cmovae edi,DWORD PTR [esp+0x8]
c0013a3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0013a42:	41                   	inc    ecx
c0013a43:	e9 6d ff ff ff       	jmp    c00139b5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013a48:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013a4c:	83 ec 0c             	sub    esp,0xc
c0013a4f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013a53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a57:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0013a5d:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013a63:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013a68:	05 00 10 00 00       	add    eax,0x1000
c0013a6d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a74:	e8 c6 3f ff ff       	call   c0007a3f <free>
c0013a79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a7c:	e8 be 3f ff ff       	call   c0007a3f <free>
c0013a81:	58                   	pop    eax
c0013a82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a86:	e8 b4 3f ff ff       	call   c0007a3f <free>
c0013a8b:	89 34 24             	mov    DWORD PTR [esp],esi
c0013a8e:	e8 d1 74 ff ff       	call   c000af64 <File::close()>
c0013a93:	83 c4 10             	add    esp,0x10
c0013a96:	b0 01                	mov    al,0x1
c0013a98:	83 c4 3c             	add    esp,0x3c
c0013a9b:	5b                   	pop    ebx
c0013a9c:	5e                   	pop    esi
c0013a9d:	5f                   	pop    edi
c0013a9e:	5d                   	pop    ebp
c0013a9f:	c3                   	ret    

c0013aa0 <Thr::runtimeReferenceHelper()>:
c0013aa0:	83 ec 18             	sub    esp,0x18
c0013aa3:	68 35 0f 02 c0       	push   0xc0020f35
c0013aa8:	e8 f4 6d ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0013aad:	fa                   	cli    
c0013aae:	83 c4 10             	add    esp,0x10
c0013ab1:	eb fe                	jmp    c0013ab1 <Thr::runtimeReferenceHelper()+0x11>

c0013ab3 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013ab3:	57                   	push   edi
c0013ab4:	56                   	push   esi
c0013ab5:	53                   	push   ebx
c0013ab6:	31 db                	xor    ebx,ebx
c0013ab8:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013abe:	7e 3c                	jle    c0013afc <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013ac0:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013ac7:	31 ff                	xor    edi,edi
c0013ac9:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013ad0:	7e 27                	jle    c0013af9 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013ad2:	50                   	push   eax
c0013ad3:	50                   	push   eax
c0013ad4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ad8:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ada:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013ae1:	50                   	push   eax
c0013ae2:	e8 e9 cb fe ff       	call   c00006d0 <strcmp>
c0013ae7:	83 c4 10             	add    esp,0x10
c0013aea:	85 c0                	test   eax,eax
c0013aec:	75 05                	jne    c0013af3 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013aee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013af1:	eb 0b                	jmp    c0013afe <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013af3:	83 c6 10             	add    esi,0x10
c0013af6:	47                   	inc    edi
c0013af7:	eb d0                	jmp    c0013ac9 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013af9:	43                   	inc    ebx
c0013afa:	eb bc                	jmp    c0013ab8 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013afc:	31 c0                	xor    eax,eax
c0013afe:	5b                   	pop    ebx
c0013aff:	5e                   	pop    esi
c0013b00:	5f                   	pop    edi
c0013b01:	c3                   	ret    

c0013b02 <Thr::loadKernelSymbolTable(char const*)>:
c0013b02:	55                   	push   ebp
c0013b03:	57                   	push   edi
c0013b04:	56                   	push   esi
c0013b05:	53                   	push   ebx
c0013b06:	83 ec 68             	sub    esp,0x68
c0013b09:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013b0f:	68 14 01 00 00       	push   0x114
c0013b14:	e8 16 3f ff ff       	call   c0007a2f <malloc>
c0013b19:	83 c4 0c             	add    esp,0xc
c0013b1c:	89 c3                	mov    ebx,eax
c0013b1e:	56                   	push   esi
c0013b1f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013b23:	50                   	push   eax
c0013b24:	e8 21 73 ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c0013b29:	5e                   	pop    esi
c0013b2a:	5f                   	pop    edi
c0013b2b:	6a 01                	push   0x1
c0013b2d:	53                   	push   ebx
c0013b2e:	e8 d3 73 ff ff       	call   c000af06 <File::open(FileOpenMode)>
c0013b33:	83 c4 10             	add    esp,0x10
c0013b36:	85 c0                	test   eax,eax
c0013b38:	74 0a                	je     c0013b44 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013b3a:	83 ec 0c             	sub    esp,0xc
c0013b3d:	68 57 0f 02 c0       	push   0xc0020f57
c0013b42:	eb 34                	jmp    c0013b78 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013b44:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013b4c:	83 ec 0c             	sub    esp,0xc
c0013b4f:	6a 34                	push   0x34
c0013b51:	e8 d9 3e ff ff       	call   c0007a2f <malloc>
c0013b56:	59                   	pop    ecx
c0013b57:	89 c6                	mov    esi,eax
c0013b59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b5b:	8d 7c 24 34          	lea    edi,[esp+0x34]
c0013b5f:	57                   	push   edi
c0013b60:	56                   	push   esi
c0013b61:	6a 00                	push   0x0
c0013b63:	6a 34                	push   0x34
c0013b65:	53                   	push   ebx
c0013b66:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b69:	83 c4 20             	add    esp,0x20
c0013b6c:	85 c0                	test   eax,eax
c0013b6e:	74 17                	je     c0013b87 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013b70:	83 ec 0c             	sub    esp,0xc
c0013b73:	68 6e 0f 02 c0       	push   0xc0020f6e
c0013b78:	e8 8a cc ff ff       	call   c0010807 <KePanic(char const*)>
c0013b7d:	83 c4 10             	add    esp,0x10
c0013b80:	31 c0                	xor    eax,eax
c0013b82:	e9 31 02 00 00       	jmp    c0013db8 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013b87:	81 3e 7f 45 4c 46    	cmp    DWORD PTR [esi],0x464c457f
c0013b8d:	75 e1                	jne    c0013b70 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013b8f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013b92:	85 c0                	test   eax,eax
c0013b94:	74 da                	je     c0013b70 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013b96:	52                   	push   edx
c0013b97:	31 d2                	xor    edx,edx
c0013b99:	52                   	push   edx
c0013b9a:	50                   	push   eax
c0013b9b:	53                   	push   ebx
c0013b9c:	e8 23 74 ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c0013ba1:	83 c4 10             	add    esp,0x10
c0013ba4:	85 c0                	test   eax,eax
c0013ba6:	75 c8                	jne    c0013b70 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013ba8:	0f b7 56 2e          	movzx  edx,WORD PTR [esi+0x2e]
c0013bac:	83 ec 0c             	sub    esp,0xc
c0013baf:	31 ed                	xor    ebp,ebp
c0013bb1:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
c0013bb5:	0f af c2             	imul   eax,edx
c0013bb8:	50                   	push   eax
c0013bb9:	e8 71 3e ff ff       	call   c0007a2f <malloc>
c0013bbe:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013bc0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013bc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bcb:	0f b7 56 2e          	movzx  edx,WORD PTR [esi+0x2e]
c0013bcf:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
c0013bd3:	0f af c2             	imul   eax,edx
c0013bd6:	99                   	cdq    
c0013bd7:	52                   	push   edx
c0013bd8:	50                   	push   eax
c0013bd9:	53                   	push   ebx
c0013bda:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013bdd:	83 c4 20             	add    esp,0x20
c0013be0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013be8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013bf0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013bf8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c00:	66 3b 6e 30          	cmp    bp,WORD PTR [esi+0x30]
c0013c04:	0f b7 fd             	movzx  edi,bp
c0013c07:	0f 83 a7 00 00 00    	jae    c0013cb4 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013c0d:	6b ff 28             	imul   edi,edi,0x28
c0013c10:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0013c14:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013c17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c1b:	50                   	push   eax
c0013c1c:	0f b7 46 32          	movzx  eax,WORD PTR [esi+0x32]
c0013c20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c24:	8b 17                	mov    edx,DWORD PTR [edi]
c0013c26:	6b c0 28             	imul   eax,eax,0x28
c0013c29:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013c2d:	89 d0                	mov    eax,edx
c0013c2f:	31 d2                	xor    edx,edx
c0013c31:	52                   	push   edx
c0013c32:	50                   	push   eax
c0013c33:	53                   	push   ebx
c0013c34:	e8 8b 73 ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c0013c39:	83 c4 0c             	add    esp,0xc
c0013c3c:	6a 20                	push   0x20
c0013c3e:	6a 00                	push   0x0
c0013c40:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013c44:	50                   	push   eax
c0013c45:	e8 a6 c8 fe ff       	call   c00004f0 <memset>
c0013c4a:	58                   	pop    eax
c0013c4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c4d:	8d 54 24 38          	lea    edx,[esp+0x38]
c0013c51:	52                   	push   edx
c0013c52:	8d 4c 24 40          	lea    ecx,[esp+0x40]
c0013c56:	51                   	push   ecx
c0013c57:	6a 00                	push   0x0
c0013c59:	6a 1f                	push   0x1f
c0013c5b:	53                   	push   ebx
c0013c5c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c5f:	83 c4 18             	add    esp,0x18
c0013c62:	68 85 0f 02 c0       	push   0xc0020f85
c0013c67:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013c6b:	50                   	push   eax
c0013c6c:	e8 5f ca fe ff       	call   c00006d0 <strcmp>
c0013c71:	83 c4 10             	add    esp,0x10
c0013c74:	85 c0                	test   eax,eax
c0013c76:	75 0f                	jne    c0013c87 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013c78:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013c7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c87:	50                   	push   eax
c0013c88:	50                   	push   eax
c0013c89:	68 8d 0f 02 c0       	push   0xc0020f8d
c0013c8e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013c92:	50                   	push   eax
c0013c93:	e8 38 ca fe ff       	call   c00006d0 <strcmp>
c0013c98:	83 c4 10             	add    esp,0x10
c0013c9b:	85 c0                	test   eax,eax
c0013c9d:	75 0f                	jne    c0013cae <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013c9f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013ca2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ca6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013caa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013cae:	45                   	inc    ebp
c0013caf:	e9 4c ff ff ff       	jmp    c0013c00 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013cb4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013cb9:	75 10                	jne    c0013ccb <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013cbb:	83 ec 0c             	sub    esp,0xc
c0013cbe:	68 95 0f 02 c0       	push   0xc0020f95
c0013cc3:	e8 3f cb ff ff       	call   c0010807 <KePanic(char const*)>
c0013cc8:	83 c4 10             	add    esp,0x10
c0013ccb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013cd0:	75 10                	jne    c0013ce2 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013cd2:	83 ec 0c             	sub    esp,0xc
c0013cd5:	68 95 0f 02 c0       	push   0xc0020f95
c0013cda:	e8 28 cb ff ff       	call   c0010807 <KePanic(char const*)>
c0013cdf:	83 c4 10             	add    esp,0x10
c0013ce2:	50                   	push   eax
c0013ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ce7:	31 d2                	xor    edx,edx
c0013ce9:	52                   	push   edx
c0013cea:	50                   	push   eax
c0013ceb:	53                   	push   ebx
c0013cec:	e8 d3 72 ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c0013cf1:	5a                   	pop    edx
c0013cf2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013cf6:	e8 34 3d ff ff       	call   c0007a2f <malloc>
c0013cfb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013cff:	31 c9                	xor    ecx,ecx
c0013d01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d05:	5f                   	pop    edi
c0013d06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d08:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013d0c:	55                   	push   ebp
c0013d0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d11:	51                   	push   ecx
c0013d12:	52                   	push   edx
c0013d13:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013d17:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013d1b:	53                   	push   ebx
c0013d1c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d1f:	83 c4 14             	add    esp,0x14
c0013d22:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d26:	e8 04 3d ff ff       	call   c0007a2f <malloc>
c0013d2b:	89 c7                	mov    edi,eax
c0013d2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d2f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013d32:	57                   	push   edi
c0013d33:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013d37:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013d3b:	51                   	push   ecx
c0013d3c:	52                   	push   edx
c0013d3d:	53                   	push   ebx
c0013d3e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013d45:	83 c4 1c             	add    esp,0x1c
c0013d48:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013d4e:	c1 e8 04             	shr    eax,0x4
c0013d51:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013d58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d5c:	31 d2                	xor    edx,edx
c0013d5e:	52                   	push   edx
c0013d5f:	50                   	push   eax
c0013d60:	53                   	push   ebx
c0013d61:	e8 5e 72 ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c0013d66:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013d68:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013d6b:	31 d2                	xor    edx,edx
c0013d6d:	57                   	push   edi
c0013d6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013d72:	52                   	push   edx
c0013d73:	50                   	push   eax
c0013d74:	53                   	push   ebx
c0013d75:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d78:	83 c4 14             	add    esp,0x14
c0013d7b:	53                   	push   ebx
c0013d7c:	e8 e3 71 ff ff       	call   c000af64 <File::close()>
c0013d81:	5d                   	pop    ebp
c0013d82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013d86:	e8 b4 3c ff ff       	call   c0007a3f <free>
c0013d8b:	89 34 24             	mov    DWORD PTR [esp],esi
c0013d8e:	e8 ac 3c ff ff       	call   c0007a3f <free>
c0013d93:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013d98:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013d9c:	83 c4 10             	add    esp,0x10
c0013d9f:	8d 50 01             	lea    edx,[eax+0x1]
c0013da2:	89 3c 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],edi
c0013da9:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013db0:	b0 01                	mov    al,0x1
c0013db2:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013db8:	83 c4 5c             	add    esp,0x5c
c0013dbb:	5b                   	pop    ebx
c0013dbc:	5e                   	pop    esi
c0013dbd:	5f                   	pop    edi
c0013dbe:	5d                   	pop    ebp
c0013dbf:	c3                   	ret    

c0013dc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013dc0:	55                   	push   ebp
c0013dc1:	57                   	push   edi
c0013dc2:	56                   	push   esi
c0013dc3:	53                   	push   ebx
c0013dc4:	81 ec 68 03 00 00    	sub    esp,0x368
c0013dca:	8b 1d 90 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028190
c0013dd0:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013dd7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0013ddb:	68 14 01 00 00       	push   0x114
c0013de0:	e8 4a 3c ff ff       	call   c0007a2f <malloc>
c0013de5:	83 c4 0c             	add    esp,0xc
c0013de8:	53                   	push   ebx
c0013de9:	89 c5                	mov    ebp,eax
c0013deb:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013df2:	50                   	push   eax
c0013df3:	e8 52 70 ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c0013df8:	5e                   	pop    esi
c0013df9:	5f                   	pop    edi
c0013dfa:	6a 01                	push   0x1
c0013dfc:	55                   	push   ebp
c0013dfd:	e8 04 71 ff ff       	call   c000af06 <File::open(FileOpenMode)>
c0013e02:	83 c4 10             	add    esp,0x10
c0013e05:	85 c0                	test   eax,eax
c0013e07:	0f 85 a3 06 00 00    	jne    c00144b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f0>
c0013e0d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013e15:	83 ec 0c             	sub    esp,0xc
c0013e18:	6a 34                	push   0x34
c0013e1a:	e8 10 3c ff ff       	call   c0007a2f <malloc>
c0013e1f:	5b                   	pop    ebx
c0013e20:	89 c7                	mov    edi,eax
c0013e22:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e25:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013e29:	53                   	push   ebx
c0013e2a:	57                   	push   edi
c0013e2b:	6a 00                	push   0x0
c0013e2d:	6a 34                	push   0x34
c0013e2f:	55                   	push   ebp
c0013e30:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e33:	83 c4 20             	add    esp,0x20
c0013e36:	85 c0                	test   eax,eax
c0013e38:	0f 85 72 06 00 00    	jne    c00144b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f0>
c0013e3e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013e44:	0f 85 66 06 00 00    	jne    c00144b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f0>
c0013e4a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013e4d:	85 c0                	test   eax,eax
c0013e4f:	0f 84 5b 06 00 00    	je     c00144b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f0>
c0013e55:	31 d2                	xor    edx,edx
c0013e57:	51                   	push   ecx
c0013e58:	52                   	push   edx
c0013e59:	50                   	push   eax
c0013e5a:	55                   	push   ebp
c0013e5b:	e8 64 71 ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c0013e60:	83 c4 10             	add    esp,0x10
c0013e63:	85 c0                	test   eax,eax
c0013e65:	0f 85 45 06 00 00    	jne    c00144b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f0>
c0013e6b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0013e6e:	83 ec 0c             	sub    esp,0xc
c0013e71:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013e75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013e79:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013e7d:	0f af c2             	imul   eax,edx
c0013e80:	50                   	push   eax
c0013e81:	e8 a9 3b ff ff       	call   c0007a2f <malloc>
c0013e86:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013e89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013e90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e94:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013e98:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013e9c:	0f af c2             	imul   eax,edx
c0013e9f:	99                   	cdq    
c0013ea0:	52                   	push   edx
c0013ea1:	50                   	push   eax
c0013ea2:	55                   	push   ebp
c0013ea3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ea6:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0013ea9:	83 c4 20             	add    esp,0x20
c0013eac:	85 c0                	test   eax,eax
c0013eae:	0f 84 fc 05 00 00    	je     c00144b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f0>
c0013eb4:	52                   	push   edx
c0013eb5:	31 d2                	xor    edx,edx
c0013eb7:	52                   	push   edx
c0013eb8:	50                   	push   eax
c0013eb9:	55                   	push   ebp
c0013eba:	e8 05 71 ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c0013ebf:	83 c4 10             	add    esp,0x10
c0013ec2:	85 c0                	test   eax,eax
c0013ec4:	0f 85 e6 05 00 00    	jne    c00144b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f0>
c0013eca:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013ece:	83 ec 0c             	sub    esp,0xc
c0013ed1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013ed5:	0f af c2             	imul   eax,edx
c0013ed8:	50                   	push   eax
c0013ed9:	e8 51 3b ff ff       	call   c0007a2f <malloc>
c0013ede:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013ee1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ee4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013ee8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013eec:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013ef0:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013ef4:	0f af c2             	imul   eax,edx
c0013ef7:	99                   	cdq    
c0013ef8:	52                   	push   edx
c0013ef9:	50                   	push   eax
c0013efa:	55                   	push   ebp
c0013efb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013efe:	83 c4 20             	add    esp,0x20
c0013f01:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0013f08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f0c:	66 3b 47 2c          	cmp    ax,WORD PTR [edi+0x2c]
c0013f10:	0f b7 5c 24 04       	movzx  ebx,WORD PTR [esp+0x4]
c0013f15:	73 7a                	jae    c0013f91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0013f17:	c1 e3 05             	shl    ebx,0x5
c0013f1a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0013f1e:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0013f21:	75 64                	jne    c0013f87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c7>
c0013f23:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013f26:	31 d2                	xor    edx,edx
c0013f28:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0013f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013f2f:	50                   	push   eax
c0013f30:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013f33:	52                   	push   edx
c0013f34:	50                   	push   eax
c0013f35:	55                   	push   ebp
c0013f36:	e8 89 70 ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c0013f3b:	83 c4 10             	add    esp,0x10
c0013f3e:	85 c0                	test   eax,eax
c0013f40:	0f 85 6a 05 00 00    	jne    c00144b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f0>
c0013f46:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013f4d:	83 ec 0c             	sub    esp,0xc
c0013f50:	31 d2                	xor    edx,edx
c0013f52:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0013f56:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013f59:	01 c6                	add    esi,eax
c0013f5b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013f62:	50                   	push   eax
c0013f63:	56                   	push   esi
c0013f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f68:	52                   	push   edx
c0013f69:	50                   	push   eax
c0013f6a:	55                   	push   ebp
c0013f6b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f6e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013f71:	83 c4 1c             	add    esp,0x1c
c0013f74:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0013f77:	50                   	push   eax
c0013f78:	6a 00                	push   0x0
c0013f7a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013f7e:	56                   	push   esi
c0013f7f:	e8 6c c5 fe ff       	call   c00004f0 <memset>
c0013f84:	83 c4 10             	add    esp,0x10
c0013f87:	66 ff 44 24 04       	inc    WORD PTR [esp+0x4]
c0013f8c:	e9 77 ff ff ff       	jmp    c0013f08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x148>
c0013f91:	53                   	push   ebx
c0013f92:	68 00 01 00 00       	push   0x100
c0013f97:	6a 00                	push   0x0
c0013f99:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013f9d:	50                   	push   eax
c0013f9e:	e8 4d c5 fe ff       	call   c00004f0 <memset>
c0013fa3:	83 c4 0c             	add    esp,0xc
c0013fa6:	68 00 01 00 00       	push   0x100
c0013fab:	6a 00                	push   0x0
c0013fad:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0013fb4:	50                   	push   eax
c0013fb5:	e8 36 c5 fe ff       	call   c00004f0 <memset>
c0013fba:	83 c4 10             	add    esp,0x10
c0013fbd:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0013fc4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013fcc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013fd4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0013fdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013fe4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013fec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ff0:	66 3b 47 30          	cmp    ax,WORD PTR [edi+0x30]
c0013ff4:	0f b7 74 24 18       	movzx  esi,WORD PTR [esp+0x18]
c0013ff9:	0f 83 1d 01 00 00    	jae    c001411c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x35c>
c0013fff:	6b f6 28             	imul   esi,esi,0x28
c0014002:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014006:	8b 5e 10             	mov    ebx,DWORD PTR [esi+0x10]
c0014009:	52                   	push   edx
c001400a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001400e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014012:	8b 06                	mov    eax,DWORD PTR [esi]
c0014014:	6b d2 28             	imul   edx,edx,0x28
c0014017:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001401b:	31 d2                	xor    edx,edx
c001401d:	52                   	push   edx
c001401e:	50                   	push   eax
c001401f:	55                   	push   ebp
c0014020:	e8 9f 6f ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c0014025:	83 c4 0c             	add    esp,0xc
c0014028:	6a 20                	push   0x20
c001402a:	6a 00                	push   0x0
c001402c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014033:	50                   	push   eax
c0014034:	e8 b7 c4 fe ff       	call   c00004f0 <memset>
c0014039:	59                   	pop    ecx
c001403a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001403d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014041:	52                   	push   edx
c0014042:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014049:	51                   	push   ecx
c001404a:	6a 00                	push   0x0
c001404c:	6a 1f                	push   0x1f
c001404e:	55                   	push   ebp
c001404f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014052:	83 c4 1c             	add    esp,0x1c
c0014055:	6a 09                	push   0x9
c0014057:	68 af 0f 02 c0       	push   0xc0020faf
c001405c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014063:	50                   	push   eax
c0014064:	e8 17 c3 fe ff       	call   c0000380 <memcmp>
c0014069:	83 c4 10             	add    esp,0x10
c001406c:	85 c0                	test   eax,eax
c001406e:	75 1d                	jne    c001408d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2cd>
c0014070:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014074:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014078:	89 5c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ebx
c001407c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001407f:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014086:	89 c8                	mov    eax,ecx
c0014088:	40                   	inc    eax
c0014089:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001408d:	50                   	push   eax
c001408e:	6a 09                	push   0x9
c0014090:	68 b9 0f 02 c0       	push   0xc0020fb9
c0014095:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001409c:	50                   	push   eax
c001409d:	e8 de c2 fe ff       	call   c0000380 <memcmp>
c00140a2:	83 c4 10             	add    esp,0x10
c00140a5:	85 c0                	test   eax,eax
c00140a7:	75 1d                	jne    c00140c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x306>
c00140a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140ad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00140b1:	89 5c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ebx
c00140b5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140b8:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00140bf:	89 c8                	mov    eax,ecx
c00140c1:	40                   	inc    eax
c00140c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140c6:	50                   	push   eax
c00140c7:	50                   	push   eax
c00140c8:	68 85 0f 02 c0       	push   0xc0020f85
c00140cd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00140d4:	50                   	push   eax
c00140d5:	e8 f6 c5 fe ff       	call   c00006d0 <strcmp>
c00140da:	83 c4 10             	add    esp,0x10
c00140dd:	85 c0                	test   eax,eax
c00140df:	75 0b                	jne    c00140ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32c>
c00140e1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140e4:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00140e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140ec:	50                   	push   eax
c00140ed:	50                   	push   eax
c00140ee:	68 8d 0f 02 c0       	push   0xc0020f8d
c00140f3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00140fa:	50                   	push   eax
c00140fb:	e8 d0 c5 fe ff       	call   c00006d0 <strcmp>
c0014100:	83 c4 10             	add    esp,0x10
c0014103:	85 c0                	test   eax,eax
c0014105:	75 0b                	jne    c0014112 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x352>
c0014107:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001410a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001410e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014112:	66 ff 44 24 18       	inc    WORD PTR [esp+0x18]
c0014117:	e9 d0 fe ff ff       	jmp    c0013fec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22c>
c001411c:	50                   	push   eax
c001411d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014121:	31 d2                	xor    edx,edx
c0014123:	52                   	push   edx
c0014124:	50                   	push   eax
c0014125:	55                   	push   ebp
c0014126:	e8 99 6e ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c001412b:	58                   	pop    eax
c001412c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014130:	e8 fa 38 ff ff       	call   c0007a2f <malloc>
c0014135:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014138:	31 d2                	xor    edx,edx
c001413a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001413e:	58                   	pop    eax
c001413f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014143:	53                   	push   ebx
c0014144:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014148:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001414c:	52                   	push   edx
c001414d:	50                   	push   eax
c001414e:	55                   	push   ebp
c001414f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014152:	83 c4 14             	add    esp,0x14
c0014155:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014159:	e8 d1 38 ff ff       	call   c0007a2f <malloc>
c001415e:	31 d2                	xor    edx,edx
c0014160:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014164:	83 c4 0c             	add    esp,0xc
c0014167:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001416b:	52                   	push   edx
c001416c:	50                   	push   eax
c001416d:	55                   	push   ebp
c001416e:	e8 51 6e ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c0014173:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014176:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014179:	31 d2                	xor    edx,edx
c001417b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001417f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014183:	52                   	push   edx
c0014184:	50                   	push   eax
c0014185:	55                   	push   ebp
c0014186:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014189:	83 c4 20             	add    esp,0x20
c001418c:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014191:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014199:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001419d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141a1:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c00141a5:	0f 84 09 03 00 00    	je     c00144b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00141ab:	8b 84 b4 50 01 00 00 	mov    eax,DWORD PTR [esp+esi*4+0x150]
c00141b2:	31 d2                	xor    edx,edx
c00141b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00141b8:	c1 e8 03             	shr    eax,0x3
c00141bb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00141bf:	51                   	push   ecx
c00141c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141c4:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00141c8:	52                   	push   edx
c00141c9:	50                   	push   eax
c00141ca:	55                   	push   ebp
c00141cb:	e8 f4 6d ff ff       	call   c000afc4 <File::seek(unsigned long long)>
c00141d0:	5b                   	pop    ebx
c00141d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141d5:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00141dc:	e8 4e 38 ff ff       	call   c0007a2f <malloc>
c00141e1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00141e4:	31 d2                	xor    edx,edx
c00141e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00141ea:	5e                   	pop    esi
c00141eb:	8d 44 24 58          	lea    eax,[esp+0x58]
c00141ef:	50                   	push   eax
c00141f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00141f8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00141ff:	52                   	push   edx
c0014200:	50                   	push   eax
c0014201:	55                   	push   ebp
c0014202:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014205:	83 c4 20             	add    esp,0x20
c0014208:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014210:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0014214:	39 4c 24 20          	cmp    DWORD PTR [esp+0x20],ecx
c0014218:	0f 8d 7a 02 00 00    	jge    c0014498 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d8>
c001421e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014222:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014227:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001422b:	8b 04 f0             	mov    eax,DWORD PTR [eax+esi*8]
c001422e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014232:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014236:	8b 44 f0 04          	mov    eax,DWORD PTR [eax+esi*8+0x4]
c001423a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001423e:	c1 e8 08             	shr    eax,0x8
c0014241:	89 c3                	mov    ebx,eax
c0014243:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014247:	c1 e3 04             	shl    ebx,0x4
c001424a:	03 5c 24 34          	add    ebx,DWORD PTR [esp+0x34]
c001424e:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0014251:	85 f6                	test   esi,esi
c0014253:	0f 85 b3 00 00 00    	jne    c001430c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014259:	83 ec 0c             	sub    esp,0xc
c001425c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014260:	03 03                	add    eax,DWORD PTR [ebx]
c0014262:	50                   	push   eax
c0014263:	e8 4b f8 ff ff       	call   c0013ab3 <Thr::getAddressOfKernelSymbol(char const*)>
c0014268:	83 c4 10             	add    esp,0x10
c001426b:	85 c0                	test   eax,eax
c001426d:	89 c6                	mov    esi,eax
c001426f:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014274:	0f 85 92 00 00 00    	jne    c001430c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001427a:	83 ec 0c             	sub    esp,0xc
c001427d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014281:	03 03                	add    eax,DWORD PTR [ebx]
c0014283:	50                   	push   eax
c0014284:	e8 67 c7 ff ff       	call   c00109f0 <KeResolveCompatibilitySymbol(char*)>
c0014289:	83 c4 10             	add    esp,0x10
c001428c:	85 c0                	test   eax,eax
c001428e:	89 c6                	mov    esi,eax
c0014290:	75 7a                	jne    c001430c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014292:	51                   	push   ecx
c0014293:	51                   	push   ecx
c0014294:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014298:	03 03                	add    eax,DWORD PTR [ebx]
c001429a:	50                   	push   eax
c001429b:	68 c3 0f 02 c0       	push   0xc0020fc3
c00142a0:	e8 fc 65 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c00142a5:	58                   	pop    eax
c00142a6:	5a                   	pop    edx
c00142a7:	68 dd 0f 02 c0       	push   0xc0020fdd
c00142ac:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00142b3:	50                   	push   eax
c00142b4:	e8 37 c3 fe ff       	call   c00005f0 <strcpy>
c00142b9:	59                   	pop    ecx
c00142ba:	58                   	pop    eax
c00142bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00142bf:	03 03                	add    eax,DWORD PTR [ebx]
c00142c1:	50                   	push   eax
c00142c2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00142c9:	50                   	push   eax
c00142ca:	e8 f1 c4 fe ff       	call   c00007c0 <strcat>
c00142cf:	58                   	pop    eax
c00142d0:	5a                   	pop    edx
c00142d1:	68 73 10 02 c0       	push   0xc0021073
c00142d6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00142dd:	50                   	push   eax
c00142de:	e8 dd c4 fe ff       	call   c00007c0 <strcat>
c00142e3:	83 c4 10             	add    esp,0x10
c00142e6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00142eb:	0f 84 61 01 00 00    	je     c0014452 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x692>
c00142f1:	83 ec 0c             	sub    esp,0xc
c00142f4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00142fb:	50                   	push   eax
c00142fc:	e8 06 c5 ff ff       	call   c0010807 <KePanic(char const*)>
c0014301:	83 c4 10             	add    esp,0x10
c0014304:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014308:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c001430c:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014311:	83 f8 01             	cmp    eax,0x1
c0014314:	0f 85 90 00 00 00    	jne    c00143aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c001431a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001431e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014325:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014329:	01 c8                	add    eax,ecx
c001432b:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014337:	8b 00                	mov    eax,DWORD PTR [eax]
c0014339:	0f 94 c2             	sete   dl
c001433c:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014344:	0f 94 c3             	sete   bl
c0014347:	09 da                	or     edx,ebx
c0014349:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001434e:	0f b6 d2             	movzx  edx,dl
c0014351:	74 39                	je     c001438c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0014353:	8d 1c 30             	lea    ebx,[eax+esi*1]
c0014356:	85 d2                	test   edx,edx
c0014358:	75 15                	jne    c001436f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5af>
c001435a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001435e:	66 83 f8 0c          	cmp    ax,0xc
c0014362:	76 05                	jbe    c0014369 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a9>
c0014364:	b8 0c 00 00 00       	mov    eax,0xc
c0014369:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001436d:	76 30                	jbe    c001439f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5df>
c001436f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014374:	0f 84 d8 00 00 00    	je     c0014452 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x692>
c001437a:	83 ec 0c             	sub    esp,0xc
c001437d:	68 f4 0f 02 c0       	push   0xc0020ff4
c0014382:	e8 80 c4 ff ff       	call   c0010807 <KePanic(char const*)>
c0014387:	83 c4 10             	add    esp,0x10
c001438a:	eb 13                	jmp    c001439f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5df>
c001438c:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001438f:	85 d2                	test   edx,edx
c0014391:	75 0c                	jne    c001439f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5df>
c0014393:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014397:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001439b:	77 02                	ja     c001439f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5df>
c001439d:	01 f3                	add    ebx,esi
c001439f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00143a3:	89 18                	mov    DWORD PTR [eax],ebx
c00143a5:	e9 e5 00 00 00       	jmp    c001448f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6cf>
c00143aa:	83 f8 02             	cmp    eax,0x2
c00143ad:	75 7a                	jne    c0014429 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x669>
c00143af:	8b 9c 24 74 03 00 00 	mov    ebx,DWORD PTR [esp+0x374]
c00143b6:	2b 5c 24 24          	sub    ebx,DWORD PTR [esp+0x24]
c00143ba:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c00143be:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00143c6:	74 21                	je     c00143e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x629>
c00143c8:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00143d0:	74 17                	je     c00143e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x629>
c00143d2:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00143d6:	b8 0a 00 00 00       	mov    eax,0xa
c00143db:	83 fa 0e             	cmp    edx,0xe
c00143de:	77 03                	ja     c00143e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x623>
c00143e0:	8d 42 fc             	lea    eax,[edx-0x4]
c00143e3:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00143e7:	76 17                	jbe    c0014400 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x640>
c00143e9:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00143ee:	74 62                	je     c0014452 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x692>
c00143f0:	83 ec 0c             	sub    esp,0xc
c00143f3:	68 10 10 02 c0       	push   0xc0021010
c00143f8:	e8 0a c4 ff ff       	call   c0010807 <KePanic(char const*)>
c00143fd:	83 c4 10             	add    esp,0x10
c0014400:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014405:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014407:	74 16                	je     c001441f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65f>
c0014409:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001440d:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014414:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014418:	01 c2                	add    edx,eax
c001441a:	8d 04 32             	lea    eax,[edx+esi*1]
c001441d:	eb 06                	jmp    c0014425 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x665>
c001441f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014423:	01 f0                	add    eax,esi
c0014425:	89 03                	mov    DWORD PTR [ebx],eax
c0014427:	eb 66                	jmp    c001448f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6cf>
c0014429:	52                   	push   edx
c001442a:	52                   	push   edx
c001442b:	50                   	push   eax
c001442c:	68 2c 10 02 c0       	push   0xc002102c
c0014431:	e8 6b 64 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0014436:	83 c4 10             	add    esp,0x10
c0014439:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001443e:	74 12                	je     c0014452 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x692>
c0014440:	83 ec 0c             	sub    esp,0xc
c0014443:	68 37 10 02 c0       	push   0xc0021037
c0014448:	e8 ba c3 ff ff       	call   c0010807 <KePanic(char const*)>
c001444d:	83 c4 10             	add    esp,0x10
c0014450:	eb 3d                	jmp    c001448f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6cf>
c0014452:	83 ec 0c             	sub    esp,0xc
c0014455:	55                   	push   ebp
c0014456:	e8 09 6b ff ff       	call   c000af64 <File::close()>
c001445b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001445e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014461:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014464:	59                   	pop    ecx
c0014465:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014469:	e8 d1 35 ff ff       	call   c0007a3f <free>
c001446e:	5b                   	pop    ebx
c001446f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014473:	e8 c7 35 ff ff       	call   c0007a3f <free>
c0014478:	89 3c 24             	mov    DWORD PTR [esp],edi
c001447b:	e8 bf 35 ff ff       	call   c0007a3f <free>
c0014480:	5e                   	pop    esi
c0014481:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014485:	e8 b5 35 ff ff       	call   c0007a3f <free>
c001448a:	83 c4 10             	add    esp,0x10
c001448d:	eb 21                	jmp    c00144b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f0>
c001448f:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014493:	e9 78 fd ff ff       	jmp    c0014210 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x450>
c0014498:	83 ec 0c             	sub    esp,0xc
c001449b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001449f:	e8 9b 35 ff ff       	call   c0007a3f <free>
c00144a4:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00144a8:	83 c4 10             	add    esp,0x10
c00144ab:	e9 ed fc ff ff       	jmp    c001419d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3dd>
c00144b0:	31 c0                	xor    eax,eax
c00144b2:	eb 33                	jmp    c00144e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c00144b4:	83 ec 0c             	sub    esp,0xc
c00144b7:	55                   	push   ebp
c00144b8:	e8 a7 6a ff ff       	call   c000af64 <File::close()>
c00144bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144c0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00144c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144c6:	58                   	pop    eax
c00144c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144cb:	e8 6f 35 ff ff       	call   c0007a3f <free>
c00144d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144d3:	e8 67 35 ff ff       	call   c0007a3f <free>
c00144d8:	5a                   	pop    edx
c00144d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144dd:	e8 5d 35 ff ff       	call   c0007a3f <free>
c00144e2:	83 c4 10             	add    esp,0x10
c00144e5:	b0 01                	mov    al,0x1
c00144e7:	81 c4 5c 03 00 00    	add    esp,0x35c
c00144ed:	5b                   	pop    ebx
c00144ee:	5e                   	pop    esi
c00144ef:	5f                   	pop    edi
c00144f0:	5d                   	pop    ebp
c00144f1:	c3                   	ret    

c00144f2 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00144f2:	56                   	push   esi
c00144f3:	31 d2                	xor    edx,edx
c00144f5:	53                   	push   ebx
c00144f6:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c00144fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014500:	39 d3                	cmp    ebx,edx
c0014502:	7e 1b                	jle    c001451f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014504:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c001450b:	39 c8                	cmp    eax,ecx
c001450d:	77 0d                	ja     c001451c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001450f:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c0014516:	01 c6                	add    esi,eax
c0014518:	39 ce                	cmp    esi,ecx
c001451a:	77 05                	ja     c0014521 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001451c:	42                   	inc    edx
c001451d:	eb e1                	jmp    c0014500 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001451f:	31 c0                	xor    eax,eax
c0014521:	5b                   	pop    ebx
c0014522:	5e                   	pop    esi
c0014523:	c3                   	ret    

c0014524 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014524:	53                   	push   ebx
c0014525:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c001452b:	31 c0                	xor    eax,eax
c001452d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014531:	39 c3                	cmp    ebx,eax
c0014533:	7e 22                	jle    c0014557 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014535:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c001453c:	39 ca                	cmp    edx,ecx
c001453e:	77 14                	ja     c0014554 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014540:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c0014547:	39 ca                	cmp    edx,ecx
c0014549:	76 09                	jbe    c0014554 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001454b:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c0014552:	eb 05                	jmp    c0014559 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014554:	40                   	inc    eax
c0014555:	eb da                	jmp    c0014531 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014557:	31 c0                	xor    eax,eax
c0014559:	5b                   	pop    ebx
c001455a:	c3                   	ret    

c001455b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001455b:	53                   	push   ebx
c001455c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014560:	53                   	push   ebx
c0014561:	e8 8c ff ff ff       	call   c00144f2 <Thr::getDriverBaseFromAddress(unsigned long)>
c0014566:	5a                   	pop    edx
c0014567:	31 d2                	xor    edx,edx
c0014569:	85 c0                	test   eax,eax
c001456b:	74 04                	je     c0014571 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001456d:	89 da                	mov    edx,ebx
c001456f:	29 c2                	sub    edx,eax
c0014571:	89 d0                	mov    eax,edx
c0014573:	5b                   	pop    ebx
c0014574:	c3                   	ret    

c0014575 <Thr::loadDLL(char const*, bool)>:
c0014575:	55                   	push   ebp
c0014576:	57                   	push   edi
c0014577:	56                   	push   esi
c0014578:	53                   	push   ebx
c0014579:	81 ec 34 01 00 00    	sub    esp,0x134
c001457f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014586:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001458d:	56                   	push   esi
c001458e:	68 4f 10 02 c0       	push   0xc002104f
c0014593:	e8 09 63 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0014598:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001459f:	e8 8b 34 ff ff       	call   c0007a2f <malloc>
c00145a4:	83 c4 0c             	add    esp,0xc
c00145a7:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00145ad:	89 c3                	mov    ebx,eax
c00145af:	56                   	push   esi
c00145b0:	50                   	push   eax
c00145b1:	e8 94 68 ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c00145b6:	83 c4 10             	add    esp,0x10
c00145b9:	85 db                	test   ebx,ebx
c00145bb:	75 3c                	jne    c00145f9 <Thr::loadDLL(char const*, bool)+0x84>
c00145bd:	89 f8                	mov    eax,edi
c00145bf:	84 c0                	test   al,al
c00145c1:	0f 84 dd 01 00 00    	je     c00147a4 <Thr::loadDLL(char const*, bool)+0x22f>
c00145c7:	50                   	push   eax
c00145c8:	50                   	push   eax
c00145c9:	68 60 10 02 c0       	push   0xc0021060
c00145ce:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00145d2:	55                   	push   ebp
c00145d3:	e8 18 c0 fe ff       	call   c00005f0 <strcpy>
c00145d8:	58                   	pop    eax
c00145d9:	5a                   	pop    edx
c00145da:	56                   	push   esi
c00145db:	55                   	push   ebp
c00145dc:	e8 df c1 fe ff       	call   c00007c0 <strcat>
c00145e1:	59                   	pop    ecx
c00145e2:	58                   	pop    eax
c00145e3:	68 73 10 02 c0       	push   0xc0021073
c00145e8:	55                   	push   ebp
c00145e9:	e8 d2 c1 fe ff       	call   c00007c0 <strcat>
c00145ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00145f1:	e8 11 c2 ff ff       	call   c0010807 <KePanic(char const*)>
c00145f6:	83 c4 10             	add    esp,0x10
c00145f9:	50                   	push   eax
c00145fa:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00145fe:	50                   	push   eax
c00145ff:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014603:	50                   	push   eax
c0014604:	53                   	push   ebx
c0014605:	e8 a8 6b ff ff       	call   c000b1b2 <File::stat(unsigned long long*, bool*)>
c001460a:	83 c4 10             	add    esp,0x10
c001460d:	85 db                	test   ebx,ebx
c001460f:	74 0c                	je     c001461d <Thr::loadDLL(char const*, bool)+0xa8>
c0014611:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014613:	83 ec 0c             	sub    esp,0xc
c0014616:	53                   	push   ebx
c0014617:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001461a:	83 c4 10             	add    esp,0x10
c001461d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014622:	75 0a                	jne    c001462e <Thr::loadDLL(char const*, bool)+0xb9>
c0014624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014628:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001462c:	75 3e                	jne    c001466c <Thr::loadDLL(char const*, bool)+0xf7>
c001462e:	89 f8                	mov    eax,edi
c0014630:	31 db                	xor    ebx,ebx
c0014632:	84 c0                	test   al,al
c0014634:	0f 84 6a 01 00 00    	je     c00147a4 <Thr::loadDLL(char const*, bool)+0x22f>
c001463a:	50                   	push   eax
c001463b:	50                   	push   eax
c001463c:	68 60 10 02 c0       	push   0xc0021060
c0014641:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014645:	53                   	push   ebx
c0014646:	e8 a5 bf fe ff       	call   c00005f0 <strcpy>
c001464b:	58                   	pop    eax
c001464c:	5a                   	pop    edx
c001464d:	56                   	push   esi
c001464e:	53                   	push   ebx
c001464f:	e8 6c c1 fe ff       	call   c00007c0 <strcat>
c0014654:	59                   	pop    ecx
c0014655:	5d                   	pop    ebp
c0014656:	68 73 10 02 c0       	push   0xc0021073
c001465b:	53                   	push   ebx
c001465c:	e8 5f c1 fe ff       	call   c00007c0 <strcat>
c0014661:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014664:	e8 9e c1 ff ff       	call   c0010807 <KePanic(char const*)>
c0014669:	83 c4 10             	add    esp,0x10
c001466c:	53                   	push   ebx
c001466d:	6a 03                	push   0x3
c001466f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014673:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014677:	05 ff 0f 00 00       	add    eax,0xfff
c001467c:	83 d2 00             	adc    edx,0x0
c001467f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014683:	50                   	push   eax
c0014684:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001468a:	e8 cd 56 ff ff       	call   c0009d5c <VAS::allocatePages(int, int)>
c001468f:	89 c3                	mov    ebx,eax
c0014691:	58                   	pop    eax
c0014692:	5a                   	pop    edx
c0014693:	53                   	push   ebx
c0014694:	68 f2 fb 01 c0       	push   0xc001fbf2
c0014699:	e8 03 62 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c001469e:	89 34 24             	mov    DWORD PTR [esp],esi
c00146a1:	e8 7a be fe ff       	call   c0000520 <strlen>
c00146a6:	8b 2d a0 79 02 c0    	mov    ebp,DWORD PTR ds:0xc00279a0
c00146ac:	40                   	inc    eax
c00146ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00146b0:	e8 7a 33 ff ff       	call   c0007a2f <malloc>
c00146b5:	59                   	pop    ecx
c00146b6:	89 04 ad c0 7d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8240],eax
c00146bd:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c00146c2:	5d                   	pop    ebp
c00146c3:	56                   	push   esi
c00146c4:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c00146cb:	e8 20 bf fe ff       	call   c00005f0 <strcpy>
c00146d0:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c00146d5:	8d 50 01             	lea    edx,[eax+0x1]
c00146d8:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c00146df:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c00146e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00146e9:	83 c4 0c             	add    esp,0xc
c00146ec:	6a 01                	push   0x1
c00146ee:	53                   	push   ebx
c00146ef:	56                   	push   esi
c00146f0:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c00146f7:	e8 c4 f6 ff ff       	call   c0013dc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00146fc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014700:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014704:	83 c4 10             	add    esp,0x10
c0014707:	83 f0 01             	xor    eax,0x1
c001470a:	84 c0                	test   al,al
c001470c:	74 18                	je     c0014726 <Thr::loadDLL(char const*, bool)+0x1b1>
c001470e:	89 f8                	mov    eax,edi
c0014710:	84 c0                	test   al,al
c0014712:	74 12                	je     c0014726 <Thr::loadDLL(char const*, bool)+0x1b1>
c0014714:	83 ec 0c             	sub    esp,0xc
c0014717:	68 75 10 02 c0       	push   0xc0021075
c001471c:	e8 e6 c0 ff ff       	call   c0010807 <KePanic(char const*)>
c0014721:	83 c4 10             	add    esp,0x10
c0014724:	eb 07                	jmp    c001472d <Thr::loadDLL(char const*, bool)+0x1b8>
c0014726:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001472b:	75 10                	jne    c001473d <Thr::loadDLL(char const*, bool)+0x1c8>
c001472d:	83 ec 0c             	sub    esp,0xc
c0014730:	68 94 10 02 c0       	push   0xc0021094
c0014735:	e8 cd c0 ff ff       	call   c0010807 <KePanic(char const*)>
c001473a:	83 c4 10             	add    esp,0x10
c001473d:	31 ed                	xor    ebp,ebp
c001473f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014743:	bf 00 00 00 00       	mov    edi,0x0
c0014748:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001474c:	05 ff 0f 00 00       	add    eax,0xfff
c0014751:	83 d2 00             	adc    edx,0x0
c0014754:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014758:	c1 ea 0c             	shr    edx,0xc
c001475b:	89 d1                	mov    ecx,edx
c001475d:	39 c5                	cmp    ebp,eax
c001475f:	89 f8                	mov    eax,edi
c0014761:	19 c8                	sbb    eax,ecx
c0014763:	73 32                	jae    c0014797 <Thr::loadDLL(char const*, bool)+0x222>
c0014765:	50                   	push   eax
c0014766:	50                   	push   eax
c0014767:	89 e8                	mov    eax,ebp
c0014769:	c1 e0 0c             	shl    eax,0xc
c001476c:	01 d8                	add    eax,ebx
c001476e:	50                   	push   eax
c001476f:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014775:	e8 ee 50 ff ff       	call   c0009868 <VAS::getPageTableEntry(unsigned long)>
c001477a:	83 c4 10             	add    esp,0x10
c001477d:	8b 00                	mov    eax,DWORD PTR [eax]
c001477f:	a8 60                	test   al,0x60
c0014781:	75 11                	jne    c0014794 <Thr::loadDLL(char const*, bool)+0x21f>
c0014783:	83 ec 0c             	sub    esp,0xc
c0014786:	25 00 f0 ff ff       	and    eax,0xfffff000
c001478b:	50                   	push   eax
c001478c:	e8 40 35 ff ff       	call   c0007cd1 <Phys::freePage(unsigned long)>
c0014791:	83 c4 10             	add    esp,0x10
c0014794:	45                   	inc    ebp
c0014795:	eb a8                	jmp    c001473f <Thr::loadDLL(char const*, bool)+0x1ca>
c0014797:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001479c:	b8 00 00 00 00       	mov    eax,0x0
c00147a1:	0f 44 d8             	cmove  ebx,eax
c00147a4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00147aa:	89 d8                	mov    eax,ebx
c00147ac:	5b                   	pop    ebx
c00147ad:	5e                   	pop    esi
c00147ae:	5f                   	pop    edi
c00147af:	5d                   	pop    ebp
c00147b0:	c3                   	ret    

c00147b1 <Thr::executeDLL(unsigned long, void*)>:
c00147b1:	56                   	push   esi
c00147b2:	53                   	push   ebx
c00147b3:	52                   	push   edx
c00147b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00147b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00147bc:	85 db                	test   ebx,ebx
c00147be:	75 10                	jne    c00147d0 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00147c0:	83 ec 0c             	sub    esp,0xc
c00147c3:	68 b0 10 02 c0       	push   0xc00210b0
c00147c8:	e8 3a c0 ff ff       	call   c0010807 <KePanic(char const*)>
c00147cd:	83 c4 10             	add    esp,0x10
c00147d0:	50                   	push   eax
c00147d1:	50                   	push   eax
c00147d2:	53                   	push   ebx
c00147d3:	68 da 10 02 c0       	push   0xc00210da
c00147d8:	e8 c4 60 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c00147dd:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00147e1:	83 c4 14             	add    esp,0x14
c00147e4:	89 d8                	mov    eax,ebx
c00147e6:	5b                   	pop    ebx
c00147e7:	5e                   	pop    esi
c00147e8:	ff e0                	jmp    eax
c00147ea:	66 90                	xchg   ax,ax

c00147ec <userModeEntryPoint(void*)>:
c00147ec:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00147f1:	83 e8 01             	sub    eax,0x1
c00147f4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00147f9:	75 01                	jne    c00147fc <userModeEntryPoint(void*)+0x10>
c00147fb:	fb                   	sti    
c00147fc:	fb                   	sti    
c00147fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014802:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014805:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001480b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001480f:	e9 2b ba fe ff       	jmp    c000023f <goToUsermode>

c0014814 <changeTSS>:
c0014814:	83 ec 14             	sub    esp,0x14
c0014817:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001481c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001481f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014824:	c1 e2 15             	shl    edx,0x15
c0014827:	29 d0                	sub    eax,edx
c0014829:	50                   	push   eax
c001482a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001482f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014835:	05 7c 11 00 00       	add    eax,0x117c
c001483a:	50                   	push   eax
c001483b:	e8 74 46 ff ff       	call   c0008eb4 <TSS::setESP(unsigned long)>
c0014840:	83 c4 1c             	add    esp,0x1c
c0014843:	c3                   	ret    

c0014844 <switchToThread(ThreadControlBlock*)>:
c0014844:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c001484a:	57                   	push   edi
c001484b:	56                   	push   esi
c001484c:	53                   	push   ebx
c001484d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014851:	85 c9                	test   ecx,ecx
c0014853:	0f 85 8b 00 00 00    	jne    c00148e4 <switchToThread(ThreadControlBlock*)+0xa0>
c0014859:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c001485d:	31 c0                	xor    eax,eax
c001485f:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014865:	74 11                	je     c0014878 <switchToThread(ThreadControlBlock*)+0x34>
c0014867:	b8 00 04 00 00       	mov    eax,0x400
c001486c:	29 d0                	sub    eax,edx
c001486e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014871:	d1 f8                	sar    eax,1
c0014873:	01 d0                	add    eax,edx
c0014875:	8d 76 00             	lea    esi,[esi+0x0]
c0014878:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001487b:	e8 65 27 00 00       	call   c0016fe5 <HalQueryPerformanceCounter()>
c0014880:	89 c6                	mov    esi,eax
c0014882:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c0014888:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c001488d:	89 d7                	mov    edi,edx
c001488f:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c0014894:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c001489a:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c00148a0:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c00148a6:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c00148ac:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00148b2:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c00148b8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00148bb:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00148be:	01 c6                	add    esi,eax
c00148c0:	11 d7                	adc    edi,edx
c00148c2:	83 ec 0c             	sub    esp,0xc
c00148c5:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00148c8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00148cb:	53                   	push   ebx
c00148cc:	e8 a6 b9 fe ff       	call   c0000277 <switchToThreadASM>
c00148d1:	0f 20 c0             	mov    eax,cr0
c00148d4:	83 c8 08             	or     eax,0x8
c00148d7:	0f 22 c0             	mov    cr0,eax
c00148da:	83 c4 10             	add    esp,0x10
c00148dd:	5b                   	pop    ebx
c00148de:	5e                   	pop    esi
c00148df:	5f                   	pop    edi
c00148e0:	c3                   	ret    
c00148e1:	8d 76 00             	lea    esi,[esi+0x0]
c00148e4:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c00148ee:	5b                   	pop    ebx
c00148ef:	5e                   	pop    esi
c00148f0:	5f                   	pop    edi
c00148f1:	c3                   	ret    
c00148f2:	66 90                	xchg   ax,ax

c00148f4 <Process::addArgs(char**)>:
c00148f4:	57                   	push   edi
c00148f5:	56                   	push   esi
c00148f6:	53                   	push   ebx
c00148f7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00148fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00148ff:	85 ff                	test   edi,edi
c0014901:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c001490b:	74 4f                	je     c001495c <Process::addArgs(char**)+0x68>
c001490d:	8b 07                	mov    eax,DWORD PTR [edi]
c001490f:	85 c0                	test   eax,eax
c0014911:	74 49                	je     c001495c <Process::addArgs(char**)+0x68>
c0014913:	31 db                	xor    ebx,ebx
c0014915:	8d 76 00             	lea    esi,[esi+0x0]
c0014918:	83 ec 0c             	sub    esp,0xc
c001491b:	50                   	push   eax
c001491c:	e8 ff bb fe ff       	call   c0000520 <strlen>
c0014921:	83 c0 01             	add    eax,0x1
c0014924:	89 04 24             	mov    DWORD PTR [esp],eax
c0014927:	e8 03 31 ff ff       	call   c0007a2f <malloc>
c001492c:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014933:	5a                   	pop    edx
c0014934:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014937:	83 c3 01             	add    ebx,0x1
c001493a:	59                   	pop    ecx
c001493b:	52                   	push   edx
c001493c:	50                   	push   eax
c001493d:	e8 ae bc fe ff       	call   c00005f0 <strcpy>
c0014942:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0014948:	83 c4 10             	add    esp,0x10
c001494b:	83 c1 01             	add    ecx,0x1
c001494e:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0014954:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014957:	85 c0                	test   eax,eax
c0014959:	75 bd                	jne    c0014918 <Process::addArgs(char**)+0x24>
c001495b:	90                   	nop
c001495c:	5b                   	pop    ebx
c001495d:	5e                   	pop    esi
c001495e:	5f                   	pop    edi
c001495f:	c3                   	ret    

c0014960 <Process::Process(char const*, Process*, char**)>:
c0014960:	56                   	push   esi
c0014961:	53                   	push   ebx
c0014962:	83 ec 14             	sub    esp,0x14
c0014965:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014969:	05 0c 02 00 00       	add    eax,0x20c
c001496e:	bb 07 00 00 00       	mov    ebx,0x7
c0014973:	89 c6                	mov    esi,eax
c0014975:	8d 76 00             	lea    esi,[esi+0x0]
c0014978:	85 db                	test   ebx,ebx
c001497a:	78 14                	js     c0014990 <Process::Process(char const*, Process*, char**)+0x30>
c001497c:	83 ec 0c             	sub    esp,0xc
c001497f:	56                   	push   esi
c0014980:	e8 03 a5 00 00       	call   c001ee88 <ThreadControlBlock::ThreadControlBlock()>
c0014985:	83 c4 10             	add    esp,0x10
c0014988:	83 c6 5f             	add    esi,0x5f
c001498b:	83 eb 01             	sub    ebx,0x1
c001498e:	eb e8                	jmp    c0014978 <Process::Process(char const*, Process*, char**)+0x18>
c0014990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014994:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001499b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001499f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00149a6:	83 ec 0c             	sub    esp,0xc
c00149a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149ad:	e8 4c bc ff ff       	call   c00105fe <Krnl::newProcessEnv(Process*)>
c00149b2:	83 c4 10             	add    esp,0x10
c00149b5:	89 c2                	mov    edx,eax
c00149b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149bb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00149c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149c5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00149ce:	a1 a0 22 02 c0       	mov    eax,ds:0xc00222a0
c00149d3:	8d 50 01             	lea    edx,[eax+0x1]
c00149d6:	89 15 a0 22 02 c0    	mov    DWORD PTR ds:0xc00222a0,edx
c00149dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149e0:	89 02                	mov    DWORD PTR [edx],eax
c00149e2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00149ea:	83 ec 0c             	sub    esp,0xc
c00149ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00149f1:	e8 39 30 ff ff       	call   c0007a2f <malloc>
c00149f6:	83 c4 10             	add    esp,0x10
c00149f9:	89 c3                	mov    ebx,eax
c00149fb:	83 ec 08             	sub    esp,0x8
c00149fe:	6a 00                	push   0x0
c0014a00:	53                   	push   ebx
c0014a01:	e8 10 57 ff ff       	call   c000a116 <VAS::VAS(bool)>
c0014a06:	83 c4 10             	add    esp,0x10
c0014a09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a0d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014a13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a17:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014a21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a29:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014a2f:	e8 ea c1 ff ff       	call   c0010c1e <KeInitSignals()>
c0014a34:	89 c2                	mov    edx,eax
c0014a36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a3a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014a40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a44:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014a4a:	85 c0                	test   eax,eax
c0014a4c:	74 42                	je     c0014a90 <Process::Process(char const*, Process*, char**)+0x130>
c0014a4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a52:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014a58:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014a5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a62:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014a68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a6c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014a72:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014a78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a7c:	05 0c 01 00 00       	add    eax,0x10c
c0014a81:	83 ec 08             	sub    esp,0x8
c0014a84:	52                   	push   edx
c0014a85:	50                   	push   eax
c0014a86:	e8 65 bb fe ff       	call   c00005f0 <strcpy>
c0014a8b:	83 c4 10             	add    esp,0x10
c0014a8e:	eb 64                	jmp    c0014af4 <Process::Process(char const*, Process*, char**)+0x194>
c0014a90:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014a98:	83 ec 0c             	sub    esp,0xc
c0014a9b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014a9f:	e8 8b 2f ff ff       	call   c0007a2f <malloc>
c0014aa4:	83 c4 10             	add    esp,0x10
c0014aa7:	89 c3                	mov    ebx,eax
c0014aa9:	83 ec 08             	sub    esp,0x8
c0014aac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ab0:	53                   	push   ebx
c0014ab1:	e8 0a 41 ff ff       	call   c0008bc0 <VgaText::VgaText(char const*)>
c0014ab6:	83 c4 10             	add    esp,0x10
c0014ab9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014abd:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014ac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ac7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014acd:	83 ec 0c             	sub    esp,0xc
c0014ad0:	50                   	push   eax
c0014ad1:	e8 88 39 ff ff       	call   c000845e <addToTerminalCycle(VgaText*)>
c0014ad6:	83 c4 10             	add    esp,0x10
c0014ad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014add:	05 0c 01 00 00       	add    eax,0x10c
c0014ae2:	83 ec 08             	sub    esp,0x8
c0014ae5:	68 f9 10 02 c0       	push   0xc00210f9
c0014aea:	50                   	push   eax
c0014aeb:	e8 00 bb fe ff       	call   c00005f0 <strcpy>
c0014af0:	83 c4 10             	add    esp,0x10
c0014af3:	90                   	nop
c0014af4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014af8:	83 c0 0c             	add    eax,0xc
c0014afb:	83 ec 08             	sub    esp,0x8
c0014afe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b02:	50                   	push   eax
c0014b03:	e8 e8 ba fe ff       	call   c00005f0 <strcpy>
c0014b08:	83 c4 10             	add    esp,0x10
c0014b0b:	83 ec 08             	sub    esp,0x8
c0014b0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014b12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b16:	e8 d9 fd ff ff       	call   c00148f4 <Process::addArgs(char**)>
c0014b1b:	83 c4 10             	add    esp,0x10
c0014b1e:	83 ec 08             	sub    esp,0x8
c0014b21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b29:	e8 53 ed ff ff       	call   c0013881 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014b2e:	83 c4 10             	add    esp,0x10
c0014b31:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014b35:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014b39:	83 f0 01             	xor    eax,0x1
c0014b3c:	88 c2                	mov    dl,al
c0014b3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b42:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014b48:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014b4d:	83 ec 04             	sub    esp,0x4
c0014b50:	50                   	push   eax
c0014b51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b55:	68 50 11 02 c0       	push   0xc0021150
c0014b5a:	e8 42 5d ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0014b5f:	83 c4 10             	add    esp,0x10
c0014b62:	90                   	nop
c0014b63:	83 c4 14             	add    esp,0x14
c0014b66:	5b                   	pop    ebx
c0014b67:	5e                   	pop    esi
c0014b68:	c3                   	ret    
c0014b69:	90                   	nop
c0014b6a:	66 90                	xchg   ax,ax

c0014b6c <Process::Process(bool, char const*, Process*, char**)>:
c0014b6c:	56                   	push   esi
c0014b6d:	53                   	push   ebx
c0014b6e:	83 ec 24             	sub    esp,0x24
c0014b71:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014b75:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014b79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b7d:	05 0c 02 00 00       	add    eax,0x20c
c0014b82:	bb 07 00 00 00       	mov    ebx,0x7
c0014b87:	89 c6                	mov    esi,eax
c0014b89:	8d 76 00             	lea    esi,[esi+0x0]
c0014b8c:	85 db                	test   ebx,ebx
c0014b8e:	78 14                	js     c0014ba4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014b90:	83 ec 0c             	sub    esp,0xc
c0014b93:	56                   	push   esi
c0014b94:	e8 ef a2 00 00       	call   c001ee88 <ThreadControlBlock::ThreadControlBlock()>
c0014b99:	83 c4 10             	add    esp,0x10
c0014b9c:	83 c6 5f             	add    esi,0x5f
c0014b9f:	83 eb 01             	sub    ebx,0x1
c0014ba2:	eb e8                	jmp    c0014b8c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014ba4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ba8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014baf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bb3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014bba:	83 ec 0c             	sub    esp,0xc
c0014bbd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014bc1:	e8 38 ba ff ff       	call   c00105fe <Krnl::newProcessEnv(Process*)>
c0014bc6:	83 c4 10             	add    esp,0x10
c0014bc9:	89 c2                	mov    edx,eax
c0014bcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bcf:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014bd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bd9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014be2:	a1 a0 22 02 c0       	mov    eax,ds:0xc00222a0
c0014be7:	8d 50 01             	lea    edx,[eax+0x1]
c0014bea:	89 15 a0 22 02 c0    	mov    DWORD PTR ds:0xc00222a0,edx
c0014bf0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014bf4:	89 02                	mov    DWORD PTR [edx],eax
c0014bf6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014bfe:	83 ec 0c             	sub    esp,0xc
c0014c01:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014c05:	e8 25 2e ff ff       	call   c0007a2f <malloc>
c0014c0a:	83 c4 10             	add    esp,0x10
c0014c0d:	89 c3                	mov    ebx,eax
c0014c0f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014c14:	83 ec 08             	sub    esp,0x8
c0014c17:	50                   	push   eax
c0014c18:	53                   	push   ebx
c0014c19:	e8 f8 54 ff ff       	call   c000a116 <VAS::VAS(bool)>
c0014c1e:	83 c4 10             	add    esp,0x10
c0014c21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c25:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014c2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c2f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014c39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c3d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014c41:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014c47:	e8 d2 bf ff ff       	call   c0010c1e <KeInitSignals()>
c0014c4c:	89 c2                	mov    edx,eax
c0014c4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c52:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014c58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c5c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014c62:	85 c0                	test   eax,eax
c0014c64:	74 42                	je     c0014ca8 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014c66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c6a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014c70:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014c76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c7a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014c80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c84:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014c8a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014c90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c94:	05 0c 01 00 00       	add    eax,0x10c
c0014c99:	83 ec 08             	sub    esp,0x8
c0014c9c:	52                   	push   edx
c0014c9d:	50                   	push   eax
c0014c9e:	e8 4d b9 fe ff       	call   c00005f0 <strcpy>
c0014ca3:	83 c4 10             	add    esp,0x10
c0014ca6:	eb 64                	jmp    c0014d0c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0014ca8:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014cb0:	83 ec 0c             	sub    esp,0xc
c0014cb3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014cb7:	e8 73 2d ff ff       	call   c0007a2f <malloc>
c0014cbc:	83 c4 10             	add    esp,0x10
c0014cbf:	89 c3                	mov    ebx,eax
c0014cc1:	83 ec 08             	sub    esp,0x8
c0014cc4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014cc8:	53                   	push   ebx
c0014cc9:	e8 f2 3e ff ff       	call   c0008bc0 <VgaText::VgaText(char const*)>
c0014cce:	83 c4 10             	add    esp,0x10
c0014cd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cd5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014cdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cdf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ce5:	83 ec 0c             	sub    esp,0xc
c0014ce8:	50                   	push   eax
c0014ce9:	e8 70 37 ff ff       	call   c000845e <addToTerminalCycle(VgaText*)>
c0014cee:	83 c4 10             	add    esp,0x10
c0014cf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cf5:	05 0c 01 00 00       	add    eax,0x10c
c0014cfa:	83 ec 08             	sub    esp,0x8
c0014cfd:	68 f9 10 02 c0       	push   0xc00210f9
c0014d02:	50                   	push   eax
c0014d03:	e8 e8 b8 fe ff       	call   c00005f0 <strcpy>
c0014d08:	83 c4 10             	add    esp,0x10
c0014d0b:	90                   	nop
c0014d0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d10:	83 c0 0c             	add    eax,0xc
c0014d13:	83 ec 08             	sub    esp,0x8
c0014d16:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d1a:	50                   	push   eax
c0014d1b:	e8 d0 b8 fe ff       	call   c00005f0 <strcpy>
c0014d20:	83 c4 10             	add    esp,0x10
c0014d23:	83 ec 08             	sub    esp,0x8
c0014d26:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014d2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014d2e:	e8 c1 fb ff ff       	call   c00148f4 <Process::addArgs(char**)>
c0014d33:	83 c4 10             	add    esp,0x10
c0014d36:	90                   	nop
c0014d37:	83 c4 24             	add    esp,0x24
c0014d3a:	5b                   	pop    ebx
c0014d3b:	5e                   	pop    esi
c0014d3c:	c3                   	ret    
c0014d3d:	8d 76 00             	lea    esi,[esi+0x0]

c0014d40 <taskStartupFunction>:
c0014d40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d45:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014d48:	c3                   	ret    
c0014d49:	90                   	nop
c0014d4a:	66 90                	xchg   ax,ax

c0014d4c <Semaphore::Semaphore(int)>:
c0014d4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d54:	89 10                	mov    DWORD PTR [eax],edx
c0014d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d5a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014d61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d65:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d70:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014d77:	90                   	nop
c0014d78:	c3                   	ret    
c0014d79:	90                   	nop
c0014d7a:	66 90                	xchg   ax,ax

c0014d7c <Mutex::Mutex()>:
c0014d7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d80:	6a 01                	push   0x1
c0014d82:	50                   	push   eax
c0014d83:	e8 c4 ff ff ff       	call   c0014d4c <Semaphore::Semaphore(int)>
c0014d88:	83 c4 08             	add    esp,0x8
c0014d8b:	90                   	nop
c0014d8c:	c3                   	ret    
c0014d8d:	90                   	nop
c0014d8e:	66 90                	xchg   ax,ax

c0014d90 <Process::createThread(void (*)(void*), void*, int)>:
c0014d90:	57                   	push   edi
c0014d91:	31 c9                	xor    ecx,ecx
c0014d93:	56                   	push   esi
c0014d94:	53                   	push   ebx
c0014d95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014d99:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014da0:	89 f2                	mov    edx,esi
c0014da2:	66 90                	xchg   ax,ax
c0014da4:	0f b7 c2             	movzx  eax,dx
c0014da7:	80 e2 01             	and    dl,0x1
c0014daa:	74 14                	je     c0014dc0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014dac:	83 c1 01             	add    ecx,0x1
c0014daf:	d1 f8                	sar    eax,1
c0014db1:	83 f9 10             	cmp    ecx,0x10
c0014db4:	89 c2                	mov    edx,eax
c0014db6:	75 ec                	jne    c0014da4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014db8:	31 db                	xor    ebx,ebx
c0014dba:	89 d8                	mov    eax,ebx
c0014dbc:	5b                   	pop    ebx
c0014dbd:	5e                   	pop    esi
c0014dbe:	5f                   	pop    edi
c0014dbf:	c3                   	ret    
c0014dc0:	b8 01 00 00 00       	mov    eax,0x1
c0014dc5:	d3 e0                	shl    eax,cl
c0014dc7:	09 c6                	or     esi,eax
c0014dc9:	6b c1 5f             	imul   eax,ecx,0x5f
c0014dcc:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014dd3:	01 d8                	add    eax,ebx
c0014dd5:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014ddc:	75 0a                	jne    c0014de8 <Process::createThread(void (*)(void*), void*, int)+0x58>
c0014dde:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014de8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014dee:	6b f9 5f             	imul   edi,ecx,0x5f
c0014df1:	83 ec 0c             	sub    esp,0xc
c0014df4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014df7:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0014dfa:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014e00:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0014e06:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014e0c:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0014e13:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014e19:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014e1d:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014e23:	89 ca                	mov    edx,ecx
c0014e25:	f7 da                	neg    edx
c0014e27:	c1 e2 15             	shl    edx,0x15
c0014e2a:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014e30:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014e36:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014e3a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014e44:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014e4a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e4e:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014e54:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014e5e:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014e68:	68 00 01 00 00       	push   0x100
c0014e6d:	e8 bd 2b ff ff       	call   c0007a2f <malloc>
c0014e72:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0014e75:	58                   	pop    eax
c0014e76:	5a                   	pop    edx
c0014e77:	53                   	push   ebx
c0014e78:	68 84 81 02 c0       	push   0xc0028184
c0014e7d:	e8 9e 9d 00 00       	call   c001ec20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014e82:	83 c4 10             	add    esp,0x10
c0014e85:	89 d8                	mov    eax,ebx
c0014e87:	5b                   	pop    ebx
c0014e88:	5e                   	pop    esi
c0014e89:	5f                   	pop    edi
c0014e8a:	c3                   	ret    
c0014e8b:	90                   	nop

c0014e8c <Process::createUserThread()>:
c0014e8c:	83 ec 0c             	sub    esp,0xc
c0014e8f:	68 80 00 00 00       	push   0x80
c0014e94:	6a 00                	push   0x0
c0014e96:	68 ec 47 01 c0       	push   0xc00147ec
c0014e9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e9f:	50                   	push   eax
c0014ea0:	e8 eb fe ff ff       	call   c0014d90 <Process::createThread(void (*)(void*), void*, int)>
c0014ea5:	83 c4 1c             	add    esp,0x1c
c0014ea8:	c3                   	ret    
c0014ea9:	8d 76 00             	lea    esi,[esi+0x0]

c0014eac <setupMultitasking(void (*)())>:
c0014eac:	56                   	push   esi
c0014ead:	53                   	push   ebx
c0014eae:	83 ec 04             	sub    esp,0x4
c0014eb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014eb5:	eb 11                	jmp    c0014ec8 <setupMultitasking(void (*)())+0x1c>
c0014eb7:	90                   	nop
c0014eb8:	83 ec 0c             	sub    esp,0xc
c0014ebb:	68 84 81 02 c0       	push   0xc0028184
c0014ec0:	e8 9f 9c 00 00       	call   c001eb64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014ec5:	83 c4 10             	add    esp,0x10
c0014ec8:	83 ec 0c             	sub    esp,0xc
c0014ecb:	68 84 81 02 c0       	push   0xc0028184
c0014ed0:	e8 6b 9c 00 00       	call   c001eb40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014ed5:	83 c4 10             	add    esp,0x10
c0014ed8:	84 c0                	test   al,al
c0014eda:	74 dc                	je     c0014eb8 <setupMultitasking(void (*)())+0xc>
c0014edc:	83 ec 0c             	sub    esp,0xc
c0014edf:	68 24 07 00 00       	push   0x724
c0014ee4:	e8 46 2b ff ff       	call   c0007a2f <malloc>
c0014ee9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014ef0:	89 c3                	mov    ebx,eax
c0014ef2:	6a 00                	push   0x0
c0014ef4:	68 fd 10 02 c0       	push   0xc00210fd
c0014ef9:	6a 01                	push   0x1
c0014efb:	50                   	push   eax
c0014efc:	e8 6b fc ff ff       	call   c0014b6c <Process::Process(bool, char const*, Process*, char**)>
c0014f01:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014f07:	83 c4 14             	add    esp,0x14
c0014f0a:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0014f10:	50                   	push   eax
c0014f11:	e8 a5 37 ff ff       	call   c00086bb <setActiveTerminal(VgaText*)>
c0014f16:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0014f1d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014f27:	83 c8 01             	or     eax,0x1
c0014f2a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014f31:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014f37:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f3a:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014f40:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0014f4a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0014f54:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014f5a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014f64:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014f6e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0014f74:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0014f7a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014f84:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0014f8e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014f95:	e8 95 2a ff ff       	call   c0007a2f <malloc>
c0014f9a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0014fa0:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0014fa6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0014fac:	5a                   	pop    edx
c0014fad:	59                   	pop    ecx
c0014fae:	68 f9 10 02 c0       	push   0xc00210f9
c0014fb3:	50                   	push   eax
c0014fb4:	e8 37 b6 fe ff       	call   c00005f0 <strcpy>
c0014fb9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0014fc0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014fc4:	83 c4 14             	add    esp,0x14
c0014fc7:	5b                   	pop    ebx
c0014fc8:	5e                   	pop    esi
c0014fc9:	e9 9b b2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0014fce:	66 90                	xchg   ax,ax

c0014fd0 <schedule()>:
c0014fd0:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c0014fd6:	85 d2                	test   edx,edx
c0014fd8:	74 0e                	je     c0014fe8 <schedule()+0x18>
c0014fda:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0014fe4:	c3                   	ret    
c0014fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0014fe8:	53                   	push   ebx
c0014fe9:	83 ec 14             	sub    esp,0x14
c0014fec:	68 84 81 02 c0       	push   0xc0028184
c0014ff1:	e8 4a 9b 00 00       	call   c001eb40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014ff6:	83 c4 10             	add    esp,0x10
c0014ff9:	84 c0                	test   al,al
c0014ffb:	75 3f                	jne    c001503c <schedule()+0x6c>
c0014ffd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015002:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015005:	83 fa 01             	cmp    edx,0x1
c0015008:	74 3a                	je     c0015044 <schedule()+0x74>
c001500a:	66 90                	xchg   ax,ax
c001500c:	83 ec 0c             	sub    esp,0xc
c001500f:	68 84 81 02 c0       	push   0xc0028184
c0015014:	e8 43 9b 00 00       	call   c001eb5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015019:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015020:	89 c3                	mov    ebx,eax
c0015022:	e8 3d 9b 00 00       	call   c001eb64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015027:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001502e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015031:	e8 0e f8 ff ff       	call   c0014844 <switchToThread(ThreadControlBlock*)>
c0015036:	83 c4 10             	add    esp,0x10
c0015039:	8d 76 00             	lea    esi,[esi+0x0]
c001503c:	83 c4 08             	add    esp,0x8
c001503f:	5b                   	pop    ebx
c0015040:	c3                   	ret    
c0015041:	8d 76 00             	lea    esi,[esi+0x0]
c0015044:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001504b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015050:	83 ec 08             	sub    esp,0x8
c0015053:	50                   	push   eax
c0015054:	68 84 81 02 c0       	push   0xc0028184
c0015059:	e8 c2 9b 00 00       	call   c001ec20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001505e:	83 c4 10             	add    esp,0x10
c0015061:	eb a9                	jmp    c001500c <schedule()+0x3c>
c0015063:	90                   	nop

c0015064 <Semaphore::tryAcquire()>:
c0015064:	53                   	push   ebx
c0015065:	83 ec 08             	sub    esp,0x8
c0015068:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001506c:	fa                   	cli    
c001506d:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015073:	8d 42 01             	lea    eax,[edx+0x1]
c0015076:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001507b:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015080:	8d 58 01             	lea    ebx,[eax+0x1]
c0015083:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c0015089:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001508c:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001508e:	7c 2c                	jl     c00150bc <Semaphore::tryAcquire()+0x58>
c0015090:	85 c0                	test   eax,eax
c0015092:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015097:	75 0b                	jne    c00150a4 <Semaphore::tryAcquire()+0x40>
c0015099:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001509e:	85 c0                	test   eax,eax
c00150a0:	75 5a                	jne    c00150fc <Semaphore::tryAcquire()+0x98>
c00150a2:	66 90                	xchg   ax,ax
c00150a4:	31 c0                	xor    eax,eax
c00150a6:	85 d2                	test   edx,edx
c00150a8:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00150ae:	75 04                	jne    c00150b4 <Semaphore::tryAcquire()+0x50>
c00150b0:	fb                   	sti    
c00150b1:	8d 76 00             	lea    esi,[esi+0x0]
c00150b4:	83 c4 08             	add    esp,0x8
c00150b7:	5b                   	pop    ebx
c00150b8:	c3                   	ret    
c00150b9:	8d 76 00             	lea    esi,[esi+0x0]
c00150bc:	83 c3 01             	add    ebx,0x1
c00150bf:	85 c0                	test   eax,eax
c00150c1:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00150c6:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00150c9:	75 21                	jne    c00150ec <Semaphore::tryAcquire()+0x88>
c00150cb:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c00150d1:	85 c9                	test   ecx,ecx
c00150d3:	74 17                	je     c00150ec <Semaphore::tryAcquire()+0x88>
c00150d5:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00150df:	e8 ec fe ff ff       	call   c0014fd0 <schedule()>
c00150e4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00150e9:	8d 50 ff             	lea    edx,[eax-0x1]
c00150ec:	85 d2                	test   edx,edx
c00150ee:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00150f4:	b0 01                	mov    al,0x1
c00150f6:	75 bc                	jne    c00150b4 <Semaphore::tryAcquire()+0x50>
c00150f8:	eb b6                	jmp    c00150b0 <Semaphore::tryAcquire()+0x4c>
c00150fa:	66 90                	xchg   ax,ax
c00150fc:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015106:	e8 c5 fe ff ff       	call   c0014fd0 <schedule()>
c001510b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015110:	8d 50 ff             	lea    edx,[eax-0x1]
c0015113:	31 c0                	xor    eax,eax
c0015115:	85 d2                	test   edx,edx
c0015117:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001511d:	75 95                	jne    c00150b4 <Semaphore::tryAcquire()+0x50>
c001511f:	eb 8f                	jmp    c00150b0 <Semaphore::tryAcquire()+0x4c>
c0015121:	90                   	nop
c0015122:	66 90                	xchg   ax,ax

c0015124 <Semaphore::assertLocked(char const*)>:
c0015124:	83 ec 0c             	sub    esp,0xc
c0015127:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001512b:	fa                   	cli    
c001512c:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c0015132:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015137:	83 c1 01             	add    ecx,0x1
c001513a:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c0015140:	8d 48 01             	lea    ecx,[eax+0x1]
c0015143:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015149:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001514b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001514e:	7c 28                	jl     c0015178 <Semaphore::assertLocked(char const*)+0x54>
c0015150:	85 c0                	test   eax,eax
c0015152:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015157:	75 0b                	jne    c0015164 <Semaphore::assertLocked(char const*)+0x40>
c0015159:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001515e:	85 c0                	test   eax,eax
c0015160:	75 32                	jne    c0015194 <Semaphore::assertLocked(char const*)+0x70>
c0015162:	66 90                	xchg   ax,ax
c0015164:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015169:	83 e8 01             	sub    eax,0x1
c001516c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015171:	75 01                	jne    c0015174 <Semaphore::assertLocked(char const*)+0x50>
c0015173:	fb                   	sti    
c0015174:	83 c4 0c             	add    esp,0xc
c0015177:	c3                   	ret    
c0015178:	83 ec 0c             	sub    esp,0xc
c001517b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001517f:	52                   	push   edx
c0015180:	e8 82 b6 ff ff       	call   c0010807 <KePanic(char const*)>
c0015185:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001518a:	83 c4 10             	add    esp,0x10
c001518d:	83 e8 01             	sub    eax,0x1
c0015190:	eb be                	jmp    c0015150 <Semaphore::assertLocked(char const*)+0x2c>
c0015192:	66 90                	xchg   ax,ax
c0015194:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001519e:	e8 2d fe ff ff       	call   c0014fd0 <schedule()>
c00151a3:	eb bf                	jmp    c0015164 <Semaphore::assertLocked(char const*)+0x40>
c00151a5:	8d 76 00             	lea    esi,[esi+0x0]

c00151a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00151a8:	83 ec 0c             	sub    esp,0xc
c00151ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151b4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00151b7:	e8 14 fe ff ff       	call   c0014fd0 <schedule()>
c00151bc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151c1:	83 e8 01             	sub    eax,0x1
c00151c4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151c9:	75 01                	jne    c00151cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00151cb:	fb                   	sti    
c00151cc:	83 c4 0c             	add    esp,0xc
c00151cf:	c3                   	ret    

c00151d0 <blockTask(TaskState)>:
c00151d0:	83 ec 0c             	sub    esp,0xc
c00151d3:	fa                   	cli    
c00151d4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151dd:	83 c0 01             	add    eax,0x1
c00151e0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151ea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00151ed:	e8 de fd ff ff       	call   c0014fd0 <schedule()>
c00151f2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151f7:	83 e8 01             	sub    eax,0x1
c00151fa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151ff:	75 03                	jne    c0015204 <blockTask(TaskState)+0x34>
c0015201:	fb                   	sti    
c0015202:	66 90                	xchg   ax,ax
c0015204:	83 c4 0c             	add    esp,0xc
c0015207:	c3                   	ret    

c0015208 <waitTask(int, int*, int)>:
c0015208:	83 ec 18             	sub    esp,0x18
c001520b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015210:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015214:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015217:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001521b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015220:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015223:	6a 07                	push   0x7
c0015225:	e8 a6 ff ff ff       	call   c00151d0 <blockTask(TaskState)>
c001522a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001522f:	83 c4 10             	add    esp,0x10
c0015232:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015235:	85 d2                	test   edx,edx
c0015237:	74 0b                	je     c0015244 <waitTask(int, int*, int)+0x3c>
c0015239:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001523c:	89 02                	mov    DWORD PTR [edx],eax
c001523e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015243:	90                   	nop
c0015244:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015247:	83 c4 0c             	add    esp,0xc
c001524a:	c3                   	ret    
c001524b:	90                   	nop

c001524c <milliTenthSleepUntil(unsigned int)>:
c001524c:	83 ec 0c             	sub    esp,0xc
c001524f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015253:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c0015259:	76 05                	jbe    c0015260 <milliTenthSleepUntil(unsigned int)+0x14>
c001525b:	90                   	nop
c001525c:	83 c4 0c             	add    esp,0xc
c001525f:	c3                   	ret    
c0015260:	fa                   	cli    
c0015261:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015267:	83 ec 08             	sub    esp,0x8
c001526a:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015270:	83 c2 01             	add    edx,0x1
c0015273:	83 c1 01             	add    ecx,0x1
c0015276:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001527c:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015282:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015288:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001528b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015290:	50                   	push   eax
c0015291:	68 78 81 02 c0       	push   0xc0028178
c0015296:	e8 85 99 00 00       	call   c001ec20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001529b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00152a2:	e8 29 ff ff ff       	call   c00151d0 <blockTask(TaskState)>
c00152a7:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00152ac:	83 c4 10             	add    esp,0x10
c00152af:	83 e8 01             	sub    eax,0x1
c00152b2:	85 c0                	test   eax,eax
c00152b4:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00152b9:	75 09                	jne    c00152c4 <milliTenthSleepUntil(unsigned int)+0x78>
c00152bb:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00152c0:	85 c0                	test   eax,eax
c00152c2:	75 14                	jne    c00152d8 <milliTenthSleepUntil(unsigned int)+0x8c>
c00152c4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00152c9:	83 e8 01             	sub    eax,0x1
c00152cc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00152d1:	75 89                	jne    c001525c <milliTenthSleepUntil(unsigned int)+0x10>
c00152d3:	fb                   	sti    
c00152d4:	83 c4 0c             	add    esp,0xc
c00152d7:	c3                   	ret    
c00152d8:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00152e2:	e8 e9 fc ff ff       	call   c0014fd0 <schedule()>
c00152e7:	eb db                	jmp    c00152c4 <milliTenthSleepUntil(unsigned int)+0x78>
c00152e9:	8d 76 00             	lea    esi,[esi+0x0]

c00152ec <milliTenthSleep(unsigned int)>:
c00152ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00152f0:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c00152f5:	01 c2                	add    edx,eax
c00152f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00152fb:	e9 4c ff ff ff       	jmp    c001524c <milliTenthSleepUntil(unsigned int)>

c0015300 <sleep(unsigned int)>:
c0015300:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015308:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001530c:	eb de                	jmp    c00152ec <milliTenthSleep(unsigned int)>
c001530e:	66 90                	xchg   ax,ax

c0015310 <Semaphore::acquire()>:
c0015310:	83 ec 0c             	sub    esp,0xc
c0015313:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015317:	fa                   	cli    
c0015318:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001531d:	83 c0 01             	add    eax,0x1
c0015320:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015325:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001532a:	8d 48 01             	lea    ecx,[eax+0x1]
c001532d:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015333:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015336:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015338:	7d 2e                	jge    c0015368 <Semaphore::acquire()+0x58>
c001533a:	83 c1 01             	add    ecx,0x1
c001533d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015340:	85 c0                	test   eax,eax
c0015342:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015347:	75 0b                	jne    c0015354 <Semaphore::acquire()+0x44>
c0015349:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001534e:	85 c0                	test   eax,eax
c0015350:	75 66                	jne    c00153b8 <Semaphore::acquire()+0xa8>
c0015352:	66 90                	xchg   ax,ax
c0015354:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015359:	83 e8 01             	sub    eax,0x1
c001535c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015361:	75 01                	jne    c0015364 <Semaphore::acquire()+0x54>
c0015363:	fb                   	sti    
c0015364:	83 c4 0c             	add    esp,0xc
c0015367:	c3                   	ret    
c0015368:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001536d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015374:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015377:	85 c9                	test   ecx,ecx
c0015379:	74 51                	je     c00153cc <Semaphore::acquire()+0xbc>
c001537b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001537e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015384:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015387:	90                   	nop
c0015388:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001538d:	83 ec 0c             	sub    esp,0xc
c0015390:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015393:	68 7c 11 02 c0       	push   0xc002117c
c0015398:	e8 04 55 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c001539d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00153a4:	e8 27 fe ff ff       	call   c00151d0 <blockTask(TaskState)>
c00153a9:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153ae:	83 c4 10             	add    esp,0x10
c00153b1:	83 e8 01             	sub    eax,0x1
c00153b4:	eb 8a                	jmp    c0015340 <Semaphore::acquire()+0x30>
c00153b6:	66 90                	xchg   ax,ax
c00153b8:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00153c2:	e8 09 fc ff ff       	call   c0014fd0 <schedule()>
c00153c7:	eb 8b                	jmp    c0015354 <Semaphore::acquire()+0x44>
c00153c9:	8d 76 00             	lea    esi,[esi+0x0]
c00153cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153d1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00153d4:	eb b2                	jmp    c0015388 <Semaphore::acquire()+0x78>
c00153d6:	66 90                	xchg   ax,ax

c00153d8 <taskReturned>:
c00153d8:	83 ec 18             	sub    esp,0x18
c00153db:	68 9c 11 02 c0       	push   0xc002119c
c00153e0:	e8 22 b4 ff ff       	call   c0010807 <KePanic(char const*)>
c00153e5:	83 c4 10             	add    esp,0x10
c00153e8:	83 ec 0c             	sub    esp,0xc
c00153eb:	6a 02                	push   0x2
c00153ed:	e8 de fd ff ff       	call   c00151d0 <blockTask(TaskState)>
c00153f2:	fa                   	cli    
c00153f3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153f8:	83 c0 01             	add    eax,0x1
c00153fb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015400:	e8 cb fb ff ff       	call   c0014fd0 <schedule()>
c0015405:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001540a:	83 c4 10             	add    esp,0x10
c001540d:	83 e8 01             	sub    eax,0x1
c0015410:	85 c0                	test   eax,eax
c0015412:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015417:	75 cf                	jne    c00153e8 <taskReturned+0x10>
c0015419:	fb                   	sti    
c001541a:	eb cc                	jmp    c00153e8 <taskReturned+0x10>

c001541c <Thr::processFromPID(int)>:
c001541c:	57                   	push   edi
c001541d:	56                   	push   esi
c001541e:	53                   	push   ebx
c001541f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015423:	fa                   	cli    
c0015424:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c001542a:	83 ec 0c             	sub    esp,0xc
c001542d:	68 84 81 02 c0       	push   0xc0028184
c0015432:	83 c1 01             	add    ecx,0x1
c0015435:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c001543b:	e8 1c 97 00 00       	call   c001eb5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015440:	83 c4 10             	add    esp,0x10
c0015443:	89 c7                	mov    edi,eax
c0015445:	eb 15                	jmp    c001545c <Thr::processFromPID(int)+0x40>
c0015447:	90                   	nop
c0015448:	83 ec 0c             	sub    esp,0xc
c001544b:	68 84 81 02 c0       	push   0xc0028184
c0015450:	e8 07 97 00 00       	call   c001eb5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015455:	83 c4 10             	add    esp,0x10
c0015458:	39 f8                	cmp    eax,edi
c001545a:	74 50                	je     c00154ac <Thr::processFromPID(int)+0x90>
c001545c:	83 ec 0c             	sub    esp,0xc
c001545f:	68 84 81 02 c0       	push   0xc0028184
c0015464:	e8 f3 96 00 00       	call   c001eb5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015469:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015470:	89 c3                	mov    ebx,eax
c0015472:	e8 ed 96 00 00       	call   c001eb64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015477:	58                   	pop    eax
c0015478:	5a                   	pop    edx
c0015479:	53                   	push   ebx
c001547a:	68 84 81 02 c0       	push   0xc0028184
c001547f:	e8 9c 97 00 00       	call   c001ec20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015484:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015487:	83 c4 10             	add    esp,0x10
c001548a:	39 30                	cmp    DWORD PTR [eax],esi
c001548c:	75 ba                	jne    c0015448 <Thr::processFromPID(int)+0x2c>
c001548e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015493:	83 e8 01             	sub    eax,0x1
c0015496:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001549b:	74 0b                	je     c00154a8 <Thr::processFromPID(int)+0x8c>
c001549d:	8d 76 00             	lea    esi,[esi+0x0]
c00154a0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00154a3:	90                   	nop
c00154a4:	5b                   	pop    ebx
c00154a5:	5e                   	pop    esi
c00154a6:	5f                   	pop    edi
c00154a7:	c3                   	ret    
c00154a8:	fb                   	sti    
c00154a9:	eb f5                	jmp    c00154a0 <Thr::processFromPID(int)+0x84>
c00154ab:	90                   	nop
c00154ac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154b1:	8d 50 ff             	lea    edx,[eax-0x1]
c00154b4:	31 c0                	xor    eax,eax
c00154b6:	85 d2                	test   edx,edx
c00154b8:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00154be:	75 e4                	jne    c00154a4 <Thr::processFromPID(int)+0x88>
c00154c0:	fb                   	sti    
c00154c1:	5b                   	pop    ebx
c00154c2:	5e                   	pop    esi
c00154c3:	5f                   	pop    edi
c00154c4:	c3                   	ret    
c00154c5:	8d 76 00             	lea    esi,[esi+0x0]

c00154c8 <unblockTask(ThreadControlBlock*)>:
c00154c8:	53                   	push   ebx
c00154c9:	83 ec 08             	sub    esp,0x8
c00154cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00154d0:	fa                   	cli    
c00154d1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154d6:	83 c0 01             	add    eax,0x1
c00154d9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00154de:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00154e1:	85 c0                	test   eax,eax
c00154e3:	74 67                	je     c001554c <unblockTask(ThreadControlBlock*)+0x84>
c00154e5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00154e8:	83 f8 01             	cmp    eax,0x1
c00154eb:	74 37                	je     c0015524 <unblockTask(ThreadControlBlock*)+0x5c>
c00154ed:	83 ec 0c             	sub    esp,0xc
c00154f0:	68 84 81 02 c0       	push   0xc0028184
c00154f5:	e8 62 96 00 00       	call   c001eb5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154fa:	83 c4 10             	add    esp,0x10
c00154fd:	85 c0                	test   eax,eax
c00154ff:	75 1b                	jne    c001551c <unblockTask(ThreadControlBlock*)+0x54>
c0015501:	eb 5d                	jmp    c0015560 <unblockTask(ThreadControlBlock*)+0x98>
c0015503:	90                   	nop
c0015504:	83 ec 08             	sub    esp,0x8
c0015507:	50                   	push   eax
c0015508:	68 84 81 02 c0       	push   0xc0028184
c001550d:	e8 6a 99 00 00       	call   c001ee7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015512:	83 c4 10             	add    esp,0x10
c0015515:	85 c0                	test   eax,eax
c0015517:	74 47                	je     c0015560 <unblockTask(ThreadControlBlock*)+0x98>
c0015519:	8d 76 00             	lea    esi,[esi+0x0]
c001551c:	39 c3                	cmp    ebx,eax
c001551e:	75 e4                	jne    c0015504 <unblockTask(ThreadControlBlock*)+0x3c>
c0015520:	eb 12                	jmp    c0015534 <unblockTask(ThreadControlBlock*)+0x6c>
c0015522:	66 90                	xchg   ax,ax
c0015524:	83 ec 0c             	sub    esp,0xc
c0015527:	68 1b 11 02 c0       	push   0xc002111b
c001552c:	e8 70 53 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0015531:	83 c4 10             	add    esp,0x10
c0015534:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015539:	83 e8 01             	sub    eax,0x1
c001553c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015541:	75 01                	jne    c0015544 <unblockTask(ThreadControlBlock*)+0x7c>
c0015543:	fb                   	sti    
c0015544:	83 c4 08             	add    esp,0x8
c0015547:	5b                   	pop    ebx
c0015548:	c3                   	ret    
c0015549:	8d 76 00             	lea    esi,[esi+0x0]
c001554c:	83 ec 0c             	sub    esp,0xc
c001554f:	68 04 11 02 c0       	push   0xc0021104
c0015554:	e8 48 53 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0015559:	83 c4 10             	add    esp,0x10
c001555c:	eb d6                	jmp    c0015534 <unblockTask(ThreadControlBlock*)+0x6c>
c001555e:	66 90                	xchg   ax,ax
c0015560:	83 ec 08             	sub    esp,0x8
c0015563:	53                   	push   ebx
c0015564:	68 84 81 02 c0       	push   0xc0028184
c0015569:	e8 b2 96 00 00       	call   c001ec20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001556e:	83 c4 10             	add    esp,0x10
c0015571:	eb c1                	jmp    c0015534 <unblockTask(ThreadControlBlock*)+0x6c>
c0015573:	90                   	nop

c0015574 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015574:	55                   	push   ebp
c0015575:	57                   	push   edi
c0015576:	56                   	push   esi
c0015577:	53                   	push   ebx
c0015578:	83 ec 1c             	sub    esp,0x1c
c001557b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001557f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015582:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015588:	85 ed                	test   ebp,ebp
c001558a:	7e 28                	jle    c00155b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001558c:	31 f6                	xor    esi,esi
c001558e:	66 90                	xchg   ax,ax
c0015590:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015597:	83 ec 0c             	sub    esp,0xc
c001559a:	83 c6 01             	add    esi,0x1
c001559d:	57                   	push   edi
c001559e:	e8 9c 24 ff ff       	call   c0007a3f <free>
c00155a3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00155a6:	83 c4 10             	add    esp,0x10
c00155a9:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00155af:	7f df                	jg     c0015590 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00155b1:	8d 76 00             	lea    esi,[esi+0x0]
c00155b4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00155be:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00155c1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00155c6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00155c9:	d3 c0                	rol    eax,cl
c00155cb:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00155d2:	21 c8                	and    eax,ecx
c00155d4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00155db:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00155de:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00155e6:	89 f7                	mov    edi,esi
c00155e8:	0f 85 6e 01 00 00    	jne    c001575c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00155ee:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00155f4:	85 ed                	test   ebp,ebp
c00155f6:	74 1c                	je     c0015614 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00155f8:	83 ec 0c             	sub    esp,0xc
c00155fb:	55                   	push   ebp
c00155fc:	e8 19 af ff ff       	call   c001051a <EnvVarContainer::~EnvVarContainer()>
c0015601:	59                   	pop    ecx
c0015602:	5e                   	pop    esi
c0015603:	6a 0c                	push   0xc
c0015605:	55                   	push   ebp
c0015606:	e8 98 51 ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c001560b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001560e:	83 c4 10             	add    esp,0x10
c0015611:	89 f7                	mov    edi,esi
c0015613:	90                   	nop
c0015614:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001561a:	85 c0                	test   eax,eax
c001561c:	0f 84 ae 00 00 00    	je     c00156d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c0015622:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015625:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015629:	31 c9                	xor    ecx,ecx
c001562b:	eb 17                	jmp    c0015644 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001562d:	8d 76 00             	lea    esi,[esi+0x0]
c0015630:	83 c1 01             	add    ecx,0x1
c0015633:	83 f9 10             	cmp    ecx,0x10
c0015636:	0f 84 94 00 00 00    	je     c00156d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c001563c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015642:	66 90                	xchg   ax,ax
c0015644:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001564b:	d3 fa                	sar    edx,cl
c001564d:	80 e2 01             	and    dl,0x1
c0015650:	74 de                	je     c0015630 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015652:	6b d1 5f             	imul   edx,ecx,0x5f
c0015655:	01 d0                	add    eax,edx
c0015657:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001565d:	83 fd 07             	cmp    ebp,0x7
c0015660:	75 ce                	jne    c0015630 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015662:	05 40 02 00 00       	add    eax,0x240
c0015667:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001566a:	83 fd ff             	cmp    ebp,0xffffffff
c001566d:	0f 8c f1 00 00 00    	jl     c0015764 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0015673:	0f 84 af 01 00 00    	je     c0015828 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b4>
c0015679:	85 ed                	test   ebp,ebp
c001567b:	0f 84 93 01 00 00    	je     c0015814 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a0>
c0015681:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015683:	75 ab                	jne    c0015630 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015685:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001568b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001568f:	01 d0                	add    eax,edx
c0015691:	8d 76 00             	lea    esi,[esi+0x0]
c0015694:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015698:	83 ec 0c             	sub    esp,0xc
c001569b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00156a1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00156a4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00156aa:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00156b1:	50                   	push   eax
c00156b2:	e8 11 fe ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c00156b7:	83 c4 10             	add    esp,0x10
c00156ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00156be:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00156c1:	83 c1 01             	add    ecx,0x1
c00156c4:	83 f9 10             	cmp    ecx,0x10
c00156c7:	89 f7                	mov    edi,esi
c00156c9:	0f 85 6d ff ff ff    	jne    c001563c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00156cf:	90                   	nop
c00156d0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00156d6:	85 c0                	test   eax,eax
c00156d8:	74 62                	je     c001573c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c00156da:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00156e0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00156e6:	74 54                	je     c001573c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c00156e8:	83 ec 0c             	sub    esp,0xc
c00156eb:	68 84 81 02 c0       	push   0xc0028184
c00156f0:	e8 67 94 00 00       	call   c001eb5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00156f5:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00156fc:	89 c7                	mov    edi,eax
c00156fe:	e8 3d 94 00 00       	call   c001eb40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015703:	83 c4 10             	add    esp,0x10
c0015706:	84 c0                	test   al,al
c0015708:	0f 84 ce 00 00 00    	je     c00157dc <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001570e:	66 90                	xchg   ax,ax
c0015710:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015713:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015719:	85 d2                	test   edx,edx
c001571b:	74 0f                	je     c001572c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001571d:	8b 02                	mov    eax,DWORD PTR [edx]
c001571f:	83 ec 0c             	sub    esp,0xc
c0015722:	52                   	push   edx
c0015723:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015726:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015729:	83 c4 10             	add    esp,0x10
c001572c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015736:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015739:	8d 76 00             	lea    esi,[esi+0x0]
c001573c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015742:	85 db                	test   ebx,ebx
c0015744:	74 16                	je     c001575c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0015746:	83 ec 0c             	sub    esp,0xc
c0015749:	53                   	push   ebx
c001574a:	e8 97 43 ff ff       	call   c0009ae6 <VAS::~VAS()>
c001574f:	58                   	pop    eax
c0015750:	5a                   	pop    edx
c0015751:	6a 14                	push   0x14
c0015753:	53                   	push   ebx
c0015754:	e8 4a 50 ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c0015759:	83 c4 10             	add    esp,0x10
c001575c:	83 c4 1c             	add    esp,0x1c
c001575f:	5b                   	pop    ebx
c0015760:	5e                   	pop    esi
c0015761:	5f                   	pop    edi
c0015762:	5d                   	pop    ebp
c0015763:	c3                   	ret    
c0015764:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015768:	83 ec 0c             	sub    esp,0xc
c001576b:	68 d0 11 02 c0       	push   0xc00211d0
c0015770:	e8 92 b0 ff ff       	call   c0010807 <KePanic(char const*)>
c0015775:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015778:	83 c4 10             	add    esp,0x10
c001577b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001577f:	89 f7                	mov    edi,esi
c0015781:	e9 aa fe ff ff       	jmp    c0015630 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015786:	66 90                	xchg   ax,ax
c0015788:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001578e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015794:	75 1e                	jne    c00157b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0015796:	83 ec 0c             	sub    esp,0xc
c0015799:	68 38 12 02 c0       	push   0xc0021238
c001579e:	e8 fe 50 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c00157a3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00157aa:	e8 21 fa ff ff       	call   c00151d0 <blockTask(TaskState)>
c00157af:	83 c4 10             	add    esp,0x10
c00157b2:	66 90                	xchg   ax,ax
c00157b4:	83 ec 08             	sub    esp,0x8
c00157b7:	56                   	push   esi
c00157b8:	68 84 81 02 c0       	push   0xc0028184
c00157bd:	e8 5e 94 00 00       	call   c001ec20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00157c2:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157c9:	e8 8e 93 00 00       	call   c001eb5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157ce:	83 c4 10             	add    esp,0x10
c00157d1:	39 f8                	cmp    eax,edi
c00157d3:	0f 84 37 ff ff ff    	je     c0015710 <cleanupTerminatedTask(ThreadControlBlock*)+0x19c>
c00157d9:	8d 76 00             	lea    esi,[esi+0x0]
c00157dc:	83 ec 0c             	sub    esp,0xc
c00157df:	68 84 81 02 c0       	push   0xc0028184
c00157e4:	e8 73 93 00 00       	call   c001eb5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157e9:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157f0:	89 c6                	mov    esi,eax
c00157f2:	e8 6d 93 00 00       	call   c001eb64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00157f7:	83 c4 10             	add    esp,0x10
c00157fa:	39 f3                	cmp    ebx,esi
c00157fc:	74 b6                	je     c00157b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c00157fe:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015801:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015804:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001580a:	75 a8                	jne    c00157b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c001580c:	e9 77 ff ff ff       	jmp    c0015788 <cleanupTerminatedTask(ThreadControlBlock*)+0x214>
c0015811:	8d 76 00             	lea    esi,[esi+0x0]
c0015814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015818:	83 ec 0c             	sub    esp,0xc
c001581b:	68 04 12 02 c0       	push   0xc0021204
c0015820:	e9 4b ff ff ff       	jmp    c0015770 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c0015825:	8d 76 00             	lea    esi,[esi+0x0]
c0015828:	8b 36                	mov    esi,DWORD PTR [esi]
c001582a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001582e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015831:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015834:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001583a:	01 d7                	add    edi,edx
c001583c:	89 f8                	mov    eax,edi
c001583e:	e9 51 fe ff ff       	jmp    c0015694 <cleanupTerminatedTask(ThreadControlBlock*)+0x120>
c0015843:	90                   	nop

c0015844 <cleanerTaskFunction(void*)>:
c0015844:	53                   	push   ebx
c0015845:	83 ec 08             	sub    esp,0x8
c0015848:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001584d:	83 e8 01             	sub    eax,0x1
c0015850:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015855:	75 01                	jne    c0015858 <cleanerTaskFunction(void*)+0x14>
c0015857:	fb                   	sti    
c0015858:	fa                   	cli    
c0015859:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001585e:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c0015865:	8d 50 01             	lea    edx,[eax+0x1]
c0015868:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001586e:	0f 84 c4 00 00 00    	je     c0015938 <cleanerTaskFunction(void*)+0xf4>
c0015874:	85 c0                	test   eax,eax
c0015876:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001587b:	75 03                	jne    c0015880 <cleanerTaskFunction(void*)+0x3c>
c001587d:	fb                   	sti    
c001587e:	66 90                	xchg   ax,ax
c0015880:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c0015887:	fa                   	cli    
c0015888:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c001588e:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015894:	83 c2 01             	add    edx,0x1
c0015897:	83 c1 01             	add    ecx,0x1
c001589a:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00158a0:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00158a6:	fa                   	cli    
c00158a7:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c00158ad:	83 c3 01             	add    ebx,0x1
c00158b0:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c00158b6:	eb 28                	jmp    c00158e0 <cleanerTaskFunction(void*)+0x9c>
c00158b8:	83 ec 0c             	sub    esp,0xc
c00158bb:	68 6c 81 02 c0       	push   0xc002816c
c00158c0:	e8 97 92 00 00       	call   c001eb5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158c5:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c00158cc:	89 c3                	mov    ebx,eax
c00158ce:	e8 91 92 00 00       	call   c001eb64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00158d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00158d6:	e8 99 fc ff ff       	call   c0015574 <cleanupTerminatedTask(ThreadControlBlock*)>
c00158db:	83 c4 10             	add    esp,0x10
c00158de:	66 90                	xchg   ax,ax
c00158e0:	83 ec 0c             	sub    esp,0xc
c00158e3:	68 6c 81 02 c0       	push   0xc002816c
c00158e8:	e8 53 92 00 00       	call   c001eb40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00158ed:	83 c4 10             	add    esp,0x10
c00158f0:	84 c0                	test   al,al
c00158f2:	74 c4                	je     c00158b8 <cleanerTaskFunction(void*)+0x74>
c00158f4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158f9:	83 e8 01             	sub    eax,0x1
c00158fc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015901:	75 01                	jne    c0015904 <cleanerTaskFunction(void*)+0xc0>
c0015903:	fb                   	sti    
c0015904:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015909:	83 e8 01             	sub    eax,0x1
c001590c:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015911:	0f 85 31 ff ff ff    	jne    c0015848 <cleanerTaskFunction(void*)+0x4>
c0015917:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001591c:	85 c0                	test   eax,eax
c001591e:	0f 84 24 ff ff ff    	je     c0015848 <cleanerTaskFunction(void*)+0x4>
c0015924:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001592e:	e8 9d f6 ff ff       	call   c0014fd0 <schedule()>
c0015933:	e9 10 ff ff ff       	jmp    c0015848 <cleanerTaskFunction(void*)+0x4>
c0015938:	83 ec 0c             	sub    esp,0xc
c001593b:	6a 02                	push   0x2
c001593d:	e8 66 f8 ff ff       	call   c00151a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015942:	83 c4 10             	add    esp,0x10
c0015945:	e9 36 ff ff ff       	jmp    c0015880 <cleanerTaskFunction(void*)+0x3c>
c001594a:	66 90                	xchg   ax,ax

c001594c <terminateTask(int)>:
c001594c:	83 ec 14             	sub    esp,0x14
c001594f:	fa                   	cli    
c0015950:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c0015956:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c001595c:	83 c2 01             	add    edx,0x1
c001595f:	83 c1 01             	add    ecx,0x1
c0015962:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015968:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c001596e:	fa                   	cli    
c001596f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015974:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015978:	83 c0 01             	add    eax,0x1
c001597b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015980:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015985:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015988:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001598d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015990:	50                   	push   eax
c0015991:	68 6c 81 02 c0       	push   0xc002816c
c0015996:	e8 85 92 00 00       	call   c001ec20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001599b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159a0:	83 c4 10             	add    esp,0x10
c00159a3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00159aa:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c00159af:	85 c0                	test   eax,eax
c00159b1:	74 65                	je     c0015a18 <terminateTask(int)+0xcc>
c00159b3:	83 ec 0c             	sub    esp,0xc
c00159b6:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c00159bd:	50                   	push   eax
c00159be:	e8 05 fb ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c00159c3:	83 c4 10             	add    esp,0x10
c00159c6:	66 90                	xchg   ax,ax
c00159c8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159cd:	83 e8 01             	sub    eax,0x1
c00159d0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00159d5:	75 01                	jne    c00159d8 <terminateTask(int)+0x8c>
c00159d7:	fb                   	sti    
c00159d8:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00159dd:	83 e8 01             	sub    eax,0x1
c00159e0:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00159e5:	75 09                	jne    c00159f0 <terminateTask(int)+0xa4>
c00159e7:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c00159ee:	75 3c                	jne    c0015a2c <terminateTask(int)+0xe0>
c00159f0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159f5:	83 e8 01             	sub    eax,0x1
c00159f8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00159fd:	75 01                	jne    c0015a00 <terminateTask(int)+0xb4>
c00159ff:	fb                   	sti    
c0015a00:	fa                   	cli    
c0015a01:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a06:	83 c0 01             	add    eax,0x1
c0015a09:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a0e:	66 90                	xchg   ax,ax
c0015a10:	e8 bb f5 ff ff       	call   c0014fd0 <schedule()>
c0015a15:	eb d9                	jmp    c00159f0 <terminateTask(int)+0xa4>
c0015a17:	90                   	nop
c0015a18:	83 ec 0c             	sub    esp,0xc
c0015a1b:	68 32 11 02 c0       	push   0xc0021132
c0015a20:	e8 7c 4e ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0015a25:	83 c4 10             	add    esp,0x10
c0015a28:	eb 9e                	jmp    c00159c8 <terminateTask(int)+0x7c>
c0015a2a:	66 90                	xchg   ax,ax
c0015a2c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015a36:	eb d8                	jmp    c0015a10 <terminateTask(int)+0xc4>

c0015a38 <Thr::terminateFromIRQ(int)>:
c0015a38:	83 ec 18             	sub    esp,0x18
c0015a3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a3f:	50                   	push   eax
c0015a40:	e8 07 ff ff ff       	call   c001594c <terminateTask(int)>
c0015a45:	90                   	nop
c0015a46:	66 90                	xchg   ax,ax

c0015a48 <Semaphore::release()>:
c0015a48:	83 ec 0c             	sub    esp,0xc
c0015a4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a4f:	fa                   	cli    
c0015a50:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a55:	83 c0 01             	add    eax,0x1
c0015a58:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a5d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a62:	8d 48 01             	lea    ecx,[eax+0x1]
c0015a65:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015a6b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015a6e:	85 c9                	test   ecx,ecx
c0015a70:	74 42                	je     c0015ab4 <Semaphore::release()+0x6c>
c0015a72:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015a75:	83 ec 0c             	sub    esp,0xc
c0015a78:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015a7b:	51                   	push   ecx
c0015a7c:	e8 47 fa ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c0015a81:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a86:	83 c4 10             	add    esp,0x10
c0015a89:	83 e8 01             	sub    eax,0x1
c0015a8c:	85 c0                	test   eax,eax
c0015a8e:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a93:	75 0b                	jne    c0015aa0 <Semaphore::release()+0x58>
c0015a95:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015a9a:	85 c0                	test   eax,eax
c0015a9c:	75 22                	jne    c0015ac0 <Semaphore::release()+0x78>
c0015a9e:	66 90                	xchg   ax,ax
c0015aa0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015aa5:	83 e8 01             	sub    eax,0x1
c0015aa8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015aad:	75 01                	jne    c0015ab0 <Semaphore::release()+0x68>
c0015aaf:	fb                   	sti    
c0015ab0:	83 c4 0c             	add    esp,0xc
c0015ab3:	c3                   	ret    
c0015ab4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015ab7:	83 e9 01             	sub    ecx,0x1
c0015aba:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015abd:	eb cd                	jmp    c0015a8c <Semaphore::release()+0x44>
c0015abf:	90                   	nop
c0015ac0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015aca:	e8 01 f5 ff ff       	call   c0014fd0 <schedule()>
c0015acf:	eb cf                	jmp    c0015aa0 <Semaphore::release()+0x58>
c0015ad1:	8d 76 00             	lea    esi,[esi+0x0]

c0015ad4 <__static_initialization_and_destruction_0(int, int)>:
c0015ad4:	83 ec 0c             	sub    esp,0xc
c0015ad7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015adc:	0f 85 8e 00 00 00    	jne    c0015b70 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015ae2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015aea:	0f 85 80 00 00 00    	jne    c0015b70 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015af0:	83 ec 0c             	sub    esp,0xc
c0015af3:	68 84 81 02 c0       	push   0xc0028184
c0015af8:	e8 d7 93 00 00       	call   c001eed4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015afd:	83 c4 10             	add    esp,0x10
c0015b00:	83 ec 04             	sub    esp,0x4
c0015b03:	68 cc 1d 02 c0       	push   0xc0021dcc
c0015b08:	68 84 81 02 c0       	push   0xc0028184
c0015b0d:	68 84 ee 01 c0       	push   0xc001ee84
c0015b12:	e8 3c 4c ff ff       	call   c000a753 <__cxa_atexit>
c0015b17:	83 c4 10             	add    esp,0x10
c0015b1a:	83 ec 0c             	sub    esp,0xc
c0015b1d:	68 78 81 02 c0       	push   0xc0028178
c0015b22:	e8 ad 93 00 00       	call   c001eed4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b27:	83 c4 10             	add    esp,0x10
c0015b2a:	83 ec 04             	sub    esp,0x4
c0015b2d:	68 cc 1d 02 c0       	push   0xc0021dcc
c0015b32:	68 78 81 02 c0       	push   0xc0028178
c0015b37:	68 84 ee 01 c0       	push   0xc001ee84
c0015b3c:	e8 12 4c ff ff       	call   c000a753 <__cxa_atexit>
c0015b41:	83 c4 10             	add    esp,0x10
c0015b44:	83 ec 0c             	sub    esp,0xc
c0015b47:	68 6c 81 02 c0       	push   0xc002816c
c0015b4c:	e8 83 93 00 00       	call   c001eed4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b51:	83 c4 10             	add    esp,0x10
c0015b54:	83 ec 04             	sub    esp,0x4
c0015b57:	68 cc 1d 02 c0       	push   0xc0021dcc
c0015b5c:	68 6c 81 02 c0       	push   0xc002816c
c0015b61:	68 84 ee 01 c0       	push   0xc001ee84
c0015b66:	e8 e8 4b ff ff       	call   c000a753 <__cxa_atexit>
c0015b6b:	83 c4 10             	add    esp,0x10
c0015b6e:	66 90                	xchg   ax,ax
c0015b70:	90                   	nop
c0015b71:	83 c4 0c             	add    esp,0xc
c0015b74:	c3                   	ret    
c0015b75:	8d 76 00             	lea    esi,[esi+0x0]

c0015b78 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015b78:	83 ec 0c             	sub    esp,0xc
c0015b7b:	83 ec 08             	sub    esp,0x8
c0015b7e:	68 ff ff 00 00       	push   0xffff
c0015b83:	6a 01                	push   0x1
c0015b85:	e8 4a ff ff ff       	call   c0015ad4 <__static_initialization_and_destruction_0(int, int)>
c0015b8a:	83 c4 10             	add    esp,0x10
c0015b8d:	83 c4 0c             	add    esp,0xc
c0015b90:	c3                   	ret    

c0015b91 <Vm::inbv(unsigned short)>:
c0015b91:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015b95:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015b9a:	75 06                	jne    c0015ba2 <Vm::inbv(unsigned short)+0x11>
c0015b9c:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015ba1:	c3                   	ret    
c0015ba2:	ec                   	in     al,dx
c0015ba3:	c3                   	ret    

c0015ba4 <Vm::outbv(unsigned short, unsigned char)>:
c0015ba4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015bac:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015bb1:	75 25                	jne    c0015bd8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015bb3:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015bb9:	8d 51 01             	lea    edx,[ecx+0x1]
c0015bbc:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015bc2:	83 fa 20             	cmp    edx,0x20
c0015bc5:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015bcb:	75 0c                	jne    c0015bd9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015bcd:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015bd7:	c3                   	ret    
c0015bd8:	ee                   	out    dx,al
c0015bd9:	c3                   	ret    

c0015bda <Vm::realToLinear(unsigned short, unsigned short)>:
c0015bda:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015bdf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015be4:	c1 e0 04             	shl    eax,0x4
c0015be7:	01 d0                	add    eax,edx
c0015be9:	c3                   	ret    

c0015bea <Vm::getSegment(unsigned int)>:
c0015bea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bee:	c1 e8 10             	shr    eax,0x10
c0015bf1:	c3                   	ret    

c0015bf2 <Vm::getOffset(unsigned int)>:
c0015bf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bf6:	c3                   	ret    

c0015bf7 <Vm::mainloop2()>:
c0015bf7:	83 ec 18             	sub    esp,0x18
c0015bfa:	fa                   	cli    
c0015bfb:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c01:	6a 02                	push   0x2
c0015c03:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015c0a:	e8 99 f5 ff ff       	call   c00151a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c14:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015c18:	52                   	push   edx
c0015c19:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015c1d:	52                   	push   edx
c0015c1e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015c22:	52                   	push   edx
c0015c23:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015c27:	50                   	push   eax
c0015c28:	e8 e2 a5 fe ff       	call   c000020f <goToVM86>
c0015c2d:	83 c4 2c             	add    esp,0x2c
c0015c30:	c3                   	ret    

c0015c31 <Vm::mainVm8086Loop(void*)>:
c0015c31:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015c36:	48                   	dec    eax
c0015c37:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015c3c:	75 01                	jne    c0015c3f <Vm::mainVm8086Loop(void*)+0xe>
c0015c3e:	fb                   	sti    
c0015c3f:	eb b6                	jmp    c0015bf7 <Vm::mainloop2()>

c0015c41 <Vm::mainloop3(unsigned long)>:
c0015c41:	83 ec 18             	sub    esp,0x18
c0015c44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c48:	fa                   	cli    
c0015c49:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c4f:	6a 02                	push   0x2
c0015c51:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015c58:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015c5d:	e8 46 f5 ff ff       	call   c00151a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c62:	83 c4 1c             	add    esp,0x1c
c0015c65:	eb 90                	jmp    c0015bf7 <Vm::mainloop2()>

c0015c67 <Vm::initialise8086()>:
c0015c67:	83 ec 0c             	sub    esp,0xc
c0015c6a:	68 80 00 00 00       	push   0x80
c0015c6f:	6a 00                	push   0x0
c0015c71:	68 31 5c 01 c0       	push   0xc0015c31
c0015c76:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015c7c:	e8 0f f1 ff ff       	call   c0014d90 <Process::createThread(void (*)(void*), void*, int)>
c0015c81:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015c86:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015c8b:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015c92:	68 00 01 00 00       	push   0x100
c0015c97:	6a 00                	push   0x0
c0015c99:	6a 00                	push   0x0
c0015c9b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015ca1:	e8 bc 42 ff ff       	call   c0009f62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015ca6:	83 c4 2c             	add    esp,0x2c
c0015ca9:	c3                   	ret    

c0015caa <Vm::finish8086()>:
c0015caa:	53                   	push   ebx
c0015cab:	83 ec 08             	sub    esp,0x8
c0015cae:	fa                   	cli    
c0015caf:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015cb5:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015cbc:	75 15                	jne    c0015cd3 <Vm::finish8086()+0x29>
c0015cbe:	e8 0d f3 ff ff       	call   c0014fd0 <schedule()>
c0015cc3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015cc8:	48                   	dec    eax
c0015cc9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015cce:	75 de                	jne    c0015cae <Vm::finish8086()+0x4>
c0015cd0:	fb                   	sti    
c0015cd1:	eb db                	jmp    c0015cae <Vm::finish8086()+0x4>
c0015cd3:	83 ec 0c             	sub    esp,0xc
c0015cd6:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015cdc:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015ce3:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015ce9:	e8 da f7 ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c0015cee:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015cf3:	83 c4 10             	add    esp,0x10
c0015cf6:	8d 50 ff             	lea    edx,[eax-0x1]
c0015cf9:	85 d2                	test   edx,edx
c0015cfb:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015d01:	75 01                	jne    c0015d04 <Vm::finish8086()+0x5a>
c0015d03:	fb                   	sti    
c0015d04:	83 c4 08             	add    esp,0x8
c0015d07:	89 d8                	mov    eax,ebx
c0015d09:	5b                   	pop    ebx
c0015d0a:	c3                   	ret    

c0015d0b <Vm::getOutput8086(unsigned char*)>:
c0015d0b:	57                   	push   edi
c0015d0c:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015d12:	56                   	push   esi
c0015d13:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015d18:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015d1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015d1e:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015d23:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015d2d:	5e                   	pop    esi
c0015d2e:	5f                   	pop    edi
c0015d2f:	c3                   	ret    

c0015d30 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015d30:	55                   	push   ebp
c0015d31:	57                   	push   edi
c0015d32:	56                   	push   esi
c0015d33:	53                   	push   ebx
c0015d34:	83 ec 0c             	sub    esp,0xc
c0015d37:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015d3b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015d3f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015d43:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015d47:	fa                   	cli    
c0015d48:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d4e:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015d55:	75 15                	jne    c0015d6c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015d57:	e8 74 f2 ff ff       	call   c0014fd0 <schedule()>
c0015d5c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d61:	48                   	dec    eax
c0015d62:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d67:	75 de                	jne    c0015d47 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015d69:	fb                   	sti    
c0015d6a:	eb db                	jmp    c0015d47 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015d6c:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015d71:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015d7b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015d7f:	0f b7 ff             	movzx  edi,di
c0015d82:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015d86:	0f b7 f6             	movzx  esi,si
c0015d89:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015d8d:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015d91:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015d95:	50                   	push   eax
c0015d96:	6a 20                	push   0x20
c0015d98:	6a 00                	push   0x0
c0015d9a:	68 e0 81 02 c0       	push   0xc00281e0
c0015d9f:	e8 4c a7 fe ff       	call   c00004f0 <memset>
c0015da4:	5a                   	pop    edx
c0015da5:	59                   	pop    ecx
c0015da6:	57                   	push   edi
c0015da7:	56                   	push   esi
c0015da8:	e8 2d fe ff ff       	call   c0015bda <Vm::realToLinear(unsigned short, unsigned short)>
c0015dad:	83 c4 10             	add    esp,0x10
c0015db0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015db4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015db8:	89 c7                	mov    edi,eax
c0015dba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015dbc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015dc1:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015dc8:	48                   	dec    eax
c0015dc9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015dce:	75 01                	jne    c0015dd1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015dd0:	fb                   	sti    
c0015dd1:	83 ec 0c             	sub    esp,0xc
c0015dd4:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015dda:	e8 e9 f6 ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c0015ddf:	83 c4 1c             	add    esp,0x1c
c0015de2:	b0 01                	mov    al,0x1
c0015de4:	5b                   	pop    ebx
c0015de5:	5e                   	pop    esi
c0015de6:	5f                   	pop    edi
c0015de7:	5d                   	pop    ebp
c0015de8:	c3                   	ret    

c0015de9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015de9:	55                   	push   ebp
c0015dea:	57                   	push   edi
c0015deb:	56                   	push   esi
c0015dec:	53                   	push   ebx
c0015ded:	83 ec 2c             	sub    esp,0x2c
c0015df0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015df4:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015df8:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0015dfc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015e00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e04:	fa                   	cli    
c0015e05:	0f b6 35 c5 81 02 c0 	movzx  esi,BYTE PTR ds:0xc00281c5
c0015e0c:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015e12:	89 f0                	mov    eax,esi
c0015e14:	84 c0                	test   al,al
c0015e16:	75 15                	jne    c0015e2d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>
c0015e18:	e8 b3 f1 ff ff       	call   c0014fd0 <schedule()>
c0015e1d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e22:	48                   	dec    eax
c0015e23:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e28:	75 da                	jne    c0015e04 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015e2a:	fb                   	sti    
c0015e2b:	eb d7                	jmp    c0015e04 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015e2d:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015e37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e3b:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015e40:	66 89 50 57          	mov    WORD PTR [eax+0x57],dx
c0015e44:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015e48:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015e4c:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015e50:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015e54:	50                   	push   eax
c0015e55:	6a 20                	push   0x20
c0015e57:	6a 00                	push   0x0
c0015e59:	68 e0 81 02 c0       	push   0xc00281e0
c0015e5e:	e8 8d a6 fe ff       	call   c00004f0 <memset>
c0015e63:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015e6a:	e8 c0 1b ff ff       	call   c0007a2f <malloc>
c0015e6f:	83 c4 0c             	add    esp,0xc
c0015e72:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015e78:	89 c3                	mov    ebx,eax
c0015e7a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015e7e:	50                   	push   eax
c0015e7f:	e8 c6 4f ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c0015e84:	83 c4 10             	add    esp,0x10
c0015e87:	85 db                	test   ebx,ebx
c0015e89:	75 0a                	jne    c0015e95 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0015e8b:	83 ec 0c             	sub    esp,0xc
c0015e8e:	68 60 12 02 c0       	push   0xc0021260
c0015e93:	eb 27                	jmp    c0015ebc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd3>
c0015e95:	55                   	push   ebp
c0015e96:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015e9a:	50                   	push   eax
c0015e9b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015e9f:	50                   	push   eax
c0015ea0:	53                   	push   ebx
c0015ea1:	e8 0c 53 ff ff       	call   c000b1b2 <File::stat(unsigned long long*, bool*)>
c0015ea6:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c0015eab:	83 c4 10             	add    esp,0x10
c0015eae:	89 e8                	mov    eax,ebp
c0015eb0:	84 c0                	test   al,al
c0015eb2:	74 27                	je     c0015edb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf2>
c0015eb4:	83 ec 0c             	sub    esp,0xc
c0015eb7:	68 74 12 02 c0       	push   0xc0021274
c0015ebc:	e8 46 a9 ff ff       	call   c0010807 <KePanic(char const*)>
c0015ec1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ec6:	83 c4 10             	add    esp,0x10
c0015ec9:	48                   	dec    eax
c0015eca:	85 c0                	test   eax,eax
c0015ecc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ed1:	75 01                	jne    c0015ed4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xeb>
c0015ed3:	fb                   	sti    
c0015ed4:	31 f6                	xor    esi,esi
c0015ed6:	e9 8f 00 00 00       	jmp    c0015f6a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x181>
c0015edb:	51                   	push   ecx
c0015edc:	51                   	push   ecx
c0015edd:	6a 01                	push   0x1
c0015edf:	53                   	push   ebx
c0015ee0:	e8 21 50 ff ff       	call   c000af06 <File::open(FileOpenMode)>
c0015ee5:	83 c4 10             	add    esp,0x10
c0015ee8:	85 c0                	test   eax,eax
c0015eea:	74 24                	je     c0015f10 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x127>
c0015eec:	83 ec 0c             	sub    esp,0xc
c0015eef:	68 8d 12 02 c0       	push   0xc002128d
c0015ef4:	e8 0e a9 ff ff       	call   c0010807 <KePanic(char const*)>
c0015ef9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015efe:	83 c4 10             	add    esp,0x10
c0015f01:	48                   	dec    eax
c0015f02:	85 c0                	test   eax,eax
c0015f04:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f09:	75 c9                	jne    c0015ed4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xeb>
c0015f0b:	fb                   	sti    
c0015f0c:	89 ee                	mov    esi,ebp
c0015f0e:	eb 5a                	jmp    c0015f6a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x181>
c0015f10:	0f b7 ff             	movzx  edi,di
c0015f13:	50                   	push   eax
c0015f14:	50                   	push   eax
c0015f15:	57                   	push   edi
c0015f16:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0015f1b:	50                   	push   eax
c0015f1c:	e8 b9 fc ff ff       	call   c0015bda <Vm::realToLinear(unsigned short, unsigned short)>
c0015f21:	5a                   	pop    edx
c0015f22:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015f24:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0015f28:	51                   	push   ecx
c0015f29:	50                   	push   eax
c0015f2a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f2e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f32:	53                   	push   ebx
c0015f33:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f36:	83 c4 14             	add    esp,0x14
c0015f39:	53                   	push   ebx
c0015f3a:	e8 25 50 ff ff       	call   c000af64 <File::close()>
c0015f3f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f44:	83 c4 10             	add    esp,0x10
c0015f47:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015f4e:	48                   	dec    eax
c0015f4f:	85 c0                	test   eax,eax
c0015f51:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f56:	75 01                	jne    c0015f59 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x170>
c0015f58:	fb                   	sti    
c0015f59:	83 ec 0c             	sub    esp,0xc
c0015f5c:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015f62:	e8 61 f5 ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c0015f67:	83 c4 10             	add    esp,0x10
c0015f6a:	83 c4 2c             	add    esp,0x2c
c0015f6d:	89 f0                	mov    eax,esi
c0015f6f:	5b                   	pop    ebx
c0015f70:	5e                   	pop    esi
c0015f71:	5f                   	pop    edi
c0015f72:	5d                   	pop    ebp
c0015f73:	c3                   	ret    

c0015f74 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015f74:	57                   	push   edi
c0015f75:	56                   	push   esi
c0015f76:	53                   	push   ebx
c0015f77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015f7f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015f83:	83 e8 06             	sub    eax,0x6
c0015f86:	0f b7 c0             	movzx  eax,ax
c0015f89:	50                   	push   eax
c0015f8a:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0015f8f:	50                   	push   eax
c0015f90:	e8 45 fc ff ff       	call   c0015bda <Vm::realToLinear(unsigned short, unsigned short)>
c0015f95:	5a                   	pop    edx
c0015f96:	5e                   	pop    esi
c0015f97:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0015f9a:	8d 56 fa             	lea    edx,[esi-0x6]
c0015f9d:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0015fa0:	81 e2 ff ff 00 00    	and    edx,0xffff
c0015fa6:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0015fa9:	8d 56 02             	lea    edx,[esi+0x2]
c0015fac:	66 89 10             	mov    WORD PTR [eax],dx
c0015faf:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0015fb2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015fb6:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0015fb9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0015fbd:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0015fc3:	89 d6                	mov    esi,edx
c0015fc5:	81 e6 ff fd ff ff    	and    esi,0xfffffdff
c0015fcb:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0015fcf:	74 05                	je     c0015fd6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x62>
c0015fd1:	80 ce 02             	or     dh,0x2
c0015fd4:	89 d6                	mov    esi,edx
c0015fd6:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0015fda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fdf:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015fe3:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0015feb:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0015fee:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0015ff6:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0015ff9:	5b                   	pop    ebx
c0015ffa:	5e                   	pop    esi
c0015ffb:	5f                   	pop    edi
c0015ffc:	c3                   	ret    

c0015ffd <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0015ffd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016002:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016007:	c1 e0 04             	shl    eax,0x4
c001600a:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001600d:	c3                   	ret    

c001600e <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001600e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016013:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016018:	c1 e0 04             	shl    eax,0x4
c001601b:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001601f:	c3                   	ret    

c0016020 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016020:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016025:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001602a:	c1 e0 04             	shl    eax,0x4
c001602d:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016030:	c3                   	ret    

c0016031 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016031:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016036:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001603b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001603f:	c1 e0 04             	shl    eax,0x4
c0016042:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016045:	c3                   	ret    

c0016046 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016046:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001604b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016050:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016054:	c1 e0 04             	shl    eax,0x4
c0016057:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001605b:	c3                   	ret    

c001605c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001605c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016061:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016066:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001606a:	c1 e0 04             	shl    eax,0x4
c001606d:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016070:	c3                   	ret    

c0016071 <Vm::faultHandler(regs*)>:
c0016071:	55                   	push   ebp
c0016072:	57                   	push   edi
c0016073:	56                   	push   esi
c0016074:	53                   	push   ebx
c0016075:	83 ec 2c             	sub    esp,0x2c
c0016078:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001607c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001607f:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016083:	0f b7 f8             	movzx  edi,ax
c0016086:	0f b7 c0             	movzx  eax,ax
c0016089:	52                   	push   edx
c001608a:	50                   	push   eax
c001608b:	e8 4a fb ff ff       	call   c0015bda <Vm::realToLinear(unsigned short, unsigned short)>
c0016090:	5a                   	pop    edx
c0016091:	59                   	pop    ecx
c0016092:	89 c1                	mov    ecx,eax
c0016094:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016097:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001609b:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00160a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00160a4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00160a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00160ab:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00160b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00160b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00160b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00160bc:	e8 19 fb ff ff       	call   c0015bda <Vm::realToLinear(unsigned short, unsigned short)>
c00160c1:	5e                   	pop    esi
c00160c2:	be 06 00 00 00       	mov    esi,0x6
c00160c7:	5d                   	pop    ebp
c00160c8:	31 ed                	xor    ebp,ebp
c00160ca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00160cf:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00160d2:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00160d8:	0f 84 54 02 00 00    	je     c0016332 <Vm::faultHandler(regs*)+0x2c1>
c00160de:	0f 87 94 00 00 00    	ja     c0016178 <Vm::faultHandler(regs*)+0x107>
c00160e4:	83 fa 66             	cmp    edx,0x66
c00160e7:	0f 84 c2 01 00 00    	je     c00162af <Vm::faultHandler(regs*)+0x23e>
c00160ed:	77 47                	ja     c0016136 <Vm::faultHandler(regs*)+0xc5>
c00160ef:	83 fa 36             	cmp    edx,0x36
c00160f2:	0f 84 aa 01 00 00    	je     c00162a2 <Vm::faultHandler(regs*)+0x231>
c00160f8:	77 1a                	ja     c0016114 <Vm::faultHandler(regs*)+0xa3>
c00160fa:	83 fa 26             	cmp    edx,0x26
c00160fd:	0f 84 78 01 00 00    	je     c001627b <Vm::faultHandler(regs*)+0x20a>
c0016103:	83 fa 2e             	cmp    edx,0x2e
c0016106:	0f 85 07 06 00 00    	jne    c0016713 <Vm::faultHandler(regs*)+0x6a2>
c001610c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001610f:	31 f6                	xor    esi,esi
c0016111:	41                   	inc    ecx
c0016112:	eb bb                	jmp    c00160cf <Vm::faultHandler(regs*)+0x5e>
c0016114:	83 fa 64             	cmp    edx,0x64
c0016117:	0f 84 6b 01 00 00    	je     c0016288 <Vm::faultHandler(regs*)+0x217>
c001611d:	0f 87 72 01 00 00    	ja     c0016295 <Vm::faultHandler(regs*)+0x224>
c0016123:	83 fa 3e             	cmp    edx,0x3e
c0016126:	0f 85 e7 05 00 00    	jne    c0016713 <Vm::faultHandler(regs*)+0x6a2>
c001612c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001612f:	be 01 00 00 00       	mov    esi,0x1
c0016134:	eb db                	jmp    c0016111 <Vm::faultHandler(regs*)+0xa0>
c0016136:	83 fa 6d             	cmp    edx,0x6d
c0016139:	0f 84 14 03 00 00    	je     c0016453 <Vm::faultHandler(regs*)+0x3e2>
c001613f:	77 17                	ja     c0016158 <Vm::faultHandler(regs*)+0xe7>
c0016141:	83 fa 67             	cmp    edx,0x67
c0016144:	0f 84 72 01 00 00    	je     c00162bc <Vm::faultHandler(regs*)+0x24b>
c001614a:	83 fa 6c             	cmp    edx,0x6c
c001614d:	0f 84 91 02 00 00    	je     c00163e4 <Vm::faultHandler(regs*)+0x373>
c0016153:	e9 bb 05 00 00       	jmp    c0016713 <Vm::faultHandler(regs*)+0x6a2>
c0016158:	83 fa 6f             	cmp    edx,0x6f
c001615b:	0f 84 20 04 00 00    	je     c0016581 <Vm::faultHandler(regs*)+0x510>
c0016161:	0f 82 82 03 00 00    	jb     c00164e9 <Vm::faultHandler(regs*)+0x478>
c0016167:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c001616d:	0f 84 56 01 00 00    	je     c00162c9 <Vm::faultHandler(regs*)+0x258>
c0016173:	e9 9b 05 00 00       	jmp    c0016713 <Vm::faultHandler(regs*)+0x6a2>
c0016178:	81 fa ec 00 00 00    	cmp    edx,0xec
c001617e:	0f 84 37 05 00 00    	je     c00166bb <Vm::faultHandler(regs*)+0x64a>
c0016184:	0f 87 89 00 00 00    	ja     c0016213 <Vm::faultHandler(regs*)+0x1a2>
c001618a:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016190:	0f 84 b6 04 00 00    	je     c001664c <Vm::faultHandler(regs*)+0x5db>
c0016196:	77 58                	ja     c00161f0 <Vm::faultHandler(regs*)+0x17f>
c0016198:	81 fa cd 00 00 00    	cmp    edx,0xcd
c001619e:	0f 84 ee 01 00 00    	je     c0016392 <Vm::faultHandler(regs*)+0x321>
c00161a4:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00161aa:	0f 85 63 05 00 00    	jne    c0016713 <Vm::faultHandler(regs*)+0x6a2>
c00161b0:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00161b3:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00161b6:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00161ba:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00161bd:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00161c1:	81 ca 00 02 02 00    	or     edx,0x20200
c00161c7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00161ca:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c00161ce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00161d4:	c1 e8 09             	shr    eax,0x9
c00161d7:	83 e0 01             	and    eax,0x1
c00161da:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00161dd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00161e0:	83 c0 06             	add    eax,0x6
c00161e3:	25 ff ff 00 00       	and    eax,0xffff
c00161e8:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00161eb:	e9 1f 05 00 00       	jmp    c001670f <Vm::faultHandler(regs*)+0x69e>
c00161f0:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00161f6:	0f 84 95 04 00 00    	je     c0016691 <Vm::faultHandler(regs*)+0x620>
c00161fc:	0f 82 66 04 00 00    	jb     c0016668 <Vm::faultHandler(regs*)+0x5f7>
c0016202:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016208:	0f 84 9a 04 00 00    	je     c00166a8 <Vm::faultHandler(regs*)+0x637>
c001620e:	e9 00 05 00 00       	jmp    c0016713 <Vm::faultHandler(regs*)+0x6a2>
c0016213:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016219:	0f 84 dd 04 00 00    	je     c00166fc <Vm::faultHandler(regs*)+0x68b>
c001621f:	77 2e                	ja     c001624f <Vm::faultHandler(regs*)+0x1de>
c0016221:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016227:	0f 84 aa 04 00 00    	je     c00166d7 <Vm::faultHandler(regs*)+0x666>
c001622d:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016233:	0f 85 da 04 00 00    	jne    c0016713 <Vm::faultHandler(regs*)+0x6a2>
c0016239:	50                   	push   eax
c001623a:	50                   	push   eax
c001623b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001623f:	50                   	push   eax
c0016240:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016244:	50                   	push   eax
c0016245:	e8 5a f9 ff ff       	call   c0015ba4 <Vm::outbv(unsigned short, unsigned char)>
c001624a:	e9 a5 04 00 00       	jmp    c00166f4 <Vm::faultHandler(regs*)+0x683>
c001624f:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016255:	0f 84 6d 01 00 00    	je     c00163c8 <Vm::faultHandler(regs*)+0x357>
c001625b:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016261:	0f 84 6f 01 00 00    	je     c00163d6 <Vm::faultHandler(regs*)+0x365>
c0016267:	81 fa f3 00 00 00    	cmp    edx,0xf3
c001626d:	0f 85 a0 04 00 00    	jne    c0016713 <Vm::faultHandler(regs*)+0x6a2>
c0016273:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016276:	e9 96 fe ff ff       	jmp    c0016111 <Vm::faultHandler(regs*)+0xa0>
c001627b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001627e:	be 02 00 00 00       	mov    esi,0x2
c0016283:	e9 89 fe ff ff       	jmp    c0016111 <Vm::faultHandler(regs*)+0xa0>
c0016288:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001628b:	be 03 00 00 00       	mov    esi,0x3
c0016290:	e9 7c fe ff ff       	jmp    c0016111 <Vm::faultHandler(regs*)+0xa0>
c0016295:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016298:	be 04 00 00 00       	mov    esi,0x4
c001629d:	e9 6f fe ff ff       	jmp    c0016111 <Vm::faultHandler(regs*)+0xa0>
c00162a2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162a5:	be 05 00 00 00       	mov    esi,0x5
c00162aa:	e9 62 fe ff ff       	jmp    c0016111 <Vm::faultHandler(regs*)+0xa0>
c00162af:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162b2:	bd 01 00 00 00       	mov    ebp,0x1
c00162b7:	e9 55 fe ff ff       	jmp    c0016111 <Vm::faultHandler(regs*)+0xa0>
c00162bc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162bf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00162c4:	e9 48 fe ff ff       	jmp    c0016111 <Vm::faultHandler(regs*)+0xa0>
c00162c9:	83 e5 01             	and    ebp,0x1
c00162cc:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00162cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00162d3:	74 30                	je     c0016305 <Vm::faultHandler(regs*)+0x294>
c00162d5:	83 e9 04             	sub    ecx,0x4
c00162d8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00162de:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00162e4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00162e7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00162ea:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00162f0:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00162f4:	0f 84 12 04 00 00    	je     c001670c <Vm::faultHandler(regs*)+0x69b>
c00162fa:	80 ce 02             	or     dh,0x2
c00162fd:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016300:	e9 07 04 00 00       	jmp    c001670c <Vm::faultHandler(regs*)+0x69b>
c0016305:	83 e9 02             	sub    ecx,0x2
c0016308:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001630e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016311:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016315:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001631b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001631f:	74 05                	je     c0016326 <Vm::faultHandler(regs*)+0x2b5>
c0016321:	80 ce 02             	or     dh,0x2
c0016324:	eb 03                	jmp    c0016329 <Vm::faultHandler(regs*)+0x2b8>
c0016326:	80 e6 fd             	and    dh,0xfd
c0016329:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001632d:	e9 da 03 00 00       	jmp    c001670c <Vm::faultHandler(regs*)+0x69b>
c0016332:	83 e5 01             	and    ebp,0x1
c0016335:	74 2a                	je     c0016361 <Vm::faultHandler(regs*)+0x2f0>
c0016337:	8b 10                	mov    edx,DWORD PTR [eax]
c0016339:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001633f:	81 ca 00 02 02 00    	or     edx,0x20200
c0016345:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016348:	8b 00                	mov    eax,DWORD PTR [eax]
c001634a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016350:	c1 e8 09             	shr    eax,0x9
c0016353:	83 e0 01             	and    eax,0x1
c0016356:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016359:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001635c:	83 c0 04             	add    eax,0x4
c001635f:	eb 24                	jmp    c0016385 <Vm::faultHandler(regs*)+0x314>
c0016361:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016364:	81 ca 00 02 02 00    	or     edx,0x20200
c001636a:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001636d:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016370:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016376:	c1 e8 09             	shr    eax,0x9
c0016379:	83 e0 01             	and    eax,0x1
c001637c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001637f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016382:	83 c0 02             	add    eax,0x2
c0016385:	25 ff ff 00 00       	and    eax,0xffff
c001638a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001638d:	e9 7a 03 00 00       	jmp    c001670c <Vm::faultHandler(regs*)+0x69b>
c0016392:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016396:	3d ee 00 00 00       	cmp    eax,0xee
c001639b:	75 10                	jne    c00163ad <Vm::faultHandler(regs*)+0x33c>
c001639d:	83 ec 0c             	sub    esp,0xc
c00163a0:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00163a3:	e8 99 f8 ff ff       	call   c0015c41 <Vm::mainloop3(unsigned long)>
c00163a8:	e9 4a 03 00 00       	jmp    c00166f7 <Vm::faultHandler(regs*)+0x686>
c00163ad:	83 ec 0c             	sub    esp,0xc
c00163b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00163b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00163b8:	51                   	push   ecx
c00163b9:	50                   	push   eax
c00163ba:	53                   	push   ebx
c00163bb:	e8 b4 fb ff ff       	call   c0015f74 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00163c0:	83 c4 20             	add    esp,0x20
c00163c3:	e9 47 03 00 00       	jmp    c001670f <Vm::faultHandler(regs*)+0x69e>
c00163c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163cd:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00163d1:	e9 36 03 00 00       	jmp    c001670c <Vm::faultHandler(regs*)+0x69b>
c00163d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163db:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00163df:	e9 28 03 00 00       	jmp    c001670c <Vm::faultHandler(regs*)+0x69b>
c00163e4:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00163e9:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00163ec:	74 2b                	je     c0016419 <Vm::faultHandler(regs*)+0x3a8>
c00163ee:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00163f5:	76 22                	jbe    c0016419 <Vm::faultHandler(regs*)+0x3a8>
c00163f7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00163fb:	50                   	push   eax
c00163fc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016400:	50                   	push   eax
c0016401:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016405:	50                   	push   eax
c0016406:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001640a:	50                   	push   eax
c001640b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001640f:	50                   	push   eax
c0016410:	6a 6c                	push   0x6c
c0016412:	6a 6c                	push   0x6c
c0016414:	e9 c0 01 00 00       	jmp    c00165d9 <Vm::faultHandler(regs*)+0x568>
c0016419:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001641d:	83 ec 0c             	sub    esp,0xc
c0016420:	0f b7 f6             	movzx  esi,si
c0016423:	50                   	push   eax
c0016424:	e8 68 f7 ff ff       	call   c0015b91 <Vm::inbv(unsigned short)>
c0016429:	83 c4 0c             	add    esp,0xc
c001642c:	0f b6 c0             	movzx  eax,al
c001642f:	50                   	push   eax
c0016430:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016434:	50                   	push   eax
c0016435:	56                   	push   esi
c0016436:	e8 f6 fb ff ff       	call   c0016031 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001643b:	83 c4 10             	add    esp,0x10
c001643e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016442:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016445:	74 03                	je     c001644a <Vm::faultHandler(regs*)+0x3d9>
c0016447:	48                   	dec    eax
c0016448:	eb 01                	jmp    c001644b <Vm::faultHandler(regs*)+0x3da>
c001644a:	40                   	inc    eax
c001644b:	0f b7 c0             	movzx  eax,ax
c001644e:	e9 8e 00 00 00       	jmp    c00164e1 <Vm::faultHandler(regs*)+0x470>
c0016453:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016458:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001645b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001645e:	74 29                	je     c0016489 <Vm::faultHandler(regs*)+0x418>
c0016460:	3d ff ff 00 00       	cmp    eax,0xffff
c0016465:	76 22                	jbe    c0016489 <Vm::faultHandler(regs*)+0x418>
c0016467:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001646b:	50                   	push   eax
c001646c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016470:	50                   	push   eax
c0016471:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016475:	50                   	push   eax
c0016476:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001647a:	50                   	push   eax
c001647b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001647f:	50                   	push   eax
c0016480:	6a 6d                	push   0x6d
c0016482:	6a 6d                	push   0x6d
c0016484:	e9 50 01 00 00       	jmp    c00165d9 <Vm::faultHandler(regs*)+0x568>
c0016489:	83 e5 01             	and    ebp,0x1
c001648c:	0f b7 c8             	movzx  ecx,ax
c001648f:	0f b7 f6             	movzx  esi,si
c0016492:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016495:	74 1e                	je     c00164b5 <Vm::faultHandler(regs*)+0x444>
c0016497:	ed                   	in     eax,dx
c0016498:	55                   	push   ebp
c0016499:	50                   	push   eax
c001649a:	51                   	push   ecx
c001649b:	56                   	push   esi
c001649c:	e8 bb fb ff ff       	call   c001605c <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00164a1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164a4:	83 c4 10             	add    esp,0x10
c00164a7:	8d 50 04             	lea    edx,[eax+0x4]
c00164aa:	83 e8 04             	sub    eax,0x4
c00164ad:	81 e2 ff ff 00 00    	and    edx,0xffff
c00164b3:	eb 20                	jmp    c00164d5 <Vm::faultHandler(regs*)+0x464>
c00164b5:	66 ed                	in     ax,dx
c00164b7:	0f b7 c0             	movzx  eax,ax
c00164ba:	57                   	push   edi
c00164bb:	50                   	push   eax
c00164bc:	51                   	push   ecx
c00164bd:	56                   	push   esi
c00164be:	e8 83 fb ff ff       	call   c0016046 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00164c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164c6:	83 c4 10             	add    esp,0x10
c00164c9:	8d 50 02             	lea    edx,[eax+0x2]
c00164cc:	83 e8 02             	sub    eax,0x2
c00164cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00164d5:	25 ff ff 00 00       	and    eax,0xffff
c00164da:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00164de:	0f 44 c2             	cmove  eax,edx
c00164e1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00164e4:	e9 23 02 00 00       	jmp    c001670c <Vm::faultHandler(regs*)+0x69b>
c00164e9:	8d 46 ff             	lea    eax,[esi-0x1]
c00164ec:	0f b6 f0             	movzx  esi,al
c00164ef:	83 fe 05             	cmp    esi,0x5
c00164f2:	77 23                	ja     c0016517 <Vm::faultHandler(regs*)+0x4a6>
c00164f4:	ff 24 b5 00 13 02 c0 	jmp    DWORD PTR [esi*4-0x3ffded00]
c00164fb:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016500:	eb 15                	jmp    c0016517 <Vm::faultHandler(regs*)+0x4a6>
c0016502:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016506:	eb 0f                	jmp    c0016517 <Vm::faultHandler(regs*)+0x4a6>
c0016508:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001650c:	eb 09                	jmp    c0016517 <Vm::faultHandler(regs*)+0x4a6>
c001650e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016512:	eb 03                	jmp    c0016517 <Vm::faultHandler(regs*)+0x4a6>
c0016514:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016517:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001651c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001651f:	74 29                	je     c001654a <Vm::faultHandler(regs*)+0x4d9>
c0016521:	3d ff ff 00 00       	cmp    eax,0xffff
c0016526:	76 22                	jbe    c001654a <Vm::faultHandler(regs*)+0x4d9>
c0016528:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001652c:	50                   	push   eax
c001652d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016531:	50                   	push   eax
c0016532:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016536:	50                   	push   eax
c0016537:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001653b:	50                   	push   eax
c001653c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016540:	50                   	push   eax
c0016541:	6a 6e                	push   0x6e
c0016543:	6a 6e                	push   0x6e
c0016545:	e9 8f 00 00 00       	jmp    c00165d9 <Vm::faultHandler(regs*)+0x568>
c001654a:	0f b7 c0             	movzx  eax,ax
c001654d:	52                   	push   edx
c001654e:	52                   	push   edx
c001654f:	50                   	push   eax
c0016550:	57                   	push   edi
c0016551:	e8 a7 fa ff ff       	call   c0015ffd <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016556:	59                   	pop    ecx
c0016557:	0f b6 c0             	movzx  eax,al
c001655a:	5e                   	pop    esi
c001655b:	50                   	push   eax
c001655c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016560:	50                   	push   eax
c0016561:	e8 3e f6 ff ff       	call   c0015ba4 <Vm::outbv(unsigned short, unsigned char)>
c0016566:	83 c4 10             	add    esp,0x10
c0016569:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001656d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016570:	74 03                	je     c0016575 <Vm::faultHandler(regs*)+0x504>
c0016572:	48                   	dec    eax
c0016573:	eb 01                	jmp    c0016576 <Vm::faultHandler(regs*)+0x505>
c0016575:	40                   	inc    eax
c0016576:	0f b7 c0             	movzx  eax,ax
c0016579:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001657c:	e9 8b 01 00 00       	jmp    c001670c <Vm::faultHandler(regs*)+0x69b>
c0016581:	8d 46 ff             	lea    eax,[esi-0x1]
c0016584:	0f b6 f0             	movzx  esi,al
c0016587:	83 fe 05             	cmp    esi,0x5
c001658a:	77 1e                	ja     c00165aa <Vm::faultHandler(regs*)+0x539>
c001658c:	ff 24 b5 18 13 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdece8]
c0016593:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016597:	eb 11                	jmp    c00165aa <Vm::faultHandler(regs*)+0x539>
c0016599:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001659c:	eb 0c                	jmp    c00165aa <Vm::faultHandler(regs*)+0x539>
c001659e:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00165a1:	eb 07                	jmp    c00165aa <Vm::faultHandler(regs*)+0x539>
c00165a3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00165a6:	eb 02                	jmp    c00165aa <Vm::faultHandler(regs*)+0x539>
c00165a8:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00165aa:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00165af:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00165b2:	74 37                	je     c00165eb <Vm::faultHandler(regs*)+0x57a>
c00165b4:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00165ba:	76 2f                	jbe    c00165eb <Vm::faultHandler(regs*)+0x57a>
c00165bc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00165c0:	50                   	push   eax
c00165c1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00165c5:	50                   	push   eax
c00165c6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00165ca:	50                   	push   eax
c00165cb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00165cf:	50                   	push   eax
c00165d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165d4:	50                   	push   eax
c00165d5:	6a 6f                	push   0x6f
c00165d7:	6a 6f                	push   0x6f
c00165d9:	68 a6 12 02 c0       	push   0xc00212a6
c00165de:	e8 be 42 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c00165e3:	83 c4 20             	add    esp,0x20
c00165e6:	e9 86 01 00 00       	jmp    c0016771 <Vm::faultHandler(regs*)+0x700>
c00165eb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00165ee:	0f b7 d7             	movzx  edx,di
c00165f1:	0f b7 c6             	movzx  eax,si
c00165f4:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00165f7:	81 e1 00 04 00 00    	and    ecx,0x400
c00165fd:	83 e5 01             	and    ebp,0x1
c0016600:	74 1c                	je     c001661e <Vm::faultHandler(regs*)+0x5ad>
c0016602:	55                   	push   ebp
c0016603:	55                   	push   ebp
c0016604:	50                   	push   eax
c0016605:	52                   	push   edx
c0016606:	e8 15 fa ff ff       	call   c0016020 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001660b:	83 c4 10             	add    esp,0x10
c001660e:	89 fa                	mov    edx,edi
c0016610:	ef                   	out    dx,eax
c0016611:	8d 46 04             	lea    eax,[esi+0x4]
c0016614:	83 ee 04             	sub    esi,0x4
c0016617:	25 ff ff 00 00       	and    eax,0xffff
c001661c:	eb 1b                	jmp    c0016639 <Vm::faultHandler(regs*)+0x5c8>
c001661e:	55                   	push   ebp
c001661f:	55                   	push   ebp
c0016620:	50                   	push   eax
c0016621:	52                   	push   edx
c0016622:	e8 e7 f9 ff ff       	call   c001600e <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016627:	83 c4 10             	add    esp,0x10
c001662a:	89 fa                	mov    edx,edi
c001662c:	66 ef                	out    dx,ax
c001662e:	8d 46 02             	lea    eax,[esi+0x2]
c0016631:	83 ee 02             	sub    esi,0x2
c0016634:	25 ff ff 00 00       	and    eax,0xffff
c0016639:	81 e6 ff ff 00 00    	and    esi,0xffff
c001663f:	85 c9                	test   ecx,ecx
c0016641:	0f 44 f0             	cmove  esi,eax
c0016644:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016647:	e9 c0 00 00 00       	jmp    c001670c <Vm::faultHandler(regs*)+0x69b>
c001664c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016653:	83 ec 0c             	sub    esp,0xc
c0016656:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001665a:	50                   	push   eax
c001665b:	e8 31 f5 ff ff       	call   c0015b91 <Vm::inbv(unsigned short)>
c0016660:	0f b6 c0             	movzx  eax,al
c0016663:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016666:	eb 3a                	jmp    c00166a2 <Vm::faultHandler(regs*)+0x631>
c0016668:	83 e5 01             	and    ebp,0x1
c001666b:	74 07                	je     c0016674 <Vm::faultHandler(regs*)+0x603>
c001666d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016671:	ed                   	in     eax,dx
c0016672:	eb 14                	jmp    c0016688 <Vm::faultHandler(regs*)+0x617>
c0016674:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016677:	66 31 f6             	xor    si,si
c001667a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001667d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016681:	66 ed                	in     ax,dx
c0016683:	0f b7 c0             	movzx  eax,ax
c0016686:	09 f0                	or     eax,esi
c0016688:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001668b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001668f:	eb 7e                	jmp    c001670f <Vm::faultHandler(regs*)+0x69e>
c0016691:	52                   	push   edx
c0016692:	52                   	push   edx
c0016693:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016697:	50                   	push   eax
c0016698:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001669c:	50                   	push   eax
c001669d:	e8 02 f5 ff ff       	call   c0015ba4 <Vm::outbv(unsigned short, unsigned char)>
c00166a2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00166a6:	eb 4f                	jmp    c00166f7 <Vm::faultHandler(regs*)+0x686>
c00166a8:	83 e5 01             	and    ebp,0x1
c00166ab:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00166ae:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166b2:	74 03                	je     c00166b7 <Vm::faultHandler(regs*)+0x646>
c00166b4:	ef                   	out    dx,eax
c00166b5:	eb d4                	jmp    c001668b <Vm::faultHandler(regs*)+0x61a>
c00166b7:	66 ef                	out    dx,ax
c00166b9:	eb d0                	jmp    c001668b <Vm::faultHandler(regs*)+0x61a>
c00166bb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00166bf:	83 ec 0c             	sub    esp,0xc
c00166c2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00166c9:	50                   	push   eax
c00166ca:	e8 c2 f4 ff ff       	call   c0015b91 <Vm::inbv(unsigned short)>
c00166cf:	0f b6 c0             	movzx  eax,al
c00166d2:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00166d5:	eb 1d                	jmp    c00166f4 <Vm::faultHandler(regs*)+0x683>
c00166d7:	83 e5 01             	and    ebp,0x1
c00166da:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00166dd:	74 03                	je     c00166e2 <Vm::faultHandler(regs*)+0x671>
c00166df:	ed                   	in     eax,dx
c00166e0:	eb 0d                	jmp    c00166ef <Vm::faultHandler(regs*)+0x67e>
c00166e2:	66 ed                	in     ax,dx
c00166e4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00166e7:	0f b7 c0             	movzx  eax,ax
c00166ea:	66 31 d2             	xor    dx,dx
c00166ed:	09 d0                	or     eax,edx
c00166ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00166f2:	eb 18                	jmp    c001670c <Vm::faultHandler(regs*)+0x69b>
c00166f4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166f7:	83 c4 10             	add    esp,0x10
c00166fa:	eb 13                	jmp    c001670f <Vm::faultHandler(regs*)+0x69e>
c00166fc:	83 e5 01             	and    ebp,0x1
c00166ff:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016702:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016705:	74 03                	je     c001670a <Vm::faultHandler(regs*)+0x699>
c0016707:	ef                   	out    dx,eax
c0016708:	eb 02                	jmp    c001670c <Vm::faultHandler(regs*)+0x69b>
c001670a:	66 ef                	out    dx,ax
c001670c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001670f:	b0 01                	mov    al,0x1
c0016711:	eb 60                	jmp    c0016773 <Vm::faultHandler(regs*)+0x702>
c0016713:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016717:	50                   	push   eax
c0016718:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001671c:	50                   	push   eax
c001671d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016721:	50                   	push   eax
c0016722:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016726:	50                   	push   eax
c0016727:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001672b:	50                   	push   eax
c001672c:	52                   	push   edx
c001672d:	52                   	push   edx
c001672e:	68 d3 12 02 c0       	push   0xc00212d3
c0016733:	e8 69 41 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0016738:	83 c4 20             	add    esp,0x20
c001673b:	83 ec 0c             	sub    esp,0xc
c001673e:	6a 60                	push   0x60
c0016740:	e8 4c f4 ff ff       	call   c0015b91 <Vm::inbv(unsigned short)>
c0016745:	83 c4 10             	add    esp,0x10
c0016748:	0f b6 d0             	movzx  edx,al
c001674b:	83 fa 1c             	cmp    edx,0x1c
c001674e:	74 05                	je     c0016755 <Vm::faultHandler(regs*)+0x6e4>
c0016750:	83 fa 5a             	cmp    edx,0x5a
c0016753:	75 e6                	jne    c001673b <Vm::faultHandler(regs*)+0x6ca>
c0016755:	0f b6 c0             	movzx  eax,al
c0016758:	83 f8 1c             	cmp    eax,0x1c
c001675b:	74 05                	je     c0016762 <Vm::faultHandler(regs*)+0x6f1>
c001675d:	83 f8 5a             	cmp    eax,0x5a
c0016760:	75 0f                	jne    c0016771 <Vm::faultHandler(regs*)+0x700>
c0016762:	83 ec 0c             	sub    esp,0xc
c0016765:	6a 60                	push   0x60
c0016767:	e8 25 f4 ff ff       	call   c0015b91 <Vm::inbv(unsigned short)>
c001676c:	83 c4 10             	add    esp,0x10
c001676f:	eb e4                	jmp    c0016755 <Vm::faultHandler(regs*)+0x6e4>
c0016771:	31 c0                	xor    eax,eax
c0016773:	83 c4 2c             	add    esp,0x2c
c0016776:	5b                   	pop    ebx
c0016777:	5e                   	pop    esi
c0016778:	5f                   	pop    edi
c0016779:	5d                   	pop    ebp
c001677a:	c3                   	ret    

c001677b <noCopro(unsigned long)>:
c001677b:	c3                   	ret    

c001677c <nmiHandler(regs*, void*)>:
c001677c:	83 ec 0c             	sub    esp,0xc
c001677f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016784:	83 ec 0c             	sub    esp,0xc
c0016787:	50                   	push   eax
c0016788:	e8 a5 0a ff ff       	call   c0007232 <Computer::handleNMI()>
c001678d:	83 c4 10             	add    esp,0x10
c0016790:	90                   	nop
c0016791:	83 c4 0c             	add    esp,0xc
c0016794:	c3                   	ret    

c0016795 <doubleFault(regs*, void*)>:
c0016795:	55                   	push   ebp
c0016796:	89 e5                	mov    ebp,esp
c0016798:	83 ec 08             	sub    esp,0x8
c001679b:	83 ec 0c             	sub    esp,0xc
c001679e:	68 30 13 02 c0       	push   0xc0021330
c00167a3:	e8 5f a0 ff ff       	call   c0010807 <KePanic(char const*)>
c00167a8:	83 c4 10             	add    esp,0x10
c00167ab:	90                   	nop
c00167ac:	c9                   	leave  
c00167ad:	c3                   	ret    

c00167ae <displayDebugInfo(regs*)>:
c00167ae:	83 ec 1c             	sub    esp,0x1c
c00167b1:	0f 20 c0             	mov    eax,cr0
c00167b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167b8:	0f 20 d0             	mov    eax,cr2
c00167bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00167bf:	0f 20 d8             	mov    eax,cr3
c00167c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167c6:	0f 20 e0             	mov    eax,cr4
c00167c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00167cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167d0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00167d3:	83 ec 08             	sub    esp,0x8
c00167d6:	50                   	push   eax
c00167d7:	68 4c 13 02 c0       	push   0xc002134c
c00167dc:	e8 c0 40 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c00167e1:	83 c4 10             	add    esp,0x10
c00167e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167e8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00167eb:	83 ec 08             	sub    esp,0x8
c00167ee:	50                   	push   eax
c00167ef:	68 3d 13 02 c0       	push   0xc002133d
c00167f4:	e8 a8 40 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c00167f9:	83 c4 10             	add    esp,0x10
c00167fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016800:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016803:	83 ec 08             	sub    esp,0x8
c0016806:	50                   	push   eax
c0016807:	68 48 13 02 c0       	push   0xc0021348
c001680c:	e8 90 40 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0016811:	83 c4 10             	add    esp,0x10
c0016814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016818:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001681b:	83 ec 08             	sub    esp,0x8
c001681e:	50                   	push   eax
c001681f:	68 57 13 02 c0       	push   0xc0021357
c0016824:	e8 78 40 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0016829:	83 c4 10             	add    esp,0x10
c001682c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016830:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016833:	83 ec 08             	sub    esp,0x8
c0016836:	50                   	push   eax
c0016837:	68 62 13 02 c0       	push   0xc0021362
c001683c:	e8 60 40 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0016841:	83 c4 10             	add    esp,0x10
c0016844:	83 ec 08             	sub    esp,0x8
c0016847:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001684b:	68 6d 13 02 c0       	push   0xc002136d
c0016850:	e8 4c 40 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0016855:	83 c4 10             	add    esp,0x10
c0016858:	83 ec 08             	sub    esp,0x8
c001685b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001685f:	68 78 13 02 c0       	push   0xc0021378
c0016864:	e8 38 40 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0016869:	83 c4 10             	add    esp,0x10
c001686c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016871:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016877:	83 ec 0c             	sub    esp,0xc
c001687a:	50                   	push   eax
c001687b:	e8 3b 1e ff ff       	call   c00086bb <setActiveTerminal(VgaText*)>
c0016880:	83 c4 10             	add    esp,0x10
c0016883:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016888:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001688e:	83 ec 08             	sub    esp,0x8
c0016891:	68 83 13 02 c0       	push   0xc0021383
c0016896:	50                   	push   eax
c0016897:	e8 5c 21 ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c001689c:	83 c4 10             	add    esp,0x10
c001689f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168aa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00168ae:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00168b1:	83 ec 08             	sub    esp,0x8
c00168b4:	52                   	push   edx
c00168b5:	50                   	push   eax
c00168b6:	e8 f7 20 ff ff       	call   c00089b2 <VgaText::putx(unsigned int)>
c00168bb:	83 c4 10             	add    esp,0x10
c00168be:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168c9:	83 ec 08             	sub    esp,0x8
c00168cc:	68 91 13 02 c0       	push   0xc0021391
c00168d1:	50                   	push   eax
c00168d2:	e8 21 21 ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c00168d7:	83 c4 10             	add    esp,0x10
c00168da:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168df:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168e5:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00168ea:	8b 12                	mov    edx,DWORD PTR [edx]
c00168ec:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00168ef:	83 c2 0c             	add    edx,0xc
c00168f2:	83 ec 08             	sub    esp,0x8
c00168f5:	52                   	push   edx
c00168f6:	50                   	push   eax
c00168f7:	e8 fc 20 ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c00168fc:	83 c4 10             	add    esp,0x10
c00168ff:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016904:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001690a:	83 ec 08             	sub    esp,0x8
c001690d:	68 9a 13 02 c0       	push   0xc002139a
c0016912:	50                   	push   eax
c0016913:	e8 e0 20 ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c0016918:	83 c4 10             	add    esp,0x10
c001691b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016920:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016926:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001692a:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001692d:	83 ec 08             	sub    esp,0x8
c0016930:	52                   	push   edx
c0016931:	50                   	push   eax
c0016932:	e8 7b 20 ff ff       	call   c00089b2 <VgaText::putx(unsigned int)>
c0016937:	83 c4 10             	add    esp,0x10
c001693a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001693f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016945:	83 ec 08             	sub    esp,0x8
c0016948:	68 a2 13 02 c0       	push   0xc00213a2
c001694d:	50                   	push   eax
c001694e:	e8 a5 20 ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c0016953:	83 c4 10             	add    esp,0x10
c0016956:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001695b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016961:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016965:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016968:	83 ec 08             	sub    esp,0x8
c001696b:	52                   	push   edx
c001696c:	50                   	push   eax
c001696d:	e8 40 20 ff ff       	call   c00089b2 <VgaText::putx(unsigned int)>
c0016972:	83 c4 10             	add    esp,0x10
c0016975:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001697a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016980:	83 ec 08             	sub    esp,0x8
c0016983:	68 aa 13 02 c0       	push   0xc00213aa
c0016988:	50                   	push   eax
c0016989:	e8 6a 20 ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c001698e:	83 c4 10             	add    esp,0x10
c0016991:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016996:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001699c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169a0:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00169a3:	83 ec 08             	sub    esp,0x8
c00169a6:	52                   	push   edx
c00169a7:	50                   	push   eax
c00169a8:	e8 05 20 ff ff       	call   c00089b2 <VgaText::putx(unsigned int)>
c00169ad:	83 c4 10             	add    esp,0x10
c00169b0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169bb:	83 ec 08             	sub    esp,0x8
c00169be:	68 b2 13 02 c0       	push   0xc00213b2
c00169c3:	50                   	push   eax
c00169c4:	e8 2f 20 ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c00169c9:	83 c4 10             	add    esp,0x10
c00169cc:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169d1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169db:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00169de:	83 ec 08             	sub    esp,0x8
c00169e1:	52                   	push   edx
c00169e2:	50                   	push   eax
c00169e3:	e8 ca 1f ff ff       	call   c00089b2 <VgaText::putx(unsigned int)>
c00169e8:	83 c4 10             	add    esp,0x10
c00169eb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169f6:	83 ec 08             	sub    esp,0x8
c00169f9:	68 ba 13 02 c0       	push   0xc00213ba
c00169fe:	50                   	push   eax
c00169ff:	e8 f4 1f ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c0016a04:	83 c4 10             	add    esp,0x10
c0016a07:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a0c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a12:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a16:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016a19:	83 ec 08             	sub    esp,0x8
c0016a1c:	52                   	push   edx
c0016a1d:	50                   	push   eax
c0016a1e:	e8 8f 1f ff ff       	call   c00089b2 <VgaText::putx(unsigned int)>
c0016a23:	83 c4 10             	add    esp,0x10
c0016a26:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a2b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a31:	83 ec 08             	sub    esp,0x8
c0016a34:	68 c2 13 02 c0       	push   0xc00213c2
c0016a39:	50                   	push   eax
c0016a3a:	e8 b9 1f ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c0016a3f:	83 c4 10             	add    esp,0x10
c0016a42:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a47:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a4d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a51:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016a54:	83 ec 08             	sub    esp,0x8
c0016a57:	52                   	push   edx
c0016a58:	50                   	push   eax
c0016a59:	e8 54 1f ff ff       	call   c00089b2 <VgaText::putx(unsigned int)>
c0016a5e:	83 c4 10             	add    esp,0x10
c0016a61:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a66:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a6c:	83 ec 08             	sub    esp,0x8
c0016a6f:	68 ca 13 02 c0       	push   0xc00213ca
c0016a74:	50                   	push   eax
c0016a75:	e8 7e 1f ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c0016a7a:	83 c4 10             	add    esp,0x10
c0016a7d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a82:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a88:	83 ec 08             	sub    esp,0x8
c0016a8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a8f:	50                   	push   eax
c0016a90:	e8 1d 1f ff ff       	call   c00089b2 <VgaText::putx(unsigned int)>
c0016a95:	83 c4 10             	add    esp,0x10
c0016a98:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a9d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aa3:	83 ec 08             	sub    esp,0x8
c0016aa6:	68 d3 13 02 c0       	push   0xc00213d3
c0016aab:	50                   	push   eax
c0016aac:	e8 47 1f ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c0016ab1:	83 c4 10             	add    esp,0x10
c0016ab4:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ab9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016abf:	83 ec 08             	sub    esp,0x8
c0016ac2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ac6:	50                   	push   eax
c0016ac7:	e8 e6 1e ff ff       	call   c00089b2 <VgaText::putx(unsigned int)>
c0016acc:	83 c4 10             	add    esp,0x10
c0016acf:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ad4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ada:	83 ec 08             	sub    esp,0x8
c0016add:	68 db 13 02 c0       	push   0xc00213db
c0016ae2:	50                   	push   eax
c0016ae3:	e8 10 1f ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c0016ae8:	83 c4 10             	add    esp,0x10
c0016aeb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016af0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016af6:	83 ec 08             	sub    esp,0x8
c0016af9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016afd:	50                   	push   eax
c0016afe:	e8 af 1e ff ff       	call   c00089b2 <VgaText::putx(unsigned int)>
c0016b03:	83 c4 10             	add    esp,0x10
c0016b06:	fa                   	cli    
c0016b07:	f4                   	hlt    
c0016b08:	eb fe                	jmp    c0016b08 <displayDebugInfo(regs*)+0x35a>

c0016b0a <HalSystemIdle()>:
c0016b0a:	56                   	push   esi
c0016b0b:	53                   	push   ebx
c0016b0c:	83 ec 14             	sub    esp,0x14
c0016b0f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b14:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b1a:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016b20:	83 e0 04             	and    eax,0x4
c0016b23:	0f b6 c0             	movzx  eax,al
c0016b26:	85 c0                	test   eax,eax
c0016b28:	0f 95 c0             	setne  al
c0016b2b:	0f b6 c0             	movzx  eax,al
c0016b2e:	85 c0                	test   eax,eax
c0016b30:	74 4c                	je     c0016b7e <HalSystemIdle()+0x74>
c0016b32:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b37:	83 ec 08             	sub    esp,0x8
c0016b3a:	68 e1 00 00 00       	push   0xe1
c0016b3f:	50                   	push   eax
c0016b40:	e8 f9 04 ff ff       	call   c000703e <Computer::rdmsr(unsigned int)>
c0016b45:	83 c4 10             	add    esp,0x10
c0016b48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b50:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b55:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016b59:	83 e2 02             	and    edx,0x2
c0016b5c:	89 d3                	mov    ebx,edx
c0016b5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b62:	83 e2 00             	and    edx,0x0
c0016b65:	89 d6                	mov    esi,edx
c0016b67:	56                   	push   esi
c0016b68:	53                   	push   ebx
c0016b69:	68 e1 00 00 00       	push   0xe1
c0016b6e:	50                   	push   eax
c0016b6f:	e8 f6 04 ff ff       	call   c000706a <Computer::wrmsr(unsigned int, unsigned long long)>
c0016b74:	83 c4 10             	add    esp,0x10
c0016b77:	e8 18 96 fe ff       	call   c0000194 <doTPAUSE>
c0016b7c:	eb 01                	jmp    c0016b7f <HalSystemIdle()+0x75>
c0016b7e:	f4                   	hlt    
c0016b7f:	90                   	nop
c0016b80:	83 c4 14             	add    esp,0x14
c0016b83:	5b                   	pop    ebx
c0016b84:	5e                   	pop    esi
c0016b85:	c3                   	ret    

c0016b86 <displayProgramFault(char const*)>:
c0016b86:	83 ec 0c             	sub    esp,0xc
c0016b89:	83 ec 0c             	sub    esp,0xc
c0016b8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b90:	e8 0c 3d ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0016b95:	83 c4 10             	add    esp,0x10
c0016b98:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b9f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ba2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ba8:	85 c0                	test   eax,eax
c0016baa:	74 21                	je     c0016bcd <displayProgramFault(char const*)+0x47>
c0016bac:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016bb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bb3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016bb6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016bbc:	6a 04                	push   0x4
c0016bbe:	6a 0f                	push   0xf
c0016bc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bc4:	50                   	push   eax
c0016bc5:	e8 a0 1e ff ff       	call   c0008a6a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016bca:	83 c4 10             	add    esp,0x10
c0016bcd:	90                   	nop
c0016bce:	83 c4 0c             	add    esp,0xc
c0016bd1:	c3                   	ret    

c0016bd2 <gpFault(regs*, void*)>:
c0016bd2:	83 ec 1c             	sub    esp,0x1c
c0016bd5:	c7 05 10 82 02 c0 71 60 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc0016071
c0016bdf:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016be4:	85 c0                	test   eax,eax
c0016be6:	74 1e                	je     c0016c06 <gpFault(regs*, void*)+0x34>
c0016be8:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016bed:	83 ec 0c             	sub    esp,0xc
c0016bf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016bf4:	ff d0                	call   eax
c0016bf6:	83 c4 10             	add    esp,0x10
c0016bf9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016bfd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016c02:	85 c0                	test   eax,eax
c0016c04:	75 2e                	jne    c0016c34 <gpFault(regs*, void*)+0x62>
c0016c06:	83 ec 0c             	sub    esp,0xc
c0016c09:	68 e3 13 02 c0       	push   0xc00213e3
c0016c0e:	e8 73 ff ff ff       	call   c0016b86 <displayProgramFault(char const*)>
c0016c13:	83 c4 10             	add    esp,0x10
c0016c16:	83 ec 0c             	sub    esp,0xc
c0016c19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c1d:	e8 8c fb ff ff       	call   c00167ae <displayDebugInfo(regs*)>
c0016c22:	83 c4 10             	add    esp,0x10
c0016c25:	83 ec 0c             	sub    esp,0xc
c0016c28:	6a 00                	push   0x0
c0016c2a:	e8 09 ee ff ff       	call   c0015a38 <Thr::terminateFromIRQ(int)>
c0016c2f:	83 c4 10             	add    esp,0x10
c0016c32:	eb 01                	jmp    c0016c35 <gpFault(regs*, void*)+0x63>
c0016c34:	90                   	nop
c0016c35:	83 c4 1c             	add    esp,0x1c
c0016c38:	c3                   	ret    

c0016c39 <pgFault(regs*, void*)>:
c0016c39:	83 ec 1c             	sub    esp,0x1c
c0016c3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c40:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016c43:	0f 20 d0             	mov    eax,cr2
c0016c46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c4e:	83 ec 04             	sub    esp,0x4
c0016c51:	52                   	push   edx
c0016c52:	50                   	push   eax
c0016c53:	68 c0 14 02 c0       	push   0xc00214c0
c0016c58:	e8 44 3c ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0016c5d:	83 c4 10             	add    esp,0x10
c0016c60:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c67:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c6a:	8b 90 12 05 00 00    	mov    edx,DWORD PTR [eax+0x512]
c0016c70:	0f 20 d0             	mov    eax,cr2
c0016c73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c7b:	83 ec 08             	sub    esp,0x8
c0016c7e:	50                   	push   eax
c0016c7f:	52                   	push   edx
c0016c80:	e8 eb 37 ff ff       	call   c000a470 <VAS::tryLoadBackOffDisk(unsigned long)>
c0016c85:	83 c4 10             	add    esp,0x10
c0016c88:	0f b6 c0             	movzx  eax,al
c0016c8b:	85 c0                	test   eax,eax
c0016c8d:	75 2e                	jne    c0016cbd <pgFault(regs*, void*)+0x84>
c0016c8f:	83 ec 0c             	sub    esp,0xc
c0016c92:	68 fc 13 02 c0       	push   0xc00213fc
c0016c97:	e8 ea fe ff ff       	call   c0016b86 <displayProgramFault(char const*)>
c0016c9c:	83 c4 10             	add    esp,0x10
c0016c9f:	83 ec 0c             	sub    esp,0xc
c0016ca2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ca6:	e8 03 fb ff ff       	call   c00167ae <displayDebugInfo(regs*)>
c0016cab:	83 c4 10             	add    esp,0x10
c0016cae:	83 ec 0c             	sub    esp,0xc
c0016cb1:	6a 00                	push   0x0
c0016cb3:	e8 80 ed ff ff       	call   c0015a38 <Thr::terminateFromIRQ(int)>
c0016cb8:	83 c4 10             	add    esp,0x10
c0016cbb:	eb 01                	jmp    c0016cbe <pgFault(regs*, void*)+0x85>
c0016cbd:	90                   	nop
c0016cbe:	83 c4 1c             	add    esp,0x1c
c0016cc1:	c3                   	ret    

c0016cc2 <otherISRHandler(regs*, void*)>:
c0016cc2:	83 ec 0c             	sub    esp,0xc
c0016cc5:	83 ec 0c             	sub    esp,0xc
c0016cc8:	68 e8 14 02 c0       	push   0xc00214e8
c0016ccd:	e8 b4 fe ff ff       	call   c0016b86 <displayProgramFault(char const*)>
c0016cd2:	83 c4 10             	add    esp,0x10
c0016cd5:	83 ec 0c             	sub    esp,0xc
c0016cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cdc:	e8 cd fa ff ff       	call   c00167ae <displayDebugInfo(regs*)>
c0016ce1:	83 c4 10             	add    esp,0x10
c0016ce4:	83 ec 0c             	sub    esp,0xc
c0016ce7:	6a 00                	push   0x0
c0016ce9:	e8 4a ed ff ff       	call   c0015a38 <Thr::terminateFromIRQ(int)>
c0016cee:	83 c4 10             	add    esp,0x10
c0016cf1:	90                   	nop
c0016cf2:	83 c4 0c             	add    esp,0xc
c0016cf5:	c3                   	ret    

c0016cf6 <opcodeFault(regs*, void*)>:
c0016cf6:	55                   	push   ebp
c0016cf7:	89 e5                	mov    ebp,esp
c0016cf9:	83 ec 08             	sub    esp,0x8
c0016cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016cff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d02:	83 ec 08             	sub    esp,0x8
c0016d05:	50                   	push   eax
c0016d06:	68 07 14 02 c0       	push   0xc0021407
c0016d0b:	e8 91 3b ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0016d10:	83 c4 10             	add    esp,0x10
c0016d13:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016d18:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d1e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016d24:	0f b6 c0             	movzx  eax,al
c0016d27:	85 c0                	test   eax,eax
c0016d29:	74 21                	je     c0016d4c <opcodeFault(regs*, void*)+0x56>
c0016d2b:	83 ec 0c             	sub    esp,0xc
c0016d2e:	68 10 15 02 c0       	push   0xc0021510
c0016d33:	e8 69 3b ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0016d38:	83 c4 10             	add    esp,0x10
c0016d3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d3e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d41:	8d 50 19             	lea    edx,[eax+0x19]
c0016d44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d47:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016d4a:	eb 2b                	jmp    c0016d77 <opcodeFault(regs*, void*)+0x81>
c0016d4c:	83 ec 0c             	sub    esp,0xc
c0016d4f:	68 15 14 02 c0       	push   0xc0021415
c0016d54:	e8 2d fe ff ff       	call   c0016b86 <displayProgramFault(char const*)>
c0016d59:	83 c4 10             	add    esp,0x10
c0016d5c:	83 ec 0c             	sub    esp,0xc
c0016d5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016d62:	e8 47 fa ff ff       	call   c00167ae <displayDebugInfo(regs*)>
c0016d67:	83 c4 10             	add    esp,0x10
c0016d6a:	83 ec 0c             	sub    esp,0xc
c0016d6d:	6a 00                	push   0x0
c0016d6f:	e8 c4 ec ff ff       	call   c0015a38 <Thr::terminateFromIRQ(int)>
c0016d74:	83 c4 10             	add    esp,0x10
c0016d77:	c9                   	leave  
c0016d78:	c3                   	ret    

c0016d79 <i386SaveCoprocessor(void*)>:
c0016d79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d7d:	83 c0 3f             	add    eax,0x3f
c0016d80:	83 e0 c0             	and    eax,0xffffffc0
c0016d83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d87:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016d8d <i386LoadCoprocessor(void*)>:
c0016d8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d91:	83 c0 3f             	add    eax,0x3f
c0016d94:	83 e0 c0             	and    eax,0xffffffc0
c0016d97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d9b:	ff 25 08 82 02 c0    	jmp    DWORD PTR ds:0xc0028208

c0016da1 <x87EmulHandler(regs*, void*)>:
c0016da1:	53                   	push   ebx
c0016da2:	83 ec 08             	sub    esp,0x8
c0016da5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016daa:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016dae:	74 10                	je     c0016dc0 <x87EmulHandler(regs*, void*)+0x1f>
c0016db0:	83 ec 0c             	sub    esp,0xc
c0016db3:	68 22 14 02 c0       	push   0xc0021422
c0016db8:	e8 4a 9a ff ff       	call   c0010807 <KePanic(char const*)>
c0016dbd:	83 c4 10             	add    esp,0x10
c0016dc0:	0f 20 c0             	mov    eax,cr0
c0016dc3:	a8 08                	test   al,0x8
c0016dc5:	74 59                	je     c0016e20 <x87EmulHandler(regs*, void*)+0x7f>
c0016dc7:	0f 06                	clts   
c0016dc9:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016dce:	85 c0                	test   eax,eax
c0016dd0:	74 0e                	je     c0016de0 <x87EmulHandler(regs*, void*)+0x3f>
c0016dd2:	83 ec 0c             	sub    esp,0xc
c0016dd5:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016dd8:	e8 9c ff ff ff       	call   c0016d79 <i386SaveCoprocessor(void*)>
c0016ddd:	83 c4 10             	add    esp,0x10
c0016de0:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016de6:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016dea:	75 12                	jne    c0016dfe <x87EmulHandler(regs*, void*)+0x5d>
c0016dec:	83 ec 0c             	sub    esp,0xc
c0016def:	68 40 02 00 00       	push   0x240
c0016df4:	e8 36 0c ff ff       	call   c0007a2f <malloc>
c0016df9:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016dfc:	eb 10                	jmp    c0016e0e <x87EmulHandler(regs*, void*)+0x6d>
c0016dfe:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016e03:	83 ec 0c             	sub    esp,0xc
c0016e06:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e09:	e8 7f ff ff ff       	call   c0016d8d <i386LoadCoprocessor(void*)>
c0016e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e13:	83 c4 10             	add    esp,0x10
c0016e16:	a3 04 82 02 c0       	mov    ds:0xc0028204,eax
c0016e1b:	83 c4 08             	add    esp,0x8
c0016e1e:	5b                   	pop    ebx
c0016e1f:	c3                   	ret    
c0016e20:	83 ec 0c             	sub    esp,0xc
c0016e23:	68 36 14 02 c0       	push   0xc0021436
c0016e28:	e8 74 3a ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0016e2d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016e35:	83 c4 18             	add    esp,0x18
c0016e38:	5b                   	pop    ebx
c0016e39:	e9 fa eb ff ff       	jmp    c0015a38 <Thr::terminateFromIRQ(int)>

c0016e3e <HalInitialiseCoprocessor()>:
c0016e3e:	83 ec 10             	sub    esp,0x10
c0016e41:	c7 05 04 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028204,0x0
c0016e4b:	6a 00                	push   0x0
c0016e4d:	68 a1 6d 01 c0       	push   0xc0016da1
c0016e52:	6a 07                	push   0x7
c0016e54:	e8 e1 53 ff ff       	call   c000c23a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016e59:	e8 02 70 00 00       	call   c001de60 <avxDetect>
c0016e5e:	83 c4 10             	add    esp,0x10
c0016e61:	85 c0                	test   eax,eax
c0016e63:	74 1c                	je     c0016e81 <HalInitialiseCoprocessor()+0x43>
c0016e65:	c7 05 0c 82 02 c0 8a de 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001de8a
c0016e6f:	c7 05 08 82 02 c0 9b de 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001de9b
c0016e79:	83 c4 0c             	add    esp,0xc
c0016e7c:	e9 2b 70 00 00       	jmp    c001deac <avxInit>
c0016e81:	e8 6a 73 00 00       	call   c001e1f0 <absolutelyNoChanceInHell>
c0016e86:	85 c0                	test   eax,eax
c0016e88:	74 1c                	je     c0016ea6 <HalInitialiseCoprocessor()+0x68>
c0016e8a:	c7 05 0c 82 02 c0 08 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e208
c0016e94:	c7 05 08 82 02 c0 10 e2 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e210
c0016e9e:	83 c4 0c             	add    esp,0xc
c0016ea1:	e9 72 73 00 00       	jmp    c001e218 <sseInit>
c0016ea6:	e8 8b 73 00 00       	call   c001e236 <x87Detect>
c0016eab:	85 c0                	test   eax,eax
c0016ead:	74 1c                	je     c0016ecb <HalInitialiseCoprocessor()+0x8d>
c0016eaf:	c7 05 0c 82 02 c0 51 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e251
c0016eb9:	c7 05 08 82 02 c0 58 e2 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e258
c0016ec3:	83 c4 0c             	add    esp,0xc
c0016ec6:	e9 94 73 00 00       	jmp    c001e25f <x87Init>
c0016ecb:	c7 05 0c 82 02 c0 7b 67 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001677b
c0016ed5:	c7 05 08 82 02 c0 7b 67 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001677b
c0016edf:	0f 20 c0             	mov    eax,cr0
c0016ee2:	83 c8 04             	or     eax,0x4
c0016ee5:	0f 22 c0             	mov    cr0,eax
c0016ee8:	83 c4 0c             	add    esp,0xc
c0016eeb:	c3                   	ret    

c0016eec <HalPanic(char const*)>:
c0016eec:	53                   	push   ebx
c0016eed:	83 ec 10             	sub    esp,0x10
c0016ef0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016ef4:	fa                   	cli    
c0016ef5:	53                   	push   ebx
c0016ef6:	68 4c 14 02 c0       	push   0xc002144c
c0016efb:	e8 a1 39 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0016f00:	83 c4 0c             	add    esp,0xc
c0016f03:	6a 01                	push   0x1
c0016f05:	6a 0f                	push   0xf
c0016f07:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f0d:	e8 fc 15 ff ff       	call   c000850e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f12:	58                   	pop    eax
c0016f13:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f19:	e8 e8 17 ff ff       	call   c0008706 <VgaText::clearScreen()>
c0016f1e:	5a                   	pop    edx
c0016f1f:	59                   	pop    ecx
c0016f20:	68 a4 fc 01 c0       	push   0xc001fca4
c0016f25:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f2b:	e8 16 16 ff ff       	call   c0008546 <VgaText::setTitle(char*)>
c0016f30:	83 c4 0c             	add    esp,0xc
c0016f33:	6a 01                	push   0x1
c0016f35:	6a 0f                	push   0xf
c0016f37:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f3d:	e8 cc 15 ff ff       	call   c000850e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f42:	58                   	pop    eax
c0016f43:	5a                   	pop    edx
c0016f44:	68 65 14 02 c0       	push   0xc0021465
c0016f49:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f4f:	e8 a4 1a ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c0016f54:	83 c4 0c             	add    esp,0xc
c0016f57:	6a 0f                	push   0xf
c0016f59:	6a 01                	push   0x1
c0016f5b:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f61:	e8 a8 15 ff ff       	call   c000850e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f66:	59                   	pop    ecx
c0016f67:	58                   	pop    eax
c0016f68:	68 6e 14 02 c0       	push   0xc002146e
c0016f6d:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f73:	e8 80 1a ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c0016f78:	83 c4 0c             	add    esp,0xc
c0016f7b:	6a 01                	push   0x1
c0016f7d:	6a 0f                	push   0xf
c0016f7f:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f85:	e8 84 15 ff ff       	call   c000850e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f8a:	58                   	pop    eax
c0016f8b:	5a                   	pop    edx
c0016f8c:	68 b2 14 02 c0       	push   0xc00214b2
c0016f91:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f97:	e8 5c 1a ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c0016f9c:	59                   	pop    ecx
c0016f9d:	58                   	pop    eax
c0016f9e:	68 7b 14 02 c0       	push   0xc002147b
c0016fa3:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fa9:	e8 4a 1a ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c0016fae:	58                   	pop    eax
c0016faf:	5a                   	pop    edx
c0016fb0:	68 b5 14 02 c0       	push   0xc00214b5
c0016fb5:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fbb:	e8 38 1a ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c0016fc0:	59                   	pop    ecx
c0016fc1:	58                   	pop    eax
c0016fc2:	53                   	push   ebx
c0016fc3:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fc9:	e8 2a 1a ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c0016fce:	58                   	pop    eax
c0016fcf:	5a                   	pop    edx
c0016fd0:	68 b2 14 02 c0       	push   0xc00214b2
c0016fd5:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fdb:	e8 18 1a ff ff       	call   c00089f8 <VgaText::puts(char const*)>
c0016fe0:	83 c4 10             	add    esp,0x10
c0016fe3:	eb fe                	jmp    c0016fe3 <HalPanic(char const*)+0xf7>

c0016fe5 <HalQueryPerformanceCounter()>:
c0016fe5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016fea:	31 d2                	xor    edx,edx
c0016fec:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016ff2:	31 c0                	xor    eax,eax
c0016ff4:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0016ffb:	74 02                	je     c0016fff <HalQueryPerformanceCounter()+0x1a>
c0016ffd:	0f 31                	rdtsc  
c0016fff:	c3                   	ret    

c0017000 <HalInitialise()>:
c0017000:	53                   	push   ebx
c0017001:	83 ec 08             	sub    esp,0x8
c0017004:	e8 68 54 ff ff       	call   c000c471 <setupINTS()>
c0017009:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0017010:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017015:	75 0f                	jne    c0017026 <HalInitialise()+0x26>
c0017017:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001701d:	83 e2 fe             	and    edx,0xfffffffe
c0017020:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017026:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001702c:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c0017033:	83 e2 fe             	and    edx,0xfffffffe
c0017036:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001703c:	e8 9f 02 00 00       	call   c00172e0 <picOpen()>
c0017041:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017048:	74 0a                	je     c0017054 <HalInitialise()+0x54>
c001704a:	e8 e1 01 00 00       	call   c0017230 <picDisable()>
c001704f:	e8 76 67 00 00       	call   c001d7ca <apicOpen()>
c0017054:	50                   	push   eax
c0017055:	bb 0f 00 00 00       	mov    ebx,0xf
c001705a:	6a 00                	push   0x0
c001705c:	68 c2 6c 01 c0       	push   0xc0016cc2
c0017061:	6a 00                	push   0x0
c0017063:	e8 d2 51 ff ff       	call   c000c23a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017068:	83 c4 0c             	add    esp,0xc
c001706b:	6a 00                	push   0x0
c001706d:	68 c2 6c 01 c0       	push   0xc0016cc2
c0017072:	6a 01                	push   0x1
c0017074:	e8 c1 51 ff ff       	call   c000c23a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017079:	83 c4 0c             	add    esp,0xc
c001707c:	6a 00                	push   0x0
c001707e:	68 7c 67 01 c0       	push   0xc001677c
c0017083:	6a 02                	push   0x2
c0017085:	e8 b0 51 ff ff       	call   c000c23a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001708a:	83 c4 0c             	add    esp,0xc
c001708d:	6a 00                	push   0x0
c001708f:	68 c2 6c 01 c0       	push   0xc0016cc2
c0017094:	6a 03                	push   0x3
c0017096:	e8 9f 51 ff ff       	call   c000c23a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001709b:	83 c4 0c             	add    esp,0xc
c001709e:	6a 00                	push   0x0
c00170a0:	68 c2 6c 01 c0       	push   0xc0016cc2
c00170a5:	6a 04                	push   0x4
c00170a7:	e8 8e 51 ff ff       	call   c000c23a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170ac:	83 c4 0c             	add    esp,0xc
c00170af:	6a 00                	push   0x0
c00170b1:	68 c2 6c 01 c0       	push   0xc0016cc2
c00170b6:	6a 05                	push   0x5
c00170b8:	e8 7d 51 ff ff       	call   c000c23a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170bd:	83 c4 0c             	add    esp,0xc
c00170c0:	6a 00                	push   0x0
c00170c2:	68 f6 6c 01 c0       	push   0xc0016cf6
c00170c7:	6a 06                	push   0x6
c00170c9:	e8 6c 51 ff ff       	call   c000c23a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170ce:	83 c4 0c             	add    esp,0xc
c00170d1:	6a 00                	push   0x0
c00170d3:	68 95 67 01 c0       	push   0xc0016795
c00170d8:	6a 08                	push   0x8
c00170da:	e8 5b 51 ff ff       	call   c000c23a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170df:	83 c4 0c             	add    esp,0xc
c00170e2:	6a 00                	push   0x0
c00170e4:	68 c2 6c 01 c0       	push   0xc0016cc2
c00170e9:	6a 09                	push   0x9
c00170eb:	e8 4a 51 ff ff       	call   c000c23a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170f0:	83 c4 0c             	add    esp,0xc
c00170f3:	6a 00                	push   0x0
c00170f5:	68 c2 6c 01 c0       	push   0xc0016cc2
c00170fa:	6a 0a                	push   0xa
c00170fc:	e8 39 51 ff ff       	call   c000c23a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017101:	83 c4 0c             	add    esp,0xc
c0017104:	6a 00                	push   0x0
c0017106:	68 c2 6c 01 c0       	push   0xc0016cc2
c001710b:	6a 0b                	push   0xb
c001710d:	e8 28 51 ff ff       	call   c000c23a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017112:	83 c4 0c             	add    esp,0xc
c0017115:	6a 00                	push   0x0
c0017117:	68 d2 6b 01 c0       	push   0xc0016bd2
c001711c:	6a 0d                	push   0xd
c001711e:	e8 17 51 ff ff       	call   c000c23a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017123:	83 c4 0c             	add    esp,0xc
c0017126:	6a 00                	push   0x0
c0017128:	68 39 6c 01 c0       	push   0xc0016c39
c001712d:	6a 0e                	push   0xe
c001712f:	e8 06 51 ff ff       	call   c000c23a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017134:	83 c4 10             	add    esp,0x10
c0017137:	50                   	push   eax
c0017138:	6a 00                	push   0x0
c001713a:	68 c2 6c 01 c0       	push   0xc0016cc2
c001713f:	53                   	push   ebx
c0017140:	43                   	inc    ebx
c0017141:	e8 f4 50 ff ff       	call   c000c23a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017146:	83 c4 10             	add    esp,0x10
c0017149:	83 fb 1e             	cmp    ebx,0x1e
c001714c:	75 e9                	jne    c0017137 <HalInitialise()+0x137>
c001714e:	50                   	push   eax
c001714f:	6a 00                	push   0x0
c0017151:	68 da 1a 01 c0       	push   0xc0011ada
c0017156:	6a 60                	push   0x60
c0017158:	e8 dd 50 ff ff       	call   c000c23a <installISRHandler(int, void (*)(regs*, void*), void*)>
c001715d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017162:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001716c:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017173:	e8 b7 08 ff ff       	call   c0007a2f <malloc>
c0017178:	89 c3                	mov    ebx,eax
c001717a:	89 04 24             	mov    DWORD PTR [esp],eax
c001717d:	e8 34 09 00 00       	call   c0017ab6 <RTC::RTC()>
c0017182:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001718c:	5a                   	pop    edx
c001718d:	59                   	pop    ecx
c001718e:	53                   	push   ebx
c001718f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017195:	e8 6c 4b ff ff       	call   c000bd06 <Device::addChild(Device*)>
c001719a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001719c:	6a 00                	push   0x0
c001719e:	6a 00                	push   0x0
c00171a0:	6a 00                	push   0x0
c00171a2:	53                   	push   ebx
c00171a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00171a6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00171ab:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00171b1:	83 c4 28             	add    esp,0x28
c00171b4:	5b                   	pop    ebx
c00171b5:	c3                   	ret    

c00171b6 <HalMakeBeep(int)>:
c00171b6:	53                   	push   ebx
c00171b7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00171bb:	85 db                	test   ebx,ebx
c00171bd:	75 07                	jne    c00171c6 <HalMakeBeep(int)+0x10>
c00171bf:	e4 61                	in     al,0x61
c00171c1:	83 e0 fc             	and    eax,0xfffffffc
c00171c4:	eb 26                	jmp    c00171ec <HalMakeBeep(int)+0x36>
c00171c6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00171cb:	99                   	cdq    
c00171cc:	f7 fb                	idiv   ebx
c00171ce:	89 c1                	mov    ecx,eax
c00171d0:	b0 b6                	mov    al,0xb6
c00171d2:	e6 43                	out    0x43,al
c00171d4:	88 c8                	mov    al,cl
c00171d6:	e6 42                	out    0x42,al
c00171d8:	89 c8                	mov    eax,ecx
c00171da:	c1 e8 08             	shr    eax,0x8
c00171dd:	e6 42                	out    0x42,al
c00171df:	e4 61                	in     al,0x61
c00171e1:	89 c2                	mov    edx,eax
c00171e3:	83 ca 03             	or     edx,0x3
c00171e6:	38 d0                	cmp    al,dl
c00171e8:	74 04                	je     c00171ee <HalMakeBeep(int)+0x38>
c00171ea:	88 d0                	mov    al,dl
c00171ec:	e6 61                	out    0x61,al
c00171ee:	5b                   	pop    ebx
c00171ef:	c3                   	ret    

c00171f0 <HalGetRand()>:
c00171f0:	31 c0                	xor    eax,eax
c00171f2:	c3                   	ret    

c00171f3 <HalEndOfInterrupt(int)>:
c00171f3:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00171fa:	74 23                	je     c001721f <HalEndOfInterrupt(int)+0x2c>
c00171fc:	83 ec 14             	sub    esp,0x14
c00171ff:	6a 1b                	push   0x1b
c0017201:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017207:	e8 32 fe fe ff       	call   c000703e <Computer::rdmsr(unsigned int)>
c001720c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017211:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001721b:	83 c4 1c             	add    esp,0x1c
c001721e:	c3                   	ret    
c001721f:	e9 40 02 00 00       	jmp    c0017464 <picEOI(int)>

c0017224 <HalRestart()>:
c0017224:	c3                   	ret    

c0017225 <HalShutdown()>:
c0017225:	c3                   	ret    

c0017226 <HalSleep()>:
c0017226:	c3                   	ret    
c0017227:	90                   	nop

c0017228 <picIoWait()>:
c0017228:	eb 00                	jmp    c001722a <picIoWait()+0x2>
c001722a:	eb 00                	jmp    c001722c <picIoWait()+0x4>
c001722c:	90                   	nop
c001722d:	c3                   	ret    
c001722e:	66 90                	xchg   ax,ax

c0017230 <picDisable()>:
c0017230:	83 ec 10             	sub    esp,0x10
c0017233:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001723a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001723f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017243:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017248:	ee                   	out    dx,al
c0017249:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017250:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017255:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017259:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001725e:	ee                   	out    dx,al
c001725f:	90                   	nop
c0017260:	83 c4 10             	add    esp,0x10
c0017263:	c3                   	ret    

c0017264 <picGetIRQReg(int)>:
c0017264:	83 ec 10             	sub    esp,0x10
c0017267:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001726b:	0f b6 c0             	movzx  eax,al
c001726e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017275:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017279:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001727d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017282:	ee                   	out    dx,al
c0017283:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017287:	0f b6 c0             	movzx  eax,al
c001728a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017291:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017295:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017299:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001729e:	ee                   	out    dx,al
c001729f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00172a6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00172ab:	89 c2                	mov    edx,eax
c00172ad:	ec                   	in     al,dx
c00172ae:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00172b2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00172b6:	0f b6 c0             	movzx  eax,al
c00172b9:	c1 e0 08             	shl    eax,0x8
c00172bc:	89 c1                	mov    ecx,eax
c00172be:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00172c5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00172ca:	89 c2                	mov    edx,eax
c00172cc:	ec                   	in     al,dx
c00172cd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00172d1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00172d5:	0f b6 c0             	movzx  eax,al
c00172d8:	09 c8                	or     eax,ecx
c00172da:	83 c4 10             	add    esp,0x10
c00172dd:	c3                   	ret    
c00172de:	66 90                	xchg   ax,ax

c00172e0 <picOpen()>:
c00172e0:	83 ec 50             	sub    esp,0x50
c00172e3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00172ea:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00172ef:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00172f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00172f7:	ee                   	out    dx,al
c00172f8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00172ff:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017304:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017308:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001730c:	ee                   	out    dx,al
c001730d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017315:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001731d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017324:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017328:	89 c2                	mov    edx,eax
c001732a:	ec                   	in     al,dx
c001732b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001732f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017333:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017337:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001733e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017342:	89 c2                	mov    edx,eax
c0017344:	ec                   	in     al,dx
c0017345:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017349:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001734d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017351:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017358:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001735d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017361:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017365:	ee                   	out    dx,al
c0017366:	e8 bd fe ff ff       	call   c0017228 <picIoWait()>
c001736b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017372:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017377:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001737b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001737f:	ee                   	out    dx,al
c0017380:	e8 a3 fe ff ff       	call   c0017228 <picIoWait()>
c0017385:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017389:	0f b6 c0             	movzx  eax,al
c001738c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017393:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017397:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001739b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001739f:	ee                   	out    dx,al
c00173a0:	e8 83 fe ff ff       	call   c0017228 <picIoWait()>
c00173a5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00173a9:	0f b6 c0             	movzx  eax,al
c00173ac:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00173b3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00173b7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00173bb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00173bf:	ee                   	out    dx,al
c00173c0:	e8 63 fe ff ff       	call   c0017228 <picIoWait()>
c00173c5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00173cc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00173d1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00173d5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00173d9:	ee                   	out    dx,al
c00173da:	e8 49 fe ff ff       	call   c0017228 <picIoWait()>
c00173df:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00173e6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00173eb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00173ef:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00173f3:	ee                   	out    dx,al
c00173f4:	e8 2f fe ff ff       	call   c0017228 <picIoWait()>
c00173f9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017400:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017405:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017409:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001740d:	ee                   	out    dx,al
c001740e:	e8 15 fe ff ff       	call   c0017228 <picIoWait()>
c0017413:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001741a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001741f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017423:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017427:	ee                   	out    dx,al
c0017428:	e8 fb fd ff ff       	call   c0017228 <picIoWait()>
c001742d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017432:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017439:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001743d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017441:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017445:	ee                   	out    dx,al
c0017446:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001744b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017452:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017456:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001745a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001745e:	ee                   	out    dx,al
c001745f:	90                   	nop
c0017460:	83 c4 50             	add    esp,0x50
c0017463:	c3                   	ret    

c0017464 <picEOI(int)>:
c0017464:	83 ec 10             	sub    esp,0x10
c0017467:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001746c:	75 1e                	jne    c001748c <picEOI(int)+0x28>
c001746e:	6a 0b                	push   0xb
c0017470:	e8 ef fd ff ff       	call   c0017264 <picGetIRQReg(int)>
c0017475:	83 c4 04             	add    esp,0x4
c0017478:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001747d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0017482:	25 80 00 00 00       	and    eax,0x80
c0017487:	74 73                	je     c00174fc <picEOI(int)+0x98>
c0017489:	8d 76 00             	lea    esi,[esi+0x0]
c001748c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0017491:	75 31                	jne    c00174c4 <picEOI(int)+0x60>
c0017493:	6a 0b                	push   0xb
c0017495:	e8 ca fd ff ff       	call   c0017264 <picGetIRQReg(int)>
c001749a:	83 c4 04             	add    esp,0x4
c001749d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00174a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174a6:	98                   	cwde   
c00174a7:	85 c0                	test   eax,eax
c00174a9:	78 19                	js     c00174c4 <picEOI(int)+0x60>
c00174ab:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00174b2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00174b7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00174bb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00174c0:	ee                   	out    dx,al
c00174c1:	eb 3d                	jmp    c0017500 <picEOI(int)+0x9c>
c00174c3:	90                   	nop
c00174c4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00174c9:	7e 19                	jle    c00174e4 <picEOI(int)+0x80>
c00174cb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00174d2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00174d7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00174db:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00174e0:	ee                   	out    dx,al
c00174e1:	8d 76 00             	lea    esi,[esi+0x0]
c00174e4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00174eb:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00174f0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00174f4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00174f9:	ee                   	out    dx,al
c00174fa:	eb 04                	jmp    c0017500 <picEOI(int)+0x9c>
c00174fc:	90                   	nop
c00174fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017500:	83 c4 10             	add    esp,0x10
c0017503:	c3                   	ret    

c0017504 <RTC::open(int, int, void*)>:
c0017504:	31 c0                	xor    eax,eax
c0017506:	c3                   	ret    
c0017507:	90                   	nop

c0017508 <RTC::close(int, int, void*)>:
c0017508:	31 c0                	xor    eax,eax
c001750a:	c3                   	ret    
c001750b:	90                   	nop

c001750c <RTC::timeInSecondsUTC()>:
c001750c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017510:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017516:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001751c:	c3                   	ret    
c001751d:	90                   	nop

c001751e <RTC::timeInDatetimeUTC()>:
c001751e:	53                   	push   ebx
c001751f:	83 ec 14             	sub    esp,0x14
c0017522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017526:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001752a:	8b 10                	mov    edx,DWORD PTR [eax]
c001752c:	50                   	push   eax
c001752d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017530:	83 c4 0c             	add    esp,0xc
c0017533:	52                   	push   edx
c0017534:	50                   	push   eax
c0017535:	53                   	push   ebx
c0017536:	e8 3f 45 ff ff       	call   c000ba7a <secondsToDatetime(unsigned long long)>
c001753b:	89 d8                	mov    eax,ebx
c001753d:	83 c4 14             	add    esp,0x14
c0017540:	5b                   	pop    ebx
c0017541:	c2 04 00             	ret    0x4

c0017544 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017544:	56                   	push   esi
c0017545:	53                   	push   ebx
c0017546:	83 ec 14             	sub    esp,0x14
c0017549:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001754d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001754f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0017552:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017556:	52                   	push   edx
c0017557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001755b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001755f:	50                   	push   eax
c0017560:	e8 15 45 ff ff       	call   c000ba7a <secondsToDatetime(unsigned long long)>
c0017565:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017569:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001756d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017571:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017575:	89 f0                	mov    eax,esi
c0017577:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001757b:	83 c4 20             	add    esp,0x20
c001757e:	5b                   	pop    ebx
c001757f:	5e                   	pop    esi
c0017580:	ff e0                	jmp    eax

c0017582 <RTC::~RTC()>:
c0017582:	83 ec 0c             	sub    esp,0xc
c0017585:	ba 50 15 02 c0       	mov    edx,0xc0021550
c001758a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001758e:	89 10                	mov    DWORD PTR [eax],edx
c0017590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017594:	83 ec 0c             	sub    esp,0xc
c0017597:	50                   	push   eax
c0017598:	e8 67 42 ff ff       	call   c000b804 <Clock::~Clock()>
c001759d:	83 c4 10             	add    esp,0x10
c00175a0:	90                   	nop
c00175a1:	83 c4 0c             	add    esp,0xc
c00175a4:	c3                   	ret    
c00175a5:	90                   	nop

c00175a6 <RTC::~RTC()>:
c00175a6:	83 ec 0c             	sub    esp,0xc
c00175a9:	83 ec 0c             	sub    esp,0xc
c00175ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175b0:	e8 cd ff ff ff       	call   c0017582 <RTC::~RTC()>
c00175b5:	83 c4 10             	add    esp,0x10
c00175b8:	83 ec 08             	sub    esp,0x8
c00175bb:	68 60 01 00 00       	push   0x160
c00175c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175c4:	e8 da 31 ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c00175c9:	83 c4 10             	add    esp,0x10
c00175cc:	83 c4 0c             	add    esp,0xc
c00175cf:	c3                   	ret    

c00175d0 <RTC::get_update_in_progress_flag()>:
c00175d0:	83 ec 14             	sub    esp,0x14
c00175d3:	6a 0a                	push   0xa
c00175d5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175db:	e8 16 fb fe ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c00175e0:	83 c4 1c             	add    esp,0x1c
c00175e3:	0f b6 c0             	movzx  eax,al
c00175e6:	c1 e8 07             	shr    eax,0x7
c00175e9:	c3                   	ret    

c00175ea <RTC::completeRTCRefresh()>:
c00175ea:	55                   	push   ebp
c00175eb:	57                   	push   edi
c00175ec:	56                   	push   esi
c00175ed:	53                   	push   ebx
c00175ee:	83 ec 3c             	sub    esp,0x3c
c00175f1:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c00175f7:	83 ec 0c             	sub    esp,0xc
c00175fa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00175fe:	e8 cd ff ff ff       	call   c00175d0 <RTC::get_update_in_progress_flag()>
c0017603:	83 c4 10             	add    esp,0x10
c0017606:	84 c0                	test   al,al
c0017608:	74 0e                	je     c0017618 <RTC::completeRTCRefresh()+0x2e>
c001760a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017610:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017616:	73 df                	jae    c00175f7 <RTC::completeRTCRefresh()+0xd>
c0017618:	50                   	push   eax
c0017619:	50                   	push   eax
c001761a:	6a 00                	push   0x0
c001761c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017622:	e8 cf fa fe ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c0017627:	89 c7                	mov    edi,eax
c0017629:	58                   	pop    eax
c001762a:	5a                   	pop    edx
c001762b:	6a 02                	push   0x2
c001762d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017633:	e8 be fa fe ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c0017638:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001763c:	59                   	pop    ecx
c001763d:	5b                   	pop    ebx
c001763e:	6a 04                	push   0x4
c0017640:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017646:	e8 ab fa fe ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c001764b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001764f:	5e                   	pop    esi
c0017650:	5d                   	pop    ebp
c0017651:	6a 07                	push   0x7
c0017653:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017659:	e8 98 fa fe ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c001765e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0017662:	58                   	pop    eax
c0017663:	5a                   	pop    edx
c0017664:	6a 08                	push   0x8
c0017666:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001766c:	e8 85 fa fe ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c0017671:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017675:	59                   	pop    ecx
c0017676:	5b                   	pop    ebx
c0017677:	6a 09                	push   0x9
c0017679:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001767f:	e8 72 fa fe ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c0017684:	0f b6 c0             	movzx  eax,al
c0017687:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001768b:	83 c4 10             	add    esp,0x10
c001768e:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017694:	83 ec 0c             	sub    esp,0xc
c0017697:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001769b:	e8 30 ff ff ff       	call   c00175d0 <RTC::get_update_in_progress_flag()>
c00176a0:	83 c4 10             	add    esp,0x10
c00176a3:	84 c0                	test   al,al
c00176a5:	74 0e                	je     c00176b5 <RTC::completeRTCRefresh()+0xcb>
c00176a7:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00176ad:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c00176b3:	73 df                	jae    c0017694 <RTC::completeRTCRefresh()+0xaa>
c00176b5:	51                   	push   ecx
c00176b6:	51                   	push   ecx
c00176b7:	6a 00                	push   0x0
c00176b9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176bf:	e8 32 fa fe ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c00176c4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00176c8:	5b                   	pop    ebx
c00176c9:	5e                   	pop    esi
c00176ca:	6a 02                	push   0x2
c00176cc:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176d2:	e8 1f fa fe ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c00176d7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00176db:	5d                   	pop    ebp
c00176dc:	58                   	pop    eax
c00176dd:	6a 04                	push   0x4
c00176df:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176e5:	e8 0c fa fe ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c00176ea:	88 c3                	mov    bl,al
c00176ec:	58                   	pop    eax
c00176ed:	5a                   	pop    edx
c00176ee:	6a 07                	push   0x7
c00176f0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176f6:	e8 fb f9 fe ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c00176fb:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00176ff:	59                   	pop    ecx
c0017700:	5e                   	pop    esi
c0017701:	6a 08                	push   0x8
c0017703:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017709:	e8 e8 f9 fe ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c001770e:	5d                   	pop    ebp
c001770f:	89 c6                	mov    esi,eax
c0017711:	58                   	pop    eax
c0017712:	6a 09                	push   0x9
c0017714:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001771a:	e8 d7 f9 fe ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c001771f:	89 f9                	mov    ecx,edi
c0017721:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017725:	83 c4 10             	add    esp,0x10
c0017728:	0f b6 e8             	movzx  ebp,al
c001772b:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001772f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017734:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017738:	74 27                	je     c0017761 <RTC::completeRTCRefresh()+0x177>
c001773a:	89 f0                	mov    eax,esi
c001773c:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0017740:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017744:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017748:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001774c:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0017750:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017754:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017758:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001775c:	e9 2d ff ff ff       	jmp    c001768e <RTC::completeRTCRefresh()+0xa4>
c0017761:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017766:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001776a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001776e:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0017772:	75 c6                	jne    c001773a <RTC::completeRTCRefresh()+0x150>
c0017774:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0017778:	89 f1                	mov    ecx,esi
c001777a:	0f b6 fb             	movzx  edi,bl
c001777d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0017782:	0f b6 c9             	movzx  ecx,cl
c0017785:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0017789:	89 f1                	mov    ecx,esi
c001778b:	0f 94 c2             	sete   dl
c001778e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017792:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017796:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001779a:	0f 94 c0             	sete   al
c001779d:	21 d0                	and    eax,edx
c001779f:	31 d2                	xor    edx,edx
c00177a1:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00177a5:	0f 94 c2             	sete   dl
c00177a8:	85 c2                	test   edx,eax
c00177aa:	74 8e                	je     c001773a <RTC::completeRTCRefresh()+0x150>
c00177ac:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00177b0:	75 88                	jne    c001773a <RTC::completeRTCRefresh()+0x150>
c00177b2:	52                   	push   edx
c00177b3:	52                   	push   edx
c00177b4:	6a 0b                	push   0xb
c00177b6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177bc:	e8 35 f9 fe ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c00177c1:	83 c4 10             	add    esp,0x10
c00177c4:	a8 04                	test   al,0x4
c00177c6:	75 7a                	jne    c0017842 <RTC::completeRTCRefresh()+0x258>
c00177c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177cc:	c1 ef 04             	shr    edi,0x4
c00177cf:	83 e6 0f             	and    esi,0xf
c00177d2:	c1 ed 04             	shr    ebp,0x4
c00177d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00177d9:	6b ed 0a             	imul   ebp,ebp,0xa
c00177dc:	c1 ea 04             	shr    edx,0x4
c00177df:	6b d2 0a             	imul   edx,edx,0xa
c00177e2:	83 e1 0f             	and    ecx,0xf
c00177e5:	01 d1                	add    ecx,edx
c00177e7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00177eb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00177ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00177f3:	c1 ea 04             	shr    edx,0x4
c00177f6:	6b d2 0a             	imul   edx,edx,0xa
c00177f9:	83 e1 0f             	and    ecx,0xf
c00177fc:	01 d1                	add    ecx,edx
c00177fe:	89 fa                	mov    edx,edi
c0017800:	83 e2 07             	and    edx,0x7
c0017803:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017807:	89 d9                	mov    ecx,ebx
c0017809:	83 e3 80             	and    ebx,0xffffff80
c001780c:	6b d2 0a             	imul   edx,edx,0xa
c001780f:	83 e1 0f             	and    ecx,0xf
c0017812:	01 d1                	add    ecx,edx
c0017814:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017818:	09 cb                	or     ebx,ecx
c001781a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001781e:	c1 ea 04             	shr    edx,0x4
c0017821:	6b d2 0a             	imul   edx,edx,0xa
c0017824:	83 e1 0f             	and    ecx,0xf
c0017827:	01 d1                	add    ecx,edx
c0017829:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001782d:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017831:	c1 ea 04             	shr    edx,0x4
c0017834:	6b d2 0a             	imul   edx,edx,0xa
c0017837:	01 d6                	add    esi,edx
c0017839:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001783d:	83 e2 0f             	and    edx,0xf
c0017840:	01 d5                	add    ebp,edx
c0017842:	a8 02                	test   al,0x2
c0017844:	75 15                	jne    c001785b <RTC::completeRTCRefresh()+0x271>
c0017846:	f6 c3 80             	test   bl,0x80
c0017849:	74 10                	je     c001785b <RTC::completeRTCRefresh()+0x271>
c001784b:	83 e3 7f             	and    ebx,0x7f
c001784e:	b9 18 00 00 00       	mov    ecx,0x18
c0017853:	8d 43 0c             	lea    eax,[ebx+0xc]
c0017856:	99                   	cdq    
c0017857:	f7 f9                	idiv   ecx
c0017859:	88 d3                	mov    bl,dl
c001785b:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0017861:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0017867:	77 06                	ja     c001786f <RTC::completeRTCRefresh()+0x285>
c0017869:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001786f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017874:	31 c9                	xor    ecx,ecx
c0017876:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001787a:	31 d2                	xor    edx,edx
c001787c:	89 cd                	mov    ebp,ecx
c001787e:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0017882:	c1 e7 10             	shl    edi,0x10
c0017885:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0017889:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001788f:	c1 e0 10             	shl    eax,0x10
c0017892:	09 c5                	or     ebp,eax
c0017894:	89 e9                	mov    ecx,ebp
c0017896:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001789a:	0f b7 c2             	movzx  eax,dx
c001789d:	09 f8                	or     eax,edi
c001789f:	89 c2                	mov    edx,eax
c00178a1:	50                   	push   eax
c00178a2:	50                   	push   eax
c00178a3:	88 d9                	mov    cl,bl
c00178a5:	51                   	push   ecx
c00178a6:	52                   	push   edx
c00178a7:	e8 47 40 ff ff       	call   c000b8f3 <datetimeToSeconds(datetime_t)>
c00178ac:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00178b0:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00178b6:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00178bc:	83 c4 4c             	add    esp,0x4c
c00178bf:	5b                   	pop    ebx
c00178c0:	5e                   	pop    esi
c00178c1:	5f                   	pop    edi
c00178c2:	5d                   	pop    ebp
c00178c3:	c3                   	ret    

c00178c4 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00178c4:	55                   	push   ebp
c00178c5:	57                   	push   edi
c00178c6:	56                   	push   esi
c00178c7:	53                   	push   ebx
c00178c8:	83 ec 30             	sub    esp,0x30
c00178cb:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00178cf:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00178d3:	6a 00                	push   0x0
c00178d5:	6a 00                	push   0x0
c00178d7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178dd:	e8 2c f9 fe ff       	call   c000720e <Computer::writeCMOS(unsigned char, unsigned char)>
c00178e2:	83 c4 0c             	add    esp,0xc
c00178e5:	6a 00                	push   0x0
c00178e7:	6a 02                	push   0x2
c00178e9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178ef:	e8 1a f9 fe ff       	call   c000720e <Computer::writeCMOS(unsigned char, unsigned char)>
c00178f4:	89 f8                	mov    eax,edi
c00178f6:	89 f9                	mov    ecx,edi
c00178f8:	31 d2                	xor    edx,edx
c00178fa:	0f b6 c4             	movzx  eax,ah
c00178fd:	c1 e9 10             	shr    ecx,0x10
c0017900:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017904:	89 f0                	mov    eax,esi
c0017906:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001790a:	89 f0                	mov    eax,esi
c001790c:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0017910:	0f b6 ec             	movzx  ebp,ah
c0017913:	c1 e8 10             	shr    eax,0x10
c0017916:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001791a:	b9 64 00 00 00       	mov    ecx,0x64
c001791f:	f7 f1                	div    ecx
c0017921:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017925:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0017929:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001792d:	59                   	pop    ecx
c001792e:	5b                   	pop    ebx
c001792f:	6a 0b                	push   0xb
c0017931:	89 fb                	mov    ebx,edi
c0017933:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017939:	e8 b8 f7 fe ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c001793e:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017942:	83 c4 10             	add    esp,0x10
c0017945:	f6 44 24 17 04       	test   BYTE PTR [esp+0x17],0x4
c001794a:	75 6c                	jne    c00179b8 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf4>
c001794c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017950:	31 d2                	xor    edx,edx
c0017952:	0f b6 c1             	movzx  eax,cl
c0017955:	b9 0a 00 00 00       	mov    ecx,0xa
c001795a:	f7 f1                	div    ecx
c001795c:	c1 e0 04             	shl    eax,0x4
c001795f:	09 d0                	or     eax,edx
c0017961:	31 d2                	xor    edx,edx
c0017963:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017967:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001796c:	f7 f1                	div    ecx
c001796e:	c1 e0 04             	shl    eax,0x4
c0017971:	09 d0                	or     eax,edx
c0017973:	31 d2                	xor    edx,edx
c0017975:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017979:	0f b6 c3             	movzx  eax,bl
c001797c:	f7 f1                	div    ecx
c001797e:	c1 e0 04             	shl    eax,0x4
c0017981:	09 d0                	or     eax,edx
c0017983:	31 d2                	xor    edx,edx
c0017985:	89 c3                	mov    ebx,eax
c0017987:	89 f0                	mov    eax,esi
c0017989:	0f b6 c0             	movzx  eax,al
c001798c:	f7 f1                	div    ecx
c001798e:	c1 e0 04             	shl    eax,0x4
c0017991:	09 d0                	or     eax,edx
c0017993:	31 d2                	xor    edx,edx
c0017995:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017999:	89 e8                	mov    eax,ebp
c001799b:	0f b6 c0             	movzx  eax,al
c001799e:	f7 f1                	div    ecx
c00179a0:	c1 e0 04             	shl    eax,0x4
c00179a3:	09 d0                	or     eax,edx
c00179a5:	31 d2                	xor    edx,edx
c00179a7:	89 c5                	mov    ebp,eax
c00179a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179ad:	f7 f1                	div    ecx
c00179af:	c1 e0 04             	shl    eax,0x4
c00179b2:	09 d0                	or     eax,edx
c00179b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179b8:	f6 44 24 17 02       	test   BYTE PTR [esp+0x17],0x2
c00179bd:	75 1e                	jne    c00179dd <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00179bf:	0f b6 c3             	movzx  eax,bl
c00179c2:	83 f8 0b             	cmp    eax,0xb
c00179c5:	76 10                	jbe    c00179d7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x113>
c00179c7:	8d 53 f4             	lea    edx,[ebx-0xc]
c00179ca:	84 d2                	test   dl,dl
c00179cc:	88 d3                	mov    bl,dl
c00179ce:	75 02                	jne    c00179d2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10e>
c00179d0:	b3 0c                	mov    bl,0xc
c00179d2:	83 cb 80             	or     ebx,0xffffff80
c00179d5:	eb 06                	jmp    c00179dd <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00179d7:	85 c0                	test   eax,eax
c00179d9:	75 02                	jne    c00179dd <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00179db:	b3 0c                	mov    bl,0xc
c00179dd:	50                   	push   eax
c00179de:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00179e3:	0f b6 db             	movzx  ebx,bl
c00179e6:	52                   	push   edx
c00179e7:	6a 00                	push   0x0
c00179e9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179ef:	e8 1a f8 fe ff       	call   c000720e <Computer::writeCMOS(unsigned char, unsigned char)>
c00179f4:	83 c4 0c             	add    esp,0xc
c00179f7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00179fc:	50                   	push   eax
c00179fd:	6a 02                	push   0x2
c00179ff:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a05:	e8 04 f8 fe ff       	call   c000720e <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a0a:	83 c4 0c             	add    esp,0xc
c0017a0d:	53                   	push   ebx
c0017a0e:	6a 04                	push   0x4
c0017a10:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a16:	e8 f3 f7 fe ff       	call   c000720e <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a1b:	83 c4 0c             	add    esp,0xc
c0017a1e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017a23:	52                   	push   edx
c0017a24:	6a 07                	push   0x7
c0017a26:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a2c:	e8 dd f7 fe ff       	call   c000720e <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a31:	89 e8                	mov    eax,ebp
c0017a33:	83 c4 0c             	add    esp,0xc
c0017a36:	0f b6 c0             	movzx  eax,al
c0017a39:	50                   	push   eax
c0017a3a:	6a 08                	push   0x8
c0017a3c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a42:	e8 c7 f7 fe ff       	call   c000720e <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a47:	83 c4 0c             	add    esp,0xc
c0017a4a:	0f b6 6c 24 14       	movzx  ebp,BYTE PTR [esp+0x14]
c0017a4f:	55                   	push   ebp
c0017a50:	6a 09                	push   0x9
c0017a52:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a58:	e8 b1 f7 fe ff       	call   c000720e <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a5d:	5a                   	pop    edx
c0017a5e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017a62:	e8 83 fb ff ff       	call   c00175ea <RTC::completeRTCRefresh()>
c0017a67:	83 c4 3c             	add    esp,0x3c
c0017a6a:	b0 01                	mov    al,0x1
c0017a6c:	5b                   	pop    ebx
c0017a6d:	5e                   	pop    esi
c0017a6e:	5f                   	pop    edi
c0017a6f:	5d                   	pop    ebp
c0017a70:	c3                   	ret    

c0017a71 <rtcIRQHandler(regs*, void*)>:
c0017a71:	53                   	push   ebx
c0017a72:	83 ec 10             	sub    esp,0x10
c0017a75:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017a79:	6a 0c                	push   0xc
c0017a7b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a81:	e8 70 f6 fe ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c0017a86:	83 c4 10             	add    esp,0x10
c0017a89:	a8 80                	test   al,0x80
c0017a8b:	74 24                	je     c0017ab1 <rtcIRQHandler(regs*, void*)+0x40>
c0017a8d:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017a94:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017a9b:	66 ff 05 14 82 02 c0 	inc    WORD PTR ds:0xc0028214
c0017aa2:	75 0d                	jne    c0017ab1 <rtcIRQHandler(regs*, void*)+0x40>
c0017aa4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017aa8:	83 c4 08             	add    esp,0x8
c0017aab:	5b                   	pop    ebx
c0017aac:	e9 39 fb ff ff       	jmp    c00175ea <RTC::completeRTCRefresh()>
c0017ab1:	83 c4 08             	add    esp,0x8
c0017ab4:	5b                   	pop    ebx
c0017ab5:	c3                   	ret    

c0017ab6 <RTC::RTC()>:
c0017ab6:	83 ec 1c             	sub    esp,0x1c
c0017ab9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017abd:	83 ec 08             	sub    esp,0x8
c0017ac0:	68 33 15 02 c0       	push   0xc0021533
c0017ac5:	50                   	push   eax
c0017ac6:	e8 03 3d ff ff       	call   c000b7ce <Clock::Clock(char const*)>
c0017acb:	83 c4 10             	add    esp,0x10
c0017ace:	ba 50 15 02 c0       	mov    edx,0xc0021550
c0017ad3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ad7:	89 10                	mov    DWORD PTR [eax],edx
c0017ad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017add:	83 ec 0c             	sub    esp,0xc
c0017ae0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ae4:	6a 01                	push   0x1
c0017ae6:	68 71 7a 01 c0       	push   0xc0017a71
c0017aeb:	6a 08                	push   0x8
c0017aed:	50                   	push   eax
c0017aee:	e8 bf 41 ff ff       	call   c000bcb2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017af3:	83 c4 20             	add    esp,0x20
c0017af6:	89 c2                	mov    edx,eax
c0017af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017afc:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017b02:	fa                   	cli    
c0017b03:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b08:	83 c0 01             	add    eax,0x1
c0017b0b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017b10:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017b15:	83 ec 08             	sub    esp,0x8
c0017b18:	6a 0b                	push   0xb
c0017b1a:	50                   	push   eax
c0017b1b:	e8 d6 f5 fe ff       	call   c00070f6 <Computer::readCMOS(unsigned char)>
c0017b20:	83 c4 10             	add    esp,0x10
c0017b23:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017b27:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c0017b2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017b31:	83 c8 10             	or     eax,0x10
c0017b34:	0f b6 c0             	movzx  eax,al
c0017b37:	83 ec 04             	sub    esp,0x4
c0017b3a:	50                   	push   eax
c0017b3b:	6a 0b                	push   0xb
c0017b3d:	52                   	push   edx
c0017b3e:	e8 cb f6 fe ff       	call   c000720e <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b43:	83 c4 10             	add    esp,0x10
c0017b46:	83 ec 0c             	sub    esp,0xc
c0017b49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b4d:	e8 98 fa ff ff       	call   c00175ea <RTC::completeRTCRefresh()>
c0017b52:	83 c4 10             	add    esp,0x10
c0017b55:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b5a:	83 e8 01             	sub    eax,0x1
c0017b5d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017b62:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b67:	85 c0                	test   eax,eax
c0017b69:	75 01                	jne    c0017b6c <RTC::RTC()+0xb6>
c0017b6b:	fb                   	sti    
c0017b6c:	90                   	nop
c0017b6d:	83 c4 1c             	add    esp,0x1c
c0017b70:	c3                   	ret    
c0017b71:	66 90                	xchg   ax,ax
c0017b73:	90                   	nop

c0017b74 <HalConsoleScroll(int, int)>:
c0017b74:	83 ec 10             	sub    esp,0x10
c0017b77:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017b7f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017b87:	90                   	nop
c0017b88:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017b8d:	0f 8f e1 00 00 00    	jg     c0017c74 <HalConsoleScroll(int, int)+0x100>
c0017b93:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017b9b:	90                   	nop
c0017b9c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017ba4:	0f 8f be 00 00 00    	jg     c0017c68 <HalConsoleScroll(int, int)+0xf4>
c0017baa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bae:	89 d0                	mov    eax,edx
c0017bb0:	c1 e0 02             	shl    eax,0x2
c0017bb3:	01 d0                	add    eax,edx
c0017bb5:	c1 e0 05             	shl    eax,0x5
c0017bb8:	89 c2                	mov    edx,eax
c0017bba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bbe:	01 d0                	add    eax,edx
c0017bc0:	89 c2                	mov    edx,eax
c0017bc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bc6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017bc9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bcd:	89 d0                	mov    eax,edx
c0017bcf:	c1 e0 02             	shl    eax,0x2
c0017bd2:	01 d0                	add    eax,edx
c0017bd4:	c1 e0 05             	shl    eax,0x5
c0017bd7:	89 c2                	mov    edx,eax
c0017bd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bdd:	01 d0                	add    eax,edx
c0017bdf:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017be5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017be9:	01 d0                	add    eax,edx
c0017beb:	8a 11                	mov    dl,BYTE PTR [ecx]
c0017bed:	88 10                	mov    BYTE PTR [eax],dl
c0017bef:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017bf4:	75 66                	jne    c0017c5c <HalConsoleScroll(int, int)+0xe8>
c0017bf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bfa:	83 e0 01             	and    eax,0x1
c0017bfd:	74 39                	je     c0017c38 <HalConsoleScroll(int, int)+0xc4>
c0017bff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c03:	83 e0 0f             	and    eax,0xf
c0017c06:	88 c2                	mov    dl,al
c0017c08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c0c:	c1 e0 04             	shl    eax,0x4
c0017c0f:	09 d0                	or     eax,edx
c0017c11:	88 c1                	mov    cl,al
c0017c13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c17:	89 d0                	mov    eax,edx
c0017c19:	c1 e0 02             	shl    eax,0x2
c0017c1c:	01 d0                	add    eax,edx
c0017c1e:	c1 e0 05             	shl    eax,0x5
c0017c21:	89 c2                	mov    edx,eax
c0017c23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c27:	01 d0                	add    eax,edx
c0017c29:	89 c2                	mov    edx,eax
c0017c2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c2f:	01 d0                	add    eax,edx
c0017c31:	88 ca                	mov    dl,cl
c0017c33:	88 10                	mov    BYTE PTR [eax],dl
c0017c35:	eb 25                	jmp    c0017c5c <HalConsoleScroll(int, int)+0xe8>
c0017c37:	90                   	nop
c0017c38:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c3c:	89 d0                	mov    eax,edx
c0017c3e:	c1 e0 02             	shl    eax,0x2
c0017c41:	01 d0                	add    eax,edx
c0017c43:	c1 e0 05             	shl    eax,0x5
c0017c46:	89 c2                	mov    edx,eax
c0017c48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c4c:	01 d0                	add    eax,edx
c0017c4e:	89 c2                	mov    edx,eax
c0017c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c54:	01 d0                	add    eax,edx
c0017c56:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017c59:	8d 76 00             	lea    esi,[esi+0x0]
c0017c5c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0017c61:	e9 36 ff ff ff       	jmp    c0017b9c <HalConsoleScroll(int, int)+0x28>
c0017c66:	66 90                	xchg   ax,ax
c0017c68:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0017c6d:	e9 16 ff ff ff       	jmp    c0017b88 <HalConsoleScroll(int, int)+0x14>
c0017c72:	66 90                	xchg   ax,ax
c0017c74:	90                   	nop
c0017c75:	83 c4 10             	add    esp,0x10
c0017c78:	c3                   	ret    
c0017c79:	8d 76 00             	lea    esi,[esi+0x0]

c0017c7c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017c7c:	83 ec 14             	sub    esp,0x14
c0017c7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c83:	88 04 24             	mov    BYTE PTR [esp],al
c0017c86:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017c89:	0f b6 c0             	movzx  eax,al
c0017c8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c90:	89 d1                	mov    ecx,edx
c0017c92:	83 e1 0f             	and    ecx,0xf
c0017c95:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c99:	c1 e2 04             	shl    edx,0x4
c0017c9c:	0f b6 d2             	movzx  edx,dl
c0017c9f:	09 ca                	or     edx,ecx
c0017ca1:	c1 e2 08             	shl    edx,0x8
c0017ca4:	09 d0                	or     eax,edx
c0017ca6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017cab:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017cb3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cb7:	89 d0                	mov    eax,edx
c0017cb9:	c1 e0 02             	shl    eax,0x2
c0017cbc:	01 d0                	add    eax,edx
c0017cbe:	c1 e0 04             	shl    eax,0x4
c0017cc1:	89 c2                	mov    edx,eax
c0017cc3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017cc7:	01 d0                	add    eax,edx
c0017cc9:	d1 e0                	shl    eax,1
c0017ccb:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017ccf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cd3:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0017cd8:	66 89 10             	mov    WORD PTR [eax],dx
c0017cdb:	90                   	nop
c0017cdc:	83 c4 14             	add    esp,0x14
c0017cdf:	c3                   	ret    

c0017ce0 <HalConsoleCursorUpdate(int, int)>:
c0017ce0:	83 ec 20             	sub    esp,0x20
c0017ce3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ce7:	89 c2                	mov    edx,eax
c0017ce9:	89 d0                	mov    eax,edx
c0017ceb:	c1 e0 02             	shl    eax,0x2
c0017cee:	01 d0                	add    eax,edx
c0017cf0:	c1 e0 04             	shl    eax,0x4
c0017cf3:	89 c2                	mov    edx,eax
c0017cf5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017cf9:	01 d0                	add    eax,edx
c0017cfb:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017d00:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017d07:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017d0c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017d10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017d14:	ee                   	out    dx,al
c0017d15:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017d1a:	0f b6 c0             	movzx  eax,al
c0017d1d:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017d24:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017d28:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017d2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d30:	ee                   	out    dx,al
c0017d31:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017d38:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017d3d:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017d41:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d45:	ee                   	out    dx,al
c0017d46:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017d4b:	c1 e8 08             	shr    eax,0x8
c0017d4e:	0f b6 c0             	movzx  eax,al
c0017d51:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017d58:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017d5c:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017d60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d64:	ee                   	out    dx,al
c0017d65:	90                   	nop
c0017d66:	83 c4 20             	add    esp,0x20
c0017d69:	c3                   	ret    
c0017d6a:	66 90                	xchg   ax,ax

c0017d6c <FAT::getName()>:
c0017d6c:	b8 84 15 02 c0       	mov    eax,0xc0021584
c0017d71:	c3                   	ret    
c0017d72:	66 90                	xchg   ax,ax

c0017d74 <FAT::tell(void*, unsigned long long*)>:
c0017d74:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017d79:	75 09                	jne    c0017d84 <FAT::tell(void*, unsigned long long*)+0x10>
c0017d7b:	b8 04 00 00 00       	mov    eax,0x4
c0017d80:	c3                   	ret    
c0017d81:	8d 76 00             	lea    esi,[esi+0x0]
c0017d84:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017d89:	75 09                	jne    c0017d94 <FAT::tell(void*, unsigned long long*)+0x20>
c0017d8b:	b8 04 00 00 00       	mov    eax,0x4
c0017d90:	c3                   	ret    
c0017d91:	8d 76 00             	lea    esi,[esi+0x0]
c0017d94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d98:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017d9b:	ba 00 00 00 00       	mov    edx,0x0
c0017da0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017da4:	89 01                	mov    DWORD PTR [ecx],eax
c0017da6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017da9:	b8 00 00 00 00       	mov    eax,0x0
c0017dae:	c3                   	ret    
c0017daf:	90                   	nop

c0017db0 <FAT::stat(void*, unsigned long long*)>:
c0017db0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017db5:	75 09                	jne    c0017dc0 <FAT::stat(void*, unsigned long long*)+0x10>
c0017db7:	b8 04 00 00 00       	mov    eax,0x4
c0017dbc:	c3                   	ret    
c0017dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0017dc0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017dc5:	75 09                	jne    c0017dd0 <FAT::stat(void*, unsigned long long*)+0x20>
c0017dc7:	b8 04 00 00 00       	mov    eax,0x4
c0017dcc:	c3                   	ret    
c0017dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0017dd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017dd4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017dd7:	ba 00 00 00 00       	mov    edx,0x0
c0017ddc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017de0:	89 01                	mov    DWORD PTR [ecx],eax
c0017de2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017de5:	b8 00 00 00 00       	mov    eax,0x0
c0017dea:	c3                   	ret    
c0017deb:	90                   	nop

c0017dec <FAT::~FAT()>:
c0017dec:	83 ec 0c             	sub    esp,0xc
c0017def:	ba d0 15 02 c0       	mov    edx,0xc00215d0
c0017df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017df8:	89 10                	mov    DWORD PTR [eax],edx
c0017dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dfe:	83 ec 0c             	sub    esp,0xc
c0017e01:	50                   	push   eax
c0017e02:	e8 e1 2d ff ff       	call   c000abe8 <Filesystem::~Filesystem()>
c0017e07:	83 c4 10             	add    esp,0x10
c0017e0a:	90                   	nop
c0017e0b:	83 c4 0c             	add    esp,0xc
c0017e0e:	c3                   	ret    
c0017e0f:	90                   	nop

c0017e10 <FAT::~FAT()>:
c0017e10:	83 ec 0c             	sub    esp,0xc
c0017e13:	83 ec 0c             	sub    esp,0xc
c0017e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e1a:	e8 cd ff ff ff       	call   c0017dec <FAT::~FAT()>
c0017e1f:	83 c4 10             	add    esp,0x10
c0017e22:	83 ec 08             	sub    esp,0x8
c0017e25:	6a 08                	push   0x8
c0017e27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e2b:	e8 73 29 ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c0017e30:	83 c4 10             	add    esp,0x10
c0017e33:	83 c4 0c             	add    esp,0xc
c0017e36:	c3                   	ret    
c0017e37:	90                   	nop

c0017e38 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017e38:	83 ec 1c             	sub    esp,0x1c
c0017e3b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017e42:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017e47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e4b:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017e52:	83 f8 ff             	cmp    eax,0xffffffff
c0017e55:	75 35                	jne    c0017e8c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017e57:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e5b:	88 c2                	mov    dl,al
c0017e5d:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017e62:	01 d0                	add    eax,edx
c0017e64:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017e68:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017e6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e72:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017e79:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017e7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e82:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017e89:	eb 19                	jmp    c0017ea4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017e8b:	90                   	nop
c0017e8c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e90:	88 c2                	mov    dl,al
c0017e92:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e96:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017e9d:	01 d0                	add    eax,edx
c0017e9f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017ea3:	90                   	nop
c0017ea4:	83 ec 04             	sub    esp,0x4
c0017ea7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017eab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017eaf:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017eb3:	50                   	push   eax
c0017eb4:	e8 b6 d0 fe ff       	call   c0004f6f <f_getlabel>
c0017eb9:	83 c4 10             	add    esp,0x10
c0017ebc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ec0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017ec5:	75 09                	jne    c0017ed0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017ec7:	b8 00 00 00 00       	mov    eax,0x0
c0017ecc:	eb 0a                	jmp    c0017ed8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0017ece:	66 90                	xchg   ax,ax
c0017ed0:	b8 01 00 00 00       	mov    eax,0x1
c0017ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ed8:	83 c4 1c             	add    esp,0x1c
c0017edb:	c3                   	ret    

c0017edc <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017edc:	57                   	push   edi
c0017edd:	83 ec 58             	sub    esp,0x58
c0017ee0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017ee8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017eec:	b8 00 00 00 00       	mov    eax,0x0
c0017ef1:	b9 0f 00 00 00       	mov    ecx,0xf
c0017ef6:	fc                   	cld    
c0017ef7:	89 d7                	mov    edi,edx
c0017ef9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0017efb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017eff:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f06:	83 f8 ff             	cmp    eax,0xffffffff
c0017f09:	75 35                	jne    c0017f40 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0017f0b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017f0f:	88 c2                	mov    dl,al
c0017f11:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f16:	01 d0                	add    eax,edx
c0017f18:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f1c:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017f22:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f26:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017f2d:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f32:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0017f36:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017f3d:	eb 19                	jmp    c0017f58 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0017f3f:	90                   	nop
c0017f40:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017f44:	88 c2                	mov    dl,al
c0017f46:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f4a:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f51:	01 d0                	add    eax,edx
c0017f53:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f57:	90                   	nop
c0017f58:	83 ec 08             	sub    esp,0x8
c0017f5b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0017f5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017f63:	50                   	push   eax
c0017f64:	e8 57 88 fe ff       	call   c00007c0 <strcat>
c0017f69:	83 c4 10             	add    esp,0x10
c0017f6c:	83 ec 0c             	sub    esp,0xc
c0017f6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017f73:	50                   	push   eax
c0017f74:	e8 4b d1 fe ff       	call   c00050c4 <f_setlabel>
c0017f79:	83 c4 10             	add    esp,0x10
c0017f7c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017f80:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0017f85:	75 09                	jne    c0017f90 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0017f87:	b8 00 00 00 00       	mov    eax,0x0
c0017f8c:	eb 0a                	jmp    c0017f98 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0017f8e:	66 90                	xchg   ax,ax
c0017f90:	b8 01 00 00 00       	mov    eax,0x1
c0017f95:	8d 76 00             	lea    esi,[esi+0x0]
c0017f98:	83 c4 58             	add    esp,0x58
c0017f9b:	5f                   	pop    edi
c0017f9c:	c3                   	ret    
c0017f9d:	90                   	nop
c0017f9e:	66 90                	xchg   ax,ax

c0017fa0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0017fa0:	83 ec 2c             	sub    esp,0x2c
c0017fa3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017fab:	83 ec 08             	sub    esp,0x8
c0017fae:	68 a8 15 02 c0       	push   0xc00215a8
c0017fb3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017fb7:	e8 14 87 fe ff       	call   c00006d0 <strcmp>
c0017fbc:	83 c4 10             	add    esp,0x10
c0017fbf:	85 c0                	test   eax,eax
c0017fc1:	0f 94 c0             	sete   al
c0017fc4:	0f b6 c0             	movzx  eax,al
c0017fc7:	85 c0                	test   eax,eax
c0017fc9:	74 0d                	je     c0017fd8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0017fcb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017fd3:	e9 c0 00 00 00       	jmp    c0018098 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0017fd8:	83 ec 08             	sub    esp,0x8
c0017fdb:	68 9a 15 02 c0       	push   0xc002159a
c0017fe0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017fe4:	e8 e7 86 fe ff       	call   c00006d0 <strcmp>
c0017fe9:	83 c4 10             	add    esp,0x10
c0017fec:	85 c0                	test   eax,eax
c0017fee:	0f 94 c0             	sete   al
c0017ff1:	0f b6 c0             	movzx  eax,al
c0017ff4:	85 c0                	test   eax,eax
c0017ff6:	74 10                	je     c0018008 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0017ff8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018000:	e9 93 00 00 00       	jmp    c0018098 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018005:	8d 76 00             	lea    esi,[esi+0x0]
c0018008:	83 ec 08             	sub    esp,0x8
c001800b:	68 a0 15 02 c0       	push   0xc00215a0
c0018010:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018014:	e8 b7 86 fe ff       	call   c00006d0 <strcmp>
c0018019:	83 c4 10             	add    esp,0x10
c001801c:	85 c0                	test   eax,eax
c001801e:	0f 94 c0             	sete   al
c0018021:	0f b6 c0             	movzx  eax,al
c0018024:	85 c0                	test   eax,eax
c0018026:	74 0c                	je     c0018034 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018028:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018030:	eb 66                	jmp    c0018098 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018032:	66 90                	xchg   ax,ax
c0018034:	83 ec 08             	sub    esp,0x8
c0018037:	68 5c f3 01 c0       	push   0xc001f35c
c001803c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018040:	e8 8b 86 fe ff       	call   c00006d0 <strcmp>
c0018045:	83 c4 10             	add    esp,0x10
c0018048:	85 c0                	test   eax,eax
c001804a:	0f 94 c0             	sete   al
c001804d:	0f b6 c0             	movzx  eax,al
c0018050:	85 c0                	test   eax,eax
c0018052:	74 0c                	je     c0018060 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018054:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001805c:	eb 3a                	jmp    c0018098 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001805e:	66 90                	xchg   ax,ax
c0018060:	83 ec 08             	sub    esp,0x8
c0018063:	68 a6 15 02 c0       	push   0xc00215a6
c0018068:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001806c:	e8 5f 86 fe ff       	call   c00006d0 <strcmp>
c0018071:	83 c4 10             	add    esp,0x10
c0018074:	85 c0                	test   eax,eax
c0018076:	0f 94 c0             	sete   al
c0018079:	0f b6 c0             	movzx  eax,al
c001807c:	85 c0                	test   eax,eax
c001807e:	74 0c                	je     c001808c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018080:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018088:	eb 0e                	jmp    c0018098 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001808a:	66 90                	xchg   ax,ax
c001808c:	b8 08 00 00 00       	mov    eax,0x8
c0018091:	e9 ea 00 00 00       	jmp    c0018180 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018096:	66 90                	xchg   ax,ax
c0018098:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001809f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00180a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00180a8:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00180af:	83 f8 ff             	cmp    eax,0xffffffff
c00180b2:	75 34                	jne    c00180e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00180b4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00180b8:	88 c2                	mov    dl,al
c00180ba:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00180bf:	01 d0                	add    eax,edx
c00180c1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00180c5:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c00180cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00180cf:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00180d6:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00180db:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00180df:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c00180e6:	eb 18                	jmp    c0018100 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00180e8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00180ec:	88 c2                	mov    dl,al
c00180ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00180f2:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00180f9:	01 d0                	add    eax,edx
c00180fb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00180ff:	90                   	nop
c0018100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018104:	88 04 24             	mov    BYTE PTR [esp],al
c0018107:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001810b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001810f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018117:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001811c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018124:	83 ec 0c             	sub    esp,0xc
c0018127:	68 00 20 00 00       	push   0x2000
c001812c:	e8 fe f8 fe ff       	call   c0007a2f <malloc>
c0018131:	83 c4 10             	add    esp,0x10
c0018134:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018138:	68 00 20 00 00       	push   0x2000
c001813d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018141:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018145:	50                   	push   eax
c0018146:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001814a:	50                   	push   eax
c001814b:	e8 71 d2 fe ff       	call   c00053c1 <f_mkfs>
c0018150:	83 c4 10             	add    esp,0x10
c0018153:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018157:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001815c:	75 0a                	jne    c0018168 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001815e:	b8 00 00 00 00       	mov    eax,0x0
c0018163:	eb 1b                	jmp    c0018180 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018165:	8d 76 00             	lea    esi,[esi+0x0]
c0018168:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001816d:	75 09                	jne    c0018178 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001816f:	b8 09 00 00 00       	mov    eax,0x9
c0018174:	eb 0a                	jmp    c0018180 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018176:	66 90                	xchg   ax,ax
c0018178:	b8 01 00 00 00       	mov    eax,0x1
c001817d:	8d 76 00             	lea    esi,[esi+0x0]
c0018180:	83 c4 2c             	add    esp,0x2c
c0018183:	c3                   	ret    

c0018184 <FAT::tryMount(LogicalDisk*, int)>:
c0018184:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001818a:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001818f:	83 f8 14             	cmp    eax,0x14
c0018192:	75 18                	jne    c00181ac <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018194:	83 ec 0c             	sub    esp,0xc
c0018197:	68 ac 15 02 c0       	push   0xc00215ac
c001819c:	e8 66 86 ff ff       	call   c0010807 <KePanic(char const*)>
c00181a1:	83 c4 10             	add    esp,0x10
c00181a4:	b0 00                	mov    al,0x0
c00181a6:	e9 ed 01 00 00       	jmp    c0018398 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00181ab:	90                   	nop
c00181ac:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00181b3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00181b9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00181bf:	3d 00 02 00 00       	cmp    eax,0x200
c00181c4:	74 0a                	je     c00181d0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00181c6:	b0 00                	mov    al,0x0
c00181c8:	e9 cb 01 00 00       	jmp    c0018398 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00181cd:	8d 76 00             	lea    esi,[esi+0x0]
c00181d0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00181d8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00181df:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00181e6:	83 f8 ff             	cmp    eax,0xffffffff
c00181e9:	74 09                	je     c00181f4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00181eb:	b0 01                	mov    al,0x1
c00181ed:	e9 a6 01 00 00       	jmp    c0018398 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00181f2:	66 90                	xchg   ax,ax
c00181f4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00181fe:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018206:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001820d:	88 c2                	mov    dl,al
c001820f:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018214:	01 d0                	add    eax,edx
c0018216:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001821d:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018223:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001822a:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018231:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018236:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001823d:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018244:	83 ec 0c             	sub    esp,0xc
c0018247:	68 34 02 00 00       	push   0x234
c001824c:	e8 de f7 fe ff       	call   c0007a2f <malloc>
c0018251:	83 c4 10             	add    esp,0x10
c0018254:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001825b:	83 ec 04             	sub    esp,0x4
c001825e:	6a 00                	push   0x0
c0018260:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018267:	50                   	push   eax
c0018268:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001826f:	e8 43 b9 fe ff       	call   c0003bb7 <f_mount>
c0018274:	83 c4 10             	add    esp,0x10
c0018277:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001827e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018286:	74 1c                	je     c00182a4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018288:	83 ec 0c             	sub    esp,0xc
c001828b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018292:	e8 b8 f7 fe ff       	call   c0007a4f <rfree>
c0018297:	83 c4 10             	add    esp,0x10
c001829a:	b0 00                	mov    al,0x0
c001829c:	e9 f7 00 00 00       	jmp    c0018398 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00182a1:	8d 76 00             	lea    esi,[esi+0x0]
c00182a4:	83 ec 04             	sub    esp,0x4
c00182a7:	68 00 01 00 00       	push   0x100
c00182ac:	6a 00                	push   0x0
c00182ae:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00182b5:	50                   	push   eax
c00182b6:	e8 35 82 fe ff       	call   c00004f0 <memset>
c00182bb:	83 c4 10             	add    esp,0x10
c00182be:	83 ec 08             	sub    esp,0x8
c00182c1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00182c8:	50                   	push   eax
c00182c9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00182d0:	50                   	push   eax
c00182d1:	e8 ea 84 fe ff       	call   c00007c0 <strcat>
c00182d6:	83 c4 10             	add    esp,0x10
c00182d9:	83 ec 08             	sub    esp,0x8
c00182dc:	68 ba 15 02 c0       	push   0xc00215ba
c00182e1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00182e8:	50                   	push   eax
c00182e9:	e8 d2 84 fe ff       	call   c00007c0 <strcat>
c00182ee:	83 c4 10             	add    esp,0x10
c00182f1:	83 ec 04             	sub    esp,0x4
c00182f4:	6a 01                	push   0x1
c00182f6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00182fd:	50                   	push   eax
c00182fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018302:	50                   	push   eax
c0018303:	e8 11 b9 fe ff       	call   c0003c19 <f_open>
c0018308:	83 c4 10             	add    esp,0x10
c001830b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018312:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018319:	85 c0                	test   eax,eax
c001831b:	74 0b                	je     c0018328 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001831d:	78 31                	js     c0018350 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001831f:	83 e8 04             	sub    eax,0x4
c0018322:	83 f8 01             	cmp    eax,0x1
c0018325:	77 29                	ja     c0018350 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018327:	90                   	nop
c0018328:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018330:	83 ec 0c             	sub    esp,0xc
c0018333:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018337:	50                   	push   eax
c0018338:	e8 8f c0 fe ff       	call   c00043cc <f_close>
c001833d:	83 c4 10             	add    esp,0x10
c0018340:	90                   	nop
c0018341:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018349:	85 c0                	test   eax,eax
c001834b:	74 43                	je     c0018390 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001834d:	eb 31                	jmp    c0018380 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001834f:	90                   	nop
c0018350:	83 ec 0c             	sub    esp,0xc
c0018353:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001835a:	e8 f0 f6 fe ff       	call   c0007a4f <rfree>
c001835f:	83 c4 10             	add    esp,0x10
c0018362:	83 ec 04             	sub    esp,0x4
c0018365:	6a 00                	push   0x0
c0018367:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001836e:	50                   	push   eax
c001836f:	6a 00                	push   0x0
c0018371:	e8 41 b8 fe ff       	call   c0003bb7 <f_mount>
c0018376:	83 c4 10             	add    esp,0x10
c0018379:	b0 00                	mov    al,0x0
c001837b:	eb 1b                	jmp    c0018398 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001837d:	8d 76 00             	lea    esi,[esi+0x0]
c0018380:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018385:	83 c0 01             	add    eax,0x1
c0018388:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c001838d:	8d 76 00             	lea    esi,[esi+0x0]
c0018390:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018397:	90                   	nop
c0018398:	81 c4 4c 03 00 00    	add    esp,0x34c
c001839e:	c3                   	ret    
c001839f:	90                   	nop

c00183a0 <FAT::allocateSwapfile(char const*, int)>:
c00183a0:	55                   	push   ebp
c00183a1:	57                   	push   edi
c00183a2:	56                   	push   esi
c00183a3:	53                   	push   ebx
c00183a4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00183aa:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00183b5:	83 ec 0c             	sub    esp,0xc
c00183b8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00183bf:	e8 6b f6 fe ff       	call   c0007a2f <malloc>
c00183c4:	83 c4 10             	add    esp,0x10
c00183c7:	89 c7                	mov    edi,eax
c00183c9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00183ce:	83 ec 04             	sub    esp,0x4
c00183d1:	50                   	push   eax
c00183d2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00183d9:	57                   	push   edi
c00183da:	e8 6b 2a ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c00183df:	83 c4 10             	add    esp,0x10
c00183e2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00183e9:	83 ec 04             	sub    esp,0x4
c00183ec:	8d 44 24 13          	lea    eax,[esp+0x13]
c00183f0:	50                   	push   eax
c00183f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00183f5:	50                   	push   eax
c00183f6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00183fd:	e8 b0 2d ff ff       	call   c000b1b2 <File::stat(unsigned long long*, bool*)>
c0018402:	83 c4 10             	add    esp,0x10
c0018405:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001840c:	c1 e0 14             	shl    eax,0x14
c001840f:	89 c2                	mov    edx,eax
c0018411:	c1 fa 1f             	sar    edx,0x1f
c0018414:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0018418:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001841c:	89 c1                	mov    ecx,eax
c001841e:	31 f9                	xor    ecx,edi
c0018420:	89 cb                	mov    ebx,ecx
c0018422:	89 d0                	mov    eax,edx
c0018424:	31 e8                	xor    eax,ebp
c0018426:	89 c6                	mov    esi,eax
c0018428:	89 f0                	mov    eax,esi
c001842a:	09 d8                	or     eax,ebx
c001842c:	0f 84 9a 00 00 00    	je     c00184cc <FAT::allocateSwapfile(char const*, int)+0x12c>
c0018432:	83 ec 0c             	sub    esp,0xc
c0018435:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001843c:	e8 3d 2c ff ff       	call   c000b07e <File::unlink()>
c0018441:	83 c4 10             	add    esp,0x10
c0018444:	83 ec 08             	sub    esp,0x8
c0018447:	6a 12                	push   0x12
c0018449:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018450:	e8 b1 2a ff ff       	call   c000af06 <File::open(FileOpenMode)>
c0018455:	83 c4 10             	add    esp,0x10
c0018458:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001845f:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018465:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001846c:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018473:	c1 e0 14             	shl    eax,0x14
c0018476:	83 ec 04             	sub    esp,0x4
c0018479:	6a 01                	push   0x1
c001847b:	50                   	push   eax
c001847c:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0018483:	e8 cc cd fe ff       	call   c0005254 <f_expand>
c0018488:	83 c4 10             	add    esp,0x10
c001848b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018492:	8b 00                	mov    eax,DWORD PTR [eax]
c0018494:	83 c0 10             	add    eax,0x10
c0018497:	8b 10                	mov    edx,DWORD PTR [eax]
c0018499:	83 ec 0c             	sub    esp,0xc
c001849c:	8d 44 24 24          	lea    eax,[esp+0x24]
c00184a0:	50                   	push   eax
c00184a1:	8d 44 24 30          	lea    eax,[esp+0x30]
c00184a5:	50                   	push   eax
c00184a6:	6a 00                	push   0x0
c00184a8:	68 00 04 00 00       	push   0x400
c00184ad:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00184b4:	ff d2                	call   edx
c00184b6:	83 c4 20             	add    esp,0x20
c00184b9:	83 ec 0c             	sub    esp,0xc
c00184bc:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184c3:	e8 9c 2a ff ff       	call   c000af64 <File::close()>
c00184c8:	83 c4 10             	add    esp,0x10
c00184cb:	90                   	nop
c00184cc:	83 ec 08             	sub    esp,0x8
c00184cf:	6a 01                	push   0x1
c00184d1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184d8:	e8 29 2a ff ff       	call   c000af06 <File::open(FileOpenMode)>
c00184dd:	83 c4 10             	add    esp,0x10
c00184e0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00184e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00184e9:	83 c0 0c             	add    eax,0xc
c00184ec:	8b 10                	mov    edx,DWORD PTR [eax]
c00184ee:	83 ec 0c             	sub    esp,0xc
c00184f1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00184f5:	50                   	push   eax
c00184f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00184fa:	50                   	push   eax
c00184fb:	6a 00                	push   0x0
c00184fd:	6a 04                	push   0x4
c00184ff:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018506:	ff d2                	call   edx
c0018508:	83 c4 20             	add    esp,0x20
c001850b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018512:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018518:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001851f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0018526:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018529:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0018530:	83 ec 0c             	sub    esp,0xc
c0018533:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001853a:	e8 25 2a ff ff       	call   c000af64 <File::close()>
c001853f:	83 c4 10             	add    esp,0x10
c0018542:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0018549:	ba 00 00 00 00       	mov    edx,0x0
c001854e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0018554:	5b                   	pop    ebx
c0018555:	5e                   	pop    esi
c0018556:	5f                   	pop    edi
c0018557:	5d                   	pop    ebp
c0018558:	c3                   	ret    
c0018559:	90                   	nop
c001855a:	66 90                	xchg   ax,ax

c001855c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001855c:	57                   	push   edi
c001855d:	56                   	push   esi
c001855e:	53                   	push   ebx
c001855f:	81 ec 50 02 00 00    	sub    esp,0x250
c0018565:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001856d:	74 0d                	je     c001857c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001856f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0018577:	75 0f                	jne    c0018588 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0018579:	8d 76 00             	lea    esi,[esi+0x0]
c001857c:	b8 04 00 00 00       	mov    eax,0x4
c0018581:	e9 3a 01 00 00       	jmp    c00186c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018586:	66 90                	xchg   ax,ax
c0018588:	83 ec 08             	sub    esp,0x8
c001858b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018592:	50                   	push   eax
c0018593:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001859a:	e8 f9 c0 fe ff       	call   c0004698 <f_readdir>
c001859f:	83 c4 10             	add    esp,0x10
c00185a2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00185a9:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00185b0:	83 ec 0c             	sub    esp,0xc
c00185b3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00185ba:	83 c0 16             	add    eax,0x16
c00185bd:	50                   	push   eax
c00185be:	e8 5d 7f fe ff       	call   c0000520 <strlen>
c00185c3:	83 c4 10             	add    esp,0x10
c00185c6:	ba 00 00 00 00       	mov    edx,0x0
c00185cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00185cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00185d3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00185da:	0f b6 c0             	movzx  eax,al
c00185dd:	83 e0 10             	and    eax,0x10
c00185e0:	74 0a                	je     c00185ec <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00185e2:	b8 02 00 00 00       	mov    eax,0x2
c00185e7:	eb 0b                	jmp    c00185f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00185e9:	8d 76 00             	lea    esi,[esi+0x0]
c00185ec:	b8 01 00 00 00       	mov    eax,0x1
c00185f1:	8d 76 00             	lea    esi,[esi+0x0]
c00185f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185f8:	83 ec 08             	sub    esp,0x8
c00185fb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018602:	83 c0 16             	add    eax,0x16
c0018605:	50                   	push   eax
c0018606:	8d 44 24 14          	lea    eax,[esp+0x14]
c001860a:	83 c0 10             	add    eax,0x10
c001860d:	50                   	push   eax
c001860e:	e8 dd 7f fe ff       	call   c00005f0 <strcpy>
c0018613:	83 c4 10             	add    esp,0x10
c0018616:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001861d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0018624:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018628:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001862f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0018636:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001863d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018644:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001864b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018652:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0018659:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0018660:	89 c6                	mov    esi,eax
c0018662:	89 d7                	mov    edi,edx
c0018664:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018666:	89 c8                	mov    eax,ecx
c0018668:	89 fa                	mov    edx,edi
c001866a:	89 f3                	mov    ebx,esi
c001866c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0018673:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001867a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0018681:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018688:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001868e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0018695:	0f be c0             	movsx  eax,al
c0018698:	85 c0                	test   eax,eax
c001869a:	75 08                	jne    c00186a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001869c:	b8 07 00 00 00       	mov    eax,0x7
c00186a1:	eb 1d                	jmp    c00186c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00186a3:	90                   	nop
c00186a4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00186ab:	85 c0                	test   eax,eax
c00186ad:	75 09                	jne    c00186b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00186af:	b8 00 00 00 00       	mov    eax,0x0
c00186b4:	eb 0a                	jmp    c00186c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00186b6:	66 90                	xchg   ax,ax
c00186b8:	b8 01 00 00 00       	mov    eax,0x1
c00186bd:	8d 76 00             	lea    esi,[esi+0x0]
c00186c0:	81 c4 50 02 00 00    	add    esp,0x250
c00186c6:	5b                   	pop    ebx
c00186c7:	5e                   	pop    esi
c00186c8:	5f                   	pop    edi
c00186c9:	c3                   	ret    
c00186ca:	66 90                	xchg   ax,ax

c00186cc <FAT::read(void*, unsigned long, void*, int*)>:
c00186cc:	83 ec 1c             	sub    esp,0x1c
c00186cf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00186d4:	74 0a                	je     c00186e0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00186d6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00186db:	75 0b                	jne    c00186e8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00186dd:	8d 76 00             	lea    esi,[esi+0x0]
c00186e0:	b8 04 00 00 00       	mov    eax,0x4
c00186e5:	eb 41                	jmp    c0018728 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00186e7:	90                   	nop
c00186e8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186ec:	50                   	push   eax
c00186ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00186f5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00186f9:	e8 de b7 fe ff       	call   c0003edc <f_read>
c00186fe:	83 c4 10             	add    esp,0x10
c0018701:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018705:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018709:	89 c2                	mov    edx,eax
c001870b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001870f:	89 10                	mov    DWORD PTR [eax],edx
c0018711:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018715:	85 c0                	test   eax,eax
c0018717:	75 07                	jne    c0018720 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0018719:	b8 00 00 00 00       	mov    eax,0x0
c001871e:	eb 08                	jmp    c0018728 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018720:	b8 01 00 00 00       	mov    eax,0x1
c0018725:	8d 76 00             	lea    esi,[esi+0x0]
c0018728:	83 c4 1c             	add    esp,0x1c
c001872b:	c3                   	ret    

c001872c <FAT::write(void*, unsigned long, void*, int*)>:
c001872c:	83 ec 1c             	sub    esp,0x1c
c001872f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018734:	74 0a                	je     c0018740 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0018736:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001873b:	75 0b                	jne    c0018748 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001873d:	8d 76 00             	lea    esi,[esi+0x0]
c0018740:	b8 04 00 00 00       	mov    eax,0x4
c0018745:	eb 41                	jmp    c0018788 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018747:	90                   	nop
c0018748:	8d 44 24 08          	lea    eax,[esp+0x8]
c001874c:	50                   	push   eax
c001874d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018751:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018755:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018759:	e8 5f b9 fe ff       	call   c00040bd <f_write>
c001875e:	83 c4 10             	add    esp,0x10
c0018761:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018765:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018769:	89 c2                	mov    edx,eax
c001876b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001876f:	89 10                	mov    DWORD PTR [eax],edx
c0018771:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018775:	85 c0                	test   eax,eax
c0018777:	75 07                	jne    c0018780 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0018779:	b8 00 00 00 00       	mov    eax,0x0
c001877e:	eb 08                	jmp    c0018788 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018780:	b8 01 00 00 00       	mov    eax,0x1
c0018785:	8d 76 00             	lea    esi,[esi+0x0]
c0018788:	83 c4 1c             	add    esp,0x1c
c001878b:	c3                   	ret    

c001878c <FAT::close(void*)>:
c001878c:	83 ec 1c             	sub    esp,0x1c
c001878f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018794:	75 0a                	jne    c00187a0 <FAT::close(void*)+0x14>
c0018796:	b8 04 00 00 00       	mov    eax,0x4
c001879b:	eb 3f                	jmp    c00187dc <FAT::close(void*)+0x50>
c001879d:	8d 76 00             	lea    esi,[esi+0x0]
c00187a0:	83 ec 0c             	sub    esp,0xc
c00187a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187a7:	e8 20 bc fe ff       	call   c00043cc <f_close>
c00187ac:	83 c4 10             	add    esp,0x10
c00187af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187b3:	83 ec 0c             	sub    esp,0xc
c00187b6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187ba:	e8 80 f2 fe ff       	call   c0007a3f <free>
c00187bf:	83 c4 10             	add    esp,0x10
c00187c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187c6:	85 c0                	test   eax,eax
c00187c8:	75 0a                	jne    c00187d4 <FAT::close(void*)+0x48>
c00187ca:	b8 00 00 00 00       	mov    eax,0x0
c00187cf:	eb 0b                	jmp    c00187dc <FAT::close(void*)+0x50>
c00187d1:	8d 76 00             	lea    esi,[esi+0x0]
c00187d4:	b8 01 00 00 00       	mov    eax,0x1
c00187d9:	8d 76 00             	lea    esi,[esi+0x0]
c00187dc:	83 c4 1c             	add    esp,0x1c
c00187df:	c3                   	ret    

c00187e0 <FAT::closeDir(void*)>:
c00187e0:	83 ec 1c             	sub    esp,0x1c
c00187e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00187e8:	75 0a                	jne    c00187f4 <FAT::closeDir(void*)+0x14>
c00187ea:	b8 04 00 00 00       	mov    eax,0x4
c00187ef:	eb 3f                	jmp    c0018830 <FAT::closeDir(void*)+0x50>
c00187f1:	8d 76 00             	lea    esi,[esi+0x0]
c00187f4:	83 ec 0c             	sub    esp,0xc
c00187f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187fb:	e8 76 be fe ff       	call   c0004676 <f_closedir>
c0018800:	83 c4 10             	add    esp,0x10
c0018803:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018807:	83 ec 0c             	sub    esp,0xc
c001880a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001880e:	e8 2c f2 fe ff       	call   c0007a3f <free>
c0018813:	83 c4 10             	add    esp,0x10
c0018816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001881a:	85 c0                	test   eax,eax
c001881c:	75 0a                	jne    c0018828 <FAT::closeDir(void*)+0x48>
c001881e:	b8 00 00 00 00       	mov    eax,0x0
c0018823:	eb 0b                	jmp    c0018830 <FAT::closeDir(void*)+0x50>
c0018825:	8d 76 00             	lea    esi,[esi+0x0]
c0018828:	b8 01 00 00 00       	mov    eax,0x1
c001882d:	8d 76 00             	lea    esi,[esi+0x0]
c0018830:	83 c4 1c             	add    esp,0x1c
c0018833:	c3                   	ret    

c0018834 <FAT::seek(void*, unsigned long long)>:
c0018834:	83 ec 2c             	sub    esp,0x2c
c0018837:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001883b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001883f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018843:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018847:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001884c:	75 0a                	jne    c0018858 <FAT::seek(void*, unsigned long long)+0x24>
c001884e:	b8 04 00 00 00       	mov    eax,0x4
c0018853:	eb 33                	jmp    c0018888 <FAT::seek(void*, unsigned long long)+0x54>
c0018855:	8d 76 00             	lea    esi,[esi+0x0]
c0018858:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001885c:	83 ec 08             	sub    esp,0x8
c001885f:	50                   	push   eax
c0018860:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018864:	e8 92 bb fe ff       	call   c00043fb <f_lseek>
c0018869:	83 c4 10             	add    esp,0x10
c001886c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018870:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018874:	85 c0                	test   eax,eax
c0018876:	75 08                	jne    c0018880 <FAT::seek(void*, unsigned long long)+0x4c>
c0018878:	b8 00 00 00 00       	mov    eax,0x0
c001887d:	eb 09                	jmp    c0018888 <FAT::seek(void*, unsigned long long)+0x54>
c001887f:	90                   	nop
c0018880:	b8 01 00 00 00       	mov    eax,0x1
c0018885:	8d 76 00             	lea    esi,[esi+0x0]
c0018888:	83 c4 2c             	add    esp,0x2c
c001888b:	c3                   	ret    

c001888c <fatWrapperReadDisk>:
c001888c:	53                   	push   ebx
c001888d:	83 ec 18             	sub    esp,0x18
c0018890:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018894:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018898:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001889d:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00188a4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00188a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188ac:	ba 00 00 00 00       	mov    edx,0x0
c00188b1:	83 ec 0c             	sub    esp,0xc
c00188b4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188b8:	53                   	push   ebx
c00188b9:	52                   	push   edx
c00188ba:	50                   	push   eax
c00188bb:	51                   	push   ecx
c00188bc:	e8 2d 48 ff ff       	call   c000d0ee <LogicalDisk::read(unsigned long long, int, void*)>
c00188c1:	83 c4 20             	add    esp,0x20
c00188c4:	83 c4 18             	add    esp,0x18
c00188c7:	5b                   	pop    ebx
c00188c8:	c3                   	ret    
c00188c9:	8d 76 00             	lea    esi,[esi+0x0]

c00188cc <fatWrapperWriteDisk>:
c00188cc:	53                   	push   ebx
c00188cd:	83 ec 18             	sub    esp,0x18
c00188d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188d4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00188d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00188dd:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00188e4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00188e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188ec:	ba 00 00 00 00       	mov    edx,0x0
c00188f1:	83 ec 0c             	sub    esp,0xc
c00188f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00188f8:	53                   	push   ebx
c00188f9:	52                   	push   edx
c00188fa:	50                   	push   eax
c00188fb:	51                   	push   ecx
c00188fc:	e8 59 48 ff ff       	call   c000d15a <LogicalDisk::write(unsigned long long, int, void*)>
c0018901:	83 c4 20             	add    esp,0x20
c0018904:	83 c4 18             	add    esp,0x18
c0018907:	5b                   	pop    ebx
c0018908:	c3                   	ret    
c0018909:	8d 76 00             	lea    esi,[esi+0x0]

c001890c <fatWrapperIoctl>:
c001890c:	53                   	push   ebx
c001890d:	83 ec 28             	sub    esp,0x28
c0018910:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018914:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018918:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001891c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018920:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018925:	83 f8 02             	cmp    eax,0x2
c0018928:	75 36                	jne    c0018960 <fatWrapperIoctl+0x54>
c001892a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001892e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018932:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018937:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c001893e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018944:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001894a:	89 c2                	mov    edx,eax
c001894c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018950:	66 89 10             	mov    WORD PTR [eax],dx
c0018953:	b8 00 00 00 00       	mov    eax,0x0
c0018958:	e9 c7 00 00 00       	jmp    c0018a24 <fatWrapperIoctl+0x118>
c001895d:	8d 76 00             	lea    esi,[esi+0x0]
c0018960:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018965:	83 f8 01             	cmp    eax,0x1
c0018968:	75 6a                	jne    c00189d4 <fatWrapperIoctl+0xc8>
c001896a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001896e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018972:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018977:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c001897e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018984:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001898a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018990:	89 c8                	mov    eax,ecx
c0018992:	89 da                	mov    edx,ebx
c0018994:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018998:	c1 e0 0a             	shl    eax,0xa
c001899b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00189a0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c00189a7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00189ad:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00189b3:	89 cb                	mov    ebx,ecx
c00189b5:	c1 fb 1f             	sar    ebx,0x1f
c00189b8:	53                   	push   ebx
c00189b9:	51                   	push   ecx
c00189ba:	52                   	push   edx
c00189bb:	50                   	push   eax
c00189bc:	e8 af 5b 00 00       	call   c001e570 <__udivdi3>
c00189c1:	83 c4 10             	add    esp,0x10
c00189c4:	89 c2                	mov    edx,eax
c00189c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00189ca:	89 10                	mov    DWORD PTR [eax],edx
c00189cc:	b8 00 00 00 00       	mov    eax,0x0
c00189d1:	eb 51                	jmp    c0018a24 <fatWrapperIoctl+0x118>
c00189d3:	90                   	nop
c00189d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189d9:	85 c0                	test   eax,eax
c00189db:	75 07                	jne    c00189e4 <fatWrapperIoctl+0xd8>
c00189dd:	b8 00 00 00 00       	mov    eax,0x0
c00189e2:	eb 40                	jmp    c0018a24 <fatWrapperIoctl+0x118>
c00189e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189e9:	83 f8 03             	cmp    eax,0x3
c00189ec:	75 1a                	jne    c0018a08 <fatWrapperIoctl+0xfc>
c00189ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00189f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00189f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189fa:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018a00:	b8 00 00 00 00       	mov    eax,0x0
c0018a05:	eb 1d                	jmp    c0018a24 <fatWrapperIoctl+0x118>
c0018a07:	90                   	nop
c0018a08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a0d:	83 f8 04             	cmp    eax,0x4
c0018a10:	75 0a                	jne    c0018a1c <fatWrapperIoctl+0x110>
c0018a12:	b8 00 00 00 00       	mov    eax,0x0
c0018a17:	eb 0b                	jmp    c0018a24 <fatWrapperIoctl+0x118>
c0018a19:	8d 76 00             	lea    esi,[esi+0x0]
c0018a1c:	b8 04 00 00 00       	mov    eax,0x4
c0018a21:	8d 76 00             	lea    esi,[esi+0x0]
c0018a24:	83 c4 28             	add    esp,0x28
c0018a27:	5b                   	pop    ebx
c0018a28:	c3                   	ret    
c0018a29:	90                   	nop
c0018a2a:	66 90                	xchg   ax,ax

c0018a2c <FAT::FAT()>:
c0018a2c:	83 ec 1c             	sub    esp,0x1c
c0018a2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a33:	83 ec 0c             	sub    esp,0xc
c0018a36:	50                   	push   eax
c0018a37:	e8 88 21 ff ff       	call   c000abc4 <Filesystem::Filesystem()>
c0018a3c:	83 c4 10             	add    esp,0x10
c0018a3f:	ba d0 15 02 c0       	mov    edx,0xc00215d0
c0018a44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a48:	89 10                	mov    DWORD PTR [eax],edx
c0018a4a:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018a54:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018a5c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018a61:	7f 19                	jg     c0018a7c <FAT::FAT()+0x50>
c0018a63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018a67:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018a72:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018a77:	eb e3                	jmp    c0018a5c <FAT::FAT()+0x30>
c0018a79:	8d 76 00             	lea    esi,[esi+0x0]
c0018a7c:	90                   	nop
c0018a7d:	83 c4 1c             	add    esp,0x1c
c0018a80:	c3                   	ret    
c0018a81:	90                   	nop
c0018a82:	66 90                	xchg   ax,ax

c0018a84 <FAT::fixFilepath(char*)>:
c0018a84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a88:	8a 00                	mov    al,BYTE PTR [eax]
c0018a8a:	0f be c0             	movsx  eax,al
c0018a8d:	83 f8 40             	cmp    eax,0x40
c0018a90:	7e 2e                	jle    c0018ac0 <FAT::fixFilepath(char*)+0x3c>
c0018a92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a96:	8a 00                	mov    al,BYTE PTR [eax]
c0018a98:	83 e8 41             	sub    eax,0x41
c0018a9b:	88 c2                	mov    dl,al
c0018a9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018aa1:	88 10                	mov    BYTE PTR [eax],dl
c0018aa3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018aa7:	8a 00                	mov    al,BYTE PTR [eax]
c0018aa9:	0f be c0             	movsx  eax,al
c0018aac:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018ab3:	83 c0 30             	add    eax,0x30
c0018ab6:	88 c2                	mov    dl,al
c0018ab8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018abc:	88 10                	mov    BYTE PTR [eax],dl
c0018abe:	66 90                	xchg   ax,ax
c0018ac0:	90                   	nop
c0018ac1:	c3                   	ret    
c0018ac2:	66 90                	xchg   ax,ax

c0018ac4 <FAT::open(char const*, void**, FileOpenMode)>:
c0018ac4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018aca:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018ad2:	74 0c                	je     c0018ae0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018ad4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018adc:	75 0e                	jne    c0018aec <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018ade:	66 90                	xchg   ax,ax
c0018ae0:	b8 04 00 00 00       	mov    eax,0x4
c0018ae5:	e9 46 01 00 00       	jmp    c0018c30 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018aea:	66 90                	xchg   ax,ax
c0018aec:	83 ec 08             	sub    esp,0x8
c0018aef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018af6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018afa:	50                   	push   eax
c0018afb:	e8 f0 7a fe ff       	call   c00005f0 <strcpy>
c0018b00:	83 c4 10             	add    esp,0x10
c0018b03:	83 ec 08             	sub    esp,0x8
c0018b06:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018b0a:	50                   	push   eax
c0018b0b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b12:	e8 6d ff ff ff       	call   c0018a84 <FAT::fixFilepath(char*)>
c0018b17:	83 c4 10             	add    esp,0x10
c0018b1a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018b22:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018b29:	83 e0 01             	and    eax,0x1
c0018b2c:	74 12                	je     c0018b40 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018b2e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018b35:	83 c8 01             	or     eax,0x1
c0018b38:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018b3f:	90                   	nop
c0018b40:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018b47:	83 e0 04             	and    eax,0x4
c0018b4a:	74 24                	je     c0018b70 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018b4c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018b53:	83 c8 30             	or     eax,0x30
c0018b56:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018b5d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018b64:	83 c8 02             	or     eax,0x2
c0018b67:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018b6e:	66 90                	xchg   ax,ax
c0018b70:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018b77:	83 e0 02             	and    eax,0x2
c0018b7a:	74 14                	je     c0018b90 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018b7c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018b83:	83 c8 02             	or     eax,0x2
c0018b86:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b90:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018b97:	83 e0 08             	and    eax,0x8
c0018b9a:	74 14                	je     c0018bb0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018b9c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018ba3:	83 c8 04             	or     eax,0x4
c0018ba6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bad:	8d 76 00             	lea    esi,[esi+0x0]
c0018bb0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bb7:	83 e0 10             	and    eax,0x10
c0018bba:	74 14                	je     c0018bd0 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0018bbc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bc3:	83 c8 08             	or     eax,0x8
c0018bc6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0018bd0:	83 ec 0c             	sub    esp,0xc
c0018bd3:	68 28 02 00 00       	push   0x228
c0018bd8:	e8 52 ee fe ff       	call   c0007a2f <malloc>
c0018bdd:	83 c4 10             	add    esp,0x10
c0018be0:	89 c2                	mov    edx,eax
c0018be2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018be9:	89 10                	mov    DWORD PTR [eax],edx
c0018beb:	0f b6 84 24 0f 01 00 00 	movzx  eax,BYTE PTR [esp+0x10f]
c0018bf3:	8b 94 24 28 01 00 00 	mov    edx,DWORD PTR [esp+0x128]
c0018bfa:	8b 12                	mov    edx,DWORD PTR [edx]
c0018bfc:	83 ec 04             	sub    esp,0x4
c0018bff:	50                   	push   eax
c0018c00:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018c04:	50                   	push   eax
c0018c05:	52                   	push   edx
c0018c06:	e8 0e b0 fe ff       	call   c0003c19 <f_open>
c0018c0b:	83 c4 10             	add    esp,0x10
c0018c0e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018c15:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018c1d:	74 09                	je     c0018c28 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0018c1f:	b8 01 00 00 00       	mov    eax,0x1
c0018c24:	eb 0a                	jmp    c0018c30 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018c26:	66 90                	xchg   ax,ax
c0018c28:	b8 00 00 00 00       	mov    eax,0x0
c0018c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c30:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018c36:	c3                   	ret    
c0018c37:	90                   	nop

c0018c38 <FAT::openDir(char const*, void**)>:
c0018c38:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018c3e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018c46:	74 0c                	je     c0018c54 <FAT::openDir(char const*, void**)+0x1c>
c0018c48:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018c50:	75 0e                	jne    c0018c60 <FAT::openDir(char const*, void**)+0x28>
c0018c52:	66 90                	xchg   ax,ax
c0018c54:	b8 04 00 00 00       	mov    eax,0x4
c0018c59:	e9 82 00 00 00       	jmp    c0018ce0 <FAT::openDir(char const*, void**)+0xa8>
c0018c5e:	66 90                	xchg   ax,ax
c0018c60:	83 ec 08             	sub    esp,0x8
c0018c63:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018c6a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018c6e:	50                   	push   eax
c0018c6f:	e8 7c 79 fe ff       	call   c00005f0 <strcpy>
c0018c74:	83 c4 10             	add    esp,0x10
c0018c77:	83 ec 08             	sub    esp,0x8
c0018c7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018c7e:	50                   	push   eax
c0018c7f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018c86:	e8 f9 fd ff ff       	call   c0018a84 <FAT::fixFilepath(char*)>
c0018c8b:	83 c4 10             	add    esp,0x10
c0018c8e:	83 ec 0c             	sub    esp,0xc
c0018c91:	6a 30                	push   0x30
c0018c93:	e8 97 ed fe ff       	call   c0007a2f <malloc>
c0018c98:	83 c4 10             	add    esp,0x10
c0018c9b:	89 c2                	mov    edx,eax
c0018c9d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018ca4:	89 10                	mov    DWORD PTR [eax],edx
c0018ca6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0018caf:	83 ec 08             	sub    esp,0x8
c0018cb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018cb6:	50                   	push   eax
c0018cb7:	52                   	push   edx
c0018cb8:	e8 ee b8 fe ff       	call   c00045ab <f_opendir>
c0018cbd:	83 c4 10             	add    esp,0x10
c0018cc0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018cc7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018ccf:	74 07                	je     c0018cd8 <FAT::openDir(char const*, void**)+0xa0>
c0018cd1:	b8 01 00 00 00       	mov    eax,0x1
c0018cd6:	eb 08                	jmp    c0018ce0 <FAT::openDir(char const*, void**)+0xa8>
c0018cd8:	b8 00 00 00 00       	mov    eax,0x0
c0018cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0018ce0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018ce6:	c3                   	ret    
c0018ce7:	90                   	nop

c0018ce8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018ce8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018cee:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018cf6:	75 0c                	jne    c0018d04 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018cf8:	b8 04 00 00 00       	mov    eax,0x4
c0018cfd:	e9 d6 00 00 00       	jmp    c0018dd8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d02:	66 90                	xchg   ax,ax
c0018d04:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018d0c:	75 0a                	jne    c0018d18 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018d0e:	b8 04 00 00 00       	mov    eax,0x4
c0018d13:	e9 c0 00 00 00       	jmp    c0018dd8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d18:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018d20:	75 0a                	jne    c0018d2c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018d22:	b8 04 00 00 00       	mov    eax,0x4
c0018d27:	e9 ac 00 00 00       	jmp    c0018dd8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d2c:	83 ec 08             	sub    esp,0x8
c0018d2f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018d36:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018d3d:	50                   	push   eax
c0018d3e:	e8 ad 78 fe ff       	call   c00005f0 <strcpy>
c0018d43:	83 c4 10             	add    esp,0x10
c0018d46:	83 ec 08             	sub    esp,0x8
c0018d49:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018d50:	50                   	push   eax
c0018d51:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018d58:	e8 27 fd ff ff       	call   c0018a84 <FAT::fixFilepath(char*)>
c0018d5d:	83 c4 10             	add    esp,0x10
c0018d60:	83 ec 08             	sub    esp,0x8
c0018d63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018d67:	50                   	push   eax
c0018d68:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018d6f:	50                   	push   eax
c0018d70:	e8 b5 b9 fe ff       	call   c000472a <f_stat>
c0018d75:	83 c4 10             	add    esp,0x10
c0018d78:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018d7f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018d86:	85 c0                	test   eax,eax
c0018d88:	74 0a                	je     c0018d94 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018d8a:	83 f8 04             	cmp    eax,0x4
c0018d8d:	74 39                	je     c0018dc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018d8f:	eb 3f                	jmp    c0018dd0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018d91:	8d 76 00             	lea    esi,[esi+0x0]
c0018d94:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018d98:	0f b6 c0             	movzx  eax,al
c0018d9b:	83 e0 10             	and    eax,0x10
c0018d9e:	0f 95 c2             	setne  dl
c0018da1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018da8:	88 10                	mov    BYTE PTR [eax],dl
c0018daa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dae:	ba 00 00 00 00       	mov    edx,0x0
c0018db3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018dba:	89 01                	mov    DWORD PTR [ecx],eax
c0018dbc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018dbf:	b8 00 00 00 00       	mov    eax,0x0
c0018dc4:	eb 12                	jmp    c0018dd8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018dc6:	66 90                	xchg   ax,ax
c0018dc8:	b8 02 00 00 00       	mov    eax,0x2
c0018dcd:	eb 09                	jmp    c0018dd8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018dcf:	90                   	nop
c0018dd0:	b8 01 00 00 00       	mov    eax,0x1
c0018dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0018dd8:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018dde:	c3                   	ret    
c0018ddf:	90                   	nop

c0018de0 <FAT::unlink(char const*)>:
c0018de0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018de6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018dee:	75 08                	jne    c0018df8 <FAT::unlink(char const*)+0x18>
c0018df0:	b8 04 00 00 00       	mov    eax,0x4
c0018df5:	eb 61                	jmp    c0018e58 <FAT::unlink(char const*)+0x78>
c0018df7:	90                   	nop
c0018df8:	83 ec 08             	sub    esp,0x8
c0018dfb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018e02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e06:	50                   	push   eax
c0018e07:	e8 e4 77 fe ff       	call   c00005f0 <strcpy>
c0018e0c:	83 c4 10             	add    esp,0x10
c0018e0f:	83 ec 08             	sub    esp,0x8
c0018e12:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e16:	50                   	push   eax
c0018e17:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018e1e:	e8 61 fc ff ff       	call   c0018a84 <FAT::fixFilepath(char*)>
c0018e23:	83 c4 10             	add    esp,0x10
c0018e26:	83 ec 0c             	sub    esp,0xc
c0018e29:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e2d:	50                   	push   eax
c0018e2e:	e8 69 bb fe ff       	call   c000499c <f_unlink>
c0018e33:	83 c4 10             	add    esp,0x10
c0018e36:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018e3d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018e44:	85 c0                	test   eax,eax
c0018e46:	75 08                	jne    c0018e50 <FAT::unlink(char const*)+0x70>
c0018e48:	b8 00 00 00 00       	mov    eax,0x0
c0018e4d:	eb 09                	jmp    c0018e58 <FAT::unlink(char const*)+0x78>
c0018e4f:	90                   	nop
c0018e50:	b8 01 00 00 00       	mov    eax,0x1
c0018e55:	8d 76 00             	lea    esi,[esi+0x0]
c0018e58:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018e5e:	c3                   	ret    
c0018e5f:	90                   	nop

c0018e60 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018e60:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018e66:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0018e6d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018e74:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018e78:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018e7c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018e84:	75 0a                	jne    c0018e90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0018e86:	b8 04 00 00 00       	mov    eax,0x4
c0018e8b:	e9 7c 01 00 00       	jmp    c001900c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0018e90:	83 ec 08             	sub    esp,0x8
c0018e93:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018e9a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018e9e:	50                   	push   eax
c0018e9f:	e8 4c 77 fe ff       	call   c00005f0 <strcpy>
c0018ea4:	83 c4 10             	add    esp,0x10
c0018ea7:	83 ec 08             	sub    esp,0x8
c0018eaa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018eae:	50                   	push   eax
c0018eaf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018eb6:	e8 c9 fb ff ff       	call   c0018a84 <FAT::fixFilepath(char*)>
c0018ebb:	83 c4 10             	add    esp,0x10
c0018ebe:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018ec6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018ece:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ed3:	83 e0 01             	and    eax,0x1
c0018ed6:	74 14                	je     c0018eec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0018ed8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018edf:	83 c8 01             	or     eax,0x1
c0018ee2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0018eec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ef1:	83 e0 02             	and    eax,0x2
c0018ef4:	74 12                	je     c0018f08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0018ef6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018efd:	83 c8 20             	or     eax,0x20
c0018f00:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f07:	90                   	nop
c0018f08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f0d:	83 e0 04             	and    eax,0x4
c0018f10:	74 12                	je     c0018f24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0018f12:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f19:	83 c8 04             	or     eax,0x4
c0018f1c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f23:	90                   	nop
c0018f24:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f29:	83 e0 08             	and    eax,0x8
c0018f2c:	74 12                	je     c0018f40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0018f2e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f35:	83 c8 02             	or     eax,0x2
c0018f38:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f3f:	90                   	nop
c0018f40:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018f45:	83 e0 01             	and    eax,0x1
c0018f48:	74 12                	je     c0018f5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0018f4a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018f51:	83 c8 01             	or     eax,0x1
c0018f54:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018f5b:	90                   	nop
c0018f5c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018f61:	83 e0 02             	and    eax,0x2
c0018f64:	74 12                	je     c0018f78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0018f66:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018f6d:	83 c8 20             	or     eax,0x20
c0018f70:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018f77:	90                   	nop
c0018f78:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018f7d:	83 e0 04             	and    eax,0x4
c0018f80:	74 12                	je     c0018f94 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0018f82:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018f89:	83 c8 04             	or     eax,0x4
c0018f8c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018f93:	90                   	nop
c0018f94:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018f99:	83 e0 08             	and    eax,0x8
c0018f9c:	74 12                	je     c0018fb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0018f9e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018fa5:	83 c8 02             	or     eax,0x2
c0018fa8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018faf:	90                   	nop
c0018fb0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0018fb7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fbe:	09 d0                	or     eax,edx
c0018fc0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018fc7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0018fcf:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0018fd7:	83 ec 04             	sub    esp,0x4
c0018fda:	52                   	push   edx
c0018fdb:	50                   	push   eax
c0018fdc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018fe0:	50                   	push   eax
c0018fe1:	e8 29 be fe ff       	call   c0004e0f <f_chmod>
c0018fe6:	83 c4 10             	add    esp,0x10
c0018fe9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0018ff0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0018ff7:	85 c0                	test   eax,eax
c0018ff9:	75 09                	jne    c0019004 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0018ffb:	b8 00 00 00 00       	mov    eax,0x0
c0019000:	eb 0a                	jmp    c001900c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019002:	66 90                	xchg   ax,ax
c0019004:	b8 01 00 00 00       	mov    eax,0x1
c0019009:	8d 76 00             	lea    esi,[esi+0x0]
c001900c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019012:	c3                   	ret    
c0019013:	90                   	nop

c0019014 <FAT::rename(char const*, char const*)>:
c0019014:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001901a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019022:	74 0c                	je     c0019030 <FAT::rename(char const*, char const*)+0x1c>
c0019024:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001902c:	75 0e                	jne    c001903c <FAT::rename(char const*, char const*)+0x28>
c001902e:	66 90                	xchg   ax,ax
c0019030:	b8 04 00 00 00       	mov    eax,0x4
c0019035:	e9 9e 00 00 00       	jmp    c00190d8 <FAT::rename(char const*, char const*)+0xc4>
c001903a:	66 90                	xchg   ax,ax
c001903c:	83 ec 08             	sub    esp,0x8
c001903f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019046:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001904d:	50                   	push   eax
c001904e:	e8 9d 75 fe ff       	call   c00005f0 <strcpy>
c0019053:	83 c4 10             	add    esp,0x10
c0019056:	83 ec 08             	sub    esp,0x8
c0019059:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019060:	50                   	push   eax
c0019061:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019068:	e8 17 fa ff ff       	call   c0018a84 <FAT::fixFilepath(char*)>
c001906d:	83 c4 10             	add    esp,0x10
c0019070:	83 ec 08             	sub    esp,0x8
c0019073:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001907a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001907e:	50                   	push   eax
c001907f:	e8 6c 75 fe ff       	call   c00005f0 <strcpy>
c0019084:	83 c4 10             	add    esp,0x10
c0019087:	83 ec 08             	sub    esp,0x8
c001908a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001908e:	50                   	push   eax
c001908f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019096:	e8 e9 f9 ff ff       	call   c0018a84 <FAT::fixFilepath(char*)>
c001909b:	83 c4 10             	add    esp,0x10
c001909e:	83 ec 08             	sub    esp,0x8
c00190a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00190a5:	50                   	push   eax
c00190a6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00190ad:	50                   	push   eax
c00190ae:	e8 a4 bb fe ff       	call   c0004c57 <f_rename>
c00190b3:	83 c4 10             	add    esp,0x10
c00190b6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00190bd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00190c4:	85 c0                	test   eax,eax
c00190c6:	75 08                	jne    c00190d0 <FAT::rename(char const*, char const*)+0xbc>
c00190c8:	b8 00 00 00 00       	mov    eax,0x0
c00190cd:	eb 09                	jmp    c00190d8 <FAT::rename(char const*, char const*)+0xc4>
c00190cf:	90                   	nop
c00190d0:	b8 01 00 00 00       	mov    eax,0x1
c00190d5:	8d 76 00             	lea    esi,[esi+0x0]
c00190d8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00190de:	c3                   	ret    
c00190df:	90                   	nop

c00190e0 <FAT::mkdir(char const*)>:
c00190e0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00190e6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00190ee:	75 08                	jne    c00190f8 <FAT::mkdir(char const*)+0x18>
c00190f0:	b8 04 00 00 00       	mov    eax,0x4
c00190f5:	eb 61                	jmp    c0019158 <FAT::mkdir(char const*)+0x78>
c00190f7:	90                   	nop
c00190f8:	83 ec 08             	sub    esp,0x8
c00190fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019102:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019106:	50                   	push   eax
c0019107:	e8 e4 74 fe ff       	call   c00005f0 <strcpy>
c001910c:	83 c4 10             	add    esp,0x10
c001910f:	83 ec 08             	sub    esp,0x8
c0019112:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019116:	50                   	push   eax
c0019117:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001911e:	e8 61 f9 ff ff       	call   c0018a84 <FAT::fixFilepath(char*)>
c0019123:	83 c4 10             	add    esp,0x10
c0019126:	83 ec 0c             	sub    esp,0xc
c0019129:	8d 44 24 18          	lea    eax,[esp+0x18]
c001912d:	50                   	push   eax
c001912e:	e8 89 b9 fe ff       	call   c0004abc <f_mkdir>
c0019133:	83 c4 10             	add    esp,0x10
c0019136:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001913d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019144:	85 c0                	test   eax,eax
c0019146:	75 08                	jne    c0019150 <FAT::mkdir(char const*)+0x70>
c0019148:	b8 00 00 00 00       	mov    eax,0x0
c001914d:	eb 09                	jmp    c0019158 <FAT::mkdir(char const*)+0x78>
c001914f:	90                   	nop
c0019150:	b8 01 00 00 00       	mov    eax,0x1
c0019155:	8d 76 00             	lea    esi,[esi+0x0]
c0019158:	81 c4 1c 01 00 00    	add    esp,0x11c
c001915e:	c3                   	ret    
c001915f:	90                   	nop

c0019160 <FAT::exists(char const*)>:
c0019160:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019166:	83 ec 08             	sub    esp,0x8
c0019169:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019170:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019174:	50                   	push   eax
c0019175:	e8 76 74 fe ff       	call   c00005f0 <strcpy>
c001917a:	83 c4 10             	add    esp,0x10
c001917d:	83 ec 08             	sub    esp,0x8
c0019180:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019184:	50                   	push   eax
c0019185:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001918c:	e8 f3 f8 ff ff       	call   c0018a84 <FAT::fixFilepath(char*)>
c0019191:	83 c4 10             	add    esp,0x10
c0019194:	83 ec 08             	sub    esp,0x8
c0019197:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001919e:	50                   	push   eax
c001919f:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191a3:	50                   	push   eax
c00191a4:	e8 81 b5 fe ff       	call   c000472a <f_stat>
c00191a9:	83 c4 10             	add    esp,0x10
c00191ac:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00191b3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00191ba:	85 c0                	test   eax,eax
c00191bc:	75 06                	jne    c00191c4 <FAT::exists(char const*)+0x64>
c00191be:	b0 01                	mov    al,0x1
c00191c0:	eb 06                	jmp    c00191c8 <FAT::exists(char const*)+0x68>
c00191c2:	66 90                	xchg   ax,ax
c00191c4:	b0 00                	mov    al,0x0
c00191c6:	66 90                	xchg   ax,ax
c00191c8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00191ce:	c3                   	ret    
c00191cf:	90                   	nop

c00191d0 <isoReadDiscSectorHelper>:
c00191d0:	83 ec 2c             	sub    esp,0x2c
c00191d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00191d7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00191db:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00191e0:	83 e8 41             	sub    eax,0x41
c00191e3:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00191ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00191ee:	ba 00 00 00 00       	mov    edx,0x0
c00191f3:	83 ec 0c             	sub    esp,0xc
c00191f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00191fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191fe:	52                   	push   edx
c00191ff:	50                   	push   eax
c0019200:	51                   	push   ecx
c0019201:	e8 e8 3e ff ff       	call   c000d0ee <LogicalDisk::read(unsigned long long, int, void*)>
c0019206:	83 c4 20             	add    esp,0x20
c0019209:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001920d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019212:	74 0c                	je     c0019220 <isoReadDiscSectorHelper+0x50>
c0019214:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019218:	c1 e0 0b             	shl    eax,0xb
c001921b:	eb 0b                	jmp    c0019228 <isoReadDiscSectorHelper+0x58>
c001921d:	8d 76 00             	lea    esi,[esi+0x0]
c0019220:	b8 00 00 00 00       	mov    eax,0x0
c0019225:	8d 76 00             	lea    esi,[esi+0x0]
c0019228:	83 c4 2c             	add    esp,0x2c
c001922b:	c3                   	ret    

c001922c <iso_kprintf>:
c001922c:	83 ec 0c             	sub    esp,0xc
c001922f:	83 ec 08             	sub    esp,0x8
c0019232:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019236:	68 d9 0f 02 c0       	push   0xc0020fd9
c001923b:	e8 61 16 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0019240:	83 c4 10             	add    esp,0x10
c0019243:	90                   	nop
c0019244:	83 c4 0c             	add    esp,0xc
c0019247:	c3                   	ret    

c0019248 <iso_kprintfd>:
c0019248:	83 ec 0c             	sub    esp,0xc
c001924b:	83 ec 08             	sub    esp,0x8
c001924e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019252:	68 fb ff 01 c0       	push   0xc001fffb
c0019257:	e8 45 16 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c001925c:	83 c4 10             	add    esp,0x10
c001925f:	90                   	nop
c0019260:	83 c4 0c             	add    esp,0xc
c0019263:	c3                   	ret    

c0019264 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019264:	b8 08 00 00 00       	mov    eax,0x8
c0019269:	c3                   	ret    

c001926a <ISO9660::getName()>:
c001926a:	b8 30 16 02 c0       	mov    eax,0xc0021630
c001926f:	c3                   	ret    

c0019270 <ISO9660::closeDir(void*)>:
c0019270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019274:	8b 00                	mov    eax,DWORD PTR [eax]
c0019276:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019279:	90                   	nop

c001927a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001927a:	b8 01 00 00 00       	mov    eax,0x1
c001927f:	c3                   	ret    

c0019280 <ISO9660::unlink(char const*)>:
c0019280:	b8 01 00 00 00       	mov    eax,0x1
c0019285:	c3                   	ret    

c0019286 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019286:	b8 03 00 00 00       	mov    eax,0x3
c001928b:	c3                   	ret    

c001928c <ISO9660::rename(char const*, char const*)>:
c001928c:	b8 01 00 00 00       	mov    eax,0x1
c0019291:	c3                   	ret    

c0019292 <ISO9660::mkdir(char const*)>:
c0019292:	b8 01 00 00 00       	mov    eax,0x1
c0019297:	c3                   	ret    

c0019298 <ISO9660::~ISO9660()>:
c0019298:	83 ec 0c             	sub    esp,0xc
c001929b:	ba 70 17 02 c0       	mov    edx,0xc0021770
c00192a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192a4:	89 10                	mov    DWORD PTR [eax],edx
c00192a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192aa:	83 ec 0c             	sub    esp,0xc
c00192ad:	50                   	push   eax
c00192ae:	e8 35 19 ff ff       	call   c000abe8 <Filesystem::~Filesystem()>
c00192b3:	83 c4 10             	add    esp,0x10
c00192b6:	90                   	nop
c00192b7:	83 c4 0c             	add    esp,0xc
c00192ba:	c3                   	ret    
c00192bb:	90                   	nop

c00192bc <ISO9660::~ISO9660()>:
c00192bc:	83 ec 0c             	sub    esp,0xc
c00192bf:	83 ec 0c             	sub    esp,0xc
c00192c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192c6:	e8 cd ff ff ff       	call   c0019298 <ISO9660::~ISO9660()>
c00192cb:	83 c4 10             	add    esp,0x10
c00192ce:	83 ec 08             	sub    esp,0x8
c00192d1:	6a 08                	push   0x8
c00192d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192d7:	e8 c7 14 ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c00192dc:	83 c4 10             	add    esp,0x10
c00192df:	83 c4 0c             	add    esp,0xc
c00192e2:	c3                   	ret    
c00192e3:	90                   	nop

c00192e4 <ISO9660::exists(char const*)>:
c00192e4:	83 ec 18             	sub    esp,0x18
c00192e7:	68 4b 16 02 c0       	push   0xc002164b
c00192ec:	e8 16 75 ff ff       	call   c0010807 <KePanic(char const*)>
c00192f1:	31 c0                	xor    eax,eax
c00192f3:	83 c4 1c             	add    esp,0x1c
c00192f6:	c3                   	ret    
c00192f7:	90                   	nop

c00192f8 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00192f8:	56                   	push   esi
c00192f9:	53                   	push   ebx
c00192fa:	53                   	push   ebx
c00192fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00192ff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019303:	85 db                	test   ebx,ebx
c0019305:	0f 84 ca 00 00 00    	je     c00193d5 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001930b:	85 f6                	test   esi,esi
c001930d:	0f 84 c2 00 00 00    	je     c00193d5 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019313:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019318:	b8 03 00 00 00       	mov    eax,0x3
c001931d:	0f 85 b7 00 00 00    	jne    c00193da <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019323:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019325:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c001932b:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019332:	74 1b                	je     c001934f <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019334:	85 c0                	test   eax,eax
c0019336:	74 10                	je     c0019348 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019338:	83 ec 0c             	sub    esp,0xc
c001933b:	68 69 16 02 c0       	push   0xc0021669
c0019340:	e8 c2 74 ff ff       	call   c0010807 <KePanic(char const*)>
c0019345:	83 c4 10             	add    esp,0x10
c0019348:	8a 03                	mov    al,BYTE PTR [ebx]
c001934a:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c001934f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019352:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019359:	85 c0                	test   eax,eax
c001935b:	74 09                	je     c0019366 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001935d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019364:	74 48                	je     c00193ae <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019366:	83 ec 0c             	sub    esp,0xc
c0019369:	68 79 16 02 c0       	push   0xc0021679
c001936e:	e8 2e 15 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0019373:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019376:	83 c4 10             	add    esp,0x10
c0019379:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019380:	85 c0                	test   eax,eax
c0019382:	74 17                	je     c001939b <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019384:	83 ec 0c             	sub    esp,0xc
c0019387:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001938e:	68 99 16 02 c0       	push   0xc0021699
c0019393:	e8 09 15 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0019398:	83 c4 10             	add    esp,0x10
c001939b:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00193a2:	83 ec 0c             	sub    esp,0xc
c00193a5:	50                   	push   eax
c00193a6:	e8 21 d6 fe ff       	call   c00069cc <init_percd>
c00193ab:	83 c4 10             	add    esp,0x10
c00193ae:	83 c3 03             	add    ebx,0x3
c00193b1:	51                   	push   ecx
c00193b2:	51                   	push   ecx
c00193b3:	6a 00                	push   0x0
c00193b5:	53                   	push   ebx
c00193b6:	e8 d4 d0 fe ff       	call   c000648f <iso_open>
c00193bb:	83 c4 10             	add    esp,0x10
c00193be:	89 c2                	mov    edx,eax
c00193c0:	b8 01 00 00 00       	mov    eax,0x1
c00193c5:	83 fa ff             	cmp    edx,0xffffffff
c00193c8:	74 10                	je     c00193da <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00193ca:	83 c2 32             	add    edx,0x32
c00193cd:	31 c0                	xor    eax,eax
c00193cf:	01 d2                	add    edx,edx
c00193d1:	89 16                	mov    DWORD PTR [esi],edx
c00193d3:	eb 05                	jmp    c00193da <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00193d5:	b8 04 00 00 00       	mov    eax,0x4
c00193da:	5a                   	pop    edx
c00193db:	5b                   	pop    ebx
c00193dc:	5e                   	pop    esi
c00193dd:	c3                   	ret    

c00193de <ISO9660::read(void*, unsigned long, void*, int*)>:
c00193de:	53                   	push   ebx
c00193df:	83 ec 08             	sub    esp,0x8
c00193e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00193e6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00193ea:	85 c0                	test   eax,eax
c00193ec:	74 2d                	je     c001941b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00193ee:	85 db                	test   ebx,ebx
c00193f0:	74 29                	je     c001941b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00193f2:	b9 02 00 00 00       	mov    ecx,0x2
c00193f7:	52                   	push   edx
c00193f8:	99                   	cdq    
c00193f9:	f7 f9                	idiv   ecx
c00193fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00193ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019403:	83 e8 32             	sub    eax,0x32
c0019406:	50                   	push   eax
c0019407:	e8 2b d1 fe ff       	call   c0006537 <iso_read>
c001940c:	83 c4 10             	add    esp,0x10
c001940f:	89 03                	mov    DWORD PTR [ebx],eax
c0019411:	09 d0                	or     eax,edx
c0019413:	0f 94 c0             	sete   al
c0019416:	0f b6 c0             	movzx  eax,al
c0019419:	eb 05                	jmp    c0019420 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001941b:	b8 04 00 00 00       	mov    eax,0x4
c0019420:	83 c4 08             	add    esp,0x8
c0019423:	5b                   	pop    ebx
c0019424:	c3                   	ret    
c0019425:	90                   	nop

c0019426 <ISO9660::seek(void*, unsigned long long)>:
c0019426:	57                   	push   edi
c0019427:	b8 04 00 00 00       	mov    eax,0x4
c001942c:	56                   	push   esi
c001942d:	51                   	push   ecx
c001942e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019432:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019436:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001943a:	85 d2                	test   edx,edx
c001943c:	74 26                	je     c0019464 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001943e:	89 d0                	mov    eax,edx
c0019440:	b9 02 00 00 00       	mov    ecx,0x2
c0019445:	6a 00                	push   0x0
c0019447:	99                   	cdq    
c0019448:	57                   	push   edi
c0019449:	f7 f9                	idiv   ecx
c001944b:	56                   	push   esi
c001944c:	83 e8 32             	sub    eax,0x32
c001944f:	50                   	push   eax
c0019450:	e8 f8 d1 fe ff       	call   c000664d <iso_seek>
c0019455:	83 c4 10             	add    esp,0x10
c0019458:	31 f0                	xor    eax,esi
c001945a:	31 fa                	xor    edx,edi
c001945c:	09 d0                	or     eax,edx
c001945e:	0f 95 c0             	setne  al
c0019461:	0f b6 c0             	movzx  eax,al
c0019464:	5a                   	pop    edx
c0019465:	5e                   	pop    esi
c0019466:	5f                   	pop    edi
c0019467:	c3                   	ret    

c0019468 <ISO9660::tell(void*, unsigned long long*)>:
c0019468:	53                   	push   ebx
c0019469:	83 ec 08             	sub    esp,0x8
c001946c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019470:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019474:	85 c0                	test   eax,eax
c0019476:	74 24                	je     c001949c <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019478:	85 db                	test   ebx,ebx
c001947a:	74 20                	je     c001949c <ISO9660::tell(void*, unsigned long long*)+0x34>
c001947c:	b9 02 00 00 00       	mov    ecx,0x2
c0019481:	99                   	cdq    
c0019482:	83 ec 0c             	sub    esp,0xc
c0019485:	f7 f9                	idiv   ecx
c0019487:	83 e8 32             	sub    eax,0x32
c001948a:	50                   	push   eax
c001948b:	e8 41 d2 fe ff       	call   c00066d1 <iso_tell>
c0019490:	83 c4 10             	add    esp,0x10
c0019493:	89 03                	mov    DWORD PTR [ebx],eax
c0019495:	31 c0                	xor    eax,eax
c0019497:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001949a:	eb 05                	jmp    c00194a1 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001949c:	b8 04 00 00 00       	mov    eax,0x4
c00194a1:	83 c4 08             	add    esp,0x8
c00194a4:	5b                   	pop    ebx
c00194a5:	c3                   	ret    

c00194a6 <ISO9660::stat(void*, unsigned long long*)>:
c00194a6:	56                   	push   esi
c00194a7:	53                   	push   ebx
c00194a8:	83 ec 10             	sub    esp,0x10
c00194ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00194af:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00194b3:	68 bd 16 02 c0       	push   0xc00216bd
c00194b8:	e8 e4 13 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c00194bd:	83 c4 10             	add    esp,0x10
c00194c0:	85 db                	test   ebx,ebx
c00194c2:	74 2a                	je     c00194ee <ISO9660::stat(void*, unsigned long long*)+0x48>
c00194c4:	85 f6                	test   esi,esi
c00194c6:	74 26                	je     c00194ee <ISO9660::stat(void*, unsigned long long*)+0x48>
c00194c8:	89 d8                	mov    eax,ebx
c00194ca:	b9 02 00 00 00       	mov    ecx,0x2
c00194cf:	83 ec 0c             	sub    esp,0xc
c00194d2:	99                   	cdq    
c00194d3:	f7 f9                	idiv   ecx
c00194d5:	83 e8 32             	sub    eax,0x32
c00194d8:	50                   	push   eax
c00194d9:	e8 24 d2 fe ff       	call   c0006702 <iso_total>
c00194de:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00194e5:	83 c4 10             	add    esp,0x10
c00194e8:	89 06                	mov    DWORD PTR [esi],eax
c00194ea:	31 c0                	xor    eax,eax
c00194ec:	eb 05                	jmp    c00194f3 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c00194ee:	b8 04 00 00 00       	mov    eax,0x4
c00194f3:	5a                   	pop    edx
c00194f4:	5b                   	pop    ebx
c00194f5:	5e                   	pop    esi
c00194f6:	c3                   	ret    
c00194f7:	90                   	nop

c00194f8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00194f8:	55                   	push   ebp
c00194f9:	57                   	push   edi
c00194fa:	56                   	push   esi
c00194fb:	53                   	push   ebx
c00194fc:	83 ec 18             	sub    esp,0x18
c00194ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019503:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019507:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001950b:	68 c5 16 02 c0       	push   0xc00216c5
c0019510:	e8 8c 13 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0019515:	83 c4 10             	add    esp,0x10
c0019518:	85 ff                	test   edi,edi
c001951a:	0f 94 c0             	sete   al
c001951d:	85 f6                	test   esi,esi
c001951f:	0f 94 c2             	sete   dl
c0019522:	09 d0                	or     eax,edx
c0019524:	a8 01                	test   al,0x1
c0019526:	0f 85 dd 00 00 00    	jne    c0019609 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001952c:	85 db                	test   ebx,ebx
c001952e:	0f 84 d5 00 00 00    	je     c0019609 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019534:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019537:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001953d:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019544:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001954b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001954d:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c0019553:	74 1b                	je     c0019570 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0019555:	85 c0                	test   eax,eax
c0019557:	74 10                	je     c0019569 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0019559:	83 ec 0c             	sub    esp,0xc
c001955c:	68 69 16 02 c0       	push   0xc0021669
c0019561:	e8 a1 72 ff ff       	call   c0010807 <KePanic(char const*)>
c0019566:	83 c4 10             	add    esp,0x10
c0019569:	8a 03                	mov    al,BYTE PTR [ebx]
c001956b:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019570:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019573:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001957a:	85 c0                	test   eax,eax
c001957c:	74 09                	je     c0019587 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001957e:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019585:	74 51                	je     c00195d8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019587:	83 ec 0c             	sub    esp,0xc
c001958a:	68 cd 16 02 c0       	push   0xc00216cd
c001958f:	e8 0d 13 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0019594:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019597:	83 c4 10             	add    esp,0x10
c001959a:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c00195a2:	74 21                	je     c00195c5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00195a4:	83 ec 0c             	sub    esp,0xc
c00195a7:	68 ed 16 02 c0       	push   0xc00216ed
c00195ac:	e8 f0 12 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c00195b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00195b4:	83 c4 10             	add    esp,0x10
c00195b7:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00195be:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00195c5:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00195cc:	83 ec 0c             	sub    esp,0xc
c00195cf:	50                   	push   eax
c00195d0:	e8 f7 d3 fe ff       	call   c00069cc <init_percd>
c00195d5:	83 c4 10             	add    esp,0x10
c00195d8:	83 c3 03             	add    ebx,0x3
c00195db:	52                   	push   edx
c00195dc:	52                   	push   edx
c00195dd:	6a 00                	push   0x0
c00195df:	53                   	push   ebx
c00195e0:	e8 aa ce fe ff       	call   c000648f <iso_open>
c00195e5:	83 c4 10             	add    esp,0x10
c00195e8:	83 f8 ff             	cmp    eax,0xffffffff
c00195eb:	89 c5                	mov    ebp,eax
c00195ed:	75 21                	jne    c0019610 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c00195ef:	50                   	push   eax
c00195f0:	50                   	push   eax
c00195f1:	6a 01                	push   0x1
c00195f3:	53                   	push   ebx
c00195f4:	e8 96 ce fe ff       	call   c000648f <iso_open>
c00195f9:	83 c4 10             	add    esp,0x10
c00195fc:	ba 02 00 00 00       	mov    edx,0x2
c0019601:	40                   	inc    eax
c0019602:	74 2b                	je     c001962f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019604:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019607:	eb 24                	jmp    c001962d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0019609:	ba 04 00 00 00       	mov    edx,0x4
c001960e:	eb 1f                	jmp    c001962f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019610:	83 ec 0c             	sub    esp,0xc
c0019613:	50                   	push   eax
c0019614:	e8 e9 d0 fe ff       	call   c0006702 <iso_total>
c0019619:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019620:	89 07                	mov    DWORD PTR [edi],eax
c0019622:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019625:	e8 ef ce fe ff       	call   c0006519 <iso_close>
c001962a:	83 c4 10             	add    esp,0x10
c001962d:	31 d2                	xor    edx,edx
c001962f:	83 c4 0c             	add    esp,0xc
c0019632:	89 d0                	mov    eax,edx
c0019634:	5b                   	pop    ebx
c0019635:	5e                   	pop    esi
c0019636:	5f                   	pop    edi
c0019637:	5d                   	pop    ebp
c0019638:	c3                   	ret    
c0019639:	90                   	nop

c001963a <ISO9660::close(void*)>:
c001963a:	83 ec 0c             	sub    esp,0xc
c001963d:	b8 04 00 00 00       	mov    eax,0x4
c0019642:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019646:	85 d2                	test   edx,edx
c0019648:	74 1b                	je     c0019665 <ISO9660::close(void*)+0x2b>
c001964a:	89 d0                	mov    eax,edx
c001964c:	b9 02 00 00 00       	mov    ecx,0x2
c0019651:	83 ec 0c             	sub    esp,0xc
c0019654:	99                   	cdq    
c0019655:	f7 f9                	idiv   ecx
c0019657:	83 e8 32             	sub    eax,0x32
c001965a:	50                   	push   eax
c001965b:	e8 b9 ce fe ff       	call   c0006519 <iso_close>
c0019660:	83 c4 10             	add    esp,0x10
c0019663:	31 c0                	xor    eax,eax
c0019665:	83 c4 0c             	add    esp,0xc
c0019668:	c3                   	ret    
c0019669:	90                   	nop

c001966a <ISO9660::openDir(char const*, void**)>:
c001966a:	56                   	push   esi
c001966b:	53                   	push   ebx
c001966c:	50                   	push   eax
c001966d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019671:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019675:	85 db                	test   ebx,ebx
c0019677:	0f 84 bd 00 00 00    	je     c001973a <ISO9660::openDir(char const*, void**)+0xd0>
c001967d:	85 f6                	test   esi,esi
c001967f:	0f 84 b5 00 00 00    	je     c001973a <ISO9660::openDir(char const*, void**)+0xd0>
c0019685:	8a 13                	mov    dl,BYTE PTR [ebx]
c0019687:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c001968d:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019694:	74 1b                	je     c00196b1 <ISO9660::openDir(char const*, void**)+0x47>
c0019696:	85 c0                	test   eax,eax
c0019698:	74 10                	je     c00196aa <ISO9660::openDir(char const*, void**)+0x40>
c001969a:	83 ec 0c             	sub    esp,0xc
c001969d:	68 69 16 02 c0       	push   0xc0021669
c00196a2:	e8 60 71 ff ff       	call   c0010807 <KePanic(char const*)>
c00196a7:	83 c4 10             	add    esp,0x10
c00196aa:	8a 03                	mov    al,BYTE PTR [ebx]
c00196ac:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00196b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00196b4:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00196bb:	85 c0                	test   eax,eax
c00196bd:	74 10                	je     c00196cf <ISO9660::openDir(char const*, void**)+0x65>
c00196bf:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00196c6:	74 1a                	je     c00196e2 <ISO9660::openDir(char const*, void**)+0x78>
c00196c8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00196cf:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00196d6:	83 ec 0c             	sub    esp,0xc
c00196d9:	50                   	push   eax
c00196da:	e8 ed d2 fe ff       	call   c00069cc <init_percd>
c00196df:	83 c4 10             	add    esp,0x10
c00196e2:	83 c3 03             	add    ebx,0x3
c00196e5:	50                   	push   eax
c00196e6:	50                   	push   eax
c00196e7:	6a 01                	push   0x1
c00196e9:	53                   	push   ebx
c00196ea:	e8 a0 cd fe ff       	call   c000648f <iso_open>
c00196ef:	83 c4 10             	add    esp,0x10
c00196f2:	83 f8 ff             	cmp    eax,0xffffffff
c00196f5:	89 c3                	mov    ebx,eax
c00196f7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00196fc:	75 1c                	jne    c001971a <ISO9660::openDir(char const*, void**)+0xb0>
c00196fe:	53                   	push   ebx
c00196ff:	53                   	push   ebx
c0019700:	68 11 17 02 c0       	push   0xc0021711
c0019705:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001970b:	e8 e8 f2 fe ff       	call   c00089f8 <VgaText::puts(char const*)>
c0019710:	83 c4 10             	add    esp,0x10
c0019713:	b8 01 00 00 00       	mov    eax,0x1
c0019718:	eb 25                	jmp    c001973f <ISO9660::openDir(char const*, void**)+0xd5>
c001971a:	01 db                	add    ebx,ebx
c001971c:	51                   	push   ecx
c001971d:	83 c3 65             	add    ebx,0x65
c0019720:	51                   	push   ecx
c0019721:	68 24 17 02 c0       	push   0xc0021724
c0019726:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001972c:	e8 c7 f2 fe ff       	call   c00089f8 <VgaText::puts(char const*)>
c0019731:	83 c4 10             	add    esp,0x10
c0019734:	31 c0                	xor    eax,eax
c0019736:	89 1e                	mov    DWORD PTR [esi],ebx
c0019738:	eb 05                	jmp    c001973f <ISO9660::openDir(char const*, void**)+0xd5>
c001973a:	b8 04 00 00 00       	mov    eax,0x4
c001973f:	5a                   	pop    edx
c0019740:	5b                   	pop    ebx
c0019741:	5e                   	pop    esi
c0019742:	c3                   	ret    
c0019743:	90                   	nop

c0019744 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019744:	55                   	push   ebp
c0019745:	57                   	push   edi
c0019746:	56                   	push   esi
c0019747:	53                   	push   ebx
c0019748:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001974e:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c0019755:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001975c:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c0019763:	85 db                	test   ebx,ebx
c0019765:	0f 84 e4 00 00 00    	je     c001984f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001976b:	85 ed                	test   ebp,ebp
c001976d:	0f 84 dc 00 00 00    	je     c001984f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c0019773:	83 ec 0c             	sub    esp,0xc
c0019776:	68 37 17 02 c0       	push   0xc0021737
c001977b:	e8 21 11 ff ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c0019780:	89 d8                	mov    eax,ebx
c0019782:	b9 02 00 00 00       	mov    ecx,0x2
c0019787:	99                   	cdq    
c0019788:	f7 f9                	idiv   ecx
c001978a:	83 e8 32             	sub    eax,0x32
c001978d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019790:	e8 bf cf fe ff       	call   c0006754 <iso_readdir>
c0019795:	83 c4 10             	add    esp,0x10
c0019798:	85 c0                	test   eax,eax
c001979a:	89 c3                	mov    ebx,eax
c001979c:	75 38                	jne    c00197d6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001979e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00197a3:	53                   	push   ebx
c00197a4:	53                   	push   ebx
c00197a5:	68 42 17 02 c0       	push   0xc0021742
c00197aa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00197b0:	e8 43 f2 fe ff       	call   c00089f8 <VgaText::puts(char const*)>
c00197b5:	83 c4 0c             	add    esp,0xc
c00197b8:	68 10 01 00 00       	push   0x110
c00197bd:	6a 00                	push   0x0
c00197bf:	57                   	push   edi
c00197c0:	e8 2b 6d fe ff       	call   c00004f0 <memset>
c00197c5:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c00197cc:	83 c4 10             	add    esp,0x10
c00197cf:	b8 01 00 00 00       	mov    eax,0x1
c00197d4:	eb 7e                	jmp    c0019854 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00197d6:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00197dc:	8d 70 08             	lea    esi,[eax+0x8]
c00197df:	83 ec 0c             	sub    esp,0xc
c00197e2:	56                   	push   esi
c00197e3:	e8 38 6d fe ff       	call   c0000520 <strlen>
c00197e8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00197f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00197f4:	83 c4 10             	add    esp,0x10
c00197f7:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c00197fb:	75 0a                	jne    c0019807 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c00197fd:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c0019800:	b8 02 00 00 00       	mov    eax,0x2
c0019805:	74 05                	je     c001980c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c0019807:	b8 01 00 00 00       	mov    eax,0x1
c001980c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019810:	50                   	push   eax
c0019811:	50                   	push   eax
c0019812:	56                   	push   esi
c0019813:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019817:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001981b:	50                   	push   eax
c001981c:	e8 cf 6d fe ff       	call   c00005f0 <strcpy>
c0019821:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0019828:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001982a:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0019831:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019836:	5a                   	pop    edx
c0019837:	59                   	pop    ecx
c0019838:	68 55 17 02 c0       	push   0xc0021755
c001983d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019843:	e8 b0 f1 fe ff       	call   c00089f8 <VgaText::puts(char const*)>
c0019848:	83 c4 10             	add    esp,0x10
c001984b:	31 c0                	xor    eax,eax
c001984d:	eb 05                	jmp    c0019854 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001984f:	b8 04 00 00 00       	mov    eax,0x4
c0019854:	81 c4 1c 01 00 00    	add    esp,0x11c
c001985a:	5b                   	pop    ebx
c001985b:	5e                   	pop    esi
c001985c:	5f                   	pop    edi
c001985d:	5d                   	pop    ebp
c001985e:	c3                   	ret    

c001985f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001985f:	57                   	push   edi
c0019860:	56                   	push   esi
c0019861:	53                   	push   ebx
c0019862:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019866:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001986a:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c0019870:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019874:	0f be cb             	movsx  ecx,bl
c0019877:	75 0b                	jne    c0019884 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0019879:	0f be 05 a4 22 02 c0 	movsx  eax,BYTE PTR ds:0xc00222a4
c0019880:	39 c8                	cmp    eax,ecx
c0019882:	74 47                	je     c00198cb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019884:	83 ec 0c             	sub    esp,0xc
c0019887:	31 d2                	xor    edx,edx
c0019889:	68 40 83 02 c0       	push   0xc0028340
c001988e:	6a 01                	push   0x1
c0019890:	52                   	push   edx
c0019891:	56                   	push   esi
c0019892:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c0019899:	e8 50 38 ff ff       	call   c000d0ee <LogicalDisk::read(unsigned long long, int, void*)>
c001989e:	83 c4 20             	add    esp,0x20
c00198a1:	85 c0                	test   eax,eax
c00198a3:	75 0e                	jne    c00198b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c00198a5:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c00198ab:	88 1d a4 22 02 c0    	mov    BYTE PTR ds:0xc00222a4,bl
c00198b1:	eb 18                	jmp    c00198cb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00198b3:	50                   	push   eax
c00198b4:	68 00 08 00 00       	push   0x800
c00198b9:	6a 00                	push   0x0
c00198bb:	57                   	push   edi
c00198bc:	e8 2f 6c fe ff       	call   c00004f0 <memset>
c00198c1:	83 c4 10             	add    esp,0x10
c00198c4:	b8 01 00 00 00       	mov    eax,0x1
c00198c9:	eb 0e                	jmp    c00198d9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c00198cb:	be 40 83 02 c0       	mov    esi,0xc0028340
c00198d0:	b9 00 08 00 00       	mov    ecx,0x800
c00198d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198d7:	31 c0                	xor    eax,eax
c00198d9:	5b                   	pop    ebx
c00198da:	5e                   	pop    esi
c00198db:	5f                   	pop    edi
c00198dc:	c3                   	ret    
c00198dd:	90                   	nop

c00198de <ISO9660::tryMount(LogicalDisk*, int)>:
c00198de:	53                   	push   ebx
c00198df:	81 ec 0c 08 00 00    	sub    esp,0x80c
c00198e5:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c00198ef:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c00198f6:	8d 58 41             	lea    ebx,[eax+0x41]
c00198f9:	0f be db             	movsx  ebx,bl
c00198fc:	53                   	push   ebx
c00198fd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019901:	50                   	push   eax
c0019902:	6a 10                	push   0x10
c0019904:	e8 56 ff ff ff       	call   c001985f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019909:	83 c4 10             	add    esp,0x10
c001990c:	31 d2                	xor    edx,edx
c001990e:	85 c0                	test   eax,eax
c0019910:	75 33                	jne    c0019945 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019912:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019917:	75 2c                	jne    c0019945 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019919:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001991e:	75 25                	jne    c0019945 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019920:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019925:	75 1e                	jne    c0019945 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019927:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001992c:	75 17                	jne    c0019945 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001992e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019933:	75 10                	jne    c0019945 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019935:	83 ec 0c             	sub    esp,0xc
c0019938:	53                   	push   ebx
c0019939:	e8 8e d0 fe ff       	call   c00069cc <init_percd>
c001993e:	83 c4 10             	add    esp,0x10
c0019941:	40                   	inc    eax
c0019942:	0f 95 c2             	setne  dl
c0019945:	81 c4 08 08 00 00    	add    esp,0x808
c001994b:	88 d0                	mov    al,dl
c001994d:	5b                   	pop    ebx
c001994e:	c3                   	ret    
c001994f:	90                   	nop

c0019950 <ISO9660::ISO9660()>:
c0019950:	83 ec 0c             	sub    esp,0xc
c0019953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019957:	83 ec 0c             	sub    esp,0xc
c001995a:	50                   	push   eax
c001995b:	e8 64 12 ff ff       	call   c000abc4 <Filesystem::Filesystem()>
c0019960:	83 c4 10             	add    esp,0x10
c0019963:	ba 70 17 02 c0       	mov    edx,0xc0021770
c0019968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001996c:	89 10                	mov    DWORD PTR [eax],edx
c001996e:	e8 6b d1 fe ff       	call   c0006ade <fs_iso9660_init>
c0019973:	90                   	nop
c0019974:	83 c4 0c             	add    esp,0xc
c0019977:	c3                   	ret    

c0019978 <SoundCard::beginPlayback()>:
c0019978:	c7 44 24 04 d0 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc00217d0
c0019980:	e9 82 6e ff ff       	jmp    c0010807 <KePanic(char const*)>
c0019985:	90                   	nop

c0019986 <SoundCard::stopPlayback()>:
c0019986:	c7 44 24 04 d0 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc00217d0
c001998e:	e9 74 6e ff ff       	jmp    c0010807 <KePanic(char const*)>
c0019993:	90                   	nop

c0019994 <SoundCard::SoundCard(char const*)>:
c0019994:	83 ec 1c             	sub    esp,0x1c
c0019997:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001999b:	83 ec 08             	sub    esp,0x8
c001999e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199a2:	50                   	push   eax
c00199a3:	e8 f6 24 ff ff       	call   c000be9e <Device::Device(char const*)>
c00199a8:	83 c4 10             	add    esp,0x10
c00199ab:	ba 1c 18 02 c0       	mov    edx,0xc002181c
c00199b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199b4:	89 10                	mov    DWORD PTR [eax],edx
c00199b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199ba:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00199c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199c5:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c00199cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199d3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c00199dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199e1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c00199eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199ef:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00199f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019a01:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019a06:	7f 1a                	jg     c0019a22 <SoundCard::SoundCard(char const*)+0x8e>
c0019a08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a10:	83 c2 54             	add    edx,0x54
c0019a13:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019a1b:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019a20:	eb df                	jmp    c0019a01 <SoundCard::SoundCard(char const*)+0x6d>
c0019a22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a26:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019a2d:	90                   	nop
c0019a2e:	83 c4 1c             	add    esp,0x1c
c0019a31:	c3                   	ret    

c0019a32 <SoundCard::~SoundCard()>:
c0019a32:	83 ec 0c             	sub    esp,0xc
c0019a35:	ba 1c 18 02 c0       	mov    edx,0xc002181c
c0019a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a3e:	89 10                	mov    DWORD PTR [eax],edx
c0019a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a44:	83 ec 0c             	sub    esp,0xc
c0019a47:	50                   	push   eax
c0019a48:	e8 bb 21 ff ff       	call   c000bc08 <Device::~Device()>
c0019a4d:	83 c4 10             	add    esp,0x10
c0019a50:	90                   	nop
c0019a51:	83 c4 0c             	add    esp,0xc
c0019a54:	c3                   	ret    
c0019a55:	90                   	nop

c0019a56 <SoundCard::~SoundCard()>:
c0019a56:	83 ec 0c             	sub    esp,0xc
c0019a59:	83 ec 0c             	sub    esp,0xc
c0019a5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a60:	e8 cd ff ff ff       	call   c0019a32 <SoundCard::~SoundCard()>
c0019a65:	83 c4 10             	add    esp,0x10
c0019a68:	83 ec 08             	sub    esp,0x8
c0019a6b:	68 e8 01 00 00       	push   0x1e8
c0019a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a74:	e8 2a 0d ff ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c0019a79:	83 c4 10             	add    esp,0x10
c0019a7c:	83 c4 0c             	add    esp,0xc
c0019a7f:	c3                   	ret    

c0019a80 <SoundCard::configureRates(int, int, int)>:
c0019a80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019a84:	31 c0                	xor    eax,eax
c0019a86:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019a8d:	75 20                	jne    c0019aaf <SoundCard::configureRates(int, int, int)+0x2f>
c0019a8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a93:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019a99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a9d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019aa7:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019aad:	b0 01                	mov    al,0x1
c0019aaf:	c3                   	ret    

c0019ab0 <SoundCard::getSamples16(int, short*)>:
c0019ab0:	55                   	push   ebp
c0019ab1:	57                   	push   edi
c0019ab2:	31 ff                	xor    edi,edi
c0019ab4:	56                   	push   esi
c0019ab5:	53                   	push   ebx
c0019ab6:	31 db                	xor    ebx,ebx
c0019ab8:	83 ec 10             	sub    esp,0x10
c0019abb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019abf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019ac3:	8d 04 36             	lea    eax,[esi+esi*1]
c0019ac6:	50                   	push   eax
c0019ac7:	6a 00                	push   0x0
c0019ac9:	55                   	push   ebp
c0019aca:	e8 21 6a fe ff       	call   c00004f0 <memset>
c0019acf:	83 c4 10             	add    esp,0x10
c0019ad2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ad6:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0019add:	85 c0                	test   eax,eax
c0019adf:	74 1a                	je     c0019afb <SoundCard::getSamples16(int, short*)+0x4b>
c0019ae1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019ae5:	75 14                	jne    c0019afb <SoundCard::getSamples16(int, short*)+0x4b>
c0019ae7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019aeb:	55                   	push   ebp
c0019aec:	56                   	push   esi
c0019aed:	50                   	push   eax
c0019aee:	e8 e5 02 00 00       	call   c0019dd8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019af3:	83 c4 10             	add    esp,0x10
c0019af6:	39 c3                	cmp    ebx,eax
c0019af8:	0f 4c d8             	cmovl  ebx,eax
c0019afb:	47                   	inc    edi
c0019afc:	83 ff 20             	cmp    edi,0x20
c0019aff:	75 d1                	jne    c0019ad2 <SoundCard::getSamples16(int, short*)+0x22>
c0019b01:	83 c4 0c             	add    esp,0xc
c0019b04:	89 d8                	mov    eax,ebx
c0019b06:	5b                   	pop    ebx
c0019b07:	5e                   	pop    esi
c0019b08:	5f                   	pop    edi
c0019b09:	5d                   	pop    ebp
c0019b0a:	c3                   	ret    
c0019b0b:	90                   	nop

c0019b0c <SoundCard::getSamples32(int, int*)>:
c0019b0c:	55                   	push   ebp
c0019b0d:	57                   	push   edi
c0019b0e:	31 ff                	xor    edi,edi
c0019b10:	56                   	push   esi
c0019b11:	31 f6                	xor    esi,esi
c0019b13:	53                   	push   ebx
c0019b14:	83 ec 10             	sub    esp,0x10
c0019b17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b1b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019b1f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019b23:	c1 e0 02             	shl    eax,0x2
c0019b26:	50                   	push   eax
c0019b27:	6a 00                	push   0x0
c0019b29:	55                   	push   ebp
c0019b2a:	e8 c1 69 fe ff       	call   c00004f0 <memset>
c0019b2f:	83 c4 10             	add    esp,0x10
c0019b32:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019b39:	85 c0                	test   eax,eax
c0019b3b:	74 1a                	je     c0019b57 <SoundCard::getSamples32(int, int*)+0x4b>
c0019b3d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019b41:	75 14                	jne    c0019b57 <SoundCard::getSamples32(int, int*)+0x4b>
c0019b43:	53                   	push   ebx
c0019b44:	55                   	push   ebp
c0019b45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019b49:	50                   	push   eax
c0019b4a:	e8 59 03 00 00       	call   c0019ea8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019b4f:	83 c4 10             	add    esp,0x10
c0019b52:	39 c6                	cmp    esi,eax
c0019b54:	0f 4c f0             	cmovl  esi,eax
c0019b57:	47                   	inc    edi
c0019b58:	83 ff 20             	cmp    edi,0x20
c0019b5b:	75 d5                	jne    c0019b32 <SoundCard::getSamples32(int, int*)+0x26>
c0019b5d:	85 f6                	test   esi,esi
c0019b5f:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019b66:	75 0f                	jne    c0019b77 <SoundCard::getSamples32(int, int*)+0x6b>
c0019b68:	85 c0                	test   eax,eax
c0019b6a:	74 1b                	je     c0019b87 <SoundCard::getSamples32(int, int*)+0x7b>
c0019b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b6e:	83 ec 0c             	sub    esp,0xc
c0019b71:	53                   	push   ebx
c0019b72:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019b75:	eb 0d                	jmp    c0019b84 <SoundCard::getSamples32(int, int*)+0x78>
c0019b77:	85 c0                	test   eax,eax
c0019b79:	75 0c                	jne    c0019b87 <SoundCard::getSamples32(int, int*)+0x7b>
c0019b7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b7d:	83 ec 0c             	sub    esp,0xc
c0019b80:	53                   	push   ebx
c0019b81:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019b84:	83 c4 10             	add    esp,0x10
c0019b87:	83 c4 0c             	add    esp,0xc
c0019b8a:	89 f0                	mov    eax,esi
c0019b8c:	5b                   	pop    ebx
c0019b8d:	5e                   	pop    esi
c0019b8e:	5f                   	pop    edi
c0019b8f:	5d                   	pop    ebp
c0019b90:	c3                   	ret    
c0019b91:	90                   	nop

c0019b92 <SoundCard::addChannel(SoundPort*)>:
c0019b92:	83 ec 0c             	sub    esp,0xc
c0019b95:	31 c0                	xor    eax,eax
c0019b97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b9b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019ba3:	74 1b                	je     c0019bc0 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019ba5:	40                   	inc    eax
c0019ba6:	83 f8 20             	cmp    eax,0x20
c0019ba9:	75 f0                	jne    c0019b9b <SoundCard::addChannel(SoundPort*)+0x9>
c0019bab:	83 ec 0c             	sub    esp,0xc
c0019bae:	68 f5 17 02 c0       	push   0xc00217f5
c0019bb3:	e8 4f 6c ff ff       	call   c0010807 <KePanic(char const*)>
c0019bb8:	83 c4 10             	add    esp,0x10
c0019bbb:	83 c8 ff             	or     eax,0xffffffff
c0019bbe:	eb 0b                	jmp    c0019bcb <SoundCard::addChannel(SoundPort*)+0x39>
c0019bc0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019bc4:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019bcb:	83 c4 0c             	add    esp,0xc
c0019bce:	c3                   	ret    
c0019bcf:	90                   	nop

c0019bd0 <SoundCard::removeChannel(int)>:
c0019bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019bd8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019be3:	c3                   	ret    

c0019be4 <SoundPort::SoundPort(int, int, int, int)>:
c0019be4:	83 ec 0c             	sub    esp,0xc
c0019be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019beb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bf6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bfe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c02:	89 10                	mov    DWORD PTR [eax],edx
c0019c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c08:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019c0c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c13:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c17:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019c1a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0019c1f:	75 13                	jne    c0019c34 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c25:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c27:	05 a0 0f 00 00       	add    eax,0xfa0
c0019c2c:	d1 e0                	shl    eax,1
c0019c2e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019c32:	66 90                	xchg   ax,ax
c0019c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019c3c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c43:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c4e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019c51:	c1 e0 02             	shl    eax,0x2
c0019c54:	83 ec 0c             	sub    esp,0xc
c0019c57:	50                   	push   eax
c0019c58:	e8 d2 dd fe ff       	call   c0007a2f <malloc>
c0019c5d:	83 c4 10             	add    esp,0x10
c0019c60:	89 c2                	mov    edx,eax
c0019c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c66:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019c69:	90                   	nop
c0019c6a:	83 c4 0c             	add    esp,0xc
c0019c6d:	c3                   	ret    
c0019c6e:	66 90                	xchg   ax,ax

c0019c70 <SoundPort::~SoundPort()>:
c0019c70:	83 ec 0c             	sub    esp,0xc
c0019c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c77:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019c7a:	85 c0                	test   eax,eax
c0019c7c:	74 1e                	je     c0019c9c <SoundPort::~SoundPort()+0x2c>
c0019c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c82:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019c85:	83 ec 0c             	sub    esp,0xc
c0019c88:	50                   	push   eax
c0019c89:	e8 b1 dd fe ff       	call   c0007a3f <free>
c0019c8e:	83 c4 10             	add    esp,0x10
c0019c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c95:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019c9c:	90                   	nop
c0019c9d:	83 c4 0c             	add    esp,0xc
c0019ca0:	c3                   	ret    
c0019ca1:	90                   	nop
c0019ca2:	66 90                	xchg   ax,ax

c0019ca4 <SoundPort::unpause()>:
c0019ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ca8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019cac:	c3                   	ret    
c0019cad:	90                   	nop
c0019cae:	66 90                	xchg   ax,ax

c0019cb0 <SoundPort::pause()>:
c0019cb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cb4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019cb8:	c3                   	ret    
c0019cb9:	90                   	nop
c0019cba:	66 90                	xchg   ax,ax

c0019cbc <SoundPort::getBufferUsed()>:
c0019cbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cc0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019cc3:	c3                   	ret    

c0019cc4 <SoundPort::getBufferSize()>:
c0019cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019ccb:	c3                   	ret    

c0019ccc <SoundPort::buffer16(short*, int)>:
c0019ccc:	55                   	push   ebp
c0019ccd:	31 c0                	xor    eax,eax
c0019ccf:	57                   	push   edi
c0019cd0:	56                   	push   esi
c0019cd1:	53                   	push   ebx
c0019cd2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019cd6:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019cda:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019cdd:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019ce0:	74 5a                	je     c0019d3c <SoundPort::buffer16(short*, int)+0x70>
c0019ce2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019ce6:	85 db                	test   ebx,ebx
c0019ce8:	7e 52                	jle    c0019d3c <SoundPort::buffer16(short*, int)+0x70>
c0019cea:	0f bf 45 00          	movsx  eax,WORD PTR [ebp+0x0]
c0019cee:	8d 71 01             	lea    esi,[ecx+0x1]
c0019cf1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019cf4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019cf7:	c1 e0 0f             	shl    eax,0xf
c0019cfa:	89 04 8b             	mov    DWORD PTR [ebx+ecx*4],eax
c0019cfd:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d00:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d03:	74 47                	je     c0019d4c <SoundPort::buffer16(short*, int)+0x80>
c0019d05:	31 f6                	xor    esi,esi
c0019d07:	eb 23                	jmp    c0019d2c <SoundPort::buffer16(short*, int)+0x60>
c0019d09:	8d 76 00             	lea    esi,[esi+0x0]
c0019d0c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019d11:	8d 79 01             	lea    edi,[ecx+0x1]
c0019d14:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019d17:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019d1a:	c1 e3 0f             	shl    ebx,0xf
c0019d1d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019d20:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d23:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d26:	74 1c                	je     c0019d44 <SoundPort::buffer16(short*, int)+0x78>
c0019d28:	89 c6                	mov    esi,eax
c0019d2a:	66 90                	xchg   ax,ax
c0019d2c:	8d 46 01             	lea    eax,[esi+0x1]
c0019d2f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019d33:	75 d7                	jne    c0019d0c <SoundPort::buffer16(short*, int)+0x40>
c0019d35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d39:	8d 76 00             	lea    esi,[esi+0x0]
c0019d3c:	5b                   	pop    ebx
c0019d3d:	5e                   	pop    esi
c0019d3e:	5f                   	pop    edi
c0019d3f:	5d                   	pop    ebp
c0019d40:	c3                   	ret    
c0019d41:	8d 76 00             	lea    esi,[esi+0x0]
c0019d44:	5b                   	pop    ebx
c0019d45:	8d 46 02             	lea    eax,[esi+0x2]
c0019d48:	5e                   	pop    esi
c0019d49:	5f                   	pop    edi
c0019d4a:	5d                   	pop    ebp
c0019d4b:	c3                   	ret    
c0019d4c:	b8 01 00 00 00       	mov    eax,0x1
c0019d51:	eb e9                	jmp    c0019d3c <SoundPort::buffer16(short*, int)+0x70>
c0019d53:	90                   	nop

c0019d54 <SoundPort::buffer32(int*, int)>:
c0019d54:	55                   	push   ebp
c0019d55:	31 c0                	xor    eax,eax
c0019d57:	57                   	push   edi
c0019d58:	56                   	push   esi
c0019d59:	53                   	push   ebx
c0019d5a:	83 ec 04             	sub    esp,0x4
c0019d5d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019d61:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019d65:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019d69:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d6c:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d72:	74 48                	je     c0019dbc <SoundPort::buffer32(int*, int)+0x68>
c0019d74:	85 db                	test   ebx,ebx
c0019d76:	7e 44                	jle    c0019dbc <SoundPort::buffer32(int*, int)+0x68>
c0019d78:	8d 59 01             	lea    ebx,[ecx+0x1]
c0019d7b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0019d7e:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c0019d81:	8b 1f                	mov    ebx,DWORD PTR [edi]
c0019d83:	89 1c 88             	mov    DWORD PTR [eax+ecx*4],ebx
c0019d86:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d89:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d8c:	74 42                	je     c0019dd0 <SoundPort::buffer32(int*, int)+0x7c>
c0019d8e:	31 db                	xor    ebx,ebx
c0019d90:	eb 1e                	jmp    c0019db0 <SoundPort::buffer32(int*, int)+0x5c>
c0019d92:	66 90                	xchg   ax,ax
c0019d94:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019d97:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019d9a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019d9d:	8b 34 87             	mov    esi,DWORD PTR [edi+eax*4]
c0019da0:	89 74 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],esi
c0019da4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019da7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019daa:	74 18                	je     c0019dc4 <SoundPort::buffer32(int*, int)+0x70>
c0019dac:	89 c3                	mov    ebx,eax
c0019dae:	66 90                	xchg   ax,ax
c0019db0:	8d 43 01             	lea    eax,[ebx+0x1]
c0019db3:	39 04 24             	cmp    DWORD PTR [esp],eax
c0019db6:	75 dc                	jne    c0019d94 <SoundPort::buffer32(int*, int)+0x40>
c0019db8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019dbb:	90                   	nop
c0019dbc:	83 c4 04             	add    esp,0x4
c0019dbf:	5b                   	pop    ebx
c0019dc0:	5e                   	pop    esi
c0019dc1:	5f                   	pop    edi
c0019dc2:	5d                   	pop    ebp
c0019dc3:	c3                   	ret    
c0019dc4:	8d 43 02             	lea    eax,[ebx+0x2]
c0019dc7:	83 c4 04             	add    esp,0x4
c0019dca:	5b                   	pop    ebx
c0019dcb:	5e                   	pop    esi
c0019dcc:	5f                   	pop    edi
c0019dcd:	5d                   	pop    ebp
c0019dce:	c3                   	ret    
c0019dcf:	90                   	nop
c0019dd0:	b8 01 00 00 00       	mov    eax,0x1
c0019dd5:	eb e5                	jmp    c0019dbc <SoundPort::buffer32(int*, int)+0x68>
c0019dd7:	90                   	nop

c0019dd8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019dd8:	55                   	push   ebp
c0019dd9:	57                   	push   edi
c0019dda:	56                   	push   esi
c0019ddb:	53                   	push   ebx
c0019ddc:	83 ec 0c             	sub    esp,0xc
c0019ddf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019de3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019de7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0019deb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019def:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019df5:	39 03                	cmp    DWORD PTR [ebx],eax
c0019df7:	74 13                	je     c0019e0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c0019df9:	83 ec 0c             	sub    esp,0xc
c0019dfc:	68 48 18 02 c0       	push   0xc0021848
c0019e01:	e8 01 6a ff ff       	call   c0010807 <KePanic(char const*)>
c0019e06:	83 c4 10             	add    esp,0x10
c0019e09:	8d 76 00             	lea    esi,[esi+0x0]
c0019e0c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019e12:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019e15:	74 11                	je     c0019e28 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c0019e17:	83 ec 0c             	sub    esp,0xc
c0019e1a:	68 87 18 02 c0       	push   0xc0021887
c0019e1f:	e8 e3 69 ff ff       	call   c0010807 <KePanic(char const*)>
c0019e24:	83 c4 10             	add    esp,0x10
c0019e27:	90                   	nop
c0019e28:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019e2e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019e31:	74 11                	je     c0019e44 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c0019e33:	83 ec 0c             	sub    esp,0xc
c0019e36:	68 87 18 02 c0       	push   0xc0021887
c0019e3b:	e8 c7 69 ff ff       	call   c0010807 <KePanic(char const*)>
c0019e40:	83 c4 10             	add    esp,0x10
c0019e43:	90                   	nop
c0019e44:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0019e47:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0019e4b:	85 f6                	test   esi,esi
c0019e4d:	7e 2d                	jle    c0019e7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c0019e4f:	31 c0                	xor    eax,eax
c0019e51:	8d 76 00             	lea    esi,[esi+0x0]
c0019e54:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019e57:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0019e5a:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0019e60:	85 c9                	test   ecx,ecx
c0019e62:	0f 49 d1             	cmovns edx,ecx
c0019e65:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c0019e69:	c1 fa 0f             	sar    edx,0xf
c0019e6c:	01 d1                	add    ecx,edx
c0019e6e:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c0019e72:	83 c0 01             	add    eax,0x1
c0019e75:	39 f0                	cmp    eax,esi
c0019e77:	75 db                	jne    c0019e54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c0019e79:	8d 76 00             	lea    esi,[esi+0x0]
c0019e7c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019e7f:	83 ec 04             	sub    esp,0x4
c0019e82:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019e85:	29 f0                	sub    eax,esi
c0019e87:	c1 e0 02             	shl    eax,0x2
c0019e8a:	50                   	push   eax
c0019e8b:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019e8e:	50                   	push   eax
c0019e8f:	52                   	push   edx
c0019e90:	e8 3b 65 fe ff       	call   c00003d0 <memmove>
c0019e95:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019e98:	29 f0                	sub    eax,esi
c0019e9a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019e9d:	83 c4 1c             	add    esp,0x1c
c0019ea0:	89 f0                	mov    eax,esi
c0019ea2:	5b                   	pop    ebx
c0019ea3:	5e                   	pop    esi
c0019ea4:	5f                   	pop    edi
c0019ea5:	5d                   	pop    ebp
c0019ea6:	c3                   	ret    
c0019ea7:	90                   	nop

c0019ea8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019ea8:	55                   	push   ebp
c0019ea9:	57                   	push   edi
c0019eaa:	56                   	push   esi
c0019eab:	53                   	push   ebx
c0019eac:	83 ec 0c             	sub    esp,0xc
c0019eaf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019eb3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019eb7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0019ebb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019ebf:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019ec5:	39 03                	cmp    DWORD PTR [ebx],eax
c0019ec7:	74 13                	je     c0019edc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c0019ec9:	83 ec 0c             	sub    esp,0xc
c0019ecc:	68 68 18 02 c0       	push   0xc0021868
c0019ed1:	e8 31 69 ff ff       	call   c0010807 <KePanic(char const*)>
c0019ed6:	83 c4 10             	add    esp,0x10
c0019ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0019edc:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019ee2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019ee5:	74 11                	je     c0019ef8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c0019ee7:	83 ec 0c             	sub    esp,0xc
c0019eea:	68 a3 18 02 c0       	push   0xc00218a3
c0019eef:	e8 13 69 ff ff       	call   c0010807 <KePanic(char const*)>
c0019ef4:	83 c4 10             	add    esp,0x10
c0019ef7:	90                   	nop
c0019ef8:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019efe:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019f01:	74 11                	je     c0019f14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c0019f03:	83 ec 0c             	sub    esp,0xc
c0019f06:	68 a3 18 02 c0       	push   0xc00218a3
c0019f0b:	e8 f7 68 ff ff       	call   c0010807 <KePanic(char const*)>
c0019f10:	83 c4 10             	add    esp,0x10
c0019f13:	90                   	nop
c0019f14:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0019f17:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0019f1b:	85 ff                	test   edi,edi
c0019f1d:	7e 21                	jle    c0019f40 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c0019f1f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019f26:	31 c0                	xor    eax,eax
c0019f28:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f2b:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c0019f2e:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0019f31:	01 d5                	add    ebp,edx
c0019f33:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c0019f36:	83 c0 04             	add    eax,0x4
c0019f39:	39 c1                	cmp    ecx,eax
c0019f3b:	75 eb                	jne    c0019f28 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c0019f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019f43:	83 ec 04             	sub    esp,0x4
c0019f46:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f49:	29 f8                	sub    eax,edi
c0019f4b:	c1 e0 02             	shl    eax,0x2
c0019f4e:	50                   	push   eax
c0019f4f:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019f52:	50                   	push   eax
c0019f53:	52                   	push   edx
c0019f54:	e8 77 64 fe ff       	call   c00003d0 <memmove>
c0019f59:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019f5c:	29 f8                	sub    eax,edi
c0019f5e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019f61:	83 c4 1c             	add    esp,0x1c
c0019f64:	89 f8                	mov    eax,edi
c0019f66:	5b                   	pop    ebx
c0019f67:	5e                   	pop    esi
c0019f68:	5f                   	pop    edi
c0019f69:	5d                   	pop    ebp
c0019f6a:	c3                   	ret    
c0019f6b:	90                   	nop

c0019f6c <PCI::open(int, int, void*)>:
c0019f6c:	83 ec 18             	sub    esp,0x18
c0019f6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019f73:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019f77:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019f7d:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f7f:	50                   	push   eax
c0019f80:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0019f83:	31 c0                	xor    eax,eax
c0019f85:	83 c4 1c             	add    esp,0x1c
c0019f88:	c3                   	ret    
c0019f89:	90                   	nop

c0019f8a <PCI::close(int, int, void*)>:
c0019f8a:	31 c0                	xor    eax,eax
c0019f8c:	c3                   	ret    
c0019f8d:	90                   	nop

c0019f8e <PCI::PCI()>:
c0019f8e:	83 ec 0c             	sub    esp,0xc
c0019f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f95:	83 ec 08             	sub    esp,0x8
c0019f98:	68 bf 18 02 c0       	push   0xc00218bf
c0019f9d:	50                   	push   eax
c0019f9e:	e8 bd 16 ff ff       	call   c000b660 <Bus::Bus(char const*)>
c0019fa3:	83 c4 10             	add    esp,0x10
c0019fa6:	ba 68 19 02 c0       	mov    edx,0xc0021968
c0019fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019faf:	89 10                	mov    DWORD PTR [eax],edx
c0019fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fb5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0019fbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fc3:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c0019fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fcc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019fd2:	0f b6 c0             	movzx  eax,al
c0019fd5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019fd9:	66 c7 44 82 04 f8 0c 	mov    WORD PTR [edx+eax*4+0x4],0xcf8
c0019fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fe4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019fea:	0f b6 c0             	movzx  eax,al
c0019fed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ff1:	c6 44 82 06 08       	mov    BYTE PTR [edx+eax*4+0x6],0x8
c0019ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ffa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a000:	8d 50 01             	lea    edx,[eax+0x1]
c001a003:	88 d1                	mov    cl,dl
c001a005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a009:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a00f:	0f b6 c0             	movzx  eax,al
c001a012:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a016:	8a 4c 82 07          	mov    cl,BYTE PTR [edx+eax*4+0x7]
c001a01a:	83 c9 c0             	or     ecx,0xffffffc0
c001a01d:	88 4c 82 07          	mov    BYTE PTR [edx+eax*4+0x7],cl
c001a021:	90                   	nop
c001a022:	83 c4 0c             	add    esp,0xc
c001a025:	c3                   	ret    

c001a026 <PCI::readBAR8(unsigned int, int)>:
c001a026:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a02a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a02e:	f6 c2 01             	test   dl,0x1
c001a031:	74 07                	je     c001a03a <PCI::readBAR8(unsigned int, int)+0x14>
c001a033:	83 e2 fc             	and    edx,0xfffffffc
c001a036:	01 c2                	add    edx,eax
c001a038:	ec                   	in     al,dx
c001a039:	c3                   	ret    
c001a03a:	83 e2 f0             	and    edx,0xfffffff0
c001a03d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a040:	c3                   	ret    
c001a041:	90                   	nop

c001a042 <PCI::readBAR16(unsigned int, int)>:
c001a042:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a046:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a04a:	f6 c2 01             	test   dl,0x1
c001a04d:	74 08                	je     c001a057 <PCI::readBAR16(unsigned int, int)+0x15>
c001a04f:	83 e2 fc             	and    edx,0xfffffffc
c001a052:	01 c2                	add    edx,eax
c001a054:	66 ed                	in     ax,dx
c001a056:	c3                   	ret    
c001a057:	83 e2 f0             	and    edx,0xfffffff0
c001a05a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a05e:	c3                   	ret    
c001a05f:	90                   	nop

c001a060 <PCI::readBAR32(unsigned int, int)>:
c001a060:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a064:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a068:	f6 c2 01             	test   dl,0x1
c001a06b:	74 07                	je     c001a074 <PCI::readBAR32(unsigned int, int)+0x14>
c001a06d:	83 e2 fc             	and    edx,0xfffffffc
c001a070:	01 c2                	add    edx,eax
c001a072:	ed                   	in     eax,dx
c001a073:	c3                   	ret    
c001a074:	83 e2 f0             	and    edx,0xfffffff0
c001a077:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a07a:	c3                   	ret    
c001a07b:	90                   	nop

c001a07c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a07c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a080:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a084:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a088:	f6 c2 01             	test   dl,0x1
c001a08b:	74 07                	je     c001a094 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a08d:	83 e2 fc             	and    edx,0xfffffffc
c001a090:	01 ca                	add    edx,ecx
c001a092:	ee                   	out    dx,al
c001a093:	c3                   	ret    
c001a094:	83 e2 f0             	and    edx,0xfffffff0
c001a097:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a09a:	c3                   	ret    
c001a09b:	90                   	nop

c001a09c <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a09c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a0a8:	f6 c2 01             	test   dl,0x1
c001a0ab:	74 08                	je     c001a0b5 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a0ad:	83 e2 fc             	and    edx,0xfffffffc
c001a0b0:	01 ca                	add    edx,ecx
c001a0b2:	66 ef                	out    dx,ax
c001a0b4:	c3                   	ret    
c001a0b5:	83 e2 f0             	and    edx,0xfffffff0
c001a0b8:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a0bc:	c3                   	ret    
c001a0bd:	90                   	nop

c001a0be <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a0be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a0ca:	f6 c2 01             	test   dl,0x1
c001a0cd:	74 07                	je     c001a0d6 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a0cf:	83 e2 fc             	and    edx,0xfffffffc
c001a0d2:	01 ca                	add    edx,ecx
c001a0d4:	ef                   	out    dx,eax
c001a0d5:	c3                   	ret    
c001a0d6:	83 e2 f0             	and    edx,0xfffffff0
c001a0d9:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a0dc:	c3                   	ret    
c001a0dd:	90                   	nop

c001a0de <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a0de:	55                   	push   ebp
c001a0df:	57                   	push   edi
c001a0e0:	56                   	push   esi
c001a0e1:	53                   	push   ebx
c001a0e2:	83 ec 0c             	sub    esp,0xc
c001a0e5:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a0ea:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a0ee:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a0f2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a0f6:	83 fe 07             	cmp    esi,0x7
c001a0f9:	76 10                	jbe    c001a10b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a0fb:	83 ec 0c             	sub    esp,0xc
c001a0fe:	68 c7 18 02 c0       	push   0xc00218c7
c001a103:	e8 ff 66 ff ff       	call   c0010807 <KePanic(char const*)>
c001a108:	83 c4 10             	add    esp,0x10
c001a10b:	0f b6 db             	movzx  ebx,bl
c001a10e:	83 fb 0f             	cmp    ebx,0xf
c001a111:	76 10                	jbe    c001a123 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a113:	83 ec 0c             	sub    esp,0xc
c001a116:	68 f7 18 02 c0       	push   0xc00218f7
c001a11b:	e8 e7 66 ff ff       	call   c0010807 <KePanic(char const*)>
c001a120:	83 c4 10             	add    esp,0x10
c001a123:	8d 04 36             	lea    eax,[esi+esi*1]
c001a126:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a12b:	83 c8 f0             	or     eax,0xfffffff0
c001a12e:	ee                   	out    dx,al
c001a12f:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a134:	89 e8                	mov    eax,ebp
c001a136:	ee                   	out    dx,al
c001a137:	89 f9                	mov    ecx,edi
c001a139:	89 d8                	mov    eax,ebx
c001a13b:	83 c4 0c             	add    esp,0xc
c001a13e:	0f b6 d9             	movzx  ebx,cl
c001a141:	c1 e0 08             	shl    eax,0x8
c001a144:	83 e3 fc             	and    ebx,0xfffffffc
c001a147:	09 d8                	or     eax,ebx
c001a149:	5b                   	pop    ebx
c001a14a:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a14f:	5e                   	pop    esi
c001a150:	5f                   	pop    edi
c001a151:	5d                   	pop    ebp
c001a152:	c3                   	ret    
c001a153:	90                   	nop

c001a154 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a154:	57                   	push   edi
c001a155:	56                   	push   esi
c001a156:	53                   	push   ebx
c001a157:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a15b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a15f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a163:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a167:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a16d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a171:	83 ff 01             	cmp    edi,0x1
c001a174:	75 3f                	jne    c001a1b5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a176:	89 de                	mov    esi,ebx
c001a178:	0f b6 c0             	movzx  eax,al
c001a17b:	0f b6 c9             	movzx  ecx,cl
c001a17e:	c1 e0 10             	shl    eax,0x10
c001a181:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a187:	c1 e1 08             	shl    ecx,0x8
c001a18a:	09 f0                	or     eax,esi
c001a18c:	0f b6 d2             	movzx  edx,dl
c001a18f:	c1 e2 0b             	shl    edx,0xb
c001a192:	09 c8                	or     eax,ecx
c001a194:	09 d0                	or     eax,edx
c001a196:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a19b:	0d 00 00 00 80       	or     eax,0x80000000
c001a1a0:	ef                   	out    dx,eax
c001a1a1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a1a6:	ed                   	in     eax,dx
c001a1a7:	83 e3 02             	and    ebx,0x2
c001a1aa:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a1b1:	d3 e8                	shr    eax,cl
c001a1b3:	eb 44                	jmp    c001a1f9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a1b5:	83 ff 02             	cmp    edi,0x2
c001a1b8:	75 2d                	jne    c001a1e7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a1ba:	83 ec 0c             	sub    esp,0xc
c001a1bd:	0f b6 c9             	movzx  ecx,cl
c001a1c0:	0f b6 d2             	movzx  edx,dl
c001a1c3:	0f b6 fb             	movzx  edi,bl
c001a1c6:	0f b6 c0             	movzx  eax,al
c001a1c9:	57                   	push   edi
c001a1ca:	51                   	push   ecx
c001a1cb:	52                   	push   edx
c001a1cc:	50                   	push   eax
c001a1cd:	56                   	push   esi
c001a1ce:	e8 0b ff ff ff       	call   c001a0de <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a1d3:	89 c2                	mov    edx,eax
c001a1d5:	ed                   	in     eax,dx
c001a1d6:	83 e3 02             	and    ebx,0x2
c001a1d9:	83 c4 20             	add    esp,0x20
c001a1dc:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a1e3:	d3 e8                	shr    eax,cl
c001a1e5:	eb 12                	jmp    c001a1f9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a1e7:	83 ec 0c             	sub    esp,0xc
c001a1ea:	68 27 19 02 c0       	push   0xc0021927
c001a1ef:	e8 13 66 ff ff       	call   c0010807 <KePanic(char const*)>
c001a1f4:	83 c4 10             	add    esp,0x10
c001a1f7:	31 c0                	xor    eax,eax
c001a1f9:	5b                   	pop    ebx
c001a1fa:	5e                   	pop    esi
c001a1fb:	5f                   	pop    edi
c001a1fc:	c3                   	ret    
c001a1fd:	90                   	nop

c001a1fe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a1fe:	83 ec 18             	sub    esp,0x18
c001a201:	6a 00                	push   0x0
c001a203:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a208:	50                   	push   eax
c001a209:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a20e:	50                   	push   eax
c001a20f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a214:	50                   	push   eax
c001a215:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a219:	e8 36 ff ff ff       	call   c001a154 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a21e:	83 c4 2c             	add    esp,0x2c
c001a221:	c3                   	ret    

c001a222 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a222:	83 ec 18             	sub    esp,0x18
c001a225:	6a 0e                	push   0xe
c001a227:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a22c:	50                   	push   eax
c001a22d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a232:	50                   	push   eax
c001a233:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a238:	50                   	push   eax
c001a239:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a23d:	e8 12 ff ff ff       	call   c001a154 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a242:	83 c4 2c             	add    esp,0x2c
c001a245:	0f b6 c0             	movzx  eax,al
c001a248:	c3                   	ret    
c001a249:	90                   	nop

c001a24a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a24a:	55                   	push   ebp
c001a24b:	57                   	push   edi
c001a24c:	56                   	push   esi
c001a24d:	53                   	push   ebx
c001a24e:	83 ec 18             	sub    esp,0x18
c001a251:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a256:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a25b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a260:	6a 0a                	push   0xa
c001a262:	56                   	push   esi
c001a263:	55                   	push   ebp
c001a264:	57                   	push   edi
c001a265:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a269:	e8 e6 fe ff ff       	call   c001a154 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a26e:	83 c4 14             	add    esp,0x14
c001a271:	6a 0a                	push   0xa
c001a273:	89 c3                	mov    ebx,eax
c001a275:	56                   	push   esi
c001a276:	0f b6 db             	movzx  ebx,bl
c001a279:	55                   	push   ebp
c001a27a:	57                   	push   edi
c001a27b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a27f:	e8 d0 fe ff ff       	call   c001a154 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a284:	83 c4 2c             	add    esp,0x2c
c001a287:	25 00 ff 00 00       	and    eax,0xff00
c001a28c:	09 d8                	or     eax,ebx
c001a28e:	5b                   	pop    ebx
c001a28f:	5e                   	pop    esi
c001a290:	5f                   	pop    edi
c001a291:	5d                   	pop    ebp
c001a292:	c3                   	ret    
c001a293:	90                   	nop

c001a294 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a294:	83 ec 18             	sub    esp,0x18
c001a297:	6a 08                	push   0x8
c001a299:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a29e:	50                   	push   eax
c001a29f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2a4:	50                   	push   eax
c001a2a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2aa:	50                   	push   eax
c001a2ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2af:	e8 a0 fe ff ff       	call   c001a154 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2b4:	83 c4 2c             	add    esp,0x2c
c001a2b7:	0f b6 c4             	movzx  eax,ah
c001a2ba:	c3                   	ret    
c001a2bb:	90                   	nop

c001a2bc <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a2bc:	83 ec 18             	sub    esp,0x18
c001a2bf:	6a 08                	push   0x8
c001a2c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2c6:	50                   	push   eax
c001a2c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2cc:	50                   	push   eax
c001a2cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2d2:	50                   	push   eax
c001a2d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2d7:	e8 78 fe ff ff       	call   c001a154 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2dc:	83 c4 2c             	add    esp,0x2c
c001a2df:	c3                   	ret    

c001a2e0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a2e0:	83 ec 18             	sub    esp,0x18
c001a2e3:	6a 3c                	push   0x3c
c001a2e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2ea:	50                   	push   eax
c001a2eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2f0:	50                   	push   eax
c001a2f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2f6:	50                   	push   eax
c001a2f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2fb:	e8 54 fe ff ff       	call   c001a154 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a300:	83 c4 2c             	add    esp,0x2c
c001a303:	c3                   	ret    

c001a304 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a304:	83 ec 18             	sub    esp,0x18
c001a307:	6a 18                	push   0x18
c001a309:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a30e:	50                   	push   eax
c001a30f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a314:	50                   	push   eax
c001a315:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a31a:	50                   	push   eax
c001a31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a31f:	e8 30 fe ff ff       	call   c001a154 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a324:	83 c4 2c             	add    esp,0x2c
c001a327:	0f b6 c4             	movzx  eax,ah
c001a32a:	c3                   	ret    
c001a32b:	90                   	nop

c001a32c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a32c:	55                   	push   ebp
c001a32d:	57                   	push   edi
c001a32e:	56                   	push   esi
c001a32f:	53                   	push   ebx
c001a330:	83 ec 28             	sub    esp,0x28
c001a333:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a337:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a33c:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a341:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a346:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a34d:	8d 43 12             	lea    eax,[ebx+0x12]
c001a350:	83 c3 10             	add    ebx,0x10
c001a353:	0f b6 c0             	movzx  eax,al
c001a356:	0f b6 db             	movzx  ebx,bl
c001a359:	50                   	push   eax
c001a35a:	51                   	push   ecx
c001a35b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a35f:	57                   	push   edi
c001a360:	55                   	push   ebp
c001a361:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a365:	e8 ea fd ff ff       	call   c001a154 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a36a:	83 c4 14             	add    esp,0x14
c001a36d:	53                   	push   ebx
c001a36e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a372:	89 c6                	mov    esi,eax
c001a374:	c1 e6 10             	shl    esi,0x10
c001a377:	51                   	push   ecx
c001a378:	57                   	push   edi
c001a379:	55                   	push   ebp
c001a37a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a37e:	e8 d1 fd ff ff       	call   c001a154 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a383:	83 c4 3c             	add    esp,0x3c
c001a386:	0f b7 c0             	movzx  eax,ax
c001a389:	5b                   	pop    ebx
c001a38a:	09 f0                	or     eax,esi
c001a38c:	5e                   	pop    esi
c001a38d:	5f                   	pop    edi
c001a38e:	5d                   	pop    ebp
c001a38f:	c3                   	ret    

c001a390 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a390:	55                   	push   ebp
c001a391:	57                   	push   edi
c001a392:	56                   	push   esi
c001a393:	53                   	push   ebx
c001a394:	83 ec 0c             	sub    esp,0xc
c001a397:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a39b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a39f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a3a3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a3a7:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001a3ad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a3b1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a3b5:	83 f9 01             	cmp    ecx,0x1
c001a3b8:	75 5d                	jne    c001a417 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001a3ba:	0f b6 c8             	movzx  ecx,al
c001a3bd:	89 f0                	mov    eax,esi
c001a3bf:	0f b6 d2             	movzx  edx,dl
c001a3c2:	c1 e1 10             	shl    ecx,0x10
c001a3c5:	25 fc 00 00 00       	and    eax,0xfc
c001a3ca:	c1 e2 0b             	shl    edx,0xb
c001a3cd:	09 c1                	or     ecx,eax
c001a3cf:	89 f8                	mov    eax,edi
c001a3d1:	0f b6 f8             	movzx  edi,al
c001a3d4:	c1 e7 08             	shl    edi,0x8
c001a3d7:	09 f9                	or     ecx,edi
c001a3d9:	09 d1                	or     ecx,edx
c001a3db:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a3e0:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a3e6:	89 c8                	mov    eax,ecx
c001a3e8:	ef                   	out    dx,eax
c001a3e9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a3ee:	ed                   	in     eax,dx
c001a3ef:	83 e6 02             	and    esi,0x2
c001a3f2:	0f b7 db             	movzx  ebx,bx
c001a3f5:	74 0a                	je     c001a401 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001a3f7:	0f b7 d0             	movzx  edx,ax
c001a3fa:	c1 e3 10             	shl    ebx,0x10
c001a3fd:	09 d3                	or     ebx,edx
c001a3ff:	eb 05                	jmp    c001a406 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001a401:	66 31 c0             	xor    ax,ax
c001a404:	09 c3                	or     ebx,eax
c001a406:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a40b:	89 c8                	mov    eax,ecx
c001a40d:	ef                   	out    dx,eax
c001a40e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a413:	89 d8                	mov    eax,ebx
c001a415:	eb 41                	jmp    c001a458 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a417:	83 f9 02             	cmp    ecx,0x2
c001a41a:	75 45                	jne    c001a461 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001a41c:	89 f1                	mov    ecx,esi
c001a41e:	83 ec 0c             	sub    esp,0xc
c001a421:	0f b6 d2             	movzx  edx,dl
c001a424:	0f b6 f1             	movzx  esi,cl
c001a427:	89 f9                	mov    ecx,edi
c001a429:	0f b6 c0             	movzx  eax,al
c001a42c:	0f b6 f9             	movzx  edi,cl
c001a42f:	56                   	push   esi
c001a430:	57                   	push   edi
c001a431:	52                   	push   edx
c001a432:	50                   	push   eax
c001a433:	55                   	push   ebp
c001a434:	e8 a5 fc ff ff       	call   c001a0de <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a439:	89 c2                	mov    edx,eax
c001a43b:	ed                   	in     eax,dx
c001a43c:	83 c4 20             	add    esp,0x20
c001a43f:	f6 c2 02             	test   dl,0x2
c001a442:	0f b7 db             	movzx  ebx,bx
c001a445:	74 0c                	je     c001a453 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001a447:	0f b7 c8             	movzx  ecx,ax
c001a44a:	89 d8                	mov    eax,ebx
c001a44c:	c1 e0 10             	shl    eax,0x10
c001a44f:	09 c8                	or     eax,ecx
c001a451:	eb 05                	jmp    c001a458 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001a453:	66 31 c0             	xor    ax,ax
c001a456:	09 d8                	or     eax,ebx
c001a458:	ef                   	out    dx,eax
c001a459:	83 c4 0c             	add    esp,0xc
c001a45c:	5b                   	pop    ebx
c001a45d:	5e                   	pop    esi
c001a45e:	5f                   	pop    edi
c001a45f:	5d                   	pop    ebp
c001a460:	c3                   	ret    
c001a461:	c7 44 24 20 27 19 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021927
c001a469:	83 c4 0c             	add    esp,0xc
c001a46c:	5b                   	pop    ebx
c001a46d:	5e                   	pop    esi
c001a46e:	5f                   	pop    edi
c001a46f:	5d                   	pop    ebp
c001a470:	e9 92 63 ff ff       	jmp    c0010807 <KePanic(char const*)>
c001a475:	90                   	nop

c001a476 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a476:	55                   	push   ebp
c001a477:	57                   	push   edi
c001a478:	56                   	push   esi
c001a479:	53                   	push   ebx
c001a47a:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a480:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a487:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001a48e:	0f 85 bd 00 00 00    	jne    c001a551 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a494:	83 ec 0c             	sub    esp,0xc
c001a497:	68 14 01 00 00       	push   0x114
c001a49c:	e8 8e d5 fe ff       	call   c0007a2f <malloc>
c001a4a1:	83 c4 0c             	add    esp,0xc
c001a4a4:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a4aa:	89 c3                	mov    ebx,eax
c001a4ac:	68 2d 19 02 c0       	push   0xc002192d
c001a4b1:	50                   	push   eax
c001a4b2:	e8 93 09 ff ff       	call   c000ae4a <File::File(char const*, Process*)>
c001a4b7:	83 c4 10             	add    esp,0x10
c001a4ba:	85 db                	test   ebx,ebx
c001a4bc:	0f 84 6b 02 00 00    	je     c001a72d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a4c2:	57                   	push   edi
c001a4c3:	57                   	push   edi
c001a4c4:	6a 01                	push   0x1
c001a4c6:	53                   	push   ebx
c001a4c7:	e8 3a 0a ff ff       	call   c000af06 <File::open(FileOpenMode)>
c001a4cc:	83 c4 10             	add    esp,0x10
c001a4cf:	85 c0                	test   eax,eax
c001a4d1:	0f 85 56 02 00 00    	jne    c001a72d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a4d7:	52                   	push   edx
c001a4d8:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a4dc:	50                   	push   eax
c001a4dd:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a4e1:	50                   	push   eax
c001a4e2:	53                   	push   ebx
c001a4e3:	e8 ca 0c ff ff       	call   c000b1b2 <File::stat(unsigned long long*, bool*)>
c001a4e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a4ec:	40                   	inc    eax
c001a4ed:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4f0:	e8 3a d5 fe ff       	call   c0007a2f <malloc>
c001a4f5:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a4f9:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a4fe:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a502:	59                   	pop    ecx
c001a503:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a505:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a509:	51                   	push   ecx
c001a50a:	50                   	push   eax
c001a50b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a50f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a513:	53                   	push   ebx
c001a514:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a517:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a51b:	83 c4 20             	add    esp,0x20
c001a51e:	89 c8                	mov    eax,ecx
c001a520:	99                   	cdq    
c001a521:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a525:	0f 85 02 02 00 00    	jne    c001a72d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a52b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a52f:	0f 85 f8 01 00 00    	jne    c001a72d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a535:	83 ec 0c             	sub    esp,0xc
c001a538:	53                   	push   ebx
c001a539:	e8 26 0a ff ff       	call   c000af64 <File::close()>
c001a53e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a542:	83 c4 10             	add    esp,0x10
c001a545:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a54c:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a551:	8b 2d 44 8b 02 c0    	mov    ebp,DWORD PTR ds:0xc0028b44
c001a557:	31 c9                	xor    ecx,ecx
c001a559:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001a560:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a568:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a56f:	8b 15 48 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028b48
c001a575:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a57a:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a582:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a587:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a58f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a593:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a59b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a59f:	39 cd                	cmp    ebp,ecx
c001a5a1:	0f 8e 86 01 00 00    	jle    c001a72d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001a5a7:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001a5aa:	d4 40                	aam    0x40
c001a5ac:	d5 39                	aad    0x39
c001a5ae:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a5b2:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001a5b6:	d4 40                	aam    0x40
c001a5b8:	d5 39                	aad    0x39
c001a5ba:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a5be:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001a5c2:	d4 40                	aam    0x40
c001a5c4:	d5 39                	aad    0x39
c001a5c6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a5ca:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001a5ce:	d4 40                	aam    0x40
c001a5d0:	d5 39                	aad    0x39
c001a5d2:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a5d6:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001a5da:	3c 56                	cmp    al,0x56
c001a5dc:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a5e0:	74 47                	je     c001a629 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001a5e2:	d4 40                	aam    0x40
c001a5e4:	d5 39                	aad    0x39
c001a5e6:	8d 58 d0             	lea    ebx,[eax-0x30]
c001a5e9:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001a5ed:	0f b6 db             	movzx  ebx,bl
c001a5f0:	c1 e3 04             	shl    ebx,0x4
c001a5f3:	d4 40                	aam    0x40
c001a5f5:	d5 39                	aad    0x39
c001a5f7:	83 e8 30             	sub    eax,0x30
c001a5fa:	0f b6 c0             	movzx  eax,al
c001a5fd:	09 c3                	or     ebx,eax
c001a5ff:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001a603:	c1 e3 04             	shl    ebx,0x4
c001a606:	d4 40                	aam    0x40
c001a608:	d5 39                	aad    0x39
c001a60a:	83 e8 30             	sub    eax,0x30
c001a60d:	0f b6 c0             	movzx  eax,al
c001a610:	09 c3                	or     ebx,eax
c001a612:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001a616:	c1 e3 04             	shl    ebx,0x4
c001a619:	d4 40                	aam    0x40
c001a61b:	d5 39                	aad    0x39
c001a61d:	83 e8 30             	sub    eax,0x30
c001a620:	0f b6 c0             	movzx  eax,al
c001a623:	09 c3                	or     ebx,eax
c001a625:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a629:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001a62d:	80 fb 58             	cmp    bl,0x58
c001a630:	74 49                	je     c001a67b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001a632:	88 d8                	mov    al,bl
c001a634:	d4 40                	aam    0x40
c001a636:	d5 39                	aad    0x39
c001a638:	83 e8 30             	sub    eax,0x30
c001a63b:	0f b6 f8             	movzx  edi,al
c001a63e:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001a642:	c1 e7 04             	shl    edi,0x4
c001a645:	d4 40                	aam    0x40
c001a647:	d5 39                	aad    0x39
c001a649:	83 e8 30             	sub    eax,0x30
c001a64c:	0f b6 c0             	movzx  eax,al
c001a64f:	09 c7                	or     edi,eax
c001a651:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001a655:	c1 e7 04             	shl    edi,0x4
c001a658:	d4 40                	aam    0x40
c001a65a:	d5 39                	aad    0x39
c001a65c:	83 e8 30             	sub    eax,0x30
c001a65f:	0f b6 c0             	movzx  eax,al
c001a662:	09 c7                	or     edi,eax
c001a664:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001a668:	c1 e7 04             	shl    edi,0x4
c001a66b:	d4 40                	aam    0x40
c001a66d:	d5 39                	aad    0x39
c001a66f:	83 e8 30             	sub    eax,0x30
c001a672:	0f b6 c0             	movzx  eax,al
c001a675:	09 c7                	or     edi,eax
c001a677:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001a67b:	8d 41 10             	lea    eax,[ecx+0x10]
c001a67e:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001a682:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001a686:	83 f9 0a             	cmp    ecx,0xa
c001a689:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001a68d:	74 07                	je     c001a696 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001a68f:	47                   	inc    edi
c001a690:	39 c5                	cmp    ebp,eax
c001a692:	75 16                	jne    c001a6aa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001a694:	89 e8                	mov    eax,ebp
c001a696:	83 f9 0a             	cmp    ecx,0xa
c001a699:	0f 94 c1             	sete   cl
c001a69c:	0f b6 c9             	movzx  ecx,cl
c001a69f:	01 c1                	add    ecx,eax
c001a6a1:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001a6a6:	75 0f                	jne    c001a6b7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001a6a8:	eb 1c                	jmp    c001a6c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001a6aa:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001a6ae:	40                   	inc    eax
c001a6af:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a6b2:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001a6b5:	eb cb                	jmp    c001a682 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001a6b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a6bb:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001a6c0:	0f 85 d9 fe ff ff    	jne    c001a59f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a6c6:	80 fb 58             	cmp    bl,0x58
c001a6c9:	74 10                	je     c001a6db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001a6cb:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001a6d0:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001a6d5:	0f 85 c4 fe ff ff    	jne    c001a59f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a6db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a6df:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a6e3:	83 e8 30             	sub    eax,0x30
c001a6e6:	c1 e0 04             	shl    eax,0x4
c001a6e9:	83 eb 30             	sub    ebx,0x30
c001a6ec:	09 d8                	or     eax,ebx
c001a6ee:	0f b6 c0             	movzx  eax,al
c001a6f1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a6f5:	0f 85 a4 fe ff ff    	jne    c001a59f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a6fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6ff:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a703:	83 e8 30             	sub    eax,0x30
c001a706:	c1 e0 04             	shl    eax,0x4
c001a709:	83 eb 30             	sub    ebx,0x30
c001a70c:	09 d8                	or     eax,ebx
c001a70e:	0f b6 c0             	movzx  eax,al
c001a711:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001a715:	0f 85 84 fe ff ff    	jne    c001a59f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001a71b:	50                   	push   eax
c001a71c:	50                   	push   eax
c001a71d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a721:	50                   	push   eax
c001a722:	56                   	push   esi
c001a723:	e8 c8 5e fe ff       	call   c00005f0 <strcpy>
c001a728:	83 c4 10             	add    esp,0x10
c001a72b:	eb 05                	jmp    c001a732 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001a72d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a730:	31 f6                	xor    esi,esi
c001a732:	81 c4 4c 01 00 00    	add    esp,0x14c
c001a738:	89 f0                	mov    eax,esi
c001a73a:	5b                   	pop    ebx
c001a73b:	5e                   	pop    esi
c001a73c:	5f                   	pop    edi
c001a73d:	5d                   	pop    ebp
c001a73e:	c3                   	ret    
c001a73f:	90                   	nop

c001a740 <PCI::checkBus(unsigned char)>:
c001a740:	56                   	push   esi
c001a741:	53                   	push   ebx
c001a742:	31 db                	xor    ebx,ebx
c001a744:	51                   	push   ecx
c001a745:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a74a:	52                   	push   edx
c001a74b:	53                   	push   ebx
c001a74c:	43                   	inc    ebx
c001a74d:	56                   	push   esi
c001a74e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a752:	e8 1b 03 00 00       	call   c001aa72 <PCI::checkDevice(unsigned char, unsigned char)>
c001a757:	83 c4 10             	add    esp,0x10
c001a75a:	83 fb 20             	cmp    ebx,0x20
c001a75d:	75 eb                	jne    c001a74a <PCI::checkBus(unsigned char)+0xa>
c001a75f:	58                   	pop    eax
c001a760:	5b                   	pop    ebx
c001a761:	5e                   	pop    esi
c001a762:	c3                   	ret    
c001a763:	90                   	nop

c001a764 <PCI::foundDevice(PCIDeviceInfo)>:
c001a764:	55                   	push   ebp
c001a765:	57                   	push   edi
c001a766:	56                   	push   esi
c001a767:	53                   	push   ebx
c001a768:	83 ec 1c             	sub    esp,0x1c
c001a76b:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a770:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a774:	3d ff ff 00 00       	cmp    eax,0xffff
c001a779:	0f 84 52 01 00 00    	je     c001a8d1 <PCI::foundDevice(PCIDeviceInfo)+0x16d>
c001a77f:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001a784:	66 3d 06 04          	cmp    ax,0x406
c001a788:	75 2c                	jne    c001a7b6 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001a78a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a78f:	50                   	push   eax
c001a790:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a795:	50                   	push   eax
c001a796:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a79b:	50                   	push   eax
c001a79c:	56                   	push   esi
c001a79d:	e8 62 fb ff ff       	call   c001a304 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a7a2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a7a6:	0f b6 c0             	movzx  eax,al
c001a7a9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a7ad:	83 c4 2c             	add    esp,0x2c
c001a7b0:	5b                   	pop    ebx
c001a7b1:	5e                   	pop    esi
c001a7b2:	5f                   	pop    edi
c001a7b3:	5d                   	pop    ebp
c001a7b4:	eb 8a                	jmp    c001a740 <PCI::checkBus(unsigned char)>
c001a7b6:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001a7bb:	8b 96 cc 00 00 00    	mov    edx,DWORD PTR [esi+0xcc]
c001a7c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a7c5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a7c9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001a7cd:	85 d2                	test   edx,edx
c001a7cf:	74 34                	je     c001a805 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001a7d1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001a7d4:	85 c9                	test   ecx,ecx
c001a7d6:	74 29                	je     c001a801 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a7d8:	8b b9 18 01 00 00    	mov    edi,DWORD PTR [ecx+0x118]
c001a7de:	31 df                	xor    edi,ebx
c001a7e0:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001a7e6:	75 19                	jne    c001a801 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a7e8:	39 a9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],ebp
c001a7ee:	75 11                	jne    c001a801 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a7f0:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001a7f7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001a7fb:	0f 84 d0 00 00 00    	je     c001a8d1 <PCI::foundDevice(PCIDeviceInfo)+0x16d>
c001a801:	8b 12                	mov    edx,DWORD PTR [edx]
c001a803:	eb c8                	jmp    c001a7cd <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001a805:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001a809:	3d 01 06 00 00       	cmp    eax,0x601
c001a80e:	75 19                	jne    c001a829 <PCI::foundDevice(PCIDeviceInfo)+0xc5>
c001a810:	83 ec 0c             	sub    esp,0xc
c001a813:	68 64 01 00 00       	push   0x164
c001a818:	e8 12 d2 fe ff       	call   c0007a2f <malloc>
c001a81d:	89 c5                	mov    ebp,eax
c001a81f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a822:	e8 b7 0e 00 00       	call   c001b6de <SATABus::SATABus()>
c001a827:	eb 1e                	jmp    c001a847 <PCI::foundDevice(PCIDeviceInfo)+0xe3>
c001a829:	3d 01 01 00 00       	cmp    eax,0x101
c001a82e:	75 60                	jne    c001a890 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001a830:	83 ec 0c             	sub    esp,0xc
c001a833:	68 70 02 00 00       	push   0x270
c001a838:	e8 f2 d1 fe ff       	call   c0007a2f <malloc>
c001a83d:	89 c5                	mov    ebp,eax
c001a83f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a842:	e8 fb 02 00 00       	call   c001ab42 <IDE::IDE()>
c001a847:	58                   	pop    eax
c001a848:	5a                   	pop    edx
c001a849:	55                   	push   ebp
c001a84a:	56                   	push   esi
c001a84b:	e8 b6 14 ff ff       	call   c000bd06 <Device::addChild(Device*)>
c001a850:	83 ec 1c             	sub    esp,0x1c
c001a853:	b9 09 00 00 00       	mov    ecx,0x9
c001a858:	fc                   	cld    
c001a859:	89 e7                	mov    edi,esp
c001a85b:	89 de                	mov    esi,ebx
c001a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a85f:	55                   	push   ebp
c001a860:	e8 e7 13 ff ff       	call   c000bc4c <Device::preOpenPCI(PCIDeviceInfo)>
c001a865:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a868:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a86c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a874:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a87c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a884:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001a887:	83 c4 4c             	add    esp,0x4c
c001a88a:	5b                   	pop    ebx
c001a88b:	5e                   	pop    esi
c001a88c:	5f                   	pop    edi
c001a88d:	5d                   	pop    ebp
c001a88e:	ff e0                	jmp    eax
c001a890:	83 ec 0c             	sub    esp,0xc
c001a893:	68 58 01 00 00       	push   0x158
c001a898:	e8 92 d1 fe ff       	call   c0007a2f <malloc>
c001a89d:	89 c5                	mov    ebp,eax
c001a89f:	58                   	pop    eax
c001a8a0:	5a                   	pop    edx
c001a8a1:	68 46 19 02 c0       	push   0xc0021946
c001a8a6:	55                   	push   ebp
c001a8a7:	e8 f8 16 ff ff       	call   c000bfa4 <DriverlessDevice::DriverlessDevice(char const*)>
c001a8ac:	59                   	pop    ecx
c001a8ad:	5f                   	pop    edi
c001a8ae:	55                   	push   ebp
c001a8af:	56                   	push   esi
c001a8b0:	e8 51 14 ff ff       	call   c000bd06 <Device::addChild(Device*)>
c001a8b5:	b9 09 00 00 00       	mov    ecx,0x9
c001a8ba:	fc                   	cld    
c001a8bb:	89 df                	mov    edi,ebx
c001a8bd:	89 de                	mov    esi,ebx
c001a8bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a8c1:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001a8c5:	83 c4 2c             	add    esp,0x2c
c001a8c8:	5b                   	pop    ebx
c001a8c9:	5e                   	pop    esi
c001a8ca:	5f                   	pop    edi
c001a8cb:	5d                   	pop    ebp
c001a8cc:	e9 7b 13 ff ff       	jmp    c000bc4c <Device::preOpenPCI(PCIDeviceInfo)>
c001a8d1:	83 c4 1c             	add    esp,0x1c
c001a8d4:	5b                   	pop    ebx
c001a8d5:	5e                   	pop    esi
c001a8d6:	5f                   	pop    edi
c001a8d7:	5d                   	pop    ebp
c001a8d8:	c3                   	ret    
c001a8d9:	90                   	nop

c001a8da <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a8da:	55                   	push   ebp
c001a8db:	57                   	push   edi
c001a8dc:	56                   	push   esi
c001a8dd:	53                   	push   ebx
c001a8de:	83 ec 68             	sub    esp,0x68
c001a8e1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a8e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a8ec:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a8f3:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001a8f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a8fc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a903:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001a908:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a90c:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001a911:	6a 0c                	push   0xc
c001a913:	56                   	push   esi
c001a914:	53                   	push   ebx
c001a915:	55                   	push   ebp
c001a916:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001a91d:	e8 32 f8 ff ff       	call   c001a154 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a922:	83 c4 20             	add    esp,0x20
c001a925:	56                   	push   esi
c001a926:	53                   	push   ebx
c001a927:	55                   	push   ebp
c001a928:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001a92c:	e8 19 f9 ff ff       	call   c001a24a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a931:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001a936:	56                   	push   esi
c001a937:	53                   	push   ebx
c001a938:	55                   	push   ebp
c001a939:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001a940:	e8 9b f9 ff ff       	call   c001a2e0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a945:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a949:	83 c4 14             	add    esp,0x14
c001a94c:	6a 3c                	push   0x3c
c001a94e:	56                   	push   esi
c001a94f:	53                   	push   ebx
c001a950:	55                   	push   ebp
c001a951:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001a958:	e8 f7 f7 ff ff       	call   c001a154 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a95d:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001a963:	0f b6 c4             	movzx  eax,ah
c001a966:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a96a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a96e:	8b 8a 68 01 00 00    	mov    ecx,DWORD PTR [edx+0x168]
c001a974:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001a978:	83 c4 20             	add    esp,0x20
c001a97b:	8b b9 5c 11 00 00    	mov    edi,DWORD PTR [ecx+0x115c]
c001a981:	85 ff                	test   edi,edi
c001a983:	74 2e                	je     c001a9b3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd9>
c001a985:	31 d2                	xor    edx,edx
c001a987:	39 d7                	cmp    edi,edx
c001a989:	7e 28                	jle    c001a9b3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd9>
c001a98b:	0f b7 84 d1 5c 01 00 00 	movzx  eax,WORD PTR [ecx+edx*8+0x15c]
c001a993:	39 c3                	cmp    ebx,eax
c001a995:	75 19                	jne    c001a9b0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd6>
c001a997:	0f b6 84 d1 5e 01 00 00 	movzx  eax,BYTE PTR [ecx+edx*8+0x15e]
c001a99f:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001a9a3:	75 0b                	jne    c001a9b0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd6>
c001a9a5:	8a 84 d1 5f 01 00 00 	mov    al,BYTE PTR [ecx+edx*8+0x15f]
c001a9ac:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a9b0:	42                   	inc    edx
c001a9b1:	eb d4                	jmp    c001a987 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xad>
c001a9b3:	31 ff                	xor    edi,edi
c001a9b5:	83 ec 0c             	sub    esp,0xc
c001a9b8:	56                   	push   esi
c001a9b9:	53                   	push   ebx
c001a9ba:	55                   	push   ebp
c001a9bb:	57                   	push   edi
c001a9bc:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001a9c3:	e8 64 f9 ff ff       	call   c001a32c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a9c8:	89 44 bc 54          	mov    DWORD PTR [esp+edi*4+0x54],eax
c001a9cc:	47                   	inc    edi
c001a9cd:	83 c4 20             	add    esp,0x20
c001a9d0:	83 ff 06             	cmp    edi,0x6
c001a9d3:	75 e0                	jne    c001a9b5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xdb>
c001a9d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a9d9:	83 ec 0c             	sub    esp,0xc
c001a9dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a9e0:	c1 e2 08             	shl    edx,0x8
c001a9e3:	0f b6 c4             	movzx  eax,ah
c001a9e6:	09 d0                	or     eax,edx
c001a9e8:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001a9ed:	6a 02                	push   0x2
c001a9ef:	56                   	push   esi
c001a9f0:	53                   	push   ebx
c001a9f1:	55                   	push   ebp
c001a9f2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001a9f9:	e8 56 f7 ff ff       	call   c001a154 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a9fe:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001aa03:	83 c4 20             	add    esp,0x20
c001aa06:	56                   	push   esi
c001aa07:	53                   	push   ebx
c001aa08:	55                   	push   ebp
c001aa09:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001aa0d:	e8 82 f8 ff ff       	call   c001a294 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001aa12:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001aa16:	56                   	push   esi
c001aa17:	53                   	push   ebx
c001aa18:	55                   	push   ebp
c001aa19:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001aa20:	e8 d9 f7 ff ff       	call   c001a1fe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aa25:	b9 09 00 00 00       	mov    ecx,0x9
c001aa2a:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001aa2f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001aa33:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001aa37:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001aa3b:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001aa3f:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001aa43:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001aa47:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001aa4b:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001aa4f:	83 ec 0c             	sub    esp,0xc
c001aa52:	fc                   	cld    
c001aa53:	8d 74 24 58          	lea    esi,[esp+0x58]
c001aa57:	89 e7                	mov    edi,esp
c001aa59:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aa5b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001aa62:	e8 fd fc ff ff       	call   c001a764 <PCI::foundDevice(PCIDeviceInfo)>
c001aa67:	81 c4 8c 00 00 00    	add    esp,0x8c
c001aa6d:	5b                   	pop    ebx
c001aa6e:	5e                   	pop    esi
c001aa6f:	5f                   	pop    edi
c001aa70:	5d                   	pop    ebp
c001aa71:	c3                   	ret    

c001aa72 <PCI::checkDevice(unsigned char, unsigned char)>:
c001aa72:	55                   	push   ebp
c001aa73:	57                   	push   edi
c001aa74:	56                   	push   esi
c001aa75:	53                   	push   ebx
c001aa76:	83 ec 0c             	sub    esp,0xc
c001aa79:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001aa7d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001aa82:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001aa87:	6a 00                	push   0x0
c001aa89:	56                   	push   esi
c001aa8a:	57                   	push   edi
c001aa8b:	55                   	push   ebp
c001aa8c:	e8 6d f7 ff ff       	call   c001a1fe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aa91:	6a 00                	push   0x0
c001aa93:	56                   	push   esi
c001aa94:	57                   	push   edi
c001aa95:	55                   	push   ebp
c001aa96:	e8 3f fe ff ff       	call   c001a8da <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001aa9b:	83 c4 20             	add    esp,0x20
c001aa9e:	6a 00                	push   0x0
c001aaa0:	56                   	push   esi
c001aaa1:	57                   	push   edi
c001aaa2:	55                   	push   ebp
c001aaa3:	e8 7a f7 ff ff       	call   c001a222 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001aaa8:	83 c4 10             	add    esp,0x10
c001aaab:	a8 80                	test   al,0x80
c001aaad:	74 2d                	je     c001aadc <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001aaaf:	bb 01 00 00 00       	mov    ebx,0x1
c001aab4:	53                   	push   ebx
c001aab5:	56                   	push   esi
c001aab6:	57                   	push   edi
c001aab7:	55                   	push   ebp
c001aab8:	e8 41 f7 ff ff       	call   c001a1fe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aabd:	83 c4 10             	add    esp,0x10
c001aac0:	0f b7 c0             	movzx  eax,ax
c001aac3:	3d ff ff 00 00       	cmp    eax,0xffff
c001aac8:	74 0c                	je     c001aad6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001aaca:	53                   	push   ebx
c001aacb:	56                   	push   esi
c001aacc:	57                   	push   edi
c001aacd:	55                   	push   ebp
c001aace:	e8 07 fe ff ff       	call   c001a8da <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001aad3:	83 c4 10             	add    esp,0x10
c001aad6:	43                   	inc    ebx
c001aad7:	83 fb 08             	cmp    ebx,0x8
c001aada:	75 d8                	jne    c001aab4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001aadc:	83 c4 0c             	add    esp,0xc
c001aadf:	5b                   	pop    ebx
c001aae0:	5e                   	pop    esi
c001aae1:	5f                   	pop    edi
c001aae2:	5d                   	pop    ebp
c001aae3:	c3                   	ret    

c001aae4 <PCI::detect()>:
c001aae4:	56                   	push   esi
c001aae5:	53                   	push   ebx
c001aae6:	53                   	push   ebx
c001aae7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aaeb:	31 db                	xor    ebx,ebx
c001aaed:	6a 00                	push   0x0
c001aaef:	6a 00                	push   0x0
c001aaf1:	6a 00                	push   0x0
c001aaf3:	56                   	push   esi
c001aaf4:	e8 29 f7 ff ff       	call   c001a222 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001aaf9:	83 c4 10             	add    esp,0x10
c001aafc:	a8 80                	test   al,0x80
c001aafe:	75 21                	jne    c001ab21 <PCI::detect()+0x3d>
c001ab00:	51                   	push   ecx
c001ab01:	51                   	push   ecx
c001ab02:	6a 00                	push   0x0
c001ab04:	56                   	push   esi
c001ab05:	e8 36 fc ff ff       	call   c001a740 <PCI::checkBus(unsigned char)>
c001ab0a:	83 c4 10             	add    esp,0x10
c001ab0d:	eb 2a                	jmp    c001ab39 <PCI::detect()+0x55>
c001ab0f:	52                   	push   edx
c001ab10:	52                   	push   edx
c001ab11:	53                   	push   ebx
c001ab12:	43                   	inc    ebx
c001ab13:	56                   	push   esi
c001ab14:	e8 27 fc ff ff       	call   c001a740 <PCI::checkBus(unsigned char)>
c001ab19:	83 c4 10             	add    esp,0x10
c001ab1c:	83 fb 08             	cmp    ebx,0x8
c001ab1f:	74 18                	je     c001ab39 <PCI::detect()+0x55>
c001ab21:	53                   	push   ebx
c001ab22:	6a 00                	push   0x0
c001ab24:	6a 00                	push   0x0
c001ab26:	56                   	push   esi
c001ab27:	e8 d2 f6 ff ff       	call   c001a1fe <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab2c:	83 c4 10             	add    esp,0x10
c001ab2f:	0f b7 c0             	movzx  eax,ax
c001ab32:	3d ff ff 00 00       	cmp    eax,0xffff
c001ab37:	74 d6                	je     c001ab0f <PCI::detect()+0x2b>
c001ab39:	58                   	pop    eax
c001ab3a:	5b                   	pop    ebx
c001ab3b:	5e                   	pop    esi
c001ab3c:	c3                   	ret    
c001ab3d:	90                   	nop

c001ab3e <IDE::close(int, int, void*)>:
c001ab3e:	83 c8 ff             	or     eax,0xffffffff
c001ab41:	c3                   	ret    

c001ab42 <IDE::IDE()>:
c001ab42:	83 ec 0c             	sub    esp,0xc
c001ab45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab49:	83 ec 08             	sub    esp,0x8
c001ab4c:	68 8c 19 02 c0       	push   0xc002198c
c001ab51:	50                   	push   eax
c001ab52:	e8 f1 14 ff ff       	call   c000c048 <HardDiskController::HardDiskController(char const*)>
c001ab57:	83 c4 10             	add    esp,0x10
c001ab5a:	ba 1c 1a 02 c0       	mov    edx,0xc0021a1c
c001ab5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab63:	89 10                	mov    DWORD PTR [eax],edx
c001ab65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab69:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ab70:	90                   	nop
c001ab71:	83 c4 0c             	add    esp,0xc
c001ab74:	c3                   	ret    
c001ab75:	90                   	nop

c001ab76 <IDE::prepareInterrupt(unsigned char)>:
c001ab76:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ab7b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ab7f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ab87:	c3                   	ret    

c001ab88 <selectDrive(unsigned char, unsigned char)>:
c001ab88:	c3                   	ret    
c001ab89:	90                   	nop

c001ab8a <IDE::getBase(unsigned char)>:
c001ab8a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ab8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab93:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ab9b:	c3                   	ret    

c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ab9c:	55                   	push   ebp
c001ab9d:	57                   	push   edi
c001ab9e:	56                   	push   esi
c001ab9f:	53                   	push   ebx
c001aba0:	83 ec 1c             	sub    esp,0x1c
c001aba3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001aba7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001abab:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001abaf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001abb3:	8d 43 f8             	lea    eax,[ebx-0x8]
c001abb6:	3c 03                	cmp    al,0x3
c001abb8:	77 50                	ja     c001ac0a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001abba:	0f b6 f2             	movzx  esi,dl
c001abbd:	0f b6 db             	movzx  ebx,bl
c001abc0:	8d 4e 2a             	lea    ecx,[esi+0x2a]
c001abc3:	0f b6 44 cf 10       	movzx  eax,BYTE PTR [edi+ecx*8+0x10]
c001abc8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001abcc:	0c 80                	or     al,0x80
c001abce:	50                   	push   eax
c001abcf:	6a 0c                	push   0xc
c001abd1:	56                   	push   esi
c001abd2:	57                   	push   edi
c001abd3:	e8 c4 ff ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001abd8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001abdc:	66 8b 44 cf 0a       	mov    ax,WORD PTR [edi+ecx*8+0xa]
c001abe1:	8d 54 18 fa          	lea    edx,[eax+ebx*1-0x6]
c001abe5:	89 e8                	mov    eax,ebp
c001abe7:	ee                   	out    dx,al
c001abe8:	0f b6 44 cf 10       	movzx  eax,BYTE PTR [edi+ecx*8+0x10]
c001abed:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001abf1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001abf5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001abfd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ac01:	83 c4 2c             	add    esp,0x2c
c001ac04:	5b                   	pop    ebx
c001ac05:	5e                   	pop    esi
c001ac06:	5f                   	pop    edi
c001ac07:	5d                   	pop    ebp
c001ac08:	eb 92                	jmp    c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac0a:	0f b6 c3             	movzx  eax,bl
c001ac0d:	83 f8 07             	cmp    eax,0x7
c001ac10:	77 12                	ja     c001ac24 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ac12:	0f b6 d2             	movzx  edx,dl
c001ac15:	0f b6 db             	movzx  ebx,bl
c001ac18:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001ac20:	01 da                	add    edx,ebx
c001ac22:	eb 2f                	jmp    c001ac53 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ac24:	83 f8 0d             	cmp    eax,0xd
c001ac27:	77 13                	ja     c001ac3c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ac29:	0f b6 d2             	movzx  edx,dl
c001ac2c:	0f b6 db             	movzx  ebx,bl
c001ac2f:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001ac36:	8d 54 18 f4          	lea    edx,[eax+ebx*1-0xc]
c001ac3a:	eb 17                	jmp    c001ac53 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ac3c:	83 f8 15             	cmp    eax,0x15
c001ac3f:	77 15                	ja     c001ac56 <IDE::write(unsigned char, unsigned char, unsigned char)+0xba>
c001ac41:	0f b6 d2             	movzx  edx,dl
c001ac44:	0f b6 db             	movzx  ebx,bl
c001ac47:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ac4f:	8d 54 18 f2          	lea    edx,[eax+ebx*1-0xe]
c001ac53:	89 e8                	mov    eax,ebp
c001ac55:	ee                   	out    dx,al
c001ac56:	83 c4 1c             	add    esp,0x1c
c001ac59:	5b                   	pop    ebx
c001ac5a:	5e                   	pop    esi
c001ac5b:	5f                   	pop    edi
c001ac5c:	5d                   	pop    ebp
c001ac5d:	c3                   	ret    

c001ac5e <IDE::read(unsigned char, unsigned char)>:
c001ac5e:	55                   	push   ebp
c001ac5f:	57                   	push   edi
c001ac60:	56                   	push   esi
c001ac61:	53                   	push   ebx
c001ac62:	83 ec 1c             	sub    esp,0x1c
c001ac65:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac69:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac71:	8d 4a f8             	lea    ecx,[edx-0x8]
c001ac74:	80 f9 03             	cmp    cl,0x3
c001ac77:	77 42                	ja     c001acbb <IDE::read(unsigned char, unsigned char)+0x5d>
c001ac79:	0f b6 f8             	movzx  edi,al
c001ac7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ac80:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ac83:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ac88:	0c 80                	or     al,0x80
c001ac8a:	50                   	push   eax
c001ac8b:	6a 0c                	push   0xc
c001ac8d:	57                   	push   edi
c001ac8e:	56                   	push   esi
c001ac8f:	e8 08 ff ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac98:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ac9d:	0f b6 d2             	movzx  edx,dl
c001aca0:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001aca4:	ec                   	in     al,dx
c001aca5:	88 c3                	mov    bl,al
c001aca7:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001acac:	50                   	push   eax
c001acad:	6a 0c                	push   0xc
c001acaf:	57                   	push   edi
c001acb0:	56                   	push   esi
c001acb1:	e8 e6 fe ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acb6:	83 c4 20             	add    esp,0x20
c001acb9:	eb 4e                	jmp    c001ad09 <IDE::read(unsigned char, unsigned char)+0xab>
c001acbb:	0f b6 ca             	movzx  ecx,dl
c001acbe:	83 f9 07             	cmp    ecx,0x7
c001acc1:	77 12                	ja     c001acd5 <IDE::read(unsigned char, unsigned char)+0x77>
c001acc3:	0f b6 c0             	movzx  eax,al
c001acc6:	0f b6 d2             	movzx  edx,dl
c001acc9:	66 8b 84 c6 5a 01 00 00 	mov    ax,WORD PTR [esi+eax*8+0x15a]
c001acd1:	01 c2                	add    edx,eax
c001acd3:	eb 31                	jmp    c001ad06 <IDE::read(unsigned char, unsigned char)+0xa8>
c001acd5:	83 f9 0d             	cmp    ecx,0xd
c001acd8:	77 13                	ja     c001aced <IDE::read(unsigned char, unsigned char)+0x8f>
c001acda:	0f b6 c0             	movzx  eax,al
c001acdd:	0f b6 d2             	movzx  edx,dl
c001ace0:	8b 84 c6 5c 01 00 00 	mov    eax,DWORD PTR [esi+eax*8+0x15c]
c001ace7:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001aceb:	eb 19                	jmp    c001ad06 <IDE::read(unsigned char, unsigned char)+0xa8>
c001aced:	31 db                	xor    ebx,ebx
c001acef:	83 f9 15             	cmp    ecx,0x15
c001acf2:	77 15                	ja     c001ad09 <IDE::read(unsigned char, unsigned char)+0xab>
c001acf4:	0f b6 c0             	movzx  eax,al
c001acf7:	0f b6 d2             	movzx  edx,dl
c001acfa:	66 8b 84 c6 5e 01 00 00 	mov    ax,WORD PTR [esi+eax*8+0x15e]
c001ad02:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ad06:	ec                   	in     al,dx
c001ad07:	88 c3                	mov    bl,al
c001ad09:	83 c4 1c             	add    esp,0x1c
c001ad0c:	88 d8                	mov    al,bl
c001ad0e:	5b                   	pop    ebx
c001ad0f:	5e                   	pop    esi
c001ad10:	5f                   	pop    edi
c001ad11:	5d                   	pop    ebp
c001ad12:	c3                   	ret    
c001ad13:	90                   	nop

c001ad14 <IDE::waitInterrupt(unsigned char)>:
c001ad14:	55                   	push   ebp
c001ad15:	57                   	push   edi
c001ad16:	56                   	push   esi
c001ad17:	53                   	push   ebx
c001ad18:	31 db                	xor    ebx,ebx
c001ad1a:	83 ec 0c             	sub    esp,0xc
c001ad1d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ad21:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ad26:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ad2e:	89 e8                	mov    eax,ebp
c001ad30:	84 c0                	test   al,al
c001ad32:	75 30                	jne    c001ad64 <IDE::waitInterrupt(unsigned char)+0x50>
c001ad34:	50                   	push   eax
c001ad35:	6a 0c                	push   0xc
c001ad37:	56                   	push   esi
c001ad38:	57                   	push   edi
c001ad39:	e8 20 ff ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001ad3e:	83 c4 10             	add    esp,0x10
c001ad41:	a8 01                	test   al,0x1
c001ad43:	75 27                	jne    c001ad6c <IDE::waitInterrupt(unsigned char)+0x58>
c001ad45:	f6 c3 04             	test   bl,0x4
c001ad48:	75 12                	jne    c001ad5c <IDE::waitInterrupt(unsigned char)+0x48>
c001ad4a:	83 fb 32             	cmp    ebx,0x32
c001ad4d:	7e 0d                	jle    c001ad5c <IDE::waitInterrupt(unsigned char)+0x48>
c001ad4f:	83 ec 0c             	sub    esp,0xc
c001ad52:	6a 64                	push   0x64
c001ad54:	e8 93 a5 ff ff       	call   c00152ec <milliTenthSleep(unsigned int)>
c001ad59:	83 c4 10             	add    esp,0x10
c001ad5c:	83 fb 3c             	cmp    ebx,0x3c
c001ad5f:	74 0b                	je     c001ad6c <IDE::waitInterrupt(unsigned char)+0x58>
c001ad61:	43                   	inc    ebx
c001ad62:	eb c2                	jmp    c001ad26 <IDE::waitInterrupt(unsigned char)+0x12>
c001ad64:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ad6c:	83 c4 0c             	add    esp,0xc
c001ad6f:	89 e8                	mov    eax,ebp
c001ad71:	5b                   	pop    ebx
c001ad72:	5e                   	pop    esi
c001ad73:	5f                   	pop    edi
c001ad74:	5d                   	pop    ebp
c001ad75:	c3                   	ret    

c001ad76 <ideChannel0IRQHandler(regs*, void*)>:
c001ad76:	83 ec 10             	sub    esp,0x10
c001ad79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad7d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ad84:	6a 07                	push   0x7
c001ad86:	6a 00                	push   0x0
c001ad88:	50                   	push   eax
c001ad89:	e8 d0 fe ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001ad8e:	83 c4 1c             	add    esp,0x1c
c001ad91:	c3                   	ret    

c001ad92 <ideChannel1IRQHandler(regs*, void*)>:
c001ad92:	83 ec 10             	sub    esp,0x10
c001ad95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad99:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ada0:	6a 07                	push   0x7
c001ada2:	6a 01                	push   0x1
c001ada4:	50                   	push   eax
c001ada5:	e8 b4 fe ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001adaa:	83 c4 1c             	add    esp,0x1c
c001adad:	c3                   	ret    

c001adae <IDE::enableIRQs(unsigned char, bool)>:
c001adae:	57                   	push   edi
c001adaf:	b8 02 00 00 00       	mov    eax,0x2
c001adb4:	56                   	push   esi
c001adb5:	53                   	push   ebx
c001adb6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001adbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001adbf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001adc3:	74 02                	je     c001adc7 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001adc5:	31 c0                	xor    eax,eax
c001adc7:	0f b6 db             	movzx  ebx,bl
c001adca:	bf 04 00 00 00       	mov    edi,0x4
c001adcf:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001add6:	50                   	push   eax
c001add7:	6a 0c                	push   0xc
c001add9:	53                   	push   ebx
c001adda:	56                   	push   esi
c001addb:	e8 bc fd ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ade0:	83 c4 10             	add    esp,0x10
c001ade3:	50                   	push   eax
c001ade4:	6a 0c                	push   0xc
c001ade6:	53                   	push   ebx
c001ade7:	56                   	push   esi
c001ade8:	e8 71 fe ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001aded:	83 c4 10             	add    esp,0x10
c001adf0:	4f                   	dec    edi
c001adf1:	75 f0                	jne    c001ade3 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001adf3:	5b                   	pop    ebx
c001adf4:	5e                   	pop    esi
c001adf5:	5f                   	pop    edi
c001adf6:	c3                   	ret    
c001adf7:	90                   	nop

c001adf8 <IDE::open(int, int, void*)>:
c001adf8:	55                   	push   ebp
c001adf9:	57                   	push   edi
c001adfa:	56                   	push   esi
c001adfb:	53                   	push   ebx
c001adfc:	83 ec 1c             	sub    esp,0x1c
c001adff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ae03:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ae0a:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ae11:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ae1a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ae23:	0f 85 da 02 00 00    	jne    c001b103 <IDE::open(int, int, void*)+0x30b>
c001ae29:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ae2f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001ae33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae37:	83 e0 7f             	and    eax,0x7f
c001ae3a:	83 f8 05             	cmp    eax,0x5
c001ae3d:	74 05                	je     c001ae44 <IDE::open(int, int, void*)+0x4c>
c001ae3f:	83 f8 0f             	cmp    eax,0xf
c001ae42:	75 32                	jne    c001ae76 <IDE::open(int, int, void*)+0x7e>
c001ae44:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ae4a:	83 e0 fc             	and    eax,0xfffffffc
c001ae4d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ae54:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ae5a:	83 e0 fc             	and    eax,0xfffffffc
c001ae5d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ae64:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ae6a:	83 e0 fc             	and    eax,0xfffffffc
c001ae6d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ae74:	eb 14                	jmp    c001ae8a <IDE::open(int, int, void*)+0x92>
c001ae76:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ae80:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ae8a:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001ae91:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ae96:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ae9d:	89 fa                	mov    edx,edi
c001ae9f:	89 f1                	mov    ecx,esi
c001aea1:	89 e8                	mov    eax,ebp
c001aea3:	c1 e1 10             	shl    ecx,0x10
c001aea6:	c1 e0 0b             	shl    eax,0xb
c001aea9:	09 c1                	or     ecx,eax
c001aeab:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001aeb2:	c1 e0 08             	shl    eax,0x8
c001aeb5:	09 c1                	or     ecx,eax
c001aeb7:	89 c8                	mov    eax,ecx
c001aeb9:	0d 08 00 00 80       	or     eax,0x80000008
c001aebe:	ef                   	out    dx,eax
c001aebf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aec4:	ed                   	in     eax,dx
c001aec5:	c1 e8 10             	shr    eax,0x10
c001aec8:	3d ff ff 00 00       	cmp    eax,0xffff
c001aecd:	0f 84 f9 00 00 00    	je     c001afcc <IDE::open(int, int, void*)+0x1d4>
c001aed3:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001aed9:	89 fa                	mov    edx,edi
c001aedb:	89 c8                	mov    eax,ecx
c001aedd:	ef                   	out    dx,eax
c001aede:	b0 fe                	mov    al,0xfe
c001aee0:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aee5:	ee                   	out    dx,al
c001aee6:	89 c8                	mov    eax,ecx
c001aee8:	89 fa                	mov    edx,edi
c001aeea:	ef                   	out    dx,eax
c001aeeb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aef0:	ed                   	in     eax,dx
c001aef1:	3c fe                	cmp    al,0xfe
c001aef3:	0f 85 a4 00 00 00    	jne    c001af9d <IDE::open(int, int, void*)+0x1a5>
c001aef9:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001aeff:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001af06:	74 30                	je     c001af38 <IDE::open(int, int, void*)+0x140>
c001af08:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001af0e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001af12:	83 ec 0c             	sub    esp,0xc
c001af15:	40                   	inc    eax
c001af16:	0f b6 c0             	movzx  eax,al
c001af19:	50                   	push   eax
c001af1a:	55                   	push   ebp
c001af1b:	56                   	push   esi
c001af1c:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001af22:	51                   	push   ecx
c001af23:	e8 5c 3d ff ff       	call   c000ec84 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001af28:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001af2d:	83 c4 1c             	add    esp,0x1c
c001af30:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001af36:	eb 0a                	jmp    c001af42 <IDE::open(int, int, void*)+0x14a>
c001af38:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001af42:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001af49:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001af4e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001af55:	89 ea                	mov    edx,ebp
c001af57:	c1 e1 10             	shl    ecx,0x10
c001af5a:	c1 e0 08             	shl    eax,0x8
c001af5d:	09 c1                	or     ecx,eax
c001af5f:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001af66:	c1 e0 0b             	shl    eax,0xb
c001af69:	09 c1                	or     ecx,eax
c001af6b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001af71:	89 c8                	mov    eax,ecx
c001af73:	ef                   	out    dx,eax
c001af74:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001af7a:	be fc 0c 00 00       	mov    esi,0xcfc
c001af7f:	89 f2                	mov    edx,esi
c001af81:	89 f8                	mov    eax,edi
c001af83:	ee                   	out    dx,al
c001af84:	89 c8                	mov    eax,ecx
c001af86:	89 ea                	mov    edx,ebp
c001af88:	ef                   	out    dx,eax
c001af89:	89 f2                	mov    edx,esi
c001af8b:	ed                   	in     eax,dx
c001af8c:	0f b6 c0             	movzx  eax,al
c001af8f:	39 f8                	cmp    eax,edi
c001af91:	74 49                	je     c001afdc <IDE::open(int, int, void*)+0x1e4>
c001af93:	83 ec 0c             	sub    esp,0xc
c001af96:	68 a4 19 02 c0       	push   0xc00219a4
c001af9b:	eb 37                	jmp    c001afd4 <IDE::open(int, int, void*)+0x1dc>
c001af9d:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001afa6:	75 1a                	jne    c001afc2 <IDE::open(int, int, void*)+0x1ca>
c001afa8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001afad:	3d 8a 00 00 00       	cmp    eax,0x8a
c001afb2:	74 05                	je     c001afb9 <IDE::open(int, int, void*)+0x1c1>
c001afb4:	83 c0 80             	add    eax,0xffffff80
c001afb7:	75 09                	jne    c001afc2 <IDE::open(int, int, void*)+0x1ca>
c001afb9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001afc0:	eb 1a                	jmp    c001afdc <IDE::open(int, int, void*)+0x1e4>
c001afc2:	83 ec 0c             	sub    esp,0xc
c001afc5:	68 ac 19 02 c0       	push   0xc00219ac
c001afca:	eb 08                	jmp    c001afd4 <IDE::open(int, int, void*)+0x1dc>
c001afcc:	83 ec 0c             	sub    esp,0xc
c001afcf:	68 dd 19 02 c0       	push   0xc00219dd
c001afd4:	e8 2e 58 ff ff       	call   c0010807 <KePanic(char const*)>
c001afd9:	83 c4 10             	add    esp,0x10
c001afdc:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001afe3:	74 1a                	je     c001afff <IDE::open(int, int, void*)+0x207>
c001afe5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001afeb:	83 e0 fc             	and    eax,0xfffffffc
c001afee:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001aff5:	83 c0 08             	add    eax,0x8
c001aff8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001afff:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b005:	89 c2                	mov    edx,eax
c001b007:	83 e2 0f             	and    edx,0xf
c001b00a:	83 fa 08             	cmp    edx,0x8
c001b00d:	75 0a                	jne    c001b019 <IDE::open(int, int, void*)+0x221>
c001b00f:	83 e8 02             	sub    eax,0x2
c001b012:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b019:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b01f:	89 c2                	mov    edx,eax
c001b021:	83 e2 0f             	and    edx,0xf
c001b024:	83 fa 08             	cmp    edx,0x8
c001b027:	75 0a                	jne    c001b033 <IDE::open(int, int, void*)+0x23b>
c001b029:	83 e8 02             	sub    eax,0x2
c001b02c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b033:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b03a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b041:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b044:	89 d0                	mov    eax,edx
c001b046:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b04a:	8d 7a 01             	lea    edi,[edx+0x1]
c001b04d:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b051:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b055:	83 e1 3f             	and    ecx,0x3f
c001b058:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b05c:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b063:	89 f9                	mov    ecx,edi
c001b065:	8d 78 02             	lea    edi,[eax+0x2]
c001b068:	0f b6 c9             	movzx  ecx,cl
c001b06b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b06e:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b072:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b076:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b07a:	83 e2 3f             	and    edx,0x3f
c001b07d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b081:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b087:	89 f9                	mov    ecx,edi
c001b089:	8d 78 03             	lea    edi,[eax+0x3]
c001b08c:	0f b6 d1             	movzx  edx,cl
c001b08f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b092:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b096:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b09a:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b09e:	83 e1 3f             	and    ecx,0x3f
c001b0a1:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b0a5:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b0ab:	89 f9                	mov    ecx,edi
c001b0ad:	8d 78 04             	lea    edi,[eax+0x4]
c001b0b0:	0f b6 c9             	movzx  ecx,cl
c001b0b3:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b0b6:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b0ba:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b0be:	89 fa                	mov    edx,edi
c001b0c0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b0c6:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b0ca:	83 e2 3f             	and    edx,0x3f
c001b0cd:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b0d1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b0d8:	66 85 f6             	test   si,si
c001b0db:	74 65                	je     c001b142 <IDE::open(int, int, void*)+0x34a>
c001b0dd:	89 f9                	mov    ecx,edi
c001b0df:	83 c0 05             	add    eax,0x5
c001b0e2:	0f b6 d1             	movzx  edx,cl
c001b0e5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b0e8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b0ec:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b0f0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b0f6:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b0fa:	83 e0 3f             	and    eax,0x3f
c001b0fd:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b101:	eb 3f                	jmp    c001b142 <IDE::open(int, int, void*)+0x34a>
c001b103:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b109:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b110:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b117:	05 06 02 00 00       	add    eax,0x206
c001b11c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b123:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b12a:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b131:	05 06 02 00 00       	add    eax,0x206
c001b136:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b13d:	e9 bd fe ff ff       	jmp    c001afff <IDE::open(int, int, void*)+0x207>
c001b142:	50                   	push   eax
c001b143:	50                   	push   eax
c001b144:	6a 00                	push   0x0
c001b146:	53                   	push   ebx
c001b147:	e8 2a fa ff ff       	call   c001ab76 <IDE::prepareInterrupt(unsigned char)>
c001b14c:	5a                   	pop    edx
c001b14d:	59                   	pop    ecx
c001b14e:	6a 01                	push   0x1
c001b150:	53                   	push   ebx
c001b151:	e8 20 fa ff ff       	call   c001ab76 <IDE::prepareInterrupt(unsigned char)>
c001b156:	83 c4 0c             	add    esp,0xc
c001b159:	6a 00                	push   0x0
c001b15b:	6a 00                	push   0x0
c001b15d:	53                   	push   ebx
c001b15e:	e8 4b fc ff ff       	call   c001adae <IDE::enableIRQs(unsigned char, bool)>
c001b163:	83 c4 0c             	add    esp,0xc
c001b166:	6a 00                	push   0x0
c001b168:	6a 01                	push   0x1
c001b16a:	53                   	push   ebx
c001b16b:	e8 3e fc ff ff       	call   c001adae <IDE::enableIRQs(unsigned char, bool)>
c001b170:	83 c4 10             	add    esp,0x10
c001b173:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b17a:	74 34                	je     c001b1b0 <IDE::open(int, int, void*)+0x3b8>
c001b17c:	83 ec 0c             	sub    esp,0xc
c001b17f:	53                   	push   ebx
c001b180:	6a 01                	push   0x1
c001b182:	68 76 ad 01 c0       	push   0xc001ad76
c001b187:	6a 0e                	push   0xe
c001b189:	53                   	push   ebx
c001b18a:	e8 23 0b ff ff       	call   c000bcb2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b18f:	83 c4 14             	add    esp,0x14
c001b192:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b198:	53                   	push   ebx
c001b199:	6a 01                	push   0x1
c001b19b:	68 92 ad 01 c0       	push   0xc001ad92
c001b1a0:	6a 0f                	push   0xf
c001b1a2:	53                   	push   ebx
c001b1a3:	e8 0a 0b ff ff       	call   c000bcb2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b1a8:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b1ae:	eb 38                	jmp    c001b1e8 <IDE::open(int, int, void*)+0x3f0>
c001b1b0:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b1ba:	83 ec 0c             	sub    esp,0xc
c001b1bd:	53                   	push   ebx
c001b1be:	6a 00                	push   0x0
c001b1c0:	68 76 ad 01 c0       	push   0xc001ad76
c001b1c5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b1cb:	53                   	push   ebx
c001b1cc:	e8 e1 0a ff ff       	call   c000bcb2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b1d1:	83 c4 14             	add    esp,0x14
c001b1d4:	53                   	push   ebx
c001b1d5:	6a 00                	push   0x0
c001b1d7:	68 92 ad 01 c0       	push   0xc001ad92
c001b1dc:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b1e2:	53                   	push   ebx
c001b1e3:	e8 ca 0a ff ff       	call   c000bcb2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b1e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1ea:	83 c4 20             	add    esp,0x20
c001b1ed:	83 ec 0c             	sub    esp,0xc
c001b1f0:	53                   	push   ebx
c001b1f1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b1f4:	83 c4 0c             	add    esp,0xc
c001b1f7:	6a 07                	push   0x7
c001b1f9:	6a 00                	push   0x0
c001b1fb:	53                   	push   ebx
c001b1fc:	e8 5d fa ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001b201:	83 c4 0c             	add    esp,0xc
c001b204:	6a 07                	push   0x7
c001b206:	6a 01                	push   0x1
c001b208:	53                   	push   ebx
c001b209:	e8 50 fa ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001b20e:	83 c4 0c             	add    esp,0xc
c001b211:	6a 01                	push   0x1
c001b213:	6a 00                	push   0x0
c001b215:	53                   	push   ebx
c001b216:	e8 93 fb ff ff       	call   c001adae <IDE::enableIRQs(unsigned char, bool)>
c001b21b:	83 c4 0c             	add    esp,0xc
c001b21e:	6a 01                	push   0x1
c001b220:	6a 01                	push   0x1
c001b222:	53                   	push   ebx
c001b223:	e8 86 fb ff ff       	call   c001adae <IDE::enableIRQs(unsigned char, bool)>
c001b228:	83 c4 2c             	add    esp,0x2c
c001b22b:	31 c0                	xor    eax,eax
c001b22d:	5b                   	pop    ebx
c001b22e:	5e                   	pop    esi
c001b22f:	5f                   	pop    edi
c001b230:	5d                   	pop    ebp
c001b231:	c3                   	ret    

c001b232 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b232:	55                   	push   ebp
c001b233:	57                   	push   edi
c001b234:	56                   	push   esi
c001b235:	53                   	push   ebx
c001b236:	83 ec 1c             	sub    esp,0x1c
c001b239:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b23d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b241:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b245:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b249:	8d 42 f8             	lea    eax,[edx-0x8]
c001b24c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b250:	3c 03                	cmp    al,0x3
c001b252:	77 5a                	ja     c001b2ae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b254:	0f b6 db             	movzx  ebx,bl
c001b257:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b25b:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b25e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b262:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b267:	0c 80                	or     al,0x80
c001b269:	50                   	push   eax
c001b26a:	6a 0c                	push   0xc
c001b26c:	53                   	push   ebx
c001b26d:	56                   	push   esi
c001b26e:	e8 29 f9 ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b273:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b277:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b27c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b280:	0f b6 d2             	movzx  edx,dl
c001b283:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b287:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b289:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b28e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b292:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b296:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b29e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b2a2:	83 c4 2c             	add    esp,0x2c
c001b2a5:	5b                   	pop    ebx
c001b2a6:	5e                   	pop    esi
c001b2a7:	5f                   	pop    edi
c001b2a8:	5d                   	pop    ebp
c001b2a9:	e9 ee f8 ff ff       	jmp    c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2ae:	0f b6 c2             	movzx  eax,dl
c001b2b1:	83 f8 07             	cmp    eax,0x7
c001b2b4:	77 12                	ja     c001b2c8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b2b6:	0f b6 db             	movzx  ebx,bl
c001b2b9:	0f b6 c2             	movzx  eax,dl
c001b2bc:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b2c4:	01 c2                	add    edx,eax
c001b2c6:	eb 2f                	jmp    c001b2f7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b2c8:	83 f8 0d             	cmp    eax,0xd
c001b2cb:	77 13                	ja     c001b2e0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b2cd:	0f b6 db             	movzx  ebx,bl
c001b2d0:	0f b6 d2             	movzx  edx,dl
c001b2d3:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b2da:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b2de:	eb 17                	jmp    c001b2f7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b2e0:	83 f8 15             	cmp    eax,0x15
c001b2e3:	77 14                	ja     c001b2f9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b2e5:	0f b6 db             	movzx  ebx,bl
c001b2e8:	0f b6 d2             	movzx  edx,dl
c001b2eb:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b2f3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b2f7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b2f9:	83 c4 1c             	add    esp,0x1c
c001b2fc:	5b                   	pop    ebx
c001b2fd:	5e                   	pop    esi
c001b2fe:	5f                   	pop    edi
c001b2ff:	5d                   	pop    ebp
c001b300:	c3                   	ret    
c001b301:	90                   	nop

c001b302 <IDE::detect()>:
c001b302:	55                   	push   ebp
c001b303:	57                   	push   edi
c001b304:	56                   	push   esi
c001b305:	53                   	push   ebx
c001b306:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b30c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b313:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b31a:	0f 85 9e 02 00 00    	jne    c001b5be <IDE::detect()+0x2bc>
c001b320:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b327:	31 f6                	xor    esi,esi
c001b329:	31 ff                	xor    edi,edi
c001b32b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b333:	89 f8                	mov    eax,edi
c001b335:	c1 e0 06             	shl    eax,0x6
c001b338:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b340:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b344:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b34c:	c1 e0 04             	shl    eax,0x4
c001b34f:	83 c8 a0             	or     eax,0xffffffa0
c001b352:	0f b6 c0             	movzx  eax,al
c001b355:	50                   	push   eax
c001b356:	6a 06                	push   0x6
c001b358:	56                   	push   esi
c001b359:	53                   	push   ebx
c001b35a:	e8 3d f8 ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b35f:	83 c4 0c             	add    esp,0xc
c001b362:	6a 0c                	push   0xc
c001b364:	56                   	push   esi
c001b365:	53                   	push   ebx
c001b366:	e8 f3 f8 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001b36b:	83 c4 0c             	add    esp,0xc
c001b36e:	6a 0c                	push   0xc
c001b370:	56                   	push   esi
c001b371:	53                   	push   ebx
c001b372:	e8 e7 f8 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001b377:	83 c4 0c             	add    esp,0xc
c001b37a:	6a 0c                	push   0xc
c001b37c:	56                   	push   esi
c001b37d:	53                   	push   ebx
c001b37e:	e8 db f8 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001b383:	83 c4 0c             	add    esp,0xc
c001b386:	6a 0c                	push   0xc
c001b388:	56                   	push   esi
c001b389:	53                   	push   ebx
c001b38a:	e8 cf f8 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001b38f:	68 ec 00 00 00       	push   0xec
c001b394:	6a 07                	push   0x7
c001b396:	56                   	push   esi
c001b397:	53                   	push   ebx
c001b398:	e8 ff f7 ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b39d:	83 c4 1c             	add    esp,0x1c
c001b3a0:	6a 0c                	push   0xc
c001b3a2:	56                   	push   esi
c001b3a3:	53                   	push   ebx
c001b3a4:	e8 b5 f8 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001b3a9:	83 c4 0c             	add    esp,0xc
c001b3ac:	6a 0c                	push   0xc
c001b3ae:	56                   	push   esi
c001b3af:	53                   	push   ebx
c001b3b0:	e8 a9 f8 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001b3b5:	83 c4 0c             	add    esp,0xc
c001b3b8:	6a 0c                	push   0xc
c001b3ba:	56                   	push   esi
c001b3bb:	53                   	push   ebx
c001b3bc:	e8 9d f8 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001b3c1:	83 c4 0c             	add    esp,0xc
c001b3c4:	6a 0c                	push   0xc
c001b3c6:	56                   	push   esi
c001b3c7:	53                   	push   ebx
c001b3c8:	e8 91 f8 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001b3cd:	83 c4 0c             	add    esp,0xc
c001b3d0:	6a 0c                	push   0xc
c001b3d2:	56                   	push   esi
c001b3d3:	53                   	push   ebx
c001b3d4:	e8 85 f8 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001b3d9:	83 c4 10             	add    esp,0x10
c001b3dc:	84 c0                	test   al,al
c001b3de:	0f 84 61 01 00 00    	je     c001b545 <IDE::detect()+0x243>
c001b3e4:	31 ed                	xor    ebp,ebp
c001b3e6:	50                   	push   eax
c001b3e7:	6a 0c                	push   0xc
c001b3e9:	56                   	push   esi
c001b3ea:	53                   	push   ebx
c001b3eb:	e8 6e f8 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001b3f0:	83 c4 10             	add    esp,0x10
c001b3f3:	a8 01                	test   al,0x1
c001b3f5:	0f 85 6b 01 00 00    	jne    c001b566 <IDE::detect()+0x264>
c001b3fb:	a8 80                	test   al,0x80
c001b3fd:	75 04                	jne    c001b403 <IDE::detect()+0x101>
c001b3ff:	a8 08                	test   al,0x8
c001b401:	75 23                	jne    c001b426 <IDE::detect()+0x124>
c001b403:	45                   	inc    ebp
c001b404:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001b40a:	7e da                	jle    c001b3e6 <IDE::detect()+0xe4>
c001b40c:	83 ec 0c             	sub    esp,0xc
c001b40f:	6a 32                	push   0x32
c001b411:	e8 d6 9e ff ff       	call   c00152ec <milliTenthSleep(unsigned int)>
c001b416:	83 c4 10             	add    esp,0x10
c001b419:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001b41f:	75 c5                	jne    c001b3e6 <IDE::detect()+0xe4>
c001b421:	e9 40 01 00 00       	jmp    c001b566 <IDE::detect()+0x264>
c001b426:	31 c9                	xor    ecx,ecx
c001b428:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b42c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001b430:	83 ec 0c             	sub    esp,0xc
c001b433:	68 80 00 00 00       	push   0x80
c001b438:	55                   	push   ebp
c001b439:	6a 00                	push   0x0
c001b43b:	56                   	push   esi
c001b43c:	53                   	push   ebx
c001b43d:	e8 f0 fd ff ff       	call   c001b232 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b442:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b447:	89 f8                	mov    eax,edi
c001b449:	c1 e0 06             	shl    eax,0x6
c001b44c:	01 d8                	add    eax,ebx
c001b44e:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b455:	89 d1                	mov    ecx,edx
c001b457:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b45e:	89 f2                	mov    edx,esi
c001b460:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b466:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b46a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b470:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b474:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b47b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b483:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b48a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b492:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b498:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b49f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b4a5:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b4a9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b4ad:	83 c4 20             	add    esp,0x20
c001b4b0:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001b4b3:	83 c0 02             	add    eax,0x2
c001b4b6:	83 c5 02             	add    ebp,0x2
c001b4b9:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b4bf:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001b4c2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b4c8:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001b4cc:	75 e2                	jne    c001b4b0 <IDE::detect()+0x1ae>
c001b4ce:	89 f8                	mov    eax,edi
c001b4d0:	c1 e0 06             	shl    eax,0x6
c001b4d3:	01 d8                	add    eax,ebx
c001b4d5:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b4dc:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b4e3:	c1 ea 09             	shr    edx,0x9
c001b4e6:	83 e2 01             	and    edx,0x1
c001b4e9:	80 e1 01             	and    cl,0x1
c001b4ec:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b4f2:	75 22                	jne    c001b516 <IDE::detect()+0x214>
c001b4f4:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b4fb:	74 47                	je     c001b544 <IDE::detect()+0x242>
c001b4fd:	83 ec 0c             	sub    esp,0xc
c001b500:	68 7c 01 00 00       	push   0x17c
c001b505:	e8 25 c5 fe ff       	call   c0007a2f <malloc>
c001b50a:	89 c5                	mov    ebp,eax
c001b50c:	89 04 24             	mov    DWORD PTR [esp],eax
c001b50f:	e8 12 05 00 00       	call   c001ba26 <ATA::ATA()>
c001b514:	eb 17                	jmp    c001b52d <IDE::detect()+0x22b>
c001b516:	83 ec 0c             	sub    esp,0xc
c001b519:	68 84 01 00 00       	push   0x184
c001b51e:	e8 0c c5 fe ff       	call   c0007a2f <malloc>
c001b523:	89 c5                	mov    ebp,eax
c001b525:	89 04 24             	mov    DWORD PTR [esp],eax
c001b528:	e8 6b 0e 00 00       	call   c001c398 <ATAPI::ATAPI()>
c001b52d:	5a                   	pop    edx
c001b52e:	59                   	pop    ecx
c001b52f:	55                   	push   ebp
c001b530:	53                   	push   ebx
c001b531:	e8 d0 07 ff ff       	call   c000bd06 <Device::addChild(Device*)>
c001b536:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b539:	53                   	push   ebx
c001b53a:	57                   	push   edi
c001b53b:	6a 00                	push   0x0
c001b53d:	55                   	push   ebp
c001b53e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b541:	83 c4 20             	add    esp,0x20
c001b544:	47                   	inc    edi
c001b545:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b54a:	74 0d                	je     c001b559 <IDE::detect()+0x257>
c001b54c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b554:	e9 da fd ff ff       	jmp    c001b333 <IDE::detect()+0x31>
c001b559:	4e                   	dec    esi
c001b55a:	74 62                	je     c001b5be <IDE::detect()+0x2bc>
c001b55c:	be 01 00 00 00       	mov    esi,0x1
c001b561:	e9 c5 fd ff ff       	jmp    c001b32b <IDE::detect()+0x29>
c001b566:	50                   	push   eax
c001b567:	6a 04                	push   0x4
c001b569:	56                   	push   esi
c001b56a:	53                   	push   ebx
c001b56b:	e8 ee f6 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001b570:	83 c4 0c             	add    esp,0xc
c001b573:	6a 05                	push   0x5
c001b575:	89 c5                	mov    ebp,eax
c001b577:	56                   	push   esi
c001b578:	53                   	push   ebx
c001b579:	e8 e0 f6 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001b57e:	89 e9                	mov    ecx,ebp
c001b580:	83 c4 10             	add    esp,0x10
c001b583:	0f b6 e9             	movzx  ebp,cl
c001b586:	83 fd 14             	cmp    ebp,0x14
c001b589:	74 2d                	je     c001b5b8 <IDE::detect()+0x2b6>
c001b58b:	83 fd 69             	cmp    ebp,0x69
c001b58e:	75 b5                	jne    c001b545 <IDE::detect()+0x243>
c001b590:	3c 96                	cmp    al,0x96
c001b592:	75 b1                	jne    c001b545 <IDE::detect()+0x243>
c001b594:	68 a1 00 00 00       	push   0xa1
c001b599:	6a 07                	push   0x7
c001b59b:	56                   	push   esi
c001b59c:	53                   	push   ebx
c001b59d:	e8 fa f5 ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5a2:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b5a9:	e8 3e 9d ff ff       	call   c00152ec <milliTenthSleep(unsigned int)>
c001b5ae:	83 c4 10             	add    esp,0x10
c001b5b1:	b1 01                	mov    cl,0x1
c001b5b3:	e9 70 fe ff ff       	jmp    c001b428 <IDE::detect()+0x126>
c001b5b8:	3c eb                	cmp    al,0xeb
c001b5ba:	75 cf                	jne    c001b58b <IDE::detect()+0x289>
c001b5bc:	eb d6                	jmp    c001b594 <IDE::detect()+0x292>
c001b5be:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b5c4:	5b                   	pop    ebx
c001b5c5:	5e                   	pop    esi
c001b5c6:	5f                   	pop    edi
c001b5c7:	5d                   	pop    ebp
c001b5c8:	c3                   	ret    
c001b5c9:	90                   	nop

c001b5ca <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b5ca:	55                   	push   ebp
c001b5cb:	57                   	push   edi
c001b5cc:	56                   	push   esi
c001b5cd:	53                   	push   ebx
c001b5ce:	83 ec 0c             	sub    esp,0xc
c001b5d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5d5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b5d9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b5dd:	88 c3                	mov    bl,al
c001b5df:	25 ff 00 00 00       	and    eax,0xff
c001b5e4:	0f 84 8f 00 00 00    	je     c001b679 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001b5ea:	83 ec 0c             	sub    esp,0xc
c001b5ed:	89 c5                	mov    ebp,eax
c001b5ef:	68 07 1a 02 c0       	push   0xc0021a07
c001b5f4:	e8 a8 f2 fe ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c001b5f9:	83 c4 10             	add    esp,0x10
c001b5fc:	83 fd 01             	cmp    ebp,0x1
c001b5ff:	74 72                	je     c001b673 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa9>
c001b601:	83 fd 02             	cmp    ebp,0x2
c001b604:	75 5f                	jne    c001b665 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9b>
c001b606:	89 f8                	mov    eax,edi
c001b608:	0f b6 f8             	movzx  edi,al
c001b60b:	50                   	push   eax
c001b60c:	01 ff                	add    edi,edi
c001b60e:	6a 01                	push   0x1
c001b610:	09 fe                	or     esi,edi
c001b612:	89 f0                	mov    eax,esi
c001b614:	0f b6 f0             	movzx  esi,al
c001b617:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b61b:	c1 e6 06             	shl    esi,0x6
c001b61e:	0f b6 84 30 6d 01 00 00 	movzx  eax,BYTE PTR [eax+esi*1+0x16d]
c001b626:	50                   	push   eax
c001b627:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b62b:	e8 2e f6 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001b630:	83 c4 10             	add    esp,0x10
c001b633:	a8 01                	test   al,0x1
c001b635:	74 02                	je     c001b639 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6f>
c001b637:	b3 07                	mov    bl,0x7
c001b639:	a8 02                	test   al,0x2
c001b63b:	74 02                	je     c001b63f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x75>
c001b63d:	b3 03                	mov    bl,0x3
c001b63f:	a8 04                	test   al,0x4
c001b641:	74 02                	je     c001b645 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7b>
c001b643:	b3 14                	mov    bl,0x14
c001b645:	a8 08                	test   al,0x8
c001b647:	74 02                	je     c001b64b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x81>
c001b649:	b3 03                	mov    bl,0x3
c001b64b:	a8 10                	test   al,0x10
c001b64d:	74 02                	je     c001b651 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x87>
c001b64f:	b3 15                	mov    bl,0x15
c001b651:	a8 20                	test   al,0x20
c001b653:	74 02                	je     c001b657 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8d>
c001b655:	b3 03                	mov    bl,0x3
c001b657:	a8 40                	test   al,0x40
c001b659:	74 02                	je     c001b65d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x93>
c001b65b:	b3 16                	mov    bl,0x16
c001b65d:	a8 80                	test   al,0x80
c001b65f:	74 18                	je     c001b679 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001b661:	b3 0d                	mov    bl,0xd
c001b663:	eb 14                	jmp    c001b679 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001b665:	83 fd 03             	cmp    ebp,0x3
c001b668:	74 0d                	je     c001b677 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xad>
c001b66a:	83 fd 04             	cmp    ebp,0x4
c001b66d:	75 0a                	jne    c001b679 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001b66f:	b3 08                	mov    bl,0x8
c001b671:	eb 06                	jmp    c001b679 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001b673:	b3 13                	mov    bl,0x13
c001b675:	eb 02                	jmp    c001b679 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001b677:	b3 17                	mov    bl,0x17
c001b679:	83 c4 0c             	add    esp,0xc
c001b67c:	88 d8                	mov    al,bl
c001b67e:	5b                   	pop    ebx
c001b67f:	5e                   	pop    esi
c001b680:	5f                   	pop    edi
c001b681:	5d                   	pop    ebp
c001b682:	c3                   	ret    
c001b683:	90                   	nop

c001b684 <IDE::polling(unsigned char, unsigned int)>:
c001b684:	57                   	push   edi
c001b685:	56                   	push   esi
c001b686:	53                   	push   ebx
c001b687:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b68b:	bb 04 00 00 00       	mov    ebx,0x4
c001b690:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b695:	52                   	push   edx
c001b696:	6a 0c                	push   0xc
c001b698:	56                   	push   esi
c001b699:	57                   	push   edi
c001b69a:	e8 bf f5 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001b69f:	83 c4 10             	add    esp,0x10
c001b6a2:	4b                   	dec    ebx
c001b6a3:	75 f0                	jne    c001b695 <IDE::polling(unsigned char, unsigned int)+0x11>
c001b6a5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b6aa:	50                   	push   eax
c001b6ab:	6a 0c                	push   0xc
c001b6ad:	56                   	push   esi
c001b6ae:	57                   	push   edi
c001b6af:	e8 aa f5 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001b6b4:	83 c4 10             	add    esp,0x10
c001b6b7:	a8 01                	test   al,0x1
c001b6b9:	75 17                	jne    c001b6d2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b6bb:	a8 20                	test   al,0x20
c001b6bd:	75 0f                	jne    c001b6ce <IDE::polling(unsigned char, unsigned int)+0x4a>
c001b6bf:	4b                   	dec    ebx
c001b6c0:	74 10                	je     c001b6d2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b6c2:	a8 80                	test   al,0x80
c001b6c4:	75 e4                	jne    c001b6aa <IDE::polling(unsigned char, unsigned int)+0x26>
c001b6c6:	a8 08                	test   al,0x8
c001b6c8:	74 e0                	je     c001b6aa <IDE::polling(unsigned char, unsigned int)+0x26>
c001b6ca:	31 c0                	xor    eax,eax
c001b6cc:	eb 06                	jmp    c001b6d4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b6ce:	b0 01                	mov    al,0x1
c001b6d0:	eb 02                	jmp    c001b6d4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b6d2:	b0 02                	mov    al,0x2
c001b6d4:	5b                   	pop    ebx
c001b6d5:	5e                   	pop    esi
c001b6d6:	5f                   	pop    edi
c001b6d7:	c3                   	ret    

c001b6d8 <SATABus::close(int, int, void*)>:
c001b6d8:	31 c0                	xor    eax,eax
c001b6da:	c3                   	ret    
c001b6db:	90                   	nop

c001b6dc <SATABus::detect()>:
c001b6dc:	c3                   	ret    
c001b6dd:	90                   	nop

c001b6de <SATABus::SATABus()>:
c001b6de:	83 ec 0c             	sub    esp,0xc
c001b6e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6e5:	83 ec 08             	sub    esp,0x8
c001b6e8:	68 40 1a 02 c0       	push   0xc0021a40
c001b6ed:	50                   	push   eax
c001b6ee:	e8 55 09 ff ff       	call   c000c048 <HardDiskController::HardDiskController(char const*)>
c001b6f3:	83 c4 10             	add    esp,0x10
c001b6f6:	ba 6c 1a 02 c0       	mov    edx,0xc0021a6c
c001b6fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6ff:	89 10                	mov    DWORD PTR [eax],edx
c001b701:	83 ec 0c             	sub    esp,0xc
c001b704:	6a 50                	push   0x50
c001b706:	e8 fe c6 fe ff       	call   c0007e09 <Phys::allocateContiguousPages(int)>
c001b70b:	83 c4 10             	add    esp,0x10
c001b70e:	89 c2                	mov    edx,eax
c001b710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b714:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b71a:	83 ec 0c             	sub    esp,0xc
c001b71d:	6a 50                	push   0x50
c001b71f:	e8 49 de fe ff       	call   c000956d <Virt::allocateKernelVirtualPages(int)>
c001b724:	83 c4 10             	add    esp,0x10
c001b727:	89 c2                	mov    edx,eax
c001b729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b72d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b733:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b738:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b73c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b742:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b746:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b74c:	83 ec 0c             	sub    esp,0xc
c001b74f:	6a 03                	push   0x3
c001b751:	6a 50                	push   0x50
c001b753:	51                   	push   ecx
c001b754:	52                   	push   edx
c001b755:	50                   	push   eax
c001b756:	e8 07 e8 fe ff       	call   c0009f62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b75b:	83 c4 20             	add    esp,0x20
c001b75e:	90                   	nop
c001b75f:	83 c4 0c             	add    esp,0xc
c001b762:	c3                   	ret    
c001b763:	90                   	nop

c001b764 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b768:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b76b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b76e:	09 c2                	or     edx,eax
c001b770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b774:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b77a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b77c:	31 c0                	xor    eax,eax
c001b77e:	c1 e9 08             	shr    ecx,0x8
c001b781:	83 e1 0f             	and    ecx,0xf
c001b784:	39 c8                	cmp    eax,ecx
c001b786:	74 0a                	je     c001b792 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b788:	f6 c2 01             	test   dl,0x1
c001b78b:	74 08                	je     c001b795 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b78d:	d1 ea                	shr    edx,1
c001b78f:	40                   	inc    eax
c001b790:	eb f2                	jmp    c001b784 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b792:	83 c8 ff             	or     eax,0xffffffff
c001b795:	c3                   	ret    

c001b796 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b796:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b79a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b79d:	89 c2                	mov    edx,eax
c001b79f:	c1 ea 08             	shr    edx,0x8
c001b7a2:	83 e2 0f             	and    edx,0xf
c001b7a5:	4a                   	dec    edx
c001b7a6:	75 32                	jne    c001b7da <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b7a8:	83 e0 0f             	and    eax,0xf
c001b7ab:	83 f8 03             	cmp    eax,0x3
c001b7ae:	75 2a                	jne    c001b7da <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b7b0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b7b3:	b8 02 00 00 00       	mov    eax,0x2
c001b7b8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b7be:	74 1c                	je     c001b7dc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b7c0:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b7c6:	b8 04 00 00 00       	mov    eax,0x4
c001b7cb:	74 0f                	je     c001b7dc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b7cd:	31 c0                	xor    eax,eax
c001b7cf:	83 fa 03             	cmp    edx,0x3
c001b7d2:	0f 94 c0             	sete   al
c001b7d5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b7d9:	c3                   	ret    
c001b7da:	31 c0                	xor    eax,eax
c001b7dc:	c3                   	ret    
c001b7dd:	90                   	nop

c001b7de <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b7de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b7e2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b7e5:	0f ba e2 0f          	bt     edx,0xf
c001b7e9:	72 f7                	jb     c001b7e2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b7eb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b7ee:	83 ca 10             	or     edx,0x10
c001b7f1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b7f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b7f7:	83 ca 01             	or     edx,0x1
c001b7fa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b7fd:	c3                   	ret    

c001b7fe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b7fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b802:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b805:	83 e2 fe             	and    edx,0xfffffffe
c001b808:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b80b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b80e:	83 e2 ef             	and    edx,0xffffffef
c001b811:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b814:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b817:	0f ba e2 0e          	bt     edx,0xe
c001b81b:	72 f7                	jb     c001b814 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b81d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b820:	0f ba e2 0f          	bt     edx,0xf
c001b824:	72 ee                	jb     c001b814 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b826:	c3                   	ret    
c001b827:	90                   	nop

c001b828 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b828:	55                   	push   ebp
c001b829:	57                   	push   edi
c001b82a:	56                   	push   esi
c001b82b:	53                   	push   ebx
c001b82c:	83 ec 1c             	sub    esp,0x1c
c001b82f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b833:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b837:	53                   	push   ebx
c001b838:	55                   	push   ebp
c001b839:	e8 c0 ff ff ff       	call   c001b7fe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b83e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001b842:	83 ec 0c             	sub    esp,0xc
c001b845:	8b 85 58 01 00 00    	mov    eax,DWORD PTR [ebp+0x158]
c001b84b:	c1 e7 0a             	shl    edi,0xa
c001b84e:	01 f8                	add    eax,edi
c001b850:	89 03                	mov    DWORD PTR [ebx],eax
c001b852:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b854:	68 00 04 00 00       	push   0x400
c001b859:	6a 00                	push   0x0
c001b85b:	50                   	push   eax
c001b85c:	e8 8f 4c fe ff       	call   c00004f0 <memset>
c001b861:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c001b867:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b86b:	83 c4 1c             	add    esp,0x1c
c001b86e:	01 f8                	add    eax,edi
c001b870:	89 03                	mov    DWORD PTR [ebx],eax
c001b872:	c1 e2 08             	shl    edx,0x8
c001b875:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b87c:	8b 85 58 01 00 00    	mov    eax,DWORD PTR [ebp+0x158]
c001b882:	8d b2 00 80 00 00    	lea    esi,[edx+0x8000]
c001b888:	01 f0                	add    eax,esi
c001b88a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b88d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b890:	68 00 01 00 00       	push   0x100
c001b895:	6a 00                	push   0x0
c001b897:	50                   	push   eax
c001b898:	e8 53 4c fe ff       	call   c00004f0 <memset>
c001b89d:	03 b5 5c 01 00 00    	add    esi,DWORD PTR [ebp+0x15c]
c001b8a3:	31 d2                	xor    edx,edx
c001b8a5:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c001b8a8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001b8ac:	83 c4 10             	add    esp,0x10
c001b8af:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b8b6:	03 bd 58 01 00 00    	add    edi,DWORD PTR [ebp+0x158]
c001b8bc:	c1 e6 0d             	shl    esi,0xd
c001b8bf:	81 c6 00 a0 00 00    	add    esi,0xa000
c001b8c5:	66 c7 47 02 08 00    	mov    WORD PTR [edi+0x2],0x8
c001b8cb:	8b 85 58 01 00 00    	mov    eax,DWORD PTR [ebp+0x158]
c001b8d1:	83 c7 20             	add    edi,0x20
c001b8d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b8d8:	01 f0                	add    eax,esi
c001b8da:	01 d0                	add    eax,edx
c001b8dc:	89 47 e8             	mov    DWORD PTR [edi-0x18],eax
c001b8df:	52                   	push   edx
c001b8e0:	68 00 01 00 00       	push   0x100
c001b8e5:	6a 00                	push   0x0
c001b8e7:	50                   	push   eax
c001b8e8:	e8 03 4c fe ff       	call   c00004f0 <memset>
c001b8ed:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c001b8f3:	c7 47 ec 00 00 00 00 	mov    DWORD PTR [edi-0x14],0x0
c001b8fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b8fe:	83 c4 10             	add    esp,0x10
c001b901:	01 f0                	add    eax,esi
c001b903:	01 d0                	add    eax,edx
c001b905:	81 c2 00 01 00 00    	add    edx,0x100
c001b90b:	89 47 e8             	mov    DWORD PTR [edi-0x18],eax
c001b90e:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001b914:	75 af                	jne    c001b8c5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0x9d>
c001b916:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b91d:	50                   	push   eax
c001b91e:	50                   	push   eax
c001b91f:	53                   	push   ebx
c001b920:	55                   	push   ebp
c001b921:	e8 b8 fe ff ff       	call   c001b7de <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b926:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b92d:	83 c4 2c             	add    esp,0x2c
c001b930:	5b                   	pop    ebx
c001b931:	5e                   	pop    esi
c001b932:	5f                   	pop    edi
c001b933:	5d                   	pop    ebp
c001b934:	c3                   	ret    
c001b935:	90                   	nop

c001b936 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b936:	55                   	push   ebp
c001b937:	57                   	push   edi
c001b938:	56                   	push   esi
c001b939:	53                   	push   ebx
c001b93a:	31 db                	xor    ebx,ebx
c001b93c:	83 ec 0c             	sub    esp,0xc
c001b93f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b943:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b947:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b94a:	f7 c7 01 00 00 00    	test   edi,0x1
c001b950:	74 7a                	je     c001b9cc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b952:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b956:	89 d8                	mov    eax,ebx
c001b958:	c1 e0 07             	shl    eax,0x7
c001b95b:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b962:	55                   	push   ebp
c001b963:	56                   	push   esi
c001b964:	e8 2d fe ff ff       	call   c001b796 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b969:	5a                   	pop    edx
c001b96a:	83 f8 01             	cmp    eax,0x1
c001b96d:	59                   	pop    ecx
c001b96e:	75 21                	jne    c001b991 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b970:	50                   	push   eax
c001b971:	53                   	push   ebx
c001b972:	55                   	push   ebp
c001b973:	56                   	push   esi
c001b974:	e8 af fe ff ff       	call   c001b828 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b979:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b980:	e8 aa c0 fe ff       	call   c0007a2f <malloc>
c001b985:	89 c5                	mov    ebp,eax
c001b987:	89 04 24             	mov    DWORD PTR [esp],eax
c001b98a:	e8 c1 10 00 00       	call   c001ca50 <SATA::SATA()>
c001b98f:	eb 24                	jmp    c001b9b5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b991:	83 f8 04             	cmp    eax,0x4
c001b994:	75 36                	jne    c001b9cc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b996:	51                   	push   ecx
c001b997:	53                   	push   ebx
c001b998:	55                   	push   ebp
c001b999:	56                   	push   esi
c001b99a:	e8 89 fe ff ff       	call   c001b828 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b99f:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001b9a6:	e8 84 c0 fe ff       	call   c0007a2f <malloc>
c001b9ab:	89 c5                	mov    ebp,eax
c001b9ad:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9b0:	e8 f5 17 00 00       	call   c001d1aa <SATAPI::SATAPI()>
c001b9b5:	58                   	pop    eax
c001b9b6:	5a                   	pop    edx
c001b9b7:	55                   	push   ebp
c001b9b8:	56                   	push   esi
c001b9b9:	e8 48 03 ff ff       	call   c000bd06 <Device::addChild(Device*)>
c001b9be:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b9c1:	56                   	push   esi
c001b9c2:	6a 00                	push   0x0
c001b9c4:	53                   	push   ebx
c001b9c5:	55                   	push   ebp
c001b9c6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b9c9:	83 c4 20             	add    esp,0x20
c001b9cc:	43                   	inc    ebx
c001b9cd:	d1 ef                	shr    edi,1
c001b9cf:	83 fb 20             	cmp    ebx,0x20
c001b9d2:	0f 85 72 ff ff ff    	jne    c001b94a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001b9d8:	83 c4 0c             	add    esp,0xc
c001b9db:	5b                   	pop    ebx
c001b9dc:	5e                   	pop    esi
c001b9dd:	5f                   	pop    edi
c001b9de:	5d                   	pop    ebp
c001b9df:	c3                   	ret    

c001b9e0 <SATABus::open(int, int, void*)>:
c001b9e0:	83 ec 14             	sub    esp,0x14
c001b9e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9e7:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001b9ed:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b9f3:	52                   	push   edx
c001b9f4:	50                   	push   eax
c001b9f5:	e8 3c ff ff ff       	call   c001b936 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001b9fa:	31 c0                	xor    eax,eax
c001b9fc:	83 c4 1c             	add    esp,0x1c
c001b9ff:	c3                   	ret    

c001ba00 <ATA::close(int, int, void*)>:
c001ba00:	83 ec 0c             	sub    esp,0xc
c001ba03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba07:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ba0d:	85 c0                	test   eax,eax
c001ba0f:	74 0c                	je     c001ba1d <ATA::close(int, int, void*)+0x1d>
c001ba11:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba13:	83 ec 0c             	sub    esp,0xc
c001ba16:	50                   	push   eax
c001ba17:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ba1a:	83 c4 10             	add    esp,0x10
c001ba1d:	31 c0                	xor    eax,eax
c001ba1f:	83 c4 0c             	add    esp,0xc
c001ba22:	c3                   	ret    
c001ba23:	90                   	nop

c001ba24 <ATA::powerSaving(PowerSavingLevel)>:
c001ba24:	c3                   	ret    
c001ba25:	90                   	nop

c001ba26 <ATA::ATA()>:
c001ba26:	83 ec 0c             	sub    esp,0xc
c001ba29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2d:	83 ec 04             	sub    esp,0x4
c001ba30:	68 00 02 00 00       	push   0x200
c001ba35:	68 39 1b 02 c0       	push   0xc0021b39
c001ba3a:	50                   	push   eax
c001ba3b:	e8 92 06 ff ff       	call   c000c0d2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ba40:	83 c4 10             	add    esp,0x10
c001ba43:	ba ac 1a 02 c0       	mov    edx,0xc0021aac
c001ba48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba4c:	89 10                	mov    DWORD PTR [eax],edx
c001ba4e:	90                   	nop
c001ba4f:	83 c4 0c             	add    esp,0xc
c001ba52:	c3                   	ret    
c001ba53:	90                   	nop

c001ba54 <ATA::flush(bool)>:
c001ba54:	53                   	push   ebx
c001ba55:	83 ec 08             	sub    esp,0x8
c001ba58:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ba5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba61:	83 f8 01             	cmp    eax,0x1
c001ba64:	19 c0                	sbb    eax,eax
c001ba66:	83 e0 fd             	and    eax,0xfffffffd
c001ba69:	05 ea 00 00 00       	add    eax,0xea
c001ba6e:	50                   	push   eax
c001ba6f:	6a 07                	push   0x7
c001ba71:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ba78:	50                   	push   eax
c001ba79:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ba7f:	e8 18 f1 ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba84:	83 c4 0c             	add    esp,0xc
c001ba87:	6a 00                	push   0x0
c001ba89:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ba90:	50                   	push   eax
c001ba91:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ba97:	e8 e8 fb ff ff       	call   c001b684 <IDE::polling(unsigned char, unsigned int)>
c001ba9c:	83 c4 18             	add    esp,0x18
c001ba9f:	5b                   	pop    ebx
c001baa0:	c3                   	ret    
c001baa1:	90                   	nop

c001baa2 <ATA::readyForCommand()>:
c001baa2:	56                   	push   esi
c001baa3:	53                   	push   ebx
c001baa4:	53                   	push   ebx
c001baa5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001baa9:	31 db                	xor    ebx,ebx
c001baab:	51                   	push   ecx
c001baac:	6a 0c                	push   0xc
c001baae:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bab5:	50                   	push   eax
c001bab6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001babc:	e8 9d f1 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001bac1:	83 c4 10             	add    esp,0x10
c001bac4:	a8 88                	test   al,0x88
c001bac6:	74 1f                	je     c001bae7 <ATA::readyForCommand()+0x45>
c001bac8:	43                   	inc    ebx
c001bac9:	83 fb 63             	cmp    ebx,0x63
c001bacc:	7e dd                	jle    c001baab <ATA::readyForCommand()+0x9>
c001bace:	83 ec 0c             	sub    esp,0xc
c001bad1:	6a 0a                	push   0xa
c001bad3:	e8 14 98 ff ff       	call   c00152ec <milliTenthSleep(unsigned int)>
c001bad8:	83 c4 10             	add    esp,0x10
c001badb:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bae1:	75 c8                	jne    c001baab <ATA::readyForCommand()+0x9>
c001bae3:	31 c0                	xor    eax,eax
c001bae5:	eb 02                	jmp    c001bae9 <ATA::readyForCommand()+0x47>
c001bae7:	b0 01                	mov    al,0x1
c001bae9:	5a                   	pop    edx
c001baea:	5b                   	pop    ebx
c001baeb:	5e                   	pop    esi
c001baec:	c3                   	ret    
c001baed:	90                   	nop

c001baee <ATA::access(unsigned long long, int, void*, bool)>:
c001baee:	55                   	push   ebp
c001baef:	57                   	push   edi
c001baf0:	56                   	push   esi
c001baf1:	53                   	push   ebx
c001baf2:	83 ec 2c             	sub    esp,0x2c
c001baf5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001baf9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bafd:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bb01:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bb05:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb09:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bb0d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001bb11:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bb17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb1b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bb21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bb25:	c1 e0 06             	shl    eax,0x6
c001bb28:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bb30:	74 5b                	je     c001bb8d <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001bb32:	89 fa                	mov    edx,edi
c001bb34:	89 f0                	mov    eax,esi
c001bb36:	c1 ea 1c             	shr    edx,0x1c
c001bb39:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001bb3d:	89 d1                	mov    ecx,edx
c001bb3f:	09 c1                	or     ecx,eax
c001bb41:	74 25                	je     c001bb68 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bb43:	31 ed                	xor    ebp,ebp
c001bb45:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bb4c:	89 fa                	mov    edx,edi
c001bb4e:	89 f0                	mov    eax,esi
c001bb50:	0f ad d0             	shrd   eax,edx,cl
c001bb53:	d3 ea                	shr    edx,cl
c001bb55:	f6 c1 20             	test   cl,0x20
c001bb58:	74 02                	je     c001bb5c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bb5a:	89 d0                	mov    eax,edx
c001bb5c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bb60:	45                   	inc    ebp
c001bb61:	83 fd 06             	cmp    ebp,0x6
c001bb64:	75 df                	jne    c001bb45 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bb66:	eb 71                	jmp    c001bbd9 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001bb68:	89 f0                	mov    eax,esi
c001bb6a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bb6f:	c1 ee 18             	shr    esi,0x18
c001bb72:	0f ac f8 10          	shrd   eax,edi,0x10
c001bb76:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bb7b:	bf 01 00 00 00       	mov    edi,0x1
c001bb80:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bb84:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bb8b:	eb 53                	jmp    c001bbe0 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bb8d:	6a 00                	push   0x0
c001bb8f:	6a 3f                	push   0x3f
c001bb91:	57                   	push   edi
c001bb92:	56                   	push   esi
c001bb93:	e8 d8 2a 00 00       	call   c001e670 <__umoddi3>
c001bb98:	83 c4 10             	add    esp,0x10
c001bb9b:	40                   	inc    eax
c001bb9c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bba0:	6a 00                	push   0x0
c001bba2:	68 f0 03 00 00       	push   0x3f0
c001bba7:	57                   	push   edi
c001bba8:	56                   	push   esi
c001bba9:	e8 c2 29 00 00       	call   c001e570 <__udivdi3>
c001bbae:	83 c4 10             	add    esp,0x10
c001bbb1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bbb6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bbbd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bbc2:	6a 00                	push   0x0
c001bbc4:	6a 3f                	push   0x3f
c001bbc6:	57                   	push   edi
c001bbc7:	31 ff                	xor    edi,edi
c001bbc9:	56                   	push   esi
c001bbca:	e8 a1 29 00 00       	call   c001e570 <__udivdi3>
c001bbcf:	83 c4 10             	add    esp,0x10
c001bbd2:	83 e0 0f             	and    eax,0xf
c001bbd5:	89 c6                	mov    esi,eax
c001bbd7:	eb 07                	jmp    c001bbe0 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001bbd9:	31 f6                	xor    esi,esi
c001bbdb:	bf 02 00 00 00       	mov    edi,0x2
c001bbe0:	50                   	push   eax
c001bbe1:	6a 00                	push   0x0
c001bbe3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bbea:	50                   	push   eax
c001bbeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bbef:	e8 ba f1 ff ff       	call   c001adae <IDE::enableIRQs(unsigned char, bool)>
c001bbf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbf7:	e8 a6 fe ff ff       	call   c001baa2 <ATA::readyForCommand()>
c001bbfc:	83 c4 10             	add    esp,0x10
c001bbff:	84 c0                	test   al,al
c001bc01:	75 0a                	jne    c001bc0d <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001bc03:	be 01 00 00 00       	mov    esi,0x1
c001bc08:	e9 9b 02 00 00       	jmp    c001bea8 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001bc0d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bc13:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bc19:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001bc20:	c1 e0 04             	shl    eax,0x4
c001bc23:	09 c6                	or     esi,eax
c001bc25:	f7 c7 03 00 00 00    	test   edi,0x3
c001bc2b:	75 05                	jne    c001bc32 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001bc2d:	83 ce a0             	or     esi,0xffffffa0
c001bc30:	eb 03                	jmp    c001bc35 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001bc32:	83 ce e0             	or     esi,0xffffffe0
c001bc35:	89 f0                	mov    eax,esi
c001bc37:	0f b6 f0             	movzx  esi,al
c001bc3a:	56                   	push   esi
c001bc3b:	6a 06                	push   0x6
c001bc3d:	51                   	push   ecx
c001bc3e:	52                   	push   edx
c001bc3f:	e8 58 ef ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc44:	83 c4 10             	add    esp,0x10
c001bc47:	6a 00                	push   0x0
c001bc49:	6a 01                	push   0x1
c001bc4b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bc52:	50                   	push   eax
c001bc53:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bc59:	e8 3e ef ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc5e:	89 f8                	mov    eax,edi
c001bc60:	83 c4 10             	add    esp,0x10
c001bc63:	0f b6 f0             	movzx  esi,al
c001bc66:	83 fe 02             	cmp    esi,0x2
c001bc69:	75 6e                	jne    c001bcd9 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001bc6b:	6a 00                	push   0x0
c001bc6d:	6a 08                	push   0x8
c001bc6f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bc76:	50                   	push   eax
c001bc77:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bc7d:	e8 1a ef ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc82:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bc87:	50                   	push   eax
c001bc88:	6a 09                	push   0x9
c001bc8a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bc91:	50                   	push   eax
c001bc92:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bc98:	e8 ff ee ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc9d:	83 c4 20             	add    esp,0x20
c001bca0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bca5:	50                   	push   eax
c001bca6:	6a 0a                	push   0xa
c001bca8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcaf:	50                   	push   eax
c001bcb0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcb6:	e8 e1 ee ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcbb:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bcc0:	50                   	push   eax
c001bcc1:	6a 0b                	push   0xb
c001bcc3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcca:	50                   	push   eax
c001bccb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcd1:	e8 c6 ee ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcd6:	83 c4 20             	add    esp,0x20
c001bcd9:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001bcde:	50                   	push   eax
c001bcdf:	6a 02                	push   0x2
c001bce1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bce8:	50                   	push   eax
c001bce9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcef:	e8 a8 ee ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcf4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001bcf9:	50                   	push   eax
c001bcfa:	6a 03                	push   0x3
c001bcfc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd03:	50                   	push   eax
c001bd04:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd0a:	e8 8d ee ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd0f:	83 c4 20             	add    esp,0x20
c001bd12:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001bd17:	50                   	push   eax
c001bd18:	6a 04                	push   0x4
c001bd1a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd21:	50                   	push   eax
c001bd22:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd28:	e8 6f ee ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd2d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd32:	50                   	push   eax
c001bd33:	6a 05                	push   0x5
c001bd35:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd3c:	50                   	push   eax
c001bd3d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd43:	e8 54 ee ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd48:	83 c4 20             	add    esp,0x20
c001bd4b:	83 fe 02             	cmp    esi,0x2
c001bd4e:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001bd53:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001bd58:	85 c9                	test   ecx,ecx
c001bd5a:	74 07                	je     c001bd63 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001bd5c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bd61:	75 47                	jne    c001bdaa <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001bd63:	89 f8                	mov    eax,edi
c001bd65:	0f b6 f8             	movzx  edi,al
c001bd68:	31 c0                	xor    eax,eax
c001bd6a:	83 ff 02             	cmp    edi,0x2
c001bd6d:	0f 95 c0             	setne  al
c001bd70:	89 c6                	mov    esi,eax
c001bd72:	74 0c                	je     c001bd80 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001bd74:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bd79:	b8 30 00 00 00       	mov    eax,0x30
c001bd7e:	75 2f                	jne    c001bdaf <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001bd80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd84:	83 f2 01             	xor    edx,0x1
c001bd87:	85 c9                	test   ecx,ecx
c001bd89:	74 09                	je     c001bd94 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001bd8b:	84 d2                	test   dl,dl
c001bd8d:	b8 24 00 00 00       	mov    eax,0x24
c001bd92:	75 1b                	jne    c001bdaf <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001bd94:	85 f6                	test   esi,esi
c001bd96:	0f 84 67 fe ff ff    	je     c001bc03 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001bd9c:	84 d2                	test   dl,dl
c001bd9e:	b8 20 00 00 00       	mov    eax,0x20
c001bda3:	75 0a                	jne    c001bdaf <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001bda5:	e9 59 fe ff ff       	jmp    c001bc03 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001bdaa:	b8 34 00 00 00       	mov    eax,0x34
c001bdaf:	50                   	push   eax
c001bdb0:	6a 07                	push   0x7
c001bdb2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdb9:	50                   	push   eax
c001bdba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdc0:	e8 d7 ed ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdc5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001bdc9:	83 c4 10             	add    esp,0x10
c001bdcc:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001bdd1:	85 f6                	test   esi,esi
c001bdd3:	0f 84 b5 00 00 00    	je     c001be8e <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001bdd9:	50                   	push   eax
c001bdda:	6a 01                	push   0x1
c001bddc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bde3:	50                   	push   eax
c001bde4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdea:	e8 95 f8 ff ff       	call   c001b684 <IDE::polling(unsigned char, unsigned int)>
c001bdef:	83 c4 10             	add    esp,0x10
c001bdf2:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001bdf8:	0f b6 c0             	movzx  eax,al
c001bdfb:	85 c0                	test   eax,eax
c001bdfd:	74 1f                	je     c001be1e <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001bdff:	50                   	push   eax
c001be00:	89 c6                	mov    esi,eax
c001be02:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001be09:	0f b6 d2             	movzx  edx,dl
c001be0c:	50                   	push   eax
c001be0d:	52                   	push   edx
c001be0e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be14:	e8 b1 f7 ff ff       	call   c001b5ca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001be19:	e9 87 00 00 00       	jmp    c001bea5 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001be1e:	85 ed                	test   ebp,ebp
c001be20:	74 3b                	je     c001be5d <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001be22:	31 ff                	xor    edi,edi
c001be24:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001be28:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001be2c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001be31:	50                   	push   eax
c001be32:	50                   	push   eax
c001be33:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be3a:	50                   	push   eax
c001be3b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be41:	e8 44 ed ff ff       	call   c001ab8a <IDE::getBase(unsigned char)>
c001be46:	89 c2                	mov    edx,eax
c001be48:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001be4d:	66 ef                	out    dx,ax
c001be4f:	47                   	inc    edi
c001be50:	83 c4 10             	add    esp,0x10
c001be53:	81 ff 00 01 00 00    	cmp    edi,0x100
c001be59:	75 c9                	jne    c001be24 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001be5b:	eb 23                	jmp    c001be80 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001be5d:	0f b6 d2             	movzx  edx,dl
c001be60:	51                   	push   ecx
c001be61:	51                   	push   ecx
c001be62:	52                   	push   edx
c001be63:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be69:	e8 1c ed ff ff       	call   c001ab8a <IDE::getBase(unsigned char)>
c001be6e:	b9 00 01 00 00       	mov    ecx,0x100
c001be73:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001be77:	89 c2                	mov    edx,eax
c001be79:	fc                   	cld    
c001be7a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001be7d:	83 c4 10             	add    esp,0x10
c001be80:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001be88:	4e                   	dec    esi
c001be89:	e9 43 ff ff ff       	jmp    c001bdd1 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001be8e:	31 f6                	xor    esi,esi
c001be90:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001be95:	74 11                	je     c001bea8 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001be97:	50                   	push   eax
c001be98:	50                   	push   eax
c001be99:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001be9e:	50                   	push   eax
c001be9f:	53                   	push   ebx
c001bea0:	e8 af fb ff ff       	call   c001ba54 <ATA::flush(bool)>
c001bea5:	83 c4 10             	add    esp,0x10
c001bea8:	83 c4 2c             	add    esp,0x2c
c001beab:	89 f0                	mov    eax,esi
c001bead:	5b                   	pop    ebx
c001beae:	5e                   	pop    esi
c001beaf:	5f                   	pop    edi
c001beb0:	5d                   	pop    ebp
c001beb1:	c3                   	ret    

c001beb2 <ATA::detectCHS()>:
c001beb2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001beb6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bebc:	c1 e0 06             	shl    eax,0x6
c001bebf:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bec5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001becf:	c7 44 24 04 90 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a90
c001bed7:	e9 2b 49 ff ff       	jmp    c0010807 <KePanic(char const*)>

c001bedc <ATA::open(int, int, void*)>:
c001bedc:	53                   	push   ebx
c001bedd:	83 ec 08             	sub    esp,0x8
c001bee0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bee4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bee8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001beec:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bef2:	c1 e0 06             	shl    eax,0x6
c001bef5:	01 d0                	add    eax,edx
c001bef7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001befd:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bf04:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bf0a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bf11:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bf1b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bf22:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001bf28:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001bf2f:	75 0c                	jne    c001bf3d <ATA::open(int, int, void*)+0x61>
c001bf31:	83 ec 0c             	sub    esp,0xc
c001bf34:	53                   	push   ebx
c001bf35:	e8 78 ff ff ff       	call   c001beb2 <ATA::detectCHS()>
c001bf3a:	83 c4 10             	add    esp,0x10
c001bf3d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bf43:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bf49:	c1 e0 06             	shl    eax,0x6
c001bf4c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001bf53:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001bf5d:	d1 e8                	shr    eax,1
c001bf5f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001bf65:	6a 04                	push   0x4
c001bf67:	6a 0c                	push   0xc
c001bf69:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bf70:	50                   	push   eax
c001bf71:	52                   	push   edx
c001bf72:	e8 25 ec ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf77:	90                   	nop
c001bf78:	90                   	nop
c001bf79:	6a 00                	push   0x0
c001bf7b:	6a 0c                	push   0xc
c001bf7d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bf84:	50                   	push   eax
c001bf85:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf8b:	e8 0c ec ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf90:	83 c4 14             	add    esp,0x14
c001bf93:	53                   	push   ebx
c001bf94:	e8 a1 01 ff ff       	call   c000c13a <PhysicalDisk::startCache()>
c001bf99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf9c:	e8 e5 13 ff ff       	call   c000d386 <createPartitionsForDisk(PhysicalDisk*)>
c001bfa1:	83 c4 18             	add    esp,0x18
c001bfa4:	31 c0                	xor    eax,eax
c001bfa6:	5b                   	pop    ebx
c001bfa7:	c3                   	ret    

c001bfa8 <combineCharAndColour(char, unsigned char)>:
c001bfa8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bfad:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001bfb3:	c1 e0 08             	shl    eax,0x8
c001bfb6:	09 d0                	or     eax,edx
c001bfb8:	c3                   	ret    

c001bfb9 <combineColours(unsigned char, unsigned char)>:
c001bfb9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bfbe:	c1 e0 04             	shl    eax,0x4
c001bfc1:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001bfc5:	c3                   	ret    

c001bfc6 <ATA::read(unsigned long long, int, void*)>:
c001bfc6:	55                   	push   ebp
c001bfc7:	57                   	push   edi
c001bfc8:	56                   	push   esi
c001bfc9:	be 04 00 00 00       	mov    esi,0x4
c001bfce:	53                   	push   ebx
c001bfcf:	83 ec 0c             	sub    esp,0xc
c001bfd2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bfd6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bfda:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bfde:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bfe2:	8d 7b ff             	lea    edi,[ebx-0x1]
c001bfe5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001bfeb:	0f 87 a1 01 00 00    	ja     c001c192 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001bff1:	85 c9                	test   ecx,ecx
c001bff3:	be 06 00 00 00       	mov    esi,0x6
c001bff8:	0f 84 94 01 00 00    	je     c001c192 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001bffe:	55                   	push   ebp
c001bfff:	55                   	push   ebp
c001c000:	6a 00                	push   0x0
c001c002:	51                   	push   ecx
c001c003:	53                   	push   ebx
c001c004:	52                   	push   edx
c001c005:	50                   	push   eax
c001c006:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c00a:	e8 df fa ff ff       	call   c001baee <ATA::access(unsigned long long, int, void*, bool)>
c001c00f:	83 c4 20             	add    esp,0x20
c001c012:	85 c0                	test   eax,eax
c001c014:	89 c6                	mov    esi,eax
c001c016:	0f 85 71 01 00 00    	jne    c001c18d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c01c:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c022:	50                   	push   eax
c001c023:	bd 10 27 00 00       	mov    ebp,0x2710
c001c028:	50                   	push   eax
c001c029:	6a 0f                	push   0xf
c001c02b:	6a 00                	push   0x0
c001c02d:	89 da                	mov    edx,ebx
c001c02f:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c035:	e8 7f ff ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001c03a:	59                   	pop    ecx
c001c03b:	b9 0a 00 00 00       	mov    ecx,0xa
c001c040:	5b                   	pop    ebx
c001c041:	0f b6 d8             	movzx  ebx,al
c001c044:	89 d0                	mov    eax,edx
c001c046:	99                   	cdq    
c001c047:	53                   	push   ebx
c001c048:	f7 fd                	idiv   ebp
c001c04a:	99                   	cdq    
c001c04b:	f7 f9                	idiv   ecx
c001c04d:	83 c2 30             	add    edx,0x30
c001c050:	0f b6 d2             	movzx  edx,dl
c001c053:	52                   	push   edx
c001c054:	e8 4f ff ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c059:	5f                   	pop    edi
c001c05a:	bf e8 03 00 00       	mov    edi,0x3e8
c001c05f:	5a                   	pop    edx
c001c060:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c066:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c06b:	53                   	push   ebx
c001c06c:	99                   	cdq    
c001c06d:	f7 ff                	idiv   edi
c001c06f:	99                   	cdq    
c001c070:	f7 f9                	idiv   ecx
c001c072:	8d 42 30             	lea    eax,[edx+0x30]
c001c075:	0f b6 c0             	movzx  eax,al
c001c078:	50                   	push   eax
c001c079:	e8 2a ff ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c07e:	5f                   	pop    edi
c001c07f:	bf 64 00 00 00       	mov    edi,0x64
c001c084:	5a                   	pop    edx
c001c085:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c08b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c090:	53                   	push   ebx
c001c091:	99                   	cdq    
c001c092:	f7 ff                	idiv   edi
c001c094:	99                   	cdq    
c001c095:	f7 f9                	idiv   ecx
c001c097:	8d 42 30             	lea    eax,[edx+0x30]
c001c09a:	0f b6 c0             	movzx  eax,al
c001c09d:	50                   	push   eax
c001c09e:	e8 05 ff ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c0a3:	5a                   	pop    edx
c001c0a4:	5a                   	pop    edx
c001c0a5:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c0ab:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0b0:	53                   	push   ebx
c001c0b1:	99                   	cdq    
c001c0b2:	f7 f9                	idiv   ecx
c001c0b4:	99                   	cdq    
c001c0b5:	f7 f9                	idiv   ecx
c001c0b7:	8d 42 30             	lea    eax,[edx+0x30]
c001c0ba:	0f b6 c0             	movzx  eax,al
c001c0bd:	50                   	push   eax
c001c0be:	e8 e5 fe ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c0c3:	5a                   	pop    edx
c001c0c4:	5a                   	pop    edx
c001c0c5:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c0cb:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0d0:	53                   	push   ebx
c001c0d1:	99                   	cdq    
c001c0d2:	f7 f9                	idiv   ecx
c001c0d4:	83 c2 30             	add    edx,0x30
c001c0d7:	0f b6 d2             	movzx  edx,dl
c001c0da:	52                   	push   edx
c001c0db:	e8 c8 fe ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c0e0:	5a                   	pop    edx
c001c0e1:	5a                   	pop    edx
c001c0e2:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c0e8:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c0ed:	53                   	push   ebx
c001c0ee:	99                   	cdq    
c001c0ef:	f7 fd                	idiv   ebp
c001c0f1:	99                   	cdq    
c001c0f2:	f7 f9                	idiv   ecx
c001c0f4:	8d 42 30             	lea    eax,[edx+0x30]
c001c0f7:	0f b6 c0             	movzx  eax,al
c001c0fa:	50                   	push   eax
c001c0fb:	e8 a8 fe ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c100:	5d                   	pop    ebp
c001c101:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c106:	5a                   	pop    edx
c001c107:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c10d:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c112:	53                   	push   ebx
c001c113:	99                   	cdq    
c001c114:	f7 fd                	idiv   ebp
c001c116:	99                   	cdq    
c001c117:	f7 f9                	idiv   ecx
c001c119:	8d 42 30             	lea    eax,[edx+0x30]
c001c11c:	0f b6 c0             	movzx  eax,al
c001c11f:	50                   	push   eax
c001c120:	e8 83 fe ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c125:	5d                   	pop    ebp
c001c126:	5a                   	pop    edx
c001c127:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c12d:	53                   	push   ebx
c001c12e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c133:	99                   	cdq    
c001c134:	f7 ff                	idiv   edi
c001c136:	99                   	cdq    
c001c137:	f7 f9                	idiv   ecx
c001c139:	8d 42 30             	lea    eax,[edx+0x30]
c001c13c:	0f b6 c0             	movzx  eax,al
c001c13f:	50                   	push   eax
c001c140:	e8 63 fe ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c145:	5f                   	pop    edi
c001c146:	5d                   	pop    ebp
c001c147:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c14d:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c152:	53                   	push   ebx
c001c153:	99                   	cdq    
c001c154:	f7 f9                	idiv   ecx
c001c156:	99                   	cdq    
c001c157:	f7 f9                	idiv   ecx
c001c159:	8d 42 30             	lea    eax,[edx+0x30]
c001c15c:	0f b6 c0             	movzx  eax,al
c001c15f:	50                   	push   eax
c001c160:	e8 43 fe ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c165:	5a                   	pop    edx
c001c166:	5f                   	pop    edi
c001c167:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c16d:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c172:	53                   	push   ebx
c001c173:	99                   	cdq    
c001c174:	f7 f9                	idiv   ecx
c001c176:	83 c2 30             	add    edx,0x30
c001c179:	0f b6 d2             	movzx  edx,dl
c001c17c:	52                   	push   edx
c001c17d:	e8 26 fe ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c182:	83 c4 10             	add    esp,0x10
c001c185:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c18b:	eb 05                	jmp    c001c192 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c18d:	be 01 00 00 00       	mov    esi,0x1
c001c192:	83 c4 0c             	add    esp,0xc
c001c195:	89 f0                	mov    eax,esi
c001c197:	5b                   	pop    ebx
c001c198:	5e                   	pop    esi
c001c199:	5f                   	pop    edi
c001c19a:	5d                   	pop    ebp
c001c19b:	c3                   	ret    

c001c19c <ATA::write(unsigned long long, int, void*)>:
c001c19c:	55                   	push   ebp
c001c19d:	57                   	push   edi
c001c19e:	56                   	push   esi
c001c19f:	be 04 00 00 00       	mov    esi,0x4
c001c1a4:	53                   	push   ebx
c001c1a5:	83 ec 0c             	sub    esp,0xc
c001c1a8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c1ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c1b0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c1b4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c1b8:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c1bb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c1c1:	0f 87 9c 01 00 00    	ja     c001c363 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c1c7:	85 c9                	test   ecx,ecx
c001c1c9:	be 06 00 00 00       	mov    esi,0x6
c001c1ce:	0f 84 8f 01 00 00    	je     c001c363 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c1d4:	55                   	push   ebp
c001c1d5:	55                   	push   ebp
c001c1d6:	6a 01                	push   0x1
c001c1d8:	51                   	push   ecx
c001c1d9:	53                   	push   ebx
c001c1da:	52                   	push   edx
c001c1db:	50                   	push   eax
c001c1dc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c1e0:	e8 09 f9 ff ff       	call   c001baee <ATA::access(unsigned long long, int, void*, bool)>
c001c1e5:	83 c4 20             	add    esp,0x20
c001c1e8:	85 c0                	test   eax,eax
c001c1ea:	89 c6                	mov    esi,eax
c001c1ec:	0f 85 6c 01 00 00    	jne    c001c35e <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c1f2:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c1f8:	50                   	push   eax
c001c1f9:	bd 10 27 00 00       	mov    ebp,0x2710
c001c1fe:	50                   	push   eax
c001c1ff:	6a 0f                	push   0xf
c001c201:	6a 00                	push   0x0
c001c203:	e8 b1 fd ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001c208:	5a                   	pop    edx
c001c209:	0f b6 d8             	movzx  ebx,al
c001c20c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c211:	59                   	pop    ecx
c001c212:	b9 0a 00 00 00       	mov    ecx,0xa
c001c217:	53                   	push   ebx
c001c218:	99                   	cdq    
c001c219:	f7 fd                	idiv   ebp
c001c21b:	99                   	cdq    
c001c21c:	f7 f9                	idiv   ecx
c001c21e:	8d 42 30             	lea    eax,[edx+0x30]
c001c221:	0f b6 c0             	movzx  eax,al
c001c224:	50                   	push   eax
c001c225:	e8 7e fd ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c22a:	5f                   	pop    edi
c001c22b:	bf e8 03 00 00       	mov    edi,0x3e8
c001c230:	5a                   	pop    edx
c001c231:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c237:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c23c:	53                   	push   ebx
c001c23d:	99                   	cdq    
c001c23e:	f7 ff                	idiv   edi
c001c240:	99                   	cdq    
c001c241:	f7 f9                	idiv   ecx
c001c243:	8d 42 30             	lea    eax,[edx+0x30]
c001c246:	0f b6 c0             	movzx  eax,al
c001c249:	50                   	push   eax
c001c24a:	e8 59 fd ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c24f:	5f                   	pop    edi
c001c250:	bf 64 00 00 00       	mov    edi,0x64
c001c255:	5a                   	pop    edx
c001c256:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c25c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c261:	53                   	push   ebx
c001c262:	99                   	cdq    
c001c263:	f7 ff                	idiv   edi
c001c265:	99                   	cdq    
c001c266:	f7 f9                	idiv   ecx
c001c268:	8d 42 30             	lea    eax,[edx+0x30]
c001c26b:	0f b6 c0             	movzx  eax,al
c001c26e:	50                   	push   eax
c001c26f:	e8 34 fd ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c274:	5a                   	pop    edx
c001c275:	5a                   	pop    edx
c001c276:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c27c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c281:	53                   	push   ebx
c001c282:	99                   	cdq    
c001c283:	f7 f9                	idiv   ecx
c001c285:	99                   	cdq    
c001c286:	f7 f9                	idiv   ecx
c001c288:	8d 42 30             	lea    eax,[edx+0x30]
c001c28b:	0f b6 c0             	movzx  eax,al
c001c28e:	50                   	push   eax
c001c28f:	e8 14 fd ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c294:	5a                   	pop    edx
c001c295:	5a                   	pop    edx
c001c296:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c29c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2a1:	53                   	push   ebx
c001c2a2:	99                   	cdq    
c001c2a3:	f7 f9                	idiv   ecx
c001c2a5:	8d 42 30             	lea    eax,[edx+0x30]
c001c2a8:	0f b6 c0             	movzx  eax,al
c001c2ab:	50                   	push   eax
c001c2ac:	e8 f7 fc ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c2b1:	5a                   	pop    edx
c001c2b2:	5a                   	pop    edx
c001c2b3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c2b9:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c2be:	53                   	push   ebx
c001c2bf:	99                   	cdq    
c001c2c0:	f7 fd                	idiv   ebp
c001c2c2:	99                   	cdq    
c001c2c3:	f7 f9                	idiv   ecx
c001c2c5:	8d 42 30             	lea    eax,[edx+0x30]
c001c2c8:	0f b6 c0             	movzx  eax,al
c001c2cb:	50                   	push   eax
c001c2cc:	e8 d7 fc ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c2d1:	5d                   	pop    ebp
c001c2d2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c2d7:	5a                   	pop    edx
c001c2d8:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c2de:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c2e3:	53                   	push   ebx
c001c2e4:	99                   	cdq    
c001c2e5:	f7 fd                	idiv   ebp
c001c2e7:	99                   	cdq    
c001c2e8:	f7 f9                	idiv   ecx
c001c2ea:	8d 42 30             	lea    eax,[edx+0x30]
c001c2ed:	0f b6 c0             	movzx  eax,al
c001c2f0:	50                   	push   eax
c001c2f1:	e8 b2 fc ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c2f6:	5d                   	pop    ebp
c001c2f7:	5a                   	pop    edx
c001c2f8:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c2fe:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c303:	53                   	push   ebx
c001c304:	99                   	cdq    
c001c305:	f7 ff                	idiv   edi
c001c307:	99                   	cdq    
c001c308:	f7 f9                	idiv   ecx
c001c30a:	8d 42 30             	lea    eax,[edx+0x30]
c001c30d:	0f b6 c0             	movzx  eax,al
c001c310:	50                   	push   eax
c001c311:	e8 92 fc ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c316:	5f                   	pop    edi
c001c317:	5d                   	pop    ebp
c001c318:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c31e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c323:	53                   	push   ebx
c001c324:	99                   	cdq    
c001c325:	f7 f9                	idiv   ecx
c001c327:	99                   	cdq    
c001c328:	f7 f9                	idiv   ecx
c001c32a:	8d 42 30             	lea    eax,[edx+0x30]
c001c32d:	0f b6 c0             	movzx  eax,al
c001c330:	50                   	push   eax
c001c331:	e8 72 fc ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c336:	5a                   	pop    edx
c001c337:	5f                   	pop    edi
c001c338:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c33e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c343:	53                   	push   ebx
c001c344:	99                   	cdq    
c001c345:	f7 f9                	idiv   ecx
c001c347:	83 c2 30             	add    edx,0x30
c001c34a:	0f b6 d2             	movzx  edx,dl
c001c34d:	52                   	push   edx
c001c34e:	e8 55 fc ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001c353:	83 c4 10             	add    esp,0x10
c001c356:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c35c:	eb 05                	jmp    c001c363 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c35e:	be 01 00 00 00       	mov    esi,0x1
c001c363:	83 c4 0c             	add    esp,0xc
c001c366:	89 f0                	mov    eax,esi
c001c368:	5b                   	pop    ebx
c001c369:	5e                   	pop    esi
c001c36a:	5f                   	pop    edi
c001c36b:	5d                   	pop    ebp
c001c36c:	c3                   	ret    
c001c36d:	90                   	nop

c001c36e <ATAPI::write(unsigned long long, int, void*)>:
c001c36e:	b8 03 00 00 00       	mov    eax,0x3
c001c373:	c3                   	ret    

c001c374 <ATAPI::close(int, int, void*)>:
c001c374:	83 ec 0c             	sub    esp,0xc
c001c377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c37b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c381:	85 c0                	test   eax,eax
c001c383:	74 0c                	je     c001c391 <ATAPI::close(int, int, void*)+0x1d>
c001c385:	8b 10                	mov    edx,DWORD PTR [eax]
c001c387:	83 ec 0c             	sub    esp,0xc
c001c38a:	50                   	push   eax
c001c38b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c38e:	83 c4 10             	add    esp,0x10
c001c391:	31 c0                	xor    eax,eax
c001c393:	83 c4 0c             	add    esp,0xc
c001c396:	c3                   	ret    
c001c397:	90                   	nop

c001c398 <ATAPI::ATAPI()>:
c001c398:	83 ec 0c             	sub    esp,0xc
c001c39b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c39f:	83 ec 04             	sub    esp,0x4
c001c3a2:	68 00 08 00 00       	push   0x800
c001c3a7:	68 d9 1b 02 c0       	push   0xc0021bd9
c001c3ac:	50                   	push   eax
c001c3ad:	e8 20 fd fe ff       	call   c000c0d2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c3b2:	83 c4 10             	add    esp,0x10
c001c3b5:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c001c3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3be:	89 10                	mov    DWORD PTR [eax],edx
c001c3c0:	90                   	nop
c001c3c1:	83 c4 0c             	add    esp,0xc
c001c3c4:	c3                   	ret    
c001c3c5:	90                   	nop

c001c3c6 <ATAPI::readyForCommand()>:
c001c3c6:	56                   	push   esi
c001c3c7:	53                   	push   ebx
c001c3c8:	53                   	push   ebx
c001c3c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c3cd:	31 db                	xor    ebx,ebx
c001c3cf:	51                   	push   ecx
c001c3d0:	6a 0c                	push   0xc
c001c3d2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c3d9:	50                   	push   eax
c001c3da:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c3e0:	e8 79 e8 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001c3e5:	83 c4 10             	add    esp,0x10
c001c3e8:	a8 88                	test   al,0x88
c001c3ea:	74 25                	je     c001c411 <ATAPI::readyForCommand()+0x4b>
c001c3ec:	43                   	inc    ebx
c001c3ed:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c3f3:	7e da                	jle    c001c3cf <ATAPI::readyForCommand()+0x9>
c001c3f5:	83 ec 0c             	sub    esp,0xc
c001c3f8:	68 5e 01 00 00       	push   0x15e
c001c3fd:	e8 ea 8e ff ff       	call   c00152ec <milliTenthSleep(unsigned int)>
c001c402:	83 c4 10             	add    esp,0x10
c001c405:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c40b:	75 c2                	jne    c001c3cf <ATAPI::readyForCommand()+0x9>
c001c40d:	31 c0                	xor    eax,eax
c001c40f:	eb 02                	jmp    c001c413 <ATAPI::readyForCommand()+0x4d>
c001c411:	b0 01                	mov    al,0x1
c001c413:	5a                   	pop    edx
c001c414:	5b                   	pop    ebx
c001c415:	5e                   	pop    esi
c001c416:	c3                   	ret    
c001c417:	90                   	nop

c001c418 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c418:	55                   	push   ebp
c001c419:	57                   	push   edi
c001c41a:	56                   	push   esi
c001c41b:	53                   	push   ebx
c001c41c:	83 ec 20             	sub    esp,0x20
c001c41f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c423:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c427:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c42b:	6a 01                	push   0x1
c001c42d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c434:	50                   	push   eax
c001c435:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c43b:	e8 6e e9 ff ff       	call   c001adae <IDE::enableIRQs(unsigned char, bool)>
c001c440:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c447:	59                   	pop    ecx
c001c448:	5e                   	pop    esi
c001c449:	50                   	push   eax
c001c44a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c450:	e8 21 e7 ff ff       	call   c001ab76 <IDE::prepareInterrupt(unsigned char)>
c001c455:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c458:	e8 69 ff ff ff       	call   c001c3c6 <ATAPI::readyForCommand()>
c001c45d:	83 c4 10             	add    esp,0x10
c001c460:	84 c0                	test   al,al
c001c462:	75 0a                	jne    c001c46e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001c464:	bb 01 00 00 00       	mov    ebx,0x1
c001c469:	e9 5f 02 00 00       	jmp    c001c6cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c46e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c474:	c1 e0 04             	shl    eax,0x4
c001c477:	0f b6 c0             	movzx  eax,al
c001c47a:	50                   	push   eax
c001c47b:	6a 06                	push   0x6
c001c47d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c484:	50                   	push   eax
c001c485:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c48b:	e8 0c e7 ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c490:	6a 00                	push   0x0
c001c492:	6a 01                	push   0x1
c001c494:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c49b:	50                   	push   eax
c001c49c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4a2:	e8 f5 e6 ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4a7:	83 c4 20             	add    esp,0x20
c001c4aa:	0f b6 c3             	movzx  eax,bl
c001c4ad:	0f b6 df             	movzx  ebx,bh
c001c4b0:	50                   	push   eax
c001c4b1:	6a 04                	push   0x4
c001c4b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4ba:	50                   	push   eax
c001c4bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4c1:	e8 d6 e6 ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4c6:	53                   	push   ebx
c001c4c7:	6a 05                	push   0x5
c001c4c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4d0:	50                   	push   eax
c001c4d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4d7:	e8 c0 e6 ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4dc:	83 c4 20             	add    esp,0x20
c001c4df:	68 a0 00 00 00       	push   0xa0
c001c4e4:	6a 07                	push   0x7
c001c4e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4ed:	50                   	push   eax
c001c4ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4f4:	e8 a3 e6 ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4f9:	83 c4 0c             	add    esp,0xc
c001c4fc:	6a 01                	push   0x1
c001c4fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c505:	50                   	push   eax
c001c506:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c50c:	e8 73 f1 ff ff       	call   c001b684 <IDE::polling(unsigned char, unsigned int)>
c001c511:	83 c4 10             	add    esp,0x10
c001c514:	0f b6 d8             	movzx  ebx,al
c001c517:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c51d:	85 db                	test   ebx,ebx
c001c51f:	74 20                	je     c001c541 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001c521:	53                   	push   ebx
c001c522:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c529:	0f b6 c0             	movzx  eax,al
c001c52c:	52                   	push   edx
c001c52d:	50                   	push   eax
c001c52e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c534:	e8 91 f0 ff ff       	call   c001b5ca <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c539:	83 c4 10             	add    esp,0x10
c001c53c:	e9 8c 01 00 00       	jmp    c001c6cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c541:	0f b6 c0             	movzx  eax,al
c001c544:	52                   	push   edx
c001c545:	52                   	push   edx
c001c546:	50                   	push   eax
c001c547:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c54d:	e8 38 e6 ff ff       	call   c001ab8a <IDE::getBase(unsigned char)>
c001c552:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c556:	b9 06 00 00 00       	mov    ecx,0x6
c001c55b:	89 c2                	mov    edx,eax
c001c55d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c560:	89 e8                	mov    eax,ebp
c001c562:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c566:	83 c4 10             	add    esp,0x10
c001c569:	0f b6 c0             	movzx  eax,al
c001c56c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c570:	85 db                	test   ebx,ebx
c001c572:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c578:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c57f:	0f 84 eb 00 00 00    	je     c001c670 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001c585:	55                   	push   ebp
c001c586:	55                   	push   ebp
c001c587:	52                   	push   edx
c001c588:	50                   	push   eax
c001c589:	e8 86 e7 ff ff       	call   c001ad14 <IDE::waitInterrupt(unsigned char)>
c001c58e:	83 c4 10             	add    esp,0x10
c001c591:	84 c0                	test   al,al
c001c593:	0f 84 cb fe ff ff    	je     c001c464 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c599:	56                   	push   esi
c001c59a:	56                   	push   esi
c001c59b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5a2:	50                   	push   eax
c001c5a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5a9:	e8 c8 e5 ff ff       	call   c001ab76 <IDE::prepareInterrupt(unsigned char)>
c001c5ae:	83 c4 0c             	add    esp,0xc
c001c5b1:	6a 04                	push   0x4
c001c5b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5ba:	50                   	push   eax
c001c5bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5c1:	e8 98 e6 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001c5c6:	83 c4 0c             	add    esp,0xc
c001c5c9:	6a 05                	push   0x5
c001c5cb:	89 c6                	mov    esi,eax
c001c5cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5d4:	50                   	push   eax
c001c5d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5db:	e8 7e e6 ff ff       	call   c001ac5e <IDE::read(unsigned char, unsigned char)>
c001c5e0:	83 c4 10             	add    esp,0x10
c001c5e3:	0f b6 e8             	movzx  ebp,al
c001c5e6:	89 f0                	mov    eax,esi
c001c5e8:	c1 e5 08             	shl    ebp,0x8
c001c5eb:	0f b6 f0             	movzx  esi,al
c001c5ee:	09 f5                	or     ebp,esi
c001c5f0:	31 f6                	xor    esi,esi
c001c5f2:	d1 fd                	sar    ebp,1
c001c5f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c5f9:	74 5c                	je     c001c657 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001c5fb:	39 ee                	cmp    esi,ebp
c001c5fd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c603:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c60a:	75 0d                	jne    c001c619 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001c60c:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001c60f:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001c613:	4b                   	dec    ebx
c001c614:	e9 57 ff ff ff       	jmp    c001c570 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001c619:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c61d:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001c621:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001c626:	51                   	push   ecx
c001c627:	51                   	push   ecx
c001c628:	52                   	push   edx
c001c629:	50                   	push   eax
c001c62a:	e8 5b e5 ff ff       	call   c001ab8a <IDE::getBase(unsigned char)>
c001c62f:	89 c2                	mov    edx,eax
c001c631:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001c636:	66 ef                	out    dx,ax
c001c638:	46                   	inc    esi
c001c639:	83 c4 10             	add    esp,0x10
c001c63c:	eb bd                	jmp    c001c5fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001c63e:	51                   	push   ecx
c001c63f:	51                   	push   ecx
c001c640:	52                   	push   edx
c001c641:	50                   	push   eax
c001c642:	e8 43 e5 ff ff       	call   c001ab8a <IDE::getBase(unsigned char)>
c001c647:	89 c2                	mov    edx,eax
c001c649:	66 ed                	in     ax,dx
c001c64b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c64f:	83 c4 10             	add    esp,0x10
c001c652:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001c656:	46                   	inc    esi
c001c657:	39 ee                	cmp    esi,ebp
c001c659:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c65f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c666:	75 d6                	jne    c001c63e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001c668:	01 f6                	add    esi,esi
c001c66a:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001c66e:	eb a3                	jmp    c001c613 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001c670:	51                   	push   ecx
c001c671:	51                   	push   ecx
c001c672:	52                   	push   edx
c001c673:	50                   	push   eax
c001c674:	e8 9b e6 ff ff       	call   c001ad14 <IDE::waitInterrupt(unsigned char)>
c001c679:	83 c4 10             	add    esp,0x10
c001c67c:	84 c0                	test   al,al
c001c67e:	0f 84 e0 fd ff ff    	je     c001c464 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001c684:	52                   	push   edx
c001c685:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c68a:	52                   	push   edx
c001c68b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c692:	50                   	push   eax
c001c693:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c699:	e8 d8 e4 ff ff       	call   c001ab76 <IDE::prepareInterrupt(unsigned char)>
c001c69e:	83 c4 10             	add    esp,0x10
c001c6a1:	50                   	push   eax
c001c6a2:	50                   	push   eax
c001c6a3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6aa:	50                   	push   eax
c001c6ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6b1:	e8 d4 e4 ff ff       	call   c001ab8a <IDE::getBase(unsigned char)>
c001c6b6:	8d 50 07             	lea    edx,[eax+0x7]
c001c6b9:	ec                   	in     al,dx
c001c6ba:	83 c4 10             	add    esp,0x10
c001c6bd:	a8 88                	test   al,0x88
c001c6bf:	74 0a                	je     c001c6cb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001c6c1:	4b                   	dec    ebx
c001c6c2:	75 dd                	jne    c001c6a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001c6c4:	bb 02 00 00 00       	mov    ebx,0x2
c001c6c9:	eb 02                	jmp    c001c6cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c6cb:	31 db                	xor    ebx,ebx
c001c6cd:	83 c4 1c             	add    esp,0x1c
c001c6d0:	89 d8                	mov    eax,ebx
c001c6d2:	5b                   	pop    ebx
c001c6d3:	5e                   	pop    esi
c001c6d4:	5f                   	pop    edi
c001c6d5:	5d                   	pop    ebp
c001c6d6:	c3                   	ret    
c001c6d7:	90                   	nop

c001c6d8 <ATAPI::diskRemoved()>:
c001c6d8:	53                   	push   ebx
c001c6d9:	83 ec 14             	sub    esp,0x14
c001c6dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c6e0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c6e7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c6ed:	e8 82 09 ff ff       	call   c000d074 <LogicalDisk::unmount()>
c001c6f2:	58                   	pop    eax
c001c6f3:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c6f9:	e8 5a 13 ff ff       	call   c000da58 <VCache::writeWriteBuffer()>
c001c6fe:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c704:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c708:	83 c4 18             	add    esp,0x18
c001c70b:	5b                   	pop    ebx
c001c70c:	e9 37 13 ff ff       	jmp    c000da48 <VCache::invalidateReadBuffer()>
c001c711:	90                   	nop

c001c712 <ATAPI::eject()>:
c001c712:	57                   	push   edi
c001c713:	b9 03 00 00 00       	mov    ecx,0x3
c001c718:	53                   	push   ebx
c001c719:	83 ec 14             	sub    esp,0x14
c001c71c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c720:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c724:	fc                   	cld    
c001c725:	31 c0                	xor    eax,eax
c001c727:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c729:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c72e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c733:	50                   	push   eax
c001c734:	50                   	push   eax
c001c735:	6a 00                	push   0x0
c001c737:	6a 00                	push   0x0
c001c739:	6a 00                	push   0x0
c001c73b:	6a 02                	push   0x2
c001c73d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c741:	50                   	push   eax
c001c742:	53                   	push   ebx
c001c743:	e8 d0 fc ff ff       	call   c001c418 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c748:	83 c4 14             	add    esp,0x14
c001c74b:	53                   	push   ebx
c001c74c:	e8 87 ff ff ff       	call   c001c6d8 <ATAPI::diskRemoved()>
c001c751:	83 c4 24             	add    esp,0x24
c001c754:	31 c0                	xor    eax,eax
c001c756:	5b                   	pop    ebx
c001c757:	5f                   	pop    edi
c001c758:	c3                   	ret    
c001c759:	90                   	nop

c001c75a <ATAPI::diskInserted()>:
c001c75a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c75e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c765:	c3                   	ret    

c001c766 <ATAPI::detectMedia()>:
c001c766:	56                   	push   esi
c001c767:	53                   	push   ebx
c001c768:	83 ec 28             	sub    esp,0x28
c001c76b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c76f:	6a 0c                	push   0xc
c001c771:	6a 00                	push   0x0
c001c773:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c777:	56                   	push   esi
c001c778:	e8 73 3d fe ff       	call   c00004f0 <memset>
c001c77d:	58                   	pop    eax
c001c77e:	5a                   	pop    edx
c001c77f:	6a 00                	push   0x0
c001c781:	6a 00                	push   0x0
c001c783:	6a 00                	push   0x0
c001c785:	6a 00                	push   0x0
c001c787:	56                   	push   esi
c001c788:	53                   	push   ebx
c001c789:	e8 8a fc ff ff       	call   c001c418 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c78e:	83 c4 1c             	add    esp,0x1c
c001c791:	6a 0c                	push   0xc
c001c793:	6a 00                	push   0x0
c001c795:	56                   	push   esi
c001c796:	e8 55 3d fe ff       	call   c00004f0 <memset>
c001c79b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c7a0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c7a5:	59                   	pop    ecx
c001c7a6:	58                   	pop    eax
c001c7a7:	6a 01                	push   0x1
c001c7a9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c7ad:	50                   	push   eax
c001c7ae:	6a 00                	push   0x0
c001c7b0:	6a 12                	push   0x12
c001c7b2:	56                   	push   esi
c001c7b3:	53                   	push   ebx
c001c7b4:	e8 5f fc ff ff       	call   c001c418 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c7b9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c7bd:	83 c4 20             	add    esp,0x20
c001c7c0:	83 e0 7f             	and    eax,0x7f
c001c7c3:	83 f8 70             	cmp    eax,0x70
c001c7c6:	74 15                	je     c001c7dd <ATAPI::detectMedia()+0x77>
c001c7c8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c7cf:	75 0c                	jne    c001c7dd <ATAPI::detectMedia()+0x77>
c001c7d1:	83 ec 0c             	sub    esp,0xc
c001c7d4:	53                   	push   ebx
c001c7d5:	e8 80 ff ff ff       	call   c001c75a <ATAPI::diskInserted()>
c001c7da:	83 c4 10             	add    esp,0x10
c001c7dd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c7e1:	83 e0 0f             	and    eax,0xf
c001c7e4:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c7e9:	0f b6 c0             	movzx  eax,al
c001c7ec:	75 19                	jne    c001c807 <ATAPI::detectMedia()+0xa1>
c001c7ee:	83 f8 02             	cmp    eax,0x2
c001c7f1:	75 14                	jne    c001c807 <ATAPI::detectMedia()+0xa1>
c001c7f3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c7fa:	74 24                	je     c001c820 <ATAPI::detectMedia()+0xba>
c001c7fc:	83 ec 0c             	sub    esp,0xc
c001c7ff:	53                   	push   ebx
c001c800:	e8 d3 fe ff ff       	call   c001c6d8 <ATAPI::diskRemoved()>
c001c805:	eb 16                	jmp    c001c81d <ATAPI::detectMedia()+0xb7>
c001c807:	85 c0                	test   eax,eax
c001c809:	75 15                	jne    c001c820 <ATAPI::detectMedia()+0xba>
c001c80b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c812:	75 0c                	jne    c001c820 <ATAPI::detectMedia()+0xba>
c001c814:	83 ec 0c             	sub    esp,0xc
c001c817:	53                   	push   ebx
c001c818:	e8 3d ff ff ff       	call   c001c75a <ATAPI::diskInserted()>
c001c81d:	83 c4 10             	add    esp,0x10
c001c820:	83 c4 24             	add    esp,0x24
c001c823:	5b                   	pop    ebx
c001c824:	5e                   	pop    esi
c001c825:	c3                   	ret    

c001c826 <ATAPI::open(int, int, void*)>:
c001c826:	56                   	push   esi
c001c827:	53                   	push   ebx
c001c828:	50                   	push   eax
c001c829:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c82d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c831:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c835:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c83b:	c1 e0 06             	shl    eax,0x6
c001c83e:	01 d0                	add    eax,edx
c001c840:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c846:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c84d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c853:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c85a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c864:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c86b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c871:	6a 04                	push   0x4
c001c873:	6a 0c                	push   0xc
c001c875:	51                   	push   ecx
c001c876:	52                   	push   edx
c001c877:	e8 20 e3 ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c87c:	90                   	nop
c001c87d:	90                   	nop
c001c87e:	6a 00                	push   0x0
c001c880:	6a 0c                	push   0xc
c001c882:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c889:	50                   	push   eax
c001c88a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c890:	e8 07 e3 ff ff       	call   c001ab9c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c895:	83 c4 14             	add    esp,0x14
c001c898:	68 78 01 00 00       	push   0x178
c001c89d:	e8 8d b1 fe ff       	call   c0007a2f <malloc>
c001c8a2:	83 c4 0c             	add    esp,0xc
c001c8a5:	6a 00                	push   0x0
c001c8a7:	89 c6                	mov    esi,eax
c001c8a9:	68 ff ff ff 7f       	push   0x7fffffff
c001c8ae:	6a 00                	push   0x0
c001c8b0:	6a 00                	push   0x0
c001c8b2:	53                   	push   ebx
c001c8b3:	68 8b 1c 02 c0       	push   0xc0021c8b
c001c8b8:	50                   	push   eax
c001c8b9:	e8 f4 05 ff ff       	call   c000ceb2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c8be:	83 c4 14             	add    esp,0x14
c001c8c1:	56                   	push   esi
c001c8c2:	e8 ab 06 ff ff       	call   c000cf72 <LogicalDisk::assignDriveLetter()>
c001c8c7:	5a                   	pop    edx
c001c8c8:	59                   	pop    ecx
c001c8c9:	0f be c0             	movsx  eax,al
c001c8cc:	50                   	push   eax
c001c8cd:	68 dc 1a 02 c0       	push   0xc0021adc
c001c8d2:	e8 ca df fe ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c001c8d7:	58                   	pop    eax
c001c8d8:	5a                   	pop    edx
c001c8d9:	56                   	push   esi
c001c8da:	53                   	push   ebx
c001c8db:	e8 26 f4 fe ff       	call   c000bd06 <Device::addChild(Device*)>
c001c8e0:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c8e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8e9:	e8 4c f8 fe ff       	call   c000c13a <PhysicalDisk::startCache()>
c001c8ee:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c8f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8f8:	e8 69 fe ff ff       	call   c001c766 <ATAPI::detectMedia()>
c001c8fd:	83 c4 14             	add    esp,0x14
c001c900:	31 c0                	xor    eax,eax
c001c902:	5b                   	pop    ebx
c001c903:	5e                   	pop    esi
c001c904:	c3                   	ret    
c001c905:	90                   	nop

c001c906 <ATAPI::read(unsigned long long, int, void*)>:
c001c906:	55                   	push   ebp
c001c907:	57                   	push   edi
c001c908:	56                   	push   esi
c001c909:	53                   	push   ebx
c001c90a:	83 ec 1c             	sub    esp,0x1c
c001c90d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c911:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c915:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c919:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c920:	74 3c                	je     c001c95e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c922:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c926:	b9 03 00 00 00       	mov    ecx,0x3
c001c92b:	fc                   	cld    
c001c92c:	31 c0                	xor    eax,eax
c001c92e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c930:	89 e8                	mov    eax,ebp
c001c932:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c937:	0f ce                	bswap  esi
c001c939:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001c93d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c941:	50                   	push   eax
c001c942:	50                   	push   eax
c001c943:	55                   	push   ebp
c001c944:	c1 e5 0b             	shl    ebp,0xb
c001c947:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c94b:	6a 00                	push   0x0
c001c94d:	55                   	push   ebp
c001c94e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c952:	50                   	push   eax
c001c953:	53                   	push   ebx
c001c954:	e8 bf fa ff ff       	call   c001c418 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c959:	83 c4 20             	add    esp,0x20
c001c95c:	eb 1a                	jmp    c001c978 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001c95e:	83 ec 0c             	sub    esp,0xc
c001c961:	53                   	push   ebx
c001c962:	e8 ff fd ff ff       	call   c001c766 <ATAPI::detectMedia()>
c001c967:	83 c4 10             	add    esp,0x10
c001c96a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c971:	75 af                	jne    c001c922 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c973:	b8 02 00 00 00       	mov    eax,0x2
c001c978:	83 c4 1c             	add    esp,0x1c
c001c97b:	5b                   	pop    ebx
c001c97c:	5e                   	pop    esi
c001c97d:	5f                   	pop    edi
c001c97e:	5d                   	pop    ebp
c001c97f:	c3                   	ret    

c001c980 <SATA::close(int, int, void*)>:
c001c980:	83 ec 0c             	sub    esp,0xc
c001c983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c987:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c98d:	85 c0                	test   eax,eax
c001c98f:	74 0c                	je     c001c99d <SATA::close(int, int, void*)+0x1d>
c001c991:	8b 10                	mov    edx,DWORD PTR [eax]
c001c993:	83 ec 0c             	sub    esp,0xc
c001c996:	50                   	push   eax
c001c997:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c99a:	83 c4 10             	add    esp,0x10
c001c99d:	31 c0                	xor    eax,eax
c001c99f:	83 c4 0c             	add    esp,0xc
c001c9a2:	c3                   	ret    
c001c9a3:	90                   	nop

c001c9a4 <SATA::powerSaving(PowerSavingLevel)>:
c001c9a4:	c3                   	ret    
c001c9a5:	90                   	nop

c001c9a6 <SATA::open(int, int, void*)>:
c001c9a6:	56                   	push   esi
c001c9a7:	53                   	push   ebx
c001c9a8:	50                   	push   eax
c001c9a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c9ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c9b1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c9bb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c9c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c9c5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c9cf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c9d9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c9e0:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001c9e6:	e8 4f b3 fe ff       	call   c0007d3a <Phys::allocatePage()>
c001c9eb:	89 c6                	mov    esi,eax
c001c9ed:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c9f3:	e8 42 b3 fe ff       	call   c0007d3a <Phys::allocatePage()>
c001c9f8:	81 c6 00 10 00 00    	add    esi,0x1000
c001c9fe:	39 c6                	cmp    esi,eax
c001ca00:	74 10                	je     c001ca12 <SATA::open(int, int, void*)+0x6c>
c001ca02:	83 ec 0c             	sub    esp,0xc
c001ca05:	68 24 1b 02 c0       	push   0xc0021b24
c001ca0a:	e8 f8 3d ff ff       	call   c0010807 <KePanic(char const*)>
c001ca0f:	83 c4 10             	add    esp,0x10
c001ca12:	83 ec 0c             	sub    esp,0xc
c001ca15:	6a 02                	push   0x2
c001ca17:	e8 51 cb fe ff       	call   c000956d <Virt::allocateKernelVirtualPages(int)>
c001ca1c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ca22:	6a 03                	push   0x3
c001ca24:	50                   	push   eax
c001ca25:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ca2b:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001ca31:	e8 1e d2 fe ff       	call   c0009c54 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca36:	83 c4 14             	add    esp,0x14
c001ca39:	53                   	push   ebx
c001ca3a:	e8 fb f6 fe ff       	call   c000c13a <PhysicalDisk::startCache()>
c001ca3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca42:	e8 3f 09 ff ff       	call   c000d386 <createPartitionsForDisk(PhysicalDisk*)>
c001ca47:	83 c4 14             	add    esp,0x14
c001ca4a:	31 c0                	xor    eax,eax
c001ca4c:	5b                   	pop    ebx
c001ca4d:	5e                   	pop    esi
c001ca4e:	c3                   	ret    
c001ca4f:	90                   	nop

c001ca50 <SATA::SATA()>:
c001ca50:	83 ec 0c             	sub    esp,0xc
c001ca53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca57:	83 ec 04             	sub    esp,0x4
c001ca5a:	68 00 02 00 00       	push   0x200
c001ca5f:	68 38 1b 02 c0       	push   0xc0021b38
c001ca64:	50                   	push   eax
c001ca65:	e8 68 f6 fe ff       	call   c000c0d2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ca6a:	83 c4 10             	add    esp,0x10
c001ca6d:	ba a8 1b 02 c0       	mov    edx,0xc0021ba8
c001ca72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca76:	89 10                	mov    DWORD PTR [eax],edx
c001ca78:	90                   	nop
c001ca79:	83 c4 0c             	add    esp,0xc
c001ca7c:	c3                   	ret    
c001ca7d:	90                   	nop

c001ca7e <SATA::access(unsigned long long, int, void*, bool)>:
c001ca7e:	55                   	push   ebp
c001ca7f:	57                   	push   edi
c001ca80:	56                   	push   esi
c001ca81:	53                   	push   ebx
c001ca82:	83 ec 2c             	sub    esp,0x2c
c001ca85:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ca89:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ca8e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ca92:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca96:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ca9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca9e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001caa2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001caa6:	7e 10                	jle    c001cab8 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001caa8:	83 ec 0c             	sub    esp,0xc
c001caab:	68 48 1b 02 c0       	push   0xc0021b48
c001cab0:	e8 52 3d ff ff       	call   c0010807 <KePanic(char const*)>
c001cab5:	83 c4 10             	add    esp,0x10
c001cab8:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cabe:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001cac4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001caca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cace:	89 e8                	mov    eax,ebp
c001cad0:	c1 e0 07             	shl    eax,0x7
c001cad3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cad7:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cae1:	8d 45 02             	lea    eax,[ebp+0x2]
c001cae4:	52                   	push   edx
c001cae5:	c1 e0 07             	shl    eax,0x7
c001cae8:	52                   	push   edx
c001cae9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001caed:	50                   	push   eax
c001caee:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001caf4:	e8 6b ec ff ff       	call   c001b764 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001caf9:	83 c4 10             	add    esp,0x10
c001cafc:	83 f8 ff             	cmp    eax,0xffffffff
c001caff:	89 c2                	mov    edx,eax
c001cb01:	0f 84 5d 01 00 00    	je     c001cc64 <SATA::access(unsigned long long, int, void*, bool)+0x1e6>
c001cb07:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cb0b:	c1 e0 09             	shl    eax,0x9
c001cb0e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cb13:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb17:	74 0e                	je     c001cb27 <SATA::access(unsigned long long, int, void*, bool)+0xa9>
c001cb19:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cb1f:	89 c1                	mov    ecx,eax
c001cb21:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cb25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb27:	8d 45 02             	lea    eax,[ebp+0x2]
c001cb2a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cb30:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cb34:	c1 e0 07             	shl    eax,0x7
c001cb37:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cb3b:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb3d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cb43:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cb49:	89 d1                	mov    ecx,edx
c001cb4b:	c1 e1 05             	shl    ecx,0x5
c001cb4e:	01 c8                	add    eax,ecx
c001cb50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cb54:	83 e1 01             	and    ecx,0x1
c001cb57:	89 ce                	mov    esi,ecx
c001cb59:	8a 08                	mov    cl,BYTE PTR [eax]
c001cb5b:	c1 e6 06             	shl    esi,0x6
c001cb5e:	83 e1 bf             	and    ecx,0xffffffbf
c001cb61:	09 f1                	or     ecx,esi
c001cb63:	88 08                	mov    BYTE PTR [eax],cl
c001cb65:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cb67:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cb6d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cb73:	89 08                	mov    DWORD PTR [eax],ecx
c001cb75:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cb7b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cb81:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cb87:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cb8a:	50                   	push   eax
c001cb8b:	68 90 00 00 00       	push   0x90
c001cb90:	6a 00                	push   0x0
c001cb92:	56                   	push   esi
c001cb93:	e8 58 39 fe ff       	call   c00004f0 <memset>
c001cb98:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cb9e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001cba4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cba8:	83 c4 10             	add    esp,0x10
c001cbab:	48                   	dec    eax
c001cbac:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cbb1:	89 c1                	mov    ecx,eax
c001cbb3:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001cbb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cbbe:	09 c8                	or     eax,ecx
c001cbc0:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001cbc6:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001cbcc:	83 c8 80             	or     eax,0xffffff80
c001cbcf:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001cbd5:	66 8b 06             	mov    ax,WORD PTR [esi]
c001cbd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbdc:	25 00 7f 00 00       	and    eax,0x7f00
c001cbe1:	0d 27 80 ff ff       	or     eax,0xffff8027
c001cbe6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cbeb:	66 89 06             	mov    WORD PTR [esi],ax
c001cbee:	b0 35                	mov    al,0x35
c001cbf0:	75 02                	jne    c001cbf4 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c001cbf2:	b0 25                	mov    al,0x25
c001cbf4:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001cbf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cbfb:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001cbff:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001cc03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc07:	c1 e8 10             	shr    eax,0x10
c001cc0a:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001cc0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc11:	c1 e8 18             	shr    eax,0x18
c001cc14:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cc17:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cc1b:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001cc1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc22:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001cc25:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cc29:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001cc2d:	89 ee                	mov    esi,ebp
c001cc2f:	31 c0                	xor    eax,eax
c001cc31:	c1 e6 07             	shl    esi,0x7
c001cc34:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cc38:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001cc3e:	80 e1 88             	and    cl,0x88
c001cc41:	74 0a                	je     c001cc4d <SATA::access(unsigned long long, int, void*, bool)+0x1cf>
c001cc43:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cc48:	74 0a                	je     c001cc54 <SATA::access(unsigned long long, int, void*, bool)+0x1d6>
c001cc4a:	40                   	inc    eax
c001cc4b:	eb eb                	jmp    c001cc38 <SATA::access(unsigned long long, int, void*, bool)+0x1ba>
c001cc4d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cc52:	75 17                	jne    c001cc6b <SATA::access(unsigned long long, int, void*, bool)+0x1ed>
c001cc54:	83 ec 0c             	sub    esp,0xc
c001cc57:	68 81 1b 02 c0       	push   0xc0021b81
c001cc5c:	e8 40 dc fe ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c001cc61:	83 c4 10             	add    esp,0x10
c001cc64:	b8 01 00 00 00       	mov    eax,0x1
c001cc69:	eb 5d                	jmp    c001ccc8 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001cc6b:	88 d1                	mov    cl,dl
c001cc6d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc71:	b8 01 00 00 00       	mov    eax,0x1
c001cc76:	c1 e5 07             	shl    ebp,0x7
c001cc79:	d3 e0                	shl    eax,cl
c001cc7b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001cc81:	01 ea                	add    edx,ebp
c001cc83:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001cc89:	85 c8                	test   eax,ecx
c001cc8b:	74 16                	je     c001cca3 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001cc8d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001cc93:	0f ba e1 1e          	bt     ecx,0x1e
c001cc97:	73 ea                	jae    c001cc83 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001cc99:	83 ec 0c             	sub    esp,0xc
c001cc9c:	68 8f 1b 02 c0       	push   0xc0021b8f
c001cca1:	eb b9                	jmp    c001cc5c <SATA::access(unsigned long long, int, void*, bool)+0x1de>
c001cca3:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001cca9:	0f ba e0 1e          	bt     eax,0x1e
c001ccad:	72 b5                	jb     c001cc64 <SATA::access(unsigned long long, int, void*, bool)+0x1e6>
c001ccaf:	31 c0                	xor    eax,eax
c001ccb1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ccb6:	75 10                	jne    c001ccc8 <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001ccb8:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ccbe:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ccc2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ccc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ccc8:	83 c4 2c             	add    esp,0x2c
c001cccb:	5b                   	pop    ebx
c001cccc:	5e                   	pop    esi
c001cccd:	5f                   	pop    edi
c001ccce:	5d                   	pop    ebp
c001cccf:	c3                   	ret    

c001ccd0 <SATA::read(unsigned long long, int, void*)>:
c001ccd0:	55                   	push   ebp
c001ccd1:	57                   	push   edi
c001ccd2:	56                   	push   esi
c001ccd3:	be 04 00 00 00       	mov    esi,0x4
c001ccd8:	53                   	push   ebx
c001ccd9:	83 ec 0c             	sub    esp,0xc
c001ccdc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cce0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cce4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cce8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ccec:	8d 7b ff             	lea    edi,[ebx-0x1]
c001ccef:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ccf5:	0f 87 1a 02 00 00    	ja     c001cf15 <SATA::read(unsigned long long, int, void*)+0x245>
c001ccfb:	85 c9                	test   ecx,ecx
c001ccfd:	be 06 00 00 00       	mov    esi,0x6
c001cd02:	0f 84 0d 02 00 00    	je     c001cf15 <SATA::read(unsigned long long, int, void*)+0x245>
c001cd08:	56                   	push   esi
c001cd09:	56                   	push   esi
c001cd0a:	6a 00                	push   0x0
c001cd0c:	51                   	push   ecx
c001cd0d:	53                   	push   ebx
c001cd0e:	52                   	push   edx
c001cd0f:	50                   	push   eax
c001cd10:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd14:	e8 65 fd ff ff       	call   c001ca7e <SATA::access(unsigned long long, int, void*, bool)>
c001cd19:	83 c4 20             	add    esp,0x20
c001cd1c:	85 c0                	test   eax,eax
c001cd1e:	89 c6                	mov    esi,eax
c001cd20:	0f 85 ea 01 00 00    	jne    c001cf10 <SATA::read(unsigned long long, int, void*)+0x240>
c001cd26:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001cd2c:	50                   	push   eax
c001cd2d:	bb 0a 00 00 00       	mov    ebx,0xa
c001cd32:	50                   	push   eax
c001cd33:	6a 0f                	push   0xf
c001cd35:	6a 00                	push   0x0
c001cd37:	e8 7d f2 ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001cd3c:	5a                   	pop    edx
c001cd3d:	0f b6 c0             	movzx  eax,al
c001cd40:	59                   	pop    ecx
c001cd41:	b9 10 27 00 00       	mov    ecx,0x2710
c001cd46:	50                   	push   eax
c001cd47:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cd4c:	99                   	cdq    
c001cd4d:	f7 f9                	idiv   ecx
c001cd4f:	99                   	cdq    
c001cd50:	f7 fb                	idiv   ebx
c001cd52:	8d 42 30             	lea    eax,[edx+0x30]
c001cd55:	0f b6 c0             	movzx  eax,al
c001cd58:	50                   	push   eax
c001cd59:	e8 4a f2 ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001cd5e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cd64:	5f                   	pop    edi
c001cd65:	5d                   	pop    ebp
c001cd66:	6a 0f                	push   0xf
c001cd68:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cd6d:	6a 00                	push   0x0
c001cd6f:	e8 45 f2 ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001cd74:	5a                   	pop    edx
c001cd75:	0f b6 c0             	movzx  eax,al
c001cd78:	59                   	pop    ecx
c001cd79:	50                   	push   eax
c001cd7a:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cd7f:	99                   	cdq    
c001cd80:	f7 fd                	idiv   ebp
c001cd82:	99                   	cdq    
c001cd83:	f7 fb                	idiv   ebx
c001cd85:	8d 42 30             	lea    eax,[edx+0x30]
c001cd88:	0f b6 c0             	movzx  eax,al
c001cd8b:	50                   	push   eax
c001cd8c:	e8 17 f2 ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001cd91:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cd97:	5f                   	pop    edi
c001cd98:	bf 64 00 00 00       	mov    edi,0x64
c001cd9d:	58                   	pop    eax
c001cd9e:	6a 0f                	push   0xf
c001cda0:	6a 00                	push   0x0
c001cda2:	e8 12 f2 ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001cda7:	5a                   	pop    edx
c001cda8:	0f b6 c0             	movzx  eax,al
c001cdab:	59                   	pop    ecx
c001cdac:	50                   	push   eax
c001cdad:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cdb2:	99                   	cdq    
c001cdb3:	f7 ff                	idiv   edi
c001cdb5:	99                   	cdq    
c001cdb6:	f7 fb                	idiv   ebx
c001cdb8:	8d 42 30             	lea    eax,[edx+0x30]
c001cdbb:	0f b6 c0             	movzx  eax,al
c001cdbe:	50                   	push   eax
c001cdbf:	e8 e4 f1 ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001cdc4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cdca:	58                   	pop    eax
c001cdcb:	5a                   	pop    edx
c001cdcc:	6a 0f                	push   0xf
c001cdce:	6a 00                	push   0x0
c001cdd0:	e8 e4 f1 ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001cdd5:	59                   	pop    ecx
c001cdd6:	0f b6 c0             	movzx  eax,al
c001cdd9:	5a                   	pop    edx
c001cdda:	50                   	push   eax
c001cddb:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cde0:	99                   	cdq    
c001cde1:	f7 fb                	idiv   ebx
c001cde3:	99                   	cdq    
c001cde4:	f7 fb                	idiv   ebx
c001cde6:	8d 42 30             	lea    eax,[edx+0x30]
c001cde9:	0f b6 c0             	movzx  eax,al
c001cdec:	50                   	push   eax
c001cded:	e8 b6 f1 ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001cdf2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cdf8:	59                   	pop    ecx
c001cdf9:	58                   	pop    eax
c001cdfa:	6a 0f                	push   0xf
c001cdfc:	6a 00                	push   0x0
c001cdfe:	e8 b6 f1 ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001ce03:	5a                   	pop    edx
c001ce04:	0f b6 c0             	movzx  eax,al
c001ce07:	59                   	pop    ecx
c001ce08:	50                   	push   eax
c001ce09:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce0e:	99                   	cdq    
c001ce0f:	f7 fb                	idiv   ebx
c001ce11:	8d 42 30             	lea    eax,[edx+0x30]
c001ce14:	0f b6 c0             	movzx  eax,al
c001ce17:	50                   	push   eax
c001ce18:	e8 8b f1 ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001ce1d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce23:	58                   	pop    eax
c001ce24:	5a                   	pop    edx
c001ce25:	6a 0f                	push   0xf
c001ce27:	6a 00                	push   0x0
c001ce29:	e8 8b f1 ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001ce2e:	59                   	pop    ecx
c001ce2f:	b9 10 27 00 00       	mov    ecx,0x2710
c001ce34:	0f b6 c0             	movzx  eax,al
c001ce37:	5a                   	pop    edx
c001ce38:	50                   	push   eax
c001ce39:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ce3e:	99                   	cdq    
c001ce3f:	f7 f9                	idiv   ecx
c001ce41:	99                   	cdq    
c001ce42:	f7 fb                	idiv   ebx
c001ce44:	8d 42 30             	lea    eax,[edx+0x30]
c001ce47:	0f b6 c0             	movzx  eax,al
c001ce4a:	50                   	push   eax
c001ce4b:	e8 58 f1 ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001ce50:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce56:	59                   	pop    ecx
c001ce57:	58                   	pop    eax
c001ce58:	6a 0f                	push   0xf
c001ce5a:	6a 00                	push   0x0
c001ce5c:	e8 58 f1 ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001ce61:	5a                   	pop    edx
c001ce62:	0f b6 c0             	movzx  eax,al
c001ce65:	59                   	pop    ecx
c001ce66:	50                   	push   eax
c001ce67:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ce6c:	99                   	cdq    
c001ce6d:	f7 fd                	idiv   ebp
c001ce6f:	99                   	cdq    
c001ce70:	f7 fb                	idiv   ebx
c001ce72:	8d 42 30             	lea    eax,[edx+0x30]
c001ce75:	0f b6 c0             	movzx  eax,al
c001ce78:	50                   	push   eax
c001ce79:	e8 2a f1 ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001ce7e:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ce84:	5d                   	pop    ebp
c001ce85:	58                   	pop    eax
c001ce86:	6a 0f                	push   0xf
c001ce88:	6a 00                	push   0x0
c001ce8a:	e8 2a f1 ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001ce8f:	5a                   	pop    edx
c001ce90:	0f b6 c0             	movzx  eax,al
c001ce93:	59                   	pop    ecx
c001ce94:	50                   	push   eax
c001ce95:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ce9a:	99                   	cdq    
c001ce9b:	f7 ff                	idiv   edi
c001ce9d:	99                   	cdq    
c001ce9e:	f7 fb                	idiv   ebx
c001cea0:	8d 42 30             	lea    eax,[edx+0x30]
c001cea3:	0f b6 c0             	movzx  eax,al
c001cea6:	50                   	push   eax
c001cea7:	e8 fc f0 ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001ceac:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ceb2:	5f                   	pop    edi
c001ceb3:	5d                   	pop    ebp
c001ceb4:	6a 0f                	push   0xf
c001ceb6:	6a 00                	push   0x0
c001ceb8:	e8 fc f0 ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001cebd:	5a                   	pop    edx
c001cebe:	0f b6 c0             	movzx  eax,al
c001cec1:	59                   	pop    ecx
c001cec2:	50                   	push   eax
c001cec3:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cec8:	99                   	cdq    
c001cec9:	f7 fb                	idiv   ebx
c001cecb:	99                   	cdq    
c001cecc:	f7 fb                	idiv   ebx
c001cece:	8d 42 30             	lea    eax,[edx+0x30]
c001ced1:	0f b6 c0             	movzx  eax,al
c001ced4:	50                   	push   eax
c001ced5:	e8 ce f0 ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001ceda:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cee0:	5f                   	pop    edi
c001cee1:	5d                   	pop    ebp
c001cee2:	6a 0f                	push   0xf
c001cee4:	6a 00                	push   0x0
c001cee6:	e8 ce f0 ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001ceeb:	5a                   	pop    edx
c001ceec:	0f b6 c0             	movzx  eax,al
c001ceef:	59                   	pop    ecx
c001cef0:	50                   	push   eax
c001cef1:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cef6:	99                   	cdq    
c001cef7:	f7 fb                	idiv   ebx
c001cef9:	83 c2 30             	add    edx,0x30
c001cefc:	0f b6 d2             	movzx  edx,dl
c001ceff:	52                   	push   edx
c001cf00:	e8 a3 f0 ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001cf05:	83 c4 10             	add    esp,0x10
c001cf08:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf0e:	eb 05                	jmp    c001cf15 <SATA::read(unsigned long long, int, void*)+0x245>
c001cf10:	be 01 00 00 00       	mov    esi,0x1
c001cf15:	83 c4 0c             	add    esp,0xc
c001cf18:	89 f0                	mov    eax,esi
c001cf1a:	5b                   	pop    ebx
c001cf1b:	5e                   	pop    esi
c001cf1c:	5f                   	pop    edi
c001cf1d:	5d                   	pop    ebp
c001cf1e:	c3                   	ret    
c001cf1f:	90                   	nop

c001cf20 <SATA::write(unsigned long long, int, void*)>:
c001cf20:	55                   	push   ebp
c001cf21:	b8 04 00 00 00       	mov    eax,0x4
c001cf26:	57                   	push   edi
c001cf27:	56                   	push   esi
c001cf28:	53                   	push   ebx
c001cf29:	83 ec 1c             	sub    esp,0x1c
c001cf2c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001cf30:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001cf34:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001cf38:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001cf3c:	8d 75 ff             	lea    esi,[ebp-0x1]
c001cf3f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001cf45:	0f 87 2d 02 00 00    	ja     c001d178 <SATA::write(unsigned long long, int, void*)+0x258>
c001cf4b:	85 ff                	test   edi,edi
c001cf4d:	b8 06 00 00 00       	mov    eax,0x6
c001cf52:	0f 84 20 02 00 00    	je     c001d178 <SATA::write(unsigned long long, int, void*)+0x258>
c001cf58:	89 ee                	mov    esi,ebp
c001cf5a:	c1 e6 09             	shl    esi,0x9
c001cf5d:	8d 04 37             	lea    eax,[edi+esi*1]
c001cf60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf64:	89 d3                	mov    ebx,edx
c001cf66:	89 ce                	mov    esi,ecx
c001cf68:	50                   	push   eax
c001cf69:	83 c3 01             	add    ebx,0x1
c001cf6c:	50                   	push   eax
c001cf6d:	6a 01                	push   0x1
c001cf6f:	83 d6 00             	adc    esi,0x0
c001cf72:	57                   	push   edi
c001cf73:	81 c7 00 02 00 00    	add    edi,0x200
c001cf79:	6a 01                	push   0x1
c001cf7b:	51                   	push   ecx
c001cf7c:	52                   	push   edx
c001cf7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cf81:	e8 f8 fa ff ff       	call   c001ca7e <SATA::access(unsigned long long, int, void*, bool)>
c001cf86:	83 c4 20             	add    esp,0x20
c001cf89:	89 da                	mov    edx,ebx
c001cf8b:	89 f1                	mov    ecx,esi
c001cf8d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001cf91:	75 d1                	jne    c001cf64 <SATA::write(unsigned long long, int, void*)+0x44>
c001cf93:	01 2d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebp
c001cf99:	50                   	push   eax
c001cf9a:	bd 10 27 00 00       	mov    ebp,0x2710
c001cf9f:	bb 0a 00 00 00       	mov    ebx,0xa
c001cfa4:	50                   	push   eax
c001cfa5:	6a 0f                	push   0xf
c001cfa7:	6a 00                	push   0x0
c001cfa9:	e8 0b f0 ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001cfae:	5a                   	pop    edx
c001cfaf:	0f b6 c0             	movzx  eax,al
c001cfb2:	59                   	pop    ecx
c001cfb3:	50                   	push   eax
c001cfb4:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cfb9:	99                   	cdq    
c001cfba:	f7 fd                	idiv   ebp
c001cfbc:	99                   	cdq    
c001cfbd:	f7 fb                	idiv   ebx
c001cfbf:	8d 42 30             	lea    eax,[edx+0x30]
c001cfc2:	0f b6 c0             	movzx  eax,al
c001cfc5:	50                   	push   eax
c001cfc6:	e8 dd ef ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001cfcb:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cfd1:	5e                   	pop    esi
c001cfd2:	5f                   	pop    edi
c001cfd3:	6a 0f                	push   0xf
c001cfd5:	bf e8 03 00 00       	mov    edi,0x3e8
c001cfda:	6a 00                	push   0x0
c001cfdc:	e8 d8 ef ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001cfe1:	5a                   	pop    edx
c001cfe2:	0f b6 c0             	movzx  eax,al
c001cfe5:	59                   	pop    ecx
c001cfe6:	50                   	push   eax
c001cfe7:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cfec:	99                   	cdq    
c001cfed:	f7 ff                	idiv   edi
c001cfef:	99                   	cdq    
c001cff0:	f7 fb                	idiv   ebx
c001cff2:	8d 42 30             	lea    eax,[edx+0x30]
c001cff5:	0f b6 c0             	movzx  eax,al
c001cff8:	50                   	push   eax
c001cff9:	e8 aa ef ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001cffe:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d004:	5e                   	pop    esi
c001d005:	be 64 00 00 00       	mov    esi,0x64
c001d00a:	58                   	pop    eax
c001d00b:	6a 0f                	push   0xf
c001d00d:	6a 00                	push   0x0
c001d00f:	e8 a5 ef ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001d014:	5a                   	pop    edx
c001d015:	0f b6 c0             	movzx  eax,al
c001d018:	59                   	pop    ecx
c001d019:	50                   	push   eax
c001d01a:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d01f:	99                   	cdq    
c001d020:	f7 fe                	idiv   esi
c001d022:	99                   	cdq    
c001d023:	f7 fb                	idiv   ebx
c001d025:	8d 42 30             	lea    eax,[edx+0x30]
c001d028:	0f b6 c0             	movzx  eax,al
c001d02b:	50                   	push   eax
c001d02c:	e8 77 ef ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001d031:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d037:	58                   	pop    eax
c001d038:	5a                   	pop    edx
c001d039:	6a 0f                	push   0xf
c001d03b:	6a 00                	push   0x0
c001d03d:	e8 77 ef ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001d042:	59                   	pop    ecx
c001d043:	0f b6 c0             	movzx  eax,al
c001d046:	5a                   	pop    edx
c001d047:	50                   	push   eax
c001d048:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d04d:	99                   	cdq    
c001d04e:	f7 fb                	idiv   ebx
c001d050:	99                   	cdq    
c001d051:	f7 fb                	idiv   ebx
c001d053:	8d 42 30             	lea    eax,[edx+0x30]
c001d056:	0f b6 c0             	movzx  eax,al
c001d059:	50                   	push   eax
c001d05a:	e8 49 ef ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001d05f:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d065:	59                   	pop    ecx
c001d066:	58                   	pop    eax
c001d067:	6a 0f                	push   0xf
c001d069:	6a 00                	push   0x0
c001d06b:	e8 49 ef ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001d070:	5a                   	pop    edx
c001d071:	0f b6 c0             	movzx  eax,al
c001d074:	59                   	pop    ecx
c001d075:	50                   	push   eax
c001d076:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d07b:	99                   	cdq    
c001d07c:	f7 fb                	idiv   ebx
c001d07e:	83 c2 30             	add    edx,0x30
c001d081:	0f b6 d2             	movzx  edx,dl
c001d084:	52                   	push   edx
c001d085:	e8 1e ef ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001d08a:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d090:	58                   	pop    eax
c001d091:	5a                   	pop    edx
c001d092:	6a 0f                	push   0xf
c001d094:	6a 00                	push   0x0
c001d096:	e8 1e ef ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001d09b:	59                   	pop    ecx
c001d09c:	0f b6 c0             	movzx  eax,al
c001d09f:	5a                   	pop    edx
c001d0a0:	50                   	push   eax
c001d0a1:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d0a6:	99                   	cdq    
c001d0a7:	f7 fd                	idiv   ebp
c001d0a9:	99                   	cdq    
c001d0aa:	f7 fb                	idiv   ebx
c001d0ac:	8d 42 30             	lea    eax,[edx+0x30]
c001d0af:	0f b6 c0             	movzx  eax,al
c001d0b2:	50                   	push   eax
c001d0b3:	e8 f0 ee ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001d0b8:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d0be:	59                   	pop    ecx
c001d0bf:	5d                   	pop    ebp
c001d0c0:	6a 0f                	push   0xf
c001d0c2:	6a 00                	push   0x0
c001d0c4:	e8 f0 ee ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001d0c9:	5a                   	pop    edx
c001d0ca:	0f b6 c0             	movzx  eax,al
c001d0cd:	59                   	pop    ecx
c001d0ce:	50                   	push   eax
c001d0cf:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d0d4:	99                   	cdq    
c001d0d5:	f7 ff                	idiv   edi
c001d0d7:	99                   	cdq    
c001d0d8:	f7 fb                	idiv   ebx
c001d0da:	8d 42 30             	lea    eax,[edx+0x30]
c001d0dd:	0f b6 c0             	movzx  eax,al
c001d0e0:	50                   	push   eax
c001d0e1:	e8 c2 ee ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001d0e6:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d0ec:	5f                   	pop    edi
c001d0ed:	5d                   	pop    ebp
c001d0ee:	6a 0f                	push   0xf
c001d0f0:	6a 00                	push   0x0
c001d0f2:	e8 c2 ee ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001d0f7:	5a                   	pop    edx
c001d0f8:	0f b6 c0             	movzx  eax,al
c001d0fb:	59                   	pop    ecx
c001d0fc:	50                   	push   eax
c001d0fd:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d102:	99                   	cdq    
c001d103:	f7 fe                	idiv   esi
c001d105:	99                   	cdq    
c001d106:	f7 fb                	idiv   ebx
c001d108:	8d 42 30             	lea    eax,[edx+0x30]
c001d10b:	0f b6 c0             	movzx  eax,al
c001d10e:	50                   	push   eax
c001d10f:	e8 94 ee ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001d114:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d11a:	5e                   	pop    esi
c001d11b:	5f                   	pop    edi
c001d11c:	6a 0f                	push   0xf
c001d11e:	6a 00                	push   0x0
c001d120:	e8 94 ee ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001d125:	5d                   	pop    ebp
c001d126:	0f b6 c0             	movzx  eax,al
c001d129:	5a                   	pop    edx
c001d12a:	50                   	push   eax
c001d12b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d130:	99                   	cdq    
c001d131:	f7 fb                	idiv   ebx
c001d133:	99                   	cdq    
c001d134:	f7 fb                	idiv   ebx
c001d136:	8d 42 30             	lea    eax,[edx+0x30]
c001d139:	0f b6 c0             	movzx  eax,al
c001d13c:	50                   	push   eax
c001d13d:	e8 66 ee ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001d142:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d148:	59                   	pop    ecx
c001d149:	5e                   	pop    esi
c001d14a:	6a 0f                	push   0xf
c001d14c:	6a 00                	push   0x0
c001d14e:	e8 66 ee ff ff       	call   c001bfb9 <combineColours(unsigned char, unsigned char)>
c001d153:	5f                   	pop    edi
c001d154:	0f b6 c0             	movzx  eax,al
c001d157:	5d                   	pop    ebp
c001d158:	50                   	push   eax
c001d159:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d15e:	99                   	cdq    
c001d15f:	f7 fb                	idiv   ebx
c001d161:	83 c2 30             	add    edx,0x30
c001d164:	0f b6 d2             	movzx  edx,dl
c001d167:	52                   	push   edx
c001d168:	e8 3b ee ff ff       	call   c001bfa8 <combineCharAndColour(char, unsigned char)>
c001d16d:	83 c4 10             	add    esp,0x10
c001d170:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d176:	31 c0                	xor    eax,eax
c001d178:	83 c4 1c             	add    esp,0x1c
c001d17b:	5b                   	pop    ebx
c001d17c:	5e                   	pop    esi
c001d17d:	5f                   	pop    edi
c001d17e:	5d                   	pop    ebp
c001d17f:	c3                   	ret    

c001d180 <SATAPI::write(unsigned long long, int, void*)>:
c001d180:	b8 03 00 00 00       	mov    eax,0x3
c001d185:	c3                   	ret    

c001d186 <SATAPI::close(int, int, void*)>:
c001d186:	83 ec 0c             	sub    esp,0xc
c001d189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d18d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d193:	85 c0                	test   eax,eax
c001d195:	74 0c                	je     c001d1a3 <SATAPI::close(int, int, void*)+0x1d>
c001d197:	8b 10                	mov    edx,DWORD PTR [eax]
c001d199:	83 ec 0c             	sub    esp,0xc
c001d19c:	50                   	push   eax
c001d19d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d1a0:	83 c4 10             	add    esp,0x10
c001d1a3:	31 c0                	xor    eax,eax
c001d1a5:	83 c4 0c             	add    esp,0xc
c001d1a8:	c3                   	ret    
c001d1a9:	90                   	nop

c001d1aa <SATAPI::SATAPI()>:
c001d1aa:	83 ec 0c             	sub    esp,0xc
c001d1ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b1:	83 ec 04             	sub    esp,0x4
c001d1b4:	68 00 08 00 00       	push   0x800
c001d1b9:	68 d8 1b 02 c0       	push   0xc0021bd8
c001d1be:	50                   	push   eax
c001d1bf:	e8 0e ef fe ff       	call   c000c0d2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d1c4:	83 c4 10             	add    esp,0x10
c001d1c7:	ba cc 1c 02 c0       	mov    edx,0xc0021ccc
c001d1cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1d0:	89 10                	mov    DWORD PTR [eax],edx
c001d1d2:	90                   	nop
c001d1d3:	83 c4 0c             	add    esp,0xc
c001d1d6:	c3                   	ret    
c001d1d7:	90                   	nop

c001d1d8 <SATAPI::diskRemoved()>:
c001d1d8:	c3                   	ret    
c001d1d9:	90                   	nop

c001d1da <SATAPI::diskInserted()>:
c001d1da:	83 ec 18             	sub    esp,0x18
c001d1dd:	68 e4 1b 02 c0       	push   0xc0021be4
c001d1e2:	e8 ba d6 fe ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c001d1e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1eb:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d1f2:	83 c4 1c             	add    esp,0x1c
c001d1f5:	c3                   	ret    

c001d1f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d1f6:	55                   	push   ebp
c001d1f7:	57                   	push   edi
c001d1f8:	56                   	push   esi
c001d1f9:	53                   	push   ebx
c001d1fa:	83 ec 34             	sub    esp,0x34
c001d1fd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d201:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d205:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d209:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d20d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d211:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d217:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d21d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d221:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d227:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d22b:	83 c0 02             	add    eax,0x2
c001d22e:	c1 e0 07             	shl    eax,0x7
c001d231:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d235:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d239:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d23d:	c1 e0 07             	shl    eax,0x7
c001d240:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d244:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d248:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d252:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d256:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d25c:	e8 03 e5 ff ff       	call   c001b764 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d261:	83 c4 10             	add    esp,0x10
c001d264:	89 c2                	mov    edx,eax
c001d266:	b8 01 00 00 00       	mov    eax,0x1
c001d26b:	83 fa ff             	cmp    edx,0xffffffff
c001d26e:	0f 84 5d 02 00 00    	je     c001d4d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d274:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d27a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d27e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d282:	8b 00                	mov    eax,DWORD PTR [eax]
c001d284:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d28a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d290:	89 d1                	mov    ecx,edx
c001d292:	c1 e1 05             	shl    ecx,0x5
c001d295:	01 c8                	add    eax,ecx
c001d297:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d299:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d29f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d2a5:	89 08                	mov    DWORD PTR [eax],ecx
c001d2a7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d2ad:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d2b3:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d2b9:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d2bc:	50                   	push   eax
c001d2bd:	68 90 00 00 00       	push   0x90
c001d2c2:	6a 00                	push   0x0
c001d2c4:	53                   	push   ebx
c001d2c5:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d2c8:	e8 23 32 fe ff       	call   c00004f0 <memset>
c001d2cd:	b9 0c 00 00 00       	mov    ecx,0xc
c001d2d2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d2d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d2d8:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d2de:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d2e2:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d2e6:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d2ec:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d2f0:	48                   	dec    eax
c001d2f1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d2f6:	89 c1                	mov    ecx,eax
c001d2f8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d2fe:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d303:	09 c8                	or     eax,ecx
c001d305:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d30b:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d311:	83 c8 80             	or     eax,0xffffff80
c001d314:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d31a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d31d:	25 00 7f 00 00       	and    eax,0x7f00
c001d322:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d327:	66 89 03             	mov    WORD PTR [ebx],ax
c001d32a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d32e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001d332:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d336:	c1 e8 10             	shr    eax,0x10
c001d339:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d33c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d340:	c1 e8 18             	shr    eax,0x18
c001d343:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001d346:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d34a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d34d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d351:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d354:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d358:	83 c4 10             	add    esp,0x10
c001d35b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d35f:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d363:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d367:	31 c0                	xor    eax,eax
c001d369:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001d36f:	80 e1 88             	and    cl,0x88
c001d372:	74 0a                	je     c001d37e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001d374:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d379:	74 0a                	je     c001d385 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001d37b:	40                   	inc    eax
c001d37c:	eb eb                	jmp    c001d369 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001d37e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d383:	75 43                	jne    c001d3c8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001d385:	83 ec 0c             	sub    esp,0xc
c001d388:	68 fc 1b 02 c0       	push   0xc0021bfc
c001d38d:	e8 0f d5 fe ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c001d392:	58                   	pop    eax
c001d393:	5a                   	pop    edx
c001d394:	68 11 1c 02 c0       	push   0xc0021c11
c001d399:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d39f:	e8 54 b6 fe ff       	call   c00089f8 <VgaText::puts(char const*)>
c001d3a4:	59                   	pop    ecx
c001d3a5:	5b                   	pop    ebx
c001d3a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d3aa:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d3b0:	e8 49 e4 ff ff       	call   c001b7fe <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d3b5:	5e                   	pop    esi
c001d3b6:	5f                   	pop    edi
c001d3b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d3bb:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d3c1:	e8 18 e4 ff ff       	call   c001b7de <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d3c6:	eb 46                	jmp    c001d40e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x218>
c001d3c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d3cc:	be 01 00 00 00       	mov    esi,0x1
c001d3d1:	88 d1                	mov    cl,dl
c001d3d3:	d3 e6                	shl    esi,cl
c001d3d5:	89 b3 38 01 00 00    	mov    DWORD PTR [ebx+0x138],esi
c001d3db:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001d3e0:	c1 e7 07             	shl    edi,0x7
c001d3e3:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001d3e7:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001d3ed:	85 c6                	test   esi,eax
c001d3ef:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001d3f5:	0f 84 a3 00 00 00    	je     c001d49e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a8>
c001d3fb:	0f ba e0 1e          	bt     eax,0x1e
c001d3ff:	73 1a                	jae    c001d41b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001d401:	83 ec 0c             	sub    esp,0xc
c001d404:	68 23 1c 02 c0       	push   0xc0021c23
c001d409:	e8 93 d4 fe ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c001d40e:	83 c4 10             	add    esp,0x10
c001d411:	b8 01 00 00 00       	mov    eax,0x1
c001d416:	e9 b6 00 00 00       	jmp    c001d4d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001d41b:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001d421:	83 f8 0d             	cmp    eax,0xd
c001d424:	77 0a                	ja     c001d430 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23a>
c001d426:	83 ec 0c             	sub    esp,0xc
c001d429:	68 c8 00 00 00       	push   0xc8
c001d42e:	eb 28                	jmp    c001d458 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x262>
c001d430:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001d436:	83 f8 0d             	cmp    eax,0xd
c001d439:	77 0a                	ja     c001d445 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001d43b:	83 ec 0c             	sub    esp,0xc
c001d43e:	68 58 02 00 00       	push   0x258
c001d443:	eb 13                	jmp    c001d458 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x262>
c001d445:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001d44b:	83 f8 06             	cmp    eax,0x6
c001d44e:	77 10                	ja     c001d460 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26a>
c001d450:	83 ec 0c             	sub    esp,0xc
c001d453:	68 dc 05 00 00       	push   0x5dc
c001d458:	e8 8f 7e ff ff       	call   c00152ec <milliTenthSleep(unsigned int)>
c001d45d:	83 c4 10             	add    esp,0x10
c001d460:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d464:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d467:	75 06                	jne    c001d46f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x279>
c001d469:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d46d:	74 15                	je     c001d484 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28e>
c001d46f:	83 fb 06             	cmp    ebx,0x6
c001d472:	77 10                	ja     c001d484 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28e>
c001d474:	83 ec 0c             	sub    esp,0xc
c001d477:	68 c4 09 00 00       	push   0x9c4
c001d47c:	e8 6b 7e ff ff       	call   c00152ec <milliTenthSleep(unsigned int)>
c001d481:	83 c4 10             	add    esp,0x10
c001d484:	43                   	inc    ebx
c001d485:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001d48b:	0f 85 56 ff ff ff    	jne    c001d3e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f1>
c001d491:	83 ec 0c             	sub    esp,0xc
c001d494:	68 36 1c 02 c0       	push   0xc0021c36
c001d499:	e9 6b ff ff ff       	jmp    c001d409 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x213>
c001d49e:	0f ba e0 1e          	bt     eax,0x1e
c001d4a2:	73 0d                	jae    c001d4b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bb>
c001d4a4:	83 ec 0c             	sub    esp,0xc
c001d4a7:	68 4a 1c 02 c0       	push   0xc0021c4a
c001d4ac:	e9 58 ff ff ff       	jmp    c001d409 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x213>
c001d4b1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d4b6:	74 17                	je     c001d4cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c001d4b8:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d4bd:	74 10                	je     c001d4cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c001d4bf:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d4c5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d4c9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d4cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d4cf:	31 c0                	xor    eax,eax
c001d4d1:	83 c4 2c             	add    esp,0x2c
c001d4d4:	5b                   	pop    ebx
c001d4d5:	5e                   	pop    esi
c001d4d6:	5f                   	pop    edi
c001d4d7:	5d                   	pop    ebp
c001d4d8:	c3                   	ret    
c001d4d9:	90                   	nop

c001d4da <SATAPI::eject()>:
c001d4da:	57                   	push   edi
c001d4db:	b9 03 00 00 00       	mov    ecx,0x3
c001d4e0:	83 ec 18             	sub    esp,0x18
c001d4e3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d4e7:	fc                   	cld    
c001d4e8:	31 c0                	xor    eax,eax
c001d4ea:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d4ec:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d4f1:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d4f6:	50                   	push   eax
c001d4f7:	6a 00                	push   0x0
c001d4f9:	6a 00                	push   0x0
c001d4fb:	6a 00                	push   0x0
c001d4fd:	6a 00                	push   0x0
c001d4ff:	6a 02                	push   0x2
c001d501:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d505:	50                   	push   eax
c001d506:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d50a:	e8 e7 fc ff ff       	call   c001d1f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d50f:	83 c4 38             	add    esp,0x38
c001d512:	31 c0                	xor    eax,eax
c001d514:	5f                   	pop    edi
c001d515:	c3                   	ret    

c001d516 <SATAPI::detectMedia()>:
c001d516:	53                   	push   ebx
c001d517:	83 ec 14             	sub    esp,0x14
c001d51a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d51e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d524:	e8 2f 05 ff ff       	call   c000da58 <VCache::writeWriteBuffer()>
c001d529:	59                   	pop    ecx
c001d52a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d530:	e8 13 05 ff ff       	call   c000da48 <VCache::invalidateReadBuffer()>
c001d535:	c7 04 24 5f 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c5f
c001d53c:	e8 60 d3 fe ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c001d541:	83 c4 10             	add    esp,0x10
c001d544:	31 c0                	xor    eax,eax
c001d546:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d54d:	85 d2                	test   edx,edx
c001d54f:	74 0f                	je     c001d560 <SATAPI::detectMedia()+0x4a>
c001d551:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d557:	75 07                	jne    c001d560 <SATAPI::detectMedia()+0x4a>
c001d559:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d560:	40                   	inc    eax
c001d561:	83 f8 1a             	cmp    eax,0x1a
c001d564:	75 e0                	jne    c001d546 <SATAPI::detectMedia()+0x30>
c001d566:	83 c4 08             	add    esp,0x8
c001d569:	5b                   	pop    ebx
c001d56a:	c3                   	ret    
c001d56b:	90                   	nop

c001d56c <SATAPI::open(int, int, void*)>:
c001d56c:	56                   	push   esi
c001d56d:	53                   	push   ebx
c001d56e:	51                   	push   ecx
c001d56f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d573:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d577:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d581:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d587:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d58b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d595:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d59f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d5a6:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d5ac:	e8 89 a7 fe ff       	call   c0007d3a <Phys::allocatePage()>
c001d5b1:	89 c6                	mov    esi,eax
c001d5b3:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d5b9:	e8 7c a7 fe ff       	call   c0007d3a <Phys::allocatePage()>
c001d5be:	81 c6 00 10 00 00    	add    esi,0x1000
c001d5c4:	39 c6                	cmp    esi,eax
c001d5c6:	74 10                	je     c001d5d8 <SATAPI::open(int, int, void*)+0x6c>
c001d5c8:	83 ec 0c             	sub    esp,0xc
c001d5cb:	68 74 1c 02 c0       	push   0xc0021c74
c001d5d0:	e8 32 32 ff ff       	call   c0010807 <KePanic(char const*)>
c001d5d5:	83 c4 10             	add    esp,0x10
c001d5d8:	83 ec 0c             	sub    esp,0xc
c001d5db:	6a 02                	push   0x2
c001d5dd:	e8 8b bf fe ff       	call   c000956d <Virt::allocateKernelVirtualPages(int)>
c001d5e2:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d5e8:	6a 03                	push   0x3
c001d5ea:	50                   	push   eax
c001d5eb:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d5f1:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d5f7:	e8 58 c6 fe ff       	call   c0009c54 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d5fc:	83 c4 14             	add    esp,0x14
c001d5ff:	68 78 01 00 00       	push   0x178
c001d604:	e8 26 a4 fe ff       	call   c0007a2f <malloc>
c001d609:	83 c4 0c             	add    esp,0xc
c001d60c:	6a 00                	push   0x0
c001d60e:	89 c6                	mov    esi,eax
c001d610:	68 ff ff ff 7f       	push   0x7fffffff
c001d615:	6a 00                	push   0x0
c001d617:	6a 00                	push   0x0
c001d619:	53                   	push   ebx
c001d61a:	68 8a 1c 02 c0       	push   0xc0021c8a
c001d61f:	50                   	push   eax
c001d620:	e8 8d f8 fe ff       	call   c000ceb2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d625:	83 c4 14             	add    esp,0x14
c001d628:	56                   	push   esi
c001d629:	e8 44 f9 fe ff       	call   c000cf72 <LogicalDisk::assignDriveLetter()>
c001d62e:	5a                   	pop    edx
c001d62f:	59                   	pop    ecx
c001d630:	0f be c0             	movsx  eax,al
c001d633:	50                   	push   eax
c001d634:	68 dc 1a 02 c0       	push   0xc0021adc
c001d639:	e8 63 d2 fe ff       	call   c000a8a1 <Dbg::kprintf(char const*, ...)>
c001d63e:	58                   	pop    eax
c001d63f:	5a                   	pop    edx
c001d640:	56                   	push   esi
c001d641:	53                   	push   ebx
c001d642:	e8 bf e6 fe ff       	call   c000bd06 <Device::addChild(Device*)>
c001d647:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d64d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d650:	e8 e5 ea fe ff       	call   c000c13a <PhysicalDisk::startCache()>
c001d655:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d65c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d65f:	e8 b2 fe ff ff       	call   c001d516 <SATAPI::detectMedia()>
c001d664:	83 c4 14             	add    esp,0x14
c001d667:	31 c0                	xor    eax,eax
c001d669:	5b                   	pop    ebx
c001d66a:	5e                   	pop    esi
c001d66b:	c3                   	ret    

c001d66c <SATAPI::read(unsigned long long, int, void*)>:
c001d66c:	55                   	push   ebp
c001d66d:	57                   	push   edi
c001d66e:	56                   	push   esi
c001d66f:	53                   	push   ebx
c001d670:	83 ec 3c             	sub    esp,0x3c
c001d673:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001d677:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d67b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d67f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001d683:	83 fd 04             	cmp    ebp,0x4
c001d686:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d68a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d68e:	7e 10                	jle    c001d6a0 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001d690:	83 ec 0c             	sub    esp,0xc
c001d693:	68 98 1c 02 c0       	push   0xc0021c98
c001d698:	e8 6a 31 ff ff       	call   c0010807 <KePanic(char const*)>
c001d69d:	83 c4 10             	add    esp,0x10
c001d6a0:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d6a6:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d6ac:	51                   	push   ecx
c001d6ad:	50                   	push   eax
c001d6ae:	83 c0 02             	add    eax,0x2
c001d6b1:	c1 e0 07             	shl    eax,0x7
c001d6b4:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d6ba:	50                   	push   eax
c001d6bb:	52                   	push   edx
c001d6bc:	e8 67 e1 ff ff       	call   c001b828 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d6c1:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d6c5:	b9 03 00 00 00       	mov    ecx,0x3
c001d6ca:	fc                   	cld    
c001d6cb:	31 c0                	xor    eax,eax
c001d6cd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d6cf:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d6d4:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d6d9:	83 c4 0c             	add    esp,0xc
c001d6dc:	6a 00                	push   0x0
c001d6de:	6a 00                	push   0x0
c001d6e0:	6a 00                	push   0x0
c001d6e2:	6a 00                	push   0x0
c001d6e4:	6a 02                	push   0x2
c001d6e6:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d6ea:	50                   	push   eax
c001d6eb:	53                   	push   ebx
c001d6ec:	e8 05 fb ff ff       	call   c001d1f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d6f1:	83 c4 20             	add    esp,0x20
c001d6f4:	85 c0                	test   eax,eax
c001d6f6:	89 c6                	mov    esi,eax
c001d6f8:	75 46                	jne    c001d740 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001d6fa:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d6fe:	b9 03 00 00 00       	mov    ecx,0x3
c001d703:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d705:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d709:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d70e:	0f c8                	bswap  eax
c001d710:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d714:	89 e8                	mov    eax,ebp
c001d716:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d71a:	50                   	push   eax
c001d71b:	55                   	push   ebp
c001d71c:	c1 e5 0b             	shl    ebp,0xb
c001d71f:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001d723:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d727:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d72b:	55                   	push   ebp
c001d72c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d730:	50                   	push   eax
c001d731:	53                   	push   ebx
c001d732:	e8 bf fa ff ff       	call   c001d1f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d737:	83 c4 20             	add    esp,0x20
c001d73a:	85 c0                	test   eax,eax
c001d73c:	89 c6                	mov    esi,eax
c001d73e:	74 0c                	je     c001d74c <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001d740:	83 ec 0c             	sub    esp,0xc
c001d743:	53                   	push   ebx
c001d744:	e8 cd fd ff ff       	call   c001d516 <SATAPI::detectMedia()>
c001d749:	83 c4 10             	add    esp,0x10
c001d74c:	83 c4 3c             	add    esp,0x3c
c001d74f:	89 f0                	mov    eax,esi
c001d751:	5b                   	pop    ebx
c001d752:	5e                   	pop    esi
c001d753:	5f                   	pop    edi
c001d754:	5d                   	pop    ebp
c001d755:	c3                   	ret    

c001d756 <IOAPIC::close(int, int, void*)>:
c001d756:	b8 00 00 00 00       	mov    eax,0x0
c001d75b:	c3                   	ret    

c001d75c <apicGetBase()>:
c001d75c:	55                   	push   ebp
c001d75d:	89 e5                	mov    ebp,esp
c001d75f:	83 ec 18             	sub    esp,0x18
c001d762:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d767:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d76d:	83 e0 08             	and    eax,0x8
c001d770:	0f b6 c0             	movzx  eax,al
c001d773:	85 c0                	test   eax,eax
c001d775:	75 07                	jne    c001d77e <apicGetBase()+0x22>
c001d777:	b8 00 00 00 00       	mov    eax,0x0
c001d77c:	eb 21                	jmp    c001d79f <apicGetBase()+0x43>
c001d77e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d783:	83 ec 08             	sub    esp,0x8
c001d786:	6a 1b                	push   0x1b
c001d788:	50                   	push   eax
c001d789:	e8 b0 98 fe ff       	call   c000703e <Computer::rdmsr(unsigned int)>
c001d78e:	83 c4 10             	add    esp,0x10
c001d791:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d794:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d797:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d79a:	25 00 00 ff ff       	and    eax,0xffff0000
c001d79f:	c9                   	leave  
c001d7a0:	c3                   	ret    
c001d7a1:	90                   	nop

c001d7a2 <IOAPIC::IOAPIC()>:
c001d7a2:	83 ec 0c             	sub    esp,0xc
c001d7a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7a9:	83 ec 08             	sub    esp,0x8
c001d7ac:	68 fc 1c 02 c0       	push   0xc0021cfc
c001d7b1:	50                   	push   eax
c001d7b2:	e8 e7 e6 fe ff       	call   c000be9e <Device::Device(char const*)>
c001d7b7:	83 c4 10             	add    esp,0x10
c001d7ba:	ba 0c 1d 02 c0       	mov    edx,0xc0021d0c
c001d7bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7c3:	89 10                	mov    DWORD PTR [eax],edx
c001d7c5:	90                   	nop
c001d7c6:	83 c4 0c             	add    esp,0xc
c001d7c9:	c3                   	ret    

c001d7ca <apicOpen()>:
c001d7ca:	55                   	push   ebp
c001d7cb:	89 e5                	mov    ebp,esp
c001d7cd:	53                   	push   ebx
c001d7ce:	83 ec 34             	sub    esp,0x34
c001d7d1:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001d7d6:	83 f0 01             	xor    eax,0x1
c001d7d9:	0f b6 c0             	movzx  eax,al
c001d7dc:	85 c0                	test   eax,eax
c001d7de:	0f 84 a3 00 00 00    	je     c001d887 <apicOpen()+0xbd>
c001d7e4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d7e8:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001d7ed:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d7f1:	0f b6 c0             	movzx  eax,al
c001d7f4:	39 c2                	cmp    edx,eax
c001d7f6:	0f 83 84 00 00 00    	jae    c001d880 <apicOpen()+0xb6>
c001d7fc:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d803:	83 ec 0c             	sub    esp,0xc
c001d806:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d809:	e8 21 a2 fe ff       	call   c0007a2f <malloc>
c001d80e:	83 c4 10             	add    esp,0x10
c001d811:	89 c3                	mov    ebx,eax
c001d813:	83 ec 0c             	sub    esp,0xc
c001d816:	53                   	push   ebx
c001d817:	e8 86 ff ff ff       	call   c001d7a2 <IOAPIC::IOAPIC()>
c001d81c:	83 c4 10             	add    esp,0x10
c001d81f:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d822:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d826:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d829:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d830:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d835:	83 c0 01             	add    eax,0x1
c001d838:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d83d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d842:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d848:	83 ec 08             	sub    esp,0x8
c001d84b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d84e:	50                   	push   eax
c001d84f:	e8 b2 e4 fe ff       	call   c000bd06 <Device::addChild(Device*)>
c001d854:	83 c4 10             	add    esp,0x10
c001d857:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d85a:	8b 00                	mov    eax,DWORD PTR [eax]
c001d85c:	83 c0 08             	add    eax,0x8
c001d85f:	8b 10                	mov    edx,DWORD PTR [eax]
c001d861:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d865:	6a 00                	push   0x0
c001d867:	6a 00                	push   0x0
c001d869:	50                   	push   eax
c001d86a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d86d:	ff d2                	call   edx
c001d86f:	83 c4 10             	add    esp,0x10
c001d872:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d875:	83 c0 01             	add    eax,0x1
c001d878:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001d87b:	e9 68 ff ff ff       	jmp    c001d7e8 <apicOpen()+0x1e>
c001d880:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d887:	e8 d0 fe ff ff       	call   c001d75c <apicGetBase()>
c001d88c:	05 f0 00 00 00       	add    eax,0xf0
c001d891:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d894:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d897:	8b 00                	mov    eax,DWORD PTR [eax]
c001d899:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d89c:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d8a3:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d8aa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d8ad:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d8b0:	89 10                	mov    DWORD PTR [eax],edx
c001d8b2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d8b9:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d8be:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d8c1:	7d 7e                	jge    c001d941 <apicOpen()+0x177>
c001d8c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d8c6:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d8cd:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d8d0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d8d3:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d8da:	c1 e8 08             	shr    eax,0x8
c001d8dd:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d8e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d8e4:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d8eb:	c1 e8 18             	shr    eax,0x18
c001d8ee:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d8f1:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001d8f5:	3d ff 00 00 00       	cmp    eax,0xff
c001d8fa:	75 3c                	jne    c001d938 <apicOpen()+0x16e>
c001d8fc:	e8 5b fe ff ff       	call   c001d75c <apicGetBase()>
c001d901:	89 c2                	mov    edx,eax
c001d903:	0f b6 45 df          	movzx  eax,BYTE PTR [ebp-0x21]
c001d907:	83 f8 01             	cmp    eax,0x1
c001d90a:	75 07                	jne    c001d913 <apicOpen()+0x149>
c001d90c:	b8 60 03 00 00       	mov    eax,0x360
c001d911:	eb 05                	jmp    c001d918 <apicOpen()+0x14e>
c001d913:	b8 50 03 00 00       	mov    eax,0x350
c001d918:	01 d0                	add    eax,edx
c001d91a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d91d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d920:	8b 00                	mov    eax,DWORD PTR [eax]
c001d922:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d925:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d92c:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d930:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d933:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d936:	89 10                	mov    DWORD PTR [eax],edx
c001d938:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001d93c:	e9 78 ff ff ff       	jmp    c001d8b9 <apicOpen()+0xef>
c001d941:	90                   	nop
c001d942:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d945:	c9                   	leave  
c001d946:	c3                   	ret    
c001d947:	90                   	nop

c001d948 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d948:	55                   	push   ebp
c001d949:	89 e5                	mov    ebp,esp
c001d94b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d94e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d954:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d957:	72 1d                	jb     c001d976 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d959:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d95c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d965:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d96b:	01 d0                	add    eax,edx
c001d96d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d970:	73 04                	jae    c001d976 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d972:	b0 01                	mov    al,0x1
c001d974:	eb 02                	jmp    c001d978 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d976:	b0 00                	mov    al,0x0
c001d978:	5d                   	pop    ebp
c001d979:	c3                   	ret    

c001d97a <IOAPIC::read(int)>:
c001d97a:	55                   	push   ebp
c001d97b:	89 e5                	mov    ebp,esp
c001d97d:	83 ec 10             	sub    esp,0x10
c001d980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d983:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d989:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d98c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d98f:	0f b6 c0             	movzx  eax,al
c001d992:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
c001d995:	89 02                	mov    DWORD PTR [edx],eax
c001d997:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d99a:	83 c0 10             	add    eax,0x10
c001d99d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d99f:	c9                   	leave  
c001d9a0:	c3                   	ret    
c001d9a1:	90                   	nop

c001d9a2 <IOAPIC::open(int, int, void*)>:
c001d9a2:	55                   	push   ebp
c001d9a3:	89 e5                	mov    ebp,esp
c001d9a5:	57                   	push   edi
c001d9a6:	56                   	push   esi
c001d9a7:	53                   	push   ebx
c001d9a8:	83 ec 04             	sub    esp,0x4
c001d9ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d9b1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d9b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d9c0:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001d9c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9ca:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d9d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9d3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d9d9:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001d9e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9e3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d9e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9ec:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d9f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9f5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d9fb:	0f b6 f0             	movzx  esi,al
c001d9fe:	89 d0                	mov    eax,edx
c001da00:	ba 00 00 00 00       	mov    edx,0x0
c001da05:	89 c7                	mov    edi,eax
c001da07:	83 e7 ff             	and    edi,0xffffffff
c001da0a:	89 f9                	mov    ecx,edi
c001da0c:	0f b6 da             	movzx  ebx,dl
c001da0f:	89 c8                	mov    eax,ecx
c001da11:	89 da                	mov    edx,ebx
c001da13:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001da16:	8d 5e 08             	lea    ebx,[esi+0x8]
c001da19:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001da1d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001da21:	83 e0 00             	and    eax,0x0
c001da24:	09 d0                	or     eax,edx
c001da26:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001da2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da2d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001da33:	8d 50 01             	lea    edx,[eax+0x1]
c001da36:	88 d1                	mov    cl,dl
c001da38:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001da3b:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001da41:	0f b6 d0             	movzx  edx,al
c001da44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da47:	83 c2 08             	add    edx,0x8
c001da4a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001da4e:	0f b6 c9             	movzx  ecx,cl
c001da51:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001da57:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001da5b:	6a 01                	push   0x1
c001da5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da60:	e8 15 ff ff ff       	call   c001d97a <IOAPIC::read(int)>
c001da65:	83 c4 08             	add    esp,0x8
c001da68:	c1 f8 10             	sar    eax,0x10
c001da6b:	0f b6 c0             	movzx  eax,al
c001da6e:	8d 50 01             	lea    edx,[eax+0x1]
c001da71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da74:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001da7a:	b8 00 00 00 00       	mov    eax,0x0
c001da7f:	8d 65 f4             	lea    esp,[ebp-0xc]
c001da82:	5b                   	pop    ebx
c001da83:	5e                   	pop    esi
c001da84:	5f                   	pop    edi
c001da85:	5d                   	pop    ebp
c001da86:	c3                   	ret    
c001da87:	90                   	nop

c001da88 <IOAPIC::write(int, int)>:
c001da88:	55                   	push   ebp
c001da89:	89 e5                	mov    ebp,esp
c001da8b:	83 ec 10             	sub    esp,0x10
c001da8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da91:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001da97:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001da9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da9d:	0f b6 c0             	movzx  eax,al
c001daa0:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
c001daa3:	89 02                	mov    DWORD PTR [edx],eax
c001daa5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001daa8:	83 c0 10             	add    eax,0x10
c001daab:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001daae:	89 10                	mov    DWORD PTR [eax],edx
c001dab0:	90                   	nop
c001dab1:	c9                   	leave  
c001dab2:	c3                   	ret    
c001dab3:	90                   	nop

c001dab4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001dab4:	55                   	push   ebp
c001dab5:	89 e5                	mov    ebp,esp
c001dab7:	53                   	push   ebx
c001dab8:	83 ec 2c             	sub    esp,0x2c
c001dabb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dabe:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001dac1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001dac4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001dac7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001daca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001dacd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001dad0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001dad3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001dad6:	88 d8                	mov    al,bl
c001dad8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001dadb:	88 c8                	mov    al,cl
c001dadd:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001dae0:	88 d0                	mov    al,dl
c001dae2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001dae5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001dae9:	83 c0 08             	add    eax,0x8
c001daec:	d1 e0                	shl    eax,1
c001daee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001daf1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001daf5:	83 c0 08             	add    eax,0x8
c001daf8:	d1 e0                	shl    eax,1
c001dafa:	83 c0 01             	add    eax,0x1
c001dafd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001db00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001db03:	50                   	push   eax
c001db04:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db07:	e8 6e fe ff ff       	call   c001d97a <IOAPIC::read(int)>
c001db0c:	83 c4 08             	add    esp,0x8
c001db0f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001db12:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001db19:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001db1c:	c1 e0 18             	shl    eax,0x18
c001db1f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001db22:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001db25:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001db28:	52                   	push   edx
c001db29:	50                   	push   eax
c001db2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db2d:	e8 56 ff ff ff       	call   c001da88 <IOAPIC::write(int, int)>
c001db32:	83 c4 0c             	add    esp,0xc
c001db35:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001db38:	50                   	push   eax
c001db39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db3c:	e8 39 fe ff ff       	call   c001d97a <IOAPIC::read(int)>
c001db41:	83 c4 08             	add    esp,0x8
c001db44:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001db47:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001db4e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001db55:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001db5c:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001db60:	85 c0                	test   eax,eax
c001db62:	74 09                	je     c001db6d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001db64:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001db6b:	eb 07                	jmp    c001db74 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001db6d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001db74:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001db78:	85 c0                	test   eax,eax
c001db7a:	74 09                	je     c001db85 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001db7c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001db83:	eb 07                	jmp    c001db8c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001db85:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001db8c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001db93:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001db97:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001db9a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001db9d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dba0:	52                   	push   edx
c001dba1:	50                   	push   eax
c001dba2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dba5:	e8 de fe ff ff       	call   c001da88 <IOAPIC::write(int, int)>
c001dbaa:	83 c4 0c             	add    esp,0xc
c001dbad:	90                   	nop
c001dbae:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dbb1:	c9                   	leave  
c001dbb2:	c3                   	ret    
c001dbb3:	90                   	nop

c001dbb4 <APICTimer::close(int, int, void*)>:
c001dbb4:	b8 00 00 00 00       	mov    eax,0x0
c001dbb9:	c3                   	ret    
c001dbba:	66 90                	xchg   ax,ax

c001dbbc <apicTimerHandler(regs*, void*)>:
c001dbbc:	83 ec 0c             	sub    esp,0xc
c001dbbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dbc3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dbc5:	b8 10 27 00 00       	mov    eax,0x2710
c001dbca:	ba 00 00 00 00       	mov    edx,0x0
c001dbcf:	f7 f1                	div    ecx
c001dbd1:	83 ec 0c             	sub    esp,0xc
c001dbd4:	50                   	push   eax
c001dbd5:	e8 96 fb fe ff       	call   c000d770 <timerHandler(unsigned int)>
c001dbda:	83 c4 10             	add    esp,0x10
c001dbdd:	90                   	nop
c001dbde:	83 c4 0c             	add    esp,0xc
c001dbe1:	c3                   	ret    
c001dbe2:	66 90                	xchg   ax,ax

c001dbe4 <APICTimer::open(int, int, void*)>:
c001dbe4:	83 ec 0c             	sub    esp,0xc
c001dbe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbeb:	8b 00                	mov    eax,DWORD PTR [eax]
c001dbed:	83 c0 24             	add    eax,0x24
c001dbf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001dbf2:	83 ec 08             	sub    esp,0x8
c001dbf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbf9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbfd:	ff d0                	call   eax
c001dbff:	83 c4 10             	add    esp,0x10
c001dc02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc06:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dc0a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dc10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc18:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dc1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc22:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dc28:	83 ec 0c             	sub    esp,0xc
c001dc2b:	51                   	push   ecx
c001dc2c:	6a 01                	push   0x1
c001dc2e:	68 bc db 01 c0       	push   0xc001dbbc
c001dc33:	52                   	push   edx
c001dc34:	50                   	push   eax
c001dc35:	e8 78 e0 fe ff       	call   c000bcb2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc3a:	83 c4 20             	add    esp,0x20
c001dc3d:	89 c2                	mov    edx,eax
c001dc3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc43:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dc49:	b8 00 00 00 00       	mov    eax,0x0
c001dc4e:	83 c4 0c             	add    esp,0xc
c001dc51:	c3                   	ret    
c001dc52:	66 90                	xchg   ax,ax

c001dc54 <APICTimer::write(int)>:
c001dc54:	83 ec 0c             	sub    esp,0xc
c001dc57:	83 ec 0c             	sub    esp,0xc
c001dc5a:	68 30 1d 02 c0       	push   0xc0021d30
c001dc5f:	e8 a3 2b ff ff       	call   c0010807 <KePanic(char const*)>
c001dc64:	83 c4 10             	add    esp,0x10
c001dc67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc6f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dc75:	90                   	nop
c001dc76:	83 c4 0c             	add    esp,0xc
c001dc79:	c3                   	ret    
c001dc7a:	66 90                	xchg   ax,ax

c001dc7c <APICTimer::APICTimer()>:
c001dc7c:	83 ec 0c             	sub    esp,0xc
c001dc7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc83:	83 ec 08             	sub    esp,0x8
c001dc86:	68 40 1d 02 c0       	push   0xc0021d40
c001dc8b:	50                   	push   eax
c001dc8c:	e8 13 fa fe ff       	call   c000d6a4 <Timer::Timer(char const*)>
c001dc91:	83 c4 10             	add    esp,0x10
c001dc94:	ba 54 1d 02 c0       	mov    edx,0xc0021d54
c001dc99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc9d:	89 10                	mov    DWORD PTR [eax],edx
c001dc9f:	90                   	nop
c001dca0:	83 c4 0c             	add    esp,0xc
c001dca3:	c3                   	ret    

c001dca4 <PIT::write(int)>:
c001dca4:	83 ec 10             	sub    esp,0x10
c001dca7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dcab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dcaf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dcb5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dcb9:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001dcbe:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dcc3:	89 c2                	mov    edx,eax
c001dcc5:	c1 fa 1f             	sar    edx,0x1f
c001dcc8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dccc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dcd0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001dcd7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dcdc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001dce0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001dce5:	ee                   	out    dx,al
c001dce6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dcea:	0f b6 c0             	movzx  eax,al
c001dced:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dcf4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001dcf8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001dcfc:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001dd01:	ee                   	out    dx,al
c001dd02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd06:	c1 f8 08             	sar    eax,0x8
c001dd09:	0f b6 c0             	movzx  eax,al
c001dd0c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001dd13:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dd17:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dd1b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001dd20:	ee                   	out    dx,al
c001dd21:	90                   	nop
c001dd22:	83 c4 10             	add    esp,0x10
c001dd25:	c3                   	ret    
c001dd26:	66 90                	xchg   ax,ax

c001dd28 <pitHandler(regs*, void*)>:
c001dd28:	83 ec 0c             	sub    esp,0xc
c001dd2b:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001dd31:	b8 10 27 00 00       	mov    eax,0x2710
c001dd36:	89 c2                	mov    edx,eax
c001dd38:	c1 fa 1f             	sar    edx,0x1f
c001dd3b:	f7 f9                	idiv   ecx
c001dd3d:	83 ec 0c             	sub    esp,0xc
c001dd40:	50                   	push   eax
c001dd41:	e8 2a fa fe ff       	call   c000d770 <timerHandler(unsigned int)>
c001dd46:	83 c4 10             	add    esp,0x10
c001dd49:	90                   	nop
c001dd4a:	83 c4 0c             	add    esp,0xc
c001dd4d:	c3                   	ret    
c001dd4e:	66 90                	xchg   ax,ax

c001dd50 <PIT::open(int, int, void*)>:
c001dd50:	83 ec 0c             	sub    esp,0xc
c001dd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd57:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd59:	83 c0 24             	add    eax,0x24
c001dd5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd5e:	83 ec 08             	sub    esp,0x8
c001dd61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd69:	ff d0                	call   eax
c001dd6b:	83 c4 10             	add    esp,0x10
c001dd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd72:	83 ec 0c             	sub    esp,0xc
c001dd75:	6a 00                	push   0x0
c001dd77:	6a 01                	push   0x1
c001dd79:	68 28 dd 01 c0       	push   0xc001dd28
c001dd7e:	6a 00                	push   0x0
c001dd80:	50                   	push   eax
c001dd81:	e8 2c df fe ff       	call   c000bcb2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd86:	83 c4 20             	add    esp,0x20
c001dd89:	89 c2                	mov    edx,eax
c001dd8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd8f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dd95:	b8 00 00 00 00       	mov    eax,0x0
c001dd9a:	83 c4 0c             	add    esp,0xc
c001dd9d:	c3                   	ret    
c001dd9e:	66 90                	xchg   ax,ax

c001dda0 <PIT::close(int, int, void*)>:
c001dda0:	83 ec 0c             	sub    esp,0xc
c001dda3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dda7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ddb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddb5:	6a 01                	push   0x1
c001ddb7:	68 28 dd 01 c0       	push   0xc001dd28
c001ddbc:	6a 00                	push   0x0
c001ddbe:	50                   	push   eax
c001ddbf:	e8 24 df fe ff       	call   c000bce8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ddc4:	83 c4 10             	add    esp,0x10
c001ddc7:	b8 00 00 00 00       	mov    eax,0x0
c001ddcc:	83 c4 0c             	add    esp,0xc
c001ddcf:	c3                   	ret    

c001ddd0 <PIT::PIT()>:
c001ddd0:	83 ec 0c             	sub    esp,0xc
c001ddd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddd7:	83 ec 08             	sub    esp,0x8
c001ddda:	68 7c 1d 02 c0       	push   0xc0021d7c
c001dddf:	50                   	push   eax
c001dde0:	e8 bf f8 fe ff       	call   c000d6a4 <Timer::Timer(char const*)>
c001dde5:	83 c4 10             	add    esp,0x10
c001dde8:	ba a4 1d 02 c0       	mov    edx,0xc0021da4
c001dded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddf1:	89 10                	mov    DWORD PTR [eax],edx
c001ddf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddf7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ddfd:	0f b6 c0             	movzx  eax,al
c001de00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de04:	66 c7 44 82 04 40 00 	mov    WORD PTR [edx+eax*4+0x4],0x40
c001de0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de0f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de15:	0f b6 c0             	movzx  eax,al
c001de18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de1c:	c6 44 82 06 04       	mov    BYTE PTR [edx+eax*4+0x6],0x4
c001de21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de25:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de2b:	8d 50 01             	lea    edx,[eax+0x1]
c001de2e:	88 d1                	mov    cl,dl
c001de30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de34:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001de3a:	0f b6 c0             	movzx  eax,al
c001de3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de41:	8a 4c 82 07          	mov    cl,BYTE PTR [edx+eax*4+0x7]
c001de45:	83 e1 3f             	and    ecx,0x3f
c001de48:	88 4c 82 07          	mov    BYTE PTR [edx+eax*4+0x7],cl
c001de4c:	90                   	nop
c001de4d:	83 c4 0c             	add    esp,0xc
c001de50:	c3                   	ret    
c001de51:	66 90                	xchg   ax,ax
c001de53:	66 90                	xchg   ax,ax
c001de55:	66 90                	xchg   ax,ax
c001de57:	66 90                	xchg   ax,ax
c001de59:	66 90                	xchg   ax,ax
c001de5b:	66 90                	xchg   ax,ax
c001de5d:	66 90                	xchg   ax,ax
c001de5f:	90                   	nop

c001de60 <avxDetect>:
c001de60:	b8 01 00 00 00       	mov    eax,0x1
c001de65:	0f a2                	cpuid  
c001de67:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001de6d:	74 15                	je     c001de84 <avxDetect.noAVX>
c001de6f:	b8 01 00 00 00       	mov    eax,0x1
c001de74:	0f a2                	cpuid  
c001de76:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001de7c:	74 06                	je     c001de84 <avxDetect.noAVX>
c001de7e:	b8 01 00 00 00       	mov    eax,0x1
c001de83:	c3                   	ret    

c001de84 <avxDetect.noAVX>:
c001de84:	b8 00 00 00 00       	mov    eax,0x0
c001de89:	c3                   	ret    

c001de8a <avxSave>:
c001de8a:	53                   	push   ebx
c001de8b:	52                   	push   edx
c001de8c:	31 c0                	xor    eax,eax
c001de8e:	48                   	dec    eax
c001de8f:	89 c2                	mov    edx,eax
c001de91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001de95:	0f ae 23             	xsave  [ebx]
c001de98:	5a                   	pop    edx
c001de99:	5b                   	pop    ebx
c001de9a:	c3                   	ret    

c001de9b <avxLoad>:
c001de9b:	53                   	push   ebx
c001de9c:	52                   	push   edx
c001de9d:	31 c0                	xor    eax,eax
c001de9f:	48                   	dec    eax
c001dea0:	89 c2                	mov    edx,eax
c001dea2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dea6:	0f ae 2b             	xrstor [ebx]
c001dea9:	5a                   	pop    edx
c001deaa:	5b                   	pop    ebx
c001deab:	c3                   	ret    

c001deac <avxInit>:
c001deac:	e8 67 03 00 00       	call   c001e218 <sseInit>
c001deb1:	50                   	push   eax
c001deb2:	51                   	push   ecx
c001deb3:	0f 20 e0             	mov    eax,cr4
c001deb6:	0d 00 00 04 00       	or     eax,0x40000
c001debb:	0f 22 e0             	mov    cr4,eax
c001debe:	31 c9                	xor    ecx,ecx
c001dec0:	0f 01 d0             	xgetbv 
c001dec3:	0d 07 00 00 00       	or     eax,0x7
c001dec8:	0f 01 d1             	xsetbv 
c001decb:	59                   	pop    ecx
c001decc:	58                   	pop    eax
c001decd:	c3                   	ret    

c001dece <avxClose>:
c001dece:	c3                   	ret    

c001decf <wouldSheSayYes>:
c001decf:	c3                   	ret    
c001ded0:	49                   	dec    ecx
c001ded1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ded5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ded9:	75 20                	jne    c001defb <isr0+0xb>
c001dedb:	4e                   	dec    esi
c001dedc:	79 61                	jns    c001df3f <isr7+0x3>
c001dede:	68 2e 2e 2e 00       	push   0x2e2e2e
c001dee3:	66 90                	xchg   ax,ax
c001dee5:	66 90                	xchg   ax,ax
c001dee7:	66 90                	xchg   ax,ax
c001dee9:	66 90                	xchg   ax,ax
c001deeb:	66 90                	xchg   ax,ax
c001deed:	66 90                	xchg   ax,ax
c001deef:	90                   	nop

c001def0 <isr0>:
c001def0:	fa                   	cli    
c001def1:	68 00 00 00 00       	push   0x0
c001def6:	68 00 00 00 00       	push   0x0
c001defb:	e9 56 01 00 00       	jmp    c001e056 <int_common_stub>

c001df00 <isr1>:
c001df00:	fa                   	cli    
c001df01:	6a 00                	push   0x0
c001df03:	6a 01                	push   0x1
c001df05:	e9 4c 01 00 00       	jmp    c001e056 <int_common_stub>

c001df0a <isr2>:
c001df0a:	fa                   	cli    
c001df0b:	6a 00                	push   0x0
c001df0d:	6a 02                	push   0x2
c001df0f:	e9 42 01 00 00       	jmp    c001e056 <int_common_stub>

c001df14 <isr3>:
c001df14:	fa                   	cli    
c001df15:	6a 00                	push   0x0
c001df17:	6a 03                	push   0x3
c001df19:	e9 38 01 00 00       	jmp    c001e056 <int_common_stub>

c001df1e <isr4>:
c001df1e:	fa                   	cli    
c001df1f:	6a 00                	push   0x0
c001df21:	6a 04                	push   0x4
c001df23:	e9 2e 01 00 00       	jmp    c001e056 <int_common_stub>

c001df28 <isr5>:
c001df28:	fa                   	cli    
c001df29:	6a 00                	push   0x0
c001df2b:	6a 05                	push   0x5
c001df2d:	e9 24 01 00 00       	jmp    c001e056 <int_common_stub>

c001df32 <isr6>:
c001df32:	fa                   	cli    
c001df33:	6a 00                	push   0x0
c001df35:	6a 06                	push   0x6
c001df37:	e9 1a 01 00 00       	jmp    c001e056 <int_common_stub>

c001df3c <isr7>:
c001df3c:	fa                   	cli    
c001df3d:	6a 00                	push   0x0
c001df3f:	6a 07                	push   0x7
c001df41:	e9 10 01 00 00       	jmp    c001e056 <int_common_stub>

c001df46 <isr8>:
c001df46:	fa                   	cli    
c001df47:	6a 08                	push   0x8
c001df49:	e9 08 01 00 00       	jmp    c001e056 <int_common_stub>

c001df4e <isr9>:
c001df4e:	fa                   	cli    
c001df4f:	6a 00                	push   0x0
c001df51:	6a 09                	push   0x9
c001df53:	e9 fe 00 00 00       	jmp    c001e056 <int_common_stub>

c001df58 <isr10>:
c001df58:	fa                   	cli    
c001df59:	6a 0a                	push   0xa
c001df5b:	e9 f6 00 00 00       	jmp    c001e056 <int_common_stub>

c001df60 <isr11>:
c001df60:	fa                   	cli    
c001df61:	6a 0b                	push   0xb
c001df63:	e9 ee 00 00 00       	jmp    c001e056 <int_common_stub>

c001df68 <isr12>:
c001df68:	fa                   	cli    
c001df69:	6a 0c                	push   0xc
c001df6b:	e9 e6 00 00 00       	jmp    c001e056 <int_common_stub>

c001df70 <isr13>:
c001df70:	fa                   	cli    
c001df71:	6a 0d                	push   0xd
c001df73:	53                   	push   ebx
c001df74:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df78:	81 fb 46 e1 01 c0    	cmp    ebx,0xc001e146
c001df7e:	5b                   	pop    ebx
c001df7f:	0f 84 c3 01 00 00    	je     c001e148 <finishSignal2>
c001df85:	e9 cc 00 00 00       	jmp    c001e056 <int_common_stub>

c001df8a <isr14>:
c001df8a:	fa                   	cli    
c001df8b:	6a 0e                	push   0xe
c001df8d:	e9 c4 00 00 00       	jmp    c001e056 <int_common_stub>

c001df92 <isr15>:
c001df92:	fa                   	cli    
c001df93:	6a 00                	push   0x0
c001df95:	6a 0f                	push   0xf
c001df97:	e9 ba 00 00 00       	jmp    c001e056 <int_common_stub>

c001df9c <isr16>:
c001df9c:	fa                   	cli    
c001df9d:	6a 00                	push   0x0
c001df9f:	6a 10                	push   0x10
c001dfa1:	e9 b0 00 00 00       	jmp    c001e056 <int_common_stub>

c001dfa6 <isr17>:
c001dfa6:	fa                   	cli    
c001dfa7:	6a 00                	push   0x0
c001dfa9:	6a 11                	push   0x11
c001dfab:	e9 a6 00 00 00       	jmp    c001e056 <int_common_stub>

c001dfb0 <isr18>:
c001dfb0:	fa                   	cli    
c001dfb1:	6a 00                	push   0x0
c001dfb3:	6a 12                	push   0x12
c001dfb5:	e9 9c 00 00 00       	jmp    c001e056 <int_common_stub>

c001dfba <irq3>:
c001dfba:	fa                   	cli    
c001dfbb:	6a 00                	push   0x0
c001dfbd:	6a 23                	push   0x23
c001dfbf:	e9 92 00 00 00       	jmp    c001e056 <int_common_stub>

c001dfc4 <irq4>:
c001dfc4:	fa                   	cli    
c001dfc5:	6a 00                	push   0x0
c001dfc7:	6a 24                	push   0x24
c001dfc9:	e9 88 00 00 00       	jmp    c001e056 <int_common_stub>

c001dfce <irq5>:
c001dfce:	fa                   	cli    
c001dfcf:	6a 00                	push   0x0
c001dfd1:	6a 25                	push   0x25
c001dfd3:	e9 7e 00 00 00       	jmp    c001e056 <int_common_stub>

c001dfd8 <irq6>:
c001dfd8:	fa                   	cli    
c001dfd9:	6a 00                	push   0x0
c001dfdb:	6a 26                	push   0x26
c001dfdd:	e9 74 00 00 00       	jmp    c001e056 <int_common_stub>

c001dfe2 <irq7>:
c001dfe2:	fa                   	cli    
c001dfe3:	6a 00                	push   0x0
c001dfe5:	6a 27                	push   0x27
c001dfe7:	e9 6a 00 00 00       	jmp    c001e056 <int_common_stub>

c001dfec <irq8>:
c001dfec:	fa                   	cli    
c001dfed:	6a 00                	push   0x0
c001dfef:	6a 28                	push   0x28
c001dff1:	e9 60 00 00 00       	jmp    c001e056 <int_common_stub>

c001dff6 <irq9>:
c001dff6:	fa                   	cli    
c001dff7:	6a 00                	push   0x0
c001dff9:	6a 29                	push   0x29
c001dffb:	e9 56 00 00 00       	jmp    c001e056 <int_common_stub>

c001e000 <irq10>:
c001e000:	fa                   	cli    
c001e001:	6a 00                	push   0x0
c001e003:	6a 2a                	push   0x2a
c001e005:	e9 4c 00 00 00       	jmp    c001e056 <int_common_stub>

c001e00a <irq11>:
c001e00a:	fa                   	cli    
c001e00b:	6a 00                	push   0x0
c001e00d:	6a 2b                	push   0x2b
c001e00f:	e9 42 00 00 00       	jmp    c001e056 <int_common_stub>

c001e014 <irq12>:
c001e014:	fa                   	cli    
c001e015:	6a 00                	push   0x0
c001e017:	6a 2c                	push   0x2c
c001e019:	e9 38 00 00 00       	jmp    c001e056 <int_common_stub>

c001e01e <irq13>:
c001e01e:	fa                   	cli    
c001e01f:	6a 00                	push   0x0
c001e021:	6a 2d                	push   0x2d
c001e023:	e9 2e 00 00 00       	jmp    c001e056 <int_common_stub>

c001e028 <irq14>:
c001e028:	fa                   	cli    
c001e029:	6a 00                	push   0x0
c001e02b:	6a 2e                	push   0x2e
c001e02d:	e9 24 00 00 00       	jmp    c001e056 <int_common_stub>

c001e032 <irq15>:
c001e032:	fa                   	cli    
c001e033:	6a 00                	push   0x0
c001e035:	6a 2f                	push   0x2f
c001e037:	e9 1a 00 00 00       	jmp    c001e056 <int_common_stub>

c001e03c <irq1>:
c001e03c:	fa                   	cli    
c001e03d:	6a 00                	push   0x0
c001e03f:	6a 21                	push   0x21
c001e041:	eb 13                	jmp    c001e056 <int_common_stub>

c001e043 <irq2>:
c001e043:	fa                   	cli    
c001e044:	6a 00                	push   0x0
c001e046:	6a 22                	push   0x22
c001e048:	eb 0c                	jmp    c001e056 <int_common_stub>

c001e04a <isr96>:
c001e04a:	6a 00                	push   0x0
c001e04c:	6a 60                	push   0x60
c001e04e:	fb                   	sti    
c001e04f:	eb 37                	jmp    c001e088 <syscall_common_stub>

c001e051 <irq0>:
c001e051:	fa                   	cli    
c001e052:	6a 00                	push   0x0
c001e054:	6a 20                	push   0x20

c001e056 <int_common_stub>:
c001e056:	60                   	pusha  
c001e057:	1e                   	push   ds
c001e058:	06                   	push   es
c001e059:	0f a0                	push   fs
c001e05b:	0f a8                	push   gs
c001e05d:	66 b8 10 00          	mov    ax,0x10
c001e061:	66 8e d8             	mov    ds,ax
c001e064:	66 8e c0             	mov    es,ax
c001e067:	66 8e e0             	mov    fs,ax
c001e06a:	66 8e e8             	mov    gs,ax
c001e06d:	54                   	push   esp
c001e06e:	fc                   	cld    
c001e06f:	e8 3c e1 fe ff       	call   c000c1b0 <int_handler>
c001e074:	81 c4 04 00 00 00    	add    esp,0x4
c001e07a:	0f a9                	pop    gs
c001e07c:	0f a1                	pop    fs
c001e07e:	07                   	pop    es
c001e07f:	1f                   	pop    ds
c001e080:	61                   	popa   
c001e081:	81 c4 08 00 00 00    	add    esp,0x8
c001e087:	cf                   	iret   

c001e088 <syscall_common_stub>:
c001e088:	60                   	pusha  
c001e089:	1e                   	push   ds
c001e08a:	06                   	push   es
c001e08b:	0f a0                	push   fs
c001e08d:	0f a8                	push   gs
c001e08f:	66 b8 10 00          	mov    ax,0x10
c001e093:	66 8e d8             	mov    ds,ax
c001e096:	66 8e c0             	mov    es,ax
c001e099:	66 8e e0             	mov    fs,ax
c001e09c:	66 8e e8             	mov    gs,ax
c001e09f:	54                   	push   esp
c001e0a0:	fc                   	cld    
c001e0a1:	e8 0a e1 fe ff       	call   c000c1b0 <int_handler>
c001e0a6:	81 c4 04 00 00 00    	add    esp,0x4
c001e0ac:	0f a9                	pop    gs
c001e0ae:	0f a1                	pop    fs
c001e0b0:	07                   	pop    es
c001e0b1:	1f                   	pop    ds
c001e0b2:	e8 54 2d ff ff       	call   c0010e0b <KiCheckSignalZ>
c001e0b7:	3d 00 00 00 00       	cmp    eax,0x0
c001e0bc:	0f 84 c0 00 00 00    	je     c001e182 <skipSignals>
c001e0c2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e0c7:	61                   	popa   
c001e0c8:	53                   	push   ebx
c001e0c9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e0cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e0d2:	5b                   	pop    ebx
c001e0d3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e0d8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e0db:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e0de:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e0e1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e0e4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e0e7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e0ea:	81 c4 08 00 00 00    	add    esp,0x8
c001e0f0:	5e                   	pop    esi
c001e0f1:	5b                   	pop    ebx
c001e0f2:	59                   	pop    ecx
c001e0f3:	5a                   	pop    edx
c001e0f4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e0f7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e0fa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e0fd:	52                   	push   edx
c001e0fe:	51                   	push   ecx
c001e0ff:	53                   	push   ebx
c001e100:	56                   	push   esi
c001e101:	81 ec 08 00 00 00    	sub    esp,0x8
c001e107:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e10a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e10d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e110:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e113:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e116:	60                   	pusha  
c001e117:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e11d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e120:	89 e3                	mov    ebx,esp
c001e122:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e125:	52                   	push   edx
c001e126:	68 46 e1 01 c0       	push   0xc001e146
c001e12b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e12e:	89 dc                	mov    esp,ebx
c001e130:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e133:	68 23 00 00 00       	push   0x23
c001e138:	51                   	push   ecx
c001e139:	68 02 02 00 00       	push   0x202
c001e13e:	68 1b 00 00 00       	push   0x1b
c001e143:	ff 36                	push   DWORD PTR [esi]
c001e145:	cf                   	iret   

c001e146 <finishSignal>:
c001e146:	cd 0f                	int    0xf

c001e148 <finishSignal2>:
c001e148:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e14e:	e8 35 2d ff ff       	call   c0010e88 <KiFinishSignalZ>
c001e153:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e159:	68 23 00 00 00       	push   0x23
c001e15e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e161:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e164:	68 1b 00 00 00       	push   0x1b
c001e169:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e16c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e16f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e172:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e175:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e178:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e17b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e17e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e181:	cf                   	iret   

c001e182 <skipSignals>:
c001e182:	61                   	popa   
c001e183:	81 c4 08 00 00 00    	add    esp,0x8
c001e189:	cf                   	iret   
c001e18a:	90                   	nop
c001e18b:	90                   	nop

c001e18c <irq16>:
c001e18c:	fa                   	cli    
c001e18d:	6a 00                	push   0x0
c001e18f:	6a 30                	push   0x30
c001e191:	e9 c0 fe ff ff       	jmp    c001e056 <int_common_stub>

c001e196 <irq17>:
c001e196:	fa                   	cli    
c001e197:	6a 00                	push   0x0
c001e199:	6a 31                	push   0x31
c001e19b:	e9 b6 fe ff ff       	jmp    c001e056 <int_common_stub>

c001e1a0 <irq18>:
c001e1a0:	fa                   	cli    
c001e1a1:	6a 00                	push   0x0
c001e1a3:	6a 32                	push   0x32
c001e1a5:	e9 ac fe ff ff       	jmp    c001e056 <int_common_stub>

c001e1aa <irq19>:
c001e1aa:	fa                   	cli    
c001e1ab:	6a 00                	push   0x0
c001e1ad:	6a 33                	push   0x33
c001e1af:	e9 a2 fe ff ff       	jmp    c001e056 <int_common_stub>

c001e1b4 <irq20>:
c001e1b4:	fa                   	cli    
c001e1b5:	6a 00                	push   0x0
c001e1b7:	6a 34                	push   0x34
c001e1b9:	e9 98 fe ff ff       	jmp    c001e056 <int_common_stub>

c001e1be <irq21>:
c001e1be:	fa                   	cli    
c001e1bf:	6a 00                	push   0x0
c001e1c1:	6a 35                	push   0x35
c001e1c3:	e9 8e fe ff ff       	jmp    c001e056 <int_common_stub>

c001e1c8 <irq22>:
c001e1c8:	fa                   	cli    
c001e1c9:	6a 00                	push   0x0
c001e1cb:	6a 36                	push   0x36
c001e1cd:	e9 84 fe ff ff       	jmp    c001e056 <int_common_stub>

c001e1d2 <irq23>:
c001e1d2:	fa                   	cli    
c001e1d3:	6a 00                	push   0x0
c001e1d5:	6a 37                	push   0x37
c001e1d7:	e9 7a fe ff ff       	jmp    c001e056 <int_common_stub>
c001e1dc:	66 90                	xchg   ax,ax
c001e1de:	66 90                	xchg   ax,ax

c001e1e0 <i386GetRDRAND>:
c001e1e0:	b9 64 00 00 00       	mov    ecx,0x64

c001e1e5 <retry>:
c001e1e5:	0f c7 f0             	rdrand eax
c001e1e8:	72 05                	jb     c001e1ef <retry.done>
c001e1ea:	e2 f9                	loop   c001e1e5 <retry>

c001e1ec <retry.fail>:
c001e1ec:	31 c0                	xor    eax,eax
c001e1ee:	c3                   	ret    

c001e1ef <retry.done>:
c001e1ef:	c3                   	ret    

c001e1f0 <absolutelyNoChanceInHell>:
c001e1f0:	b8 01 00 00 00       	mov    eax,0x1
c001e1f5:	0f a2                	cpuid  
c001e1f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e1fd:	74 06                	je     c001e205 <sseDetect.noSSE>
c001e1ff:	b8 01 00 00 00       	mov    eax,0x1
c001e204:	c3                   	ret    

c001e205 <sseDetect.noSSE>:
c001e205:	31 c0                	xor    eax,eax
c001e207:	c3                   	ret    

c001e208 <sseSave>:
c001e208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e20c:	0f ae 00             	fxsave [eax]
c001e20f:	c3                   	ret    

c001e210 <sseLoad>:
c001e210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e214:	0f ae 08             	fxrstor [eax]
c001e217:	c3                   	ret    

c001e218 <sseInit>:
c001e218:	e8 42 00 00 00       	call   c001e25f <x87Init>
c001e21d:	0f 20 e0             	mov    eax,cr4
c001e220:	66 0d 00 06          	or     ax,0x600
c001e224:	0f 22 e0             	mov    cr4,eax
c001e227:	c3                   	ret    

c001e228 <sseClose>:
c001e228:	c3                   	ret    
c001e229:	66 90                	xchg   ax,ax
c001e22b:	66 90                	xchg   ax,ax
c001e22d:	66 90                	xchg   ax,ax
c001e22f:	90                   	nop

c001e230 <value_37F>:
c001e230:	7f 03                	jg     c001e235 <value_37A+0x1>

c001e232 <value_37E>:
c001e232:	7e 03                	jle    c001e237 <x87Detect+0x1>

c001e234 <value_37A>:
c001e234:	7a 03                	jp     c001e239 <x87Detect+0x3>

c001e236 <x87Detect>:
c001e236:	b8 01 00 00 00       	mov    eax,0x1
c001e23b:	0f a2                	cpuid  
c001e23d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e243:	74 06                	je     c001e24b <x87Detect.nox87>
c001e245:	b8 01 00 00 00       	mov    eax,0x1
c001e24a:	c3                   	ret    

c001e24b <x87Detect.nox87>:
c001e24b:	b8 00 00 00 00       	mov    eax,0x0
c001e250:	c3                   	ret    

c001e251 <x87Save>:
c001e251:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e255:	dd 30                	fnsave [eax]
c001e257:	c3                   	ret    

c001e258 <x87Load>:
c001e258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e25c:	dd 20                	frstor [eax]
c001e25e:	c3                   	ret    

c001e25f <x87Init>:
c001e25f:	0f 20 c0             	mov    eax,cr0
c001e262:	66 25 fb ff          	and    ax,0xfffb
c001e266:	66 0d 22 00          	or     ax,0x22
c001e26a:	0f 22 c0             	mov    cr0,eax
c001e26d:	db e3                	fninit 
c001e26f:	0f 06                	clts   
c001e271:	d9 2d 34 e2 01 c0    	fldcw  WORD PTR ds:0xc001e234
c001e277:	c3                   	ret    

c001e278 <x87Close>:
c001e278:	c3                   	ret    
c001e279:	66 90                	xchg   ax,ax
c001e27b:	90                   	nop

c001e27c <__do_global_ctors_aux>:
c001e27c:	a1 30 f2 01 c0       	mov    eax,ds:0xc001f230
c001e281:	83 f8 ff             	cmp    eax,0xffffffff
c001e284:	74 1a                	je     c001e2a0 <__do_global_ctors_aux+0x24>
c001e286:	55                   	push   ebp
c001e287:	89 e5                	mov    ebp,esp
c001e289:	53                   	push   ebx
c001e28a:	52                   	push   edx
c001e28b:	bb 30 f2 01 c0       	mov    ebx,0xc001f230
c001e290:	ff d0                	call   eax
c001e292:	83 eb 04             	sub    ebx,0x4
c001e295:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e297:	83 f8 ff             	cmp    eax,0xffffffff
c001e29a:	75 f4                	jne    c001e290 <__do_global_ctors_aux+0x14>
c001e29c:	58                   	pop    eax
c001e29d:	5b                   	pop    ebx
c001e29e:	5d                   	pop    ebp
c001e29f:	c3                   	ret    
c001e2a0:	c3                   	ret    
c001e2a1:	66 90                	xchg   ax,ax
c001e2a3:	90                   	nop

c001e2a4 <__divdi3>:
c001e2a4:	55                   	push   ebp
c001e2a5:	57                   	push   edi
c001e2a6:	56                   	push   esi
c001e2a7:	53                   	push   ebx
c001e2a8:	83 ec 1c             	sub    esp,0x1c
c001e2ab:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e2af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e2b3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e2b6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e2ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e2be:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e2c2:	85 db                	test   ebx,ebx
c001e2c4:	0f 88 8e 00 00 00    	js     c001e358 <__divdi3+0xb4>
c001e2ca:	89 dd                	mov    ebp,ebx
c001e2cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e2d4:	89 d3                	mov    ebx,edx
c001e2d6:	85 d2                	test   edx,edx
c001e2d8:	79 0d                	jns    c001e2e7 <__divdi3+0x43>
c001e2da:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e2de:	f7 d8                	neg    eax
c001e2e0:	83 d2 00             	adc    edx,0x0
c001e2e3:	f7 da                	neg    edx
c001e2e5:	89 d3                	mov    ebx,edx
c001e2e7:	89 c7                	mov    edi,eax
c001e2e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e2ec:	85 db                	test   ebx,ebx
c001e2ee:	75 48                	jne    c001e338 <__divdi3+0x94>
c001e2f0:	39 ef                	cmp    edi,ebp
c001e2f2:	76 24                	jbe    c001e318 <__divdi3+0x74>
c001e2f4:	89 ea                	mov    edx,ebp
c001e2f6:	f7 f7                	div    edi
c001e2f8:	89 c1                	mov    ecx,eax
c001e2fa:	31 f6                	xor    esi,esi
c001e2fc:	89 c8                	mov    eax,ecx
c001e2fe:	89 f2                	mov    edx,esi
c001e300:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e304:	85 c9                	test   ecx,ecx
c001e306:	74 07                	je     c001e30f <__divdi3+0x6b>
c001e308:	f7 d8                	neg    eax
c001e30a:	83 d2 00             	adc    edx,0x0
c001e30d:	f7 da                	neg    edx
c001e30f:	83 c4 1c             	add    esp,0x1c
c001e312:	5b                   	pop    ebx
c001e313:	5e                   	pop    esi
c001e314:	5f                   	pop    edi
c001e315:	5d                   	pop    ebp
c001e316:	c3                   	ret    
c001e317:	90                   	nop
c001e318:	85 ff                	test   edi,edi
c001e31a:	75 0b                	jne    c001e327 <__divdi3+0x83>
c001e31c:	b8 01 00 00 00       	mov    eax,0x1
c001e321:	31 d2                	xor    edx,edx
c001e323:	f7 f3                	div    ebx
c001e325:	89 c7                	mov    edi,eax
c001e327:	31 d2                	xor    edx,edx
c001e329:	89 e8                	mov    eax,ebp
c001e32b:	f7 f7                	div    edi
c001e32d:	89 c6                	mov    esi,eax
c001e32f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e332:	f7 f7                	div    edi
c001e334:	89 c1                	mov    ecx,eax
c001e336:	eb c4                	jmp    c001e2fc <__divdi3+0x58>
c001e338:	39 eb                	cmp    ebx,ebp
c001e33a:	77 3c                	ja     c001e378 <__divdi3+0xd4>
c001e33c:	0f bd f3             	bsr    esi,ebx
c001e33f:	83 f6 1f             	xor    esi,0x1f
c001e342:	75 40                	jne    c001e384 <__divdi3+0xe0>
c001e344:	39 eb                	cmp    ebx,ebp
c001e346:	72 09                	jb     c001e351 <__divdi3+0xad>
c001e348:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e34b:	0f 87 97 00 00 00    	ja     c001e3e8 <__divdi3+0x144>
c001e351:	b9 01 00 00 00       	mov    ecx,0x1
c001e356:	eb a4                	jmp    c001e2fc <__divdi3+0x58>
c001e358:	f7 d9                	neg    ecx
c001e35a:	83 d3 00             	adc    ebx,0x0
c001e35d:	f7 db                	neg    ebx
c001e35f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e362:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e366:	89 dd                	mov    ebp,ebx
c001e368:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e370:	e9 5f ff ff ff       	jmp    c001e2d4 <__divdi3+0x30>
c001e375:	8d 76 00             	lea    esi,[esi+0x0]
c001e378:	31 f6                	xor    esi,esi
c001e37a:	31 c9                	xor    ecx,ecx
c001e37c:	e9 7b ff ff ff       	jmp    c001e2fc <__divdi3+0x58>
c001e381:	8d 76 00             	lea    esi,[esi+0x0]
c001e384:	b8 20 00 00 00       	mov    eax,0x20
c001e389:	29 f0                	sub    eax,esi
c001e38b:	89 f1                	mov    ecx,esi
c001e38d:	d3 e3                	shl    ebx,cl
c001e38f:	89 fa                	mov    edx,edi
c001e391:	88 c1                	mov    cl,al
c001e393:	d3 ea                	shr    edx,cl
c001e395:	09 da                	or     edx,ebx
c001e397:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e39b:	89 f1                	mov    ecx,esi
c001e39d:	d3 e7                	shl    edi,cl
c001e39f:	89 eb                	mov    ebx,ebp
c001e3a1:	88 c1                	mov    cl,al
c001e3a3:	d3 eb                	shr    ebx,cl
c001e3a5:	89 f1                	mov    ecx,esi
c001e3a7:	d3 e5                	shl    ebp,cl
c001e3a9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e3ac:	88 c1                	mov    cl,al
c001e3ae:	d3 ea                	shr    edx,cl
c001e3b0:	09 d5                	or     ebp,edx
c001e3b2:	89 e8                	mov    eax,ebp
c001e3b4:	89 da                	mov    edx,ebx
c001e3b6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e3ba:	89 d3                	mov    ebx,edx
c001e3bc:	89 c5                	mov    ebp,eax
c001e3be:	f7 e7                	mul    edi
c001e3c0:	39 d3                	cmp    ebx,edx
c001e3c2:	72 18                	jb     c001e3dc <__divdi3+0x138>
c001e3c4:	74 0a                	je     c001e3d0 <__divdi3+0x12c>
c001e3c6:	89 e9                	mov    ecx,ebp
c001e3c8:	31 f6                	xor    esi,esi
c001e3ca:	e9 2d ff ff ff       	jmp    c001e2fc <__divdi3+0x58>
c001e3cf:	90                   	nop
c001e3d0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e3d3:	89 f1                	mov    ecx,esi
c001e3d5:	d3 e7                	shl    edi,cl
c001e3d7:	39 c7                	cmp    edi,eax
c001e3d9:	73 eb                	jae    c001e3c6 <__divdi3+0x122>
c001e3db:	90                   	nop
c001e3dc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e3df:	31 f6                	xor    esi,esi
c001e3e1:	e9 16 ff ff ff       	jmp    c001e2fc <__divdi3+0x58>
c001e3e6:	66 90                	xchg   ax,ax
c001e3e8:	31 c9                	xor    ecx,ecx
c001e3ea:	e9 0d ff ff ff       	jmp    c001e2fc <__divdi3+0x58>
c001e3ef:	90                   	nop

c001e3f0 <__moddi3>:
c001e3f0:	55                   	push   ebp
c001e3f1:	57                   	push   edi
c001e3f2:	56                   	push   esi
c001e3f3:	53                   	push   ebx
c001e3f4:	83 ec 2c             	sub    esp,0x2c
c001e3f7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e3fb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e3ff:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e403:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e407:	85 db                	test   ebx,ebx
c001e409:	0f 88 85 00 00 00    	js     c001e494 <__moddi3+0xa4>
c001e40f:	89 de                	mov    esi,ebx
c001e411:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e419:	89 d7                	mov    edi,edx
c001e41b:	85 d2                	test   edx,edx
c001e41d:	79 09                	jns    c001e428 <__moddi3+0x38>
c001e41f:	f7 d8                	neg    eax
c001e421:	83 d2 00             	adc    edx,0x0
c001e424:	f7 da                	neg    edx
c001e426:	89 d7                	mov    edi,edx
c001e428:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e42c:	89 cd                	mov    ebp,ecx
c001e42e:	85 ff                	test   edi,edi
c001e430:	75 52                	jne    c001e484 <__moddi3+0x94>
c001e432:	89 c3                	mov    ebx,eax
c001e434:	39 f0                	cmp    eax,esi
c001e436:	76 24                	jbe    c001e45c <__moddi3+0x6c>
c001e438:	89 c8                	mov    eax,ecx
c001e43a:	89 f2                	mov    edx,esi
c001e43c:	f7 f3                	div    ebx
c001e43e:	89 d6                	mov    esi,edx
c001e440:	89 f0                	mov    eax,esi
c001e442:	31 d2                	xor    edx,edx
c001e444:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e448:	85 c9                	test   ecx,ecx
c001e44a:	74 07                	je     c001e453 <__moddi3+0x63>
c001e44c:	f7 d8                	neg    eax
c001e44e:	83 d2 00             	adc    edx,0x0
c001e451:	f7 da                	neg    edx
c001e453:	83 c4 2c             	add    esp,0x2c
c001e456:	5b                   	pop    ebx
c001e457:	5e                   	pop    esi
c001e458:	5f                   	pop    edi
c001e459:	5d                   	pop    ebp
c001e45a:	c3                   	ret    
c001e45b:	90                   	nop
c001e45c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e460:	85 db                	test   ebx,ebx
c001e462:	75 0d                	jne    c001e471 <__moddi3+0x81>
c001e464:	b8 01 00 00 00       	mov    eax,0x1
c001e469:	31 d2                	xor    edx,edx
c001e46b:	f7 f7                	div    edi
c001e46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e471:	89 f0                	mov    eax,esi
c001e473:	31 d2                	xor    edx,edx
c001e475:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e479:	f7 f7                	div    edi
c001e47b:	89 e8                	mov    eax,ebp
c001e47d:	f7 f7                	div    edi
c001e47f:	89 d6                	mov    esi,edx
c001e481:	eb bd                	jmp    c001e440 <__moddi3+0x50>
c001e483:	90                   	nop
c001e484:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e488:	39 f7                	cmp    edi,esi
c001e48a:	76 20                	jbe    c001e4ac <__moddi3+0xbc>
c001e48c:	89 c8                	mov    eax,ecx
c001e48e:	89 f2                	mov    edx,esi
c001e490:	eb b2                	jmp    c001e444 <__moddi3+0x54>
c001e492:	66 90                	xchg   ax,ax
c001e494:	f7 d9                	neg    ecx
c001e496:	83 d3 00             	adc    ebx,0x0
c001e499:	f7 db                	neg    ebx
c001e49b:	89 de                	mov    esi,ebx
c001e49d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e4a5:	e9 6f ff ff ff       	jmp    c001e419 <__moddi3+0x29>
c001e4aa:	66 90                	xchg   ax,ax
c001e4ac:	0f bd c7             	bsr    eax,edi
c001e4af:	83 f0 1f             	xor    eax,0x1f
c001e4b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e4b6:	75 24                	jne    c001e4dc <__moddi3+0xec>
c001e4b8:	39 f7                	cmp    edi,esi
c001e4ba:	72 06                	jb     c001e4c2 <__moddi3+0xd2>
c001e4bc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e4c0:	77 0c                	ja     c001e4ce <__moddi3+0xde>
c001e4c2:	89 e9                	mov    ecx,ebp
c001e4c4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e4c8:	19 fe                	sbb    esi,edi
c001e4ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e4ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e4d2:	89 f2                	mov    edx,esi
c001e4d4:	e9 6b ff ff ff       	jmp    c001e444 <__moddi3+0x54>
c001e4d9:	8d 76 00             	lea    esi,[esi+0x0]
c001e4dc:	b8 20 00 00 00       	mov    eax,0x20
c001e4e1:	89 c2                	mov    edx,eax
c001e4e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e4e7:	29 da                	sub    edx,ebx
c001e4e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e4ed:	88 d9                	mov    cl,bl
c001e4ef:	d3 e7                	shl    edi,cl
c001e4f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e4f5:	88 d1                	mov    cl,dl
c001e4f7:	d3 e8                	shr    eax,cl
c001e4f9:	09 c7                	or     edi,eax
c001e4fb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e4ff:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e503:	89 d8                	mov    eax,ebx
c001e505:	88 d9                	mov    cl,bl
c001e507:	d3 e7                	shl    edi,cl
c001e509:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e50d:	89 f3                	mov    ebx,esi
c001e50f:	88 d1                	mov    cl,dl
c001e511:	d3 eb                	shr    ebx,cl
c001e513:	89 c7                	mov    edi,eax
c001e515:	88 c1                	mov    cl,al
c001e517:	d3 e6                	shl    esi,cl
c001e519:	89 e8                	mov    eax,ebp
c001e51b:	88 d1                	mov    cl,dl
c001e51d:	d3 e8                	shr    eax,cl
c001e51f:	09 f0                	or     eax,esi
c001e521:	89 f9                	mov    ecx,edi
c001e523:	d3 e5                	shl    ebp,cl
c001e525:	89 da                	mov    edx,ebx
c001e527:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e52b:	89 d3                	mov    ebx,edx
c001e52d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e531:	89 c6                	mov    esi,eax
c001e533:	89 d1                	mov    ecx,edx
c001e535:	39 d3                	cmp    ebx,edx
c001e537:	72 27                	jb     c001e560 <__moddi3+0x170>
c001e539:	74 21                	je     c001e55c <__moddi3+0x16c>
c001e53b:	29 f5                	sub    ebp,esi
c001e53d:	19 cb                	sbb    ebx,ecx
c001e53f:	89 de                	mov    esi,ebx
c001e541:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e545:	d3 e6                	shl    esi,cl
c001e547:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e54b:	89 f9                	mov    ecx,edi
c001e54d:	d3 ed                	shr    ebp,cl
c001e54f:	09 ee                	or     esi,ebp
c001e551:	89 f0                	mov    eax,esi
c001e553:	d3 eb                	shr    ebx,cl
c001e555:	89 da                	mov    edx,ebx
c001e557:	e9 e8 fe ff ff       	jmp    c001e444 <__moddi3+0x54>
c001e55c:	39 c5                	cmp    ebp,eax
c001e55e:	73 db                	jae    c001e53b <__moddi3+0x14b>
c001e560:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e564:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e568:	89 d1                	mov    ecx,edx
c001e56a:	89 c6                	mov    esi,eax
c001e56c:	eb cd                	jmp    c001e53b <__moddi3+0x14b>
c001e56e:	66 90                	xchg   ax,ax

c001e570 <__udivdi3>:
c001e570:	55                   	push   ebp
c001e571:	57                   	push   edi
c001e572:	56                   	push   esi
c001e573:	53                   	push   ebx
c001e574:	83 ec 1c             	sub    esp,0x1c
c001e577:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e57b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e57f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e583:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e587:	85 d2                	test   edx,edx
c001e589:	75 41                	jne    c001e5cc <__udivdi3+0x5c>
c001e58b:	39 f7                	cmp    edi,esi
c001e58d:	76 15                	jbe    c001e5a4 <__udivdi3+0x34>
c001e58f:	89 e8                	mov    eax,ebp
c001e591:	89 f2                	mov    edx,esi
c001e593:	f7 f7                	div    edi
c001e595:	31 db                	xor    ebx,ebx
c001e597:	89 da                	mov    edx,ebx
c001e599:	83 c4 1c             	add    esp,0x1c
c001e59c:	5b                   	pop    ebx
c001e59d:	5e                   	pop    esi
c001e59e:	5f                   	pop    edi
c001e59f:	5d                   	pop    ebp
c001e5a0:	c3                   	ret    
c001e5a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e5a4:	89 f9                	mov    ecx,edi
c001e5a6:	85 ff                	test   edi,edi
c001e5a8:	75 0b                	jne    c001e5b5 <__udivdi3+0x45>
c001e5aa:	b8 01 00 00 00       	mov    eax,0x1
c001e5af:	31 d2                	xor    edx,edx
c001e5b1:	f7 f7                	div    edi
c001e5b3:	89 c1                	mov    ecx,eax
c001e5b5:	31 d2                	xor    edx,edx
c001e5b7:	89 f0                	mov    eax,esi
c001e5b9:	f7 f1                	div    ecx
c001e5bb:	89 c3                	mov    ebx,eax
c001e5bd:	89 e8                	mov    eax,ebp
c001e5bf:	f7 f1                	div    ecx
c001e5c1:	89 da                	mov    edx,ebx
c001e5c3:	83 c4 1c             	add    esp,0x1c
c001e5c6:	5b                   	pop    ebx
c001e5c7:	5e                   	pop    esi
c001e5c8:	5f                   	pop    edi
c001e5c9:	5d                   	pop    ebp
c001e5ca:	c3                   	ret    
c001e5cb:	90                   	nop
c001e5cc:	39 f2                	cmp    edx,esi
c001e5ce:	77 1c                	ja     c001e5ec <__udivdi3+0x7c>
c001e5d0:	0f bd da             	bsr    ebx,edx
c001e5d3:	83 f3 1f             	xor    ebx,0x1f
c001e5d6:	75 24                	jne    c001e5fc <__udivdi3+0x8c>
c001e5d8:	39 f2                	cmp    edx,esi
c001e5da:	72 08                	jb     c001e5e4 <__udivdi3+0x74>
c001e5dc:	39 ef                	cmp    edi,ebp
c001e5de:	0f 87 84 00 00 00    	ja     c001e668 <__udivdi3+0xf8>
c001e5e4:	b8 01 00 00 00       	mov    eax,0x1
c001e5e9:	eb ac                	jmp    c001e597 <__udivdi3+0x27>
c001e5eb:	90                   	nop
c001e5ec:	31 db                	xor    ebx,ebx
c001e5ee:	31 c0                	xor    eax,eax
c001e5f0:	89 da                	mov    edx,ebx
c001e5f2:	83 c4 1c             	add    esp,0x1c
c001e5f5:	5b                   	pop    ebx
c001e5f6:	5e                   	pop    esi
c001e5f7:	5f                   	pop    edi
c001e5f8:	5d                   	pop    ebp
c001e5f9:	c3                   	ret    
c001e5fa:	66 90                	xchg   ax,ax
c001e5fc:	b8 20 00 00 00       	mov    eax,0x20
c001e601:	29 d8                	sub    eax,ebx
c001e603:	88 d9                	mov    cl,bl
c001e605:	d3 e2                	shl    edx,cl
c001e607:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e60b:	89 fa                	mov    edx,edi
c001e60d:	88 c1                	mov    cl,al
c001e60f:	d3 ea                	shr    edx,cl
c001e611:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e615:	09 d1                	or     ecx,edx
c001e617:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e61b:	88 d9                	mov    cl,bl
c001e61d:	d3 e7                	shl    edi,cl
c001e61f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e623:	89 f7                	mov    edi,esi
c001e625:	88 c1                	mov    cl,al
c001e627:	d3 ef                	shr    edi,cl
c001e629:	88 d9                	mov    cl,bl
c001e62b:	d3 e6                	shl    esi,cl
c001e62d:	89 ea                	mov    edx,ebp
c001e62f:	88 c1                	mov    cl,al
c001e631:	d3 ea                	shr    edx,cl
c001e633:	09 d6                	or     esi,edx
c001e635:	89 f0                	mov    eax,esi
c001e637:	89 fa                	mov    edx,edi
c001e639:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e63d:	89 d7                	mov    edi,edx
c001e63f:	89 c6                	mov    esi,eax
c001e641:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e645:	39 d7                	cmp    edi,edx
c001e647:	72 13                	jb     c001e65c <__udivdi3+0xec>
c001e649:	74 09                	je     c001e654 <__udivdi3+0xe4>
c001e64b:	89 f0                	mov    eax,esi
c001e64d:	31 db                	xor    ebx,ebx
c001e64f:	e9 43 ff ff ff       	jmp    c001e597 <__udivdi3+0x27>
c001e654:	88 d9                	mov    cl,bl
c001e656:	d3 e5                	shl    ebp,cl
c001e658:	39 c5                	cmp    ebp,eax
c001e65a:	73 ef                	jae    c001e64b <__udivdi3+0xdb>
c001e65c:	8d 46 ff             	lea    eax,[esi-0x1]
c001e65f:	31 db                	xor    ebx,ebx
c001e661:	e9 31 ff ff ff       	jmp    c001e597 <__udivdi3+0x27>
c001e666:	66 90                	xchg   ax,ax
c001e668:	31 c0                	xor    eax,eax
c001e66a:	e9 28 ff ff ff       	jmp    c001e597 <__udivdi3+0x27>
c001e66f:	90                   	nop

c001e670 <__umoddi3>:
c001e670:	55                   	push   ebp
c001e671:	57                   	push   edi
c001e672:	56                   	push   esi
c001e673:	53                   	push   ebx
c001e674:	83 ec 1c             	sub    esp,0x1c
c001e677:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e67b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e67f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e683:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e687:	89 da                	mov    edx,ebx
c001e689:	85 c0                	test   eax,eax
c001e68b:	75 37                	jne    c001e6c4 <__umoddi3+0x54>
c001e68d:	39 df                	cmp    edi,ebx
c001e68f:	76 13                	jbe    c001e6a4 <__umoddi3+0x34>
c001e691:	89 f0                	mov    eax,esi
c001e693:	f7 f7                	div    edi
c001e695:	89 d0                	mov    eax,edx
c001e697:	31 d2                	xor    edx,edx
c001e699:	83 c4 1c             	add    esp,0x1c
c001e69c:	5b                   	pop    ebx
c001e69d:	5e                   	pop    esi
c001e69e:	5f                   	pop    edi
c001e69f:	5d                   	pop    ebp
c001e6a0:	c3                   	ret    
c001e6a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e6a4:	89 fd                	mov    ebp,edi
c001e6a6:	85 ff                	test   edi,edi
c001e6a8:	75 0b                	jne    c001e6b5 <__umoddi3+0x45>
c001e6aa:	b8 01 00 00 00       	mov    eax,0x1
c001e6af:	31 d2                	xor    edx,edx
c001e6b1:	f7 f7                	div    edi
c001e6b3:	89 c5                	mov    ebp,eax
c001e6b5:	89 d8                	mov    eax,ebx
c001e6b7:	31 d2                	xor    edx,edx
c001e6b9:	f7 f5                	div    ebp
c001e6bb:	89 f0                	mov    eax,esi
c001e6bd:	f7 f5                	div    ebp
c001e6bf:	89 d0                	mov    eax,edx
c001e6c1:	eb d4                	jmp    c001e697 <__umoddi3+0x27>
c001e6c3:	90                   	nop
c001e6c4:	89 f1                	mov    ecx,esi
c001e6c6:	39 d8                	cmp    eax,ebx
c001e6c8:	76 0a                	jbe    c001e6d4 <__umoddi3+0x64>
c001e6ca:	89 f0                	mov    eax,esi
c001e6cc:	83 c4 1c             	add    esp,0x1c
c001e6cf:	5b                   	pop    ebx
c001e6d0:	5e                   	pop    esi
c001e6d1:	5f                   	pop    edi
c001e6d2:	5d                   	pop    ebp
c001e6d3:	c3                   	ret    
c001e6d4:	0f bd e8             	bsr    ebp,eax
c001e6d7:	83 f5 1f             	xor    ebp,0x1f
c001e6da:	75 1c                	jne    c001e6f8 <__umoddi3+0x88>
c001e6dc:	39 d8                	cmp    eax,ebx
c001e6de:	72 04                	jb     c001e6e4 <__umoddi3+0x74>
c001e6e0:	39 f7                	cmp    edi,esi
c001e6e2:	77 08                	ja     c001e6ec <__umoddi3+0x7c>
c001e6e4:	89 da                	mov    edx,ebx
c001e6e6:	29 fe                	sub    esi,edi
c001e6e8:	19 c2                	sbb    edx,eax
c001e6ea:	89 f1                	mov    ecx,esi
c001e6ec:	89 c8                	mov    eax,ecx
c001e6ee:	83 c4 1c             	add    esp,0x1c
c001e6f1:	5b                   	pop    ebx
c001e6f2:	5e                   	pop    esi
c001e6f3:	5f                   	pop    edi
c001e6f4:	5d                   	pop    ebp
c001e6f5:	c3                   	ret    
c001e6f6:	66 90                	xchg   ax,ax
c001e6f8:	ba 20 00 00 00       	mov    edx,0x20
c001e6fd:	29 ea                	sub    edx,ebp
c001e6ff:	89 e9                	mov    ecx,ebp
c001e701:	d3 e0                	shl    eax,cl
c001e703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e707:	89 f8                	mov    eax,edi
c001e709:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e70d:	88 d1                	mov    cl,dl
c001e70f:	d3 e8                	shr    eax,cl
c001e711:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e715:	09 c1                	or     ecx,eax
c001e717:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e71b:	89 e9                	mov    ecx,ebp
c001e71d:	d3 e7                	shl    edi,cl
c001e71f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e723:	89 d8                	mov    eax,ebx
c001e725:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e729:	88 d1                	mov    cl,dl
c001e72b:	d3 e8                	shr    eax,cl
c001e72d:	89 c7                	mov    edi,eax
c001e72f:	89 e9                	mov    ecx,ebp
c001e731:	d3 e3                	shl    ebx,cl
c001e733:	89 f0                	mov    eax,esi
c001e735:	88 d1                	mov    cl,dl
c001e737:	d3 e8                	shr    eax,cl
c001e739:	09 d8                	or     eax,ebx
c001e73b:	89 e9                	mov    ecx,ebp
c001e73d:	d3 e6                	shl    esi,cl
c001e73f:	89 f3                	mov    ebx,esi
c001e741:	89 fa                	mov    edx,edi
c001e743:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e747:	89 d1                	mov    ecx,edx
c001e749:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e74d:	89 c6                	mov    esi,eax
c001e74f:	89 d7                	mov    edi,edx
c001e751:	39 d1                	cmp    ecx,edx
c001e753:	72 27                	jb     c001e77c <__umoddi3+0x10c>
c001e755:	74 21                	je     c001e778 <__umoddi3+0x108>
c001e757:	89 ca                	mov    edx,ecx
c001e759:	29 f3                	sub    ebx,esi
c001e75b:	19 fa                	sbb    edx,edi
c001e75d:	89 d0                	mov    eax,edx
c001e75f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e763:	d3 e0                	shl    eax,cl
c001e765:	89 e9                	mov    ecx,ebp
c001e767:	d3 eb                	shr    ebx,cl
c001e769:	09 d8                	or     eax,ebx
c001e76b:	d3 ea                	shr    edx,cl
c001e76d:	83 c4 1c             	add    esp,0x1c
c001e770:	5b                   	pop    ebx
c001e771:	5e                   	pop    esi
c001e772:	5f                   	pop    edi
c001e773:	5d                   	pop    ebp
c001e774:	c3                   	ret    
c001e775:	8d 76 00             	lea    esi,[esi+0x0]
c001e778:	39 c3                	cmp    ebx,eax
c001e77a:	73 db                	jae    c001e757 <__umoddi3+0xe7>
c001e77c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e780:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e784:	89 d7                	mov    edi,edx
c001e786:	89 c6                	mov    esi,eax
c001e788:	eb cd                	jmp    c001e757 <__umoddi3+0xe7>

Disassembly of section .init:

c001e78a <_init>:
c001e78a:	55                   	push   ebp
c001e78b:	89 e5                	mov    ebp,esp
c001e78d:	e8 62 19 fe ff       	call   c00000f4 <frame_dummy>
c001e792:	e8 e5 fa ff ff       	call   c001e27c <__do_global_ctors_aux>
c001e797:	5d                   	pop    ebp
c001e798:	c3                   	ret    

Disassembly of section .fini:

c001e799 <_fini>:
c001e799:	55                   	push   ebp
c001e79a:	89 e5                	mov    ebp,esp
c001e79c:	e8 e3 18 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e7a1:	5d                   	pop    ebp
c001e7a2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e7a4 <Computer::~Computer()>:
c001e7a4:	83 ec 0c             	sub    esp,0xc
c001e7a7:	ba b4 fa 01 c0       	mov    edx,0xc001fab4
c001e7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7b0:	89 10                	mov    DWORD PTR [eax],edx
c001e7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7b6:	83 ec 0c             	sub    esp,0xc
c001e7b9:	50                   	push   eax
c001e7ba:	e8 49 d4 fe ff       	call   c000bc08 <Device::~Device()>
c001e7bf:	83 c4 10             	add    esp,0x10
c001e7c2:	90                   	nop
c001e7c3:	83 c4 0c             	add    esp,0xc
c001e7c6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e7c8 <Computer::~Computer()>:
c001e7c8:	83 ec 0c             	sub    esp,0xc
c001e7cb:	83 ec 0c             	sub    esp,0xc
c001e7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7d2:	e8 cd ff ff ff       	call   c001e7a4 <Computer::~Computer()>
c001e7d7:	83 c4 10             	add    esp,0x10
c001e7da:	83 ec 08             	sub    esp,0x8
c001e7dd:	68 70 01 00 00       	push   0x170
c001e7e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7e6:	e8 b8 bf fe ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c001e7eb:	83 c4 10             	add    esp,0x10
c001e7ee:	83 c4 0c             	add    esp,0xc
c001e7f1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e7f2 <idleCommon()>:
c001e7f2:	83 ec 0c             	sub    esp,0xc
c001e7f5:	fa                   	cli    
c001e7f6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e7fc:	e8 cf 67 ff ff       	call   c0014fd0 <schedule()>
c001e801:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e806:	48                   	dec    eax
c001e807:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e80c:	75 01                	jne    c001e80f <idleCommon()+0x1d>
c001e80e:	fb                   	sti    
c001e80f:	83 c4 0c             	add    esp,0xc
c001e812:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e814 <LinkedList<UnixFile>::~LinkedList()>:
c001e814:	90                   	nop
c001e815:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e816 <LinkedList<UnixFile>::LinkedList()>:
c001e816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e81a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e824:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e82b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e82f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e83a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e844:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e84b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e84f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e856:	90                   	nop
c001e857:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e858 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e858:	83 ec 0c             	sub    esp,0xc
c001e85b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e860:	75 10                	jne    c001e872 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e862:	83 ec 0c             	sub    esp,0xc
c001e865:	68 c8 fc 01 c0       	push   0xc001fcc8
c001e86a:	e8 98 1f ff ff       	call   c0010807 <KePanic(char const*)>
c001e86f:	83 c4 10             	add    esp,0x10
c001e872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e876:	8b 00                	mov    eax,DWORD PTR [eax]
c001e878:	85 c0                	test   eax,eax
c001e87a:	74 34                	je     c001e8b0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e880:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e883:	85 c0                	test   eax,eax
c001e885:	74 29                	je     c001e8b0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e88b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e88e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e892:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e899:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e89d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8ae:	eb 65                	jmp    c001e915 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8b6:	85 c0                	test   eax,eax
c001e8b8:	75 4b                	jne    c001e905 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8c1:	85 c0                	test   eax,eax
c001e8c3:	75 40                	jne    c001e905 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8cd:	89 10                	mov    DWORD PTR [eax],edx
c001e8cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8e1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e8ef:	85 c0                	test   eax,eax
c001e8f1:	74 22                	je     c001e915 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e8f3:	83 ec 0c             	sub    esp,0xc
c001e8f6:	68 ea fc 01 c0       	push   0xc001fcea
c001e8fb:	e8 07 1f ff ff       	call   c0010807 <KePanic(char const*)>
c001e900:	83 c4 10             	add    esp,0x10
c001e903:	eb 10                	jmp    c001e915 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e905:	83 ec 0c             	sub    esp,0xc
c001e908:	68 f4 fc 01 c0       	push   0xc001fcf4
c001e90d:	e8 f5 1e ff ff       	call   c0010807 <KePanic(char const*)>
c001e912:	83 c4 10             	add    esp,0x10
c001e915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e919:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e91c:	8d 50 01             	lea    edx,[eax+0x1]
c001e91f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e923:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e926:	90                   	nop
c001e927:	83 c4 0c             	add    esp,0xc
c001e92a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e92c <LinkedList<UnixFile>::getFirstElement()>:
c001e92c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e930:	8b 00                	mov    eax,DWORD PTR [eax]
c001e932:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e934 <LinkedList<UnixFile>::removeFirst()>:
c001e934:	83 ec 0c             	sub    esp,0xc
c001e937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e93d:	85 c0                	test   eax,eax
c001e93f:	75 12                	jne    c001e953 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e941:	83 ec 0c             	sub    esp,0xc
c001e944:	68 00 fd 01 c0       	push   0xc001fd00
c001e949:	e8 b9 1e ff ff       	call   c0010807 <KePanic(char const*)>
c001e94e:	83 c4 10             	add    esp,0x10
c001e951:	eb 7e                	jmp    c001e9d1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e957:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e95a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e95d:	85 c0                	test   eax,eax
c001e95f:	74 10                	je     c001e971 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e961:	83 ec 0c             	sub    esp,0xc
c001e964:	68 4b fd 01 c0       	push   0xc001fd4b
c001e969:	e8 99 1e ff ff       	call   c0010807 <KePanic(char const*)>
c001e96e:	83 c4 10             	add    esp,0x10
c001e971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e975:	8b 00                	mov    eax,DWORD PTR [eax]
c001e977:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e97a:	85 c0                	test   eax,eax
c001e97c:	75 33                	jne    c001e9b1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e97e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e982:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e997:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e99a:	83 f8 01             	cmp    eax,0x1
c001e99d:	74 21                	je     c001e9c0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e99f:	83 ec 0c             	sub    esp,0xc
c001e9a2:	68 24 fd 01 c0       	push   0xc001fd24
c001e9a7:	e8 5b 1e ff ff       	call   c0010807 <KePanic(char const*)>
c001e9ac:	83 c4 10             	add    esp,0x10
c001e9af:	eb 0f                	jmp    c001e9c0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e9b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9b7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9be:	89 10                	mov    DWORD PTR [eax],edx
c001e9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9c7:	8d 50 ff             	lea    edx,[eax-0x1]
c001e9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e9d1:	83 c4 0c             	add    esp,0xc
c001e9d4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e9d6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e9d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9dd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e9de <DriverlessDevice::~DriverlessDevice()>:
c001e9de:	ba 9c 03 02 c0       	mov    edx,0xc002039c
c001e9e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9e7:	89 10                	mov    DWORD PTR [eax],edx
c001e9e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9ed:	50                   	push   eax
c001e9ee:	e8 15 d2 fe ff       	call   c000bc08 <Device::~Device()>
c001e9f3:	83 c4 04             	add    esp,0x4
c001e9f6:	90                   	nop
c001e9f7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e9f8 <DriverlessDevice::~DriverlessDevice()>:
c001e9f8:	83 ec 0c             	sub    esp,0xc
c001e9fb:	83 ec 0c             	sub    esp,0xc
c001e9fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea02:	e8 d7 ff ff ff       	call   c001e9de <DriverlessDevice::~DriverlessDevice()>
c001ea07:	83 c4 10             	add    esp,0x10
c001ea0a:	83 ec 08             	sub    esp,0x8
c001ea0d:	68 58 01 00 00       	push   0x158
c001ea12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea16:	e8 88 bd fe ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c001ea1b:	83 c4 10             	add    esp,0x10
c001ea1e:	83 c4 0c             	add    esp,0xc
c001ea21:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ea22 <LinkedList<Device>::addElement(Device*)>:
c001ea22:	83 ec 0c             	sub    esp,0xc
c001ea25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ea2a:	75 10                	jne    c001ea3c <LinkedList<Device>::addElement(Device*)+0x1a>
c001ea2c:	83 ec 0c             	sub    esp,0xc
c001ea2f:	68 c8 fc 01 c0       	push   0xc001fcc8
c001ea34:	e8 ce 1d ff ff       	call   c0010807 <KePanic(char const*)>
c001ea39:	83 c4 10             	add    esp,0x10
c001ea3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea42:	85 c0                	test   eax,eax
c001ea44:	74 3a                	je     c001ea80 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ea46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea4d:	85 c0                	test   eax,eax
c001ea4f:	74 2f                	je     c001ea80 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ea51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea5c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ea62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea6a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ea6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea74:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ea7e:	eb 68                	jmp    c001eae8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ea80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea84:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea86:	85 c0                	test   eax,eax
c001ea88:	75 4e                	jne    c001ead8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ea8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea91:	85 c0                	test   eax,eax
c001ea93:	75 43                	jne    c001ead8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ea95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea9d:	89 10                	mov    DWORD PTR [eax],edx
c001ea9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eaa7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eaaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eab1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eabb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eabf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eac2:	85 c0                	test   eax,eax
c001eac4:	74 22                	je     c001eae8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eac6:	83 ec 0c             	sub    esp,0xc
c001eac9:	68 ea fc 01 c0       	push   0xc001fcea
c001eace:	e8 34 1d ff ff       	call   c0010807 <KePanic(char const*)>
c001ead3:	83 c4 10             	add    esp,0x10
c001ead6:	eb 10                	jmp    c001eae8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ead8:	83 ec 0c             	sub    esp,0xc
c001eadb:	68 f4 fc 01 c0       	push   0xc001fcf4
c001eae0:	e8 22 1d ff ff       	call   c0010807 <KePanic(char const*)>
c001eae5:	83 c4 10             	add    esp,0x10
c001eae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eaef:	8d 50 01             	lea    edx,[eax+0x1]
c001eaf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eaf9:	90                   	nop
c001eafa:	83 c4 0c             	add    esp,0xc
c001eafd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001eafe <LinkedList<Device>::LinkedList()>:
c001eafe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb3e:	90                   	nop
c001eb3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001eb40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001eb40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb44:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb46:	85 c0                	test   eax,eax
c001eb48:	75 0e                	jne    c001eb58 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eb4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb51:	85 c0                	test   eax,eax
c001eb53:	75 03                	jne    c001eb58 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eb55:	b0 01                	mov    al,0x1
c001eb57:	c3                   	ret    
c001eb58:	b0 00                	mov    al,0x0
c001eb5a:	90                   	nop
c001eb5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001eb5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001eb5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb60:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001eb64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001eb64:	83 ec 0c             	sub    esp,0xc
c001eb67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb6d:	85 c0                	test   eax,eax
c001eb6f:	75 17                	jne    c001eb88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001eb71:	83 ec 0c             	sub    esp,0xc
c001eb74:	68 00 fd 01 c0       	push   0xc001fd00
c001eb79:	e8 89 1c ff ff       	call   c0010807 <KePanic(char const*)>
c001eb7e:	83 c4 10             	add    esp,0x10
c001eb81:	e9 96 00 00 00       	jmp    c001ec1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001eb86:	66 90                	xchg   ax,ax
c001eb88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb8f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eb92:	85 c0                	test   eax,eax
c001eb94:	0f 95 c0             	setne  al
c001eb97:	0f b6 c0             	movzx  eax,al
c001eb9a:	85 c0                	test   eax,eax
c001eb9c:	74 12                	je     c001ebb0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001eb9e:	83 ec 0c             	sub    esp,0xc
c001eba1:	68 4b fd 01 c0       	push   0xc001fd4b
c001eba6:	e8 5c 1c ff ff       	call   c0010807 <KePanic(char const*)>
c001ebab:	83 c4 10             	add    esp,0x10
c001ebae:	66 90                	xchg   ax,ax
c001ebb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebb6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebb9:	85 c0                	test   eax,eax
c001ebbb:	0f 94 c0             	sete   al
c001ebbe:	0f b6 c0             	movzx  eax,al
c001ebc1:	85 c0                	test   eax,eax
c001ebc3:	74 33                	je     c001ebf8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ebc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebde:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ebe1:	83 f8 01             	cmp    eax,0x1
c001ebe4:	74 22                	je     c001ec08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ebe6:	83 ec 0c             	sub    esp,0xc
c001ebe9:	68 24 fd 01 c0       	push   0xc001fd24
c001ebee:	e8 14 1c ff ff       	call   c0010807 <KePanic(char const*)>
c001ebf3:	83 c4 10             	add    esp,0x10
c001ebf6:	eb 10                	jmp    c001ec08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ebf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebfc:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebfe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ec01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec05:	89 10                	mov    DWORD PTR [eax],edx
c001ec07:	90                   	nop
c001ec08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec0f:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec16:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec19:	8d 76 00             	lea    esi,[esi+0x0]
c001ec1c:	83 c4 0c             	add    esp,0xc
c001ec1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ec20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ec20:	83 ec 0c             	sub    esp,0xc
c001ec23:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ec28:	75 12                	jne    c001ec3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ec2a:	83 ec 0c             	sub    esp,0xc
c001ec2d:	68 c8 fc 01 c0       	push   0xc001fcc8
c001ec32:	e8 d0 1b ff ff       	call   c0010807 <KePanic(char const*)>
c001ec37:	83 c4 10             	add    esp,0x10
c001ec3a:	66 90                	xchg   ax,ax
c001ec3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec42:	85 c0                	test   eax,eax
c001ec44:	74 36                	je     c001ec7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ec46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec4d:	85 c0                	test   eax,eax
c001ec4f:	74 2b                	je     c001ec7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ec51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec5c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ec5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ec6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec71:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ec78:	eb 6a                	jmp    c001ece4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ec7a:	66 90                	xchg   ax,ax
c001ec7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec82:	85 c0                	test   eax,eax
c001ec84:	75 4e                	jne    c001ecd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ec86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec8d:	85 c0                	test   eax,eax
c001ec8f:	75 43                	jne    c001ecd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ec91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec99:	89 10                	mov    DWORD PTR [eax],edx
c001ec9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eca3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ecb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecbb:	85 c0                	test   eax,eax
c001ecbd:	74 25                	je     c001ece4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ecbf:	83 ec 0c             	sub    esp,0xc
c001ecc2:	68 ea fc 01 c0       	push   0xc001fcea
c001ecc7:	e8 3b 1b ff ff       	call   c0010807 <KePanic(char const*)>
c001eccc:	83 c4 10             	add    esp,0x10
c001eccf:	eb 13                	jmp    c001ece4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ecd1:	8d 76 00             	lea    esi,[esi+0x0]
c001ecd4:	83 ec 0c             	sub    esp,0xc
c001ecd7:	68 f4 fc 01 c0       	push   0xc001fcf4
c001ecdc:	e8 26 1b ff ff       	call   c0010807 <KePanic(char const*)>
c001ece1:	83 c4 10             	add    esp,0x10
c001ece4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eceb:	8d 50 01             	lea    edx,[eax+0x1]
c001ecee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ecf5:	90                   	nop
c001ecf6:	83 c4 0c             	add    esp,0xc
c001ecf9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ecfc <ACPI::~ACPI()>:
c001ecfc:	83 ec 0c             	sub    esp,0xc
c001ecff:	ba 68 09 02 c0       	mov    edx,0xc0020968
c001ed04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed08:	89 10                	mov    DWORD PTR [eax],edx
c001ed0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0e:	83 ec 0c             	sub    esp,0xc
c001ed11:	50                   	push   eax
c001ed12:	e8 f1 ce fe ff       	call   c000bc08 <Device::~Device()>
c001ed17:	83 c4 10             	add    esp,0x10
c001ed1a:	90                   	nop
c001ed1b:	83 c4 0c             	add    esp,0xc
c001ed1e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ed20 <ACPI::~ACPI()>:
c001ed20:	83 ec 0c             	sub    esp,0xc
c001ed23:	83 ec 0c             	sub    esp,0xc
c001ed26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed2a:	e8 cd ff ff ff       	call   c001ecfc <ACPI::~ACPI()>
c001ed2f:	83 c4 10             	add    esp,0x10
c001ed32:	83 ec 08             	sub    esp,0x8
c001ed35:	68 64 12 00 00       	push   0x1264
c001ed3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed3e:	e8 60 ba fe ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c001ed43:	83 c4 10             	add    esp,0x10
c001ed46:	83 c4 0c             	add    esp,0xc
c001ed49:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ed4c <LinkedList<Device>::~LinkedList()>:
c001ed4c:	90                   	nop
c001ed4d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ed50 <LinkedList<Device>::isEmpty()>:
c001ed50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed54:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed56:	85 c0                	test   eax,eax
c001ed58:	75 0e                	jne    c001ed68 <LinkedList<Device>::isEmpty()+0x18>
c001ed5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed61:	85 c0                	test   eax,eax
c001ed63:	75 03                	jne    c001ed68 <LinkedList<Device>::isEmpty()+0x18>
c001ed65:	b0 01                	mov    al,0x1
c001ed67:	c3                   	ret    
c001ed68:	b0 00                	mov    al,0x0
c001ed6a:	90                   	nop
c001ed6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ed6c <LinkedList<Device>::getFirstElement()>:
c001ed6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed70:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ed74 <LinkedList<Device>::removeFirst()>:
c001ed74:	83 ec 0c             	sub    esp,0xc
c001ed77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed7d:	85 c0                	test   eax,eax
c001ed7f:	75 17                	jne    c001ed98 <LinkedList<Device>::removeFirst()+0x24>
c001ed81:	83 ec 0c             	sub    esp,0xc
c001ed84:	68 00 fd 01 c0       	push   0xc001fd00
c001ed89:	e8 79 1a ff ff       	call   c0010807 <KePanic(char const*)>
c001ed8e:	83 c4 10             	add    esp,0x10
c001ed91:	e9 92 00 00 00       	jmp    c001ee28 <LinkedList<Device>::removeFirst()+0xb4>
c001ed96:	66 90                	xchg   ax,ax
c001ed98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed9f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001eda5:	85 c0                	test   eax,eax
c001eda7:	74 13                	je     c001edbc <LinkedList<Device>::removeFirst()+0x48>
c001eda9:	83 ec 0c             	sub    esp,0xc
c001edac:	68 4b fd 01 c0       	push   0xc001fd4b
c001edb1:	e8 51 1a ff ff       	call   c0010807 <KePanic(char const*)>
c001edb6:	83 c4 10             	add    esp,0x10
c001edb9:	8d 76 00             	lea    esi,[esi+0x0]
c001edbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001edc2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001edc8:	85 c0                	test   eax,eax
c001edca:	75 34                	jne    c001ee00 <LinkedList<Device>::removeFirst()+0x8c>
c001edcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001edd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edda:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ede1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ede8:	83 f8 01             	cmp    eax,0x1
c001edeb:	74 27                	je     c001ee14 <LinkedList<Device>::removeFirst()+0xa0>
c001eded:	83 ec 0c             	sub    esp,0xc
c001edf0:	68 24 fd 01 c0       	push   0xc001fd24
c001edf5:	e8 0d 1a ff ff       	call   c0010807 <KePanic(char const*)>
c001edfa:	83 c4 10             	add    esp,0x10
c001edfd:	eb 15                	jmp    c001ee14 <LinkedList<Device>::removeFirst()+0xa0>
c001edff:	90                   	nop
c001ee00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee04:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee06:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ee0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee10:	89 10                	mov    DWORD PTR [eax],edx
c001ee12:	66 90                	xchg   ax,ax
c001ee14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee1b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ee1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee22:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee25:	8d 76 00             	lea    esi,[esi+0x0]
c001ee28:	83 c4 0c             	add    esp,0xc
c001ee2b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ee2c <CPU::~CPU()>:
c001ee2c:	83 ec 0c             	sub    esp,0xc
c001ee2f:	ba 04 0b 02 c0       	mov    edx,0xc0020b04
c001ee34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee38:	89 10                	mov    DWORD PTR [eax],edx
c001ee3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee3e:	83 ec 0c             	sub    esp,0xc
c001ee41:	50                   	push   eax
c001ee42:	e8 c1 cd fe ff       	call   c000bc08 <Device::~Device()>
c001ee47:	83 c4 10             	add    esp,0x10
c001ee4a:	90                   	nop
c001ee4b:	83 c4 0c             	add    esp,0xc
c001ee4e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ee50 <CPU::~CPU()>:
c001ee50:	83 ec 0c             	sub    esp,0xc
c001ee53:	83 ec 0c             	sub    esp,0xc
c001ee56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee5a:	e8 cd ff ff ff       	call   c001ee2c <CPU::~CPU()>
c001ee5f:	83 c4 10             	add    esp,0x10
c001ee62:	83 ec 08             	sub    esp,0x8
c001ee65:	68 94 11 00 00       	push   0x1194
c001ee6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee6e:	e8 30 b9 fe ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c001ee73:	83 c4 10             	add    esp,0x10
c001ee76:	83 c4 0c             	add    esp,0xc
c001ee79:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ee7c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ee7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee80:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ee83:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ee84 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ee84:	90                   	nop
c001ee85:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ee88 <ThreadControlBlock::ThreadControlBlock()>:
c001ee88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee8c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ee93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee97:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ee9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eea2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001eea9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eead:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001eeb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eeb8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001eebf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eec3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001eec7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eecb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001eecf:	90                   	nop
c001eed0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001eed4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001eed4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eed8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eede:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eee2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eee9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eeed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eef8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eefe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef02:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef0d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef14:	90                   	nop
c001ef15:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ef16 <PCI::~PCI()>:
c001ef16:	83 ec 0c             	sub    esp,0xc
c001ef19:	ba 68 19 02 c0       	mov    edx,0xc0021968
c001ef1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef22:	89 10                	mov    DWORD PTR [eax],edx
c001ef24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef28:	83 ec 0c             	sub    esp,0xc
c001ef2b:	50                   	push   eax
c001ef2c:	e8 67 c7 fe ff       	call   c000b698 <Bus::~Bus()>
c001ef31:	83 c4 10             	add    esp,0x10
c001ef34:	90                   	nop
c001ef35:	83 c4 0c             	add    esp,0xc
c001ef38:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ef3a <PCI::~PCI()>:
c001ef3a:	83 ec 0c             	sub    esp,0xc
c001ef3d:	83 ec 0c             	sub    esp,0xc
c001ef40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef44:	e8 cd ff ff ff       	call   c001ef16 <PCI::~PCI()>
c001ef49:	83 c4 10             	add    esp,0x10
c001ef4c:	83 ec 08             	sub    esp,0x8
c001ef4f:	68 5c 01 00 00       	push   0x15c
c001ef54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef58:	e8 46 b8 fe ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c001ef5d:	83 c4 10             	add    esp,0x10
c001ef60:	83 c4 0c             	add    esp,0xc
c001ef63:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ef64 <IDE::~IDE()>:
c001ef64:	83 ec 0c             	sub    esp,0xc
c001ef67:	ba 1c 1a 02 c0       	mov    edx,0xc0021a1c
c001ef6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef70:	89 10                	mov    DWORD PTR [eax],edx
c001ef72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef76:	83 ec 0c             	sub    esp,0xc
c001ef79:	50                   	push   eax
c001ef7a:	e8 01 d1 fe ff       	call   c000c080 <HardDiskController::~HardDiskController()>
c001ef7f:	83 c4 10             	add    esp,0x10
c001ef82:	90                   	nop
c001ef83:	83 c4 0c             	add    esp,0xc
c001ef86:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ef88 <IDE::~IDE()>:
c001ef88:	83 ec 0c             	sub    esp,0xc
c001ef8b:	83 ec 0c             	sub    esp,0xc
c001ef8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef92:	e8 cd ff ff ff       	call   c001ef64 <IDE::~IDE()>
c001ef97:	83 c4 10             	add    esp,0x10
c001ef9a:	83 ec 08             	sub    esp,0x8
c001ef9d:	68 70 02 00 00       	push   0x270
c001efa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efa6:	e8 f8 b7 fe ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c001efab:	83 c4 10             	add    esp,0x10
c001efae:	83 c4 0c             	add    esp,0xc
c001efb1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001efb2 <SATABus::~SATABus()>:
c001efb2:	83 ec 0c             	sub    esp,0xc
c001efb5:	ba 6c 1a 02 c0       	mov    edx,0xc0021a6c
c001efba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efbe:	89 10                	mov    DWORD PTR [eax],edx
c001efc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc4:	83 ec 0c             	sub    esp,0xc
c001efc7:	50                   	push   eax
c001efc8:	e8 b3 d0 fe ff       	call   c000c080 <HardDiskController::~HardDiskController()>
c001efcd:	83 c4 10             	add    esp,0x10
c001efd0:	90                   	nop
c001efd1:	83 c4 0c             	add    esp,0xc
c001efd4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001efd6 <SATABus::~SATABus()>:
c001efd6:	83 ec 0c             	sub    esp,0xc
c001efd9:	83 ec 0c             	sub    esp,0xc
c001efdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efe0:	e8 cd ff ff ff       	call   c001efb2 <SATABus::~SATABus()>
c001efe5:	83 c4 10             	add    esp,0x10
c001efe8:	83 ec 08             	sub    esp,0x8
c001efeb:	68 64 01 00 00       	push   0x164
c001eff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff4:	e8 aa b7 fe ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c001eff9:	83 c4 10             	add    esp,0x10
c001effc:	83 c4 0c             	add    esp,0xc
c001efff:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f000 <ATA::~ATA()>:
c001f000:	83 ec 0c             	sub    esp,0xc
c001f003:	ba ac 1a 02 c0       	mov    edx,0xc0021aac
c001f008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00c:	89 10                	mov    DWORD PTR [eax],edx
c001f00e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f012:	83 ec 0c             	sub    esp,0xc
c001f015:	50                   	push   eax
c001f016:	e8 47 d1 fe ff       	call   c000c162 <PhysicalDisk::~PhysicalDisk()>
c001f01b:	83 c4 10             	add    esp,0x10
c001f01e:	90                   	nop
c001f01f:	83 c4 0c             	add    esp,0xc
c001f022:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f024 <ATA::~ATA()>:
c001f024:	83 ec 0c             	sub    esp,0xc
c001f027:	83 ec 0c             	sub    esp,0xc
c001f02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f02e:	e8 cd ff ff ff       	call   c001f000 <ATA::~ATA()>
c001f033:	83 c4 10             	add    esp,0x10
c001f036:	83 ec 08             	sub    esp,0x8
c001f039:	68 7c 01 00 00       	push   0x17c
c001f03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f042:	e8 5c b7 fe ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c001f047:	83 c4 10             	add    esp,0x10
c001f04a:	83 c4 0c             	add    esp,0xc
c001f04d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f04e <ATAPI::~ATAPI()>:
c001f04e:	83 ec 0c             	sub    esp,0xc
c001f051:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c001f056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f05a:	89 10                	mov    DWORD PTR [eax],edx
c001f05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f060:	83 ec 0c             	sub    esp,0xc
c001f063:	50                   	push   eax
c001f064:	e8 f9 d0 fe ff       	call   c000c162 <PhysicalDisk::~PhysicalDisk()>
c001f069:	83 c4 10             	add    esp,0x10
c001f06c:	90                   	nop
c001f06d:	83 c4 0c             	add    esp,0xc
c001f070:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f072 <ATAPI::~ATAPI()>:
c001f072:	83 ec 0c             	sub    esp,0xc
c001f075:	83 ec 0c             	sub    esp,0xc
c001f078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f07c:	e8 cd ff ff ff       	call   c001f04e <ATAPI::~ATAPI()>
c001f081:	83 c4 10             	add    esp,0x10
c001f084:	83 ec 08             	sub    esp,0x8
c001f087:	68 84 01 00 00       	push   0x184
c001f08c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f090:	e8 0e b7 fe ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c001f095:	83 c4 10             	add    esp,0x10
c001f098:	83 c4 0c             	add    esp,0xc
c001f09b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f09c <SATA::~SATA()>:
c001f09c:	83 ec 0c             	sub    esp,0xc
c001f09f:	ba a8 1b 02 c0       	mov    edx,0xc0021ba8
c001f0a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a8:	89 10                	mov    DWORD PTR [eax],edx
c001f0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ae:	83 ec 0c             	sub    esp,0xc
c001f0b1:	50                   	push   eax
c001f0b2:	e8 ab d0 fe ff       	call   c000c162 <PhysicalDisk::~PhysicalDisk()>
c001f0b7:	83 c4 10             	add    esp,0x10
c001f0ba:	90                   	nop
c001f0bb:	83 c4 0c             	add    esp,0xc
c001f0be:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f0c0 <SATA::~SATA()>:
c001f0c0:	83 ec 0c             	sub    esp,0xc
c001f0c3:	83 ec 0c             	sub    esp,0xc
c001f0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0ca:	e8 cd ff ff ff       	call   c001f09c <SATA::~SATA()>
c001f0cf:	83 c4 10             	add    esp,0x10
c001f0d2:	83 ec 08             	sub    esp,0x8
c001f0d5:	68 7c 01 00 00       	push   0x17c
c001f0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0de:	e8 c0 b6 fe ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c001f0e3:	83 c4 10             	add    esp,0x10
c001f0e6:	83 c4 0c             	add    esp,0xc
c001f0e9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f0ea <SATAPI::~SATAPI()>:
c001f0ea:	83 ec 0c             	sub    esp,0xc
c001f0ed:	ba cc 1c 02 c0       	mov    edx,0xc0021ccc
c001f0f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f6:	89 10                	mov    DWORD PTR [eax],edx
c001f0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0fc:	83 ec 0c             	sub    esp,0xc
c001f0ff:	50                   	push   eax
c001f100:	e8 5d d0 fe ff       	call   c000c162 <PhysicalDisk::~PhysicalDisk()>
c001f105:	83 c4 10             	add    esp,0x10
c001f108:	90                   	nop
c001f109:	83 c4 0c             	add    esp,0xc
c001f10c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f10e <SATAPI::~SATAPI()>:
c001f10e:	83 ec 0c             	sub    esp,0xc
c001f111:	83 ec 0c             	sub    esp,0xc
c001f114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f118:	e8 cd ff ff ff       	call   c001f0ea <SATAPI::~SATAPI()>
c001f11d:	83 c4 10             	add    esp,0x10
c001f120:	83 ec 08             	sub    esp,0x8
c001f123:	68 84 01 00 00       	push   0x184
c001f128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f12c:	e8 72 b6 fe ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c001f131:	83 c4 10             	add    esp,0x10
c001f134:	83 c4 0c             	add    esp,0xc
c001f137:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f138 <IOAPIC::~IOAPIC()>:
c001f138:	83 ec 0c             	sub    esp,0xc
c001f13b:	ba 0c 1d 02 c0       	mov    edx,0xc0021d0c
c001f140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f144:	89 10                	mov    DWORD PTR [eax],edx
c001f146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f14a:	83 ec 0c             	sub    esp,0xc
c001f14d:	50                   	push   eax
c001f14e:	e8 b5 ca fe ff       	call   c000bc08 <Device::~Device()>
c001f153:	83 c4 10             	add    esp,0x10
c001f156:	90                   	nop
c001f157:	83 c4 0c             	add    esp,0xc
c001f15a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f15c <IOAPIC::~IOAPIC()>:
c001f15c:	83 ec 0c             	sub    esp,0xc
c001f15f:	83 ec 0c             	sub    esp,0xc
c001f162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f166:	e8 cd ff ff ff       	call   c001f138 <IOAPIC::~IOAPIC()>
c001f16b:	83 c4 10             	add    esp,0x10
c001f16e:	83 ec 08             	sub    esp,0x8
c001f171:	68 68 01 00 00       	push   0x168
c001f176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f17a:	e8 24 b6 fe ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c001f17f:	83 c4 10             	add    esp,0x10
c001f182:	83 c4 0c             	add    esp,0xc
c001f185:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f188 <APICTimer::~APICTimer()>:
c001f188:	83 ec 0c             	sub    esp,0xc
c001f18b:	ba 54 1d 02 c0       	mov    edx,0xc0021d54
c001f190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f194:	89 10                	mov    DWORD PTR [eax],edx
c001f196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f19a:	83 ec 0c             	sub    esp,0xc
c001f19d:	50                   	push   eax
c001f19e:	e8 39 e5 fe ff       	call   c000d6dc <Timer::~Timer()>
c001f1a3:	83 c4 10             	add    esp,0x10
c001f1a6:	90                   	nop
c001f1a7:	83 c4 0c             	add    esp,0xc
c001f1aa:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f1ac <APICTimer::~APICTimer()>:
c001f1ac:	83 ec 0c             	sub    esp,0xc
c001f1af:	83 ec 0c             	sub    esp,0xc
c001f1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1b6:	e8 cd ff ff ff       	call   c001f188 <APICTimer::~APICTimer()>
c001f1bb:	83 c4 10             	add    esp,0x10
c001f1be:	83 ec 08             	sub    esp,0x8
c001f1c1:	68 60 01 00 00       	push   0x160
c001f1c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ca:	e8 d4 b5 fe ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c001f1cf:	83 c4 10             	add    esp,0x10
c001f1d2:	83 c4 0c             	add    esp,0xc
c001f1d5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f1d8 <PIT::~PIT()>:
c001f1d8:	83 ec 0c             	sub    esp,0xc
c001f1db:	ba a4 1d 02 c0       	mov    edx,0xc0021da4
c001f1e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1e4:	89 10                	mov    DWORD PTR [eax],edx
c001f1e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ea:	83 ec 0c             	sub    esp,0xc
c001f1ed:	50                   	push   eax
c001f1ee:	e8 e9 e4 fe ff       	call   c000d6dc <Timer::~Timer()>
c001f1f3:	83 c4 10             	add    esp,0x10
c001f1f6:	90                   	nop
c001f1f7:	83 c4 0c             	add    esp,0xc
c001f1fa:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f1fc <PIT::~PIT()>:
c001f1fc:	83 ec 0c             	sub    esp,0xc
c001f1ff:	83 ec 0c             	sub    esp,0xc
c001f202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f206:	e8 cd ff ff ff       	call   c001f1d8 <PIT::~PIT()>
c001f20b:	83 c4 10             	add    esp,0x10
c001f20e:	83 ec 08             	sub    esp,0x8
c001f211:	68 5c 01 00 00       	push   0x15c
c001f216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f21a:	e8 84 b5 fe ff       	call   c000a7a3 <operator delete(void*, unsigned long)>
c001f21f:	83 c4 10             	add    esp,0x10
c001f222:	83 c4 0c             	add    esp,0xc
c001f225:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be f5 0b 02 c0       	mov    esi,0xc0020bf5
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 11 0c 02 c0       	mov    esi,0xc0020c11
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
