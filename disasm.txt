
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f 78 00 00       	call   c000785f <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 58 f6 01 c0       	mov    eax,0xc001f658
c0000025:	3d 58 f6 01 c0       	cmp    eax,0xc001f658
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 58 f6 01 c0       	push   0xc001f658
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 58 f6 01 c0       	mov    eax,0xc001f658
c0000051:	2d 58 f6 01 c0       	sub    eax,0xc001f658
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 58 f6 01 c0       	push   0xc001f658
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d 80 f8 01 c0 00 	cmp    BYTE PTR ds:0xc001f880,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 08 cb 01 c0       	mov    ebx,0xc001cb08
c0000097:	81 eb 04 cb 01 c0    	sub    ebx,0xc001cb04
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 04 cb 01 c0       	mov    esi,0xc001cb04
c00000a6:	a1 84 f8 01 c0       	mov    eax,ds:0xc001f884
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 84 f8 01 c0       	mov    ds:0xc001f884,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 84 f8 01 c0       	mov    eax,ds:0xc001f884
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 58 f6 01 c0       	push   0xc001f658
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 80 f8 01 c0 01 	mov    BYTE PTR ds:0xc001f880,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 88 f8 01 c0       	push   0xc001f888
c0000108:	68 58 f6 01 c0       	push   0xc001f658
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 e0 2a 01 00       	call   c0012d90 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 d8 9f 00 00       	call   c000a2a0 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 be 2a 01 00       	call   c0012d90 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 8f 2f 01 00       	call   c0013280 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 de 35 01 00       	call   c00138d8 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 80 06 02 c0 	lgdtd  ds:0xc0020680
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 6c fd 00 00       	jmp    c00100ee <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 a0 f8 01 c0       	mov    ds:0xc001f8a0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 a0 f8 01 c0    	mov    DWORD PTR ds:0xc001f8a0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d a0 f8 01 c0    	mov    ebx,DWORD PTR ds:0xc001f8a0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 20 cb 01 c0 02 	test   BYTE PTR [edx-0x3ffe34e0],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 20 cb 01 c0 01 	test   BYTE PTR [edx-0x3ffe34e0],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 20 cb 01 c0 08 	test   BYTE PTR [edx-0x3ffe34e0],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 20 cb 01 c0 04 	test   BYTE PTR [ebx-0x3ffe34e0],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 20 cb 01 c0 01 	test   BYTE PTR [edx-0x3ffe34e0],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d c0 f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f8c0
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d c0 f8 01 c0    	mov    DWORD PTR ds:0xc001f8c0,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 c4 f8 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe073c]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 c4 f8 01 c0 	mov    DWORD PTR [eax*4-0x3ffe073c],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d c0 f8 01 c0    	mov    DWORD PTR ds:0xc001f8c0,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 ec f8 01 c0    	cmp    DWORD PTR ds:0xc001f8ec,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d fc f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f8fc
c0000d3d:	c7 42 0c f4 f8 01 c0 	mov    DWORD PTR [edx+0xc],0xc001f8f4
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 fc f8 01 c0    	mov    DWORD PTR ds:0xc001f8fc,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 ec f8 01 c0    	mov    DWORD PTR ds:0xc001f8ec,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 c0 f8 01 c0 02 	test   BYTE PTR ds:0xc001f8c0,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 c0 f8 01 c0       	mov    eax,0xc001f8c0
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 be 68 00 00       	call   c00076dc <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 00 68 00 00       	call   c00076dc <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 ea 67 00 00       	call   c00076dc <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 c6 67 00 00       	call   c00076dc <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d c0 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f8c0
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 c0 f8 01 c0       	mov    eax,0xc001f8c0
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 c4 f8 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe073c]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 c4 f8 01 c0 	mov    DWORD PTR [edx*4-0x3ffe073c],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 f4 f8 01 c0 	lea    edx,[eax*8-0x3ffe070c]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 c0 f8 01 c0       	mov    eax,0xc001f8c0
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 00 f9 01 c0    	mov    ebx,DWORD PTR ds:0xc001f900
c00010bf:	81 fb f4 f8 01 c0    	cmp    ebx,0xc001f8f4
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d f4 f8 01 c0       	cmp    eax,0xc001f8f4
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d f0 f8 01 c0    	cmp    DWORD PTR ds:0xc001f8f0,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 fc f8 01 c0       	mov    ds:0xc001f8fc,eax
c00010fb:	a3 00 f9 01 c0       	mov    ds:0xc001f900,eax
c0001100:	a3 f0 f8 01 c0       	mov    ds:0xc001f8f0,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 f4 f8 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f8f4
c000110e:	c7 40 0c f4 f8 01 c0 	mov    DWORD PTR [eax+0xc],0xc001f8f4
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 00 f9 01 c0       	mov    ds:0xc001f900,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 f4 f8 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f8f4
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 b8 f8 01 c0 	lea    ebp,[edx*4-0x3ffe0748]
c000115f:	8b 14 95 c0 f8 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0740]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 c0 f8 01 c0 	lea    ecx,[edx*4-0x3ffe0740]
c000117a:	8b 14 95 c0 f8 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0740]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd f4 fb 01 c0 	or     DWORD PTR [edi*4-0x3ffe040c],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 f4 f8 01 c0 	lea    eax,[eax*8-0x3ffe070c]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d fc f8 01 c0    	mov    DWORD PTR ds:0xc001f8fc,ecx
c0001234:	89 0d 00 f9 01 c0    	mov    DWORD PTR ds:0xc001f900,ecx
c000123a:	c7 41 08 f4 f8 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001f8f4
c0001241:	c7 41 0c f4 f8 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001f8f4
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd ec f8 01 c0 	lea    edx,[ecx*8-0x3ffe0714]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d f4 fb 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe040c]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d f4 fb 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe040c]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 ec f8 01 c0 	lea    edx,[eax*4-0x3ffe0714]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d f4 fb 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe040c],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d fc f8 01 c0    	mov    DWORD PTR ds:0xc001f8fc,edi
c0001307:	89 3d 00 f9 01 c0    	mov    DWORD PTR ds:0xc001f900,edi
c000130d:	c7 47 08 f4 f8 01 c0 	mov    DWORD PTR [edi+0x8],0xc001f8f4
c0001314:	c7 47 0c f4 f8 01 c0 	mov    DWORD PTR [edi+0xc],0xc001f8f4
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d f0 f8 01 c0    	mov    DWORD PTR ds:0xc001f8f0,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 ec f8 01 c0       	mov    eax,ds:0xc001f8ec
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d ec f8 01 c0    	mov    DWORD PTR ds:0xc001f8ec,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba c0 f8 01 c0       	mov    edx,0xc001f8c0
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d c0 f8 01 c0 00 	cmp    DWORD PTR ds:0xc001f8c0,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 c0 f8 01 c0       	mov    eax,0xc001f8c0
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 14 fc 01 c0    	mov    ebx,DWORD PTR ds:0xc001fc14
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 14 fc 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fc14,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 14 fc 01 c0    	mov    DWORD PTR ds:0xc001fc14,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 ec f8 01 c0    	cmp    DWORD PTR ds:0xc001f8ec,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d ec f8 01 c0    	mov    DWORD PTR ds:0xc001f8ec,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d c0 f8 01 c0 00 	cmp    DWORD PTR ds:0xc001f8c0,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 c0 f8 01 c0       	mov    eax,0xc001f8c0
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 1c fc 01 c0    	push   DWORD PTR ds:0xc001fc1c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d c0 f8 01 c0 00 	cmp    DWORD PTR ds:0xc001f8c0,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 c0 f8 01 c0       	mov    eax,0xc001f8c0
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 1c fc 01 c0       	mov    eax,ds:0xc001fc1c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 c0 f8 01 c0       	mov    eax,0xc001f8c0
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d ec f8 01 c0 00 	cmp    DWORD PTR ds:0xc001f8ec,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 c0 f8 01 c0       	mov    eax,0xc001f8c0
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 ec f8 01 c0       	mov    eax,ds:0xc001f8ec
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 c4 f8 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe073c]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 f4 f8 01 c0       	mov    eax,0xc001f8f4
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d ec fb 01 c0       	cmp    eax,0xc001fbec
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 28 fc 01 c0       	mov    eax,ds:0xc001fc28
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 10 fc 01 c0    	mov    esi,DWORD PTR ds:0xc001fc10
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 24 fc 01 c0    	mov    esi,DWORD PTR ds:0xc001fc24
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 34 fc 01 c0    	mov    esi,DWORD PTR ds:0xc001fc34
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 c0 f8 01 c0       	mov    eax,0xc001f8c0
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 24 cc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe33dc]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 c0 f8 01 c0       	mov    eax,ds:0xc001f8c0
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 c0 f8 01 c0       	mov    ds:0xc001f8c0,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 04 fc 01 c0    	mov    DWORD PTR ds:0xc001fc04,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 08 fc 01 c0    	mov    DWORD PTR ds:0xc001fc08,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 0c fc 01 c0    	mov    DWORD PTR ds:0xc001fc0c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 14 fc 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fc14,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 80 3c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc380]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 7e 4f 01 00       	jmp    c0016c68 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 80 3c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc380]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 ac 4f 01 00       	jmp    c0016cac <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 80 3c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc380]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 d1 4f 01 00       	jmp    c0016cf0 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 80 cd 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe3280]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 80 cd 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe3280]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 14 ec 01 c0       	mov    edx,0xc001ec14
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba 3c cc 01 c0       	mov    edx,0xc001cc3c
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 60 fc 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe03a0]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 40 fc 01 c0    	mov    ax,ds:0xc001fc40
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 40 fc 01 c0    	mov    ds:0xc001fc40,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 42 cc 01 c0       	mov    eax,0xc001cc42
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad 00 cd 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3300]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 4b cc 01 c0       	mov    eax,0xc001cc4b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 80 cd 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe3280]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 60 fc 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe03a0]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 60 fc 01 c0 	mov    DWORD PTR [edx*4-0x3ffe03a0],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 d0 cc 01 c0       	mov    eax,0xc001ccd0
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 60 fc 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe03a0]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb c0 cc 01 c0       	mov    ebx,0xc001ccc0
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba a0 cc 01 c0       	mov    edx,0xc001cca0
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba b0 cc 01 c0       	mov    edx,0xc001ccb0
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 52 cc 01 c0       	mov    edx,0xc001cc52
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 5e cc 01 c0       	mov    edx,0xc001cc5e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 72 cc 01 c0       	mov    edx,0xc001cc72
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 8a 1d 00 00       	call   c0007805 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 82 1d 00 00       	call   c0007815 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c a0 d0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d0a0
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 a0 d0 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d0a0
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 a0 ce 01 c0       	mov    eax,0xc001cea0
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 e0 cd 01 c0       	mov    eax,0xc001cde0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 a0 cd 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe3260]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 e0 f7 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0820]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 40 f8 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe07c0]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 90 fd 01 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffe0270],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 20 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f820
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 c5 15 01 00       	call   c0017544 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 40 f8 01 c0       	mov    eax,0xc001f840
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 e0 f7 01 c0       	mov    eax,0xc001f7e0
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d 74 06 02 c0 00 	cmp    DWORD PTR ds:0xc0020674,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 40 f8 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe07c0]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 74 06 02 c0    	mov    esi,DWORD PTR ds:0xc0020674
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 a0 d1 01 c0       	push   0xc001d1a0
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 40 06 02 c0       	mov    ecx,0xc0020640
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 00 fd 01 c0 00 	cmp    DWORD PTR [edi-0x3ffe0300],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 00 fd 01 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffe0300],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 04 fd 01 c0    	mov    DWORD PTR [edi-0x3ffe02fc],esi
c000634e:	89 87 00 fd 01 c0    	mov    DWORD PTR [edi-0x3ffe0300],eax
c0006354:	c7 87 08 fd 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe02f8],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 90 fd 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe0270],0x0
c0006370:	89 87 0c fd 01 c0    	mov    DWORD PTR [edi-0x3ffe02f4],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 00 fd 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0300],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 00 fd 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe0300],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 90 fd 01 c0    	mov    edx,DWORD PTR [ebp-0x3ffe0270]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 08 fd 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe02f8]
c00063e9:	8b 8d 0c fd 01 c0    	mov    ecx,DWORD PTR [ebp-0x3ffe02f4]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 00 fd 01 c0    	add    eax,DWORD PTR [ebp-0x3ffe0300]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 e0 f7 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0820]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 08 fd 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe02f8]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 08 fd 01 c0    	add    DWORD PTR [ebp-0x3ffe02f8],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 00 fd 01 c0    	lea    ecx,[ebp-0x3ffe0300]
c00064e1:	83 bd 00 fd 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe0300],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 0c fd 01 c0    	mov    ecx,DWORD PTR [eax-0x3ffe02f4]
c000651f:	05 00 fd 01 c0       	add    eax,0xc001fd00
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 08 fd 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe02f8]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 00 fd 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe0300],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb 90 fd 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe0270],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 08 fd 01 c0    	mov    eax,DWORD PTR [ebx-0x3ffe02f8]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 00 fd 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe0300],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba 90 fd 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe0270],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 0c fd 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe02f4]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 00 fd 01 c0    	lea    esi,[eax-0x3ffe0300]
c00065e4:	83 b8 00 fd 01 c0 00 	cmp    DWORD PTR [eax-0x3ffe0300],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 40 f8 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe07c0]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 08 fd 01 c0    	mov    esi,DWORD PTR [edx-0x3ffe02f8]
c0006653:	81 c2 00 fd 01 c0    	add    edx,0xc001fd00
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 40 f8 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe07c0]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 18 fd 01 c0    	lea    ebp,[eax-0x3ffe02e8]
c00066b9:	83 3d 74 06 02 c0 00 	cmp    DWORD PTR ds:0xc0020674,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 18 fd 01 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffe02e8],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 a0 d1 01 c0       	push   0xc001d1a0
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 13 fd 01 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffe02ed],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 10 fd 01 c0    	mov    DWORD PTR [ecx-0x3ffe02f0],eax
c000678f:	89 91 14 fd 01 c0    	mov    DWORD PTR [ecx-0x3ffe02ec],edx
c0006795:	81 c1 00 fd 01 c0    	add    ecx,0xc001fd00
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 10 fd 01 c0       	add    eax,0xc001fd10
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	be 01 00 00 00       	mov    esi,0x1
c00067c6:	53                   	push   ebx
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	83 ec 0c             	sub    esp,0xc
c00067ce:	a2 20 f8 01 c0       	mov    ds:0xc001f820,al
c00067d3:	68 a3 d1 01 c0       	push   0xc001d1a3
c00067d8:	e8 c3 0d 01 00       	call   c00175a0 <iso_kprintf>
c00067dd:	e8 d0 ff ff ff       	call   c00067b2 <iso_reset>
c00067e2:	c7 05 74 06 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020674,0x0
c00067ec:	83 c4 10             	add    esp,0x10
c00067ef:	a1 6c 06 02 c0       	mov    eax,ds:0xc002066c
c00067f4:	8d 44 06 10          	lea    eax,[esi+eax*1+0x10]
c00067f8:	e8 ef f7 ff ff       	call   c0005fec <biread>
c00067fd:	89 c3                	mov    ebx,eax
c00067ff:	85 c0                	test   eax,eax
c0006801:	0f 88 f2 00 00 00    	js     c00068f9 <init_percd+0x13a>
c0006807:	8b 04 85 40 f8 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe07c0]
c000680e:	83 c0 04             	add    eax,0x4
c0006811:	51                   	push   ecx
c0006812:	6a 06                	push   0x6
c0006814:	68 c1 d1 01 c0       	push   0xc001d1c1
c0006819:	50                   	push   eax
c000681a:	e8 71 9b ff ff       	call   c0000390 <memcmp>
c000681f:	83 c4 10             	add    esp,0x10
c0006822:	85 c0                	test   eax,eax
c0006824:	74 08                	je     c000682e <init_percd+0x6f>
c0006826:	46                   	inc    esi
c0006827:	83 fe 04             	cmp    esi,0x4
c000682a:	75 c3                	jne    c00067ef <init_percd+0x30>
c000682c:	eb 3b                	jmp    c0006869 <init_percd+0xaa>
c000682e:	8b 04 9d 40 f8 01 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffe07c0]
c0006835:	83 c0 5c             	add    eax,0x5c
c0006838:	e8 a7 f5 ff ff       	call   c0005de4 <isjoliet>
c000683d:	83 ec 0c             	sub    esp,0xc
c0006840:	a3 74 06 02 c0       	mov    ds:0xc0020674,eax
c0006845:	68 c8 d1 01 c0       	push   0xc001d1c8
c000684a:	e8 51 0d 01 00       	call   c00175a0 <iso_kprintf>
c000684f:	5a                   	pop    edx
c0006850:	ff 35 74 06 02 c0    	push   DWORD PTR ds:0xc0020674
c0006856:	e8 65 0d 01 00       	call   c00175c0 <iso_kprintfd>
c000685b:	83 c4 10             	add    esp,0x10
c000685e:	83 3d 74 06 02 c0 00 	cmp    DWORD PTR ds:0xc0020674,0x0
c0006865:	74 bf                	je     c0006826 <init_percd+0x67>
c0006867:	eb 50                	jmp    c00068b9 <init_percd+0xfa>
c0006869:	83 3d 74 06 02 c0 00 	cmp    DWORD PTR ds:0xc0020674,0x0
c0006870:	75 47                	jne    c00068b9 <init_percd+0xfa>
c0006872:	a1 6c 06 02 c0       	mov    eax,ds:0xc002066c
c0006877:	83 c0 10             	add    eax,0x10
c000687a:	e8 6d f7 ff ff       	call   c0005fec <biread>
c000687f:	89 c3                	mov    ebx,eax
c0006881:	85 c0                	test   eax,eax
c0006883:	78 6f                	js     c00068f4 <init_percd+0x135>
c0006885:	50                   	push   eax
c0006886:	8b 04 9d 40 f8 01 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffe07c0]
c000688d:	6a 06                	push   0x6
c000688f:	83 c0 04             	add    eax,0x4
c0006892:	68 e4 d1 01 c0       	push   0xc001d1e4
c0006897:	50                   	push   eax
c0006898:	e8 f3 9a ff ff       	call   c0000390 <memcmp>
c000689d:	83 c4 10             	add    esp,0x10
c00068a0:	85 c0                	test   eax,eax
c00068a2:	74 15                	je     c00068b9 <init_percd+0xfa>
c00068a4:	83 ec 0c             	sub    esp,0xc
c00068a7:	83 cb ff             	or     ebx,0xffffffff
c00068aa:	68 eb d1 01 c0       	push   0xc001d1eb
c00068af:	e8 ec 0c 01 00       	call   c00175a0 <iso_kprintf>
c00068b4:	83 c4 10             	add    esp,0x10
c00068b7:	eb 40                	jmp    c00068f9 <init_percd+0x13a>
c00068b9:	8b 34 9d 40 f8 01 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffe07c0]
c00068c0:	bf 40 06 02 c0       	mov    edi,0xc0020640
c00068c5:	81 c6 a0 00 00 00    	add    esi,0xa0
c00068cb:	b9 22 00 00 00       	mov    ecx,0x22
c00068d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068d2:	b8 42 06 02 c0       	mov    eax,0xc0020642
c00068d7:	31 db                	xor    ebx,ebx
c00068d9:	e8 35 f5 ff ff       	call   c0005e13 <iso_733>
c00068de:	a3 68 06 02 c0       	mov    ds:0xc0020668,eax
c00068e3:	b8 4a 06 02 c0       	mov    eax,0xc002064a
c00068e8:	e8 26 f5 ff ff       	call   c0005e13 <iso_733>
c00068ed:	a3 64 06 02 c0       	mov    ds:0xc0020664,eax
c00068f2:	eb 05                	jmp    c00068f9 <init_percd+0x13a>
c00068f4:	bb 04 00 00 00       	mov    ebx,0x4
c00068f9:	89 d8                	mov    eax,ebx
c00068fb:	5b                   	pop    ebx
c00068fc:	5e                   	pop    esi
c00068fd:	5f                   	pop    edi
c00068fe:	c3                   	ret    

c00068ff <iso_ioctl>:
c00068ff:	e8 ae fe ff ff       	call   c00067b2 <iso_reset>
c0006904:	31 c0                	xor    eax,eax
c0006906:	c3                   	ret    

c0006907 <fs_iso9660_init>:
c0006907:	53                   	push   ebx
c0006908:	31 db                	xor    ebx,ebx
c000690a:	83 ec 0c             	sub    esp,0xc
c000690d:	68 40 09 00 00       	push   0x940
c0006912:	6a 00                	push   0x0
c0006914:	68 00 fd 01 c0       	push   0xc001fd00
c0006919:	e8 b2 9b ff ff       	call   c00004d0 <memset>
c000691e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006925:	c7 05 00 fd 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001fd00,0xffffffff
c000692f:	e8 d1 0e 00 00       	call   c0007805 <malloc>
c0006934:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000693b:	a3 70 06 02 c0       	mov    ds:0xc0020670,eax
c0006940:	e8 c0 0e 00 00       	call   c0007805 <malloc>
c0006945:	83 c4 10             	add    esp,0x10
c0006948:	a3 e0 fc 01 c0       	mov    ds:0xc001fce0,eax
c000694d:	83 ec 0c             	sub    esp,0xc
c0006950:	68 04 08 00 00       	push   0x804
c0006955:	e8 ab 0e 00 00       	call   c0007805 <malloc>
c000695a:	89 04 9d 40 f8 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe07c0],eax
c0006961:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006967:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c000696e:	e8 92 0e 00 00       	call   c0007805 <malloc>
c0006973:	83 c4 10             	add    esp,0x10
c0006976:	89 04 9d e0 f7 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0820],eax
c000697d:	43                   	inc    ebx
c000697e:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006984:	83 fb 10             	cmp    ebx,0x10
c0006987:	75 c4                	jne    c000694d <fs_iso9660_init+0x46>
c0006989:	31 c0                	xor    eax,eax
c000698b:	83 c4 08             	add    esp,0x8
c000698e:	5b                   	pop    ebx
c000698f:	c3                   	ret    

c0006990 <fs_iso9660_shutdown>:
c0006990:	53                   	push   ebx
c0006991:	31 db                	xor    ebx,ebx
c0006993:	83 ec 08             	sub    esp,0x8
c0006996:	83 ec 0c             	sub    esp,0xc
c0006999:	ff 34 9d 40 f8 01 c0 	push   DWORD PTR [ebx*4-0x3ffe07c0]
c00069a0:	e8 70 0e 00 00       	call   c0007815 <free>
c00069a5:	58                   	pop    eax
c00069a6:	ff 34 9d e0 f7 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0820]
c00069ad:	43                   	inc    ebx
c00069ae:	e8 62 0e 00 00       	call   c0007815 <free>
c00069b3:	83 c4 10             	add    esp,0x10
c00069b6:	83 fb 10             	cmp    ebx,0x10
c00069b9:	75 db                	jne    c0006996 <fs_iso9660_shutdown+0x6>
c00069bb:	a1 70 06 02 c0       	mov    eax,ds:0xc0020670
c00069c0:	85 c0                	test   eax,eax
c00069c2:	74 0c                	je     c00069d0 <fs_iso9660_shutdown+0x40>
c00069c4:	83 ec 0c             	sub    esp,0xc
c00069c7:	50                   	push   eax
c00069c8:	e8 48 0e 00 00       	call   c0007815 <free>
c00069cd:	83 c4 10             	add    esp,0x10
c00069d0:	a1 e0 fc 01 c0       	mov    eax,ds:0xc001fce0
c00069d5:	85 c0                	test   eax,eax
c00069d7:	74 0c                	je     c00069e5 <fs_iso9660_shutdown+0x55>
c00069d9:	83 ec 0c             	sub    esp,0xc
c00069dc:	50                   	push   eax
c00069dd:	e8 33 0e 00 00       	call   c0007815 <free>
c00069e2:	83 c4 10             	add    esp,0x10
c00069e5:	c7 05 e0 fc 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fce0,0x0
c00069ef:	c7 05 70 06 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020670,0x0
c00069f9:	31 c0                	xor    eax,eax
c00069fb:	83 c4 08             	add    esp,0x8
c00069fe:	5b                   	pop    ebx
c00069ff:	c3                   	ret    

c0006a00 <Computer::close(int, int, void*)>:
c0006a00:	57                   	push   edi
c0006a01:	56                   	push   esi
c0006a02:	53                   	push   ebx
c0006a03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006a07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a0b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006a0f:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a15:	83 ec 0c             	sub    esp,0xc
c0006a18:	50                   	push   eax
c0006a19:	e8 e0 4f 00 00       	call   c000b9fe <Device::closeAll()>
c0006a1e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a24:	83 c4 10             	add    esp,0x10
c0006a27:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a29:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006a2d:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006a35:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006a39:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006a3d:	5b                   	pop    ebx
c0006a3e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006a41:	5e                   	pop    esi
c0006a42:	5f                   	pop    edi
c0006a43:	ff e0                	jmp    eax

c0006a45 <Krnl::firstTask()>:
c0006a45:	53                   	push   ebx
c0006a46:	83 ec 14             	sub    esp,0x14
c0006a49:	fb                   	sti    
c0006a4a:	68 f9 d1 01 c0       	push   0xc001d1f9
c0006a4f:	e8 37 90 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006a54:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0006a5b:	e8 a5 0d 00 00       	call   c0007805 <malloc>
c0006a60:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a67:	89 c3                	mov    ebx,eax
c0006a69:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0006a6e:	50                   	push   eax
c0006a6f:	68 12 d2 01 c0       	push   0xc001d212
c0006a74:	6a 01                	push   0x1
c0006a76:	53                   	push   ebx
c0006a77:	e8 48 c6 00 00       	call   c00130c4 <Process::Process(bool, char const*, Process*, char**)>
c0006a7c:	83 c4 20             	add    esp,0x20
c0006a7f:	68 ff 00 00 00       	push   0xff
c0006a84:	6a 00                	push   0x0
c0006a86:	68 5b 72 00 c0       	push   0xc000725b
c0006a8b:	53                   	push   ebx
c0006a8c:	e8 3f c8 00 00       	call   c00132d0 <Process::createThread(void (*)(void*), void*, int)>
c0006a91:	8b 15 50 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023b50
c0006a97:	6a 7a                	push   0x7a
c0006a99:	6a 00                	push   0x0
c0006a9b:	68 24 3d 01 c0       	push   0xc0013d24
c0006aa0:	52                   	push   edx
c0006aa1:	e8 2a c8 00 00       	call   c00132d0 <Process::createThread(void (*)(void*), void*, int)>
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	a3 08 3b 02 c0       	mov    ds:0xc0023b08,eax
c0006aae:	68 10 d3 01 c0       	push   0xc001d310
c0006ab3:	c6 05 7d 06 02 c0 01 	mov    BYTE PTR ds:0xc002067d,0x1
c0006aba:	e8 cc 8f 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006abf:	e8 3f d6 00 00       	call   c0014103 <Vm::initialise8086()>
c0006ac4:	e8 79 3d 00 00       	call   c000a842 <Fs::initVFS()>
c0006ac9:	c7 04 24 1f d2 01 c0 	mov    DWORD PTR [esp],0xc001d21f
c0006ad0:	e8 b6 8f 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006ad5:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0006ada:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006ae0:	8b 10                	mov    edx,DWORD PTR [eax]
c0006ae2:	6a 00                	push   0x0
c0006ae4:	6a 00                	push   0x0
c0006ae6:	6a 00                	push   0x0
c0006ae8:	50                   	push   eax
c0006ae9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aec:	83 c4 14             	add    esp,0x14
c0006aef:	68 10 d3 01 c0       	push   0xc001d310
c0006af4:	e8 92 8f 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006af9:	e8 e5 a4 00 00       	call   c0010fe3 <KeLoadSystemCalls()>
c0006afe:	e8 63 94 00 00       	call   c000ff66 <Krnl::loadSystemEnv()>
c0006b03:	e8 c0 96 00 00       	call   c00101c8 <Krnl::setupPowerManager()>
c0006b08:	83 c4 0c             	add    esp,0xc
c0006b0b:	6a 3a                	push   0x3a
c0006b0d:	68 39 d2 01 c0       	push   0xc001d239
c0006b12:	68 42 d2 01 c0       	push   0xc001d242
c0006b17:	e8 95 ab 00 00       	call   c00116b1 <Reg::readIntWithDefault(char*, char*, int)>
c0006b1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0006b1f:	e8 2c 48 00 00       	call   c000b350 <User::loadClockSettings(int)>
c0006b24:	c7 04 24 34 d3 01 c0 	mov    DWORD PTR [esp],0xc001d334
c0006b2b:	e8 5b 8f 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006b30:	59                   	pop    ecx
c0006b31:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0006b36:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006b3c:	53                   	push   ebx
c0006b3d:	e8 ba 4e 00 00       	call   c000b9fc <Device::loadDriversForAll()>
c0006b42:	c7 04 24 4a d2 01 c0 	mov    DWORD PTR [esp],0xc001d24a
c0006b49:	e8 3d 8f 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006b4e:	58                   	pop    eax
c0006b4f:	8b 1d 78 06 02 c0    	mov    ebx,DWORD PTR ds:0xc0020678
c0006b55:	5a                   	pop    edx
c0006b56:	6a 01                	push   0x1
c0006b58:	68 5b d2 01 c0       	push   0xc001d25b
c0006b5d:	e8 9b bf 00 00       	call   c0012afd <Thr::loadDLL(char const*, bool)>
c0006b62:	59                   	pop    ecx
c0006b63:	5a                   	pop    edx
c0006b64:	53                   	push   ebx
c0006b65:	50                   	push   eax
c0006b66:	e8 c3 c1 00 00       	call   c0012d2e <Thr::executeDLL(unsigned long, void*)>
c0006b6b:	83 c4 10             	add    esp,0x10
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	6a 02                	push   0x2
c0006b73:	e8 74 cb 00 00       	call   c00136ec <blockTask(TaskState)>
c0006b78:	83 c4 10             	add    esp,0x10
c0006b7b:	eb f1                	jmp    c0006b6e <Krnl::firstTask()+0x129>
c0006b7d:	90                   	nop

c0006b7e <Computer::Computer()>:
c0006b7e:	83 ec 0c             	sub    esp,0xc
c0006b81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b85:	83 ec 08             	sub    esp,0x8
c0006b88:	68 77 d2 01 c0       	push   0xc001d277
c0006b8d:	50                   	push   eax
c0006b8e:	e8 e5 4e 00 00       	call   c000ba78 <Device::Device(char const*)>
c0006b93:	83 c4 10             	add    esp,0x10
c0006b96:	ba 80 d3 01 c0       	mov    edx,0xc001d380
c0006b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b9f:	89 10                	mov    DWORD PTR [eax],edx
c0006ba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba5:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb3:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006bc7:	83 ca 04             	or     edx,0x4
c0006bca:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bda:	31 d2                	xor    edx,edx
c0006bdc:	88 c2                	mov    dl,al
c0006bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006be2:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bf3:	31 d2                	xor    edx,edx
c0006bf5:	88 c2                	mov    dl,al
c0006bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfb:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c04:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c0a:	8d 50 01             	lea    edx,[eax+0x1]
c0006c0d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006c11:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006c17:	31 d2                	xor    edx,edx
c0006c19:	88 c2                	mov    dl,al
c0006c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006c23:	83 e1 3f             	and    ecx,0x3f
c0006c26:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006c2a:	90                   	nop
c0006c2b:	83 c4 0c             	add    esp,0xc
c0006c2e:	c3                   	ret    
c0006c2f:	90                   	nop

c0006c30 <Computer::setBootMessage(char const*)>:
c0006c30:	c3                   	ret    
c0006c31:	90                   	nop

c0006c32 <Computer::detectFeatures()>:
c0006c32:	55                   	push   ebp
c0006c33:	57                   	push   edi
c0006c34:	56                   	push   esi
c0006c35:	53                   	push   ebx
c0006c36:	83 ec 1c             	sub    esp,0x1c
c0006c39:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006c3d:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006c47:	e8 ad 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c4c:	85 c0                	test   eax,eax
c0006c4e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c54:	0f 95 c2             	setne  dl
c0006c57:	83 e0 fd             	and    eax,0xfffffffd
c0006c5a:	01 d2                	add    edx,edx
c0006c5c:	09 d0                	or     eax,edx
c0006c5e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c64:	a8 02                	test   al,0x2
c0006c66:	75 46                	jne    c0006cae <Computer::detectFeatures()+0x7c>
c0006c68:	f6 05 91 06 02 c0 04 	test   BYTE PTR ds:0xc0020691,0x4
c0006c6f:	74 07                	je     c0006c78 <Computer::detectFeatures()+0x46>
c0006c71:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c78:	e8 89 4e 01 00       	call   c001bb06 <x87Detect>
c0006c7d:	83 e0 01             	and    eax,0x1
c0006c80:	c1 e0 04             	shl    eax,0x4
c0006c83:	88 c2                	mov    dl,al
c0006c85:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c8b:	83 e0 ef             	and    eax,0xffffffef
c0006c8e:	09 d0                	or     eax,edx
c0006c90:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c96:	a8 10                	test   al,0x10
c0006c98:	0f 85 2a 01 00 00    	jne    c0006dc8 <Computer::detectFeatures()+0x196>
c0006c9e:	84 c0                	test   al,al
c0006ca0:	0f 88 45 01 00 00    	js     c0006deb <Computer::detectFeatures()+0x1b9>
c0006ca6:	83 c4 1c             	add    esp,0x1c
c0006ca9:	5b                   	pop    ebx
c0006caa:	5e                   	pop    esi
c0006cab:	5f                   	pop    edi
c0006cac:	5d                   	pop    ebp
c0006cad:	c3                   	ret    
c0006cae:	83 ec 0c             	sub    esp,0xc
c0006cb1:	6a 20                	push   0x20
c0006cb3:	e8 00 83 00 00       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb8:	83 e0 01             	and    eax,0x1
c0006cbb:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006cc2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cc8:	83 e0 f7             	and    eax,0xfffffff7
c0006ccb:	09 d0                	or     eax,edx
c0006ccd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cd3:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006cda:	e8 d9 82 00 00       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c0006cdf:	83 e0 01             	and    eax,0x1
c0006ce2:	88 c2                	mov    dl,al
c0006ce4:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cea:	83 e0 fe             	and    eax,0xfffffffe
c0006ced:	09 d0                	or     eax,edx
c0006cef:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006cf5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cfc:	e8 b7 82 00 00       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c0006d01:	c1 e0 07             	shl    eax,0x7
c0006d04:	88 c2                	mov    dl,al
c0006d06:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d0c:	83 e0 7f             	and    eax,0x7f
c0006d0f:	09 d0                	or     eax,edx
c0006d11:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d17:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006d1e:	e8 95 82 00 00       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c0006d23:	83 c4 10             	add    esp,0x10
c0006d26:	83 e0 01             	and    eax,0x1
c0006d29:	c1 e0 05             	shl    eax,0x5
c0006d2c:	88 c2                	mov    dl,al
c0006d2e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d34:	83 e0 df             	and    eax,0xffffffdf
c0006d37:	09 d0                	or     eax,edx
c0006d39:	f7 05 90 06 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020690,0x401
c0006d43:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d49:	0f 84 c2 00 00 00    	je     c0006e11 <Computer::detectFeatures()+0x1df>
c0006d4f:	83 e0 fe             	and    eax,0xfffffffe
c0006d52:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d58:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d5e:	88 c2                	mov    dl,al
c0006d60:	83 e2 09             	and    edx,0x9
c0006d63:	fe ca                	dec    dl
c0006d65:	75 09                	jne    c0006d70 <Computer::detectFeatures()+0x13e>
c0006d67:	83 e0 fe             	and    eax,0xfffffffe
c0006d6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d70:	83 ec 0c             	sub    esp,0xc
c0006d73:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d77:	50                   	push   eax
c0006d78:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d7c:	55                   	push   ebp
c0006d7d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d81:	57                   	push   edi
c0006d82:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d86:	56                   	push   esi
c0006d87:	68 00 00 00 80       	push   0x80000000
c0006d8c:	e8 a3 81 00 00       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d91:	83 c4 20             	add    esp,0x20
c0006d94:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d9f:	0f 86 c3 fe ff ff    	jbe    c0006c68 <Computer::detectFeatures()+0x36>
c0006da5:	83 ec 0c             	sub    esp,0xc
c0006da8:	50                   	push   eax
c0006da9:	55                   	push   ebp
c0006daa:	57                   	push   edi
c0006dab:	56                   	push   esi
c0006dac:	68 01 00 00 80       	push   0x80000001
c0006db1:	e8 7e 81 00 00       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006db6:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006dc0:	83 c4 20             	add    esp,0x20
c0006dc3:	e9 a0 fe ff ff       	jmp    c0006c68 <Computer::detectFeatures()+0x36>
c0006dc8:	e8 f3 4c 01 00       	call   c001bac0 <absolutelyNoChanceInHell>
c0006dcd:	88 c2                	mov    dl,al
c0006dcf:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006dd5:	c1 e2 07             	shl    edx,0x7
c0006dd8:	83 e0 7f             	and    eax,0x7f
c0006ddb:	09 d0                	or     eax,edx
c0006ddd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006de3:	84 c0                	test   al,al
c0006de5:	0f 89 bb fe ff ff    	jns    c0006ca6 <Computer::detectFeatures()+0x74>
c0006deb:	e8 50 4a 01 00       	call   c001b840 <avxDetect>
c0006df0:	83 e0 01             	and    eax,0x1
c0006df3:	c1 e0 05             	shl    eax,0x5
c0006df6:	88 c2                	mov    dl,al
c0006df8:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006dfe:	83 e0 df             	and    eax,0xffffffdf
c0006e01:	09 d0                	or     eax,edx
c0006e03:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006e09:	83 c4 1c             	add    esp,0x1c
c0006e0c:	5b                   	pop    ebx
c0006e0d:	5e                   	pop    esi
c0006e0e:	5f                   	pop    edi
c0006e0f:	5d                   	pop    ebp
c0006e10:	c3                   	ret    
c0006e11:	83 ec 0c             	sub    esp,0xc
c0006e14:	68 00 02 00 00       	push   0x200
c0006e19:	e8 9a 81 00 00       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c0006e1e:	83 c4 10             	add    esp,0x10
c0006e21:	83 e0 01             	and    eax,0x1
c0006e24:	88 c2                	mov    dl,al
c0006e26:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e2c:	83 e0 fe             	and    eax,0xfffffffe
c0006e2f:	09 d0                	or     eax,edx
c0006e31:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e37:	e9 1c ff ff ff       	jmp    c0006d58 <Computer::detectFeatures()+0x126>

c0006e3c <Computer::displayFeatures()>:
c0006e3c:	c3                   	ret    
c0006e3d:	90                   	nop

c0006e3e <Computer::rdmsr(unsigned int)>:
c0006e3e:	83 ec 0c             	sub    esp,0xc
c0006e41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e45:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e4c:	74 0a                	je     c0006e58 <Computer::rdmsr(unsigned int)+0x1a>
c0006e4e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e52:	0f 32                	rdmsr  
c0006e54:	83 c4 0c             	add    esp,0xc
c0006e57:	c3                   	ret    
c0006e58:	83 ec 0c             	sub    esp,0xc
c0006e5b:	68 80 d2 01 c0       	push   0xc001d280
c0006e60:	e8 9e 92 00 00       	call   c0010103 <KePanic(char const*)>
c0006e65:	83 c4 10             	add    esp,0x10
c0006e68:	eb e4                	jmp    c0006e4e <Computer::rdmsr(unsigned int)+0x10>

c0006e6a <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e6a:	57                   	push   edi
c0006e6b:	56                   	push   esi
c0006e6c:	52                   	push   edx
c0006e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e71:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e75:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e79:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e80:	74 0e                	je     c0006e90 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e82:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e86:	89 f0                	mov    eax,esi
c0006e88:	89 fa                	mov    edx,edi
c0006e8a:	0f 30                	wrmsr  
c0006e8c:	58                   	pop    eax
c0006e8d:	5e                   	pop    esi
c0006e8e:	5f                   	pop    edi
c0006e8f:	c3                   	ret    
c0006e90:	83 ec 0c             	sub    esp,0xc
c0006e93:	68 86 d2 01 c0       	push   0xc001d286
c0006e98:	e8 66 92 00 00       	call   c0010103 <KePanic(char const*)>
c0006e9d:	83 c4 10             	add    esp,0x10
c0006ea0:	eb e0                	jmp    c0006e82 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006ea2 <Computer::shutdown()>:
c0006ea2:	83 ec 0c             	sub    esp,0xc
c0006ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea9:	8b 10                	mov    edx,DWORD PTR [eax]
c0006eab:	6a 00                	push   0x0
c0006ead:	6a 00                	push   0x0
c0006eaf:	6a 00                	push   0x0
c0006eb1:	50                   	push   eax
c0006eb2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006eb5:	83 c4 1c             	add    esp,0x1c
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::restart()>:
c0006eba:	83 ec 0c             	sub    esp,0xc
c0006ebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ec1:	8b 10                	mov    edx,DWORD PTR [eax]
c0006ec3:	6a 00                	push   0x0
c0006ec5:	6a 00                	push   0x0
c0006ec7:	6a 01                	push   0x1
c0006ec9:	50                   	push   eax
c0006eca:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006ecd:	83 c4 1c             	add    esp,0x1c
c0006ed0:	c3                   	ret    
c0006ed1:	90                   	nop

c0006ed2 <Computer::sleep()>:
c0006ed2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ed6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006edc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006ee0:	e9 4b 7b 00 00       	jmp    c000ea30 <ACPI::sleep()>
c0006ee5:	90                   	nop

c0006ee6 <Computer::nmiEnabled()>:
c0006ee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eea:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ef0:	c3                   	ret    
c0006ef1:	90                   	nop

c0006ef2 <Computer::readCMOS(unsigned char)>:
c0006ef2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ef6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006efd:	19 c0                	sbb    eax,eax
c0006eff:	83 e0 80             	and    eax,0xffffff80
c0006f02:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006f06:	e6 70                	out    0x70,al
c0006f08:	e4 71                	in     al,0x71
c0006f0a:	c3                   	ret    
c0006f0b:	90                   	nop

c0006f0c <Computer::enableNMI(bool)>:
c0006f0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f14:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006f1a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006f22:	eb ce                	jmp    c0006ef2 <Computer::readCMOS(unsigned char)>

c0006f24 <Computer::open(int, int, void*)>:
c0006f24:	56                   	push   esi
c0006f25:	53                   	push   ebx
c0006f26:	83 ec 10             	sub    esp,0x10
c0006f29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006f2d:	f6 05 90 06 02 c0 04 	test   BYTE PTR ds:0xc0020690,0x4
c0006f34:	68 8c d2 01 c0       	push   0xc001d28c
c0006f39:	0f 94 05 00 f4 01 c0 	sete   BYTE PTR ds:0xc001f400
c0006f40:	e8 46 8b 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006f45:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f4c:	e8 b4 08 00 00       	call   c0007805 <malloc>
c0006f51:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f54:	89 c6                	mov    esi,eax
c0006f56:	e8 6d 76 00 00       	call   c000e5c8 <ACPI::ACPI()>
c0006f5b:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f61:	58                   	pop    eax
c0006f62:	5a                   	pop    edx
c0006f63:	56                   	push   esi
c0006f64:	53                   	push   ebx
c0006f65:	e8 76 49 00 00       	call   c000b8e0 <Device::addChild(Device*)>
c0006f6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f6d:	e8 c0 fc ff ff       	call   c0006c32 <Computer::detectFeatures()>
c0006f72:	59                   	pop    ecx
c0006f73:	5e                   	pop    esi
c0006f74:	6a 01                	push   0x1
c0006f76:	53                   	push   ebx
c0006f77:	e8 90 ff ff ff       	call   c0006f0c <Computer::enableNMI(bool)>
c0006f7c:	c7 04 24 a4 d2 01 c0 	mov    DWORD PTR [esp],0xc001d2a4
c0006f83:	e8 03 8b 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006f88:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f8f:	e8 71 08 00 00       	call   c0007805 <malloc>
c0006f94:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f97:	89 c6                	mov    esi,eax
c0006f99:	e8 d2 80 00 00       	call   c000f070 <CPU::CPU()>
c0006f9e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006fa4:	58                   	pop    eax
c0006fa5:	5a                   	pop    edx
c0006fa6:	56                   	push   esi
c0006fa7:	53                   	push   ebx
c0006fa8:	e8 33 49 00 00       	call   c000b8e0 <Device::addChild(Device*)>
c0006fad:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006fb3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006fb7:	8b 10                	mov    edx,DWORD PTR [eax]
c0006fb9:	51                   	push   ecx
c0006fba:	6a 00                	push   0x0
c0006fbc:	6a 00                	push   0x0
c0006fbe:	50                   	push   eax
c0006fbf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006fc2:	83 c4 14             	add    esp,0x14
c0006fc5:	68 54 d3 01 c0       	push   0xc001d354
c0006fca:	e8 bc 8a 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006fcf:	e8 66 e2 00 00       	call   c001523a <HalInitialiseCoprocessor()>
c0006fd4:	c7 04 24 be d2 01 c0 	mov    DWORD PTR [esp],0xc001d2be
c0006fdb:	e8 ab 8a 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c0006fe0:	c7 04 24 45 6a 00 c0 	mov    DWORD PTR [esp],0xc0006a45
c0006fe7:	e8 fc c3 00 00       	call   c00133e8 <setupMultitasking(void (*)())>
c0006fec:	83 c4 14             	add    esp,0x14
c0006fef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006ff4:	5b                   	pop    ebx
c0006ff5:	5e                   	pop    esi
c0006ff6:	c3                   	ret    
c0006ff7:	90                   	nop

c0006ff8 <Computer::disableNMI()>:
c0006ff8:	6a 00                	push   0x0
c0006ffa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ffe:	50                   	push   eax
c0006fff:	e8 08 ff ff ff       	call   c0006f0c <Computer::enableNMI(bool)>
c0007004:	5a                   	pop    edx
c0007005:	59                   	pop    ecx
c0007006:	c3                   	ret    
c0007007:	90                   	nop

c0007008 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007008:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000700c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007013:	19 c0                	sbb    eax,eax
c0007015:	83 e0 80             	and    eax,0xffffff80
c0007018:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000701c:	e6 70                	out    0x70,al
c000701e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007022:	e6 71                	out    0x71,al
c0007024:	c3                   	ret    
c0007025:	90                   	nop

c0007026 <Computer::handleNMI()>:
c0007026:	56                   	push   esi
c0007027:	53                   	push   ebx
c0007028:	83 ec 10             	sub    esp,0x10
c000702b:	e4 92                	in     al,0x92
c000702d:	89 c6                	mov    esi,eax
c000702f:	e4 61                	in     al,0x61
c0007031:	68 d9 d2 01 c0       	push   0xc001d2d9
c0007036:	88 c3                	mov    bl,al
c0007038:	e8 63 34 00 00       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c000703d:	83 c4 10             	add    esp,0x10
c0007040:	83 e6 10             	and    esi,0x10
c0007043:	75 0d                	jne    c0007052 <Computer::handleNMI()+0x2c>
c0007045:	f6 c3 40             	test   bl,0x40
c0007048:	75 1d                	jne    c0007067 <Computer::handleNMI()+0x41>
c000704a:	84 db                	test   bl,bl
c000704c:	78 2d                	js     c000707b <Computer::handleNMI()+0x55>
c000704e:	58                   	pop    eax
c000704f:	5b                   	pop    ebx
c0007050:	5e                   	pop    esi
c0007051:	c3                   	ret    
c0007052:	83 ec 0c             	sub    esp,0xc
c0007055:	68 ea d2 01 c0       	push   0xc001d2ea
c000705a:	e8 a4 90 00 00       	call   c0010103 <KePanic(char const*)>
c000705f:	83 c4 10             	add    esp,0x10
c0007062:	f6 c3 40             	test   bl,0x40
c0007065:	74 e3                	je     c000704a <Computer::handleNMI()+0x24>
c0007067:	83 ec 0c             	sub    esp,0xc
c000706a:	68 f7 d2 01 c0       	push   0xc001d2f7
c000706f:	e8 8f 90 00 00       	call   c0010103 <KePanic(char const*)>
c0007074:	83 c4 10             	add    esp,0x10
c0007077:	84 db                	test   bl,bl
c0007079:	79 d3                	jns    c000704e <Computer::handleNMI()+0x28>
c000707b:	c7 44 24 10 01 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d301
c0007083:	5a                   	pop    edx
c0007084:	5b                   	pop    ebx
c0007085:	5e                   	pop    esi
c0007086:	e9 78 90 00 00       	jmp    c0010103 <KePanic(char const*)>
c000708b:	90                   	nop

c000708c <GDTEntry::setBase(unsigned int)>:
c000708c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007090:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007094:	89 c1                	mov    ecx,eax
c0007096:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000709a:	c1 e9 10             	shr    ecx,0x10
c000709d:	c1 e8 18             	shr    eax,0x18
c00070a0:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00070a3:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00070a6:	c3                   	ret    
c00070a7:	90                   	nop

c00070a8 <GDTEntry::setLimit(unsigned int)>:
c00070a8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00070ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070b0:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00070b3:	66 89 01             	mov    WORD PTR [ecx],ax
c00070b6:	83 e2 f0             	and    edx,0xfffffff0
c00070b9:	c1 e8 10             	shr    eax,0x10
c00070bc:	83 e0 0f             	and    eax,0xf
c00070bf:	09 d0                	or     eax,edx
c00070c1:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00070c4:	c3                   	ret    
c00070c5:	90                   	nop

c00070c6 <GDT::GDT()>:
c00070c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00070d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00070da:	90                   	nop
c00070db:	c3                   	ret    

c00070dc <GDT::addEntry(GDTEntry)>:
c00070dc:	53                   	push   ebx
c00070dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00070e5:	8b 02                	mov    eax,DWORD PTR [edx]
c00070e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00070eb:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070ef:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070f3:	8d 48 01             	lea    ecx,[eax+0x1]
c00070f6:	c1 e0 03             	shl    eax,0x3
c00070f9:	89 0a                	mov    DWORD PTR [edx],ecx
c00070fb:	5b                   	pop    ebx
c00070fc:	c3                   	ret    
c00070fd:	90                   	nop

c00070fe <GDT::getNumberOfEntries()>:
c00070fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007102:	8b 00                	mov    eax,DWORD PTR [eax]
c0007104:	c3                   	ret    
c0007105:	90                   	nop

c0007106 <GDT::flush()>:
c0007106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000710a:	8b 10                	mov    edx,DWORD PTR [eax]
c000710c:	83 c0 04             	add    eax,0x4
c000710f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007116:	a3 82 06 02 c0       	mov    ds:0xc0020682,eax
c000711b:	66 89 15 80 06 02 c0 	mov    WORD PTR ds:0xc0020680,dx
c0007122:	e9 36 92 ff ff       	jmp    c000035d <loadGDT>
c0007127:	90                   	nop

c0007128 <GDT::setup()>:
c0007128:	57                   	push   edi
c0007129:	56                   	push   esi
c000712a:	53                   	push   ebx
c000712b:	83 ec 30             	sub    esp,0x30
c000712e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007132:	6a 00                	push   0x0
c0007134:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007138:	56                   	push   esi
c0007139:	e8 4e ff ff ff       	call   c000708c <GDTEntry::setBase(unsigned int)>
c000713e:	6a 00                	push   0x0
c0007140:	56                   	push   esi
c0007141:	e8 62 ff ff ff       	call   c00070a8 <GDTEntry::setLimit(unsigned int)>
c0007146:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000714e:	6a 00                	push   0x0
c0007150:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007154:	56                   	push   esi
c0007155:	e8 32 ff ff ff       	call   c000708c <GDTEntry::setBase(unsigned int)>
c000715a:	68 ff ff ff 00       	push   0xffffff
c000715f:	56                   	push   esi
c0007160:	e8 43 ff ff ff       	call   c00070a8 <GDTEntry::setLimit(unsigned int)>
c0007165:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007169:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000716d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007171:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007175:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000717a:	0d 00 9a c0 00       	or     eax,0xc09a00
c000717f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007183:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007187:	89 f8                	mov    eax,edi
c0007189:	89 fa                	mov    edx,edi
c000718b:	80 e4 f7             	and    ah,0xf7
c000718e:	80 ce 60             	or     dh,0x60
c0007191:	89 c7                	mov    edi,eax
c0007193:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007197:	80 cc 60             	or     ah,0x60
c000719a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000719e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00071a2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00071a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00071aa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00071ae:	83 c4 20             	add    esp,0x20
c00071b1:	6a 00                	push   0x0
c00071b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00071b7:	50                   	push   eax
c00071b8:	e8 cf fe ff ff       	call   c000708c <GDTEntry::setBase(unsigned int)>
c00071bd:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00071c1:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c00071c5:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c00071ca:	6a 00                	push   0x0
c00071cc:	8d 44 24 34          	lea    eax,[esp+0x34]
c00071d0:	50                   	push   eax
c00071d1:	e8 b6 fe ff ff       	call   c000708c <GDTEntry::setBase(unsigned int)>
c00071d6:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c00071db:	83 c4 0c             	add    esp,0xc
c00071de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071e6:	53                   	push   ebx
c00071e7:	e8 f0 fe ff ff       	call   c00070dc <GDT::addEntry(GDTEntry)>
c00071ec:	83 c4 0c             	add    esp,0xc
c00071ef:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071f7:	53                   	push   ebx
c00071f8:	e8 df fe ff ff       	call   c00070dc <GDT::addEntry(GDTEntry)>
c00071fd:	83 c4 0c             	add    esp,0xc
c0007200:	57                   	push   edi
c0007201:	56                   	push   esi
c0007202:	53                   	push   ebx
c0007203:	e8 d4 fe ff ff       	call   c00070dc <GDT::addEntry(GDTEntry)>
c0007208:	83 c4 0c             	add    esp,0xc
c000720b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000720f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007213:	53                   	push   ebx
c0007214:	e8 c3 fe ff ff       	call   c00070dc <GDT::addEntry(GDTEntry)>
c0007219:	83 c4 0c             	add    esp,0xc
c000721c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007220:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007224:	53                   	push   ebx
c0007225:	e8 b2 fe ff ff       	call   c00070dc <GDT::addEntry(GDTEntry)>
c000722a:	83 c4 0c             	add    esp,0xc
c000722d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007231:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007235:	53                   	push   ebx
c0007236:	e8 a1 fe ff ff       	call   c00070dc <GDT::addEntry(GDTEntry)>
c000723b:	83 c4 0c             	add    esp,0xc
c000723e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007242:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007246:	53                   	push   ebx
c0007247:	e8 90 fe ff ff       	call   c00070dc <GDT::addEntry(GDTEntry)>
c000724c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000724f:	e8 b2 fe ff ff       	call   c0007106 <GDT::flush()>
c0007254:	83 c4 40             	add    esp,0x40
c0007257:	5b                   	pop    ebx
c0007258:	5e                   	pop    esi
c0007259:	5f                   	pop    edi
c000725a:	c3                   	ret    

c000725b <idleFunction(void*)>:
c000725b:	83 ec 0c             	sub    esp,0xc
c000725e:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0007263:	48                   	dec    eax
c0007264:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0007269:	75 01                	jne    c000726c <idleFunction(void*)+0x11>
c000726b:	fb                   	sti    
c000726c:	e8 a3 dc 00 00       	call   c0014f14 <HalSystemIdle()>
c0007271:	e8 4c 4e 01 00       	call   c001c0c2 <idleCommon()>
c0007276:	eb f4                	jmp    c000726c <idleFunction(void*)+0x11>

c0007278 <IDTEntry::IDTEntry(bool)>:
c0007278:	83 ec 04             	sub    esp,0x4
c000727b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000727f:	88 04 24             	mov    BYTE PTR [esp],al
c0007282:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007286:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000728c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007290:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000729b:	83 e2 f0             	and    edx,0xfffffff0
c000729e:	83 ca 0e             	or     edx,0xe
c00072a1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00072ab:	83 e2 ef             	and    edx,0xffffffef
c00072ae:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00072b1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00072b5:	74 05                	je     c00072bc <IDTEntry::IDTEntry(bool)+0x44>
c00072b7:	b2 03                	mov    dl,0x3
c00072b9:	eb 05                	jmp    c00072c0 <IDTEntry::IDTEntry(bool)+0x48>
c00072bb:	90                   	nop
c00072bc:	b2 00                	mov    dl,0x0
c00072be:	66 90                	xchg   ax,ax
c00072c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c4:	83 e2 03             	and    edx,0x3
c00072c7:	88 d1                	mov    cl,dl
c00072c9:	c1 e1 05             	shl    ecx,0x5
c00072cc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00072cf:	83 e2 9f             	and    edx,0xffffff9f
c00072d2:	09 ca                	or     edx,ecx
c00072d4:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00072d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072db:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00072de:	83 ca 80             	or     edx,0xffffff80
c00072e1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00072e4:	90                   	nop
c00072e5:	83 c4 04             	add    esp,0x4
c00072e8:	c3                   	ret    
c00072e9:	90                   	nop

c00072ea <IDTEntry::setOffset(unsigned int)>:
c00072ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f2:	66 89 02             	mov    WORD PTR [edx],ax
c00072f5:	c1 e8 10             	shr    eax,0x10
c00072f8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072fc:	c3                   	ret    
c00072fd:	90                   	nop
c00072fe:	66 90                	xchg   ax,ax

c0007300 <IDT::IDT()>:
c0007300:	90                   	nop
c0007301:	c3                   	ret    

c0007302 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007302:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007306:	83 c0 30             	add    eax,0x30
c0007309:	c3                   	ret    

c000730a <IDT::addEntry(IDTEntry, int)>:
c000730a:	53                   	push   ebx
c000730b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000730f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007313:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007317:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000731b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000731e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007322:	5b                   	pop    ebx
c0007323:	c3                   	ret    

c0007324 <IDT::addEntry(int, void (*)(), bool)>:
c0007324:	53                   	push   ebx
c0007325:	83 ec 10             	sub    esp,0x10
c0007328:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000732d:	50                   	push   eax
c000732e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0007332:	53                   	push   ebx
c0007333:	e8 40 ff ff ff       	call   c0007278 <IDTEntry::IDTEntry(bool)>
c0007338:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000733c:	53                   	push   ebx
c000733d:	e8 a8 ff ff ff       	call   c00072ea <IDTEntry::setOffset(unsigned int)>
c0007342:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007346:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000734a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000734e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007352:	e8 b3 ff ff ff       	call   c000730a <IDT::addEntry(IDTEntry, int)>
c0007357:	83 c4 30             	add    esp,0x30
c000735a:	5b                   	pop    ebx
c000735b:	c3                   	ret    

c000735c <IDT::flush()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	66 c7 05 88 06 02 c0 ff 07 	mov    WORD PTR ds:0xc0020688,0x7ff
c0007369:	a3 8a 06 02 c0       	mov    ds:0xc002068a,eax
c000736e:	0f 01 1d 88 06 02 c0 	lidtd  ds:0xc0020688
c0007375:	c3                   	ret    

c0007376 <IDT::setup()>:
c0007376:	57                   	push   edi
c0007377:	56                   	push   esi
c0007378:	53                   	push   ebx
c0007379:	83 ec 10             	sub    esp,0x10
c000737c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007380:	6a 00                	push   0x0
c0007382:	68 d0 b8 01 c0       	push   0xc001b8d0
c0007387:	6a 00                	push   0x0
c0007389:	53                   	push   ebx
c000738a:	e8 95 ff ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c000738f:	6a 00                	push   0x0
c0007391:	68 e0 b8 01 c0       	push   0xc001b8e0
c0007396:	6a 01                	push   0x1
c0007398:	53                   	push   ebx
c0007399:	e8 86 ff ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c000739e:	83 c4 20             	add    esp,0x20
c00073a1:	6a 00                	push   0x0
c00073a3:	68 ea b8 01 c0       	push   0xc001b8ea
c00073a8:	6a 02                	push   0x2
c00073aa:	53                   	push   ebx
c00073ab:	e8 74 ff ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c00073b0:	6a 00                	push   0x0
c00073b2:	68 f4 b8 01 c0       	push   0xc001b8f4
c00073b7:	6a 03                	push   0x3
c00073b9:	53                   	push   ebx
c00073ba:	e8 65 ff ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c00073bf:	83 c4 20             	add    esp,0x20
c00073c2:	6a 00                	push   0x0
c00073c4:	68 fe b8 01 c0       	push   0xc001b8fe
c00073c9:	6a 04                	push   0x4
c00073cb:	53                   	push   ebx
c00073cc:	e8 53 ff ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c00073d1:	6a 00                	push   0x0
c00073d3:	68 08 b9 01 c0       	push   0xc001b908
c00073d8:	6a 05                	push   0x5
c00073da:	53                   	push   ebx
c00073db:	e8 44 ff ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c00073e0:	83 c4 20             	add    esp,0x20
c00073e3:	6a 00                	push   0x0
c00073e5:	68 12 b9 01 c0       	push   0xc001b912
c00073ea:	6a 06                	push   0x6
c00073ec:	53                   	push   ebx
c00073ed:	e8 32 ff ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c00073f2:	6a 00                	push   0x0
c00073f4:	68 1c b9 01 c0       	push   0xc001b91c
c00073f9:	6a 07                	push   0x7
c00073fb:	53                   	push   ebx
c00073fc:	e8 23 ff ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c0007401:	83 c4 20             	add    esp,0x20
c0007404:	6a 00                	push   0x0
c0007406:	68 26 b9 01 c0       	push   0xc001b926
c000740b:	6a 08                	push   0x8
c000740d:	53                   	push   ebx
c000740e:	e8 11 ff ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c0007413:	6a 00                	push   0x0
c0007415:	68 2e b9 01 c0       	push   0xc001b92e
c000741a:	6a 09                	push   0x9
c000741c:	53                   	push   ebx
c000741d:	e8 02 ff ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c0007422:	83 c4 20             	add    esp,0x20
c0007425:	6a 00                	push   0x0
c0007427:	68 38 b9 01 c0       	push   0xc001b938
c000742c:	6a 0a                	push   0xa
c000742e:	53                   	push   ebx
c000742f:	e8 f0 fe ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c0007434:	6a 00                	push   0x0
c0007436:	68 40 b9 01 c0       	push   0xc001b940
c000743b:	6a 0b                	push   0xb
c000743d:	53                   	push   ebx
c000743e:	e8 e1 fe ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c0007443:	83 c4 20             	add    esp,0x20
c0007446:	6a 00                	push   0x0
c0007448:	68 48 b9 01 c0       	push   0xc001b948
c000744d:	6a 0c                	push   0xc
c000744f:	53                   	push   ebx
c0007450:	e8 cf fe ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c0007455:	6a 00                	push   0x0
c0007457:	68 50 b9 01 c0       	push   0xc001b950
c000745c:	6a 0d                	push   0xd
c000745e:	53                   	push   ebx
c000745f:	e8 c0 fe ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	68 58 b9 01 c0       	push   0xc001b958
c000746e:	6a 0e                	push   0xe
c0007470:	53                   	push   ebx
c0007471:	e8 ae fe ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c0007476:	6a 00                	push   0x0
c0007478:	68 60 b9 01 c0       	push   0xc001b960
c000747d:	6a 0f                	push   0xf
c000747f:	53                   	push   ebx
c0007480:	e8 9f fe ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	6a 00                	push   0x0
c000748a:	68 6a b9 01 c0       	push   0xc001b96a
c000748f:	6a 10                	push   0x10
c0007491:	53                   	push   ebx
c0007492:	e8 8d fe ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c0007497:	6a 00                	push   0x0
c0007499:	68 74 b9 01 c0       	push   0xc001b974
c000749e:	6a 11                	push   0x11
c00074a0:	53                   	push   ebx
c00074a1:	e8 7e fe ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c00074a6:	83 c4 20             	add    esp,0x20
c00074a9:	6a 00                	push   0x0
c00074ab:	68 7e b9 01 c0       	push   0xc001b97e
c00074b0:	6a 12                	push   0x12
c00074b2:	53                   	push   ebx
c00074b3:	e8 6c fe ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c00074b8:	6a 01                	push   0x1
c00074ba:	68 18 ba 01 c0       	push   0xc001ba18
c00074bf:	6a 60                	push   0x60
c00074c1:	53                   	push   ebx
c00074c2:	e8 5d fe ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c00074c7:	83 c4 20             	add    esp,0x20
c00074ca:	6a 00                	push   0x0
c00074cc:	68 1f ba 01 c0       	push   0xc001ba1f
c00074d1:	6a 20                	push   0x20
c00074d3:	53                   	push   ebx
c00074d4:	e8 4b fe ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c00074d9:	6a 00                	push   0x0
c00074db:	68 0a ba 01 c0       	push   0xc001ba0a
c00074e0:	6a 21                	push   0x21
c00074e2:	53                   	push   ebx
c00074e3:	e8 3c fe ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c00074e8:	83 c4 20             	add    esp,0x20
c00074eb:	6a 00                	push   0x0
c00074ed:	68 11 ba 01 c0       	push   0xc001ba11
c00074f2:	6a 22                	push   0x22
c00074f4:	53                   	push   ebx
c00074f5:	e8 2a fe ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c00074fa:	6a 00                	push   0x0
c00074fc:	68 88 b9 01 c0       	push   0xc001b988
c0007501:	6a 23                	push   0x23
c0007503:	53                   	push   ebx
c0007504:	e8 1b fe ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c0007509:	83 c4 20             	add    esp,0x20
c000750c:	6a 00                	push   0x0
c000750e:	68 92 b9 01 c0       	push   0xc001b992
c0007513:	6a 24                	push   0x24
c0007515:	53                   	push   ebx
c0007516:	e8 09 fe ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c000751b:	6a 00                	push   0x0
c000751d:	68 9c b9 01 c0       	push   0xc001b99c
c0007522:	6a 25                	push   0x25
c0007524:	53                   	push   ebx
c0007525:	e8 fa fd ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c000752a:	83 c4 20             	add    esp,0x20
c000752d:	6a 00                	push   0x0
c000752f:	68 a6 b9 01 c0       	push   0xc001b9a6
c0007534:	6a 26                	push   0x26
c0007536:	53                   	push   ebx
c0007537:	e8 e8 fd ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c000753c:	6a 00                	push   0x0
c000753e:	68 b0 b9 01 c0       	push   0xc001b9b0
c0007543:	6a 27                	push   0x27
c0007545:	53                   	push   ebx
c0007546:	e8 d9 fd ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c000754b:	83 c4 20             	add    esp,0x20
c000754e:	6a 00                	push   0x0
c0007550:	68 ba b9 01 c0       	push   0xc001b9ba
c0007555:	6a 28                	push   0x28
c0007557:	53                   	push   ebx
c0007558:	e8 c7 fd ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c000755d:	6a 00                	push   0x0
c000755f:	68 c4 b9 01 c0       	push   0xc001b9c4
c0007564:	6a 29                	push   0x29
c0007566:	53                   	push   ebx
c0007567:	e8 b8 fd ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c000756c:	83 c4 20             	add    esp,0x20
c000756f:	6a 00                	push   0x0
c0007571:	68 ce b9 01 c0       	push   0xc001b9ce
c0007576:	6a 2a                	push   0x2a
c0007578:	53                   	push   ebx
c0007579:	e8 a6 fd ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c000757e:	6a 00                	push   0x0
c0007580:	68 d8 b9 01 c0       	push   0xc001b9d8
c0007585:	6a 2b                	push   0x2b
c0007587:	53                   	push   ebx
c0007588:	e8 97 fd ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c000758d:	83 c4 20             	add    esp,0x20
c0007590:	6a 00                	push   0x0
c0007592:	68 e2 b9 01 c0       	push   0xc001b9e2
c0007597:	6a 2c                	push   0x2c
c0007599:	53                   	push   ebx
c000759a:	e8 85 fd ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c000759f:	6a 00                	push   0x0
c00075a1:	68 ec b9 01 c0       	push   0xc001b9ec
c00075a6:	6a 2d                	push   0x2d
c00075a8:	53                   	push   ebx
c00075a9:	e8 76 fd ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c00075ae:	83 c4 20             	add    esp,0x20
c00075b1:	6a 00                	push   0x0
c00075b3:	68 f6 b9 01 c0       	push   0xc001b9f6
c00075b8:	6a 2e                	push   0x2e
c00075ba:	53                   	push   ebx
c00075bb:	e8 64 fd ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c00075c0:	6a 00                	push   0x0
c00075c2:	68 00 ba 01 c0       	push   0xc001ba00
c00075c7:	6a 2f                	push   0x2f
c00075c9:	53                   	push   ebx
c00075ca:	e8 55 fd ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c00075cf:	83 c4 20             	add    esp,0x20
c00075d2:	6a 00                	push   0x0
c00075d4:	68 56 ba 01 c0       	push   0xc001ba56
c00075d9:	6a 30                	push   0x30
c00075db:	53                   	push   ebx
c00075dc:	e8 43 fd ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c00075e1:	6a 00                	push   0x0
c00075e3:	68 60 ba 01 c0       	push   0xc001ba60
c00075e8:	6a 31                	push   0x31
c00075ea:	53                   	push   ebx
c00075eb:	e8 34 fd ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c00075f0:	83 c4 20             	add    esp,0x20
c00075f3:	6a 00                	push   0x0
c00075f5:	68 6a ba 01 c0       	push   0xc001ba6a
c00075fa:	6a 32                	push   0x32
c00075fc:	53                   	push   ebx
c00075fd:	e8 22 fd ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c0007602:	6a 00                	push   0x0
c0007604:	68 74 ba 01 c0       	push   0xc001ba74
c0007609:	6a 33                	push   0x33
c000760b:	53                   	push   ebx
c000760c:	e8 13 fd ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c0007611:	83 c4 20             	add    esp,0x20
c0007614:	6a 00                	push   0x0
c0007616:	68 7e ba 01 c0       	push   0xc001ba7e
c000761b:	6a 34                	push   0x34
c000761d:	53                   	push   ebx
c000761e:	e8 01 fd ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c0007623:	6a 00                	push   0x0
c0007625:	68 88 ba 01 c0       	push   0xc001ba88
c000762a:	6a 35                	push   0x35
c000762c:	53                   	push   ebx
c000762d:	e8 f2 fc ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c0007632:	83 c4 20             	add    esp,0x20
c0007635:	6a 00                	push   0x0
c0007637:	68 92 ba 01 c0       	push   0xc001ba92
c000763c:	6a 36                	push   0x36
c000763e:	53                   	push   ebx
c000763f:	e8 e0 fc ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c0007644:	6a 00                	push   0x0
c0007646:	68 9c ba 01 c0       	push   0xc001ba9c
c000764b:	6a 37                	push   0x37
c000764d:	53                   	push   ebx
c000764e:	e8 d1 fc ff ff       	call   c0007324 <IDT::addEntry(int, void (*)(), bool)>
c0007653:	83 c4 1c             	add    esp,0x1c
c0007656:	6a 03                	push   0x3
c0007658:	6a 02                	push   0x2
c000765a:	ff 35 70 07 02 c0    	push   DWORD PTR ds:0xc0020770
c0007660:	e8 81 23 00 00       	call   c00099e6 <VAS::allocatePages(int, int)>
c0007665:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000766c:	89 c6                	mov    esi,eax
c000766e:	e8 92 01 00 00       	call   c0007805 <malloc>
c0007673:	81 c6 00 20 00 00    	add    esi,0x2000
c0007679:	89 04 24             	mov    DWORD PTR [esp],eax
c000767c:	89 c7                	mov    edi,eax
c000767e:	e8 0d 15 00 00       	call   c0008b90 <TSS::TSS()>
c0007683:	83 c4 0c             	add    esp,0xc
c0007686:	68 26 b9 01 c0       	push   0xc001b926
c000768b:	56                   	push   esi
c000768c:	57                   	push   edi
c000768d:	e8 42 15 00 00       	call   c0008bd4 <TSS::setup(unsigned long, unsigned long)>
c0007692:	89 c6                	mov    esi,eax
c0007694:	58                   	pop    eax
c0007695:	5a                   	pop    edx
c0007696:	6a 00                	push   0x0
c0007698:	8d 44 24 14          	lea    eax,[esp+0x14]
c000769c:	50                   	push   eax
c000769d:	e8 d6 fb ff ff       	call   c0007278 <IDTEntry::IDTEntry(bool)>
c00076a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076a6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00076ab:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00076b2:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00076b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076bc:	80 ce 05             	or     dh,0x5
c00076bf:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00076c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00076c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076ca:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00076cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00076d0:	e8 87 fc ff ff       	call   c000735c <IDT::flush()>
c00076d5:	83 c4 20             	add    esp,0x20
c00076d8:	5b                   	pop    ebx
c00076d9:	5e                   	pop    esi
c00076da:	5f                   	pop    edi
c00076db:	c3                   	ret    

c00076dc <sbrk>:
c00076dc:	55                   	push   ebp
c00076dd:	57                   	push   edi
c00076de:	56                   	push   esi
c00076df:	53                   	push   ebx
c00076e0:	83 ec 1c             	sub    esp,0x1c
c00076e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00076e7:	85 c0                	test   eax,eax
c00076e9:	74 5f                	je     c000774a <sbrk+0x6e>
c00076eb:	78 64                	js     c0007751 <sbrk+0x75>
c00076ed:	8b 15 ec f3 01 c0    	mov    edx,DWORD PTR ds:0xc001f3ec
c00076f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076f7:	05 ff 0f 00 00       	add    eax,0xfff
c00076fc:	89 c5                	mov    ebp,eax
c00076fe:	78 69                	js     c0007769 <sbrk+0x8d>
c0007700:	c1 fd 0c             	sar    ebp,0xc
c0007703:	bb 00 00 00 00       	mov    ebx,0x0
c0007708:	8b 35 70 07 02 c0    	mov    esi,DWORD PTR ds:0xc0020770
c000770e:	8b 3d ec f3 01 c0    	mov    edi,DWORD PTR ds:0xc001f3ec
c0007714:	e8 c8 03 00 00       	call   c0007ae1 <Phys::allocatePage()>
c0007719:	68 01 04 00 00       	push   0x401
c000771e:	57                   	push   edi
c000771f:	50                   	push   eax
c0007720:	56                   	push   esi
c0007721:	e8 bc 21 00 00       	call   c00098e2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007726:	81 05 ec f3 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f3ec,0x1000
c0007730:	43                   	inc    ebx
c0007731:	83 c4 10             	add    esp,0x10
c0007734:	39 dd                	cmp    ebp,ebx
c0007736:	75 d0                	jne    c0007708 <sbrk+0x2c>
c0007738:	0f 20 d8             	mov    eax,cr3
c000773b:	0f 22 d8             	mov    cr3,eax
c000773e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007742:	83 c4 1c             	add    esp,0x1c
c0007745:	5b                   	pop    ebx
c0007746:	5e                   	pop    esi
c0007747:	5f                   	pop    edi
c0007748:	5d                   	pop    ebp
c0007749:	c3                   	ret    
c000774a:	a1 ec f3 01 c0       	mov    eax,ds:0xc001f3ec
c000774f:	eb f1                	jmp    c0007742 <sbrk+0x66>
c0007751:	83 ec 08             	sub    esp,0x8
c0007754:	50                   	push   eax
c0007755:	68 a4 d3 01 c0       	push   0xc001d3a4
c000775a:	e8 41 2d 00 00       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c000775f:	83 c4 10             	add    esp,0x10
c0007762:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007767:	eb d9                	jmp    c0007742 <sbrk+0x66>
c0007769:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000776f:	eb 8f                	jmp    c0007700 <sbrk+0x24>

c0007771 <mmap>:
c0007771:	83 ec 18             	sub    esp,0x18
c0007774:	68 d4 d3 01 c0       	push   0xc001d3d4
c0007779:	e8 85 89 00 00       	call   c0010103 <KePanic(char const*)>
c000777e:	b8 00 00 00 00       	mov    eax,0x0
c0007783:	83 c4 1c             	add    esp,0x1c
c0007786:	c3                   	ret    

c0007787 <munmap>:
c0007787:	83 ec 18             	sub    esp,0x18
c000778a:	68 d9 d3 01 c0       	push   0xc001d3d9
c000778f:	e8 6f 89 00 00       	call   c0010103 <KePanic(char const*)>
c0007794:	b8 00 00 00 00       	mov    eax,0x0
c0007799:	83 c4 1c             	add    esp,0x1c
c000779c:	c3                   	ret    

c000779d <liballoc_lock()>:
c000779d:	fa                   	cli    
c000779e:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c00077a4:	b8 00 00 00 00       	mov    eax,0x0
c00077a9:	c3                   	ret    

c00077aa <liballoc_unlock()>:
c00077aa:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c00077af:	48                   	dec    eax
c00077b0:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c00077b5:	75 01                	jne    c00077b8 <liballoc_unlock()+0xe>
c00077b7:	fb                   	sti    
c00077b8:	b8 00 00 00 00       	mov    eax,0x0
c00077bd:	c3                   	ret    

c00077be <liballoc_alloc(int)>:
c00077be:	83 ec 10             	sub    esp,0x10
c00077c1:	6a 01                	push   0x1
c00077c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00077c7:	ff 35 70 07 02 c0    	push   DWORD PTR ds:0xc0020770
c00077cd:	e8 14 22 00 00       	call   c00099e6 <VAS::allocatePages(int, int)>
c00077d2:	83 c4 1c             	add    esp,0x1c
c00077d5:	c3                   	ret    

c00077d6 <liballoc_free(void*, int)>:
c00077d6:	83 ec 14             	sub    esp,0x14
c00077d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00077dd:	ff 35 70 07 02 c0    	push   DWORD PTR ds:0xc0020770
c00077e3:	e8 ba 1e 00 00       	call   c00096a2 <VAS::freeAllocatedPages(unsigned long)>
c00077e8:	b8 00 00 00 00       	mov    eax,0x0
c00077ed:	83 c4 1c             	add    esp,0x1c
c00077f0:	c3                   	ret    

c00077f1 <realloc>:
c00077f1:	83 ec 14             	sub    esp,0x14
c00077f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077fc:	e8 30 9d ff ff       	call   c0001531 <dlrealloc>
c0007801:	83 c4 1c             	add    esp,0x1c
c0007804:	c3                   	ret    

c0007805 <malloc>:
c0007805:	83 ec 18             	sub    esp,0x18
c0007808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000780c:	e8 e3 97 ff ff       	call   c0000ff4 <dlmalloc>
c0007811:	83 c4 1c             	add    esp,0x1c
c0007814:	c3                   	ret    

c0007815 <free>:
c0007815:	83 ec 18             	sub    esp,0x18
c0007818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000781c:	e8 78 94 ff ff       	call   c0000c99 <dlfree>
c0007821:	83 c4 1c             	add    esp,0x1c
c0007824:	c3                   	ret    

c0007825 <rfree>:
c0007825:	83 ec 18             	sub    esp,0x18
c0007828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000782c:	e8 68 94 ff ff       	call   c0000c99 <dlfree>
c0007831:	83 c4 1c             	add    esp,0x1c
c0007834:	c3                   	ret    

c0007835 <calloc>:
c0007835:	56                   	push   esi
c0007836:	53                   	push   ebx
c0007837:	83 ec 10             	sub    esp,0x10
c000783a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000783e:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007843:	53                   	push   ebx
c0007844:	e8 bc ff ff ff       	call   c0007805 <malloc>
c0007849:	89 c6                	mov    esi,eax
c000784b:	83 c4 0c             	add    esp,0xc
c000784e:	53                   	push   ebx
c000784f:	6a 00                	push   0x0
c0007851:	50                   	push   eax
c0007852:	e8 79 8c ff ff       	call   c00004d0 <memset>
c0007857:	89 f0                	mov    eax,esi
c0007859:	83 c4 14             	add    esp,0x14
c000785c:	5b                   	pop    ebx
c000785d:	5e                   	pop    esi
c000785e:	c3                   	ret    

c000785f <KeEntryPoint>:
c000785f:	57                   	push   edi
c0007860:	bf f9 03 00 00       	mov    edi,0x3f9
c0007865:	56                   	push   esi
c0007866:	89 fa                	mov    edx,edi
c0007868:	53                   	push   ebx
c0007869:	31 f6                	xor    esi,esi
c000786b:	83 ec 2c             	sub    esp,0x2c
c000786e:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007873:	a3 90 06 02 c0       	mov    ds:0xc0020690,eax
c0007878:	89 f0                	mov    eax,esi
c000787a:	ee                   	out    dx,al
c000787b:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007880:	b0 80                	mov    al,0x80
c0007882:	89 da                	mov    edx,ebx
c0007884:	ee                   	out    dx,al
c0007885:	b1 03                	mov    cl,0x3
c0007887:	ba f8 03 00 00       	mov    edx,0x3f8
c000788c:	88 c8                	mov    al,cl
c000788e:	ee                   	out    dx,al
c000788f:	89 f0                	mov    eax,esi
c0007891:	89 fa                	mov    edx,edi
c0007893:	ee                   	out    dx,al
c0007894:	88 c8                	mov    al,cl
c0007896:	89 da                	mov    edx,ebx
c0007898:	ee                   	out    dx,al
c0007899:	b0 c7                	mov    al,0xc7
c000789b:	ba fa 03 00 00       	mov    edx,0x3fa
c00078a0:	ee                   	out    dx,al
c00078a1:	b0 0b                	mov    al,0xb
c00078a3:	ba fc 03 00 00       	mov    edx,0x3fc
c00078a8:	ee                   	out    dx,al
c00078a9:	68 e0 d3 01 c0       	push   0xc001d3e0
c00078ae:	e8 ed 2b 00 00       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c00078b3:	e8 65 81 00 00       	call   c000fa1d <KeDisplaySplashScreen()>
c00078b8:	a1 24 05 00 00       	mov    eax,ds:0x524
c00078bd:	05 ff 0f 00 00       	add    eax,0xfff
c00078c2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00078c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ca:	e8 64 03 00 00       	call   c0007c33 <Phys::physicalMemorySetup(unsigned int)>
c00078cf:	e8 38 1b 00 00       	call   c000940c <Virt::virtualMemorySetup()>
c00078d4:	58                   	pop    eax
c00078d5:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00078d9:	53                   	push   ebx
c00078da:	e8 e9 1b 00 00       	call   c00094c8 <VAS::VAS()>
c00078df:	89 1d 70 07 02 c0    	mov    DWORD PTR ds:0xc0020770,ebx
c00078e5:	e8 70 47 01 00       	call   c001c05a <_init>
c00078ea:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078f1:	e8 0f ff ff ff       	call   c0007805 <malloc>
c00078f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00078f9:	89 c6                	mov    esi,eax
c00078fb:	e8 7e f2 ff ff       	call   c0006b7e <Computer::Computer()>
c0007900:	6a 00                	push   0x0
c0007902:	89 35 78 06 02 c0    	mov    DWORD PTR ds:0xc0020678,esi
c0007908:	6a 00                	push   0x0
c000790a:	6a 00                	push   0x0
c000790c:	56                   	push   esi
c000790d:	e8 12 f6 ff ff       	call   c0006f24 <Computer::open(int, int, void*)>
c0007912:	83 c4 14             	add    esp,0x14
c0007915:	53                   	push   ebx
c0007916:	e8 63 1e 00 00       	call   c000977e <VAS::~VAS()>
c000791b:	83 c4 30             	add    esp,0x30
c000791e:	5b                   	pop    ebx
c000791f:	5e                   	pop    esi
c0007920:	5f                   	pop    edi
c0007921:	c3                   	ret    

c0007922 <Phys::allocateDMA(unsigned long)>:
c0007922:	55                   	push   ebp
c0007923:	31 ed                	xor    ebp,ebp
c0007925:	57                   	push   edi
c0007926:	56                   	push   esi
c0007927:	53                   	push   ebx
c0007928:	31 db                	xor    ebx,ebx
c000792a:	83 ec 1c             	sub    esp,0x1c
c000792d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007931:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007939:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000793f:	31 c0                	xor    eax,eax
c0007941:	c1 ef 0c             	shr    edi,0xc
c0007944:	eb 19                	jmp    c000795f <Phys::allocateDMA(unsigned long)+0x3d>
c0007946:	85 c0                	test   eax,eax
c0007948:	75 06                	jne    c0007950 <Phys::allocateDMA(unsigned long)+0x2e>
c000794a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000794e:	89 dd                	mov    ebp,ebx
c0007950:	8d 70 01             	lea    esi,[eax+0x1]
c0007953:	39 f7                	cmp    edi,esi
c0007955:	74 33                	je     c000798a <Phys::allocateDMA(unsigned long)+0x68>
c0007957:	89 f0                	mov    eax,esi
c0007959:	43                   	inc    ebx
c000795a:	83 fb 0f             	cmp    ebx,0xf
c000795d:	7f 11                	jg     c0007970 <Phys::allocateDMA(unsigned long)+0x4e>
c000795f:	80 bb ac 06 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf954],0x0
c0007966:	74 de                	je     c0007946 <Phys::allocateDMA(unsigned long)+0x24>
c0007968:	31 c0                	xor    eax,eax
c000796a:	43                   	inc    ebx
c000796b:	83 fb 0f             	cmp    ebx,0xf
c000796e:	7e ef                	jle    c000795f <Phys::allocateDMA(unsigned long)+0x3d>
c0007970:	83 ec 0c             	sub    esp,0xc
c0007973:	68 f8 d3 01 c0       	push   0xc001d3f8
c0007978:	e8 86 87 00 00       	call   c0010103 <KePanic(char const*)>
c000797d:	83 c4 10             	add    esp,0x10
c0007980:	31 c0                	xor    eax,eax
c0007982:	83 c4 1c             	add    esp,0x1c
c0007985:	5b                   	pop    ebx
c0007986:	5e                   	pop    esi
c0007987:	5f                   	pop    edi
c0007988:	5d                   	pop    ebp
c0007989:	c3                   	ret    
c000798a:	89 e9                	mov    ecx,ebp
c000798c:	c1 f9 04             	sar    ecx,0x4
c000798f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007993:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007997:	89 ca                	mov    edx,ecx
c0007999:	4a                   	dec    edx
c000799a:	79 03                	jns    c000799f <Phys::allocateDMA(unsigned long)+0x7d>
c000799c:	8d 51 0e             	lea    edx,[ecx+0xe]
c000799f:	c1 fa 04             	sar    edx,0x4
c00079a2:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00079a6:	74 08                	je     c00079b0 <Phys::allocateDMA(unsigned long)+0x8e>
c00079a8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00079ac:	31 c0                	xor    eax,eax
c00079ae:	eb ba                	jmp    c000796a <Phys::allocateDMA(unsigned long)+0x48>
c00079b0:	85 f6                	test   esi,esi
c00079b2:	74 15                	je     c00079c9 <Phys::allocateDMA(unsigned long)+0xa7>
c00079b4:	8d 95 ac 06 02 c0    	lea    edx,[ebp-0x3ffdf954]
c00079ba:	8d 84 05 ad 06 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf953]
c00079c1:	c6 02 01             	mov    BYTE PTR [edx],0x1
c00079c4:	42                   	inc    edx
c00079c5:	39 d0                	cmp    eax,edx
c00079c7:	75 f8                	jne    c00079c1 <Phys::allocateDMA(unsigned long)+0x9f>
c00079c9:	01 3d a4 06 02 c0    	add    DWORD PTR ds:0xc00206a4,edi
c00079cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079d3:	85 c0                	test   eax,eax
c00079d5:	74 17                	je     c00079ee <Phys::allocateDMA(unsigned long)+0xcc>
c00079d7:	83 ec 0c             	sub    esp,0xc
c00079da:	68 f8 d3 01 c0       	push   0xc001d3f8
c00079df:	e8 1f 87 00 00       	call   c0010103 <KePanic(char const*)>
c00079e4:	83 c4 10             	add    esp,0x10
c00079e7:	89 f0                	mov    eax,esi
c00079e9:	e9 6b ff ff ff       	jmp    c0007959 <Phys::allocateDMA(unsigned long)+0x37>
c00079ee:	c1 e5 0c             	shl    ebp,0xc
c00079f1:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079f7:	eb 89                	jmp    c0007982 <Phys::allocateDMA(unsigned long)+0x60>

c00079f9 <Phys::freeDMA(unsigned long, unsigned long)>:
c00079f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079fd:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007a03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a07:	c1 ea 0c             	shr    edx,0xc
c0007a0a:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007a0f:	29 15 a4 06 02 c0    	sub    DWORD PTR ds:0xc00206a4,edx
c0007a15:	c1 e8 0c             	shr    eax,0xc
c0007a18:	85 d2                	test   edx,edx
c0007a1a:	74 0f                	je     c0007a2b <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007a1c:	05 ac 06 02 c0       	add    eax,0xc00206ac
c0007a21:	01 c2                	add    edx,eax
c0007a23:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007a26:	40                   	inc    eax
c0007a27:	39 d0                	cmp    eax,edx
c0007a29:	75 f8                	jne    c0007a23 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007a2b:	c3                   	ret    

c0007a2c <Phys::setPageState(unsigned long, bool)>:
c0007a2c:	56                   	push   esi
c0007a2d:	ba 01 00 00 00       	mov    edx,0x1
c0007a32:	53                   	push   ebx
c0007a33:	8b 35 f0 f3 01 c0    	mov    esi,DWORD PTR ds:0xc001f3f0
c0007a39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007a3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007a41:	89 c8                	mov    eax,ecx
c0007a43:	83 e1 07             	and    ecx,0x7
c0007a46:	c1 e8 03             	shr    eax,0x3
c0007a49:	d3 e3                	shl    ebx,cl
c0007a4b:	01 c6                	add    esi,eax
c0007a4d:	d3 e2                	shl    edx,cl
c0007a4f:	f7 d2                	not    edx
c0007a51:	20 16                	and    BYTE PTR [esi],dl
c0007a53:	03 05 f0 f3 01 c0    	add    eax,DWORD PTR ds:0xc001f3f0
c0007a59:	08 18                	or     BYTE PTR [eax],bl
c0007a5b:	5b                   	pop    ebx
c0007a5c:	5e                   	pop    esi
c0007a5d:	c3                   	ret    

c0007a5e <Phys::getPageState(unsigned long)>:
c0007a5e:	53                   	push   ebx
c0007a5f:	8b 15 f0 f3 01 c0    	mov    edx,DWORD PTR ds:0xc001f3f0
c0007a65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a69:	31 db                	xor    ebx,ebx
c0007a6b:	89 c8                	mov    eax,ecx
c0007a6d:	83 e1 07             	and    ecx,0x7
c0007a70:	c1 e8 03             	shr    eax,0x3
c0007a73:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a76:	89 d8                	mov    eax,ebx
c0007a78:	5b                   	pop    ebx
c0007a79:	d3 f8                	sar    eax,cl
c0007a7b:	83 e0 01             	and    eax,0x1
c0007a7e:	c3                   	ret    

c0007a7f <Phys::freePage(unsigned long)>:
c0007a7f:	53                   	push   ebx
c0007a80:	83 ec 08             	sub    esp,0x8
c0007a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a87:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a8d:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a93:	76 3a                	jbe    c0007acf <Phys::freePage(unsigned long)+0x50>
c0007a95:	c1 e8 0c             	shr    eax,0xc
c0007a98:	50                   	push   eax
c0007a99:	89 c3                	mov    ebx,eax
c0007a9b:	e8 be ff ff ff       	call   c0007a5e <Phys::getPageState(unsigned long)>
c0007aa0:	5a                   	pop    edx
c0007aa1:	84 c0                	test   al,al
c0007aa3:	74 19                	je     c0007abe <Phys::freePage(unsigned long)+0x3f>
c0007aa5:	83 ec 08             	sub    esp,0x8
c0007aa8:	ff 0d a4 06 02 c0    	dec    DWORD PTR ds:0xc00206a4
c0007aae:	6a 00                	push   0x0
c0007ab0:	53                   	push   ebx
c0007ab1:	e8 76 ff ff ff       	call   c0007a2c <Phys::setPageState(unsigned long, bool)>
c0007ab6:	83 c4 10             	add    esp,0x10
c0007ab9:	83 c4 08             	add    esp,0x8
c0007abc:	5b                   	pop    ebx
c0007abd:	c3                   	ret    
c0007abe:	c7 44 24 10 9d d4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d49d
c0007ac6:	83 c4 08             	add    esp,0x8
c0007ac9:	5b                   	pop    ebx
c0007aca:	e9 34 86 00 00       	jmp    c0010103 <KePanic(char const*)>
c0007acf:	68 00 10 00 00       	push   0x1000
c0007ad4:	50                   	push   eax
c0007ad5:	e8 1f ff ff ff       	call   c00079f9 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ada:	59                   	pop    ecx
c0007adb:	5b                   	pop    ebx
c0007adc:	83 c4 08             	add    esp,0x8
c0007adf:	5b                   	pop    ebx
c0007ae0:	c3                   	ret    

c0007ae1 <Phys::allocatePage()>:
c0007ae1:	56                   	push   esi
c0007ae2:	53                   	push   ebx
c0007ae3:	83 ec 14             	sub    esp,0x14
c0007ae6:	8b 35 98 06 02 c0    	mov    esi,DWORD PTR ds:0xc0020698
c0007aec:	89 f3                	mov    ebx,esi
c0007aee:	eb 0a                	jmp    c0007afa <Phys::allocatePage()+0x19>
c0007af0:	89 1d 98 06 02 c0    	mov    DWORD PTR ds:0xc0020698,ebx
c0007af6:	39 de                	cmp    esi,ebx
c0007af8:	74 24                	je     c0007b1e <Phys::allocatePage()+0x3d>
c0007afa:	53                   	push   ebx
c0007afb:	e8 5e ff ff ff       	call   c0007a5e <Phys::getPageState(unsigned long)>
c0007b00:	5a                   	pop    edx
c0007b01:	84 c0                	test   al,al
c0007b03:	74 5f                	je     c0007b64 <Phys::allocatePage()+0x83>
c0007b05:	43                   	inc    ebx
c0007b06:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007b0c:	75 e2                	jne    c0007af0 <Phys::allocatePage()+0xf>
c0007b0e:	31 db                	xor    ebx,ebx
c0007b10:	c7 05 98 06 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020698,0x0
c0007b1a:	39 de                	cmp    esi,ebx
c0007b1c:	75 dc                	jne    c0007afa <Phys::allocatePage()+0x19>
c0007b1e:	83 ec 0c             	sub    esp,0xc
c0007b21:	80 35 bc 06 02 c0 01 	xor    BYTE PTR ds:0xc00206bc,0x1
c0007b28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007b2d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007b30:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007b36:	50                   	push   eax
c0007b37:	e8 84 26 00 00       	call   c000a1c0 <VAS::scanForEviction()>
c0007b3c:	83 c4 10             	add    esp,0x10
c0007b3f:	85 c0                	test   eax,eax
c0007b41:	75 3f                	jne    c0007b82 <Phys::allocatePage()+0xa1>
c0007b43:	83 ec 0c             	sub    esp,0xc
c0007b46:	68 20 d4 01 c0       	push   0xc001d420
c0007b4b:	e8 b3 85 00 00       	call   c0010103 <KePanic(char const*)>
c0007b50:	83 c4 10             	add    esp,0x10
c0007b53:	8b 1d 98 06 02 c0    	mov    ebx,DWORD PTR ds:0xc0020698
c0007b59:	53                   	push   ebx
c0007b5a:	e8 ff fe ff ff       	call   c0007a5e <Phys::getPageState(unsigned long)>
c0007b5f:	5a                   	pop    edx
c0007b60:	84 c0                	test   al,al
c0007b62:	75 a1                	jne    c0007b05 <Phys::allocatePage()+0x24>
c0007b64:	6a 01                	push   0x1
c0007b66:	53                   	push   ebx
c0007b67:	e8 c0 fe ff ff       	call   c0007a2c <Phys::setPageState(unsigned long, bool)>
c0007b6c:	a1 98 06 02 c0       	mov    eax,ds:0xc0020698
c0007b71:	5a                   	pop    edx
c0007b72:	ff 05 a4 06 02 c0    	inc    DWORD PTR ds:0xc00206a4
c0007b78:	c1 e0 0c             	shl    eax,0xc
c0007b7b:	59                   	pop    ecx
c0007b7c:	83 c4 14             	add    esp,0x14
c0007b7f:	5b                   	pop    ebx
c0007b80:	5e                   	pop    esi
c0007b81:	c3                   	ret    
c0007b82:	83 ec 08             	sub    esp,0x8
c0007b85:	89 c2                	mov    edx,eax
c0007b87:	6a 01                	push   0x1
c0007b89:	c1 ea 0c             	shr    edx,0xc
c0007b8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b90:	52                   	push   edx
c0007b91:	e8 96 fe ff ff       	call   c0007a2c <Phys::setPageState(unsigned long, bool)>
c0007b96:	83 c4 10             	add    esp,0x10
c0007b99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b9d:	eb dd                	jmp    c0007b7c <Phys::allocatePage()+0x9b>

c0007b9f <Phys::allocateContiguousPages(int)>:
c0007b9f:	57                   	push   edi
c0007ba0:	56                   	push   esi
c0007ba1:	53                   	push   ebx
c0007ba2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ba6:	fa                   	cli    
c0007ba7:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c0007bad:	31 db                	xor    ebx,ebx
c0007baf:	85 db                	test   ebx,ebx
c0007bb1:	75 11                	jne    c0007bc4 <Phys::allocateContiguousPages(int)+0x25>
c0007bb3:	e8 29 ff ff ff       	call   c0007ae1 <Phys::allocatePage()>
c0007bb8:	83 fe 01             	cmp    esi,0x1
c0007bbb:	89 c7                	mov    edi,eax
c0007bbd:	74 21                	je     c0007be0 <Phys::allocateContiguousPages(int)+0x41>
c0007bbf:	bb 01 00 00 00       	mov    ebx,0x1
c0007bc4:	e8 18 ff ff ff       	call   c0007ae1 <Phys::allocatePage()>
c0007bc9:	89 da                	mov    edx,ebx
c0007bcb:	c1 e2 0c             	shl    edx,0xc
c0007bce:	01 fa                	add    edx,edi
c0007bd0:	39 c2                	cmp    edx,eax
c0007bd2:	74 20                	je     c0007bf4 <Phys::allocateContiguousPages(int)+0x55>
c0007bd4:	bb 01 00 00 00       	mov    ebx,0x1
c0007bd9:	89 c7                	mov    edi,eax
c0007bdb:	83 fe 01             	cmp    esi,0x1
c0007bde:	75 e4                	jne    c0007bc4 <Phys::allocateContiguousPages(int)+0x25>
c0007be0:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0007be5:	48                   	dec    eax
c0007be6:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0007beb:	75 01                	jne    c0007bee <Phys::allocateContiguousPages(int)+0x4f>
c0007bed:	fb                   	sti    
c0007bee:	89 f8                	mov    eax,edi
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    
c0007bf4:	43                   	inc    ebx
c0007bf5:	39 f3                	cmp    ebx,esi
c0007bf7:	75 b6                	jne    c0007baf <Phys::allocateContiguousPages(int)+0x10>
c0007bf9:	eb e5                	jmp    c0007be0 <Phys::allocateContiguousPages(int)+0x41>

c0007bfb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007bfb:	56                   	push   esi
c0007bfc:	53                   	push   ebx
c0007bfd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007c01:	39 1d 9c 06 02 c0    	cmp    DWORD PTR ds:0xc002069c,ebx
c0007c07:	73 06                	jae    c0007c0f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007c09:	89 1d 9c 06 02 c0    	mov    DWORD PTR ds:0xc002069c,ebx
c0007c0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c13:	c1 eb 0c             	shr    ebx,0xc
c0007c16:	c1 e8 0c             	shr    eax,0xc
c0007c19:	39 d8                	cmp    eax,ebx
c0007c1b:	73 13                	jae    c0007c30 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007c1d:	6a 00                	push   0x0
c0007c1f:	8d 70 01             	lea    esi,[eax+0x1]
c0007c22:	50                   	push   eax
c0007c23:	e8 04 fe ff ff       	call   c0007a2c <Phys::setPageState(unsigned long, bool)>
c0007c28:	5a                   	pop    edx
c0007c29:	89 f0                	mov    eax,esi
c0007c2b:	59                   	pop    ecx
c0007c2c:	39 f3                	cmp    ebx,esi
c0007c2e:	75 ed                	jne    c0007c1d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007c30:	5b                   	pop    ebx
c0007c31:	5e                   	pop    esi
c0007c32:	c3                   	ret    

c0007c33 <Phys::physicalMemorySetup(unsigned int)>:
c0007c33:	55                   	push   ebp
c0007c34:	57                   	push   edi
c0007c35:	56                   	push   esi
c0007c36:	53                   	push   ebx
c0007c37:	31 db                	xor    ebx,ebx
c0007c39:	83 ec 40             	sub    esp,0x40
c0007c3c:	6a 10                	push   0x10
c0007c3e:	6a 00                	push   0x0
c0007c40:	68 ac 06 02 c0       	push   0xc00206ac
c0007c45:	e8 86 88 ff ff       	call   c00004d0 <memset>
c0007c4a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c4e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c53:	05 00 10 00 00       	add    eax,0x1000
c0007c58:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c5c:	5a                   	pop    edx
c0007c5d:	59                   	pop    ecx
c0007c5e:	50                   	push   eax
c0007c5f:	68 b3 d4 01 c0       	push   0xc001d4b3
c0007c64:	e8 37 28 00 00       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0007c69:	83 c4 10             	add    esp,0x10
c0007c6c:	83 ec 08             	sub    esp,0x8
c0007c6f:	6a 01                	push   0x1
c0007c71:	53                   	push   ebx
c0007c72:	43                   	inc    ebx
c0007c73:	e8 b4 fd ff ff       	call   c0007a2c <Phys::setPageState(unsigned long, bool)>
c0007c78:	83 c4 10             	add    esp,0x10
c0007c7b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c81:	75 e9                	jne    c0007c6c <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c83:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c89:	66 85 c0             	test   ax,ax
c0007c8c:	0f 84 97 01 00 00    	je     c0007e29 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c92:	89 c7                	mov    edi,eax
c0007c94:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c9c:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007ca2:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007ca7:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007cab:	eb 15                	jmp    c0007cc2 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007cad:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007cb1:	83 c3 18             	add    ebx,0x18
c0007cb4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007cb8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007cbc:	0f 84 77 01 00 00    	je     c0007e39 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cc2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007cc5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007cc8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007ccb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ccf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007cd3:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007cd5:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007cd8:	01 f0                	add    eax,esi
c0007cda:	55                   	push   ebp
c0007cdb:	11 fa                	adc    edx,edi
c0007cdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ce1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ce5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ce9:	50                   	push   eax
c0007cea:	56                   	push   esi
c0007ceb:	68 50 d4 01 c0       	push   0xc001d450
c0007cf0:	e8 ab 27 00 00       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0007cf5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cf9:	83 c4 10             	add    esp,0x10
c0007cfc:	09 f8                	or     eax,edi
c0007cfe:	0f 85 35 01 00 00    	jne    c0007e39 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d04:	4d                   	dec    ebp
c0007d05:	75 a6                	jne    c0007cad <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d07:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007d0b:	ba 00 00 08 00       	mov    edx,0x80000
c0007d10:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007d14:	39 f2                	cmp    edx,esi
c0007d16:	89 c1                	mov    ecx,eax
c0007d18:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007d20:	19 f9                	sbb    ecx,edi
c0007d22:	0f 82 a7 00 00 00    	jb     c0007dcf <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d28:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007d2c:	89 c1                	mov    ecx,eax
c0007d2e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007d32:	0f 83 97 00 00 00    	jae    c0007dcf <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d38:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007d3d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d41:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d45:	39 fa                	cmp    edx,edi
c0007d47:	19 e8                	sbb    eax,ebp
c0007d49:	0f 82 9a 01 00 00    	jb     c0007ee9 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d4f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d53:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d57:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d5d:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d62:	83 d5 ff             	adc    ebp,0xffffffff
c0007d65:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d69:	31 c0                	xor    eax,eax
c0007d6b:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d6f:	39 fa                	cmp    edx,edi
c0007d71:	89 c1                	mov    ecx,eax
c0007d73:	19 e9                	sbb    ecx,ebp
c0007d75:	0f 83 32 ff ff ff    	jae    c0007cad <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d7b:	be 00 00 08 00       	mov    esi,0x80000
c0007d80:	51                   	push   ecx
c0007d81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d85:	57                   	push   edi
c0007d86:	56                   	push   esi
c0007d87:	68 74 d4 01 c0       	push   0xc001d474
c0007d8c:	e8 0f 27 00 00       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0007d91:	5d                   	pop    ebp
c0007d92:	58                   	pop    eax
c0007d93:	57                   	push   edi
c0007d94:	56                   	push   esi
c0007d95:	e8 61 fe ff ff       	call   c0007bfb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d9a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007da2:	83 c4 0c             	add    esp,0xc
c0007da5:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007da9:	03 05 a8 06 02 c0    	add    eax,DWORD PTR ds:0xc00206a8
c0007daf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007db6:	a3 a8 06 02 c0       	mov    ds:0xc00206a8,eax
c0007dbb:	52                   	push   edx
c0007dbc:	50                   	push   eax
c0007dbd:	68 d9 d4 01 c0       	push   0xc001d4d9
c0007dc2:	e8 d9 26 00 00       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0007dc7:	83 c4 10             	add    esp,0x10
c0007dca:	e9 de fe ff ff       	jmp    c0007cad <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dcf:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007dd3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007dd7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ddb:	39 ea                	cmp    edx,ebp
c0007ddd:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007de1:	0f 82 c6 fe ff ff    	jb     c0007cad <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007de7:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007dec:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007df0:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007df4:	0f 83 b3 fe ff ff    	jae    c0007cad <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dfa:	39 ee                	cmp    esi,ebp
c0007dfc:	89 f8                	mov    eax,edi
c0007dfe:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007e02:	0f 83 78 ff ff ff    	jae    c0007d80 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007e10:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007e14:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007e18:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007e1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e20:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007e24:	e9 57 ff ff ff       	jmp    c0007d80 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 cb d4 01 c0       	push   0xc001d4cb
c0007e31:	e8 cd 82 00 00       	call   c0010103 <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	83 ec 08             	sub    esp,0x8
c0007e3c:	bb 60 00 00 00       	mov    ebx,0x60
c0007e41:	6a 00                	push   0x0
c0007e43:	6a 06                	push   0x6
c0007e45:	e8 e2 fb ff ff       	call   c0007a2c <Phys::setPageState(unsigned long, bool)>
c0007e4a:	58                   	pop    eax
c0007e4b:	5a                   	pop    edx
c0007e4c:	6a 00                	push   0x0
c0007e4e:	6a 07                	push   0x7
c0007e50:	e8 d7 fb ff ff       	call   c0007a2c <Phys::setPageState(unsigned long, bool)>
c0007e55:	83 05 a8 06 02 c0 02 	add    DWORD PTR ds:0xc00206a8,0x2
c0007e5c:	83 c4 10             	add    esp,0x10
c0007e5f:	83 ec 08             	sub    esp,0x8
c0007e62:	6a 00                	push   0x0
c0007e64:	53                   	push   ebx
c0007e65:	43                   	inc    ebx
c0007e66:	e8 c1 fb ff ff       	call   c0007a2c <Phys::setPageState(unsigned long, bool)>
c0007e6b:	83 c4 10             	add    esp,0x10
c0007e6e:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e74:	75 e9                	jne    c0007e5f <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e76:	a1 a8 06 02 c0       	mov    eax,ds:0xc00206a8
c0007e7b:	bb 40 01 00 00       	mov    ebx,0x140
c0007e80:	83 c0 20             	add    eax,0x20
c0007e83:	a3 a8 06 02 c0       	mov    ds:0xc00206a8,eax
c0007e88:	eb 22                	jmp    c0007eac <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e8a:	83 ec 08             	sub    esp,0x8
c0007e8d:	6a 00                	push   0x0
c0007e8f:	53                   	push   ebx
c0007e90:	43                   	inc    ebx
c0007e91:	e8 96 fb ff ff       	call   c0007a2c <Phys::setPageState(unsigned long, bool)>
c0007e96:	a1 a8 06 02 c0       	mov    eax,ds:0xc00206a8
c0007e9b:	83 c4 10             	add    esp,0x10
c0007e9e:	40                   	inc    eax
c0007e9f:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007ea5:	a3 a8 06 02 c0       	mov    ds:0xc00206a8,eax
c0007eaa:	74 07                	je     c0007eb3 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007eac:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007eb1:	7e d7                	jle    c0007e8a <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007eb3:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007eb8:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007ebd:	7f 22                	jg     c0007ee1 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007ebf:	83 ec 08             	sub    esp,0x8
c0007ec2:	6a 00                	push   0x0
c0007ec4:	53                   	push   ebx
c0007ec5:	43                   	inc    ebx
c0007ec6:	e8 61 fb ff ff       	call   c0007a2c <Phys::setPageState(unsigned long, bool)>
c0007ecb:	a1 a8 06 02 c0       	mov    eax,ds:0xc00206a8
c0007ed0:	83 c4 10             	add    esp,0x10
c0007ed3:	40                   	inc    eax
c0007ed4:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007eda:	a3 a8 06 02 c0       	mov    ds:0xc00206a8,eax
c0007edf:	75 d7                	jne    c0007eb8 <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007ee1:	83 c4 3c             	add    esp,0x3c
c0007ee4:	5b                   	pop    ebx
c0007ee5:	5e                   	pop    esi
c0007ee6:	5f                   	pop    edi
c0007ee7:	5d                   	pop    ebp
c0007ee8:	c3                   	ret    
c0007ee9:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ef1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ef9:	e9 51 fe ff ff       	jmp    c0007d4f <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007efe <Pipe::isAtty()>:
c0007efe:	31 c0                	xor    eax,eax
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::~Pipe()>:
c0007f02:	83 ec 0c             	sub    esp,0xc
c0007f05:	ba 38 d5 01 c0       	mov    edx,0xc001d538
c0007f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f0e:	89 10                	mov    DWORD PTR [eax],edx
c0007f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f14:	83 ec 0c             	sub    esp,0xc
c0007f17:	50                   	push   eax
c0007f18:	e8 cf 10 00 00       	call   c0008fec <UnixFile::~UnixFile()>
c0007f1d:	83 c4 10             	add    esp,0x10
c0007f20:	90                   	nop
c0007f21:	83 c4 0c             	add    esp,0xc
c0007f24:	c3                   	ret    
c0007f25:	90                   	nop

c0007f26 <Pipe::~Pipe()>:
c0007f26:	83 ec 0c             	sub    esp,0xc
c0007f29:	83 ec 0c             	sub    esp,0xc
c0007f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f30:	e8 cd ff ff ff       	call   c0007f02 <Pipe::~Pipe()>
c0007f35:	83 c4 10             	add    esp,0x10
c0007f38:	83 ec 08             	sub    esp,0x8
c0007f3b:	6a 20                	push   0x20
c0007f3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f41:	e8 64 24 00 00       	call   c000a3aa <operator delete(void*, unsigned long)>
c0007f46:	83 c4 10             	add    esp,0x10
c0007f49:	83 c4 0c             	add    esp,0xc
c0007f4c:	c3                   	ret    
c0007f4d:	90                   	nop

c0007f4e <Pipe::write(unsigned long long, void*, int*)>:
c0007f4e:	55                   	push   ebp
c0007f4f:	57                   	push   edi
c0007f50:	56                   	push   esi
c0007f51:	53                   	push   ebx
c0007f52:	83 ec 1c             	sub    esp,0x1c
c0007f55:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f5d:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f60:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f64:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f67:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f6b:	89 d8                	mov    eax,ebx
c0007f6d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f70:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f74:	89 d6                	mov    esi,edx
c0007f76:	89 d7                	mov    edi,edx
c0007f78:	c1 ff 1f             	sar    edi,0x1f
c0007f7b:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f7e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f82:	c1 f8 1f             	sar    eax,0x1f
c0007f85:	39 f3                	cmp    ebx,esi
c0007f87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f8f:	19 f8                	sbb    eax,edi
c0007f91:	b8 01 00 00 00       	mov    eax,0x1
c0007f96:	72 6e                	jb     c0008006 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f98:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f9b:	01 d0                	add    eax,edx
c0007f9d:	99                   	cdq    
c0007f9e:	f7 fb                	idiv   ebx
c0007fa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fa4:	29 d3                	sub    ebx,edx
c0007fa6:	89 d7                	mov    edi,edx
c0007fa8:	89 de                	mov    esi,ebx
c0007faa:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007fad:	c1 fb 1f             	sar    ebx,0x1f
c0007fb0:	39 f2                	cmp    edx,esi
c0007fb2:	19 d8                	sbb    eax,ebx
c0007fb4:	b8 00 00 00 00       	mov    eax,0x0
c0007fb9:	72 04                	jb     c0007fbf <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007fbb:	89 d0                	mov    eax,edx
c0007fbd:	29 f0                	sub    eax,esi
c0007fbf:	89 d3                	mov    ebx,edx
c0007fc1:	29 c3                	sub    ebx,eax
c0007fc3:	74 0b                	je     c0007fd0 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007fc5:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007fc8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007fcc:	89 d9                	mov    ecx,ebx
c0007fce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007fd0:	85 c0                	test   eax,eax
c0007fd2:	74 0d                	je     c0007fe1 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007fd4:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007fd8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007fdb:	89 de                	mov    esi,ebx
c0007fdd:	89 c1                	mov    ecx,eax
c0007fdf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007fe1:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007fe4:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007fe9:	75 10                	jne    c0007ffb <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007feb:	83 ec 0c             	sub    esp,0xc
c0007fee:	68 f5 d4 01 c0       	push   0xc001d4f5
c0007ff3:	e8 0b 81 00 00       	call   c0010103 <KePanic(char const*)>
c0007ff8:	83 c4 10             	add    esp,0x10
c0007ffb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fff:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008002:	89 08                	mov    DWORD PTR [eax],ecx
c0008004:	31 c0                	xor    eax,eax
c0008006:	83 c4 1c             	add    esp,0x1c
c0008009:	5b                   	pop    ebx
c000800a:	5e                   	pop    esi
c000800b:	5f                   	pop    edi
c000800c:	5d                   	pop    ebp
c000800d:	c3                   	ret    

c000800e <Pipe::read(unsigned long long, void*, int*)>:
c000800e:	55                   	push   ebp
c000800f:	57                   	push   edi
c0008010:	56                   	push   esi
c0008011:	53                   	push   ebx
c0008012:	83 ec 1c             	sub    esp,0x1c
c0008015:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008019:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000801d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008021:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008024:	89 c8                	mov    eax,ecx
c0008026:	99                   	cdq    
c0008027:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000802b:	74 24                	je     c0008051 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000802d:	39 f9                	cmp    ecx,edi
c000802f:	89 d1                	mov    ecx,edx
c0008031:	19 f1                	sbb    ecx,esi
c0008033:	73 1c                	jae    c0008051 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008035:	fa                   	cli    
c0008036:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c000803c:	e8 af b4 00 00       	call   c00134f0 <schedule()>
c0008041:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0008046:	48                   	dec    eax
c0008047:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c000804c:	75 d3                	jne    c0008021 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000804e:	fb                   	sti    
c000804f:	eb d0                	jmp    c0008021 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008051:	39 f8                	cmp    eax,edi
c0008053:	89 d1                	mov    ecx,edx
c0008055:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008058:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000805c:	19 f1                	sbb    ecx,esi
c000805e:	73 07                	jae    c0008067 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008060:	89 04 24             	mov    DWORD PTR [esp],eax
c0008063:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008067:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000806a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000806d:	29 f7                	sub    edi,esi
c000806f:	89 f8                	mov    eax,edi
c0008071:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008075:	99                   	cdq    
c0008076:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008079:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000807d:	19 d0                	sbb    eax,edx
c000807f:	73 07                	jae    c0008088 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008081:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008084:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008088:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000808b:	89 ea                	mov    edx,ebp
c000808d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008091:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0008096:	74 0d                	je     c00080a5 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0008098:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000809b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000809f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00080a5:	85 d2                	test   edx,edx
c00080a7:	74 11                	je     c00080ba <Pipe::read(unsigned long long, void*, int*)+0xac>
c00080a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080ad:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00080b0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00080b4:	89 d1                	mov    ecx,edx
c00080b6:	89 c7                	mov    edi,eax
c00080b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00080ba:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00080bd:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00080c0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00080c3:	99                   	cdq    
c00080c4:	89 f7                	mov    edi,esi
c00080c6:	03 04 24             	add    eax,DWORD PTR [esp]
c00080c9:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00080cd:	c1 ff 1f             	sar    edi,0x1f
c00080d0:	57                   	push   edi
c00080d1:	56                   	push   esi
c00080d2:	52                   	push   edx
c00080d3:	50                   	push   eax
c00080d4:	e8 67 3e 01 00       	call   c001bf40 <__umoddi3>
c00080d9:	83 c4 10             	add    esp,0x10
c00080dc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00080df:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00080e4:	75 10                	jne    c00080f6 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00080e6:	83 ec 0c             	sub    esp,0xc
c00080e9:	68 12 d5 01 c0       	push   0xc001d512
c00080ee:	e8 10 80 00 00       	call   c0010103 <KePanic(char const*)>
c00080f3:	83 c4 10             	add    esp,0x10
c00080f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080fa:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080fd:	89 10                	mov    DWORD PTR [eax],edx
c00080ff:	83 c4 1c             	add    esp,0x1c
c0008102:	31 c0                	xor    eax,eax
c0008104:	5b                   	pop    ebx
c0008105:	5e                   	pop    esi
c0008106:	5f                   	pop    edi
c0008107:	5d                   	pop    ebp
c0008108:	c3                   	ret    
c0008109:	90                   	nop

c000810a <Pipe::Pipe(int)>:
c000810a:	83 ec 0c             	sub    esp,0xc
c000810d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008111:	83 ec 08             	sub    esp,0x8
c0008114:	6a 00                	push   0x0
c0008116:	50                   	push   eax
c0008117:	e8 ee 0c 00 00       	call   c0008e0a <UnixFile::UnixFile(int)>
c000811c:	83 c4 10             	add    esp,0x10
c000811f:	ba 38 d5 01 c0       	mov    edx,0xc001d538
c0008124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008128:	89 10                	mov    DWORD PTR [eax],edx
c000812a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000812e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008132:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008139:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008144:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000814b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000814f:	83 ec 0c             	sub    esp,0xc
c0008152:	50                   	push   eax
c0008153:	e8 ad f6 ff ff       	call   c0007805 <malloc>
c0008158:	83 c4 10             	add    esp,0x10
c000815b:	89 c2                	mov    edx,eax
c000815d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008161:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008168:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000816c:	90                   	nop
c000816d:	83 c4 0c             	add    esp,0xc
c0008170:	c3                   	ret    
c0008171:	90                   	nop

c0008172 <VgaText::isAtty()>:
c0008172:	b0 01                	mov    al,0x1
c0008174:	c3                   	ret    
c0008175:	90                   	nop

c0008176 <VgaText::~VgaText()>:
c0008176:	83 ec 0c             	sub    esp,0xc
c0008179:	ba c0 d5 01 c0       	mov    edx,0xc001d5c0
c000817e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008182:	89 10                	mov    DWORD PTR [eax],edx
c0008184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008188:	83 ec 0c             	sub    esp,0xc
c000818b:	50                   	push   eax
c000818c:	e8 5b 0e 00 00       	call   c0008fec <UnixFile::~UnixFile()>
c0008191:	83 c4 10             	add    esp,0x10
c0008194:	90                   	nop
c0008195:	83 c4 0c             	add    esp,0xc
c0008198:	c3                   	ret    
c0008199:	90                   	nop

c000819a <VgaText::~VgaText()>:
c000819a:	83 ec 0c             	sub    esp,0xc
c000819d:	83 ec 0c             	sub    esp,0xc
c00081a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081a4:	e8 cd ff ff ff       	call   c0008176 <VgaText::~VgaText()>
c00081a9:	83 c4 10             	add    esp,0x10
c00081ac:	83 ec 08             	sub    esp,0x8
c00081af:	68 34 01 00 00       	push   0x134
c00081b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081b8:	e8 ed 21 00 00       	call   c000a3aa <operator delete(void*, unsigned long)>
c00081bd:	83 c4 10             	add    esp,0x10
c00081c0:	83 c4 0c             	add    esp,0xc
c00081c3:	c3                   	ret    

c00081c4 <VgaText::read(unsigned long long, void*, int*)>:
c00081c4:	83 ec 10             	sub    esp,0x10
c00081c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081cb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081d3:	e8 22 45 00 00       	call   c000c6fa <readKeyboard(VgaText*, char*, unsigned long)>
c00081d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00081dc:	89 02                	mov    DWORD PTR [edx],eax
c00081de:	31 c0                	xor    eax,eax
c00081e0:	83 c4 1c             	add    esp,0x1c
c00081e3:	c3                   	ret    

c00081e4 <setTerminalScrollLock(bool)>:
c00081e4:	c3                   	ret    

c00081e5 <doTerminalCycle()>:
c00081e5:	c3                   	ret    

c00081e6 <addToTerminalCycle(VgaText*)>:
c00081e6:	c3                   	ret    

c00081e7 <scrollTerminalScrollLock(int)>:
c00081e7:	c3                   	ret    

c00081e8 <VgaText::updateTitle()>:
c00081e8:	c3                   	ret    
c00081e9:	90                   	nop

c00081ea <VgaText::load()>:
c00081ea:	c3                   	ret    
c00081eb:	90                   	nop

c00081ec <VgaText::updateCursor()>:
c00081ec:	83 ec 14             	sub    esp,0x14
c00081ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081f3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081f6:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081f9:	e8 ce de 00 00       	call   c00160cc <HalConsoleCursorUpdate(int, int)>
c00081fe:	83 c4 1c             	add    esp,0x1c
c0008201:	c3                   	ret    

c0008202 <VgaText::doANSI_SGR(int)>:
c0008202:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000820a:	85 d2                	test   edx,edx
c000820c:	75 0b                	jne    c0008219 <VgaText::doANSI_SGR(int)+0x17>
c000820e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008211:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008214:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008217:	eb 59                	jmp    c0008272 <VgaText::doANSI_SGR(int)+0x70>
c0008219:	83 fa 07             	cmp    edx,0x7
c000821c:	75 0b                	jne    c0008229 <VgaText::doANSI_SGR(int)+0x27>
c000821e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008221:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008224:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008227:	eb 49                	jmp    c0008272 <VgaText::doANSI_SGR(int)+0x70>
c0008229:	83 fa 1b             	cmp    edx,0x1b
c000822c:	74 e0                	je     c000820e <VgaText::doANSI_SGR(int)+0xc>
c000822e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008231:	83 f9 07             	cmp    ecx,0x7
c0008234:	77 09                	ja     c000823f <VgaText::doANSI_SGR(int)+0x3d>
c0008236:	8b 14 8d 20 f4 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0be0]
c000823d:	eb 20                	jmp    c000825f <VgaText::doANSI_SGR(int)+0x5d>
c000823f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008242:	83 f9 07             	cmp    ecx,0x7
c0008245:	77 09                	ja     c0008250 <VgaText::doANSI_SGR(int)+0x4e>
c0008247:	8b 14 8d 20 f4 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0be0]
c000824e:	eb 22                	jmp    c0008272 <VgaText::doANSI_SGR(int)+0x70>
c0008250:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008253:	83 f9 07             	cmp    ecx,0x7
c0008256:	77 0b                	ja     c0008263 <VgaText::doANSI_SGR(int)+0x61>
c0008258:	8b 14 95 d8 f2 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0d28]
c000825f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008262:	c3                   	ret    
c0008263:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008266:	83 f9 07             	cmp    ecx,0x7
c0008269:	77 0a                	ja     c0008275 <VgaText::doANSI_SGR(int)+0x73>
c000826b:	8b 14 95 b0 f2 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0d50]
c0008272:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setDefaultBgColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008281:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008284:	c3                   	ret    
c0008285:	90                   	nop

c0008286 <VgaText::setDefaultFgColour(VgaColour)>:
c0008286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000828a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000828e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008291:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008294:	c3                   	ret    
c0008295:	90                   	nop

c0008296 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0008296:	53                   	push   ebx
c0008297:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000829b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000829f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00082a3:	51                   	push   ecx
c00082a4:	e8 cd ff ff ff       	call   c0008276 <VgaText::setDefaultBgColour(VgaColour)>
c00082a9:	58                   	pop    eax
c00082aa:	5a                   	pop    edx
c00082ab:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00082af:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00082b3:	5b                   	pop    ebx
c00082b4:	eb d0                	jmp    c0008286 <VgaText::setDefaultFgColour(VgaColour)>

c00082b6 <VgaText::setTitleTextColour(VgaColour)>:
c00082b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082be:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00082c1:	c3                   	ret    

c00082c2 <VgaText::setTitleColour(VgaColour)>:
c00082c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082ca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00082cd:	c3                   	ret    

c00082ce <VgaText::setTitle(char*)>:
c00082ce:	c3                   	ret    
c00082cf:	90                   	nop

c00082d0 <VgaText::combineColours(unsigned char, unsigned char)>:
c00082d0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00082d4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00082d9:	83 e0 0f             	and    eax,0xf
c00082dc:	c1 e2 04             	shl    edx,0x4
c00082df:	09 d0                	or     eax,edx
c00082e1:	c3                   	ret    

c00082e2 <VgaText::scrollScreen()>:
c00082e2:	55                   	push   ebp
c00082e3:	b9 01 00 00 00       	mov    ecx,0x1
c00082e8:	57                   	push   edi
c00082e9:	56                   	push   esi
c00082ea:	53                   	push   ebx
c00082eb:	83 ec 0c             	sub    esp,0xc
c00082ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082f2:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082f8:	31 ff                	xor    edi,edi
c00082fa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082fd:	83 f9 18             	cmp    ecx,0x18
c0008300:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0008303:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000830a:	75 27                	jne    c0008333 <VgaText::scrollScreen()+0x51>
c000830c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000830f:	01 f5                	add    ebp,esi
c0008311:	f7 c7 01 00 00 00    	test   edi,0x1
c0008317:	74 16                	je     c000832f <VgaText::scrollScreen()+0x4d>
c0008319:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000831d:	50                   	push   eax
c000831e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008322:	50                   	push   eax
c0008323:	e8 a8 ff ff ff       	call   c00082d0 <VgaText::combineColours(unsigned char, unsigned char)>
c0008328:	5a                   	pop    edx
c0008329:	5a                   	pop    edx
c000832a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000832d:	eb 04                	jmp    c0008333 <VgaText::scrollScreen()+0x51>
c000832f:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0008333:	47                   	inc    edi
c0008334:	46                   	inc    esi
c0008335:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000833b:	75 bd                	jne    c00082fa <VgaText::scrollScreen()+0x18>
c000833d:	41                   	inc    ecx
c000833e:	83 f9 19             	cmp    ecx,0x19
c0008341:	75 af                	jne    c00082f2 <VgaText::scrollScreen()+0x10>
c0008343:	39 1d c4 06 02 c0    	cmp    DWORD PTR ds:0xc00206c4,ebx
c0008349:	75 1f                	jne    c000836a <VgaText::scrollScreen()+0x88>
c000834b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000834f:	74 05                	je     c0008356 <VgaText::scrollScreen()+0x74>
c0008351:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008354:	eb 14                	jmp    c000836a <VgaText::scrollScreen()+0x88>
c0008356:	50                   	push   eax
c0008357:	50                   	push   eax
c0008358:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000835c:	50                   	push   eax
c000835d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008361:	50                   	push   eax
c0008362:	e8 f1 db 00 00       	call   c0015f58 <HalConsoleScroll(int, int)>
c0008367:	83 c4 10             	add    esp,0x10
c000836a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000836e:	83 c4 0c             	add    esp,0xc
c0008371:	5b                   	pop    ebx
c0008372:	5e                   	pop    esi
c0008373:	5f                   	pop    edi
c0008374:	5d                   	pop    ebp
c0008375:	e9 72 fe ff ff       	jmp    c00081ec <VgaText::updateCursor()>

c000837a <VgaText::combineCharAndColour(char, unsigned char)>:
c000837a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000837f:	c1 e0 08             	shl    eax,0x8
c0008382:	89 c2                	mov    edx,eax
c0008384:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0008389:	09 d0                	or     eax,edx
c000838b:	c3                   	ret    

c000838c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000838c:	55                   	push   ebp
c000838d:	57                   	push   edi
c000838e:	56                   	push   esi
c000838f:	53                   	push   ebx
c0008390:	83 ec 1c             	sub    esp,0x1c
c0008393:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008397:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000839b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000839f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00083a7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00083ab:	0f b6 c3             	movzx  eax,bl
c00083ae:	50                   	push   eax
c00083af:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00083b4:	50                   	push   eax
c00083b5:	e8 16 ff ff ff       	call   c00082d0 <VgaText::combineColours(unsigned char, unsigned char)>
c00083ba:	5a                   	pop    edx
c00083bb:	0f b6 c0             	movzx  eax,al
c00083be:	59                   	pop    ecx
c00083bf:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00083c4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00083c8:	50                   	push   eax
c00083c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00083cd:	e8 a8 ff ff ff       	call   c000837a <VgaText::combineCharAndColour(char, unsigned char)>
c00083d2:	5a                   	pop    edx
c00083d3:	66 6b d7 50          	imul   dx,di,0x50
c00083d7:	59                   	pop    ecx
c00083d8:	01 f2                	add    edx,esi
c00083da:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00083dd:	0f b7 d2             	movzx  edx,dx
c00083e0:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00083e4:	39 2d c4 06 02 c0    	cmp    DWORD PTR ds:0xc00206c4,ebp
c00083ea:	75 28                	jne    c0008414 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083f0:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083f4:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083f8:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083fc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008400:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008404:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008408:	83 c4 1c             	add    esp,0x1c
c000840b:	5b                   	pop    ebx
c000840c:	5e                   	pop    esi
c000840d:	5f                   	pop    edi
c000840e:	5d                   	pop    ebp
c000840f:	e9 4c dc 00 00       	jmp    c0016060 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008414:	83 c4 1c             	add    esp,0x1c
c0008417:	5b                   	pop    ebx
c0008418:	5e                   	pop    esi
c0008419:	5f                   	pop    edi
c000841a:	5d                   	pop    ebp
c000841b:	c3                   	ret    

c000841c <VgaText::getCursorX()>:
c000841c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008420:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008423:	c3                   	ret    

c0008424 <VgaText::getCursorY()>:
c0008424:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008428:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000842b:	c3                   	ret    

c000842c <VgaText::setCursor(int, int)>:
c000842c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008430:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008434:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008437:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000843b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000843e:	e9 a9 fd ff ff       	jmp    c00081ec <VgaText::updateCursor()>

c0008443 <setActiveTerminal(VgaText*)>:
c0008443:	53                   	push   ebx
c0008444:	83 ec 08             	sub    esp,0x8
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	85 db                	test   ebx,ebx
c000844d:	75 11                	jne    c0008460 <setActiveTerminal(VgaText*)+0x1d>
c000844f:	c7 44 24 10 4c d5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d54c
c0008457:	83 c4 08             	add    esp,0x8
c000845a:	5b                   	pop    ebx
c000845b:	e9 a3 7c 00 00       	jmp    c0010103 <KePanic(char const*)>
c0008460:	a1 c4 06 02 c0       	mov    eax,ds:0xc00206c4
c0008465:	85 c0                	test   eax,eax
c0008467:	74 0c                	je     c0008475 <setActiveTerminal(VgaText*)+0x32>
c0008469:	83 ec 0c             	sub    esp,0xc
c000846c:	50                   	push   eax
c000846d:	e8 7a fd ff ff       	call   c00081ec <VgaText::updateCursor()>
c0008472:	83 c4 10             	add    esp,0x10
c0008475:	89 1d c4 06 02 c0    	mov    DWORD PTR ds:0xc00206c4,ebx
c000847b:	50                   	push   eax
c000847c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000847f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008482:	53                   	push   ebx
c0008483:	e8 a4 ff ff ff       	call   c000842c <VgaText::setCursor(int, int)>
c0008488:	83 c4 18             	add    esp,0x18
c000848b:	5b                   	pop    ebx
c000848c:	c3                   	ret    
c000848d:	90                   	nop

c000848e <VgaText::clearScreen()>:
c000848e:	57                   	push   edi
c000848f:	56                   	push   esi
c0008490:	31 f6                	xor    esi,esi
c0008492:	53                   	push   ebx
c0008493:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008497:	52                   	push   edx
c0008498:	6a 00                	push   0x0
c000849a:	6a 00                	push   0x0
c000849c:	53                   	push   ebx
c000849d:	e8 8a ff ff ff       	call   c000842c <VgaText::setCursor(int, int)>
c00084a2:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00084a9:	83 c4 10             	add    esp,0x10
c00084ac:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00084af:	7e 20                	jle    c00084d1 <VgaText::clearScreen()+0x43>
c00084b1:	31 ff                	xor    edi,edi
c00084b3:	50                   	push   eax
c00084b4:	50                   	push   eax
c00084b5:	56                   	push   esi
c00084b6:	57                   	push   edi
c00084b7:	47                   	inc    edi
c00084b8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00084bb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00084be:	6a 20                	push   0x20
c00084c0:	53                   	push   ebx
c00084c1:	e8 c6 fe ff ff       	call   c000838c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00084c6:	83 c4 20             	add    esp,0x20
c00084c9:	83 ff 50             	cmp    edi,0x50
c00084cc:	75 e5                	jne    c00084b3 <VgaText::clearScreen()+0x25>
c00084ce:	46                   	inc    esi
c00084cf:	eb db                	jmp    c00084ac <VgaText::clearScreen()+0x1e>
c00084d1:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00084d8:	5b                   	pop    ebx
c00084d9:	5e                   	pop    esi
c00084da:	5f                   	pop    edi
c00084db:	c3                   	ret    

c00084dc <VgaText::setCursorX(int)>:
c00084dc:	83 ec 10             	sub    esp,0x10
c00084df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084e3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00084e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ea:	50                   	push   eax
c00084eb:	e8 3c ff ff ff       	call   c000842c <VgaText::setCursor(int, int)>
c00084f0:	83 c4 1c             	add    esp,0x1c
c00084f3:	c3                   	ret    

c00084f4 <VgaText::setCursorY(int)>:
c00084f4:	83 ec 10             	sub    esp,0x10
c00084f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008502:	50                   	push   eax
c0008503:	e8 24 ff ff ff       	call   c000842c <VgaText::setCursor(int, int)>
c0008508:	83 c4 1c             	add    esp,0x1c
c000850b:	c3                   	ret    

c000850c <VgaText::incrementCursor(bool)>:
c000850c:	56                   	push   esi
c000850d:	53                   	push   ebx
c000850e:	51                   	push   ecx
c000850f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008513:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008517:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000851a:	40                   	inc    eax
c000851b:	83 f8 50             	cmp    eax,0x50
c000851e:	74 05                	je     c0008525 <VgaText::incrementCursor(bool)+0x19>
c0008520:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008523:	eb 24                	jmp    c0008549 <VgaText::incrementCursor(bool)+0x3d>
c0008525:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008528:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000852f:	8d 50 01             	lea    edx,[eax+0x1]
c0008532:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008535:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008538:	75 0f                	jne    c0008549 <VgaText::incrementCursor(bool)+0x3d>
c000853a:	83 ec 0c             	sub    esp,0xc
c000853d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008540:	53                   	push   ebx
c0008541:	e8 9c fd ff ff       	call   c00082e2 <VgaText::scrollScreen()>
c0008546:	83 c4 10             	add    esp,0x10
c0008549:	89 f0                	mov    eax,esi
c000854b:	84 c0                	test   al,al
c000854d:	74 0c                	je     c000855b <VgaText::incrementCursor(bool)+0x4f>
c000854f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008553:	5a                   	pop    edx
c0008554:	5b                   	pop    ebx
c0008555:	5e                   	pop    esi
c0008556:	e9 91 fc ff ff       	jmp    c00081ec <VgaText::updateCursor()>
c000855b:	58                   	pop    eax
c000855c:	5b                   	pop    ebx
c000855d:	5e                   	pop    esi
c000855e:	c3                   	ret    
c000855f:	90                   	nop

c0008560 <VgaText::decrementCursor(bool)>:
c0008560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008564:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008568:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000856b:	85 c0                	test   eax,eax
c000856d:	74 04                	je     c0008573 <VgaText::decrementCursor(bool)+0x13>
c000856f:	48                   	dec    eax
c0008570:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008573:	84 c9                	test   cl,cl
c0008575:	74 09                	je     c0008580 <VgaText::decrementCursor(bool)+0x20>
c0008577:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000857b:	e9 6c fc ff ff       	jmp    c00081ec <VgaText::updateCursor()>
c0008580:	c3                   	ret    
c0008581:	90                   	nop

c0008582 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008582:	53                   	push   ebx
c0008583:	83 ec 08             	sub    esp,0x8
c0008586:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000858a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000858e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008592:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008596:	3c 07                	cmp    al,0x7
c0008598:	75 21                	jne    c00085bb <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000859a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00085a2:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00085aa:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00085b2:	83 c4 08             	add    esp,0x8
c00085b5:	5b                   	pop    ebx
c00085b6:	e9 3c 2d 00 00       	jmp    c000b2f7 <Krnl::beep(int, int, bool)>
c00085bb:	3c 0d                	cmp    al,0xd
c00085bd:	75 09                	jne    c00085c8 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c00085bf:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085c6:	eb 2c                	jmp    c00085f4 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00085c8:	3c 0a                	cmp    al,0xa
c00085ca:	75 31                	jne    c00085fd <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00085cc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00085cf:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085d6:	8d 50 01             	lea    edx,[eax+0x1]
c00085d9:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00085dc:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00085df:	75 0f                	jne    c00085f0 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c00085e1:	83 ec 0c             	sub    esp,0xc
c00085e4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00085e7:	53                   	push   ebx
c00085e8:	e8 f5 fc ff ff       	call   c00082e2 <VgaText::scrollScreen()>
c00085ed:	83 c4 10             	add    esp,0x10
c00085f0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085f4:	83 c4 08             	add    esp,0x8
c00085f7:	5b                   	pop    ebx
c00085f8:	e9 ef fb ff ff       	jmp    c00081ec <VgaText::updateCursor()>
c00085fd:	3c 08                	cmp    al,0x8
c00085ff:	75 25                	jne    c0008626 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008601:	50                   	push   eax
c0008602:	50                   	push   eax
c0008603:	6a 01                	push   0x1
c0008605:	53                   	push   ebx
c0008606:	e8 55 ff ff ff       	call   c0008560 <VgaText::decrementCursor(bool)>
c000860b:	5a                   	pop    edx
c000860c:	59                   	pop    ecx
c000860d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008610:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008613:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008616:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008619:	6a 20                	push   0x20
c000861b:	53                   	push   ebx
c000861c:	e8 6b fd ff ff       	call   c000838c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008621:	83 c4 28             	add    esp,0x28
c0008624:	5b                   	pop    ebx
c0008625:	c3                   	ret    
c0008626:	83 ec 08             	sub    esp,0x8
c0008629:	0f be c0             	movsx  eax,al
c000862c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000862f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008632:	51                   	push   ecx
c0008633:	52                   	push   edx
c0008634:	50                   	push   eax
c0008635:	53                   	push   ebx
c0008636:	e8 51 fd ff ff       	call   c000838c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000863b:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000863f:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008647:	83 c4 28             	add    esp,0x28
c000864a:	5b                   	pop    ebx
c000864b:	e9 bc fe ff ff       	jmp    c000850c <VgaText::incrementCursor(bool)>

c0008650 <VgaText::putchar(char)>:
c0008650:	56                   	push   esi
c0008651:	53                   	push   ebx
c0008652:	83 ec 14             	sub    esp,0x14
c0008655:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008659:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000865d:	3c 5b                	cmp    al,0x5b
c000865f:	75 18                	jne    c0008679 <VgaText::putchar(char)+0x29>
c0008661:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008665:	74 1f                	je     c0008686 <VgaText::putchar(char)+0x36>
c0008667:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000866d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008674:	e9 bd 00 00 00       	jmp    c0008736 <VgaText::putchar(char)+0xe6>
c0008679:	3c 1b                	cmp    al,0x1b
c000867b:	75 09                	jne    c0008686 <VgaText::putchar(char)+0x36>
c000867d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008681:	e9 b0 00 00 00       	jmp    c0008736 <VgaText::putchar(char)+0xe6>
c0008686:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008689:	84 c9                	test   cl,cl
c000868b:	0f 84 92 00 00 00    	je     c0008723 <VgaText::putchar(char)+0xd3>
c0008691:	8d 50 c0             	lea    edx,[eax-0x40]
c0008694:	80 fa 3e             	cmp    dl,0x3e
c0008697:	77 76                	ja     c000870f <VgaText::putchar(char)+0xbf>
c0008699:	3c 6d                	cmp    al,0x6d
c000869b:	75 47                	jne    c00086e4 <VgaText::putchar(char)+0x94>
c000869d:	31 f6                	xor    esi,esi
c000869f:	31 d2                	xor    edx,edx
c00086a1:	31 c0                	xor    eax,eax
c00086a3:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00086a6:	7e 2d                	jle    c00086d5 <VgaText::putchar(char)+0x85>
c00086a8:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00086ad:	80 fa 3b             	cmp    dl,0x3b
c00086b0:	75 17                	jne    c00086c9 <VgaText::putchar(char)+0x79>
c00086b2:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00086b6:	50                   	push   eax
c00086b7:	53                   	push   ebx
c00086b8:	e8 45 fb ff ff       	call   c0008202 <VgaText::doANSI_SGR(int)>
c00086bd:	59                   	pop    ecx
c00086be:	31 d2                	xor    edx,edx
c00086c0:	58                   	pop    eax
c00086c1:	31 c0                	xor    eax,eax
c00086c3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00086c7:	eb 09                	jmp    c00086d2 <VgaText::putchar(char)+0x82>
c00086c9:	6b c0 0a             	imul   eax,eax,0xa
c00086cc:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00086d0:	88 ca                	mov    dl,cl
c00086d2:	46                   	inc    esi
c00086d3:	eb ce                	jmp    c00086a3 <VgaText::putchar(char)+0x53>
c00086d5:	84 d2                	test   dl,dl
c00086d7:	74 2e                	je     c0008707 <VgaText::putchar(char)+0xb7>
c00086d9:	50                   	push   eax
c00086da:	53                   	push   ebx
c00086db:	e8 22 fb ff ff       	call   c0008202 <VgaText::doANSI_SGR(int)>
c00086e0:	58                   	pop    eax
c00086e1:	5a                   	pop    edx
c00086e2:	eb 23                	jmp    c0008707 <VgaText::putchar(char)+0xb7>
c00086e4:	3c 4a                	cmp    al,0x4a
c00086e6:	75 1f                	jne    c0008707 <VgaText::putchar(char)+0xb7>
c00086e8:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086ec:	75 19                	jne    c0008707 <VgaText::putchar(char)+0xb7>
c00086ee:	83 ec 0c             	sub    esp,0xc
c00086f1:	53                   	push   ebx
c00086f2:	e8 97 fd ff ff       	call   c000848e <VgaText::clearScreen()>
c00086f7:	83 c4 0c             	add    esp,0xc
c00086fa:	6a 00                	push   0x0
c00086fc:	6a 00                	push   0x0
c00086fe:	53                   	push   ebx
c00086ff:	e8 28 fd ff ff       	call   c000842c <VgaText::setCursor(int, int)>
c0008704:	83 c4 10             	add    esp,0x10
c0008707:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000870d:	eb 27                	jmp    c0008736 <VgaText::putchar(char)+0xe6>
c000870f:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008712:	83 fa 0e             	cmp    edx,0xe
c0008715:	7f 1f                	jg     c0008736 <VgaText::putchar(char)+0xe6>
c0008717:	8d 4a 01             	lea    ecx,[edx+0x1]
c000871a:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000871d:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008721:	eb 13                	jmp    c0008736 <VgaText::putchar(char)+0xe6>
c0008723:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008726:	0f be c0             	movsx  eax,al
c0008729:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000872c:	50                   	push   eax
c000872d:	53                   	push   ebx
c000872e:	e8 4f fe ff ff       	call   c0008582 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008733:	83 c4 10             	add    esp,0x10
c0008736:	83 c4 14             	add    esp,0x14
c0008739:	5b                   	pop    ebx
c000873a:	5e                   	pop    esi
c000873b:	c3                   	ret    

c000873c <VgaText::putx(unsigned int)>:
c000873c:	57                   	push   edi
c000873d:	b9 11 00 00 00       	mov    ecx,0x11
c0008742:	56                   	push   esi
c0008743:	be 5a d5 01 c0       	mov    esi,0xc001d55a
c0008748:	53                   	push   ebx
c0008749:	83 ec 20             	sub    esp,0x20
c000874c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008750:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008754:	fc                   	cld    
c0008755:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008757:	be 08 00 00 00       	mov    esi,0x8
c000875c:	50                   	push   eax
c000875d:	50                   	push   eax
c000875e:	89 d8                	mov    eax,ebx
c0008760:	c1 e3 04             	shl    ebx,0x4
c0008763:	c1 e8 1c             	shr    eax,0x1c
c0008766:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000876b:	50                   	push   eax
c000876c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008770:	e8 db fe ff ff       	call   c0008650 <VgaText::putchar(char)>
c0008775:	83 c4 10             	add    esp,0x10
c0008778:	4e                   	dec    esi
c0008779:	75 e1                	jne    c000875c <VgaText::putx(unsigned int)+0x20>
c000877b:	83 c4 20             	add    esp,0x20
c000877e:	5b                   	pop    ebx
c000877f:	5e                   	pop    esi
c0008780:	5f                   	pop    edi
c0008781:	c3                   	ret    

c0008782 <VgaText::puts(char const*)>:
c0008782:	53                   	push   ebx
c0008783:	83 ec 08             	sub    esp,0x8
c0008786:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000878a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000878d:	84 c0                	test   al,al
c000878f:	74 12                	je     c00087a3 <VgaText::puts(char const*)+0x21>
c0008791:	43                   	inc    ebx
c0008792:	51                   	push   ecx
c0008793:	51                   	push   ecx
c0008794:	50                   	push   eax
c0008795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008799:	e8 b2 fe ff ff       	call   c0008650 <VgaText::putchar(char)>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	eb e7                	jmp    c000878a <VgaText::puts(char const*)+0x8>
c00087a3:	83 c4 08             	add    esp,0x8
c00087a6:	5b                   	pop    ebx
c00087a7:	c3                   	ret    

c00087a8 <VgaText::write(unsigned long long, void*, int*)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00087b3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087b7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00087bb:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00087c2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00087c5:	39 eb                	cmp    ebx,ebp
c00087c7:	74 13                	je     c00087dc <VgaText::write(unsigned long long, void*, int*)+0x34>
c00087c9:	43                   	inc    ebx
c00087ca:	50                   	push   eax
c00087cb:	50                   	push   eax
c00087cc:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00087d0:	50                   	push   eax
c00087d1:	56                   	push   esi
c00087d2:	e8 79 fe ff ff       	call   c0008650 <VgaText::putchar(char)>
c00087d7:	83 c4 10             	add    esp,0x10
c00087da:	eb e9                	jmp    c00087c5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00087dc:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00087e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00087e7:	89 38                	mov    DWORD PTR [eax],edi
c00087e9:	83 c4 0c             	add    esp,0xc
c00087ec:	31 c0                	xor    eax,eax
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	5d                   	pop    ebp
c00087f2:	c3                   	ret    
c00087f3:	90                   	nop

c00087f4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087f4:	55                   	push   ebp
c00087f5:	57                   	push   edi
c00087f6:	56                   	push   esi
c00087f7:	53                   	push   ebx
c00087f8:	83 ec 0c             	sub    esp,0xc
c00087fb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008804:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000880b:	50                   	push   eax
c000880c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008811:	50                   	push   eax
c0008812:	e8 b9 fa ff ff       	call   c00082d0 <VgaText::combineColours(unsigned char, unsigned char)>
c0008817:	5a                   	pop    edx
c0008818:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000881d:	59                   	pop    ecx
c000881e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008821:	89 c5                	mov    ebp,eax
c0008823:	0f b7 f6             	movzx  esi,si
c0008826:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000882a:	01 f6                	add    esi,esi
c000882c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000882f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008832:	84 c0                	test   al,al
c0008834:	0f 84 f4 00 00 00    	je     c000892e <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c000883a:	3c 0d                	cmp    al,0xd
c000883c:	75 0c                	jne    c000884a <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	e9 de 00 00 00       	jmp    c0008928 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c000884a:	3c 0a                	cmp    al,0xa
c000884c:	75 45                	jne    c0008893 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000884e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8d 48 01             	lea    ecx,[eax+0x1]
c000885b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000885e:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008861:	75 0f                	jne    c0008872 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008863:	83 ec 0c             	sub    esp,0xc
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	53                   	push   ebx
c000886a:	e8 73 fa ff ff       	call   c00082e2 <VgaText::scrollScreen()>
c000886f:	83 c4 10             	add    esp,0x10
c0008872:	83 ec 0c             	sub    esp,0xc
c0008875:	53                   	push   ebx
c0008876:	e8 71 f9 ff ff       	call   c00081ec <VgaText::updateCursor()>
c000887b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008880:	83 c4 10             	add    esp,0x10
c0008883:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008886:	0f b7 f6             	movzx  esi,si
c0008889:	01 f6                	add    esi,esi
c000888b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000888e:	e9 95 00 00 00       	jmp    c0008928 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008893:	3c 08                	cmp    al,0x8
c0008895:	75 35                	jne    c00088cc <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008897:	51                   	push   ecx
c0008898:	51                   	push   ecx
c0008899:	6a 01                	push   0x1
c000889b:	53                   	push   ebx
c000889c:	e8 bf fc ff ff       	call   c0008560 <VgaText::decrementCursor(bool)>
c00088a1:	5e                   	pop    esi
c00088a2:	58                   	pop    eax
c00088a3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00088ac:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00088af:	6a 20                	push   0x20
c00088b1:	53                   	push   ebx
c00088b2:	e8 d5 fa ff ff       	call   c000838c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00088b7:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088bc:	83 c4 20             	add    esp,0x20
c00088bf:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00088c2:	0f b7 f6             	movzx  esi,si
c00088c5:	01 f6                	add    esi,esi
c00088c7:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088ca:	eb 5c                	jmp    c0008928 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cc:	52                   	push   edx
c00088cd:	52                   	push   edx
c00088ce:	89 ea                	mov    edx,ebp
c00088d0:	0f b6 ca             	movzx  ecx,dl
c00088d3:	51                   	push   ecx
c00088d4:	50                   	push   eax
c00088d5:	e8 a0 fa ff ff       	call   c000837a <VgaText::combineCharAndColour(char, unsigned char)>
c00088da:	83 c4 10             	add    esp,0x10
c00088dd:	66 89 06             	mov    WORD PTR [esi],ax
c00088e0:	39 1d c4 06 02 c0    	cmp    DWORD PTR ds:0xc00206c4,ebx
c00088e6:	75 1d                	jne    c0008905 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c00088e8:	83 ec 0c             	sub    esp,0xc
c00088eb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088ee:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088f1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088f5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088f9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088fc:	50                   	push   eax
c00088fd:	e8 5e d7 00 00       	call   c0016060 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008902:	83 c4 20             	add    esp,0x20
c0008905:	83 c6 02             	add    esi,0x2
c0008908:	50                   	push   eax
c0008909:	50                   	push   eax
c000890a:	6a 00                	push   0x0
c000890c:	53                   	push   ebx
c000890d:	e8 fa fb ff ff       	call   c000850c <VgaText::incrementCursor(bool)>
c0008912:	83 c4 10             	add    esp,0x10
c0008915:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008919:	75 0d                	jne    c0008928 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c000891b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008920:	0f b7 f6             	movzx  esi,si
c0008923:	01 f6                	add    esi,esi
c0008925:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008928:	47                   	inc    edi
c0008929:	e9 01 ff ff ff       	jmp    c000882f <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c000892e:	83 ec 0c             	sub    esp,0xc
c0008931:	53                   	push   ebx
c0008932:	e8 b5 f8 ff ff       	call   c00081ec <VgaText::updateCursor()>
c0008937:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000893e:	83 c4 1c             	add    esp,0x1c
c0008941:	5b                   	pop    ebx
c0008942:	5e                   	pop    esi
c0008943:	5f                   	pop    edi
c0008944:	5d                   	pop    ebp
c0008945:	c3                   	ret    

c0008946 <VgaText::VgaText(char const*)>:
c0008946:	56                   	push   esi
c0008947:	53                   	push   ebx
c0008948:	83 ec 04             	sub    esp,0x4
c000894b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000894f:	83 ec 08             	sub    esp,0x8
c0008952:	6a 00                	push   0x0
c0008954:	50                   	push   eax
c0008955:	e8 b0 04 00 00       	call   c0008e0a <UnixFile::UnixFile(int)>
c000895a:	83 c4 10             	add    esp,0x10
c000895d:	ba c0 d5 01 c0       	mov    edx,0xc001d5c0
c0008962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008966:	89 10                	mov    DWORD PTR [eax],edx
c0008968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008977:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000897e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008982:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000898e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008992:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000899d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00089a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00089af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00089ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089be:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00089c5:	83 ec 0c             	sub    esp,0xc
c00089c8:	6a 01                	push   0x1
c00089ca:	e8 7e 08 00 00       	call   c000924d <Virt::allocateKernelVirtualPages(int)>
c00089cf:	83 c4 10             	add    esp,0x10
c00089d2:	89 c2                	mov    edx,eax
c00089d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089d8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00089db:	8b 1d 70 07 02 c0    	mov    ebx,DWORD PTR ds:0xc0020770
c00089e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089e5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089e8:	89 c6                	mov    esi,eax
c00089ea:	e8 f2 f0 ff ff       	call   c0007ae1 <Phys::allocatePage()>
c00089ef:	68 05 0c 00 00       	push   0xc05
c00089f4:	56                   	push   esi
c00089f5:	50                   	push   eax
c00089f6:	53                   	push   ebx
c00089f7:	e8 e6 0e 00 00       	call   c00098e2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00089fc:	83 c4 10             	add    esp,0x10
c00089ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a03:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a06:	83 ec 04             	sub    esp,0x4
c0008a09:	68 a0 0f 00 00       	push   0xfa0
c0008a0e:	6a 00                	push   0x0
c0008a10:	50                   	push   eax
c0008a11:	e8 ba 7a ff ff       	call   c00004d0 <memset>
c0008a16:	83 c4 10             	add    esp,0x10
c0008a19:	83 ec 04             	sub    esp,0x4
c0008a1c:	6a 00                	push   0x0
c0008a1e:	6a 07                	push   0x7
c0008a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a24:	e8 6d f8 ff ff       	call   c0008296 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008a29:	83 c4 10             	add    esp,0x10
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	6a 00                	push   0x0
c0008a31:	6a 00                	push   0x0
c0008a33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a37:	e8 f0 f9 ff ff       	call   c000842c <VgaText::setCursor(int, int)>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	83 ec 0c             	sub    esp,0xc
c0008a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a46:	e8 43 fa ff ff       	call   c000848e <VgaText::clearScreen()>
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a52:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a5a:	05 82 00 00 00       	add    eax,0x82
c0008a5f:	83 ec 04             	sub    esp,0x4
c0008a62:	6a 30                	push   0x30
c0008a64:	6a 00                	push   0x0
c0008a66:	50                   	push   eax
c0008a67:	e8 64 7a ff ff       	call   c00004d0 <memset>
c0008a6c:	83 c4 10             	add    esp,0x10
c0008a6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a73:	05 b2 00 00 00       	add    eax,0xb2
c0008a78:	83 ec 04             	sub    esp,0x4
c0008a7b:	68 80 00 00 00       	push   0x80
c0008a80:	6a 00                	push   0x0
c0008a82:	50                   	push   eax
c0008a83:	e8 48 7a ff ff       	call   c00004d0 <memset>
c0008a88:	83 c4 10             	add    esp,0x10
c0008a8b:	90                   	nop
c0008a8c:	83 c4 04             	add    esp,0x4
c0008a8f:	5b                   	pop    ebx
c0008a90:	5e                   	pop    esi
c0008a91:	c3                   	ret    

c0008a92 <VgaText::receiveKey(unsigned char)>:
c0008a92:	57                   	push   edi
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	83 ec 10             	sub    esp,0x10
c0008a98:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008a9c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008aa0:	84 db                	test   bl,bl
c0008aa2:	0f 84 ba 00 00 00    	je     c0008b62 <VgaText::receiveKey(unsigned char)+0xd0>
c0008aa8:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0008aae:	80 fb 08             	cmp    bl,0x8
c0008ab1:	75 2c                	jne    c0008adf <VgaText::receiveKey(unsigned char)+0x4d>
c0008ab3:	83 ec 0c             	sub    esp,0xc
c0008ab6:	57                   	push   edi
c0008ab7:	e8 84 7a ff ff       	call   c0000540 <strlen>
c0008abc:	83 c4 10             	add    esp,0x10
c0008abf:	85 c0                	test   eax,eax
c0008ac1:	74 41                	je     c0008b04 <VgaText::receiveKey(unsigned char)+0x72>
c0008ac3:	50                   	push   eax
c0008ac4:	50                   	push   eax
c0008ac5:	6a 08                	push   0x8
c0008ac7:	56                   	push   esi
c0008ac8:	e8 83 fb ff ff       	call   c0008650 <VgaText::putchar(char)>
c0008acd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008ad0:	e8 6b 7a ff ff       	call   c0000540 <strlen>
c0008ad5:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0008add:	eb 22                	jmp    c0008b01 <VgaText::receiveKey(unsigned char)+0x6f>
c0008adf:	0f be c3             	movsx  eax,bl
c0008ae2:	52                   	push   edx
c0008ae3:	52                   	push   edx
c0008ae4:	50                   	push   eax
c0008ae5:	56                   	push   esi
c0008ae6:	e8 65 fb ff ff       	call   c0008650 <VgaText::putchar(char)>
c0008aeb:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0008aef:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008af4:	59                   	pop    ecx
c0008af5:	58                   	pop    eax
c0008af6:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008afa:	50                   	push   eax
c0008afb:	57                   	push   edi
c0008afc:	e8 bf 7c ff ff       	call   c00007c0 <strcat>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0008b0b:	75 05                	jne    c0008b12 <VgaText::receiveKey(unsigned char)+0x80>
c0008b0d:	80 fb 0a             	cmp    bl,0xa
c0008b10:	75 50                	jne    c0008b62 <VgaText::receiveKey(unsigned char)+0xd0>
c0008b12:	83 ec 0c             	sub    esp,0xc
c0008b15:	81 c6 b2 00 00 00    	add    esi,0xb2
c0008b1b:	56                   	push   esi
c0008b1c:	e8 1f 7a ff ff       	call   c0000540 <strlen>
c0008b21:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b24:	89 c3                	mov    ebx,eax
c0008b26:	e8 15 7a ff ff       	call   c0000540 <strlen>
c0008b2b:	83 c4 10             	add    esp,0x10
c0008b2e:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0008b32:	3d 80 00 00 00       	cmp    eax,0x80
c0008b37:	76 10                	jbe    c0008b49 <VgaText::receiveKey(unsigned char)+0xb7>
c0008b39:	83 ec 0c             	sub    esp,0xc
c0008b3c:	68 6b d5 01 c0       	push   0xc001d56b
c0008b41:	e8 bd 75 00 00       	call   c0010103 <KePanic(char const*)>
c0008b46:	83 c4 10             	add    esp,0x10
c0008b49:	50                   	push   eax
c0008b4a:	50                   	push   eax
c0008b4b:	57                   	push   edi
c0008b4c:	56                   	push   esi
c0008b4d:	e8 6e 7c ff ff       	call   c00007c0 <strcat>
c0008b52:	83 c4 0c             	add    esp,0xc
c0008b55:	6a 30                	push   0x30
c0008b57:	6a 00                	push   0x0
c0008b59:	57                   	push   edi
c0008b5a:	e8 71 79 ff ff       	call   c00004d0 <memset>
c0008b5f:	83 c4 10             	add    esp,0x10
c0008b62:	83 c4 10             	add    esp,0x10
c0008b65:	5b                   	pop    ebx
c0008b66:	5e                   	pop    esi
c0008b67:	5f                   	pop    edi
c0008b68:	c3                   	ret    
c0008b69:	90                   	nop

c0008b6a <VgaText::doUpdate()>:
c0008b6a:	c3                   	ret    

c0008b6b <newTerminal(char*)>:
c0008b6b:	83 ec 28             	sub    esp,0x28
c0008b6e:	68 34 01 00 00       	push   0x134
c0008b73:	e8 8d ec ff ff       	call   c0007805 <malloc>
c0008b78:	5a                   	pop    edx
c0008b79:	59                   	pop    ecx
c0008b7a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008b7e:	50                   	push   eax
c0008b7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b83:	e8 be fd ff ff       	call   c0008946 <VgaText::VgaText(char const*)>
c0008b88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b8c:	83 c4 2c             	add    esp,0x2c
c0008b8f:	c3                   	ret    

c0008b90 <TSS::TSS()>:
c0008b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008b9b:	90                   	nop
c0008b9c:	c3                   	ret    
c0008b9d:	90                   	nop
c0008b9e:	66 90                	xchg   ax,ax

c0008ba0 <TSS::setESP(unsigned long)>:
c0008ba0:	55                   	push   ebp
c0008ba1:	89 e5                	mov    ebp,esp
c0008ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ba6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ba9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008bac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008baf:	90                   	nop
c0008bb0:	5d                   	pop    ebp
c0008bb1:	c3                   	ret    
c0008bb2:	66 90                	xchg   ax,ax

c0008bb4 <TSS::flush()>:
c0008bb4:	55                   	push   ebp
c0008bb5:	89 e5                	mov    ebp,esp
c0008bb7:	83 ec 10             	sub    esp,0x10
c0008bba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bbf:	83 c8 03             	or     eax,0x3
c0008bc2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008bc6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008bca:	66 89 d0             	mov    ax,dx
c0008bcd:	0f 00 d8             	ltr    ax
c0008bd0:	90                   	nop
c0008bd1:	c9                   	leave  
c0008bd2:	c3                   	ret    
c0008bd3:	90                   	nop

c0008bd4 <TSS::setup(unsigned long, unsigned long)>:
c0008bd4:	55                   	push   ebp
c0008bd5:	89 e5                	mov    ebp,esp
c0008bd7:	83 ec 18             	sub    esp,0x18
c0008bda:	83 ec 0c             	sub    esp,0xc
c0008bdd:	6a 68                	push   0x68
c0008bdf:	e8 21 ec ff ff       	call   c0007805 <malloc>
c0008be4:	83 c4 10             	add    esp,0x10
c0008be7:	89 c2                	mov    edx,eax
c0008be9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bf5:	83 ec 04             	sub    esp,0x4
c0008bf8:	6a 68                	push   0x68
c0008bfa:	6a 00                	push   0x0
c0008bfc:	50                   	push   eax
c0008bfd:	e8 ce 78 ff ff       	call   c00004d0 <memset>
c0008c02:	83 c4 10             	add    esp,0x10
c0008c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c0b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c17:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c23:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c26:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c3b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c47:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c53:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c6b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008c71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c77:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008c7a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008c7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c83:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c86:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008c89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008c96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c99:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c9c:	0f 20 da             	mov    edx,cr3
c0008c9f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008ca2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008ca5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ca8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cae:	83 ec 08             	sub    esp,0x8
c0008cb1:	50                   	push   eax
c0008cb2:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cb5:	50                   	push   eax
c0008cb6:	e8 d1 e3 ff ff       	call   c000708c <GDTEntry::setBase(unsigned int)>
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	83 ec 08             	sub    esp,0x8
c0008cc1:	6a 68                	push   0x68
c0008cc3:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cc6:	50                   	push   eax
c0008cc7:	e8 dc e3 ff ff       	call   c00070a8 <GDTEntry::setLimit(unsigned int)>
c0008ccc:	83 c4 10             	add    esp,0x10
c0008ccf:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008cd3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008cd6:	83 e0 0f             	and    eax,0xf
c0008cd9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008cdc:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008cdf:	83 c8 40             	or     eax,0x40
c0008ce2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008ce5:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0008cea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008cf0:	05 78 01 00 00       	add    eax,0x178
c0008cf5:	83 ec 04             	sub    esp,0x4
c0008cf8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008cfb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008cfe:	50                   	push   eax
c0008cff:	e8 d8 e3 ff ff       	call   c00070dc <GDT::addEntry(GDTEntry)>
c0008d04:	83 c4 10             	add    esp,0x10
c0008d07:	89 c2                	mov    edx,eax
c0008d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d0c:	89 10                	mov    DWORD PTR [eax],edx
c0008d0e:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0008d13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d19:	05 78 01 00 00       	add    eax,0x178
c0008d1e:	83 ec 0c             	sub    esp,0xc
c0008d21:	50                   	push   eax
c0008d22:	e8 df e3 ff ff       	call   c0007106 <GDT::flush()>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d2f:	c9                   	leave  
c0008d30:	c3                   	ret    
c0008d31:	90                   	nop

c0008d32 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d3d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d42:	75 08                	jne    c0008d4c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d44:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d4a:	eb 38                	jmp    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d4c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d51:	75 17                	jne    c0008d6a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d58:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d5b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d61:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d67:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008d6a:	89 c1                	mov    ecx,eax
c0008d6c:	83 e1 fd             	and    ecx,0xfffffffd
c0008d6f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008d75:	74 cd                	je     c0008d44 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008d77:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008d7c:	83 e0 ef             	and    eax,0xffffffef
c0008d7f:	83 f8 08             	cmp    eax,0x8
c0008d82:	76 c0                	jbe    c0008d44 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008d84:	31 c0                	xor    eax,eax
c0008d86:	c3                   	ret    
c0008d87:	90                   	nop

c0008d88 <ReservedFilename::isAtty()>:
c0008d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d8c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008d8f:	31 c0                	xor    eax,eax
c0008d91:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008d97:	74 09                	je     c0008da2 <ReservedFilename::isAtty()+0x1a>
c0008d99:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008d9f:	0f 94 c0             	sete   al
c0008da2:	c3                   	ret    
c0008da3:	90                   	nop

c0008da4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008da4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008da8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008dac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008daf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008db3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008db8:	75 08                	jne    c0008dc2 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008dba:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008dc0:	eb 3d                	jmp    c0008dff <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008dc2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008dc7:	75 17                	jne    c0008de0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008dc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008dce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008dd1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008dd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dd9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ddd:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008de0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008de5:	75 04                	jne    c0008deb <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008de7:	89 0a                	mov    DWORD PTR [edx],ecx
c0008de9:	eb 14                	jmp    c0008dff <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008deb:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008df0:	74 c8                	je     c0008dba <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008df2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008df7:	83 e0 ef             	and    eax,0xffffffef
c0008dfa:	83 f8 08             	cmp    eax,0x8
c0008dfd:	76 bb                	jbe    c0008dba <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008dff:	31 c0                	xor    eax,eax
c0008e01:	c3                   	ret    

c0008e02 <UnixFile::getFileDescriptor()>:
c0008e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e09:	c3                   	ret    

c0008e0a <UnixFile::UnixFile(int)>:
c0008e0a:	53                   	push   ebx
c0008e0b:	83 ec 28             	sub    esp,0x28
c0008e0e:	ba 88 d6 01 c0       	mov    edx,0xc001d688
c0008e13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e17:	89 10                	mov    DWORD PTR [eax],edx
c0008e19:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e21:	0f 8f 8c 01 00 00    	jg     c0008fb3 <UnixFile::UnixFile(int)+0x1a9>
c0008e27:	a1 60 f4 01 c0       	mov    eax,ds:0xc001f460
c0008e2c:	8d 50 01             	lea    edx,[eax+0x1]
c0008e2f:	89 15 60 f4 01 c0    	mov    DWORD PTR ds:0xc001f460,edx
c0008e35:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e39:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e3c:	83 ec 08             	sub    esp,0x8
c0008e3f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e43:	68 58 07 02 c0       	push   0xc0020758
c0008e48:	e8 db 32 01 00       	call   c001c128 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e4d:	83 c4 10             	add    esp,0x10
c0008e50:	a0 54 07 02 c0       	mov    al,ds:0xc0020754
c0008e55:	83 f0 01             	xor    eax,0x1
c0008e58:	84 c0                	test   al,al
c0008e5a:	0f 84 54 01 00 00    	je     c0008fb4 <UnixFile::UnixFile(int)+0x1aa>
c0008e60:	c6 05 54 07 02 c0 01 	mov    BYTE PTR ds:0xc0020754,0x1
c0008e67:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008e6f:	83 ec 0c             	sub    esp,0xc
c0008e72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008e76:	e8 8a e9 ff ff       	call   c0007805 <malloc>
c0008e7b:	83 c4 10             	add    esp,0x10
c0008e7e:	89 c3                	mov    ebx,eax
c0008e80:	83 ec 08             	sub    esp,0x8
c0008e83:	68 03 ff ff 0f       	push   0xfffff03
c0008e88:	53                   	push   ebx
c0008e89:	e8 2c 01 00 00       	call   c0008fba <ReservedFilename::ReservedFilename(int)>
c0008e8e:	83 c4 10             	add    esp,0x10
c0008e91:	89 1d 4c 07 02 c0    	mov    DWORD PTR ds:0xc002074c,ebx
c0008e97:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008e9f:	83 ec 0c             	sub    esp,0xc
c0008ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea6:	e8 5a e9 ff ff       	call   c0007805 <malloc>
c0008eab:	83 c4 10             	add    esp,0x10
c0008eae:	89 c3                	mov    ebx,eax
c0008eb0:	83 ec 08             	sub    esp,0x8
c0008eb3:	68 01 ff ff 0f       	push   0xfffff01
c0008eb8:	53                   	push   ebx
c0008eb9:	e8 fc 00 00 00       	call   c0008fba <ReservedFilename::ReservedFilename(int)>
c0008ebe:	83 c4 10             	add    esp,0x10
c0008ec1:	89 1d 50 07 02 c0    	mov    DWORD PTR ds:0xc0020750,ebx
c0008ec7:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008ecf:	83 ec 0c             	sub    esp,0xc
c0008ed2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008ed6:	e8 2a e9 ff ff       	call   c0007805 <malloc>
c0008edb:	83 c4 10             	add    esp,0x10
c0008ede:	89 c3                	mov    ebx,eax
c0008ee0:	83 ec 08             	sub    esp,0x8
c0008ee3:	68 00 ff ff 0f       	push   0xfffff00
c0008ee8:	53                   	push   ebx
c0008ee9:	e8 cc 00 00 00       	call   c0008fba <ReservedFilename::ReservedFilename(int)>
c0008eee:	83 c4 10             	add    esp,0x10
c0008ef1:	89 1d 44 07 02 c0    	mov    DWORD PTR ds:0xc0020744,ebx
c0008ef7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008eff:	83 ec 0c             	sub    esp,0xc
c0008f02:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f06:	e8 fa e8 ff ff       	call   c0007805 <malloc>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 c3                	mov    ebx,eax
c0008f10:	83 ec 08             	sub    esp,0x8
c0008f13:	68 02 ff ff 0f       	push   0xfffff02
c0008f18:	53                   	push   ebx
c0008f19:	e8 9c 00 00 00       	call   c0008fba <ReservedFilename::ReservedFilename(int)>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	89 1d 48 07 02 c0    	mov    DWORD PTR ds:0xc0020748,ebx
c0008f27:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f2f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f34:	7f 7e                	jg     c0008fb4 <UnixFile::UnixFile(int)+0x1aa>
c0008f36:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f45:	e8 bb e8 ff ff       	call   c0007805 <malloc>
c0008f4a:	83 c4 10             	add    esp,0x10
c0008f4d:	89 c3                	mov    ebx,eax
c0008f4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f53:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f58:	83 ec 08             	sub    esp,0x8
c0008f5b:	50                   	push   eax
c0008f5c:	53                   	push   ebx
c0008f5d:	e8 58 00 00 00       	call   c0008fba <ReservedFilename::ReservedFilename(int)>
c0008f62:	83 c4 10             	add    esp,0x10
c0008f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f69:	89 1c 85 20 07 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf8e0],ebx
c0008f70:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008f78:	83 ec 0c             	sub    esp,0xc
c0008f7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f7f:	e8 81 e8 ff ff       	call   c0007805 <malloc>
c0008f84:	83 c4 10             	add    esp,0x10
c0008f87:	89 c3                	mov    ebx,eax
c0008f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f8d:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008f92:	83 ec 08             	sub    esp,0x8
c0008f95:	50                   	push   eax
c0008f96:	53                   	push   ebx
c0008f97:	e8 1e 00 00 00       	call   c0008fba <ReservedFilename::ReservedFilename(int)>
c0008f9c:	83 c4 10             	add    esp,0x10
c0008f9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa3:	89 1c 85 e0 06 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf920],ebx
c0008faa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fae:	e9 7c ff ff ff       	jmp    c0008f2f <UnixFile::UnixFile(int)+0x125>
c0008fb3:	90                   	nop
c0008fb4:	83 c4 28             	add    esp,0x28
c0008fb7:	5b                   	pop    ebx
c0008fb8:	c3                   	ret    
c0008fb9:	90                   	nop

c0008fba <ReservedFilename::ReservedFilename(int)>:
c0008fba:	83 ec 0c             	sub    esp,0xc
c0008fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fc1:	83 ec 08             	sub    esp,0x8
c0008fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008fc8:	50                   	push   eax
c0008fc9:	e8 3c fe ff ff       	call   c0008e0a <UnixFile::UnixFile(int)>
c0008fce:	83 c4 10             	add    esp,0x10
c0008fd1:	ba a4 d6 01 c0       	mov    edx,0xc001d6a4
c0008fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fda:	89 10                	mov    DWORD PTR [eax],edx
c0008fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fe0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008fe4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fe7:	90                   	nop
c0008fe8:	83 c4 0c             	add    esp,0xc
c0008feb:	c3                   	ret    

c0008fec <UnixFile::~UnixFile()>:
c0008fec:	83 ec 1c             	sub    esp,0x1c
c0008fef:	ba 88 d6 01 c0       	mov    edx,0xc001d688
c0008ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ff8:	89 10                	mov    DWORD PTR [eax],edx
c0008ffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ffe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009001:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009006:	7f 73                	jg     c000907b <UnixFile::~UnixFile()+0x8f>
c0009008:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009010:	83 ec 0c             	sub    esp,0xc
c0009013:	68 58 07 02 c0       	push   0xc0020758
c0009018:	e8 df 31 01 00       	call   c001c1fc <LinkedList<UnixFile>::getFirstElement()>
c000901d:	83 c4 10             	add    esp,0x10
c0009020:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009024:	83 ec 0c             	sub    esp,0xc
c0009027:	68 58 07 02 c0       	push   0xc0020758
c000902c:	e8 d3 31 01 00       	call   c001c204 <LinkedList<UnixFile>::removeFirst()>
c0009031:	83 c4 10             	add    esp,0x10
c0009034:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009038:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000903c:	74 40                	je     c000907e <UnixFile::~UnixFile()+0x92>
c000903e:	83 ec 08             	sub    esp,0x8
c0009041:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009045:	68 58 07 02 c0       	push   0xc0020758
c000904a:	e8 d9 30 01 00       	call   c001c128 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000904f:	83 c4 10             	add    esp,0x10
c0009052:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009056:	8d 50 01             	lea    edx,[eax+0x1]
c0009059:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000905d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009062:	0f 94 c0             	sete   al
c0009065:	84 c0                	test   al,al
c0009067:	74 a7                	je     c0009010 <UnixFile::~UnixFile()+0x24>
c0009069:	83 ec 0c             	sub    esp,0xc
c000906c:	68 60 d6 01 c0       	push   0xc001d660
c0009071:	e8 8d 70 00 00       	call   c0010103 <KePanic(char const*)>
c0009076:	83 c4 10             	add    esp,0x10
c0009079:	eb 95                	jmp    c0009010 <UnixFile::~UnixFile()+0x24>
c000907b:	90                   	nop
c000907c:	eb 01                	jmp    c000907f <UnixFile::~UnixFile()+0x93>
c000907e:	90                   	nop
c000907f:	90                   	nop
c0009080:	83 c4 1c             	add    esp,0x1c
c0009083:	c3                   	ret    

c0009084 <UnixFile::~UnixFile()>:
c0009084:	83 ec 0c             	sub    esp,0xc
c0009087:	83 ec 0c             	sub    esp,0xc
c000908a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000908e:	e8 59 ff ff ff       	call   c0008fec <UnixFile::~UnixFile()>
c0009093:	83 c4 10             	add    esp,0x10
c0009096:	83 ec 08             	sub    esp,0x8
c0009099:	6a 0c                	push   0xc
c000909b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909f:	e8 06 13 00 00       	call   c000a3aa <operator delete(void*, unsigned long)>
c00090a4:	83 c4 10             	add    esp,0x10
c00090a7:	83 c4 0c             	add    esp,0xc
c00090aa:	c3                   	ret    
c00090ab:	90                   	nop

c00090ac <ReservedFilename::~ReservedFilename()>:
c00090ac:	83 ec 0c             	sub    esp,0xc
c00090af:	ba a4 d6 01 c0       	mov    edx,0xc001d6a4
c00090b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b8:	89 10                	mov    DWORD PTR [eax],edx
c00090ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090be:	83 ec 0c             	sub    esp,0xc
c00090c1:	50                   	push   eax
c00090c2:	e8 25 ff ff ff       	call   c0008fec <UnixFile::~UnixFile()>
c00090c7:	83 c4 10             	add    esp,0x10
c00090ca:	90                   	nop
c00090cb:	83 c4 0c             	add    esp,0xc
c00090ce:	c3                   	ret    
c00090cf:	90                   	nop

c00090d0 <ReservedFilename::~ReservedFilename()>:
c00090d0:	83 ec 0c             	sub    esp,0xc
c00090d3:	83 ec 0c             	sub    esp,0xc
c00090d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090da:	e8 cd ff ff ff       	call   c00090ac <ReservedFilename::~ReservedFilename()>
c00090df:	83 c4 10             	add    esp,0x10
c00090e2:	83 ec 08             	sub    esp,0x8
c00090e5:	6a 0c                	push   0xc
c00090e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090eb:	e8 ba 12 00 00       	call   c000a3aa <operator delete(void*, unsigned long)>
c00090f0:	83 c4 10             	add    esp,0x10
c00090f3:	83 c4 0c             	add    esp,0xc
c00090f6:	c3                   	ret    

c00090f7 <getFromFileDescriptor(int)>:
c00090f7:	53                   	push   ebx
c00090f8:	83 ec 08             	sub    esp,0x8
c00090fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00090ff:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009105:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000910b:	7f 2c                	jg     c0009139 <getFromFileDescriptor(int)+0x42>
c000910d:	83 ec 0c             	sub    esp,0xc
c0009110:	68 58 07 02 c0       	push   0xc0020758
c0009115:	e8 e2 30 01 00       	call   c001c1fc <LinkedList<UnixFile>::getFirstElement()>
c000911a:	83 c4 10             	add    esp,0x10
c000911d:	85 c0                	test   eax,eax
c000911f:	75 04                	jne    c0009125 <getFromFileDescriptor(int)+0x2e>
c0009121:	31 c0                	xor    eax,eax
c0009123:	eb 6e                	jmp    c0009193 <getFromFileDescriptor(int)+0x9c>
c0009125:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009128:	74 69                	je     c0009193 <getFromFileDescriptor(int)+0x9c>
c000912a:	52                   	push   edx
c000912b:	52                   	push   edx
c000912c:	50                   	push   eax
c000912d:	68 58 07 02 c0       	push   0xc0020758
c0009132:	e8 6f 31 01 00       	call   c001c2a6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009137:	eb e1                	jmp    c000911a <getFromFileDescriptor(int)+0x23>
c0009139:	a1 4c 07 02 c0       	mov    eax,ds:0xc002074c
c000913e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009144:	74 4d                	je     c0009193 <getFromFileDescriptor(int)+0x9c>
c0009146:	a1 50 07 02 c0       	mov    eax,ds:0xc0020750
c000914b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009151:	74 40                	je     c0009193 <getFromFileDescriptor(int)+0x9c>
c0009153:	a1 48 07 02 c0       	mov    eax,ds:0xc0020748
c0009158:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000915e:	74 33                	je     c0009193 <getFromFileDescriptor(int)+0x9c>
c0009160:	a1 44 07 02 c0       	mov    eax,ds:0xc0020744
c0009165:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000916b:	74 26                	je     c0009193 <getFromFileDescriptor(int)+0x9c>
c000916d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009173:	83 f8 08             	cmp    eax,0x8
c0009176:	77 09                	ja     c0009181 <getFromFileDescriptor(int)+0x8a>
c0009178:	8b 04 85 20 07 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf8e0]
c000917f:	eb 12                	jmp    c0009193 <getFromFileDescriptor(int)+0x9c>
c0009181:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009187:	83 fb 08             	cmp    ebx,0x8
c000918a:	77 95                	ja     c0009121 <getFromFileDescriptor(int)+0x2a>
c000918c:	8b 04 9d e0 06 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf920]
c0009193:	83 c4 08             	add    esp,0x8
c0009196:	5b                   	pop    ebx
c0009197:	c3                   	ret    

c0009198 <__static_initialization_and_destruction_0(int, int)>:
c0009198:	83 ec 0c             	sub    esp,0xc
c000919b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091a0:	75 34                	jne    c00091d6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091a2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091aa:	75 2a                	jne    c00091d6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091ac:	83 ec 0c             	sub    esp,0xc
c00091af:	68 58 07 02 c0       	push   0xc0020758
c00091b4:	e8 2d 2f 01 00       	call   c001c0e6 <LinkedList<UnixFile>::LinkedList()>
c00091b9:	83 c4 10             	add    esp,0x10
c00091bc:	83 ec 04             	sub    esp,0x4
c00091bf:	68 e8 f3 01 c0       	push   0xc001f3e8
c00091c4:	68 58 07 02 c0       	push   0xc0020758
c00091c9:	68 e4 c0 01 c0       	push   0xc001c0e4
c00091ce:	e8 87 11 00 00       	call   c000a35a <__cxa_atexit>
c00091d3:	83 c4 10             	add    esp,0x10
c00091d6:	90                   	nop
c00091d7:	83 c4 0c             	add    esp,0xc
c00091da:	c3                   	ret    

c00091db <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00091db:	83 ec 0c             	sub    esp,0xc
c00091de:	83 ec 08             	sub    esp,0x8
c00091e1:	68 ff ff 00 00       	push   0xffff
c00091e6:	6a 01                	push   0x1
c00091e8:	e8 ab ff ff ff       	call   c0009198 <__static_initialization_and_destruction_0(int, int)>
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	83 c4 0c             	add    esp,0xc
c00091f3:	c3                   	ret    

c00091f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00091f4:	53                   	push   ebx
c00091f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00091f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00091fd:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0009203:	89 c8                	mov    eax,ecx
c0009205:	d1 e8                	shr    eax,1
c0009207:	03 05 68 f4 01 c0    	add    eax,DWORD PTR ds:0xc001f468
c000920d:	83 e1 01             	and    ecx,0x1
c0009210:	8a 10                	mov    dl,BYTE PTR [eax]
c0009212:	75 09                	jne    c000921d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009214:	83 e2 f0             	and    edx,0xfffffff0
c0009217:	09 da                	or     edx,ebx
c0009219:	88 10                	mov    BYTE PTR [eax],dl
c000921b:	5b                   	pop    ebx
c000921c:	c3                   	ret    
c000921d:	c1 e3 04             	shl    ebx,0x4
c0009220:	83 e2 0f             	and    edx,0xf
c0009223:	09 da                	or     edx,ebx
c0009225:	88 10                	mov    BYTE PTR [eax],dl
c0009227:	5b                   	pop    ebx
c0009228:	c3                   	ret    

c0009229 <Virt::getPageState(unsigned long)>:
c0009229:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000922d:	8b 0d 68 f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f468
c0009233:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009239:	89 d0                	mov    eax,edx
c000923b:	d1 e8                	shr    eax,1
c000923d:	83 e2 01             	and    edx,0x1
c0009240:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009243:	75 04                	jne    c0009249 <Virt::getPageState(unsigned long)+0x20>
c0009245:	83 e0 0f             	and    eax,0xf
c0009248:	c3                   	ret    
c0009249:	c0 e8 04             	shr    al,0x4
c000924c:	c3                   	ret    

c000924d <Virt::allocateKernelVirtualPages(int)>:
c000924d:	55                   	push   ebp
c000924e:	31 ed                	xor    ebp,ebp
c0009250:	57                   	push   edi
c0009251:	56                   	push   esi
c0009252:	53                   	push   ebx
c0009253:	31 db                	xor    ebx,ebx
c0009255:	83 ec 1c             	sub    esp,0x1c
c0009258:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000925c:	8b 3d 64 f4 01 c0    	mov    edi,DWORD PTR ds:0xc001f464
c0009262:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009267:	57                   	push   edi
c0009268:	e8 bc ff ff ff       	call   c0009229 <Virt::getPageState(unsigned long)>
c000926d:	5a                   	pop    edx
c000926e:	84 c0                	test   al,al
c0009270:	75 3a                	jne    c00092ac <Virt::allocateKernelVirtualPages(int)+0x5f>
c0009272:	85 db                	test   ebx,ebx
c0009274:	75 02                	jne    c0009278 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0009276:	89 fd                	mov    ebp,edi
c0009278:	43                   	inc    ebx
c0009279:	39 f3                	cmp    ebx,esi
c000927b:	74 5a                	je     c00092d7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000927d:	47                   	inc    edi
c000927e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009284:	76 31                	jbe    c00092b7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0009286:	c7 05 64 f4 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f464,0xc8000
c0009290:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009295:	75 28                	jne    c00092bf <Virt::allocateKernelVirtualPages(int)+0x72>
c0009297:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000929c:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092a1:	57                   	push   edi
c00092a2:	e8 82 ff ff ff       	call   c0009229 <Virt::getPageState(unsigned long)>
c00092a7:	5a                   	pop    edx
c00092a8:	84 c0                	test   al,al
c00092aa:	74 c6                	je     c0009272 <Virt::allocateKernelVirtualPages(int)+0x25>
c00092ac:	31 db                	xor    ebx,ebx
c00092ae:	47                   	inc    edi
c00092af:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092b5:	77 cf                	ja     c0009286 <Virt::allocateKernelVirtualPages(int)+0x39>
c00092b7:	89 3d 64 f4 01 c0    	mov    DWORD PTR ds:0xc001f464,edi
c00092bd:	eb a8                	jmp    c0009267 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092bf:	83 ec 0c             	sub    esp,0xc
c00092c2:	68 b8 d6 01 c0       	push   0xc001d6b8
c00092c7:	e8 37 6e 00 00       	call   c0010103 <KePanic(char const*)>
c00092cc:	8b 3d 64 f4 01 c0    	mov    edi,DWORD PTR ds:0xc001f464
c00092d2:	83 c4 10             	add    esp,0x10
c00092d5:	eb 90                	jmp    c0009267 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092d7:	89 2d 64 f4 01 c0    	mov    DWORD PTR ds:0xc001f464,ebp
c00092dd:	4b                   	dec    ebx
c00092de:	74 5f                	je     c000933f <Virt::allocateKernelVirtualPages(int)+0xf2>
c00092e0:	85 f6                	test   esi,esi
c00092e2:	74 3d                	je     c0009321 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00092e4:	89 e8                	mov    eax,ebp
c00092e6:	31 db                	xor    ebx,ebx
c00092e8:	8d 7e ff             	lea    edi,[esi-0x1]
c00092eb:	eb 14                	jmp    c0009301 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00092ed:	6a 01                	push   0x1
c00092ef:	43                   	inc    ebx
c00092f0:	50                   	push   eax
c00092f1:	e8 fe fe ff ff       	call   c00091f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00092f6:	58                   	pop    eax
c00092f7:	39 f3                	cmp    ebx,esi
c00092f9:	5a                   	pop    edx
c00092fa:	74 25                	je     c0009321 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00092fc:	a1 64 f4 01 c0       	mov    eax,ds:0xc001f464
c0009301:	8d 50 01             	lea    edx,[eax+0x1]
c0009304:	85 db                	test   ebx,ebx
c0009306:	89 15 64 f4 01 c0    	mov    DWORD PTR ds:0xc001f464,edx
c000930c:	74 20                	je     c000932e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000930e:	39 df                	cmp    edi,ebx
c0009310:	75 db                	jne    c00092ed <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009312:	6a 03                	push   0x3
c0009314:	43                   	inc    ebx
c0009315:	50                   	push   eax
c0009316:	e8 d9 fe ff ff       	call   c00091f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000931b:	59                   	pop    ecx
c000931c:	39 f3                	cmp    ebx,esi
c000931e:	58                   	pop    eax
c000931f:	75 db                	jne    c00092fc <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009321:	83 c4 1c             	add    esp,0x1c
c0009324:	89 e8                	mov    eax,ebp
c0009326:	5b                   	pop    ebx
c0009327:	c1 e0 0c             	shl    eax,0xc
c000932a:	5e                   	pop    esi
c000932b:	5f                   	pop    edi
c000932c:	5d                   	pop    ebp
c000932d:	c3                   	ret    
c000932e:	6a 02                	push   0x2
c0009330:	bb 01 00 00 00       	mov    ebx,0x1
c0009335:	50                   	push   eax
c0009336:	e8 b9 fe ff ff       	call   c00091f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000933b:	58                   	pop    eax
c000933c:	5a                   	pop    edx
c000933d:	eb bd                	jmp    c00092fc <Virt::allocateKernelVirtualPages(int)+0xaf>
c000933f:	6a 04                	push   0x4
c0009341:	8d 45 01             	lea    eax,[ebp+0x1]
c0009344:	55                   	push   ebp
c0009345:	a3 64 f4 01 c0       	mov    ds:0xc001f464,eax
c000934a:	e8 a5 fe ff ff       	call   c00091f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000934f:	59                   	pop    ecx
c0009350:	89 e8                	mov    eax,ebp
c0009352:	5b                   	pop    ebx
c0009353:	c1 e0 0c             	shl    eax,0xc
c0009356:	83 c4 1c             	add    esp,0x1c
c0009359:	5b                   	pop    ebx
c000935a:	5e                   	pop    esi
c000935b:	5f                   	pop    edi
c000935c:	5d                   	pop    ebp
c000935d:	c3                   	ret    

c000935e <Virt::freeSwapfilePage(unsigned long)>:
c000935e:	53                   	push   ebx
c000935f:	8b 15 6c 07 02 c0    	mov    edx,DWORD PTR ds:0xc002076c
c0009365:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009369:	b8 01 00 00 00       	mov    eax,0x1
c000936e:	89 cb                	mov    ebx,ecx
c0009370:	d3 e0                	shl    eax,cl
c0009372:	c1 eb 05             	shr    ebx,0x5
c0009375:	f7 d0                	not    eax
c0009377:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000937a:	5b                   	pop    ebx
c000937b:	c3                   	ret    

c000937c <Virt::swapIDToSector(unsigned long)>:
c000937c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009380:	0f af 05 6c f4 01 c0 	imul   eax,DWORD PTR ds:0xc001f46c
c0009387:	03 05 74 f4 01 c0    	add    eax,DWORD PTR ds:0xc001f474
c000938d:	c3                   	ret    

c000938e <Virt::allocateSwapfilePage()>:
c000938e:	55                   	push   ebp
c000938f:	31 d2                	xor    edx,edx
c0009391:	57                   	push   edi
c0009392:	56                   	push   esi
c0009393:	53                   	push   ebx
c0009394:	83 ec 0c             	sub    esp,0xc
c0009397:	8b 0d 6c f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f46c
c000939d:	a1 70 f4 01 c0       	mov    eax,ds:0xc001f470
c00093a2:	f7 f1                	div    ecx
c00093a4:	39 0d 70 f4 01 c0    	cmp    DWORD PTR ds:0xc001f470,ecx
c00093aa:	72 2d                	jb     c00093d9 <Virt::allocateSwapfilePage()+0x4b>
c00093ac:	8b 35 6c 07 02 c0    	mov    esi,DWORD PTR ds:0xc002076c
c00093b2:	8b 16                	mov    edx,DWORD PTR [esi]
c00093b4:	f6 c2 01             	test   dl,0x1
c00093b7:	74 3c                	je     c00093f5 <Virt::allocateSwapfilePage()+0x67>
c00093b9:	31 c9                	xor    ecx,ecx
c00093bb:	bf 01 00 00 00       	mov    edi,0x1
c00093c0:	eb 12                	jmp    c00093d4 <Virt::allocateSwapfilePage()+0x46>
c00093c2:	89 fd                	mov    ebp,edi
c00093c4:	89 ca                	mov    edx,ecx
c00093c6:	d3 e5                	shl    ebp,cl
c00093c8:	c1 ea 05             	shr    edx,0x5
c00093cb:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00093ce:	8b 13                	mov    edx,DWORD PTR [ebx]
c00093d0:	85 ea                	test   edx,ebp
c00093d2:	74 2a                	je     c00093fe <Virt::allocateSwapfilePage()+0x70>
c00093d4:	41                   	inc    ecx
c00093d5:	39 c8                	cmp    eax,ecx
c00093d7:	77 e9                	ja     c00093c2 <Virt::allocateSwapfilePage()+0x34>
c00093d9:	83 ec 0c             	sub    esp,0xc
c00093dc:	68 1f d8 01 c0       	push   0xc001d81f
c00093e1:	e8 1d 6d 00 00       	call   c0010103 <KePanic(char const*)>
c00093e6:	83 c4 10             	add    esp,0x10
c00093e9:	31 c9                	xor    ecx,ecx
c00093eb:	83 c4 0c             	add    esp,0xc
c00093ee:	89 c8                	mov    eax,ecx
c00093f0:	5b                   	pop    ebx
c00093f1:	5e                   	pop    esi
c00093f2:	5f                   	pop    edi
c00093f3:	5d                   	pop    ebp
c00093f4:	c3                   	ret    
c00093f5:	89 f3                	mov    ebx,esi
c00093f7:	bd 01 00 00 00       	mov    ebp,0x1
c00093fc:	31 c9                	xor    ecx,ecx
c00093fe:	09 ea                	or     edx,ebp
c0009400:	89 c8                	mov    eax,ecx
c0009402:	89 13                	mov    DWORD PTR [ebx],edx
c0009404:	83 c4 0c             	add    esp,0xc
c0009407:	5b                   	pop    ebx
c0009408:	5e                   	pop    esi
c0009409:	5f                   	pop    edi
c000940a:	5d                   	pop    ebp
c000940b:	c3                   	ret    

c000940c <Virt::virtualMemorySetup()>:
c000940c:	53                   	push   ebx
c000940d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009412:	6a 0f                	push   0xf
c0009414:	53                   	push   ebx
c0009415:	43                   	inc    ebx
c0009416:	e8 d9 fd ff ff       	call   c00091f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000941b:	58                   	pop    eax
c000941c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009422:	5a                   	pop    edx
c0009423:	75 ed                	jne    c0009412 <Virt::virtualMemorySetup()+0x6>
c0009425:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000942a:	6a 00                	push   0x0
c000942c:	53                   	push   ebx
c000942d:	43                   	inc    ebx
c000942e:	e8 c1 fd ff ff       	call   c00091f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009433:	59                   	pop    ecx
c0009434:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000943a:	58                   	pop    eax
c000943b:	75 ed                	jne    c000942a <Virt::virtualMemorySetup()+0x1e>
c000943d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009442:	6a 0f                	push   0xf
c0009444:	53                   	push   ebx
c0009445:	43                   	inc    ebx
c0009446:	e8 a9 fd ff ff       	call   c00091f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000944b:	58                   	pop    eax
c000944c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009452:	5a                   	pop    edx
c0009453:	75 ed                	jne    c0009442 <Virt::virtualMemorySetup()+0x36>
c0009455:	5b                   	pop    ebx
c0009456:	c3                   	ret    

c0009457 <Virt::setupPageSwapping(int)>:
c0009457:	53                   	push   ebx
c0009458:	83 ec 0c             	sub    esp,0xc
c000945b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000945f:	a1 e8 2b 02 c0       	mov    eax,ds:0xc0022be8
c0009464:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000946a:	8b 10                	mov    edx,DWORD PTR [eax]
c000946c:	53                   	push   ebx
c000946d:	c1 e3 0b             	shl    ebx,0xb
c0009470:	68 36 d8 01 c0       	push   0xc001d836
c0009475:	50                   	push   eax
c0009476:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009479:	89 1d 70 f4 01 c0    	mov    DWORD PTR ds:0xc001f470,ebx
c000947f:	c6 05 78 f4 01 c0 43 	mov    BYTE PTR ds:0xc001f478,0x43
c0009486:	c1 eb 08             	shr    ebx,0x8
c0009489:	a3 74 f4 01 c0       	mov    ds:0xc001f474,eax
c000948e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009491:	c7 05 6c f4 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f46c,0x8
c000949b:	e8 65 e3 ff ff       	call   c0007805 <malloc>
c00094a0:	83 c4 0c             	add    esp,0xc
c00094a3:	89 c1                	mov    ecx,eax
c00094a5:	a3 6c 07 02 c0       	mov    ds:0xc002076c,eax
c00094aa:	31 d2                	xor    edx,edx
c00094ac:	a1 70 f4 01 c0       	mov    eax,ds:0xc001f470
c00094b1:	f7 35 6c f4 01 c0    	div    DWORD PTR ds:0xc001f46c
c00094b7:	c1 e8 05             	shr    eax,0x5
c00094ba:	50                   	push   eax
c00094bb:	6a 00                	push   0x0
c00094bd:	51                   	push   ecx
c00094be:	e8 0d 70 ff ff       	call   c00004d0 <memset>
c00094c3:	83 c4 18             	add    esp,0x18
c00094c6:	5b                   	pop    ebx
c00094c7:	c3                   	ret    

c00094c8 <VAS::VAS()>:
c00094c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00094d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00094de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094e2:	a3 70 07 02 c0       	mov    ds:0xc0020770,eax
c00094e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094eb:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00094ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094f3:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00094f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094fa:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009501:	90                   	nop
c0009502:	c3                   	ret    
c0009503:	90                   	nop

c0009504 <VAS::VAS(VAS*)>:
c0009504:	83 ec 0c             	sub    esp,0xc
c0009507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000950b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009516:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000951d:	83 ec 0c             	sub    esp,0xc
c0009520:	68 d8 d6 01 c0       	push   0xc001d6d8
c0009525:	e8 d9 6b 00 00       	call   c0010103 <KePanic(char const*)>
c000952a:	83 c4 10             	add    esp,0x10
c000952d:	90                   	nop
c000952e:	83 c4 0c             	add    esp,0xc
c0009531:	c3                   	ret    

c0009532 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009532:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009536:	89 c2                	mov    edx,eax
c0009538:	c1 e8 0a             	shr    eax,0xa
c000953b:	c1 ea 16             	shr    edx,0x16
c000953e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009543:	19 c9                	sbb    ecx,ecx
c0009545:	c1 e2 0c             	shl    edx,0xc
c0009548:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000954e:	25 fc 0f 00 00       	and    eax,0xffc
c0009553:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000955a:	01 d0                	add    eax,edx
c000955c:	c3                   	ret    
c000955d:	90                   	nop

c000955e <VAS::getPageTableEntry(unsigned long)>:
c000955e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009562:	89 ca                	mov    edx,ecx
c0009564:	c1 e9 0a             	shr    ecx,0xa
c0009567:	c1 ea 16             	shr    edx,0x16
c000956a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009570:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009576:	c1 e0 0c             	shl    eax,0xc
c0009579:	8d 04 08             	lea    eax,[eax+ecx*1]
c000957c:	c3                   	ret    

c000957d <Virt::freeKernelVirtualPages(unsigned long)>:
c000957d:	57                   	push   edi
c000957e:	56                   	push   esi
c000957f:	be 01 00 00 00       	mov    esi,0x1
c0009584:	53                   	push   ebx
c0009585:	83 ec 10             	sub    esp,0x10
c0009588:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000958c:	c1 eb 0c             	shr    ebx,0xc
c000958f:	eb 3f                	jmp    c00095d0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009591:	83 ec 08             	sub    esp,0x8
c0009594:	a1 70 07 02 c0       	mov    eax,ds:0xc0020770
c0009599:	57                   	push   edi
c000959a:	50                   	push   eax
c000959b:	e8 be ff ff ff       	call   c000955e <VAS::getPageTableEntry(unsigned long)>
c00095a0:	83 c4 10             	add    esp,0x10
c00095a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00095a5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095a9:	f6 c4 04             	test   ah,0x4
c00095ac:	75 60                	jne    c000960e <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095ae:	80 fa 04             	cmp    dl,0x4
c00095b1:	74 79                	je     c000962c <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095b3:	80 fa 02             	cmp    dl,0x2
c00095b6:	0f 84 89 00 00 00    	je     c0009645 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095bc:	80 fa 03             	cmp    dl,0x3
c00095bf:	0f 84 ae 00 00 00    	je     c0009673 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095c5:	fe ca                	dec    dl
c00095c7:	0f 84 93 00 00 00    	je     c0009660 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00095cd:	43                   	inc    ebx
c00095ce:	31 f6                	xor    esi,esi
c00095d0:	53                   	push   ebx
c00095d1:	89 df                	mov    edi,ebx
c00095d3:	e8 51 fc ff ff       	call   c0009229 <Virt::getPageState(unsigned long)>
c00095d8:	c1 e7 0c             	shl    edi,0xc
c00095db:	5a                   	pop    edx
c00095dc:	84 c0                	test   al,al
c00095de:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00095e2:	75 ad                	jne    c0009591 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00095e4:	83 ec 0c             	sub    esp,0xc
c00095e7:	68 4d d8 01 c0       	push   0xc001d84d
c00095ec:	e8 12 6b 00 00       	call   c0010103 <KePanic(char const*)>
c00095f1:	5a                   	pop    edx
c00095f2:	59                   	pop    ecx
c00095f3:	57                   	push   edi
c00095f4:	8b 3d 70 07 02 c0    	mov    edi,DWORD PTR ds:0xc0020770
c00095fa:	57                   	push   edi
c00095fb:	e8 5e ff ff ff       	call   c000955e <VAS::getPageTableEntry(unsigned long)>
c0009600:	83 c4 10             	add    esp,0x10
c0009603:	8b 00                	mov    eax,DWORD PTR [eax]
c0009605:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009609:	f6 c4 04             	test   ah,0x4
c000960c:	74 bf                	je     c00095cd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000960e:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009612:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	50                   	push   eax
c000961b:	e8 5f e4 ff ff       	call   c0007a7f <Phys::freePage(unsigned long)>
c0009620:	83 c4 10             	add    esp,0x10
c0009623:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009627:	80 fa 04             	cmp    dl,0x4
c000962a:	75 87                	jne    c00095b3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000962c:	89 f0                	mov    eax,esi
c000962e:	84 c0                	test   al,al
c0009630:	75 47                	jne    c0009679 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0009632:	c7 44 24 20 fc d6 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d6fc
c000963a:	83 c4 10             	add    esp,0x10
c000963d:	5b                   	pop    ebx
c000963e:	5e                   	pop    esi
c000963f:	5f                   	pop    edi
c0009640:	e9 be 6a 00 00       	jmp    c0010103 <KePanic(char const*)>
c0009645:	89 f0                	mov    eax,esi
c0009647:	84 c0                	test   al,al
c0009649:	75 15                	jne    c0009660 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c000964b:	83 ec 0c             	sub    esp,0xc
c000964e:	68 69 d8 01 c0       	push   0xc001d869
c0009653:	e8 ab 6a 00 00       	call   c0010103 <KePanic(char const*)>
c0009658:	83 c4 10             	add    esp,0x10
c000965b:	e9 6d ff ff ff       	jmp    c00095cd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009660:	83 ec 08             	sub    esp,0x8
c0009663:	6a 00                	push   0x0
c0009665:	53                   	push   ebx
c0009666:	e8 89 fb ff ff       	call   c00091f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000966b:	83 c4 10             	add    esp,0x10
c000966e:	e9 5a ff ff ff       	jmp    c00095cd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009673:	89 f0                	mov    eax,esi
c0009675:	84 c0                	test   al,al
c0009677:	75 15                	jne    c000968e <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009679:	83 ec 08             	sub    esp,0x8
c000967c:	6a 00                	push   0x0
c000967e:	53                   	push   ebx
c000967f:	e8 70 fb ff ff       	call   c00091f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009684:	83 c4 10             	add    esp,0x10
c0009687:	83 c4 10             	add    esp,0x10
c000968a:	5b                   	pop    ebx
c000968b:	5e                   	pop    esi
c000968c:	5f                   	pop    edi
c000968d:	c3                   	ret    
c000968e:	c7 44 24 20 85 d8 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d885
c0009696:	83 c4 10             	add    esp,0x10
c0009699:	5b                   	pop    ebx
c000969a:	5e                   	pop    esi
c000969b:	5f                   	pop    edi
c000969c:	e9 62 6a 00 00       	jmp    c0010103 <KePanic(char const*)>
c00096a1:	90                   	nop

c00096a2 <VAS::freeAllocatedPages(unsigned long)>:
c00096a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096aa:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096ae:	74 09                	je     c00096b9 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096b0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096b4:	e9 c4 fe ff ff       	jmp    c000957d <Virt::freeKernelVirtualPages(unsigned long)>
c00096b9:	c7 44 24 04 20 d7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d720
c00096c1:	e9 da 0d 00 00       	jmp    c000a4a0 <Dbg::kprintf(char const*, ...)>

c00096c6 <VAS::virtualToPhysical(unsigned long)>:
c00096c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096ca:	50                   	push   eax
c00096cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096cf:	52                   	push   edx
c00096d0:	e8 89 fe ff ff       	call   c000955e <VAS::getPageTableEntry(unsigned long)>
c00096d5:	59                   	pop    ecx
c00096d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00096d8:	5a                   	pop    edx
c00096d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096de:	c3                   	ret    
c00096df:	90                   	nop

c00096e0 <VAS::reflagRange(unsigned long, int, int, int)>:
c00096e0:	55                   	push   ebp
c00096e1:	57                   	push   edi
c00096e2:	56                   	push   esi
c00096e3:	53                   	push   ebx
c00096e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00096e8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00096ec:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00096f0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00096f4:	85 db                	test   ebx,ebx
c00096f6:	7e 22                	jle    c000971a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00096f8:	c1 e3 0c             	shl    ebx,0xc
c00096fb:	01 f3                	add    ebx,esi
c00096fd:	56                   	push   esi
c00096fe:	81 c6 00 10 00 00    	add    esi,0x1000
c0009704:	55                   	push   ebp
c0009705:	e8 54 fe ff ff       	call   c000955e <VAS::getPageTableEntry(unsigned long)>
c000970a:	5a                   	pop    edx
c000970b:	59                   	pop    ecx
c000970c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000970e:	21 f9                	and    ecx,edi
c0009710:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009714:	39 f3                	cmp    ebx,esi
c0009716:	89 08                	mov    DWORD PTR [eax],ecx
c0009718:	75 e3                	jne    c00096fd <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000971a:	5b                   	pop    ebx
c000971b:	5e                   	pop    esi
c000971c:	5f                   	pop    edi
c000971d:	5d                   	pop    ebp
c000971e:	c3                   	ret    
c000971f:	90                   	nop

c0009720 <VAS::setToWriteCombining(unsigned long, int)>:
c0009720:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0009725:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000972b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009732:	75 01                	jne    c0009735 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009734:	c3                   	ret    
c0009735:	68 80 00 00 00       	push   0x80
c000973a:	6a ff                	push   0xffffffff
c000973c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009740:	50                   	push   eax
c0009741:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009745:	52                   	push   edx
c0009746:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000974a:	51                   	push   ecx
c000974b:	e8 90 ff ff ff       	call   c00096e0 <VAS::reflagRange(unsigned long, int, int, int)>
c0009750:	83 c4 14             	add    esp,0x14
c0009753:	c3                   	ret    

c0009754 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009754:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009759:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000975d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009764:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009767:	19 c0                	sbb    eax,eax
c0009769:	83 ca 03             	or     edx,0x3
c000976c:	83 e0 fc             	and    eax,0xfffffffc
c000976f:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009776:	0f 20 d8             	mov    eax,cr3
c0009779:	0f 22 d8             	mov    cr3,eax
c000977c:	c3                   	ret    
c000977d:	90                   	nop

c000977e <VAS::~VAS()>:
c000977e:	83 ec 2c             	sub    esp,0x2c
c0009781:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009789:	fa                   	cli    
c000978a:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c000978f:	40                   	inc    eax
c0009790:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0009795:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000979a:	8b 00                	mov    eax,DWORD PTR [eax]
c000979c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000979f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097a9:	6a 01                	push   0x1
c00097ab:	50                   	push   eax
c00097ac:	e8 a3 ff ff ff       	call   c0009754 <VAS::mapOtherVASIn(bool, VAS*)>
c00097b1:	83 c4 0c             	add    esp,0xc
c00097b4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00097bc:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00097c4:	0f 8f d4 00 00 00    	jg     c000989e <VAS::~VAS()+0x120>
c00097ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00097ce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00097d1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097d5:	c1 e2 02             	shl    edx,0x2
c00097d8:	01 d0                	add    eax,edx
c00097da:	8b 00                	mov    eax,DWORD PTR [eax]
c00097dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097e4:	83 e0 01             	and    eax,0x1
c00097e7:	0f 84 a8 00 00 00    	je     c0009895 <VAS::~VAS()+0x117>
c00097ed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00097f5:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00097fd:	7f 72                	jg     c0009871 <VAS::~VAS()+0xf3>
c00097ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009803:	c1 e0 0a             	shl    eax,0xa
c0009806:	89 c2                	mov    edx,eax
c0009808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000980c:	01 d0                	add    eax,edx
c000980e:	c1 e0 0c             	shl    eax,0xc
c0009811:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009815:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000981a:	8b 00                	mov    eax,DWORD PTR [eax]
c000981c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000981f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009825:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009829:	6a 01                	push   0x1
c000982b:	50                   	push   eax
c000982c:	e8 01 fd ff ff       	call   c0009532 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009838:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000983c:	8b 00                	mov    eax,DWORD PTR [eax]
c000983e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009846:	25 01 04 00 00       	and    eax,0x401
c000984b:	3d 01 04 00 00       	cmp    eax,0x401
c0009850:	75 19                	jne    c000986b <VAS::~VAS()+0xed>
c0009852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009856:	25 00 f0 ff ff       	and    eax,0xfffff000
c000985b:	83 ec 0c             	sub    esp,0xc
c000985e:	50                   	push   eax
c000985f:	e8 1b e2 ff ff       	call   c0007a7f <Phys::freePage(unsigned long)>
c0009864:	83 c4 10             	add    esp,0x10
c0009867:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000986b:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000986f:	eb 84                	jmp    c00097f5 <VAS::~VAS()+0x77>
c0009871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009875:	25 00 04 00 00       	and    eax,0x400
c000987a:	74 19                	je     c0009895 <VAS::~VAS()+0x117>
c000987c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009880:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009885:	83 ec 0c             	sub    esp,0xc
c0009888:	50                   	push   eax
c0009889:	e8 f1 e1 ff ff       	call   c0007a7f <Phys::freePage(unsigned long)>
c000988e:	83 c4 10             	add    esp,0x10
c0009891:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009895:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009899:	e9 1e ff ff ff       	jmp    c00097bc <VAS::~VAS()+0x3e>
c000989e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098a5:	83 ec 0c             	sub    esp,0xc
c00098a8:	50                   	push   eax
c00098a9:	e8 cf fc ff ff       	call   c000957d <Virt::freeKernelVirtualPages(unsigned long)>
c00098ae:	83 c4 10             	add    esp,0x10
c00098b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00098b8:	83 ec 0c             	sub    esp,0xc
c00098bb:	50                   	push   eax
c00098bc:	e8 be e1 ff ff       	call   c0007a7f <Phys::freePage(unsigned long)>
c00098c1:	83 c4 10             	add    esp,0x10
c00098c4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098c8:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c00098cd:	48                   	dec    eax
c00098ce:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c00098d3:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c00098d8:	85 c0                	test   eax,eax
c00098da:	75 01                	jne    c00098dd <VAS::~VAS()+0x15f>
c00098dc:	fb                   	sti    
c00098dd:	90                   	nop
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	53                   	push   ebx
c00098e6:	83 ec 1c             	sub    esp,0x1c
c00098e9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00098ed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00098f1:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00098f7:	77 0b                	ja     c0009904 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c00098f9:	0f 20 d8             	mov    eax,cr3
c00098fc:	0f 20 d8             	mov    eax,cr3
c00098ff:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009902:	75 47                	jne    c000994b <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009904:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009908:	09 d8                	or     eax,ebx
c000990a:	a9 ff 0f 00 00       	test   eax,0xfff
c000990f:	75 57                	jne    c0009968 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009911:	89 de                	mov    esi,ebx
c0009913:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009916:	c1 ee 16             	shr    esi,0x16
c0009919:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009920:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009924:	74 54                	je     c000997a <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009926:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000992a:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009930:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009934:	c1 e6 0c             	shl    esi,0xc
c0009937:	c1 eb 0a             	shr    ebx,0xa
c000993a:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009940:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009943:	83 c4 1c             	add    esp,0x1c
c0009946:	5b                   	pop    ebx
c0009947:	5e                   	pop    esi
c0009948:	5f                   	pop    edi
c0009949:	5d                   	pop    ebp
c000994a:	c3                   	ret    
c000994b:	83 ec 0c             	sub    esp,0xc
c000994e:	68 44 d7 01 c0       	push   0xc001d744
c0009953:	e8 48 0b 00 00       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0009958:	83 c4 10             	add    esp,0x10
c000995b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000995f:	09 d8                	or     eax,ebx
c0009961:	a9 ff 0f 00 00       	test   eax,0xfff
c0009966:	74 a9                	je     c0009911 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009968:	83 ec 0c             	sub    esp,0xc
c000996b:	68 ac d7 01 c0       	push   0xc001d7ac
c0009970:	e8 8e 67 00 00       	call   c0010103 <KePanic(char const*)>
c0009975:	83 c4 10             	add    esp,0x10
c0009978:	eb 97                	jmp    c0009911 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000997a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000997e:	e8 5e e1 ff ff       	call   c0007ae1 <Phys::allocatePage()>
c0009983:	83 ec 0c             	sub    esp,0xc
c0009986:	89 c5                	mov    ebp,eax
c0009988:	8b 0d 70 07 02 c0    	mov    ecx,DWORD PTR ds:0xc0020770
c000998e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009992:	6a 01                	push   0x1
c0009994:	e8 b4 f8 ff ff       	call   c000924d <Virt::allocateKernelVirtualPages(int)>
c0009999:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099a0:	6a 01                	push   0x1
c00099a2:	50                   	push   eax
c00099a3:	55                   	push   ebp
c00099a4:	81 cd 07 04 00 00    	or     ebp,0x407
c00099aa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00099ae:	51                   	push   ecx
c00099af:	e8 28 02 00 00       	call   c0009bdc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099b4:	83 c4 1c             	add    esp,0x1c
c00099b7:	68 00 10 00 00       	push   0x1000
c00099bc:	6a 00                	push   0x0
c00099be:	50                   	push   eax
c00099bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00099c3:	e8 08 6b ff ff       	call   c00004d0 <memset>
c00099c8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00099cc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099cf:	e8 a9 fb ff ff       	call   c000957d <Virt::freeKernelVirtualPages(unsigned long)>
c00099d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099d8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00099db:	83 c4 10             	add    esp,0x10
c00099de:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00099e1:	e9 40 ff ff ff       	jmp    c0009926 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c00099e6 <VAS::allocatePages(int, int)>:
c00099e6:	55                   	push   ebp
c00099e7:	57                   	push   edi
c00099e8:	56                   	push   esi
c00099e9:	53                   	push   ebx
c00099ea:	83 ec 1c             	sub    esp,0x1c
c00099ed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00099f1:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c00099f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00099fc:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a02:	83 e0 01             	and    eax,0x1
c0009a05:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a09:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a0d:	0f 85 cc 00 00 00    	jne    c0009adf <VAS::allocatePages(int, int)+0xf9>
c0009a13:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a1a:	85 c0                	test   eax,eax
c0009a1c:	0f 84 a1 00 00 00    	je     c0009ac3 <VAS::allocatePages(int, int)+0xdd>
c0009a22:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a2a:	c1 e6 0c             	shl    esi,0xc
c0009a2d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a31:	85 c0                	test   eax,eax
c0009a33:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a36:	7e 33                	jle    c0009a6b <VAS::allocatePages(int, int)+0x85>
c0009a38:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a3c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a40:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a46:	e8 96 e0 ff ff       	call   c0007ae1 <Phys::allocatePage()>
c0009a4b:	55                   	push   ebp
c0009a4c:	53                   	push   ebx
c0009a4d:	50                   	push   eax
c0009a4e:	57                   	push   edi
c0009a4f:	e8 8e fe ff ff       	call   c00098e2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a54:	83 c4 10             	add    esp,0x10
c0009a57:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a5c:	74 03                	je     c0009a61 <VAS::allocatePages(int, int)+0x7b>
c0009a5e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a61:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a67:	39 de                	cmp    esi,ebx
c0009a69:	75 db                	jne    c0009a46 <VAS::allocatePages(int, int)+0x60>
c0009a6b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a70:	75 12                	jne    c0009a84 <VAS::allocatePages(int, int)+0x9e>
c0009a72:	0f 20 d8             	mov    eax,cr3
c0009a75:	0f 22 d8             	mov    cr3,eax
c0009a78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a7c:	83 c4 1c             	add    esp,0x1c
c0009a7f:	5b                   	pop    ebx
c0009a80:	5e                   	pop    esi
c0009a81:	5f                   	pop    edi
c0009a82:	5d                   	pop    ebp
c0009a83:	c3                   	ret    
c0009a84:	c1 ee 0a             	shr    esi,0xa
c0009a87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a8b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009a91:	c1 eb 0a             	shr    ebx,0xa
c0009a94:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009a9a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009aa0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009aa6:	39 c3                	cmp    ebx,eax
c0009aa8:	77 ce                	ja     c0009a78 <VAS::allocatePages(int, int)+0x92>
c0009aaa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009aad:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ab3:	39 d8                	cmp    eax,ebx
c0009ab5:	73 f3                	jae    c0009aaa <VAS::allocatePages(int, int)+0xc4>
c0009ab7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009abb:	83 c4 1c             	add    esp,0x1c
c0009abe:	5b                   	pop    ebx
c0009abf:	5e                   	pop    esi
c0009ac0:	5f                   	pop    edi
c0009ac1:	5d                   	pop    ebp
c0009ac2:	c3                   	ret    
c0009ac3:	83 ec 0c             	sub    esp,0xc
c0009ac6:	68 d0 d7 01 c0       	push   0xc001d7d0
c0009acb:	e8 33 66 00 00       	call   c0010103 <KePanic(char const*)>
c0009ad0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009ad3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ad7:	83 c4 10             	add    esp,0x10
c0009ada:	e9 43 ff ff ff       	jmp    c0009a22 <VAS::allocatePages(int, int)+0x3c>
c0009adf:	83 ec 0c             	sub    esp,0xc
c0009ae2:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009ae6:	51                   	push   ecx
c0009ae7:	e8 61 f7 ff ff       	call   c000924d <Virt::allocateKernelVirtualPages(int)>
c0009aec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009af0:	83 c4 10             	add    esp,0x10
c0009af3:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009af8:	0f 87 9b 00 00 00    	ja     c0009b99 <VAS::allocatePages(int, int)+0x1b3>
c0009afe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b02:	85 d2                	test   edx,edx
c0009b04:	7e 3c                	jle    c0009b42 <VAS::allocatePages(int, int)+0x15c>
c0009b06:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b0a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b0e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b12:	c1 e5 0c             	shl    ebp,0xc
c0009b15:	81 ce 00 04 00 00    	or     esi,0x400
c0009b1b:	01 dd                	add    ebp,ebx
c0009b1d:	e8 bf df ff ff       	call   c0007ae1 <Phys::allocatePage()>
c0009b22:	56                   	push   esi
c0009b23:	53                   	push   ebx
c0009b24:	50                   	push   eax
c0009b25:	57                   	push   edi
c0009b26:	e8 b7 fd ff ff       	call   c00098e2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b2b:	83 c4 10             	add    esp,0x10
c0009b2e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b33:	74 03                	je     c0009b38 <VAS::allocatePages(int, int)+0x152>
c0009b35:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b38:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b3e:	39 dd                	cmp    ebp,ebx
c0009b40:	75 db                	jne    c0009b1d <VAS::allocatePages(int, int)+0x137>
c0009b42:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b47:	0f 84 25 ff ff ff    	je     c0009a72 <VAS::allocatePages(int, int)+0x8c>
c0009b4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b51:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b55:	89 d3                	mov    ebx,edx
c0009b57:	c1 e0 0c             	shl    eax,0xc
c0009b5a:	c1 eb 0a             	shr    ebx,0xa
c0009b5d:	01 d0                	add    eax,edx
c0009b5f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b65:	c1 e8 0a             	shr    eax,0xa
c0009b68:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b6e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b73:	2d 00 00 40 00       	sub    eax,0x400000
c0009b78:	39 c3                	cmp    ebx,eax
c0009b7a:	0f 87 f8 fe ff ff    	ja     c0009a78 <VAS::allocatePages(int, int)+0x92>
c0009b80:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b83:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b89:	39 d8                	cmp    eax,ebx
c0009b8b:	73 f3                	jae    c0009b80 <VAS::allocatePages(int, int)+0x19a>
c0009b8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b91:	83 c4 1c             	add    esp,0x1c
c0009b94:	5b                   	pop    ebx
c0009b95:	5e                   	pop    esi
c0009b96:	5f                   	pop    edi
c0009b97:	5d                   	pop    ebp
c0009b98:	c3                   	ret    
c0009b99:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0009b9e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ba4:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009bab:	0f 84 4d ff ff ff    	je     c0009afe <VAS::allocatePages(int, int)+0x118>
c0009bb1:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009bb9:	e9 40 ff ff ff       	jmp    c0009afe <VAS::allocatePages(int, int)+0x118>

c0009bbe <VAS::setCPUSpecific(unsigned long)>:
c0009bbe:	83 ec 0c             	sub    esp,0xc
c0009bc1:	6a 05                	push   0x5
c0009bc3:	68 00 00 40 c2       	push   0xc2400000
c0009bc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bcc:	50                   	push   eax
c0009bcd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009bd1:	52                   	push   edx
c0009bd2:	e8 0b fd ff ff       	call   c00098e2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009bd7:	83 c4 1c             	add    esp,0x1c
c0009bda:	c3                   	ret    
c0009bdb:	90                   	nop

c0009bdc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009bdc:	55                   	push   ebp
c0009bdd:	57                   	push   edi
c0009bde:	56                   	push   esi
c0009bdf:	53                   	push   ebx
c0009be0:	83 ec 1c             	sub    esp,0x1c
c0009be3:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0009be8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009bec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bf2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009bf6:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009bfc:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c00:	83 e0 01             	and    eax,0x1
c0009c03:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c07:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c0b:	85 c0                	test   eax,eax
c0009c0d:	7e 39                	jle    c0009c48 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c13:	89 f3                	mov    ebx,esi
c0009c15:	c1 e0 0c             	shl    eax,0xc
c0009c18:	01 f0                	add    eax,esi
c0009c1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c1e:	55                   	push   ebp
c0009c1f:	53                   	push   ebx
c0009c20:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c24:	29 f0                	sub    eax,esi
c0009c26:	01 d8                	add    eax,ebx
c0009c28:	50                   	push   eax
c0009c29:	57                   	push   edi
c0009c2a:	e8 b3 fc ff ff       	call   c00098e2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c2f:	83 c4 10             	add    esp,0x10
c0009c32:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c37:	74 03                	je     c0009c3c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c39:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c3c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c42:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c46:	75 d6                	jne    c0009c1e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c48:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c4d:	75 10                	jne    c0009c5f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c4f:	0f 20 d8             	mov    eax,cr3
c0009c52:	0f 22 d8             	mov    cr3,eax
c0009c55:	83 c4 1c             	add    esp,0x1c
c0009c58:	89 f0                	mov    eax,esi
c0009c5a:	5b                   	pop    ebx
c0009c5b:	5e                   	pop    esi
c0009c5c:	5f                   	pop    edi
c0009c5d:	5d                   	pop    ebp
c0009c5e:	c3                   	ret    
c0009c5f:	89 f3                	mov    ebx,esi
c0009c61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c65:	c1 eb 0a             	shr    ebx,0xa
c0009c68:	c1 e0 0c             	shl    eax,0xc
c0009c6b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c71:	01 f0                	add    eax,esi
c0009c73:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c79:	c1 e8 0a             	shr    eax,0xa
c0009c7c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c81:	2d 00 00 40 00       	sub    eax,0x400000
c0009c86:	39 c3                	cmp    ebx,eax
c0009c88:	77 cb                	ja     c0009c55 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009c8a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c8d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c93:	39 d8                	cmp    eax,ebx
c0009c95:	73 f3                	jae    c0009c8a <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009c97:	83 c4 1c             	add    esp,0x1c
c0009c9a:	89 f0                	mov    eax,esi
c0009c9c:	5b                   	pop    ebx
c0009c9d:	5e                   	pop    esi
c0009c9e:	5f                   	pop    edi
c0009c9f:	5d                   	pop    ebp
c0009ca0:	c3                   	ret    
c0009ca1:	90                   	nop

c0009ca2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009ca2:	55                   	push   ebp
c0009ca3:	57                   	push   edi
c0009ca4:	56                   	push   esi
c0009ca5:	53                   	push   ebx
c0009ca6:	83 ec 1c             	sub    esp,0x1c
c0009ca9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009cad:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009cb1:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009cb5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009cb9:	a9 ff 0f 00 00       	test   eax,0xfff
c0009cbe:	75 4a                	jne    c0009d0a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009cc0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009cc4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009cc7:	c1 eb 16             	shr    ebx,0x16
c0009cca:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009cd1:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009cd5:	74 4d                	je     c0009d24 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009cd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009cdb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009cdf:	c1 e8 0a             	shr    eax,0xa
c0009ce2:	80 fa 01             	cmp    dl,0x1
c0009ce5:	19 d2                	sbb    edx,edx
c0009ce7:	c1 e3 0c             	shl    ebx,0xc
c0009cea:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009cee:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009cf4:	25 fc 0f 00 00       	and    eax,0xffc
c0009cf9:	01 d8                	add    eax,ebx
c0009cfb:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d02:	83 c4 1c             	add    esp,0x1c
c0009d05:	5b                   	pop    ebx
c0009d06:	5e                   	pop    esi
c0009d07:	5f                   	pop    edi
c0009d08:	5d                   	pop    ebp
c0009d09:	c3                   	ret    
c0009d0a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d0e:	83 ec 0c             	sub    esp,0xc
c0009d11:	68 fc d7 01 c0       	push   0xc001d7fc
c0009d16:	e8 e8 63 00 00       	call   c0010103 <KePanic(char const*)>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d22:	eb 9c                	jmp    c0009cc0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d28:	e8 b4 dd ff ff       	call   c0007ae1 <Phys::allocatePage()>
c0009d2d:	83 ec 0c             	sub    esp,0xc
c0009d30:	89 c5                	mov    ebp,eax
c0009d32:	8b 0d 70 07 02 c0    	mov    ecx,DWORD PTR ds:0xc0020770
c0009d38:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d3c:	6a 01                	push   0x1
c0009d3e:	e8 0a f5 ff ff       	call   c000924d <Virt::allocateKernelVirtualPages(int)>
c0009d43:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d4a:	6a 01                	push   0x1
c0009d4c:	50                   	push   eax
c0009d4d:	55                   	push   ebp
c0009d4e:	81 cd 07 04 00 00    	or     ebp,0x407
c0009d54:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009d58:	51                   	push   ecx
c0009d59:	e8 7e fe ff ff       	call   c0009bdc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d5e:	83 c4 1c             	add    esp,0x1c
c0009d61:	68 00 10 00 00       	push   0x1000
c0009d66:	6a 00                	push   0x0
c0009d68:	50                   	push   eax
c0009d69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d6d:	e8 5e 67 ff ff       	call   c00004d0 <memset>
c0009d72:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009d76:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009d79:	e8 ff f7 ff ff       	call   c000957d <Virt::freeKernelVirtualPages(unsigned long)>
c0009d7e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d81:	83 c4 10             	add    esp,0x10
c0009d84:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009d87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009d8b:	e9 47 ff ff ff       	jmp    c0009cd7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009d90 <VAS::VAS(bool)>:
c0009d90:	53                   	push   ebx
c0009d91:	83 ec 28             	sub    esp,0x28
c0009d94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d98:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009d9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009da0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009da7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dab:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009db2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009db6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009dba:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009dbd:	e8 1f dd ff ff       	call   c0007ae1 <Phys::allocatePage()>
c0009dc2:	89 c2                	mov    edx,eax
c0009dc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dc8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009dcb:	8b 1d 70 07 02 c0    	mov    ebx,DWORD PTR ds:0xc0020770
c0009dd1:	83 ec 0c             	sub    esp,0xc
c0009dd4:	6a 01                	push   0x1
c0009dd6:	e8 72 f4 ff ff       	call   c000924d <Virt::allocateKernelVirtualPages(int)>
c0009ddb:	83 c4 10             	add    esp,0x10
c0009dde:	89 c2                	mov    edx,eax
c0009de0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009de4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009de7:	83 ec 0c             	sub    esp,0xc
c0009dea:	6a 03                	push   0x3
c0009dec:	6a 01                	push   0x1
c0009dee:	52                   	push   edx
c0009def:	50                   	push   eax
c0009df0:	53                   	push   ebx
c0009df1:	e8 e6 fd ff ff       	call   c0009bdc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df6:	83 c4 20             	add    esp,0x20
c0009df9:	89 c2                	mov    edx,eax
c0009dfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dff:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e02:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e0a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e12:	7f 1c                	jg     c0009e30 <VAS::VAS(bool)+0xa0>
c0009e14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e1b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e1f:	c1 e2 02             	shl    edx,0x2
c0009e22:	01 d0                	add    eax,edx
c0009e24:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e2a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009e2e:	eb da                	jmp    c0009e0a <VAS::VAS(bool)+0x7a>
c0009e30:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009e38:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009e40:	7f 7a                	jg     c0009ebc <VAS::VAS(bool)+0x12c>
c0009e42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e46:	2d 00 02 00 00       	sub    eax,0x200
c0009e4b:	c1 e0 0c             	shl    eax,0xc
c0009e4e:	83 c8 03             	or     eax,0x3
c0009e51:	89 c2                	mov    edx,eax
c0009e53:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0009e58:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e5e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009e64:	83 e0 10             	and    eax,0x10
c0009e67:	84 c0                	test   al,al
c0009e69:	74 07                	je     c0009e72 <VAS::VAS(bool)+0xe2>
c0009e6b:	b8 00 01 00 00       	mov    eax,0x100
c0009e70:	eb 05                	jmp    c0009e77 <VAS::VAS(bool)+0xe7>
c0009e72:	b8 00 00 00 00       	mov    eax,0x0
c0009e77:	09 d0                	or     eax,edx
c0009e79:	89 c1                	mov    ecx,eax
c0009e7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e82:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e86:	c1 e2 02             	shl    edx,0x2
c0009e89:	01 d0                	add    eax,edx
c0009e8b:	89 ca                	mov    edx,ecx
c0009e8d:	89 10                	mov    DWORD PTR [eax],edx
c0009e8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e93:	2d 40 03 00 00       	sub    eax,0x340
c0009e98:	83 f8 7f             	cmp    eax,0x7f
c0009e9b:	77 16                	ja     c0009eb3 <VAS::VAS(bool)+0x123>
c0009e9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ea1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ea4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ea8:	c1 e2 02             	shl    edx,0x2
c0009eab:	01 d0                	add    eax,edx
c0009ead:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009eb3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009eb7:	e9 7c ff ff ff       	jmp    c0009e38 <VAS::VAS(bool)+0xa8>
c0009ebc:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0009ec1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ec7:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ecd:	83 e0 10             	and    eax,0x10
c0009ed0:	84 c0                	test   al,al
c0009ed2:	74 07                	je     c0009edb <VAS::VAS(bool)+0x14b>
c0009ed4:	b8 03 41 00 00       	mov    eax,0x4103
c0009ed9:	eb 05                	jmp    c0009ee0 <VAS::VAS(bool)+0x150>
c0009edb:	b8 03 40 00 00       	mov    eax,0x4003
c0009ee0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009ee4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009ee7:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009eed:	89 02                	mov    DWORD PTR [edx],eax
c0009eef:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0009ef4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009efa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f00:	83 ec 08             	sub    esp,0x8
c0009f03:	50                   	push   eax
c0009f04:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f08:	e8 b1 fc ff ff       	call   c0009bbe <VAS::setCPUSpecific(unsigned long)>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f14:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f17:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0009f1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f22:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f28:	83 e0 10             	and    eax,0x10
c0009f2b:	84 c0                	test   al,al
c0009f2d:	74 07                	je     c0009f36 <VAS::VAS(bool)+0x1a6>
c0009f2f:	b8 00 01 00 00       	mov    eax,0x100
c0009f34:	eb 05                	jmp    c0009f3b <VAS::VAS(bool)+0x1ab>
c0009f36:	b8 00 00 00 00       	mov    eax,0x0
c0009f3b:	09 c2                	or     edx,eax
c0009f3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f41:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f44:	05 fc 0f 00 00       	add    eax,0xffc
c0009f49:	83 ca 03             	or     edx,0x3
c0009f4c:	89 10                	mov    DWORD PTR [eax],edx
c0009f4e:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0009f53:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f59:	83 ec 0c             	sub    esp,0xc
c0009f5c:	50                   	push   eax
c0009f5d:	e8 12 1c 00 00       	call   c000bb74 <Device::getName()>
c0009f62:	83 c4 10             	add    esp,0x10
c0009f65:	83 ec 08             	sub    esp,0x8
c0009f68:	68 9f d8 01 c0       	push   0xc001d89f
c0009f6d:	50                   	push   eax
c0009f6e:	e8 6d 67 ff ff       	call   c00006e0 <strcmp>
c0009f73:	83 c4 10             	add    esp,0x10
c0009f76:	85 c0                	test   eax,eax
c0009f78:	0f 94 c0             	sete   al
c0009f7b:	84 c0                	test   al,al
c0009f7d:	0f 84 87 00 00 00    	je     c000a00a <VAS::VAS(bool)+0x27a>
c0009f83:	fa                   	cli    
c0009f84:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0009f89:	40                   	inc    eax
c0009f8a:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0009f8f:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0009f94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f9a:	05 7c 09 00 00       	add    eax,0x97c
c0009f9f:	83 ec 0c             	sub    esp,0xc
c0009fa2:	50                   	push   eax
c0009fa3:	e8 5a d3 ff ff       	call   c0007302 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009fa8:	83 c4 10             	add    esp,0x10
c0009fab:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fb0:	89 c3                	mov    ebx,eax
c0009fb2:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0009fb7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fbd:	05 7c 09 00 00       	add    eax,0x97c
c0009fc2:	83 ec 0c             	sub    esp,0xc
c0009fc5:	50                   	push   eax
c0009fc6:	e8 37 d3 ff ff       	call   c0007302 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009fcb:	83 c4 10             	add    esp,0x10
c0009fce:	83 ec 08             	sub    esp,0x8
c0009fd1:	50                   	push   eax
c0009fd2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fd6:	e8 83 f5 ff ff       	call   c000955e <VAS::getPageTableEntry(unsigned long)>
c0009fdb:	83 c4 10             	add    esp,0x10
c0009fde:	8b 00                	mov    eax,DWORD PTR [eax]
c0009fe0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fe5:	6a 11                	push   0x11
c0009fe7:	53                   	push   ebx
c0009fe8:	50                   	push   eax
c0009fe9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fed:	e8 f0 f8 ff ff       	call   c00098e2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0009ffa:	48                   	dec    eax
c0009ffb:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c000a000:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c000a005:	85 c0                	test   eax,eax
c000a007:	75 01                	jne    c000a00a <VAS::VAS(bool)+0x27a>
c000a009:	fb                   	sti    
c000a00a:	90                   	nop
c000a00b:	83 c4 28             	add    esp,0x28
c000a00e:	5b                   	pop    ebx
c000a00f:	c3                   	ret    

c000a010 <VAS::evict(unsigned long)>:
c000a010:	55                   	push   ebp
c000a011:	57                   	push   edi
c000a012:	56                   	push   esi
c000a013:	53                   	push   ebx
c000a014:	83 ec 1c             	sub    esp,0x1c
c000a017:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a01b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a01f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a023:	e8 66 f3 ff ff       	call   c000938e <Virt::allocateSwapfilePage()>
c000a028:	8b 0d 6c f4 01 c0    	mov    ecx,DWORD PTR ds:0xc001f46c
c000a02e:	89 c7                	mov    edi,eax
c000a030:	85 c9                	test   ecx,ecx
c000a032:	7e 3e                	jle    c000a072 <VAS::evict(unsigned long)+0x62>
c000a034:	89 ee                	mov    esi,ebp
c000a036:	31 db                	xor    ebx,ebx
c000a038:	83 ec 0c             	sub    esp,0xc
c000a03b:	57                   	push   edi
c000a03c:	e8 3b f3 ff ff       	call   c000937c <Virt::swapIDToSector(unsigned long)>
c000a041:	89 34 24             	mov    DWORD PTR [esp],esi
c000a044:	01 d8                	add    eax,ebx
c000a046:	6a 01                	push   0x1
c000a048:	31 d2                	xor    edx,edx
c000a04a:	43                   	inc    ebx
c000a04b:	52                   	push   edx
c000a04c:	81 c6 00 02 00 00    	add    esi,0x200
c000a052:	50                   	push   eax
c000a053:	0f be 05 78 f4 01 c0 	movsx  eax,BYTE PTR ds:0xc001f478
c000a05a:	8b 14 85 dc 2a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd524]
c000a061:	52                   	push   edx
c000a062:	e8 8d 2b 00 00       	call   c000cbf4 <LogicalDisk::write(unsigned long long, int, void*)>
c000a067:	83 c4 20             	add    esp,0x20
c000a06a:	39 1d 6c f4 01 c0    	cmp    DWORD PTR ds:0xc001f46c,ebx
c000a070:	7f c6                	jg     c000a038 <VAS::evict(unsigned long)+0x28>
c000a072:	83 ec 08             	sub    esp,0x8
c000a075:	c1 e7 0b             	shl    edi,0xb
c000a078:	55                   	push   ebp
c000a079:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a07d:	50                   	push   eax
c000a07e:	e8 db f4 ff ff       	call   c000955e <VAS::getPageTableEntry(unsigned long)>
c000a083:	8b 10                	mov    edx,DWORD PTR [eax]
c000a085:	89 d1                	mov    ecx,edx
c000a087:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a08d:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a093:	09 cf                	or     edi,ecx
c000a095:	89 38                	mov    DWORD PTR [eax],edi
c000a097:	89 14 24             	mov    DWORD PTR [esp],edx
c000a09a:	ff 05 68 07 02 c0    	inc    DWORD PTR ds:0xc0020768
c000a0a0:	e8 da d9 ff ff       	call   c0007a7f <Phys::freePage(unsigned long)>
c000a0a5:	0f 20 d8             	mov    eax,cr3
c000a0a8:	0f 22 d8             	mov    cr3,eax
c000a0ab:	a1 64 07 02 c0       	mov    eax,ds:0xc0020764
c000a0b0:	c7 44 24 40 ad d8 01 c0 	mov    DWORD PTR [esp+0x40],0xc001d8ad
c000a0b8:	8d 50 01             	lea    edx,[eax+0x1]
c000a0bb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0bf:	89 15 64 07 02 c0    	mov    DWORD PTR ds:0xc0020764,edx
c000a0c5:	83 c4 2c             	add    esp,0x2c
c000a0c8:	5b                   	pop    ebx
c000a0c9:	5e                   	pop    esi
c000a0ca:	5f                   	pop    edi
c000a0cb:	5d                   	pop    ebp
c000a0cc:	e9 cf 03 00 00       	jmp    c000a4a0 <Dbg::kprintf(char const*, ...)>
c000a0d1:	90                   	nop

c000a0d2 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a0d2:	55                   	push   ebp
c000a0d3:	57                   	push   edi
c000a0d4:	56                   	push   esi
c000a0d5:	53                   	push   ebx
c000a0d6:	83 ec 14             	sub    esp,0x14
c000a0d9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a0dd:	53                   	push   ebx
c000a0de:	68 be d8 01 c0       	push   0xc001d8be
c000a0e3:	e8 b8 03 00 00       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c000a0e8:	83 c4 10             	add    esp,0x10
c000a0eb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a0f1:	74 21                	je     c000a114 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a0f3:	83 ec 08             	sub    esp,0x8
c000a0f6:	53                   	push   ebx
c000a0f7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a0fb:	57                   	push   edi
c000a0fc:	e8 5d f4 ff ff       	call   c000955e <VAS::getPageTableEntry(unsigned long)>
c000a101:	83 c4 10             	add    esp,0x10
c000a104:	89 c6                	mov    esi,eax
c000a106:	85 c0                	test   eax,eax
c000a108:	74 0a                	je     c000a114 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a10a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a10c:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a112:	74 0a                	je     c000a11e <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a114:	31 c0                	xor    eax,eax
c000a116:	83 c4 0c             	add    esp,0xc
c000a119:	5b                   	pop    ebx
c000a11a:	5e                   	pop    esi
c000a11b:	5f                   	pop    edi
c000a11c:	5d                   	pop    ebp
c000a11d:	c3                   	ret    
c000a11e:	e8 be d9 ff ff       	call   c0007ae1 <Phys::allocatePage()>
c000a123:	c1 ed 0b             	shr    ebp,0xb
c000a126:	8b 16                	mov    edx,DWORD PTR [esi]
c000a128:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a12e:	09 c2                	or     edx,eax
c000a130:	81 ca 01 08 00 00    	or     edx,0x801
c000a136:	89 16                	mov    DWORD PTR [esi],edx
c000a138:	8b 35 6c f4 01 c0    	mov    esi,DWORD PTR ds:0xc001f46c
c000a13e:	85 f6                	test   esi,esi
c000a140:	7e 3e                	jle    c000a180 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a142:	89 df                	mov    edi,ebx
c000a144:	31 f6                	xor    esi,esi
c000a146:	83 ec 0c             	sub    esp,0xc
c000a149:	55                   	push   ebp
c000a14a:	e8 2d f2 ff ff       	call   c000937c <Virt::swapIDToSector(unsigned long)>
c000a14f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a152:	01 f0                	add    eax,esi
c000a154:	6a 01                	push   0x1
c000a156:	31 d2                	xor    edx,edx
c000a158:	46                   	inc    esi
c000a159:	52                   	push   edx
c000a15a:	81 c7 00 02 00 00    	add    edi,0x200
c000a160:	50                   	push   eax
c000a161:	0f be 05 78 f4 01 c0 	movsx  eax,BYTE PTR ds:0xc001f478
c000a168:	8b 0c 85 dc 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd524]
c000a16f:	51                   	push   ecx
c000a170:	e8 13 2a 00 00       	call   c000cb88 <LogicalDisk::read(unsigned long long, int, void*)>
c000a175:	83 c4 20             	add    esp,0x20
c000a178:	39 35 6c f4 01 c0    	cmp    DWORD PTR ds:0xc001f46c,esi
c000a17e:	7f c6                	jg     c000a146 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a180:	a1 68 07 02 c0       	mov    eax,ds:0xc0020768
c000a185:	48                   	dec    eax
c000a186:	52                   	push   edx
c000a187:	a3 68 07 02 c0       	mov    ds:0xc0020768,eax
c000a18c:	50                   	push   eax
c000a18d:	53                   	push   ebx
c000a18e:	68 d1 d8 01 c0       	push   0xc001d8d1
c000a193:	e8 08 03 00 00       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c000a198:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a19b:	e8 be f1 ff ff       	call   c000935e <Virt::freeSwapfilePage(unsigned long)>
c000a1a0:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c000a1a5:	83 c4 10             	add    esp,0x10
c000a1a8:	48                   	dec    eax
c000a1a9:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c000a1ae:	85 c0                	test   eax,eax
c000a1b0:	75 01                	jne    c000a1b3 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a1b2:	fb                   	sti    
c000a1b3:	0f 20 d8             	mov    eax,cr3
c000a1b6:	0f 22 d8             	mov    cr3,eax
c000a1b9:	b0 01                	mov    al,0x1
c000a1bb:	e9 56 ff ff ff       	jmp    c000a116 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a1c0 <VAS::scanForEviction()>:
c000a1c0:	57                   	push   edi
c000a1c1:	31 ff                	xor    edi,edi
c000a1c3:	56                   	push   esi
c000a1c4:	53                   	push   ebx
c000a1c5:	83 ec 10             	sub    esp,0x10
c000a1c8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a1cc:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a1cf:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a1d5:	75 0e                	jne    c000a1e5 <VAS::scanForEviction()+0x25>
c000a1d7:	89 da                	mov    edx,ebx
c000a1d9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a1dc:	c1 ea 16             	shr    edx,0x16
c000a1df:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a1e3:	74 4e                	je     c000a233 <VAS::scanForEviction()+0x73>
c000a1e5:	53                   	push   ebx
c000a1e6:	56                   	push   esi
c000a1e7:	e8 72 f3 ff ff       	call   c000955e <VAS::getPageTableEntry(unsigned long)>
c000a1ec:	5a                   	pop    edx
c000a1ed:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1ef:	59                   	pop    ecx
c000a1f0:	89 d1                	mov    ecx,edx
c000a1f2:	81 e1 01 08 00 00    	and    ecx,0x801
c000a1f8:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a1fe:	74 3e                	je     c000a23e <VAS::scanForEviction()+0x7e>
c000a200:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a206:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a20c:	76 2b                	jbe    c000a239 <VAS::scanForEviction()+0x79>
c000a20e:	47                   	inc    edi
c000a20f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a216:	83 ff 03             	cmp    edi,0x3
c000a219:	74 32                	je     c000a24d <VAS::scanForEviction()+0x8d>
c000a21b:	31 db                	xor    ebx,ebx
c000a21d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a223:	75 c0                	jne    c000a1e5 <VAS::scanForEviction()+0x25>
c000a225:	89 da                	mov    edx,ebx
c000a227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a22a:	c1 ea 16             	shr    edx,0x16
c000a22d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a231:	75 b2                	jne    c000a1e5 <VAS::scanForEviction()+0x25>
c000a233:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a239:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a23c:	eb 91                	jmp    c000a1cf <VAS::scanForEviction()+0xf>
c000a23e:	f6 c2 20             	test   dl,0x20
c000a241:	74 13                	je     c000a256 <VAS::scanForEviction()+0x96>
c000a243:	83 e2 df             	and    edx,0xffffffdf
c000a246:	89 10                	mov    DWORD PTR [eax],edx
c000a248:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a24b:	eb b3                	jmp    c000a200 <VAS::scanForEviction()+0x40>
c000a24d:	83 c4 10             	add    esp,0x10
c000a250:	31 c0                	xor    eax,eax
c000a252:	5b                   	pop    ebx
c000a253:	5e                   	pop    esi
c000a254:	5f                   	pop    edi
c000a255:	c3                   	ret    
c000a256:	83 ec 08             	sub    esp,0x8
c000a259:	89 d0                	mov    eax,edx
c000a25b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a260:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a264:	53                   	push   ebx
c000a265:	68 e6 d8 01 c0       	push   0xc001d8e6
c000a26a:	e8 31 02 00 00       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c000a26f:	58                   	pop    eax
c000a270:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a273:	5a                   	pop    edx
c000a274:	51                   	push   ecx
c000a275:	56                   	push   esi
c000a276:	e8 95 fd ff ff       	call   c000a010 <VAS::evict(unsigned long)>
c000a27b:	5b                   	pop    ebx
c000a27c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a27f:	5f                   	pop    edi
c000a280:	50                   	push   eax
c000a281:	68 fa d8 01 c0       	push   0xc001d8fa
c000a286:	e8 15 02 00 00       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c000a28b:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a299:	83 c4 10             	add    esp,0x10
c000a29c:	5b                   	pop    ebx
c000a29d:	5e                   	pop    esi
c000a29e:	5f                   	pop    edi
c000a29f:	c3                   	ret    

c000a2a0 <mapVASFirstTime>:
c000a2a0:	55                   	push   ebp
c000a2a1:	57                   	push   edi
c000a2a2:	56                   	push   esi
c000a2a3:	53                   	push   ebx
c000a2a4:	83 ec 0c             	sub    esp,0xc
c000a2a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a2ac:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a2af:	4a                   	dec    edx
c000a2b0:	0f 84 8c 00 00 00    	je     c000a342 <mapVASFirstTime+0xa2>
c000a2b6:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a2b9:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a2bc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a2c1:	c1 e5 15             	shl    ebp,0x15
c000a2c4:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a2c9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a2cf:	29 eb                	sub    ebx,ebp
c000a2d1:	29 ef                	sub    edi,ebp
c000a2d3:	e8 09 d8 ff ff       	call   c0007ae1 <Phys::allocatePage()>
c000a2d8:	83 ec 0c             	sub    esp,0xc
c000a2db:	68 03 04 00 00       	push   0x403
c000a2e0:	6a 01                	push   0x1
c000a2e2:	53                   	push   ebx
c000a2e3:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a2e9:	50                   	push   eax
c000a2ea:	56                   	push   esi
c000a2eb:	e8 ec f8 ff ff       	call   c0009bdc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a2f0:	83 c4 20             	add    esp,0x20
c000a2f3:	39 fb                	cmp    ebx,edi
c000a2f5:	75 dc                	jne    c000a2d3 <mapVASFirstTime+0x33>
c000a2f7:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a2fc:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a301:	29 eb                	sub    ebx,ebp
c000a303:	29 ef                	sub    edi,ebp
c000a305:	e8 d7 d7 ff ff       	call   c0007ae1 <Phys::allocatePage()>
c000a30a:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a30e:	19 d2                	sbb    edx,edx
c000a310:	83 ec 0c             	sub    esp,0xc
c000a313:	83 e2 04             	and    edx,0x4
c000a316:	81 c2 03 04 00 00    	add    edx,0x403
c000a31c:	52                   	push   edx
c000a31d:	6a 01                	push   0x1
c000a31f:	53                   	push   ebx
c000a320:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a326:	50                   	push   eax
c000a327:	56                   	push   esi
c000a328:	e8 af f8 ff ff       	call   c0009bdc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a32d:	83 c4 20             	add    esp,0x20
c000a330:	39 df                	cmp    edi,ebx
c000a332:	75 d1                	jne    c000a305 <mapVASFirstTime+0x65>
c000a334:	0f 20 d8             	mov    eax,cr3
c000a337:	0f 22 d8             	mov    cr3,eax
c000a33a:	83 c4 0c             	add    esp,0xc
c000a33d:	5b                   	pop    ebx
c000a33e:	5e                   	pop    esi
c000a33f:	5f                   	pop    edi
c000a340:	5d                   	pop    ebp
c000a341:	c3                   	ret    
c000a342:	83 ec 0c             	sub    esp,0xc
c000a345:	68 0d d9 01 c0       	push   0xc001d90d
c000a34a:	e8 51 01 00 00       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c000a34f:	83 c4 10             	add    esp,0x10
c000a352:	83 c4 0c             	add    esp,0xc
c000a355:	5b                   	pop    ebx
c000a356:	5e                   	pop    esi
c000a357:	5f                   	pop    edi
c000a358:	5d                   	pop    ebp
c000a359:	c3                   	ret    

c000a35a <__cxa_atexit>:
c000a35a:	31 c0                	xor    eax,eax
c000a35c:	c3                   	ret    

c000a35d <__cxa_finalize>:
c000a35d:	c3                   	ret    

c000a35e <__stack_chk_fail>:
c000a35e:	55                   	push   ebp
c000a35f:	89 e5                	mov    ebp,esp
c000a361:	83 ec 10             	sub    esp,0x10
c000a364:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a367:	68 26 d9 01 c0       	push   0xc001d926
c000a36c:	e8 2f 01 00 00       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c000a371:	58                   	pop    eax
c000a372:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a375:	5a                   	pop    edx
c000a376:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a379:	68 26 d9 01 c0       	push   0xc001d926
c000a37e:	e8 1d 01 00 00       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c000a383:	c7 04 24 2e d9 01 c0 	mov    DWORD PTR [esp],0xc001d92e
c000a38a:	e8 74 5d 00 00       	call   c0010103 <KePanic(char const*)>
c000a38f:	83 c4 10             	add    esp,0x10
c000a392:	c9                   	leave  
c000a393:	c3                   	ret    

c000a394 <__cxa_pure_virtual>:
c000a394:	83 ec 18             	sub    esp,0x18
c000a397:	68 46 d9 01 c0       	push   0xc001d946
c000a39c:	e8 62 5d 00 00       	call   c0010103 <KePanic(char const*)>
c000a3a1:	83 c4 1c             	add    esp,0x1c
c000a3a4:	c3                   	ret    

c000a3a5 <operator new[](unsigned long)>:
c000a3a5:	e9 5b d4 ff ff       	jmp    c0007805 <malloc>

c000a3aa <operator delete(void*, unsigned long)>:
c000a3aa:	e9 76 d4 ff ff       	jmp    c0007825 <rfree>

c000a3af <operator delete[](void*)>:
c000a3af:	e9 71 d4 ff ff       	jmp    c0007825 <rfree>

c000a3b4 <operator delete[](void*, unsigned long)>:
c000a3b4:	e9 6c d4 ff ff       	jmp    c0007825 <rfree>

c000a3b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a3b9:	55                   	push   ebp
c000a3ba:	b9 04 00 00 00       	mov    ecx,0x4
c000a3bf:	57                   	push   edi
c000a3c0:	56                   	push   esi
c000a3c1:	be 5b d5 01 c0       	mov    esi,0xc001d55b
c000a3c6:	53                   	push   ebx
c000a3c7:	83 ec 20             	sub    esp,0x20
c000a3ca:	a1 5a d5 01 c0       	mov    eax,ds:0xc001d55a
c000a3cf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a3d3:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a3d7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a3db:	a1 67 d5 01 c0       	mov    eax,ds:0xc001d567
c000a3e0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a3e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a3e8:	fc                   	cld    
c000a3e9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a3eb:	89 ee                	mov    esi,ebp
c000a3ed:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a3f1:	eb 02                	jmp    c000a3f5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a3f3:	89 c6                	mov    esi,eax
c000a3f5:	31 d2                	xor    edx,edx
c000a3f7:	41                   	inc    ecx
c000a3f8:	89 f0                	mov    eax,esi
c000a3fa:	f7 f3                	div    ebx
c000a3fc:	39 de                	cmp    esi,ebx
c000a3fe:	73 f3                	jae    c000a3f3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a400:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a403:	eb 02                	jmp    c000a407 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a405:	89 c5                	mov    ebp,eax
c000a407:	31 d2                	xor    edx,edx
c000a409:	49                   	dec    ecx
c000a40a:	89 e8                	mov    eax,ebp
c000a40c:	f7 f3                	div    ebx
c000a40e:	39 dd                	cmp    ebp,ebx
c000a410:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a414:	88 11                	mov    BYTE PTR [ecx],dl
c000a416:	73 ed                	jae    c000a405 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a418:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a41c:	83 c4 20             	add    esp,0x20
c000a41f:	5b                   	pop    ebx
c000a420:	5e                   	pop    esi
c000a421:	5f                   	pop    edi
c000a422:	5d                   	pop    ebp
c000a423:	c3                   	ret    

c000a424 <Dbg::logc(char)>:
c000a424:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a428:	f6 05 90 06 02 c0 10 	test   BYTE PTR ds:0xc0020690,0x10
c000a42f:	75 12                	jne    c000a443 <Dbg::logc(char)+0x1f>
c000a431:	ba fd 03 00 00       	mov    edx,0x3fd
c000a436:	ec                   	in     al,dx
c000a437:	a8 20                	test   al,0x20
c000a439:	74 fb                	je     c000a436 <Dbg::logc(char)+0x12>
c000a43b:	ba f8 03 00 00       	mov    edx,0x3f8
c000a440:	88 c8                	mov    al,cl
c000a442:	ee                   	out    dx,al
c000a443:	c3                   	ret    

c000a444 <Dbg::logs(char*)>:
c000a444:	53                   	push   ebx
c000a445:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a449:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a44c:	84 c0                	test   al,al
c000a44e:	74 0f                	je     c000a45f <Dbg::logs(char*)+0x1b>
c000a450:	50                   	push   eax
c000a451:	43                   	inc    ebx
c000a452:	e8 cd ff ff ff       	call   c000a424 <Dbg::logc(char)>
c000a457:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a45a:	5a                   	pop    edx
c000a45b:	84 c0                	test   al,al
c000a45d:	75 f1                	jne    c000a450 <Dbg::logs(char*)+0xc>
c000a45f:	5b                   	pop    ebx
c000a460:	c3                   	ret    

c000a461 <Dbg::logWriteInt(unsigned int)>:
c000a461:	83 ec 10             	sub    esp,0x10
c000a464:	6a 0a                	push   0xa
c000a466:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a46a:	50                   	push   eax
c000a46b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a46f:	50                   	push   eax
c000a470:	e8 44 ff ff ff       	call   c000a3b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a475:	50                   	push   eax
c000a476:	e8 c9 ff ff ff       	call   c000a444 <Dbg::logs(char*)>
c000a47b:	83 c4 20             	add    esp,0x20
c000a47e:	c3                   	ret    

c000a47f <Dbg::logWriteIntBase(unsigned int, int)>:
c000a47f:	83 ec 10             	sub    esp,0x10
c000a482:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a486:	50                   	push   eax
c000a487:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a48b:	50                   	push   eax
c000a48c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a490:	52                   	push   edx
c000a491:	e8 23 ff ff ff       	call   c000a3b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a496:	50                   	push   eax
c000a497:	e8 a8 ff ff ff       	call   c000a444 <Dbg::logs(char*)>
c000a49c:	83 c4 20             	add    esp,0x20
c000a49f:	c3                   	ret    

c000a4a0 <Dbg::kprintf(char const*, ...)>:
c000a4a0:	55                   	push   ebp
c000a4a1:	57                   	push   edi
c000a4a2:	56                   	push   esi
c000a4a3:	53                   	push   ebx
c000a4a4:	83 ec 0c             	sub    esp,0xc
c000a4a7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a4ab:	f6 05 90 06 02 c0 10 	test   BYTE PTR ds:0xc0020690,0x10
c000a4b2:	74 08                	je     c000a4bc <Dbg::kprintf(char const*, ...)+0x1c>
c000a4b4:	83 c4 0c             	add    esp,0xc
c000a4b7:	5b                   	pop    ebx
c000a4b8:	5e                   	pop    esi
c000a4b9:	5f                   	pop    edi
c000a4ba:	5d                   	pop    ebp
c000a4bb:	c3                   	ret    
c000a4bc:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a4c0:	31 ff                	xor    edi,edi
c000a4c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a4c6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4c9:	84 c0                	test   al,al
c000a4cb:	74 e7                	je     c000a4b4 <Dbg::kprintf(char const*, ...)+0x14>
c000a4cd:	8d 77 01             	lea    esi,[edi+0x1]
c000a4d0:	3c 25                	cmp    al,0x25
c000a4d2:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a4d5:	75 47                	jne    c000a51e <Dbg::kprintf(char const*, ...)+0x7e>
c000a4d7:	83 c7 02             	add    edi,0x2
c000a4da:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a4dd:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a4e0:	83 e8 25             	sub    eax,0x25
c000a4e3:	3c 53                	cmp    al,0x53
c000a4e5:	0f 87 d2 00 00 00    	ja     c000a5bd <Dbg::kprintf(char const*, ...)+0x11d>
c000a4eb:	25 ff 00 00 00       	and    eax,0xff
c000a4f0:	ff 24 85 5c d9 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe26a4]
c000a4f7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a4fb:	89 c8                	mov    eax,ecx
c000a4fd:	83 c1 04             	add    ecx,0x4
c000a500:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a504:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a506:	55                   	push   ebp
c000a507:	e8 55 ff ff ff       	call   c000a461 <Dbg::logWriteInt(unsigned int)>
c000a50c:	58                   	pop    eax
c000a50d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a510:	84 c0                	test   al,al
c000a512:	74 a0                	je     c000a4b4 <Dbg::kprintf(char const*, ...)+0x14>
c000a514:	8d 77 01             	lea    esi,[edi+0x1]
c000a517:	3c 25                	cmp    al,0x25
c000a519:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a51c:	74 b9                	je     c000a4d7 <Dbg::kprintf(char const*, ...)+0x37>
c000a51e:	50                   	push   eax
c000a51f:	89 f7                	mov    edi,esi
c000a521:	e8 fe fe ff ff       	call   c000a424 <Dbg::logc(char)>
c000a526:	89 ee                	mov    esi,ebp
c000a528:	58                   	pop    eax
c000a529:	eb e2                	jmp    c000a50d <Dbg::kprintf(char const*, ...)+0x6d>
c000a52b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a52f:	89 c8                	mov    eax,ecx
c000a531:	83 c1 04             	add    ecx,0x4
c000a534:	8b 00                	mov    eax,DWORD PTR [eax]
c000a536:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a53a:	50                   	push   eax
c000a53b:	e8 04 ff ff ff       	call   c000a444 <Dbg::logs(char*)>
c000a540:	58                   	pop    eax
c000a541:	eb ca                	jmp    c000a50d <Dbg::kprintf(char const*, ...)+0x6d>
c000a543:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a547:	89 d0                	mov    eax,edx
c000a549:	83 c2 04             	add    edx,0x4
c000a54c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a550:	8b 00                	mov    eax,DWORD PTR [eax]
c000a552:	50                   	push   eax
c000a553:	e8 09 ff ff ff       	call   c000a461 <Dbg::logWriteInt(unsigned int)>
c000a558:	58                   	pop    eax
c000a559:	eb b2                	jmp    c000a50d <Dbg::kprintf(char const*, ...)+0x6d>
c000a55b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a55f:	89 d0                	mov    eax,edx
c000a561:	83 c2 04             	add    edx,0x4
c000a564:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a56b:	50                   	push   eax
c000a56c:	e8 b3 fe ff ff       	call   c000a424 <Dbg::logc(char)>
c000a571:	58                   	pop    eax
c000a572:	eb 99                	jmp    c000a50d <Dbg::kprintf(char const*, ...)+0x6d>
c000a574:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a578:	89 c8                	mov    eax,ecx
c000a57a:	83 c1 04             	add    ecx,0x4
c000a57d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a581:	6a 10                	push   0x10
c000a583:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a585:	51                   	push   ecx
c000a586:	e8 f4 fe ff ff       	call   c000a47f <Dbg::logWriteIntBase(unsigned int, int)>
c000a58b:	5d                   	pop    ebp
c000a58c:	58                   	pop    eax
c000a58d:	e9 7b ff ff ff       	jmp    c000a50d <Dbg::kprintf(char const*, ...)+0x6d>
c000a592:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a596:	89 d0                	mov    eax,edx
c000a598:	83 c2 08             	add    edx,0x8
c000a59b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a59f:	6a 10                	push   0x10
c000a5a1:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5a3:	50                   	push   eax
c000a5a4:	e8 d6 fe ff ff       	call   c000a47f <Dbg::logWriteIntBase(unsigned int, int)>
c000a5a9:	58                   	pop    eax
c000a5aa:	5a                   	pop    edx
c000a5ab:	e9 5d ff ff ff       	jmp    c000a50d <Dbg::kprintf(char const*, ...)+0x6d>
c000a5b0:	6a 25                	push   0x25
c000a5b2:	e8 6d fe ff ff       	call   c000a424 <Dbg::logc(char)>
c000a5b7:	5a                   	pop    edx
c000a5b8:	e9 50 ff ff ff       	jmp    c000a50d <Dbg::kprintf(char const*, ...)+0x6d>
c000a5bd:	6a 25                	push   0x25
c000a5bf:	e8 60 fe ff ff       	call   c000a424 <Dbg::logc(char)>
c000a5c4:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a5c8:	50                   	push   eax
c000a5c9:	e8 56 fe ff ff       	call   c000a424 <Dbg::logc(char)>
c000a5ce:	5a                   	pop    edx
c000a5cf:	59                   	pop    ecx
c000a5d0:	e9 38 ff ff ff       	jmp    c000a50d <Dbg::kprintf(char const*, ...)+0x6d>
c000a5d5:	90                   	nop

c000a5d6 <File::read(unsigned long long, void*, int*)>:
c000a5d6:	53                   	push   ebx
c000a5d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5db:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a5df:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a5e6:	3c 19                	cmp    al,0x19
c000a5e8:	77 35                	ja     c000a61f <File::read(unsigned long long, void*, int*)+0x49>
c000a5ea:	8b 04 85 e0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd420]
c000a5f1:	85 c0                	test   eax,eax
c000a5f3:	74 2a                	je     c000a61f <File::read(unsigned long long, void*, int*)+0x49>
c000a5f5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a5fb:	85 c0                	test   eax,eax
c000a5fd:	74 20                	je     c000a61f <File::read(unsigned long long, void*, int*)+0x49>
c000a5ff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a603:	74 21                	je     c000a626 <File::read(unsigned long long, void*, int*)+0x50>
c000a605:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a607:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a60b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a611:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a615:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a619:	5b                   	pop    ebx
c000a61a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a61d:	ff e0                	jmp    eax
c000a61f:	b8 0b 00 00 00       	mov    eax,0xb
c000a624:	eb 05                	jmp    c000a62b <File::read(unsigned long long, void*, int*)+0x55>
c000a626:	b8 05 00 00 00       	mov    eax,0x5
c000a62b:	5b                   	pop    ebx
c000a62c:	c3                   	ret    
c000a62d:	90                   	nop

c000a62e <File::write(unsigned long long, void*, int*)>:
c000a62e:	53                   	push   ebx
c000a62f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a633:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a637:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a63e:	3c 19                	cmp    al,0x19
c000a640:	77 35                	ja     c000a677 <File::write(unsigned long long, void*, int*)+0x49>
c000a642:	8b 04 85 e0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd420]
c000a649:	85 c0                	test   eax,eax
c000a64b:	74 2a                	je     c000a677 <File::write(unsigned long long, void*, int*)+0x49>
c000a64d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a653:	85 c0                	test   eax,eax
c000a655:	74 20                	je     c000a677 <File::write(unsigned long long, void*, int*)+0x49>
c000a657:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a65b:	74 21                	je     c000a67e <File::write(unsigned long long, void*, int*)+0x50>
c000a65d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a65f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a663:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a669:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a66d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a671:	5b                   	pop    ebx
c000a672:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a675:	ff e0                	jmp    eax
c000a677:	b8 0b 00 00 00       	mov    eax,0xb
c000a67c:	eb 05                	jmp    c000a683 <File::write(unsigned long long, void*, int*)+0x55>
c000a67e:	b8 05 00 00 00       	mov    eax,0x5
c000a683:	5b                   	pop    ebx
c000a684:	c3                   	ret    
c000a685:	90                   	nop

c000a686 <Directory::read(unsigned long long, void*, int*)>:
c000a686:	53                   	push   ebx
c000a687:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a68b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a68f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a696:	3c 19                	cmp    al,0x19
c000a698:	77 35                	ja     c000a6cf <Directory::read(unsigned long long, void*, int*)+0x49>
c000a69a:	8b 04 85 e0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd420]
c000a6a1:	85 c0                	test   eax,eax
c000a6a3:	74 2a                	je     c000a6cf <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6a5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6ab:	85 c0                	test   eax,eax
c000a6ad:	74 20                	je     c000a6cf <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6af:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6b3:	74 21                	je     c000a6d6 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a6b5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6b7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6bb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6c9:	5b                   	pop    ebx
c000a6ca:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a6cd:	ff e0                	jmp    eax
c000a6cf:	b8 0b 00 00 00       	mov    eax,0xb
c000a6d4:	eb 05                	jmp    c000a6db <Directory::read(unsigned long long, void*, int*)+0x55>
c000a6d6:	b8 05 00 00 00       	mov    eax,0x5
c000a6db:	5b                   	pop    ebx
c000a6dc:	c3                   	ret    
c000a6dd:	90                   	nop

c000a6de <Directory::write(unsigned long long, void*, int*)>:
c000a6de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6e2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a6e9:	b8 0b 00 00 00       	mov    eax,0xb
c000a6ee:	80 fa 19             	cmp    dl,0x19
c000a6f1:	77 18                	ja     c000a70b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a6f3:	8b 14 95 e0 2b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd420]
c000a6fa:	85 d2                	test   edx,edx
c000a6fc:	74 0d                	je     c000a70b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a6fe:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a705:	19 c0                	sbb    eax,eax
c000a707:	83 e0 0a             	and    eax,0xa
c000a70a:	40                   	inc    eax
c000a70b:	c3                   	ret    

c000a70c <File::isAtty()>:
c000a70c:	31 c0                	xor    eax,eax
c000a70e:	c3                   	ret    
c000a70f:	90                   	nop

c000a710 <Directory::isAtty()>:
c000a710:	31 c0                	xor    eax,eax
c000a712:	c3                   	ret    
c000a713:	90                   	nop

c000a714 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a714:	b8 0a 00 00 00       	mov    eax,0xa
c000a719:	c3                   	ret    

c000a71a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a71a:	b8 0a 00 00 00       	mov    eax,0xa
c000a71f:	c3                   	ret    

c000a720 <Filesystem::allocateSwapfile(char const*, int)>:
c000a720:	31 c0                	xor    eax,eax
c000a722:	31 d2                	xor    edx,edx
c000a724:	c3                   	ret    
c000a725:	90                   	nop

c000a726 <File::~File()>:
c000a726:	83 ec 0c             	sub    esp,0xc
c000a729:	ba 1c db 01 c0       	mov    edx,0xc001db1c
c000a72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a732:	89 10                	mov    DWORD PTR [eax],edx
c000a734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a738:	83 ec 0c             	sub    esp,0xc
c000a73b:	50                   	push   eax
c000a73c:	e8 ab e8 ff ff       	call   c0008fec <UnixFile::~UnixFile()>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	90                   	nop
c000a745:	83 c4 0c             	add    esp,0xc
c000a748:	c3                   	ret    
c000a749:	90                   	nop

c000a74a <File::~File()>:
c000a74a:	83 ec 0c             	sub    esp,0xc
c000a74d:	83 ec 0c             	sub    esp,0xc
c000a750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a754:	e8 cd ff ff ff       	call   c000a726 <File::~File()>
c000a759:	83 c4 10             	add    esp,0x10
c000a75c:	83 ec 08             	sub    esp,0x8
c000a75f:	68 14 01 00 00       	push   0x114
c000a764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a768:	e8 3d fc ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c000a76d:	83 c4 10             	add    esp,0x10
c000a770:	83 c4 0c             	add    esp,0xc
c000a773:	c3                   	ret    

c000a774 <Directory::~Directory()>:
c000a774:	83 ec 0c             	sub    esp,0xc
c000a777:	ba 38 db 01 c0       	mov    edx,0xc001db38
c000a77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a780:	89 10                	mov    DWORD PTR [eax],edx
c000a782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a786:	83 ec 0c             	sub    esp,0xc
c000a789:	50                   	push   eax
c000a78a:	e8 5d e8 ff ff       	call   c0008fec <UnixFile::~UnixFile()>
c000a78f:	83 c4 10             	add    esp,0x10
c000a792:	90                   	nop
c000a793:	83 c4 0c             	add    esp,0xc
c000a796:	c3                   	ret    
c000a797:	90                   	nop

c000a798 <Directory::~Directory()>:
c000a798:	83 ec 0c             	sub    esp,0xc
c000a79b:	83 ec 0c             	sub    esp,0xc
c000a79e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7a2:	e8 cd ff ff ff       	call   c000a774 <Directory::~Directory()>
c000a7a7:	83 c4 10             	add    esp,0x10
c000a7aa:	83 ec 08             	sub    esp,0x8
c000a7ad:	68 14 01 00 00       	push   0x114
c000a7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7b6:	e8 ef fb ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c000a7bb:	83 c4 10             	add    esp,0x10
c000a7be:	83 c4 0c             	add    esp,0xc
c000a7c1:	c3                   	ret    

c000a7c2 <Filesystem::Filesystem()>:
c000a7c2:	ba b4 da 01 c0       	mov    edx,0xc001dab4
c000a7c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7cb:	89 10                	mov    DWORD PTR [eax],edx
c000a7cd:	8b 15 74 07 02 c0    	mov    edx,DWORD PTR ds:0xc0020774
c000a7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a7da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7de:	a3 74 07 02 c0       	mov    ds:0xc0020774,eax
c000a7e3:	90                   	nop
c000a7e4:	c3                   	ret    
c000a7e5:	90                   	nop

c000a7e6 <Filesystem::~Filesystem()>:
c000a7e6:	ba b4 da 01 c0       	mov    edx,0xc001dab4
c000a7eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7ef:	89 10                	mov    DWORD PTR [eax],edx
c000a7f1:	90                   	nop
c000a7f2:	c3                   	ret    
c000a7f3:	90                   	nop

c000a7f4 <Filesystem::~Filesystem()>:
c000a7f4:	83 ec 0c             	sub    esp,0xc
c000a7f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a7fb:	e8 e6 ff ff ff       	call   c000a7e6 <Filesystem::~Filesystem()>
c000a800:	83 c4 04             	add    esp,0x4
c000a803:	83 ec 08             	sub    esp,0x8
c000a806:	6a 08                	push   0x8
c000a808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80c:	e8 99 fb ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c000a811:	83 c4 10             	add    esp,0x10
c000a814:	83 c4 0c             	add    esp,0xc
c000a817:	c3                   	ret    

c000a818 <Fs::getcwd(Process*, char*, int)>:
c000a818:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a81c:	31 c0                	xor    eax,eax
c000a81e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a821:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a825:	7d 15                	jge    c000a83c <Fs::getcwd(Process*, char*, int)+0x24>
c000a827:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a82b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a832:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a835:	84 c9                	test   cl,cl
c000a837:	74 06                	je     c000a83f <Fs::getcwd(Process*, char*, int)+0x27>
c000a839:	40                   	inc    eax
c000a83a:	eb e2                	jmp    c000a81e <Fs::getcwd(Process*, char*, int)+0x6>
c000a83c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a83f:	31 c0                	xor    eax,eax
c000a841:	c3                   	ret    

c000a842 <Fs::initVFS()>:
c000a842:	83 ec 18             	sub    esp,0x18
c000a845:	6a 08                	push   0x8
c000a847:	e8 b9 cf ff ff       	call   c0007805 <malloc>
c000a84c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a84f:	e8 b8 c5 00 00       	call   c0016e0c <FAT::FAT()>
c000a854:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a85b:	e8 a5 cf ff ff       	call   c0007805 <malloc>
c000a860:	89 04 24             	mov    DWORD PTR [esp],eax
c000a863:	e8 06 d3 00 00       	call   c0017b6e <ISO9660::ISO9660()>
c000a868:	83 c4 1c             	add    esp,0x1c
c000a86b:	c3                   	ret    

c000a86c <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a86c:	55                   	push   ebp
c000a86d:	57                   	push   edi
c000a86e:	56                   	push   esi
c000a86f:	53                   	push   ebx
c000a870:	81 ec 10 04 00 00    	sub    esp,0x410
c000a876:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a87d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a884:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a88b:	68 00 04 00 00       	push   0x400
c000a890:	6a 00                	push   0x0
c000a892:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a896:	56                   	push   esi
c000a897:	e8 34 5c ff ff       	call   c00004d0 <memset>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a8a3:	75 0b                	jne    c000a8b0 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a8a5:	50                   	push   eax
c000a8a6:	50                   	push   eax
c000a8a7:	57                   	push   edi
c000a8a8:	56                   	push   esi
c000a8a9:	e8 52 5d ff ff       	call   c0000600 <strcpy>
c000a8ae:	eb 41                	jmp    c000a8f1 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a8b0:	8a 07                	mov    al,BYTE PTR [edi]
c000a8b2:	3c 5c                	cmp    al,0x5c
c000a8b4:	74 04                	je     c000a8ba <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a8b6:	3c 2f                	cmp    al,0x2f
c000a8b8:	75 18                	jne    c000a8d2 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a8ba:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a8bd:	3c 60                	cmp    al,0x60
c000a8bf:	7e 03                	jle    c000a8c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a8c1:	83 e8 20             	sub    eax,0x20
c000a8c4:	88 04 24             	mov    BYTE PTR [esp],al
c000a8c7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a8ce:	50                   	push   eax
c000a8cf:	50                   	push   eax
c000a8d0:	eb 18                	jmp    c000a8ea <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a8d2:	50                   	push   eax
c000a8d3:	50                   	push   eax
c000a8d4:	55                   	push   ebp
c000a8d5:	56                   	push   esi
c000a8d6:	e8 25 5d ff ff       	call   c0000600 <strcpy>
c000a8db:	5a                   	pop    edx
c000a8dc:	59                   	pop    ecx
c000a8dd:	68 76 e7 01 c0       	push   0xc001e776
c000a8e2:	56                   	push   esi
c000a8e3:	e8 d8 5e ff ff       	call   c00007c0 <strcat>
c000a8e8:	5d                   	pop    ebp
c000a8e9:	58                   	pop    eax
c000a8ea:	57                   	push   edi
c000a8eb:	56                   	push   esi
c000a8ec:	e8 cf 5e ff ff       	call   c00007c0 <strcat>
c000a8f1:	83 c4 10             	add    esp,0x10
c000a8f4:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a8f7:	3c 60                	cmp    al,0x60
c000a8f9:	7e 03                	jle    c000a8fe <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a8fb:	83 e8 20             	sub    eax,0x20
c000a8fe:	88 04 24             	mov    BYTE PTR [esp],al
c000a901:	88 03                	mov    BYTE PTR [ebx],al
c000a903:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a90a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a910:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a914:	bf 03 00 00 00       	mov    edi,0x3
c000a919:	b8 03 00 00 00       	mov    eax,0x3
c000a91e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a921:	84 d2                	test   dl,dl
c000a923:	0f 84 91 00 00 00    	je     c000a9ba <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a929:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a92c:	80 fa 5c             	cmp    dl,0x5c
c000a92f:	74 05                	je     c000a936 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a931:	80 fa 2f             	cmp    dl,0x2f
c000a934:	75 12                	jne    c000a948 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a936:	89 c5                	mov    ebp,eax
c000a938:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a93d:	74 09                	je     c000a948 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a93f:	40                   	inc    eax
c000a940:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a944:	89 cf                	mov    edi,ecx
c000a946:	eb d6                	jmp    c000a91e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a948:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a94d:	75 5b                	jne    c000a9aa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a94f:	80 fa 2e             	cmp    dl,0x2e
c000a952:	75 56                	jne    c000a9aa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a954:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a958:	74 19                	je     c000a973 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a95a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a95f:	74 53                	je     c000a9b4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a961:	89 f9                	mov    ecx,edi
c000a963:	41                   	inc    ecx
c000a964:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a967:	80 fa 2f             	cmp    dl,0x2f
c000a96a:	74 f7                	je     c000a963 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a96c:	80 fa 5c             	cmp    dl,0x5c
c000a96f:	74 f2                	je     c000a963 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a971:	eb d1                	jmp    c000a944 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a973:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a978:	74 3a                	je     c000a9b4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a97a:	83 f8 03             	cmp    eax,0x3
c000a97d:	74 c5                	je     c000a944 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a97f:	41                   	inc    ecx
c000a980:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a983:	80 fa 2f             	cmp    dl,0x2f
c000a986:	74 f7                	je     c000a97f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a988:	80 fa 5c             	cmp    dl,0x5c
c000a98b:	74 f2                	je     c000a97f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a98d:	48                   	dec    eax
c000a98e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a992:	75 06                	jne    c000a99a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a994:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a998:	eb f3                	jmp    c000a98d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000a99a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a99e:	74 07                	je     c000a9a7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000a9a0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9a4:	48                   	dec    eax
c000a9a5:	eb f3                	jmp    c000a99a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9a7:	40                   	inc    eax
c000a9a8:	eb 9a                	jmp    c000a944 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9aa:	80 fa 2f             	cmp    dl,0x2f
c000a9ad:	74 95                	je     c000a944 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9af:	80 fa 5c             	cmp    dl,0x5c
c000a9b2:	74 90                	je     c000a944 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9b4:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000a9b7:	40                   	inc    eax
c000a9b8:	eb 8a                	jmp    c000a944 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9ba:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9be:	83 ec 0c             	sub    esp,0xc
c000a9c1:	53                   	push   ebx
c000a9c2:	e8 79 5b ff ff       	call   c0000540 <strlen>
c000a9c7:	83 c4 10             	add    esp,0x10
c000a9ca:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000a9cf:	75 26                	jne    c000a9f7 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000a9d1:	83 ec 0c             	sub    esp,0xc
c000a9d4:	53                   	push   ebx
c000a9d5:	e8 66 5b ff ff       	call   c0000540 <strlen>
c000a9da:	83 c4 10             	add    esp,0x10
c000a9dd:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000a9e2:	74 26                	je     c000aa0a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000a9e4:	83 ec 0c             	sub    esp,0xc
c000a9e7:	53                   	push   ebx
c000a9e8:	e8 53 5b ff ff       	call   c0000540 <strlen>
c000a9ed:	83 c4 10             	add    esp,0x10
c000a9f0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000a9f5:	eb c7                	jmp    c000a9be <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000a9f7:	83 ec 0c             	sub    esp,0xc
c000a9fa:	53                   	push   ebx
c000a9fb:	e8 40 5b ff ff       	call   c0000540 <strlen>
c000aa00:	83 c4 10             	add    esp,0x10
c000aa03:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa08:	74 c7                	je     c000a9d1 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aa0a:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aa10:	5b                   	pop    ebx
c000aa11:	5e                   	pop    esi
c000aa12:	5f                   	pop    edi
c000aa13:	5d                   	pop    ebp
c000aa14:	c3                   	ret    
c000aa15:	90                   	nop

c000aa16 <File::File(char const*, Process*)>:
c000aa16:	83 ec 0c             	sub    esp,0xc
c000aa19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa1d:	83 ec 08             	sub    esp,0x8
c000aa20:	6a 00                	push   0x0
c000aa22:	50                   	push   eax
c000aa23:	e8 e2 e3 ff ff       	call   c0008e0a <UnixFile::UnixFile(int)>
c000aa28:	83 c4 10             	add    esp,0x10
c000aa2b:	ba 1c db 01 c0       	mov    edx,0xc001db1c
c000aa30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa34:	89 10                	mov    DWORD PTR [eax],edx
c000aa36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aa3a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aa40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa44:	83 c0 0d             	add    eax,0xd
c000aa47:	83 ec 04             	sub    esp,0x4
c000aa4a:	52                   	push   edx
c000aa4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa4f:	50                   	push   eax
c000aa50:	e8 17 fe ff ff       	call   c000a86c <Fs::standardiseFiles(char*, char const*, char const*)>
c000aa55:	83 c4 10             	add    esp,0x10
c000aa58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa5c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aa5f:	8d 50 bf             	lea    edx,[eax-0x41]
c000aa62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa66:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aa6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa70:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aa74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa78:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aa7e:	25 ff 00 00 00       	and    eax,0xff
c000aa83:	8b 04 85 e0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd420]
c000aa8a:	85 c0                	test   eax,eax
c000aa8c:	74 42                	je     c000aad0 <File::File(char const*, Process*)+0xba>
c000aa8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa92:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aa98:	25 ff 00 00 00       	and    eax,0xff
c000aa9d:	8b 04 85 e0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd420]
c000aaa4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aaaa:	85 c0                	test   eax,eax
c000aaac:	75 22                	jne    c000aad0 <File::File(char const*, Process*)+0xba>
c000aaae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aab8:	25 ff 00 00 00       	and    eax,0xff
c000aabd:	8b 04 85 e0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd420]
c000aac4:	83 ec 0c             	sub    esp,0xc
c000aac7:	50                   	push   eax
c000aac8:	e8 f9 1f 00 00       	call   c000cac6 <LogicalDisk::mount()>
c000aacd:	83 c4 10             	add    esp,0x10
c000aad0:	90                   	nop
c000aad1:	83 c4 0c             	add    esp,0xc
c000aad4:	c3                   	ret    
c000aad5:	90                   	nop

c000aad6 <File::open(FileOpenMode)>:
c000aad6:	53                   	push   ebx
c000aad7:	b8 0b 00 00 00       	mov    eax,0xb
c000aadc:	83 ec 08             	sub    esp,0x8
c000aadf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aae3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000aaea:	80 fa 19             	cmp    dl,0x19
c000aaed:	77 40                	ja     c000ab2f <File::open(FileOpenMode)+0x59>
c000aaef:	8b 14 95 e0 2b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd420]
c000aaf6:	85 d2                	test   edx,edx
c000aaf8:	74 35                	je     c000ab2f <File::open(FileOpenMode)+0x59>
c000aafa:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ab00:	85 d2                	test   edx,edx
c000ab02:	74 2b                	je     c000ab2f <File::open(FileOpenMode)+0x59>
c000ab04:	b8 06 00 00 00       	mov    eax,0x6
c000ab09:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ab0d:	75 20                	jne    c000ab2f <File::open(FileOpenMode)+0x59>
c000ab0f:	8b 02                	mov    eax,DWORD PTR [edx]
c000ab11:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ab17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab1b:	51                   	push   ecx
c000ab1c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ab1f:	51                   	push   ecx
c000ab20:	52                   	push   edx
c000ab21:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ab24:	83 c4 10             	add    esp,0x10
c000ab27:	85 c0                	test   eax,eax
c000ab29:	75 04                	jne    c000ab2f <File::open(FileOpenMode)+0x59>
c000ab2b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ab2f:	83 c4 08             	add    esp,0x8
c000ab32:	5b                   	pop    ebx
c000ab33:	c3                   	ret    

c000ab34 <File::close()>:
c000ab34:	53                   	push   ebx
c000ab35:	b8 0b 00 00 00       	mov    eax,0xb
c000ab3a:	83 ec 08             	sub    esp,0x8
c000ab3d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ab41:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ab48:	80 fa 19             	cmp    dl,0x19
c000ab4b:	77 41                	ja     c000ab8e <File::close()+0x5a>
c000ab4d:	8b 1c 95 e0 2b 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd420]
c000ab54:	85 db                	test   ebx,ebx
c000ab56:	74 36                	je     c000ab8e <File::close()+0x5a>
c000ab58:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ab5f:	74 2d                	je     c000ab8e <File::close()+0x5a>
c000ab61:	b8 05 00 00 00       	mov    eax,0x5
c000ab66:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ab6a:	74 22                	je     c000ab8e <File::close()+0x5a>
c000ab6c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ab70:	8b 04 95 e0 2b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd420]
c000ab77:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab7d:	53                   	push   ebx
c000ab7e:	53                   	push   ebx
c000ab7f:	8b 10                	mov    edx,DWORD PTR [eax]
c000ab81:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ab87:	50                   	push   eax
c000ab88:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ab8b:	83 c4 10             	add    esp,0x10
c000ab8e:	83 c4 08             	add    esp,0x8
c000ab91:	5b                   	pop    ebx
c000ab92:	c3                   	ret    
c000ab93:	90                   	nop

c000ab94 <File::seek(unsigned long long)>:
c000ab94:	56                   	push   esi
c000ab95:	53                   	push   ebx
c000ab96:	b8 0b 00 00 00       	mov    eax,0xb
c000ab9b:	51                   	push   ecx
c000ab9c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aba0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aba4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000abab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000abaf:	80 fa 19             	cmp    dl,0x19
c000abb2:	77 31                	ja     c000abe5 <File::seek(unsigned long long)+0x51>
c000abb4:	8b 14 95 e0 2b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd420]
c000abbb:	85 d2                	test   edx,edx
c000abbd:	74 26                	je     c000abe5 <File::seek(unsigned long long)+0x51>
c000abbf:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000abc5:	85 d2                	test   edx,edx
c000abc7:	74 1c                	je     c000abe5 <File::seek(unsigned long long)+0x51>
c000abc9:	b8 05 00 00 00       	mov    eax,0x5
c000abce:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000abd2:	74 11                	je     c000abe5 <File::seek(unsigned long long)+0x51>
c000abd4:	8b 02                	mov    eax,DWORD PTR [edx]
c000abd6:	53                   	push   ebx
c000abd7:	51                   	push   ecx
c000abd8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000abde:	52                   	push   edx
c000abdf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000abe2:	83 c4 10             	add    esp,0x10
c000abe5:	5a                   	pop    edx
c000abe6:	5b                   	pop    ebx
c000abe7:	5e                   	pop    esi
c000abe8:	c3                   	ret    
c000abe9:	90                   	nop

c000abea <File::tell(unsigned long long*)>:
c000abea:	83 ec 0c             	sub    esp,0xc
c000abed:	b8 0b 00 00 00       	mov    eax,0xb
c000abf2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000abf6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000abfd:	80 fa 19             	cmp    dl,0x19
c000ac00:	77 34                	ja     c000ac36 <File::tell(unsigned long long*)+0x4c>
c000ac02:	8b 14 95 e0 2b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd420]
c000ac09:	85 d2                	test   edx,edx
c000ac0b:	74 29                	je     c000ac36 <File::tell(unsigned long long*)+0x4c>
c000ac0d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac13:	85 d2                	test   edx,edx
c000ac15:	74 1f                	je     c000ac36 <File::tell(unsigned long long*)+0x4c>
c000ac17:	b8 05 00 00 00       	mov    eax,0x5
c000ac1c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac20:	74 14                	je     c000ac36 <File::tell(unsigned long long*)+0x4c>
c000ac22:	50                   	push   eax
c000ac23:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac29:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac2f:	52                   	push   edx
c000ac30:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ac33:	83 c4 10             	add    esp,0x10
c000ac36:	83 c4 0c             	add    esp,0xc
c000ac39:	c3                   	ret    

c000ac3a <File::rewind()>:
c000ac3a:	83 ec 10             	sub    esp,0x10
c000ac3d:	6a 00                	push   0x0
c000ac3f:	6a 00                	push   0x0
c000ac41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac45:	e8 4a ff ff ff       	call   c000ab94 <File::seek(unsigned long long)>
c000ac4a:	83 c4 1c             	add    esp,0x1c
c000ac4d:	c3                   	ret    

c000ac4e <File::unlink()>:
c000ac4e:	83 ec 0c             	sub    esp,0xc
c000ac51:	b8 0b 00 00 00       	mov    eax,0xb
c000ac56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac5a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ac61:	80 f9 19             	cmp    cl,0x19
c000ac64:	77 2f                	ja     c000ac95 <File::unlink()+0x47>
c000ac66:	8b 0c 8d e0 2b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd420]
c000ac6d:	85 c9                	test   ecx,ecx
c000ac6f:	74 24                	je     c000ac95 <File::unlink()+0x47>
c000ac71:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ac77:	85 c9                	test   ecx,ecx
c000ac79:	74 1a                	je     c000ac95 <File::unlink()+0x47>
c000ac7b:	b8 06 00 00 00       	mov    eax,0x6
c000ac80:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac84:	75 0f                	jne    c000ac95 <File::unlink()+0x47>
c000ac86:	83 c2 0d             	add    edx,0xd
c000ac89:	50                   	push   eax
c000ac8a:	50                   	push   eax
c000ac8b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ac8d:	52                   	push   edx
c000ac8e:	51                   	push   ecx
c000ac8f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ac92:	83 c4 10             	add    esp,0x10
c000ac95:	83 c4 0c             	add    esp,0xc
c000ac98:	c3                   	ret    
c000ac99:	90                   	nop

c000ac9a <File::rename(char const*)>:
c000ac9a:	83 ec 0c             	sub    esp,0xc
c000ac9d:	b8 0b 00 00 00       	mov    eax,0xb
c000aca2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aca6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000acad:	80 f9 19             	cmp    cl,0x19
c000acb0:	77 32                	ja     c000ace4 <File::rename(char const*)+0x4a>
c000acb2:	8b 0c 8d e0 2b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd420]
c000acb9:	85 c9                	test   ecx,ecx
c000acbb:	74 27                	je     c000ace4 <File::rename(char const*)+0x4a>
c000acbd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000acc3:	85 c9                	test   ecx,ecx
c000acc5:	74 1d                	je     c000ace4 <File::rename(char const*)+0x4a>
c000acc7:	b8 06 00 00 00       	mov    eax,0x6
c000accc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000acd0:	75 12                	jne    c000ace4 <File::rename(char const*)+0x4a>
c000acd2:	83 c2 0d             	add    edx,0xd
c000acd5:	50                   	push   eax
c000acd6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000acd8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acdc:	52                   	push   edx
c000acdd:	51                   	push   ecx
c000acde:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ace1:	83 c4 10             	add    esp,0x10
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <File::chfatattr(unsigned char, unsigned char)>:
c000ace8:	57                   	push   edi
c000ace9:	b8 0b 00 00 00       	mov    eax,0xb
c000acee:	56                   	push   esi
c000acef:	53                   	push   ebx
c000acf0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acf4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000acf8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000acff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ad03:	80 f9 19             	cmp    cl,0x19
c000ad06:	77 37                	ja     c000ad3f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad08:	8b 0c 8d e0 2b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd420]
c000ad0f:	85 c9                	test   ecx,ecx
c000ad11:	74 2c                	je     c000ad3f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad13:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad19:	85 c9                	test   ecx,ecx
c000ad1b:	74 22                	je     c000ad3f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad1d:	b8 06 00 00 00       	mov    eax,0x6
c000ad22:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad26:	75 17                	jne    c000ad3f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad28:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ad2a:	89 f0                	mov    eax,esi
c000ad2c:	83 c2 0d             	add    edx,0xd
c000ad2f:	0f b6 f0             	movzx  esi,al
c000ad32:	0f b6 db             	movzx  ebx,bl
c000ad35:	56                   	push   esi
c000ad36:	53                   	push   ebx
c000ad37:	52                   	push   edx
c000ad38:	51                   	push   ecx
c000ad39:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ad3c:	83 c4 10             	add    esp,0x10
c000ad3f:	5b                   	pop    ebx
c000ad40:	5e                   	pop    esi
c000ad41:	5f                   	pop    edi
c000ad42:	c3                   	ret    
c000ad43:	90                   	nop

c000ad44 <File::exists()>:
c000ad44:	83 ec 0c             	sub    esp,0xc
c000ad47:	31 c0                	xor    eax,eax
c000ad49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad4d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad54:	80 f9 19             	cmp    cl,0x19
c000ad57:	77 24                	ja     c000ad7d <File::exists()+0x39>
c000ad59:	8b 0c 8d e0 2b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd420]
c000ad60:	85 c9                	test   ecx,ecx
c000ad62:	74 19                	je     c000ad7d <File::exists()+0x39>
c000ad64:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad6a:	85 c9                	test   ecx,ecx
c000ad6c:	74 0f                	je     c000ad7d <File::exists()+0x39>
c000ad6e:	83 c2 0d             	add    edx,0xd
c000ad71:	50                   	push   eax
c000ad72:	50                   	push   eax
c000ad73:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad75:	52                   	push   edx
c000ad76:	51                   	push   ecx
c000ad77:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ad7a:	83 c4 10             	add    esp,0x10
c000ad7d:	83 c4 0c             	add    esp,0xc
c000ad80:	c3                   	ret    
c000ad81:	90                   	nop

c000ad82 <File::stat(unsigned long long*, bool*)>:
c000ad82:	56                   	push   esi
c000ad83:	53                   	push   ebx
c000ad84:	50                   	push   eax
c000ad85:	b8 0b 00 00 00       	mov    eax,0xb
c000ad8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad8e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad92:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad99:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad9d:	80 f9 19             	cmp    cl,0x19
c000ada0:	77 3d                	ja     c000addf <File::stat(unsigned long long*, bool*)+0x5d>
c000ada2:	8b 0c 8d e0 2b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd420]
c000ada9:	85 c9                	test   ecx,ecx
c000adab:	74 32                	je     c000addf <File::stat(unsigned long long*, bool*)+0x5d>
c000adad:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adb3:	85 c9                	test   ecx,ecx
c000adb5:	74 28                	je     c000addf <File::stat(unsigned long long*, bool*)+0x5d>
c000adb7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adb9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adbd:	74 13                	je     c000add2 <File::stat(unsigned long long*, bool*)+0x50>
c000adbf:	83 ec 04             	sub    esp,0x4
c000adc2:	56                   	push   esi
c000adc3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000adc9:	51                   	push   ecx
c000adca:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000adcd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000add0:	eb 0a                	jmp    c000addc <File::stat(unsigned long long*, bool*)+0x5a>
c000add2:	53                   	push   ebx
c000add3:	83 c2 0d             	add    edx,0xd
c000add6:	56                   	push   esi
c000add7:	52                   	push   edx
c000add8:	51                   	push   ecx
c000add9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000addc:	83 c4 10             	add    esp,0x10
c000addf:	5a                   	pop    edx
c000ade0:	5b                   	pop    ebx
c000ade1:	5e                   	pop    esi
c000ade2:	c3                   	ret    

c000ade3 <Fs::setcwd(Process*, char*)>:
c000ade3:	55                   	push   ebp
c000ade4:	57                   	push   edi
c000ade5:	56                   	push   esi
c000ade6:	53                   	push   ebx
c000ade7:	81 ec 20 02 00 00    	sub    esp,0x220
c000aded:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000adf4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000adfa:	57                   	push   edi
c000adfb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000ae02:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ae06:	56                   	push   esi
c000ae07:	e8 60 fa ff ff       	call   c000a86c <Fs::standardiseFiles(char*, char const*, char const*)>
c000ae0c:	89 34 24             	mov    DWORD PTR [esp],esi
c000ae0f:	e8 2c 57 ff ff       	call   c0000540 <strlen>
c000ae14:	83 c4 10             	add    esp,0x10
c000ae17:	83 f8 02             	cmp    eax,0x2
c000ae1a:	77 15                	ja     c000ae31 <Fs::setcwd(Process*, char*)+0x4e>
c000ae1c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000ae21:	83 eb 41             	sub    ebx,0x41
c000ae24:	8b 04 9d e0 2b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd420]
c000ae2b:	85 c0                	test   eax,eax
c000ae2d:	75 1c                	jne    c000ae4b <Fs::setcwd(Process*, char*)+0x68>
c000ae2f:	eb 2f                	jmp    c000ae60 <Fs::setcwd(Process*, char*)+0x7d>
c000ae31:	83 ec 0c             	sub    esp,0xc
c000ae34:	56                   	push   esi
c000ae35:	e8 06 57 ff ff       	call   c0000540 <strlen>
c000ae3a:	83 c4 10             	add    esp,0x10
c000ae3d:	83 f8 03             	cmp    eax,0x3
c000ae40:	75 57                	jne    c000ae99 <Fs::setcwd(Process*, char*)+0xb6>
c000ae42:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000ae47:	75 50                	jne    c000ae99 <Fs::setcwd(Process*, char*)+0xb6>
c000ae49:	eb d1                	jmp    c000ae1c <Fs::setcwd(Process*, char*)+0x39>
c000ae4b:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000ae52:	75 0c                	jne    c000ae60 <Fs::setcwd(Process*, char*)+0x7d>
c000ae54:	83 ec 0c             	sub    esp,0xc
c000ae57:	50                   	push   eax
c000ae58:	e8 69 1c 00 00       	call   c000cac6 <LogicalDisk::mount()>
c000ae5d:	83 c4 10             	add    esp,0x10
c000ae60:	b8 03 00 00 00       	mov    eax,0x3
c000ae65:	83 fb 19             	cmp    ebx,0x19
c000ae68:	0f 87 c6 00 00 00    	ja     c000af34 <Fs::setcwd(Process*, char*)+0x151>
c000ae6e:	8b 14 9d e0 2b 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd420]
c000ae75:	b8 05 00 00 00       	mov    eax,0x5
c000ae7a:	85 d2                	test   edx,edx
c000ae7c:	0f 84 b2 00 00 00    	je     c000af34 <Fs::setcwd(Process*, char*)+0x151>
c000ae82:	b8 06 00 00 00       	mov    eax,0x6
c000ae87:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000ae8e:	0f 85 92 00 00 00    	jne    c000af26 <Fs::setcwd(Process*, char*)+0x143>
c000ae94:	e9 9b 00 00 00       	jmp    c000af34 <Fs::setcwd(Process*, char*)+0x151>
c000ae99:	83 ec 0c             	sub    esp,0xc
c000ae9c:	68 14 01 00 00       	push   0x114
c000aea1:	e8 5f c9 ff ff       	call   c0007805 <malloc>
c000aea6:	83 c4 0c             	add    esp,0xc
c000aea9:	89 c3                	mov    ebx,eax
c000aeab:	55                   	push   ebp
c000aeac:	56                   	push   esi
c000aead:	50                   	push   eax
c000aeae:	e8 63 fb ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c000aeb3:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000aeb8:	83 c4 0c             	add    esp,0xc
c000aebb:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000aebf:	50                   	push   eax
c000aec0:	8d 44 24 10          	lea    eax,[esp+0x10]
c000aec4:	50                   	push   eax
c000aec5:	53                   	push   ebx
c000aec6:	e8 b7 fe ff ff       	call   c000ad82 <File::stat(unsigned long long*, bool*)>
c000aecb:	83 c4 10             	add    esp,0x10
c000aece:	83 f8 02             	cmp    eax,0x2
c000aed1:	74 04                	je     c000aed7 <Fs::setcwd(Process*, char*)+0xf4>
c000aed3:	85 c0                	test   eax,eax
c000aed5:	74 1c                	je     c000aef3 <Fs::setcwd(Process*, char*)+0x110>
c000aed7:	b8 01 00 00 00       	mov    eax,0x1
c000aedc:	85 db                	test   ebx,ebx
c000aede:	74 54                	je     c000af34 <Fs::setcwd(Process*, char*)+0x151>
c000aee0:	83 ec 0c             	sub    esp,0xc
c000aee3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aee5:	53                   	push   ebx
c000aee6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000aee9:	83 c4 10             	add    esp,0x10
c000aeec:	b8 01 00 00 00       	mov    eax,0x1
c000aef1:	eb 41                	jmp    c000af34 <Fs::setcwd(Process*, char*)+0x151>
c000aef3:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000aef8:	75 1c                	jne    c000af16 <Fs::setcwd(Process*, char*)+0x133>
c000aefa:	b8 02 00 00 00       	mov    eax,0x2
c000aeff:	85 db                	test   ebx,ebx
c000af01:	74 31                	je     c000af34 <Fs::setcwd(Process*, char*)+0x151>
c000af03:	83 ec 0c             	sub    esp,0xc
c000af06:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af08:	53                   	push   ebx
c000af09:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af0c:	83 c4 10             	add    esp,0x10
c000af0f:	b8 02 00 00 00       	mov    eax,0x2
c000af14:	eb 1e                	jmp    c000af34 <Fs::setcwd(Process*, char*)+0x151>
c000af16:	85 db                	test   ebx,ebx
c000af18:	74 0c                	je     c000af26 <Fs::setcwd(Process*, char*)+0x143>
c000af1a:	83 ec 0c             	sub    esp,0xc
c000af1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af1f:	53                   	push   ebx
c000af20:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af23:	83 c4 10             	add    esp,0x10
c000af26:	50                   	push   eax
c000af27:	50                   	push   eax
c000af28:	56                   	push   esi
c000af29:	57                   	push   edi
c000af2a:	e8 d1 56 ff ff       	call   c0000600 <strcpy>
c000af2f:	83 c4 10             	add    esp,0x10
c000af32:	31 c0                	xor    eax,eax
c000af34:	81 c4 1c 02 00 00    	add    esp,0x21c
c000af3a:	5b                   	pop    ebx
c000af3b:	5e                   	pop    esi
c000af3c:	5f                   	pop    edi
c000af3d:	5d                   	pop    ebp
c000af3e:	c3                   	ret    
c000af3f:	90                   	nop

c000af40 <Directory::Directory(char const*, Process*)>:
c000af40:	83 ec 0c             	sub    esp,0xc
c000af43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af47:	83 ec 08             	sub    esp,0x8
c000af4a:	6a 00                	push   0x0
c000af4c:	50                   	push   eax
c000af4d:	e8 b8 de ff ff       	call   c0008e0a <UnixFile::UnixFile(int)>
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	ba 38 db 01 c0       	mov    edx,0xc001db38
c000af5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5e:	89 10                	mov    DWORD PTR [eax],edx
c000af60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af64:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af6e:	83 c0 0d             	add    eax,0xd
c000af71:	83 ec 04             	sub    esp,0x4
c000af74:	52                   	push   edx
c000af75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af79:	50                   	push   eax
c000af7a:	e8 ed f8 ff ff       	call   c000a86c <Fs::standardiseFiles(char*, char const*, char const*)>
c000af7f:	83 c4 10             	add    esp,0x10
c000af82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af86:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af89:	8d 50 bf             	lea    edx,[eax-0x41]
c000af8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af90:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000af96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000af9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afa8:	25 ff 00 00 00       	and    eax,0xff
c000afad:	8b 04 85 e0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd420]
c000afb4:	85 c0                	test   eax,eax
c000afb6:	74 42                	je     c000affa <Directory::Directory(char const*, Process*)+0xba>
c000afb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afbc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afc2:	25 ff 00 00 00       	and    eax,0xff
c000afc7:	8b 04 85 e0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd420]
c000afce:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000afd4:	85 c0                	test   eax,eax
c000afd6:	75 22                	jne    c000affa <Directory::Directory(char const*, Process*)+0xba>
c000afd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afdc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afe2:	25 ff 00 00 00       	and    eax,0xff
c000afe7:	8b 04 85 e0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd420]
c000afee:	83 ec 0c             	sub    esp,0xc
c000aff1:	50                   	push   eax
c000aff2:	e8 cf 1a 00 00       	call   c000cac6 <LogicalDisk::mount()>
c000aff7:	83 c4 10             	add    esp,0x10
c000affa:	90                   	nop
c000affb:	83 c4 0c             	add    esp,0xc
c000affe:	c3                   	ret    
c000afff:	90                   	nop

c000b000 <Directory::open()>:
c000b000:	53                   	push   ebx
c000b001:	b8 0b 00 00 00       	mov    eax,0xb
c000b006:	83 ec 08             	sub    esp,0x8
c000b009:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b00d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b014:	80 fa 19             	cmp    dl,0x19
c000b017:	77 3d                	ja     c000b056 <Directory::open()+0x56>
c000b019:	8b 14 95 e0 2b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd420]
c000b020:	85 d2                	test   edx,edx
c000b022:	74 32                	je     c000b056 <Directory::open()+0x56>
c000b024:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b02a:	85 d2                	test   edx,edx
c000b02c:	74 28                	je     c000b056 <Directory::open()+0x56>
c000b02e:	b8 06 00 00 00       	mov    eax,0x6
c000b033:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b037:	75 1d                	jne    c000b056 <Directory::open()+0x56>
c000b039:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b03f:	50                   	push   eax
c000b040:	8b 02                	mov    eax,DWORD PTR [edx]
c000b042:	51                   	push   ecx
c000b043:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b046:	51                   	push   ecx
c000b047:	52                   	push   edx
c000b048:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	85 c0                	test   eax,eax
c000b050:	75 04                	jne    c000b056 <Directory::open()+0x56>
c000b052:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b056:	83 c4 08             	add    esp,0x8
c000b059:	5b                   	pop    ebx
c000b05a:	c3                   	ret    
c000b05b:	90                   	nop

c000b05c <Directory::close()>:
c000b05c:	53                   	push   ebx
c000b05d:	b8 0b 00 00 00       	mov    eax,0xb
c000b062:	83 ec 08             	sub    esp,0x8
c000b065:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b069:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b070:	80 fa 19             	cmp    dl,0x19
c000b073:	77 41                	ja     c000b0b6 <Directory::close()+0x5a>
c000b075:	8b 1c 95 e0 2b 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd420]
c000b07c:	85 db                	test   ebx,ebx
c000b07e:	74 36                	je     c000b0b6 <Directory::close()+0x5a>
c000b080:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b087:	74 2d                	je     c000b0b6 <Directory::close()+0x5a>
c000b089:	b8 05 00 00 00       	mov    eax,0x5
c000b08e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b092:	74 22                	je     c000b0b6 <Directory::close()+0x5a>
c000b094:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b098:	8b 04 95 e0 2b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd420]
c000b09f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b0a5:	53                   	push   ebx
c000b0a6:	53                   	push   ebx
c000b0a7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b0a9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b0af:	50                   	push   eax
c000b0b0:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b0b3:	83 c4 10             	add    esp,0x10
c000b0b6:	83 c4 08             	add    esp,0x8
c000b0b9:	5b                   	pop    ebx
c000b0ba:	c3                   	ret    
c000b0bb:	90                   	nop

c000b0bc <Directory::unlink()>:
c000b0bc:	83 ec 0c             	sub    esp,0xc
c000b0bf:	b8 0b 00 00 00       	mov    eax,0xb
c000b0c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b0c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b0cf:	80 f9 19             	cmp    cl,0x19
c000b0d2:	77 2f                	ja     c000b103 <Directory::unlink()+0x47>
c000b0d4:	8b 0c 8d e0 2b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd420]
c000b0db:	85 c9                	test   ecx,ecx
c000b0dd:	74 24                	je     c000b103 <Directory::unlink()+0x47>
c000b0df:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b0e5:	85 c9                	test   ecx,ecx
c000b0e7:	74 1a                	je     c000b103 <Directory::unlink()+0x47>
c000b0e9:	b8 06 00 00 00       	mov    eax,0x6
c000b0ee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b0f2:	75 0f                	jne    c000b103 <Directory::unlink()+0x47>
c000b0f4:	83 c2 0d             	add    edx,0xd
c000b0f7:	50                   	push   eax
c000b0f8:	50                   	push   eax
c000b0f9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b0fb:	52                   	push   edx
c000b0fc:	51                   	push   ecx
c000b0fd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b100:	83 c4 10             	add    esp,0x10
c000b103:	83 c4 0c             	add    esp,0xc
c000b106:	c3                   	ret    
c000b107:	90                   	nop

c000b108 <Directory::rename(char const*)>:
c000b108:	83 ec 0c             	sub    esp,0xc
c000b10b:	b8 0b 00 00 00       	mov    eax,0xb
c000b110:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b114:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b11b:	80 f9 19             	cmp    cl,0x19
c000b11e:	77 32                	ja     c000b152 <Directory::rename(char const*)+0x4a>
c000b120:	8b 0c 8d e0 2b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd420]
c000b127:	85 c9                	test   ecx,ecx
c000b129:	74 27                	je     c000b152 <Directory::rename(char const*)+0x4a>
c000b12b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b131:	85 c9                	test   ecx,ecx
c000b133:	74 1d                	je     c000b152 <Directory::rename(char const*)+0x4a>
c000b135:	b8 06 00 00 00       	mov    eax,0x6
c000b13a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b13e:	75 12                	jne    c000b152 <Directory::rename(char const*)+0x4a>
c000b140:	83 c2 0d             	add    edx,0xd
c000b143:	50                   	push   eax
c000b144:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b146:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b14a:	52                   	push   edx
c000b14b:	51                   	push   ecx
c000b14c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b14f:	83 c4 10             	add    esp,0x10
c000b152:	83 c4 0c             	add    esp,0xc
c000b155:	c3                   	ret    

c000b156 <Directory::exists()>:
c000b156:	83 ec 0c             	sub    esp,0xc
c000b159:	31 c0                	xor    eax,eax
c000b15b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b15f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b166:	80 f9 19             	cmp    cl,0x19
c000b169:	77 24                	ja     c000b18f <Directory::exists()+0x39>
c000b16b:	8b 0c 8d e0 2b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd420]
c000b172:	85 c9                	test   ecx,ecx
c000b174:	74 19                	je     c000b18f <Directory::exists()+0x39>
c000b176:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b17c:	85 c9                	test   ecx,ecx
c000b17e:	74 0f                	je     c000b18f <Directory::exists()+0x39>
c000b180:	83 c2 0d             	add    edx,0xd
c000b183:	50                   	push   eax
c000b184:	50                   	push   eax
c000b185:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b187:	52                   	push   edx
c000b188:	51                   	push   ecx
c000b189:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b18c:	83 c4 10             	add    esp,0x10
c000b18f:	83 c4 0c             	add    esp,0xc
c000b192:	c3                   	ret    
c000b193:	90                   	nop

c000b194 <Directory::read(dirent*)>:
c000b194:	83 ec 1c             	sub    esp,0x1c
c000b197:	b8 0b 00 00 00       	mov    eax,0xb
c000b19c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1a0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1a7:	80 fa 19             	cmp    dl,0x19
c000b1aa:	77 30                	ja     c000b1dc <Directory::read(dirent*)+0x48>
c000b1ac:	8b 14 95 e0 2b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd420]
c000b1b3:	85 d2                	test   edx,edx
c000b1b5:	74 25                	je     c000b1dc <Directory::read(dirent*)+0x48>
c000b1b7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b1be:	74 1c                	je     c000b1dc <Directory::read(dirent*)+0x48>
c000b1c0:	83 ec 0c             	sub    esp,0xc
c000b1c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1c5:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b1c9:	52                   	push   edx
c000b1ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ce:	6a 00                	push   0x0
c000b1d0:	68 10 01 00 00       	push   0x110
c000b1d5:	51                   	push   ecx
c000b1d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b1d9:	83 c4 20             	add    esp,0x20
c000b1dc:	83 c4 1c             	add    esp,0x1c
c000b1df:	c3                   	ret    

c000b1e0 <Directory::create()>:
c000b1e0:	83 ec 0c             	sub    esp,0xc
c000b1e3:	b8 0b 00 00 00       	mov    eax,0xb
c000b1e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1f3:	80 f9 19             	cmp    cl,0x19
c000b1f6:	77 2f                	ja     c000b227 <Directory::create()+0x47>
c000b1f8:	8b 0c 8d e0 2b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd420]
c000b1ff:	85 c9                	test   ecx,ecx
c000b201:	74 24                	je     c000b227 <Directory::create()+0x47>
c000b203:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b209:	85 c9                	test   ecx,ecx
c000b20b:	74 1a                	je     c000b227 <Directory::create()+0x47>
c000b20d:	b8 06 00 00 00       	mov    eax,0x6
c000b212:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b216:	75 0f                	jne    c000b227 <Directory::create()+0x47>
c000b218:	83 c2 0d             	add    edx,0xd
c000b21b:	50                   	push   eax
c000b21c:	50                   	push   eax
c000b21d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b21f:	52                   	push   edx
c000b220:	51                   	push   ecx
c000b221:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b224:	83 c4 10             	add    esp,0x10
c000b227:	83 c4 0c             	add    esp,0xc
c000b22a:	c3                   	ret    
c000b22b:	90                   	nop

c000b22c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b22c:	b8 0a 00 00 00       	mov    eax,0xa
c000b231:	c3                   	ret    
c000b232:	66 90                	xchg   ax,ax

c000b234 <Bus::Bus(char const*)>:
c000b234:	83 ec 0c             	sub    esp,0xc
c000b237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b23b:	83 ec 08             	sub    esp,0x8
c000b23e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b242:	50                   	push   eax
c000b243:	e8 30 08 00 00       	call   c000ba78 <Device::Device(char const*)>
c000b248:	83 c4 10             	add    esp,0x10
c000b24b:	ba 54 db 01 c0       	mov    edx,0xc001db54
c000b250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b254:	89 10                	mov    DWORD PTR [eax],edx
c000b256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b25a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b264:	90                   	nop
c000b265:	83 c4 0c             	add    esp,0xc
c000b268:	c3                   	ret    
c000b269:	90                   	nop
c000b26a:	66 90                	xchg   ax,ax

c000b26c <Bus::~Bus()>:
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	ba 54 db 01 c0       	mov    edx,0xc001db54
c000b274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b278:	89 10                	mov    DWORD PTR [eax],edx
c000b27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b27e:	83 ec 0c             	sub    esp,0xc
c000b281:	50                   	push   eax
c000b282:	e8 5b 05 00 00       	call   c000b7e2 <Device::~Device()>
c000b287:	83 c4 10             	add    esp,0x10
c000b28a:	90                   	nop
c000b28b:	83 c4 0c             	add    esp,0xc
c000b28e:	c3                   	ret    
c000b28f:	90                   	nop

c000b290 <Bus::~Bus()>:
c000b290:	83 ec 0c             	sub    esp,0xc
c000b293:	83 ec 0c             	sub    esp,0xc
c000b296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b29a:	e8 cd ff ff ff       	call   c000b26c <Bus::~Bus()>
c000b29f:	83 c4 10             	add    esp,0x10
c000b2a2:	83 ec 08             	sub    esp,0x8
c000b2a5:	68 58 01 00 00       	push   0x158
c000b2aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2ae:	e8 f7 f0 ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c000b2b3:	83 c4 10             	add    esp,0x10
c000b2b6:	83 c4 0c             	add    esp,0xc
c000b2b9:	c3                   	ret    

c000b2ba <beepThread(void*)>:
c000b2ba:	83 ec 0c             	sub    esp,0xc
c000b2bd:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c000b2c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2c6:	48                   	dec    eax
c000b2c7:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c000b2cc:	75 01                	jne    c000b2cf <beepThread(void*)+0x15>
c000b2ce:	fb                   	sti    
c000b2cf:	83 ec 0c             	sub    esp,0xc
c000b2d2:	6b c2 0a             	imul   eax,edx,0xa
c000b2d5:	50                   	push   eax
c000b2d6:	e8 15 85 00 00       	call   c00137f0 <milliTenthSleep(unsigned int)>
c000b2db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b2e2:	e8 bb a2 00 00       	call   c00155a2 <HalMakeBeep(int)>
c000b2e7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b2ef:	83 c4 1c             	add    esp,0x1c
c000b2f2:	e9 f5 83 00 00       	jmp    c00136ec <blockTask(TaskState)>

c000b2f7 <Krnl::beep(int, int, bool)>:
c000b2f7:	56                   	push   esi
c000b2f8:	53                   	push   ebx
c000b2f9:	83 ec 10             	sub    esp,0x10
c000b2fc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b300:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b308:	e8 95 a2 00 00       	call   c00155a2 <HalMakeBeep(int)>
c000b30d:	83 c4 10             	add    esp,0x10
c000b310:	89 f0                	mov    eax,esi
c000b312:	84 c0                	test   al,al
c000b314:	74 1e                	je     c000b334 <Krnl::beep(int, int, bool)+0x3d>
c000b316:	83 ec 0c             	sub    esp,0xc
c000b319:	6b db 0a             	imul   ebx,ebx,0xa
c000b31c:	53                   	push   ebx
c000b31d:	e8 ce 84 00 00       	call   c00137f0 <milliTenthSleep(unsigned int)>
c000b322:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b32a:	83 c4 14             	add    esp,0x14
c000b32d:	5b                   	pop    ebx
c000b32e:	5e                   	pop    esi
c000b32f:	e9 6e a2 00 00       	jmp    c00155a2 <HalMakeBeep(int)>
c000b334:	68 e6 00 00 00       	push   0xe6
c000b339:	53                   	push   ebx
c000b33a:	68 ba b2 00 c0       	push   0xc000b2ba
c000b33f:	ff 35 50 3b 02 c0    	push   DWORD PTR ds:0xc0023b50
c000b345:	e8 86 7f 00 00       	call   c00132d0 <Process::createThread(void (*)(void*), void*, int)>
c000b34a:	83 c4 14             	add    esp,0x14
c000b34d:	5b                   	pop    ebx
c000b34e:	5e                   	pop    esi
c000b34f:	c3                   	ret    

c000b350 <User::loadClockSettings(int)>:
c000b350:	53                   	push   ebx
c000b351:	83 ec 14             	sub    esp,0x14
c000b354:	68 14 01 00 00       	push   0x114
c000b359:	e8 a7 c4 ff ff       	call   c0007805 <malloc>
c000b35e:	83 c4 0c             	add    esp,0xc
c000b361:	89 c3                	mov    ebx,eax
c000b363:	ff 35 50 3b 02 c0    	push   DWORD PTR ds:0xc0023b50
c000b369:	68 78 db 01 c0       	push   0xc001db78
c000b36e:	50                   	push   eax
c000b36f:	e8 a2 f6 ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c000b374:	58                   	pop    eax
c000b375:	5a                   	pop    edx
c000b376:	6a 01                	push   0x1
c000b378:	53                   	push   ebx
c000b379:	e8 58 f7 ff ff       	call   c000aad6 <File::open(FileOpenMode)>
c000b37e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b381:	e8 ae f7 ff ff       	call   c000ab34 <File::close()>
c000b386:	83 c4 10             	add    esp,0x10
c000b389:	85 db                	test   ebx,ebx
c000b38b:	74 0f                	je     c000b39c <User::loadClockSettings(int)+0x4c>
c000b38d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b38f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b393:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b396:	83 c4 08             	add    esp,0x8
c000b399:	5b                   	pop    ebx
c000b39a:	ff e0                	jmp    eax
c000b39c:	83 c4 08             	add    esp,0x8
c000b39f:	5b                   	pop    ebx
c000b3a0:	c3                   	ret    
c000b3a1:	90                   	nop

c000b3a2 <Clock::Clock(char const*)>:
c000b3a2:	83 ec 0c             	sub    esp,0xc
c000b3a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3a9:	83 ec 08             	sub    esp,0x8
c000b3ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b0:	50                   	push   eax
c000b3b1:	e8 c2 06 00 00       	call   c000ba78 <Device::Device(char const*)>
c000b3b6:	83 c4 10             	add    esp,0x10
c000b3b9:	ba a0 db 01 c0       	mov    edx,0xc001dba0
c000b3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c2:	89 10                	mov    DWORD PTR [eax],edx
c000b3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b3d2:	90                   	nop
c000b3d3:	83 c4 0c             	add    esp,0xc
c000b3d6:	c3                   	ret    
c000b3d7:	90                   	nop

c000b3d8 <Clock::~Clock()>:
c000b3d8:	83 ec 0c             	sub    esp,0xc
c000b3db:	ba a0 db 01 c0       	mov    edx,0xc001dba0
c000b3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e4:	89 10                	mov    DWORD PTR [eax],edx
c000b3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ea:	83 ec 0c             	sub    esp,0xc
c000b3ed:	50                   	push   eax
c000b3ee:	e8 ef 03 00 00       	call   c000b7e2 <Device::~Device()>
c000b3f3:	83 c4 10             	add    esp,0x10
c000b3f6:	90                   	nop
c000b3f7:	83 c4 0c             	add    esp,0xc
c000b3fa:	c3                   	ret    
c000b3fb:	90                   	nop

c000b3fc <Clock::~Clock()>:
c000b3fc:	83 ec 0c             	sub    esp,0xc
c000b3ff:	83 ec 0c             	sub    esp,0xc
c000b402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b406:	e8 cd ff ff ff       	call   c000b3d8 <Clock::~Clock()>
c000b40b:	83 c4 10             	add    esp,0x10
c000b40e:	83 ec 08             	sub    esp,0x8
c000b411:	68 58 01 00 00       	push   0x158
c000b416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41a:	e8 8b ef ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c000b41f:	83 c4 10             	add    esp,0x10
c000b422:	83 c4 0c             	add    esp,0xc
c000b425:	c3                   	ret    

c000b426 <Clock::timeInSecondsLocal()>:
c000b426:	53                   	push   ebx
c000b427:	83 ec 14             	sub    esp,0x14
c000b42a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b42e:	8b 10                	mov    edx,DWORD PTR [eax]
c000b430:	50                   	push   eax
c000b431:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b434:	0f b6 0d 78 07 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020778
c000b43b:	03 0d 7c 07 02 c0    	add    ecx,DWORD PTR ds:0xc002077c
c000b441:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b447:	89 cb                	mov    ebx,ecx
c000b449:	c1 fb 1f             	sar    ebx,0x1f
c000b44c:	01 c8                	add    eax,ecx
c000b44e:	11 da                	adc    edx,ebx
c000b450:	83 c4 10             	add    esp,0x10
c000b453:	31 c9                	xor    ecx,ecx
c000b455:	80 3d 79 07 02 c0 00 	cmp    BYTE PTR ds:0xc0020779,0x0
c000b45c:	74 05                	je     c000b463 <Clock::timeInSecondsLocal()+0x3d>
c000b45e:	b9 08 07 00 00       	mov    ecx,0x708
c000b463:	31 db                	xor    ebx,ebx
c000b465:	01 c8                	add    eax,ecx
c000b467:	11 da                	adc    edx,ebx
c000b469:	83 c4 08             	add    esp,0x8
c000b46c:	5b                   	pop    ebx
c000b46d:	c3                   	ret    

c000b46e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b46e:	57                   	push   edi
c000b46f:	56                   	push   esi
c000b470:	53                   	push   ebx
c000b471:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b475:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b479:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b47b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b47f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b482:	0f b6 05 78 07 02 c0 	movzx  eax,BYTE PTR ds:0xc0020778
c000b489:	03 05 7c 07 02 c0    	add    eax,DWORD PTR ds:0xc002077c
c000b48f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b495:	99                   	cdq    
c000b496:	29 c6                	sub    esi,eax
c000b498:	19 d7                	sbb    edi,edx
c000b49a:	89 f0                	mov    eax,esi
c000b49c:	89 fa                	mov    edx,edi
c000b49e:	31 f6                	xor    esi,esi
c000b4a0:	80 3d 79 07 02 c0 00 	cmp    BYTE PTR ds:0xc0020779,0x0
c000b4a7:	74 05                	je     c000b4ae <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b4a9:	be 08 07 00 00       	mov    esi,0x708
c000b4ae:	31 ff                	xor    edi,edi
c000b4b0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b4b4:	29 f0                	sub    eax,esi
c000b4b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4ba:	19 fa                	sbb    edx,edi
c000b4bc:	89 d8                	mov    eax,ebx
c000b4be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b4c2:	5b                   	pop    ebx
c000b4c3:	5e                   	pop    esi
c000b4c4:	5f                   	pop    edi
c000b4c5:	ff e0                	jmp    eax

c000b4c7 <datetimeToSeconds(datetime_t)>:
c000b4c7:	55                   	push   ebp
c000b4c8:	57                   	push   edi
c000b4c9:	56                   	push   esi
c000b4ca:	53                   	push   ebx
c000b4cb:	83 ec 14             	sub    esp,0x14
c000b4ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b4d2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b4d6:	89 d3                	mov    ebx,edx
c000b4d8:	0f b6 c6             	movzx  eax,dh
c000b4db:	c1 eb 10             	shr    ebx,0x10
c000b4de:	48                   	dec    eax
c000b4df:	66 81 eb 6c 07       	sub    bx,0x76c
c000b4e4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b4e8:	0f b6 f5             	movzx  esi,ch
c000b4eb:	89 cf                	mov    edi,ecx
c000b4ed:	6b f6 3c             	imul   esi,esi,0x3c
c000b4f0:	c1 ef 10             	shr    edi,0x10
c000b4f3:	0f b6 c9             	movzx  ecx,cl
c000b4f6:	89 f8                	mov    eax,edi
c000b4f8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b4fe:	0f b6 f8             	movzx  edi,al
c000b501:	0f b6 d2             	movzx  edx,dl
c000b504:	01 fe                	add    esi,edi
c000b506:	01 f1                	add    ecx,esi
c000b508:	0f b7 f3             	movzx  esi,bx
c000b50b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b50f:	c1 f9 1f             	sar    ecx,0x1f
c000b512:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b517:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b51b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b520:	8b 0c 8d e0 db 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2420]
c000b527:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b52b:	76 29                	jbe    c000b556 <datetimeToSeconds(datetime_t)+0x8f>
c000b52d:	f6 c3 03             	test   bl,0x3
c000b530:	75 24                	jne    c000b556 <datetimeToSeconds(datetime_t)+0x8f>
c000b532:	31 d2                	xor    edx,edx
c000b534:	bf 64 00 00 00       	mov    edi,0x64
c000b539:	89 d8                	mov    eax,ebx
c000b53b:	66 f7 f7             	div    di
c000b53e:	66 85 d2             	test   dx,dx
c000b541:	75 12                	jne    c000b555 <datetimeToSeconds(datetime_t)+0x8e>
c000b543:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b549:	bf 90 01 00 00       	mov    edi,0x190
c000b54e:	99                   	cdq    
c000b54f:	f7 ff                	idiv   edi
c000b551:	85 d2                	test   edx,edx
c000b553:	75 01                	jne    c000b556 <datetimeToSeconds(datetime_t)+0x8f>
c000b555:	41                   	inc    ecx
c000b556:	66 83 fb 46          	cmp    bx,0x46
c000b55a:	76 45                	jbe    c000b5a1 <datetimeToSeconds(datetime_t)+0xda>
c000b55c:	bb 46 00 00 00       	mov    ebx,0x46
c000b561:	bf 64 00 00 00       	mov    edi,0x64
c000b566:	bd 90 01 00 00       	mov    ebp,0x190
c000b56b:	b8 6d 01 00 00       	mov    eax,0x16d
c000b570:	f6 c3 03             	test   bl,0x3
c000b573:	75 23                	jne    c000b598 <datetimeToSeconds(datetime_t)+0xd1>
c000b575:	89 d8                	mov    eax,ebx
c000b577:	99                   	cdq    
c000b578:	f7 ff                	idiv   edi
c000b57a:	b8 6e 01 00 00       	mov    eax,0x16e
c000b57f:	85 d2                	test   edx,edx
c000b581:	75 15                	jne    c000b598 <datetimeToSeconds(datetime_t)+0xd1>
c000b583:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b589:	99                   	cdq    
c000b58a:	f7 fd                	idiv   ebp
c000b58c:	31 c0                	xor    eax,eax
c000b58e:	85 d2                	test   edx,edx
c000b590:	0f 94 c0             	sete   al
c000b593:	05 6d 01 00 00       	add    eax,0x16d
c000b598:	01 c1                	add    ecx,eax
c000b59a:	43                   	inc    ebx
c000b59b:	39 f3                	cmp    ebx,esi
c000b59d:	7c cc                	jl     c000b56b <datetimeToSeconds(datetime_t)+0xa4>
c000b59f:	eb 3b                	jmp    c000b5dc <datetimeToSeconds(datetime_t)+0x115>
c000b5a1:	74 39                	je     c000b5dc <datetimeToSeconds(datetime_t)+0x115>
c000b5a3:	b8 45 00 00 00       	mov    eax,0x45
c000b5a8:	89 c2                	mov    edx,eax
c000b5aa:	83 e2 03             	and    edx,0x3
c000b5ad:	39 f0                	cmp    eax,esi
c000b5af:	7e 13                	jle    c000b5c4 <datetimeToSeconds(datetime_t)+0xfd>
c000b5b1:	85 d2                	test   edx,edx
c000b5b3:	0f 94 c2             	sete   dl
c000b5b6:	48                   	dec    eax
c000b5b7:	0f b6 d2             	movzx  edx,dl
c000b5ba:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b5c0:	29 d1                	sub    ecx,edx
c000b5c2:	eb e4                	jmp    c000b5a8 <datetimeToSeconds(datetime_t)+0xe1>
c000b5c4:	b8 6d 01 00 00       	mov    eax,0x16d
c000b5c9:	85 d2                	test   edx,edx
c000b5cb:	75 0d                	jne    c000b5da <datetimeToSeconds(datetime_t)+0x113>
c000b5cd:	31 c0                	xor    eax,eax
c000b5cf:	66 85 db             	test   bx,bx
c000b5d2:	0f 95 c0             	setne  al
c000b5d5:	05 6d 01 00 00       	add    eax,0x16d
c000b5da:	29 c1                	sub    ecx,eax
c000b5dc:	b8 80 51 01 00       	mov    eax,0x15180
c000b5e1:	f7 e9                	imul   ecx
c000b5e3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b5e7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b5eb:	83 c4 14             	add    esp,0x14
c000b5ee:	5b                   	pop    ebx
c000b5ef:	5e                   	pop    esi
c000b5f0:	5f                   	pop    edi
c000b5f1:	5d                   	pop    ebp
c000b5f2:	c3                   	ret    
c000b5f3:	90                   	nop

c000b5f4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b5f4:	57                   	push   edi
c000b5f5:	56                   	push   esi
c000b5f6:	53                   	push   ebx
c000b5f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b5fb:	8b 06                	mov    eax,DWORD PTR [esi]
c000b5fd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b600:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b604:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b608:	e8 ba fe ff ff       	call   c000b4c7 <datetimeToSeconds(datetime_t)>
c000b60d:	59                   	pop    ecx
c000b60e:	0f b6 0d 78 07 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020778
c000b615:	5b                   	pop    ebx
c000b616:	03 0d 7c 07 02 c0    	add    ecx,DWORD PTR ds:0xc002077c
c000b61c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b622:	89 cb                	mov    ebx,ecx
c000b624:	c1 fb 1f             	sar    ebx,0x1f
c000b627:	29 c8                	sub    eax,ecx
c000b629:	19 da                	sbb    edx,ebx
c000b62b:	31 c9                	xor    ecx,ecx
c000b62d:	80 3d 79 07 02 c0 00 	cmp    BYTE PTR ds:0xc0020779,0x0
c000b634:	74 05                	je     c000b63b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b636:	b9 08 07 00 00       	mov    ecx,0x708
c000b63b:	31 db                	xor    ebx,ebx
c000b63d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b641:	29 c8                	sub    eax,ecx
c000b643:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b647:	19 da                	sbb    edx,ebx
c000b649:	89 f8                	mov    eax,edi
c000b64b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b64f:	5b                   	pop    ebx
c000b650:	5e                   	pop    esi
c000b651:	5f                   	pop    edi
c000b652:	ff e0                	jmp    eax

c000b654 <secondsToDatetime(unsigned long long)>:
c000b654:	55                   	push   ebp
c000b655:	57                   	push   edi
c000b656:	56                   	push   esi
c000b657:	53                   	push   ebx
c000b658:	83 ec 1c             	sub    esp,0x1c
c000b65b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b65f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b663:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b667:	6a 00                	push   0x0
c000b669:	68 80 51 01 00       	push   0x15180
c000b66e:	55                   	push   ebp
c000b66f:	57                   	push   edi
c000b670:	e8 cb 07 01 00       	call   c001be40 <__udivdi3>
c000b675:	83 c4 10             	add    esp,0x10
c000b678:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b67e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b682:	6a 00                	push   0x0
c000b684:	68 80 51 01 00       	push   0x15180
c000b689:	55                   	push   ebp
c000b68a:	57                   	push   edi
c000b68b:	bf 10 0e 00 00       	mov    edi,0xe10
c000b690:	e8 ab 08 01 00       	call   c001bf40 <__umoddi3>
c000b695:	83 c4 10             	add    esp,0x10
c000b698:	99                   	cdq    
c000b699:	f7 ff                	idiv   edi
c000b69b:	bf 3c 00 00 00       	mov    edi,0x3c
c000b6a0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b6a3:	89 d0                	mov    eax,edx
c000b6a5:	99                   	cdq    
c000b6a6:	f7 ff                	idiv   edi
c000b6a8:	85 db                	test   ebx,ebx
c000b6aa:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b6ad:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b6b0:	79 11                	jns    c000b6c3 <secondsToDatetime(unsigned long long)+0x6f>
c000b6b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b6b6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b6bc:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b6c1:	eb 07                	jmp    c000b6ca <secondsToDatetime(unsigned long long)+0x76>
c000b6c3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b6c8:	89 d8                	mov    eax,ebx
c000b6ca:	bf b4 05 00 00       	mov    edi,0x5b4
c000b6cf:	99                   	cdq    
c000b6d0:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b6d5:	f7 f9                	idiv   ecx
c000b6d7:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b6dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6e0:	31 d2                	xor    edx,edx
c000b6e2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b6ea:	01 c3                	add    ebx,eax
c000b6ec:	89 d8                	mov    eax,ebx
c000b6ee:	f7 f1                	div    ecx
c000b6f0:	31 d2                	xor    edx,edx
c000b6f2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b6f5:	89 d8                	mov    eax,ebx
c000b6f7:	f7 f7                	div    edi
c000b6f9:	31 d2                	xor    edx,edx
c000b6fb:	29 c1                	sub    ecx,eax
c000b6fd:	89 d8                	mov    eax,ebx
c000b6ff:	f7 f5                	div    ebp
c000b701:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b706:	29 c1                	sub    ecx,eax
c000b708:	31 d2                	xor    edx,edx
c000b70a:	89 c8                	mov    eax,ecx
c000b70c:	f7 f5                	div    ebp
c000b70e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b713:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b717:	31 d2                	xor    edx,edx
c000b719:	89 c8                	mov    eax,ecx
c000b71b:	f7 f5                	div    ebp
c000b71d:	31 d2                	xor    edx,edx
c000b71f:	01 c3                	add    ebx,eax
c000b721:	89 c8                	mov    eax,ecx
c000b723:	f7 f7                	div    edi
c000b725:	bf 99 00 00 00       	mov    edi,0x99
c000b72a:	29 c3                	sub    ebx,eax
c000b72c:	31 d2                	xor    edx,edx
c000b72e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b736:	29 c3                	sub    ebx,eax
c000b738:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b73b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b73e:	bb 05 00 00 00       	mov    ebx,0x5
c000b743:	83 c1 02             	add    ecx,0x2
c000b746:	89 c8                	mov    eax,ecx
c000b748:	f7 f7                	div    edi
c000b74a:	31 d2                	xor    edx,edx
c000b74c:	89 c7                	mov    edi,eax
c000b74e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b754:	83 c0 02             	add    eax,0x2
c000b757:	f7 f3                	div    ebx
c000b759:	89 eb                	mov    ebx,ebp
c000b75b:	29 c3                	sub    ebx,eax
c000b75d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b763:	88 1e                	mov    BYTE PTR [esi],bl
c000b765:	19 c0                	sbb    eax,eax
c000b767:	31 d2                	xor    edx,edx
c000b769:	83 e0 0c             	and    eax,0xc
c000b76c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b770:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b778:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b77c:	83 f9 01             	cmp    ecx,0x1
c000b77f:	0f 96 c2             	setbe  dl
c000b782:	41                   	inc    ecx
c000b783:	01 d0                	add    eax,edx
c000b785:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b788:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b78c:	83 c4 1c             	add    esp,0x1c
c000b78f:	89 f0                	mov    eax,esi
c000b791:	5b                   	pop    ebx
c000b792:	5e                   	pop    esi
c000b793:	5f                   	pop    edi
c000b794:	5d                   	pop    ebp
c000b795:	c2 04 00             	ret    0x4

c000b798 <Clock::timeInDatetimeLocal()>:
c000b798:	53                   	push   ebx
c000b799:	83 ec 14             	sub    esp,0x14
c000b79c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b7a0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7a4:	e8 7d fc ff ff       	call   c000b426 <Clock::timeInSecondsLocal()>
c000b7a9:	83 c4 0c             	add    esp,0xc
c000b7ac:	52                   	push   edx
c000b7ad:	50                   	push   eax
c000b7ae:	53                   	push   ebx
c000b7af:	e8 a0 fe ff ff       	call   c000b654 <secondsToDatetime(unsigned long long)>
c000b7b4:	89 d8                	mov    eax,ebx
c000b7b6:	83 c4 14             	add    esp,0x14
c000b7b9:	5b                   	pop    ebx
c000b7ba:	c2 04 00             	ret    0x4
c000b7bd:	90                   	nop

c000b7be <Device::hibernate()>:
c000b7be:	c3                   	ret    
c000b7bf:	90                   	nop

c000b7c0 <Device::wake()>:
c000b7c0:	c3                   	ret    
c000b7c1:	90                   	nop

c000b7c2 <Device::detect()>:
c000b7c2:	c3                   	ret    
c000b7c3:	90                   	nop

c000b7c4 <Device::disableLegacy()>:
c000b7c4:	c3                   	ret    
c000b7c5:	90                   	nop

c000b7c6 <Device::powerSaving(PowerSavingLevel)>:
c000b7c6:	c3                   	ret    
c000b7c7:	90                   	nop

c000b7c8 <DriverlessDevice::close(int, int, void*)>:
c000b7c8:	31 c0                	xor    eax,eax
c000b7ca:	c3                   	ret    
c000b7cb:	90                   	nop

c000b7cc <DriverlessDevice::detect()>:
c000b7cc:	c3                   	ret    
c000b7cd:	90                   	nop

c000b7ce <DriverlessDevice::open(int, int, void*)>:
c000b7ce:	83 ec 18             	sub    esp,0x18
c000b7d1:	68 10 dc 01 c0       	push   0xc001dc10
c000b7d6:	e8 28 49 00 00       	call   c0010103 <KePanic(char const*)>
c000b7db:	83 c8 ff             	or     eax,0xffffffff
c000b7de:	83 c4 1c             	add    esp,0x1c
c000b7e1:	c3                   	ret    

c000b7e2 <Device::~Device()>:
c000b7e2:	ba 70 dc 01 c0       	mov    edx,0xc001dc70
c000b7e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7eb:	89 10                	mov    DWORD PTR [eax],edx
c000b7ed:	90                   	nop
c000b7ee:	c3                   	ret    
c000b7ef:	90                   	nop

c000b7f0 <Device::~Device()>:
c000b7f0:	83 ec 0c             	sub    esp,0xc
c000b7f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7f7:	e8 e6 ff ff ff       	call   c000b7e2 <Device::~Device()>
c000b7fc:	83 c4 04             	add    esp,0x4
c000b7ff:	83 ec 08             	sub    esp,0x8
c000b802:	68 58 01 00 00       	push   0x158
c000b807:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b80b:	e8 9a eb ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c000b810:	83 c4 10             	add    esp,0x10
c000b813:	83 c4 0c             	add    esp,0xc
c000b816:	c3                   	ret    
c000b817:	90                   	nop

c000b818 <Device::findAndLoadDriver()>:
c000b818:	c7 44 24 04 2e dc 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dc2e
c000b820:	e9 7b ec ff ff       	jmp    c000a4a0 <Dbg::kprintf(char const*, ...)>
c000b825:	90                   	nop

c000b826 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b826:	57                   	push   edi
c000b827:	b9 09 00 00 00       	mov    ecx,0x9
c000b82c:	56                   	push   esi
c000b82d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b831:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b835:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b83f:	81 c7 18 01 00 00    	add    edi,0x118
c000b845:	fc                   	cld    
c000b846:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b848:	5e                   	pop    esi
c000b849:	5f                   	pop    edi
c000b84a:	c3                   	ret    
c000b84b:	90                   	nop

c000b84c <Device::preOpenACPI(void*, char*, char*)>:
c000b84c:	57                   	push   edi
c000b84d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b852:	56                   	push   esi
c000b853:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b857:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b85b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b865:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b86b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b871:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b875:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b877:	b9 0e 00 00 00       	mov    ecx,0xe
c000b87c:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b882:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b886:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b888:	5e                   	pop    esi
c000b889:	5f                   	pop    edi
c000b88a:	c3                   	ret    
c000b88b:	90                   	nop

c000b88c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b88c:	53                   	push   ebx
c000b88d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b891:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b895:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b899:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b89d:	0f b6 c0             	movzx  eax,al
c000b8a0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b8a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b8ac:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b8b0:	5b                   	pop    ebx
c000b8b1:	e9 a6 05 00 00       	jmp    c000be5c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b8b6 <Device::getParent()>:
c000b8b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8ba:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b8c0:	c3                   	ret    
c000b8c1:	90                   	nop

c000b8c2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b8c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b8c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8ca:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b8cf:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b8d3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b8d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b8db:	e9 e8 06 00 00       	jmp    c000bfc8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b8e0 <Device::addChild(Device*)>:
c000b8e0:	53                   	push   ebx
c000b8e1:	83 ec 08             	sub    esp,0x8
c000b8e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8ec:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b8f2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b8f8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b8fa:	85 d2                	test   edx,edx
c000b8fc:	74 04                	je     c000b902 <Device::addChild(Device*)+0x22>
c000b8fe:	89 d3                	mov    ebx,edx
c000b900:	eb f6                	jmp    c000b8f8 <Device::addChild(Device*)+0x18>
c000b902:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b905:	83 ec 0c             	sub    esp,0xc
c000b908:	6a 08                	push   0x8
c000b90a:	e8 f6 be ff ff       	call   c0007805 <malloc>
c000b90f:	89 03                	mov    DWORD PTR [ebx],eax
c000b911:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b917:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b91e:	83 c4 18             	add    esp,0x18
c000b921:	5b                   	pop    ebx
c000b922:	c3                   	ret    
c000b923:	90                   	nop

c000b924 <Device::removeAllChildren()>:
c000b924:	56                   	push   esi
c000b925:	53                   	push   ebx
c000b926:	52                   	push   edx
c000b927:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b92b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b931:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b934:	74 17                	je     c000b94d <Device::removeAllChildren()+0x29>
c000b936:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b939:	85 c0                	test   eax,eax
c000b93b:	74 0c                	je     c000b949 <Device::removeAllChildren()+0x25>
c000b93d:	83 ec 0c             	sub    esp,0xc
c000b940:	8b 10                	mov    edx,DWORD PTR [eax]
c000b942:	50                   	push   eax
c000b943:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b946:	83 c4 10             	add    esp,0x10
c000b949:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b94b:	eb e4                	jmp    c000b931 <Device::removeAllChildren()+0xd>
c000b94d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b953:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b959:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b95f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b966:	58                   	pop    eax
c000b967:	5b                   	pop    ebx
c000b968:	5e                   	pop    esi
c000b969:	c3                   	ret    

c000b96a <Device::hibernateAll()>:
c000b96a:	53                   	push   ebx
c000b96b:	83 ec 14             	sub    esp,0x14
c000b96e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b972:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b974:	53                   	push   ebx
c000b975:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b978:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b97e:	83 c4 10             	add    esp,0x10
c000b981:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b984:	74 0f                	je     c000b995 <Device::hibernateAll()+0x2b>
c000b986:	83 ec 0c             	sub    esp,0xc
c000b989:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b98c:	e8 d9 ff ff ff       	call   c000b96a <Device::hibernateAll()>
c000b991:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b993:	eb e9                	jmp    c000b97e <Device::hibernateAll()+0x14>
c000b995:	83 c4 08             	add    esp,0x8
c000b998:	5b                   	pop    ebx
c000b999:	c3                   	ret    

c000b99a <Device::wakeAll()>:
c000b99a:	53                   	push   ebx
c000b99b:	83 ec 14             	sub    esp,0x14
c000b99e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9a4:	53                   	push   ebx
c000b9a5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000b9a8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9ae:	83 c4 10             	add    esp,0x10
c000b9b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9b4:	74 0f                	je     c000b9c5 <Device::wakeAll()+0x2b>
c000b9b6:	83 ec 0c             	sub    esp,0xc
c000b9b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9bc:	e8 d9 ff ff ff       	call   c000b99a <Device::wakeAll()>
c000b9c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9c3:	eb e9                	jmp    c000b9ae <Device::wakeAll()+0x14>
c000b9c5:	83 c4 08             	add    esp,0x8
c000b9c8:	5b                   	pop    ebx
c000b9c9:	c3                   	ret    

c000b9ca <Device::detectAll()>:
c000b9ca:	53                   	push   ebx
c000b9cb:	83 ec 14             	sub    esp,0x14
c000b9ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9d4:	53                   	push   ebx
c000b9d5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000b9d8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9de:	83 c4 10             	add    esp,0x10
c000b9e1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9e4:	74 0f                	je     c000b9f5 <Device::detectAll()+0x2b>
c000b9e6:	83 ec 0c             	sub    esp,0xc
c000b9e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9ec:	e8 d9 ff ff ff       	call   c000b9ca <Device::detectAll()>
c000b9f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9f3:	eb e9                	jmp    c000b9de <Device::detectAll()+0x14>
c000b9f5:	83 c4 08             	add    esp,0x8
c000b9f8:	5b                   	pop    ebx
c000b9f9:	c3                   	ret    

c000b9fa <Device::disableLegacyAll()>:
c000b9fa:	c3                   	ret    
c000b9fb:	90                   	nop

c000b9fc <Device::loadDriversForAll()>:
c000b9fc:	c3                   	ret    
c000b9fd:	90                   	nop

c000b9fe <Device::closeAll()>:
c000b9fe:	53                   	push   ebx
c000b9ff:	83 ec 08             	sub    esp,0x8
c000ba02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba06:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba08:	6a 00                	push   0x0
c000ba0a:	6a 00                	push   0x0
c000ba0c:	6a 00                	push   0x0
c000ba0e:	53                   	push   ebx
c000ba0f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba12:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba18:	83 c4 10             	add    esp,0x10
c000ba1b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba1e:	74 0f                	je     c000ba2f <Device::closeAll()+0x31>
c000ba20:	83 ec 0c             	sub    esp,0xc
c000ba23:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba26:	e8 d3 ff ff ff       	call   c000b9fe <Device::closeAll()>
c000ba2b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba2d:	eb e9                	jmp    c000ba18 <Device::closeAll()+0x1a>
c000ba2f:	83 c4 08             	add    esp,0x8
c000ba32:	5b                   	pop    ebx
c000ba33:	c3                   	ret    

c000ba34 <Device::powerSavingAll(PowerSavingLevel)>:
c000ba34:	56                   	push   esi
c000ba35:	53                   	push   ebx
c000ba36:	83 ec 0c             	sub    esp,0xc
c000ba39:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba3d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ba41:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba43:	56                   	push   esi
c000ba44:	53                   	push   ebx
c000ba45:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000ba48:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba4e:	83 c4 10             	add    esp,0x10
c000ba51:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba54:	74 0f                	je     c000ba65 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000ba56:	52                   	push   edx
c000ba57:	52                   	push   edx
c000ba58:	56                   	push   esi
c000ba59:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba5c:	e8 d3 ff ff ff       	call   c000ba34 <Device::powerSavingAll(PowerSavingLevel)>
c000ba61:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba63:	eb e9                	jmp    c000ba4e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000ba65:	58                   	pop    eax
c000ba66:	5b                   	pop    ebx
c000ba67:	5e                   	pop    esi
c000ba68:	c3                   	ret    
c000ba69:	90                   	nop

c000ba6a <Device::setName(char const*)>:
c000ba6a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000ba72:	e9 89 4b ff ff       	jmp    c0000600 <strcpy>
c000ba77:	90                   	nop

c000ba78 <Device::Device(char const*)>:
c000ba78:	83 ec 1c             	sub    esp,0x1c
c000ba7b:	ba 70 dc 01 c0       	mov    edx,0xc001dc70
c000ba80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba84:	89 10                	mov    DWORD PTR [eax],edx
c000ba86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba8a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000ba94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba98:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000baa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baa6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000babe:	83 ec 08             	sub    esp,0x8
c000bac1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bac5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bac9:	e8 9c ff ff ff       	call   c000ba6a <Device::setName(char const*)>
c000bace:	83 c4 10             	add    esp,0x10
c000bad1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bad9:	83 ec 0c             	sub    esp,0xc
c000badc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bae0:	e8 20 bd ff ff       	call   c0007805 <malloc>
c000bae5:	83 c4 10             	add    esp,0x10
c000bae8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000baee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000baf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000baf9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000baff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb03:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb09:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb13:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb19:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb24:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bb2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb2f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bb36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb3a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb48:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb56:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb64:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bb6e:	90                   	nop
c000bb6f:	83 c4 1c             	add    esp,0x1c
c000bb72:	c3                   	ret    
c000bb73:	90                   	nop

c000bb74 <Device::getName()>:
c000bb74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb78:	05 d0 00 00 00       	add    eax,0xd0
c000bb7d:	c3                   	ret    

c000bb7e <DriverlessDevice::DriverlessDevice(char const*)>:
c000bb7e:	83 ec 0c             	sub    esp,0xc
c000bb81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb85:	83 ec 08             	sub    esp,0x8
c000bb88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb8c:	50                   	push   eax
c000bb8d:	e8 e6 fe ff ff       	call   c000ba78 <Device::Device(char const*)>
c000bb92:	83 c4 10             	add    esp,0x10
c000bb95:	ba 9c dc 01 c0       	mov    edx,0xc001dc9c
c000bb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb9e:	89 10                	mov    DWORD PTR [eax],edx
c000bba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bba4:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bbae:	90                   	nop
c000bbaf:	83 c4 0c             	add    esp,0xc
c000bbb2:	c3                   	ret    
c000bbb3:	90                   	nop

c000bbb4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bbb4:	57                   	push   edi
c000bbb5:	56                   	push   esi
c000bbb6:	53                   	push   ebx
c000bbb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbbb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbbf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bbc3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bbc9:	75 0c                	jne    c000bbd7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bbcb:	52                   	push   edx
c000bbcc:	52                   	push   edx
c000bbcd:	53                   	push   ebx
c000bbce:	56                   	push   esi
c000bbcf:	e8 1e 07 01 00       	call   c001c2f2 <LinkedList<Device>::addElement(Device*)>
c000bbd4:	83 c4 10             	add    esp,0x10
c000bbd7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbdd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbe0:	74 12                	je     c000bbf4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bbe2:	50                   	push   eax
c000bbe3:	57                   	push   edi
c000bbe4:	56                   	push   esi
c000bbe5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbe8:	e8 c7 ff ff ff       	call   c000bbb4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bbed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbef:	83 c4 10             	add    esp,0x10
c000bbf2:	eb e9                	jmp    c000bbdd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bbf4:	5b                   	pop    ebx
c000bbf5:	5e                   	pop    esi
c000bbf6:	5f                   	pop    edi
c000bbf7:	c3                   	ret    

c000bbf8 <getDevicesOfType(DeviceType)>:
c000bbf8:	53                   	push   ebx
c000bbf9:	83 ec 14             	sub    esp,0x14
c000bbfc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc00:	53                   	push   ebx
c000bc01:	e8 c8 07 01 00       	call   c001c3ce <LinkedList<Device>::LinkedList()>
c000bc06:	83 c4 0c             	add    esp,0xc
c000bc09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc0d:	53                   	push   ebx
c000bc0e:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c000bc14:	e8 9b ff ff ff       	call   c000bbb4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc19:	89 d8                	mov    eax,ebx
c000bc1b:	83 c4 18             	add    esp,0x18
c000bc1e:	5b                   	pop    ebx
c000bc1f:	c2 04 00             	ret    0x4
c000bc22:	66 90                	xchg   ax,ax

c000bc24 <HardDiskController::HardDiskController(char const*)>:
c000bc24:	83 ec 0c             	sub    esp,0xc
c000bc27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc2b:	83 ec 08             	sub    esp,0x8
c000bc2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc32:	50                   	push   eax
c000bc33:	e8 40 fe ff ff       	call   c000ba78 <Device::Device(char const*)>
c000bc38:	83 c4 10             	add    esp,0x10
c000bc3b:	ba c8 dc 01 c0       	mov    edx,0xc001dcc8
c000bc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc44:	89 10                	mov    DWORD PTR [eax],edx
c000bc46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc4a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bc54:	90                   	nop
c000bc55:	83 c4 0c             	add    esp,0xc
c000bc58:	c3                   	ret    
c000bc59:	90                   	nop
c000bc5a:	66 90                	xchg   ax,ax

c000bc5c <HardDiskController::~HardDiskController()>:
c000bc5c:	83 ec 0c             	sub    esp,0xc
c000bc5f:	ba c8 dc 01 c0       	mov    edx,0xc001dcc8
c000bc64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc68:	89 10                	mov    DWORD PTR [eax],edx
c000bc6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc6e:	83 ec 0c             	sub    esp,0xc
c000bc71:	50                   	push   eax
c000bc72:	e8 6b fb ff ff       	call   c000b7e2 <Device::~Device()>
c000bc77:	83 c4 10             	add    esp,0x10
c000bc7a:	90                   	nop
c000bc7b:	83 c4 0c             	add    esp,0xc
c000bc7e:	c3                   	ret    
c000bc7f:	90                   	nop

c000bc80 <HardDiskController::~HardDiskController()>:
c000bc80:	83 ec 0c             	sub    esp,0xc
c000bc83:	83 ec 0c             	sub    esp,0xc
c000bc86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc8a:	e8 cd ff ff ff       	call   c000bc5c <HardDiskController::~HardDiskController()>
c000bc8f:	83 c4 10             	add    esp,0x10
c000bc92:	83 ec 08             	sub    esp,0x8
c000bc95:	68 58 01 00 00       	push   0x158
c000bc9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc9e:	e8 07 e7 ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c000bca3:	83 c4 10             	add    esp,0x10
c000bca6:	83 c4 0c             	add    esp,0xc
c000bca9:	c3                   	ret    

c000bcaa <PhysicalDisk::eject()>:
c000bcaa:	83 c8 ff             	or     eax,0xffffffff
c000bcad:	c3                   	ret    

c000bcae <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bcae:	83 ec 0c             	sub    esp,0xc
c000bcb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb5:	83 ec 08             	sub    esp,0x8
c000bcb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcbc:	50                   	push   eax
c000bcbd:	e8 b6 fd ff ff       	call   c000ba78 <Device::Device(char const*)>
c000bcc2:	83 c4 10             	add    esp,0x10
c000bcc5:	ba f4 dc 01 c0       	mov    edx,0xc001dcf4
c000bcca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcce:	89 10                	mov    DWORD PTR [eax],edx
c000bcd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bcdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcdf:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcea:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bcfc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd06:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bd10:	90                   	nop
c000bd11:	83 c4 0c             	add    esp,0xc
c000bd14:	c3                   	ret    
c000bd15:	90                   	nop

c000bd16 <PhysicalDisk::startCache()>:
c000bd16:	56                   	push   esi
c000bd17:	53                   	push   ebx
c000bd18:	83 ec 10             	sub    esp,0x10
c000bd1b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd1f:	6a 44                	push   0x44
c000bd21:	e8 df ba ff ff       	call   c0007805 <malloc>
c000bd26:	89 c6                	mov    esi,eax
c000bd28:	58                   	pop    eax
c000bd29:	5a                   	pop    edx
c000bd2a:	53                   	push   ebx
c000bd2b:	56                   	push   esi
c000bd2c:	e8 ab 15 00 00       	call   c000d2dc <VCache::VCache(PhysicalDisk*)>
c000bd31:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bd37:	83 c4 14             	add    esp,0x14
c000bd3a:	5b                   	pop    ebx
c000bd3b:	5e                   	pop    esi
c000bd3c:	c3                   	ret    
c000bd3d:	90                   	nop

c000bd3e <PhysicalDisk::~PhysicalDisk()>:
c000bd3e:	83 ec 0c             	sub    esp,0xc
c000bd41:	ba f4 dc 01 c0       	mov    edx,0xc001dcf4
c000bd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd4a:	89 10                	mov    DWORD PTR [eax],edx
c000bd4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd50:	83 ec 0c             	sub    esp,0xc
c000bd53:	50                   	push   eax
c000bd54:	e8 89 fa ff ff       	call   c000b7e2 <Device::~Device()>
c000bd59:	83 c4 10             	add    esp,0x10
c000bd5c:	90                   	nop
c000bd5d:	83 c4 0c             	add    esp,0xc
c000bd60:	c3                   	ret    
c000bd61:	90                   	nop

c000bd62 <PhysicalDisk::~PhysicalDisk()>:
c000bd62:	83 ec 0c             	sub    esp,0xc
c000bd65:	83 ec 0c             	sub    esp,0xc
c000bd68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd6c:	e8 cd ff ff ff       	call   c000bd3e <PhysicalDisk::~PhysicalDisk()>
c000bd71:	83 c4 10             	add    esp,0x10
c000bd74:	83 ec 08             	sub    esp,0x8
c000bd77:	68 6c 01 00 00       	push   0x16c
c000bd7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd80:	e8 25 e6 ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c000bd85:	83 c4 10             	add    esp,0x10
c000bd88:	83 c4 0c             	add    esp,0xc
c000bd8b:	c3                   	ret    

c000bd8c <int_handler>:
c000bd8c:	55                   	push   ebp
c000bd8d:	57                   	push   edi
c000bd8e:	56                   	push   esi
c000bd8f:	53                   	push   ebx
c000bd90:	83 ec 0c             	sub    esp,0xc
c000bd93:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bd97:	80 3d f8 30 02 c0 00 	cmp    BYTE PTR ds:0xc00230f8,0x0
c000bd9e:	74 0b                	je     c000bdab <int_handler+0x1f>
c000bda0:	fa                   	cli    
c000bda1:	f4                   	hlt    
c000bda2:	80 3d f8 30 02 c0 00 	cmp    BYTE PTR ds:0xc00230f8,0x0
c000bda9:	75 f5                	jne    c000bda0 <int_handler+0x14>
c000bdab:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bdae:	8d 46 e0             	lea    eax,[esi-0x20]
c000bdb1:	83 f8 17             	cmp    eax,0x17
c000bdb4:	76 3e                	jbe    c000bdf4 <int_handler+0x68>
c000bdb6:	c1 e6 04             	shl    esi,0x4
c000bdb9:	31 db                	xor    ebx,ebx
c000bdbb:	8d ae 80 17 02 c0    	lea    ebp,[esi-0x3ffde880]
c000bdc1:	81 c6 80 07 02 c0    	add    esi,0xc0020780
c000bdc7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bdcb:	85 c0                	test   eax,eax
c000bdcd:	74 13                	je     c000bde2 <int_handler+0x56>
c000bdcf:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bdd2:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bdd6:	74 2a                	je     c000be02 <int_handler+0x76>
c000bdd8:	83 ec 08             	sub    esp,0x8
c000bddb:	52                   	push   edx
c000bddc:	57                   	push   edi
c000bddd:	ff d0                	call   eax
c000bddf:	83 c4 10             	add    esp,0x10
c000bde2:	43                   	inc    ebx
c000bde3:	83 fb 04             	cmp    ebx,0x4
c000bde6:	75 df                	jne    c000bdc7 <int_handler+0x3b>
c000bde8:	83 c4 0c             	add    esp,0xc
c000bdeb:	31 c0                	xor    eax,eax
c000bded:	5b                   	pop    ebx
c000bdee:	31 d2                	xor    edx,edx
c000bdf0:	5e                   	pop    esi
c000bdf1:	5f                   	pop    edi
c000bdf2:	5d                   	pop    ebp
c000bdf3:	c3                   	ret    
c000bdf4:	83 ec 0c             	sub    esp,0xc
c000bdf7:	50                   	push   eax
c000bdf8:	e8 e2 97 00 00       	call   c00155df <HalEndOfInterrupt(int)>
c000bdfd:	83 c4 10             	add    esp,0x10
c000be00:	eb b4                	jmp    c000bdb6 <int_handler+0x2a>
c000be02:	83 ec 08             	sub    esp,0x8
c000be05:	52                   	push   edx
c000be06:	57                   	push   edi
c000be07:	ff d0                	call   eax
c000be09:	83 c4 10             	add    esp,0x10
c000be0c:	83 c4 0c             	add    esp,0xc
c000be0f:	5b                   	pop    ebx
c000be10:	5e                   	pop    esi
c000be11:	5f                   	pop    edi
c000be12:	5d                   	pop    ebp
c000be13:	c3                   	ret    

c000be14 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000be14:	56                   	push   esi
c000be15:	31 c0                	xor    eax,eax
c000be17:	53                   	push   ebx
c000be18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000be1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be20:	89 ca                	mov    edx,ecx
c000be22:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be26:	c1 e2 04             	shl    edx,0x4
c000be29:	83 bc 82 80 17 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde880],0x0
c000be31:	74 15                	je     c000be48 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000be33:	40                   	inc    eax
c000be34:	83 f8 04             	cmp    eax,0x4
c000be37:	75 f0                	jne    c000be29 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000be39:	c7 44 24 0c 24 dd 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dd24
c000be41:	5b                   	pop    ebx
c000be42:	5e                   	pop    esi
c000be43:	e9 bb 42 00 00       	jmp    c0010103 <KePanic(char const*)>
c000be48:	8d 04 88             	lea    eax,[eax+ecx*4]
c000be4b:	89 1c 85 80 17 02 c0 	mov    DWORD PTR [eax*4-0x3ffde880],ebx
c000be52:	89 34 85 80 07 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf880],esi
c000be59:	5b                   	pop    ebx
c000be5a:	5e                   	pop    esi
c000be5b:	c3                   	ret    

c000be5c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000be5c:	57                   	push   edi
c000be5d:	8b 15 78 06 02 c0    	mov    edx,DWORD PTR ds:0xc0020678
c000be63:	56                   	push   esi
c000be64:	53                   	push   ebx
c000be65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be6d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000be74:	74 5b                	je     c000bed1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000be76:	89 c7                	mov    edi,eax
c000be78:	84 c0                	test   al,al
c000be7a:	74 24                	je     c000bea0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000be7c:	83 fe 0f             	cmp    esi,0xf
c000be7f:	0f 8f d9 00 00 00    	jg     c000bf5e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000be85:	8a 86 80 f4 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0b80]
c000be8b:	25 ff 00 00 00       	and    eax,0xff
c000be90:	66 8b bc 00 20 2f 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdd0e0]
c000be98:	89 c6                	mov    esi,eax
c000be9a:	66 d1 ef             	shr    di,1
c000be9d:	83 e7 01             	and    edi,0x1
c000bea0:	83 ec 08             	sub    esp,0x8
c000bea3:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c000bea8:	31 db                	xor    ebx,ebx
c000beaa:	50                   	push   eax
c000beab:	68 31 dd 01 c0       	push   0xc001dd31
c000beb0:	e8 eb e5 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c000beb5:	83 c4 10             	add    esp,0x10
c000beb8:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c000bebd:	85 c0                	test   eax,eax
c000bebf:	7f 51                	jg     c000bf12 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bec1:	83 ec 0c             	sub    esp,0xc
c000bec4:	68 48 dd 01 c0       	push   0xc001dd48
c000bec9:	e8 35 42 00 00       	call   c0010103 <KePanic(char const*)>
c000bece:	83 c4 10             	add    esp,0x10
c000bed1:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bed4:	31 d2                	xor    edx,edx
c000bed6:	89 c8                	mov    eax,ecx
c000bed8:	c1 e0 04             	shl    eax,0x4
c000bedb:	8b 9c 90 80 17 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde880]
c000bee2:	85 db                	test   ebx,ebx
c000bee4:	0f 84 8b 00 00 00    	je     c000bf75 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000beea:	42                   	inc    edx
c000beeb:	83 fa 04             	cmp    edx,0x4
c000beee:	75 eb                	jne    c000bedb <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bef0:	83 ec 0c             	sub    esp,0xc
c000bef3:	68 9c dd 01 c0       	push   0xc001dd9c
c000bef8:	e8 06 42 00 00       	call   c0010103 <KePanic(char const*)>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf05:	5b                   	pop    ebx
c000bf06:	5e                   	pop    esi
c000bf07:	5f                   	pop    edi
c000bf08:	c3                   	ret    
c000bf09:	43                   	inc    ebx
c000bf0a:	39 1d 20 45 02 c0    	cmp    DWORD PTR ds:0xc0024520,ebx
c000bf10:	7e af                	jle    c000bec1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bf12:	83 ec 08             	sub    esp,0x8
c000bf15:	8b 04 9d 40 45 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbac0]
c000bf1c:	56                   	push   esi
c000bf1d:	50                   	push   eax
c000bf1e:	e8 f7 f3 00 00       	call   c001b31a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bf23:	83 c4 10             	add    esp,0x10
c000bf26:	84 c0                	test   al,al
c000bf28:	74 df                	je     c000bf09 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bf2a:	81 e7 ff 00 00 00    	and    edi,0xff
c000bf30:	50                   	push   eax
c000bf31:	8d 46 20             	lea    eax,[esi+0x20]
c000bf34:	57                   	push   edi
c000bf35:	25 ff 00 00 00       	and    eax,0xff
c000bf3a:	6a 00                	push   0x0
c000bf3c:	50                   	push   eax
c000bf3d:	89 f0                	mov    eax,esi
c000bf3f:	6a 00                	push   0x0
c000bf41:	25 ff 00 00 00       	and    eax,0xff
c000bf46:	6a 00                	push   0x0
c000bf48:	50                   	push   eax
c000bf49:	8b 04 9d 40 45 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbac0]
c000bf50:	50                   	push   eax
c000bf51:	e8 3e f5 00 00       	call   c001b494 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bf56:	83 c4 20             	add    esp,0x20
c000bf59:	e9 73 ff ff ff       	jmp    c000bed1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf5e:	83 ec 0c             	sub    esp,0xc
c000bf61:	31 ff                	xor    edi,edi
c000bf63:	68 64 dd 01 c0       	push   0xc001dd64
c000bf68:	e8 96 41 00 00       	call   c0010103 <KePanic(char const*)>
c000bf6d:	83 c4 10             	add    esp,0x10
c000bf70:	e9 2b ff ff ff       	jmp    c000bea0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bf75:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bf78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bf7c:	89 14 85 80 17 02 c0 	mov    DWORD PTR [eax*4-0x3ffde880],edx
c000bf83:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf87:	5b                   	pop    ebx
c000bf88:	89 14 85 80 07 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf880],edx
c000bf8f:	89 f0                	mov    eax,esi
c000bf91:	5e                   	pop    esi
c000bf92:	5f                   	pop    edi
c000bf93:	c3                   	ret    

c000bf94 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000bf94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf98:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bf9c:	c1 e0 04             	shl    eax,0x4
c000bf9f:	8d 50 10             	lea    edx,[eax+0x10]
c000bfa2:	39 88 80 17 02 c0    	cmp    DWORD PTR [eax-0x3ffde880],ecx
c000bfa8:	74 08                	je     c000bfb2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000bfaa:	83 c0 04             	add    eax,0x4
c000bfad:	39 d0                	cmp    eax,edx
c000bfaf:	75 f1                	jne    c000bfa2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000bfb1:	c3                   	ret    
c000bfb2:	c7 80 80 17 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde880],0x0
c000bfbc:	c7 80 80 07 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf880],0x0
c000bfc6:	eb e2                	jmp    c000bfaa <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000bfc8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bfc8:	53                   	push   ebx
c000bfc9:	83 ec 08             	sub    esp,0x8
c000bfcc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bfd0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000bfd5:	74 0e                	je     c000bfe5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000bfd7:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c000bfdc:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000bfe3:	75 37                	jne    c000c01c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000bfe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfe9:	83 c0 20             	add    eax,0x20
c000bfec:	c1 e0 04             	shl    eax,0x4
c000bfef:	8d 50 10             	lea    edx,[eax+0x10]
c000bff2:	39 98 80 17 02 c0    	cmp    DWORD PTR [eax-0x3ffde880],ebx
c000bff8:	74 0c                	je     c000c006 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000bffa:	83 c0 04             	add    eax,0x4
c000bffd:	39 d0                	cmp    eax,edx
c000bfff:	75 f1                	jne    c000bff2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c001:	83 c4 08             	add    esp,0x8
c000c004:	5b                   	pop    ebx
c000c005:	c3                   	ret    
c000c006:	c7 80 80 17 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde880],0x0
c000c010:	c7 80 80 07 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf880],0x0
c000c01a:	eb de                	jmp    c000bffa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c01c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c021:	7f 12                	jg     c000c035 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c023:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c027:	31 c0                	xor    eax,eax
c000c029:	8a 81 80 f4 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0b80]
c000c02f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c033:	eb b0                	jmp    c000bfe5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c035:	83 ec 0c             	sub    esp,0xc
c000c038:	68 55 dd 01 c0       	push   0xc001dd55
c000c03d:	e8 c1 40 00 00       	call   c0010103 <KePanic(char const*)>
c000c042:	83 c4 10             	add    esp,0x10
c000c045:	eb 9e                	jmp    c000bfe5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c047 <setupINTS()>:
c000c047:	31 c0                	xor    eax,eax
c000c049:	c7 80 80 17 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde880],0x0
c000c053:	c7 80 80 07 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf880],0x0
c000c05d:	c7 80 84 17 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde87c],0x0
c000c067:	c7 80 84 07 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf87c],0x0
c000c071:	c7 80 88 17 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde878],0x0
c000c07b:	c7 80 88 07 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf878],0x0
c000c085:	c7 80 8c 17 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde874],0x0
c000c08f:	c7 80 8c 07 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf874],0x0
c000c099:	83 c0 10             	add    eax,0x10
c000c09c:	3d 00 10 00 00       	cmp    eax,0x1000
c000c0a1:	75 a6                	jne    c000c049 <setupINTS()+0x2>
c000c0a3:	c3                   	ret    

c000c0a4 <convertLegacyIRQNumber(int)>:
c000c0a4:	83 ec 0c             	sub    esp,0xc
c000c0a7:	8b 15 78 06 02 c0    	mov    edx,DWORD PTR ds:0xc0020678
c000c0ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c0b8:	74 0f                	je     c000c0c9 <convertLegacyIRQNumber(int)+0x25>
c000c0ba:	83 f8 0f             	cmp    eax,0xf
c000c0bd:	7f 0e                	jg     c000c0cd <convertLegacyIRQNumber(int)+0x29>
c000c0bf:	31 c9                	xor    ecx,ecx
c000c0c1:	8a 88 80 f4 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0b80]
c000c0c7:	89 c8                	mov    eax,ecx
c000c0c9:	83 c4 0c             	add    esp,0xc
c000c0cc:	c3                   	ret    
c000c0cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0d1:	83 ec 0c             	sub    esp,0xc
c000c0d4:	68 64 dd 01 c0       	push   0xc001dd64
c000c0d9:	e8 25 40 00 00       	call   c0010103 <KePanic(char const*)>
c000c0de:	83 c4 10             	add    esp,0x10
c000c0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e5:	83 c4 0c             	add    esp,0xc
c000c0e8:	c3                   	ret    
c000c0e9:	90                   	nop

c000c0ea <startGUI(void*)>:
c000c0ea:	55                   	push   ebp
c000c0eb:	89 e5                	mov    ebp,esp
c000c0ed:	53                   	push   ebx
c000c0ee:	83 ec 04             	sub    esp,0x4
c000c0f1:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c000c0f6:	48                   	dec    eax
c000c0f7:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c000c0fc:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c000c101:	85 c0                	test   eax,eax
c000c103:	75 01                	jne    c000c106 <startGUI(void*)+0x1c>
c000c105:	fb                   	sti    
c000c106:	8b 1d 78 06 02 c0    	mov    ebx,DWORD PTR ds:0xc0020678
c000c10c:	83 ec 08             	sub    esp,0x8
c000c10f:	6a 01                	push   0x1
c000c111:	68 c1 dd 01 c0       	push   0xc001ddc1
c000c116:	e8 e2 69 00 00       	call   c0012afd <Thr::loadDLL(char const*, bool)>
c000c11b:	83 c4 10             	add    esp,0x10
c000c11e:	83 ec 08             	sub    esp,0x8
c000c121:	53                   	push   ebx
c000c122:	50                   	push   eax
c000c123:	e8 06 6c 00 00       	call   c0012d2e <Thr::executeDLL(unsigned long, void*)>
c000c128:	83 c4 10             	add    esp,0x10
c000c12b:	8b 1d 78 06 02 c0    	mov    ebx,DWORD PTR ds:0xc0020678
c000c131:	83 ec 08             	sub    esp,0x8
c000c134:	6a 01                	push   0x1
c000c136:	68 db dd 01 c0       	push   0xc001dddb
c000c13b:	e8 bd 69 00 00       	call   c0012afd <Thr::loadDLL(char const*, bool)>
c000c140:	83 c4 10             	add    esp,0x10
c000c143:	83 ec 08             	sub    esp,0x8
c000c146:	53                   	push   ebx
c000c147:	50                   	push   eax
c000c148:	e8 e1 6b 00 00       	call   c0012d2e <Thr::executeDLL(unsigned long, void*)>
c000c14d:	83 c4 10             	add    esp,0x10
c000c150:	90                   	nop
c000c151:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c154:	c9                   	leave  
c000c155:	c3                   	ret    

c000c156 <startGUIVESA(void*)>:
c000c156:	55                   	push   ebp
c000c157:	89 e5                	mov    ebp,esp
c000c159:	53                   	push   ebx
c000c15a:	83 ec 04             	sub    esp,0x4
c000c15d:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c000c162:	48                   	dec    eax
c000c163:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c000c168:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c000c16d:	85 c0                	test   eax,eax
c000c16f:	75 01                	jne    c000c172 <startGUIVESA(void*)+0x1c>
c000c171:	fb                   	sti    
c000c172:	8b 1d 78 06 02 c0    	mov    ebx,DWORD PTR ds:0xc0020678
c000c178:	83 ec 08             	sub    esp,0x8
c000c17b:	6a 01                	push   0x1
c000c17d:	68 f9 dd 01 c0       	push   0xc001ddf9
c000c182:	e8 76 69 00 00       	call   c0012afd <Thr::loadDLL(char const*, bool)>
c000c187:	83 c4 10             	add    esp,0x10
c000c18a:	83 ec 08             	sub    esp,0x8
c000c18d:	53                   	push   ebx
c000c18e:	50                   	push   eax
c000c18f:	e8 9a 6b 00 00       	call   c0012d2e <Thr::executeDLL(unsigned long, void*)>
c000c194:	83 c4 10             	add    esp,0x10
c000c197:	8b 1d 78 06 02 c0    	mov    ebx,DWORD PTR ds:0xc0020678
c000c19d:	83 ec 08             	sub    esp,0x8
c000c1a0:	6a 01                	push   0x1
c000c1a2:	68 db dd 01 c0       	push   0xc001dddb
c000c1a7:	e8 51 69 00 00       	call   c0012afd <Thr::loadDLL(char const*, bool)>
c000c1ac:	83 c4 10             	add    esp,0x10
c000c1af:	83 ec 08             	sub    esp,0x8
c000c1b2:	53                   	push   ebx
c000c1b3:	50                   	push   eax
c000c1b4:	e8 75 6b 00 00       	call   c0012d2e <Thr::executeDLL(unsigned long, void*)>
c000c1b9:	83 c4 10             	add    esp,0x10
c000c1bc:	90                   	nop
c000c1bd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c1c0:	c9                   	leave  
c000c1c1:	c3                   	ret    

c000c1c2 <sendKeyToTerminal(unsigned char)>:
c000c1c2:	55                   	push   ebp
c000c1c3:	89 e5                	mov    ebp,esp
c000c1c5:	83 ec 28             	sub    esp,0x28
c000c1c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c1cb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c1ce:	8b 15 c4 06 02 c0    	mov    edx,DWORD PTR ds:0xc00206c4
c000c1d4:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c1d7:	25 ff 00 00 00       	and    eax,0xff
c000c1dc:	83 ec 08             	sub    esp,0x8
c000c1df:	50                   	push   eax
c000c1e0:	52                   	push   edx
c000c1e1:	e8 ac c8 ff ff       	call   c0008a92 <VgaText::receiveKey(unsigned char)>
c000c1e6:	83 c4 10             	add    esp,0x10
c000c1e9:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c1ed:	0f 85 8f 00 00 00    	jne    c000c282 <sendKeyToTerminal(unsigned char)+0xc0>
c000c1f3:	fa                   	cli    
c000c1f4:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c000c1f9:	40                   	inc    eax
c000c1fa:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c000c1ff:	a1 24 3b 02 c0       	mov    eax,ds:0xc0023b24
c000c204:	40                   	inc    eax
c000c205:	a3 24 3b 02 c0       	mov    ds:0xc0023b24,eax
c000c20a:	a1 80 27 02 c0       	mov    eax,ds:0xc0022780
c000c20f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c212:	c7 05 80 27 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022780,0x0
c000c21c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c220:	74 1f                	je     c000c241 <sendKeyToTerminal(unsigned char)+0x7f>
c000c222:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c225:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c228:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c22b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c22e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c231:	83 ec 0c             	sub    esp,0xc
c000c234:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c237:	e8 78 77 00 00       	call   c00139b4 <unblockTask(ThreadControlBlock*)>
c000c23c:	83 c4 10             	add    esp,0x10
c000c23f:	eb db                	jmp    c000c21c <sendKeyToTerminal(unsigned char)+0x5a>
c000c241:	a1 24 3b 02 c0       	mov    eax,ds:0xc0023b24
c000c246:	48                   	dec    eax
c000c247:	a3 24 3b 02 c0       	mov    ds:0xc0023b24,eax
c000c24c:	a1 24 3b 02 c0       	mov    eax,ds:0xc0023b24
c000c251:	85 c0                	test   eax,eax
c000c253:	75 18                	jne    c000c26d <sendKeyToTerminal(unsigned char)+0xab>
c000c255:	a1 20 3b 02 c0       	mov    eax,ds:0xc0023b20
c000c25a:	85 c0                	test   eax,eax
c000c25c:	74 0f                	je     c000c26d <sendKeyToTerminal(unsigned char)+0xab>
c000c25e:	c7 05 20 3b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023b20,0x0
c000c268:	e8 83 72 00 00       	call   c00134f0 <schedule()>
c000c26d:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c000c272:	48                   	dec    eax
c000c273:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c000c278:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c000c27d:	85 c0                	test   eax,eax
c000c27f:	75 01                	jne    c000c282 <sendKeyToTerminal(unsigned char)+0xc0>
c000c281:	fb                   	sti    
c000c282:	90                   	nop
c000c283:	c9                   	leave  
c000c284:	c3                   	ret    

c000c285 <sendKeyboardToken(KeyboardToken)>:
c000c285:	55                   	push   ebp
c000c286:	89 e5                	mov    ebp,esp
c000c288:	83 ec 18             	sub    esp,0x18
c000c28b:	e8 c3 3e 00 00       	call   c0010153 <Krnl::userIOReceived()>
c000c290:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c296:	25 ff ff 00 00       	and    eax,0xffff
c000c29b:	83 f2 01             	xor    edx,0x1
c000c29e:	88 90 a0 27 02 c0    	mov    BYTE PTR [eax-0x3ffdd860],dl
c000c2a4:	a1 88 27 02 c0       	mov    eax,ds:0xc0022788
c000c2a9:	85 c0                	test   eax,eax
c000c2ab:	74 24                	je     c000c2d1 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c2ad:	8b 0d 88 27 02 c0    	mov    ecx,DWORD PTR ds:0xc0022788
c000c2b3:	83 ec 04             	sub    esp,0x4
c000c2b6:	68 a0 27 02 c0       	push   0xc00227a0
c000c2bb:	83 ec 08             	sub    esp,0x8
c000c2be:	89 e2                	mov    edx,esp
c000c2c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2c3:	89 02                	mov    DWORD PTR [edx],eax
c000c2c5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c2c8:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c2cc:	ff d1                	call   ecx
c000c2ce:	83 c4 10             	add    esp,0x10
c000c2d1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c2d5:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c2d8:	a0 a8 2b 02 c0       	mov    al,ds:0xc0022ba8
c000c2dd:	38 c2                	cmp    dl,al
c000c2df:	74 1e                	je     c000c2ff <sendKeyboardToken(KeyboardToken)+0x7a>
c000c2e1:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c2e4:	a2 a8 2b 02 c0       	mov    ds:0xc0022ba8,al
c000c2e9:	a0 a8 2b 02 c0       	mov    al,ds:0xc0022ba8
c000c2ee:	25 ff 00 00 00       	and    eax,0xff
c000c2f3:	83 ec 0c             	sub    esp,0xc
c000c2f6:	50                   	push   eax
c000c2f7:	e8 e8 be ff ff       	call   c00081e4 <setTerminalScrollLock(bool)>
c000c2fc:	83 c4 10             	add    esp,0x10
c000c2ff:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c302:	84 c0                	test   al,al
c000c304:	0f 84 ae 00 00 00    	je     c000c3b8 <sendKeyboardToken(KeyboardToken)+0x133>
c000c30a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c30d:	66 3d 10 03          	cmp    ax,0x310
c000c311:	75 06                	jne    c000c319 <sendKeyboardToken(KeyboardToken)+0x94>
c000c313:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c319:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c31c:	66 3d 11 03          	cmp    ax,0x311
c000c320:	75 06                	jne    c000c328 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c322:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c328:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c32b:	66 3d 12 03          	cmp    ax,0x312
c000c32f:	75 06                	jne    c000c337 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c331:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c33a:	66 3d 13 03          	cmp    ax,0x313
c000c33e:	75 06                	jne    c000c346 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c340:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c349:	66 3d 14 03          	cmp    ax,0x314
c000c34d:	75 06                	jne    c000c355 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c34f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c358:	66 3d 15 03          	cmp    ax,0x315
c000c35c:	75 06                	jne    c000c364 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c35e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c367:	66 3d 16 03          	cmp    ax,0x316
c000c36b:	75 06                	jne    c000c373 <sendKeyboardToken(KeyboardToken)+0xee>
c000c36d:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c376:	66 3d 17 03          	cmp    ax,0x317
c000c37a:	75 06                	jne    c000c382 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c37c:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c385:	66 3d 18 03          	cmp    ax,0x318
c000c389:	75 06                	jne    c000c391 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c38b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c394:	66 3d 19 03          	cmp    ax,0x319
c000c398:	75 06                	jne    c000c3a0 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c39a:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c3a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3a3:	66 3d 1a 03          	cmp    ax,0x31a
c000c3a7:	0f 85 c9 00 00 00    	jne    c000c476 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3ad:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c3b3:	e9 be 00 00 00       	jmp    c000c476 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3bb:	66 3d 10 03          	cmp    ax,0x310
c000c3bf:	75 0a                	jne    c000c3cb <sendKeyboardToken(KeyboardToken)+0x146>
c000c3c1:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c3c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ce:	66 3d 11 03          	cmp    ax,0x311
c000c3d2:	75 0a                	jne    c000c3de <sendKeyboardToken(KeyboardToken)+0x159>
c000c3d4:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c3da:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3e1:	66 3d 12 03          	cmp    ax,0x312
c000c3e5:	75 0a                	jne    c000c3f1 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c3e7:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c3ed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f4:	66 3d 13 03          	cmp    ax,0x313
c000c3f8:	75 0a                	jne    c000c404 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c3fa:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c400:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c407:	66 3d 14 03          	cmp    ax,0x314
c000c40b:	75 0a                	jne    c000c417 <sendKeyboardToken(KeyboardToken)+0x192>
c000c40d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c413:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c417:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c41a:	66 3d 15 03          	cmp    ax,0x315
c000c41e:	75 0a                	jne    c000c42a <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c420:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c426:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c42a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c42d:	66 3d 16 03          	cmp    ax,0x316
c000c431:	75 0a                	jne    c000c43d <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c433:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c439:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c43d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c440:	66 3d 17 03          	cmp    ax,0x317
c000c444:	75 0a                	jne    c000c450 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c446:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c44c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c453:	66 3d 18 03          	cmp    ax,0x318
c000c457:	75 0a                	jne    c000c463 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c459:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c45f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c466:	66 3d 19 03          	cmp    ax,0x319
c000c46a:	75 0a                	jne    c000c476 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c46c:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c472:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c479:	66 3d 00 02          	cmp    ax,0x200
c000c47d:	75 2c                	jne    c000c4ab <sendKeyboardToken(KeyboardToken)+0x226>
c000c47f:	a0 a0 2b 02 c0       	mov    al,ds:0xc0022ba0
c000c484:	83 f0 01             	xor    eax,0x1
c000c487:	84 c0                	test   al,al
c000c489:	74 20                	je     c000c4ab <sendKeyboardToken(KeyboardToken)+0x226>
c000c48b:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c000c490:	6a 01                	push   0x1
c000c492:	6a 00                	push   0x0
c000c494:	68 ea c0 00 c0       	push   0xc000c0ea
c000c499:	50                   	push   eax
c000c49a:	e8 31 6e 00 00       	call   c00132d0 <Process::createThread(void (*)(void*), void*, int)>
c000c49f:	83 c4 10             	add    esp,0x10
c000c4a2:	c6 05 a0 2b 02 c0 01 	mov    BYTE PTR ds:0xc0022ba0,0x1
c000c4a9:	eb 33                	jmp    c000c4de <sendKeyboardToken(KeyboardToken)+0x259>
c000c4ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ae:	66 3d 01 02          	cmp    ax,0x201
c000c4b2:	75 2a                	jne    c000c4de <sendKeyboardToken(KeyboardToken)+0x259>
c000c4b4:	a0 a0 2b 02 c0       	mov    al,ds:0xc0022ba0
c000c4b9:	83 f0 01             	xor    eax,0x1
c000c4bc:	84 c0                	test   al,al
c000c4be:	74 1e                	je     c000c4de <sendKeyboardToken(KeyboardToken)+0x259>
c000c4c0:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c000c4c5:	6a 01                	push   0x1
c000c4c7:	6a 00                	push   0x0
c000c4c9:	68 56 c1 00 c0       	push   0xc000c156
c000c4ce:	50                   	push   eax
c000c4cf:	e8 fc 6d 00 00       	call   c00132d0 <Process::createThread(void (*)(void*), void*, int)>
c000c4d4:	83 c4 10             	add    esp,0x10
c000c4d7:	c6 05 a0 2b 02 c0 01 	mov    BYTE PTR ds:0xc0022ba0,0x1
c000c4de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e1:	66 3d 1d 03          	cmp    ax,0x31d
c000c4e5:	75 06                	jne    c000c4ed <sendKeyboardToken(KeyboardToken)+0x268>
c000c4e7:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c4ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4f0:	66 3d 1c 03          	cmp    ax,0x31c
c000c4f4:	75 06                	jne    c000c4fc <sendKeyboardToken(KeyboardToken)+0x277>
c000c4f6:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c4fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ff:	66 3d 1b 03          	cmp    ax,0x31b
c000c503:	75 06                	jne    c000c50b <sendKeyboardToken(KeyboardToken)+0x286>
c000c505:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c50b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c50e:	66 3d 1e 03          	cmp    ax,0x31e
c000c512:	75 06                	jne    c000c51a <sendKeyboardToken(KeyboardToken)+0x295>
c000c514:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c51a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c51d:	66 3d 1f 03          	cmp    ax,0x31f
c000c521:	75 06                	jne    c000c529 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c523:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c52c:	66 3d 1a 03          	cmp    ax,0x31a
c000c530:	75 06                	jne    c000c538 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c532:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c538:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c53c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c53f:	83 f0 01             	xor    eax,0x1
c000c542:	84 c0                	test   al,al
c000c544:	74 7b                	je     c000c5c1 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c546:	a0 a1 28 02 c0       	mov    al,ds:0xc00228a1
c000c54b:	84 c0                	test   al,al
c000c54d:	74 43                	je     c000c592 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c54f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c553:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c557:	74 2d                	je     c000c586 <sendKeyboardToken(KeyboardToken)+0x301>
c000c559:	8b 15 a4 2b 02 c0    	mov    edx,DWORD PTR ds:0xc0022ba4
c000c55f:	89 d0                	mov    eax,edx
c000c561:	c1 e0 02             	shl    eax,0x2
c000c564:	01 d0                	add    eax,edx
c000c566:	01 c0                	add    eax,eax
c000c568:	a3 a4 2b 02 c0       	mov    ds:0xc0022ba4,eax
c000c56d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c570:	25 ff ff 00 00       	and    eax,0xffff
c000c575:	8d 50 d0             	lea    edx,[eax-0x30]
c000c578:	a1 a4 2b 02 c0       	mov    eax,ds:0xc0022ba4
c000c57d:	01 d0                	add    eax,edx
c000c57f:	a3 a4 2b 02 c0       	mov    ds:0xc0022ba4,eax
c000c584:	eb 71                	jmp    c000c5f7 <sendKeyboardToken(KeyboardToken)+0x372>
c000c586:	c7 05 a4 2b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ba4,0x0
c000c590:	eb 65                	jmp    c000c5f7 <sendKeyboardToken(KeyboardToken)+0x372>
c000c592:	a1 a4 2b 02 c0       	mov    eax,ds:0xc0022ba4
c000c597:	85 c0                	test   eax,eax
c000c599:	74 1a                	je     c000c5b5 <sendKeyboardToken(KeyboardToken)+0x330>
c000c59b:	a1 a4 2b 02 c0       	mov    eax,ds:0xc0022ba4
c000c5a0:	25 ff 00 00 00       	and    eax,0xff
c000c5a5:	83 ec 0c             	sub    esp,0xc
c000c5a8:	50                   	push   eax
c000c5a9:	e8 14 fc ff ff       	call   c000c1c2 <sendKeyToTerminal(unsigned char)>
c000c5ae:	83 c4 10             	add    esp,0x10
c000c5b1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5b5:	c7 05 a4 2b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ba4,0x0
c000c5bf:	eb 36                	jmp    c000c5f7 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c4:	66 3d 01 01          	cmp    ax,0x101
c000c5c8:	75 2d                	jne    c000c5f7 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5ca:	a1 a4 2b 02 c0       	mov    eax,ds:0xc0022ba4
c000c5cf:	85 c0                	test   eax,eax
c000c5d1:	74 1a                	je     c000c5ed <sendKeyboardToken(KeyboardToken)+0x368>
c000c5d3:	a1 a4 2b 02 c0       	mov    eax,ds:0xc0022ba4
c000c5d8:	25 ff 00 00 00       	and    eax,0xff
c000c5dd:	83 ec 0c             	sub    esp,0xc
c000c5e0:	50                   	push   eax
c000c5e1:	e8 dc fb ff ff       	call   c000c1c2 <sendKeyToTerminal(unsigned char)>
c000c5e6:	83 c4 10             	add    esp,0x10
c000c5e9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5ed:	c7 05 a4 2b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ba4,0x0
c000c5f7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c5fa:	83 f0 01             	xor    eax,0x1
c000c5fd:	84 c0                	test   al,al
c000c5ff:	74 4e                	je     c000c64f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c601:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c604:	83 f0 01             	xor    eax,0x1
c000c607:	84 c0                	test   al,al
c000c609:	74 44                	je     c000c64f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c60b:	a0 a0 28 02 c0       	mov    al,ds:0xc00228a0
c000c610:	83 f0 01             	xor    eax,0x1
c000c613:	84 c0                	test   al,al
c000c615:	74 38                	je     c000c64f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c61a:	66 83 f8 1f          	cmp    ax,0x1f
c000c61e:	76 09                	jbe    c000c629 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c623:	66 83 f8 7e          	cmp    ax,0x7e
c000c627:	76 12                	jbe    c000c63b <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c62c:	66 83 f8 0a          	cmp    ax,0xa
c000c630:	74 09                	je     c000c63b <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c635:	66 83 f8 08          	cmp    ax,0x8
c000c639:	75 14                	jne    c000c64f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c63b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c63e:	25 ff 00 00 00       	and    eax,0xff
c000c643:	83 ec 0c             	sub    esp,0xc
c000c646:	50                   	push   eax
c000c647:	e8 76 fb ff ff       	call   c000c1c2 <sendKeyToTerminal(unsigned char)>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c652:	83 f0 01             	xor    eax,0x1
c000c655:	84 c0                	test   al,al
c000c657:	74 51                	je     c000c6aa <sendKeyboardToken(KeyboardToken)+0x425>
c000c659:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c65c:	83 f0 01             	xor    eax,0x1
c000c65f:	84 c0                	test   al,al
c000c661:	74 47                	je     c000c6aa <sendKeyboardToken(KeyboardToken)+0x425>
c000c663:	a0 a0 28 02 c0       	mov    al,ds:0xc00228a0
c000c668:	84 c0                	test   al,al
c000c66a:	74 3e                	je     c000c6aa <sendKeyboardToken(KeyboardToken)+0x425>
c000c66c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c66f:	66 83 f8 3f          	cmp    ax,0x3f
c000c673:	76 35                	jbe    c000c6aa <sendKeyboardToken(KeyboardToken)+0x425>
c000c675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c678:	66 83 f8 7f          	cmp    ax,0x7f
c000c67c:	77 2c                	ja     c000c6aa <sendKeyboardToken(KeyboardToken)+0x425>
c000c67e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c681:	88 c2                	mov    dl,al
c000c683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c686:	66 83 f8 5f          	cmp    ax,0x5f
c000c68a:	76 04                	jbe    c000c690 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c68c:	b0 20                	mov    al,0x20
c000c68e:	eb 02                	jmp    c000c692 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c690:	b0 00                	mov    al,0x0
c000c692:	29 c2                	sub    edx,eax
c000c694:	88 d0                	mov    al,dl
c000c696:	83 e8 40             	sub    eax,0x40
c000c699:	25 ff 00 00 00       	and    eax,0xff
c000c69e:	83 ec 0c             	sub    esp,0xc
c000c6a1:	50                   	push   eax
c000c6a2:	e8 1b fb ff ff       	call   c000c1c2 <sendKeyToTerminal(unsigned char)>
c000c6a7:	83 c4 10             	add    esp,0x10
c000c6aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ad:	66 3d 00 03          	cmp    ax,0x300
c000c6b1:	75 0f                	jne    c000c6c2 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c6b3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6b6:	83 f0 01             	xor    eax,0x1
c000c6b9:	84 c0                	test   al,al
c000c6bb:	74 05                	je     c000c6c2 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c6bd:	e8 23 bb ff ff       	call   c00081e5 <doTerminalCycle()>
c000c6c2:	90                   	nop
c000c6c3:	c9                   	leave  
c000c6c4:	c3                   	ret    

c000c6c5 <clearInternalKeybuffer(VgaText*)>:
c000c6c5:	55                   	push   ebp
c000c6c6:	89 e5                	mov    ebp,esp
c000c6c8:	83 ec 08             	sub    esp,0x8
c000c6cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ce:	05 b2 00 00 00       	add    eax,0xb2
c000c6d3:	83 ec 0c             	sub    esp,0xc
c000c6d6:	50                   	push   eax
c000c6d7:	e8 64 3e ff ff       	call   c0000540 <strlen>
c000c6dc:	83 c4 10             	add    esp,0x10
c000c6df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c6e2:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c6e8:	83 ec 04             	sub    esp,0x4
c000c6eb:	50                   	push   eax
c000c6ec:	6a 00                	push   0x0
c000c6ee:	52                   	push   edx
c000c6ef:	e8 dc 3d ff ff       	call   c00004d0 <memset>
c000c6f4:	83 c4 10             	add    esp,0x10
c000c6f7:	90                   	nop
c000c6f8:	c9                   	leave  
c000c6f9:	c3                   	ret    

c000c6fa <readKeyboard(VgaText*, char*, unsigned long)>:
c000c6fa:	55                   	push   ebp
c000c6fb:	89 e5                	mov    ebp,esp
c000c6fd:	83 ec 18             	sub    esp,0x18
c000c700:	a1 88 27 02 c0       	mov    eax,ds:0xc0022788
c000c705:	85 c0                	test   eax,eax
c000c707:	74 2a                	je     c000c733 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c709:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c70f:	8b 0d 88 27 02 c0    	mov    ecx,DWORD PTR ds:0xc0022788
c000c715:	83 ec 04             	sub    esp,0x4
c000c718:	68 a0 27 02 c0       	push   0xc00227a0
c000c71d:	83 ec 08             	sub    esp,0x8
c000c720:	89 e2                	mov    edx,esp
c000c722:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c725:	89 02                	mov    DWORD PTR [edx],eax
c000c727:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c72a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c72e:	ff d1                	call   ecx
c000c730:	83 c4 10             	add    esp,0x10
c000c733:	fb                   	sti    
c000c734:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c73b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c73f:	0f 84 a1 00 00 00    	je     c000c7e6 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000c745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c748:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c74e:	84 c0                	test   al,al
c000c750:	75 28                	jne    c000c77a <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c752:	fa                   	cli    
c000c753:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c000c758:	40                   	inc    eax
c000c759:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c000c75e:	e8 8d 6d 00 00       	call   c00134f0 <schedule()>
c000c763:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c000c768:	48                   	dec    eax
c000c769:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c000c76e:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c000c773:	85 c0                	test   eax,eax
c000c775:	75 ce                	jne    c000c745 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c777:	fb                   	sti    
c000c778:	eb cb                	jmp    c000c745 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c77a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c77d:	8d 50 01             	lea    edx,[eax+0x1]
c000c780:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c783:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c786:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c78c:	88 10                	mov    BYTE PTR [eax],dl
c000c78e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c791:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c797:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c79a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c79d:	05 b2 00 00 00       	add    eax,0xb2
c000c7a2:	83 ec 0c             	sub    esp,0xc
c000c7a5:	50                   	push   eax
c000c7a6:	e8 95 3d ff ff       	call   c0000540 <strlen>
c000c7ab:	83 c4 10             	add    esp,0x10
c000c7ae:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7b1:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c7b7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c7ba:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7bd:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c7c3:	83 ec 04             	sub    esp,0x4
c000c7c6:	50                   	push   eax
c000c7c7:	51                   	push   ecx
c000c7c8:	52                   	push   edx
c000c7c9:	e8 12 3c ff ff       	call   c00003e0 <memmove>
c000c7ce:	83 c4 10             	add    esp,0x10
c000c7d1:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c7d4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c7d7:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c7db:	0f 85 5a ff ff ff    	jne    c000c73b <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c7e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c7e4:	eb 03                	jmp    c000c7e9 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000c7e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c7e9:	c9                   	leave  
c000c7ea:	c3                   	ret    
c000c7eb:	90                   	nop

c000c7ec <Keyboard::Keyboard(char const*)>:
c000c7ec:	83 ec 0c             	sub    esp,0xc
c000c7ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7f3:	83 ec 08             	sub    esp,0x8
c000c7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7fa:	50                   	push   eax
c000c7fb:	e8 78 f2 ff ff       	call   c000ba78 <Device::Device(char const*)>
c000c800:	83 c4 10             	add    esp,0x10
c000c803:	ba 1c de 01 c0       	mov    edx,0xc001de1c
c000c808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c80c:	89 10                	mov    DWORD PTR [eax],edx
c000c80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c812:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c81c:	c6 05 84 27 02 c0 01 	mov    BYTE PTR ds:0xc0022784,0x1
c000c823:	90                   	nop
c000c824:	83 c4 0c             	add    esp,0xc
c000c827:	c3                   	ret    

c000c828 <Keyboard::~Keyboard()>:
c000c828:	83 ec 0c             	sub    esp,0xc
c000c82b:	ba 1c de 01 c0       	mov    edx,0xc001de1c
c000c830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c834:	89 10                	mov    DWORD PTR [eax],edx
c000c836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c83a:	83 ec 0c             	sub    esp,0xc
c000c83d:	50                   	push   eax
c000c83e:	e8 9f ef ff ff       	call   c000b7e2 <Device::~Device()>
c000c843:	83 c4 10             	add    esp,0x10
c000c846:	90                   	nop
c000c847:	83 c4 0c             	add    esp,0xc
c000c84a:	c3                   	ret    
c000c84b:	90                   	nop

c000c84c <Keyboard::~Keyboard()>:
c000c84c:	83 ec 0c             	sub    esp,0xc
c000c84f:	83 ec 0c             	sub    esp,0xc
c000c852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c856:	e8 cd ff ff ff       	call   c000c828 <Keyboard::~Keyboard()>
c000c85b:	83 c4 10             	add    esp,0x10
c000c85e:	83 ec 08             	sub    esp,0x8
c000c861:	68 5c 01 00 00       	push   0x15c
c000c866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c86a:	e8 3b db ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c000c86f:	83 c4 10             	add    esp,0x10
c000c872:	83 c4 0c             	add    esp,0xc
c000c875:	c3                   	ret    

c000c876 <LogicalDisk::close(int, int, void*)>:
c000c876:	83 c8 ff             	or     eax,0xffffffff
c000c879:	c3                   	ret    

c000c87a <LogicalDisk::~LogicalDisk()>:
c000c87a:	83 ec 0c             	sub    esp,0xc
c000c87d:	ba 94 de 01 c0       	mov    edx,0xc001de94
c000c882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c886:	89 10                	mov    DWORD PTR [eax],edx
c000c888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c88c:	83 ec 0c             	sub    esp,0xc
c000c88f:	50                   	push   eax
c000c890:	e8 4d ef ff ff       	call   c000b7e2 <Device::~Device()>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	90                   	nop
c000c899:	83 c4 0c             	add    esp,0xc
c000c89c:	c3                   	ret    
c000c89d:	90                   	nop

c000c89e <LogicalDisk::~LogicalDisk()>:
c000c89e:	83 ec 0c             	sub    esp,0xc
c000c8a1:	83 ec 0c             	sub    esp,0xc
c000c8a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8a8:	e8 cd ff ff ff       	call   c000c87a <LogicalDisk::~LogicalDisk()>
c000c8ad:	83 c4 10             	add    esp,0x10
c000c8b0:	83 ec 08             	sub    esp,0x8
c000c8b3:	68 74 01 00 00       	push   0x174
c000c8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8bc:	e8 e9 da ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c000c8c1:	83 c4 10             	add    esp,0x10
c000c8c4:	83 c4 0c             	add    esp,0xc
c000c8c7:	c3                   	ret    

c000c8c8 <LogicalDisk::open(int, int, void*)>:
c000c8c8:	83 ec 18             	sub    esp,0x18
c000c8cb:	68 48 de 01 c0       	push   0xc001de48
c000c8d0:	e8 2e 38 00 00       	call   c0010103 <KePanic(char const*)>
c000c8d5:	83 c8 ff             	or     eax,0xffffffff
c000c8d8:	83 c4 1c             	add    esp,0x1c
c000c8db:	c3                   	ret    

c000c8dc <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c8dc:	53                   	push   ebx
c000c8dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c8e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c8e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c8e9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c8ef:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c8f5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c8fb:	77 10                	ja     c000c90d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c8fd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c903:	89 d3                	mov    ebx,edx
c000c905:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c90b:	72 05                	jb     c000c912 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c90d:	83 c8 ff             	or     eax,0xffffffff
c000c910:	89 c2                	mov    edx,eax
c000c912:	5b                   	pop    ebx
c000c913:	c3                   	ret    

c000c914 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c914:	56                   	push   esi
c000c915:	83 c8 ff             	or     eax,0xffffffff
c000c918:	53                   	push   ebx
c000c919:	89 c2                	mov    edx,eax
c000c91b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c91f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c923:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c927:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c92d:	77 27                	ja     c000c956 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c92f:	89 d8                	mov    eax,ebx
c000c931:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000c937:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000c93d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c942:	89 c2                	mov    edx,eax
c000c944:	73 10                	jae    c000c956 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c946:	89 c8                	mov    eax,ecx
c000c948:	89 da                	mov    edx,ebx
c000c94a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000c950:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000c956:	5b                   	pop    ebx
c000c957:	5e                   	pop    esi
c000c958:	c3                   	ret    
c000c959:	90                   	nop

c000c95a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c95a:	83 ec 1c             	sub    esp,0x1c
c000c95d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c961:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c969:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c96d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c971:	89 04 24             	mov    DWORD PTR [esp],eax
c000c974:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c978:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c97c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c980:	83 ec 08             	sub    esp,0x8
c000c983:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c987:	50                   	push   eax
c000c988:	e8 eb f0 ff ff       	call   c000ba78 <Device::Device(char const*)>
c000c98d:	83 c4 10             	add    esp,0x10
c000c990:	ba 94 de 01 c0       	mov    edx,0xc001de94
c000c995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c999:	89 10                	mov    DWORD PTR [eax],edx
c000c99b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9aa:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b5:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000c9bf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c9c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9cb:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000c9d1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000c9d7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c9db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c9de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c9e2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000c9e8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000c9ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c9f6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000c9fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca00:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ca0a:	90                   	nop
c000ca0b:	83 c4 1c             	add    esp,0x1c
c000ca0e:	c3                   	ret    
c000ca0f:	90                   	nop

c000ca10 <LogicalDisk::assignDriveLetter()>:
c000ca10:	55                   	push   ebp
c000ca11:	57                   	push   edi
c000ca12:	56                   	push   esi
c000ca13:	53                   	push   ebx
c000ca14:	83 ec 14             	sub    esp,0x14
c000ca17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca1b:	8b 3d c0 2b 02 c0    	mov    edi,DWORD PTR ds:0xc0022bc0
c000ca21:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ca27:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ca2b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000ca31:	8b 3d c4 2b 02 c0    	mov    edi,DWORD PTR ds:0xc0022bc4
c000ca37:	3c 01                	cmp    al,0x1
c000ca39:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ca3d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ca41:	19 c0                	sbb    eax,eax
c000ca43:	83 e0 02             	and    eax,0x2
c000ca46:	83 c0 41             	add    eax,0x41
c000ca49:	0f be e8             	movsx  ebp,al
c000ca4c:	3c 43                	cmp    al,0x43
c000ca4e:	75 10                	jne    c000ca60 <LogicalDisk::assignDriveLetter()+0x50>
c000ca50:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000ca57:	75 5d                	jne    c000cab6 <LogicalDisk::assignDriveLetter()+0xa6>
c000ca59:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000ca5e:	75 56                	jne    c000cab6 <LogicalDisk::assignDriveLetter()+0xa6>
c000ca60:	8d 75 bf             	lea    esi,[ebp-0x41]
c000ca63:	ba 01 00 00 00       	mov    edx,0x1
c000ca68:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ca6c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000ca70:	d3 e2                	shl    edx,cl
c000ca72:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ca76:	89 d7                	mov    edi,edx
c000ca78:	89 d6                	mov    esi,edx
c000ca7a:	c1 ff 1f             	sar    edi,0x1f
c000ca7d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000ca81:	21 f9                	and    ecx,edi
c000ca83:	09 d1                	or     ecx,edx
c000ca85:	75 2f                	jne    c000cab6 <LogicalDisk::assignDriveLetter()+0xa6>
c000ca87:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000ca8b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca8f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000ca95:	09 f2                	or     edx,esi
c000ca97:	89 15 c0 2b 02 c0    	mov    DWORD PTR ds:0xc0022bc0,edx
c000ca9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000caa1:	09 fa                	or     edx,edi
c000caa3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000caa7:	89 15 c4 2b 02 c0    	mov    DWORD PTR ds:0xc0022bc4,edx
c000caad:	89 1c bd e0 2b 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd420],ebx
c000cab4:	eb 08                	jmp    c000cabe <LogicalDisk::assignDriveLetter()+0xae>
c000cab6:	45                   	inc    ebp
c000cab7:	40                   	inc    eax
c000cab8:	3c 5b                	cmp    al,0x5b
c000caba:	75 90                	jne    c000ca4c <LogicalDisk::assignDriveLetter()+0x3c>
c000cabc:	31 c0                	xor    eax,eax
c000cabe:	83 c4 14             	add    esp,0x14
c000cac1:	5b                   	pop    ebx
c000cac2:	5e                   	pop    esi
c000cac3:	5f                   	pop    edi
c000cac4:	5d                   	pop    ebp
c000cac5:	c3                   	ret    

c000cac6 <LogicalDisk::mount()>:
c000cac6:	56                   	push   esi
c000cac7:	53                   	push   ebx
c000cac8:	53                   	push   ebx
c000cac9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cacd:	8b 1d 74 07 02 c0    	mov    ebx,DWORD PTR ds:0xc0020774
c000cad3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cadd:	85 db                	test   ebx,ebx
c000cadf:	74 27                	je     c000cb08 <LogicalDisk::mount()+0x42>
c000cae1:	51                   	push   ecx
c000cae2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cae9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000caeb:	83 e8 41             	sub    eax,0x41
c000caee:	50                   	push   eax
c000caef:	56                   	push   esi
c000caf0:	53                   	push   ebx
c000caf1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000caf4:	83 c4 10             	add    esp,0x10
c000caf7:	84 c0                	test   al,al
c000caf9:	74 08                	je     c000cb03 <LogicalDisk::mount()+0x3d>
c000cafb:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cb01:	eb 07                	jmp    c000cb0a <LogicalDisk::mount()+0x44>
c000cb03:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cb06:	eb d5                	jmp    c000cadd <LogicalDisk::mount()+0x17>
c000cb08:	31 c0                	xor    eax,eax
c000cb0a:	5a                   	pop    edx
c000cb0b:	5b                   	pop    ebx
c000cb0c:	5e                   	pop    esi
c000cb0d:	c3                   	ret    

c000cb0e <LogicalDisk::unmount()>:
c000cb0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb12:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb1c:	c3                   	ret    
c000cb1d:	90                   	nop

c000cb1e <LogicalDisk::eject()>:
c000cb1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb22:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cb28:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb2e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cb31:	90                   	nop

c000cb32 <LogicalDisk::unassignDriveLetter()>:
c000cb32:	57                   	push   edi
c000cb33:	56                   	push   esi
c000cb34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb38:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cb3f:	84 c9                	test   cl,cl
c000cb41:	75 0f                	jne    c000cb52 <LogicalDisk::unassignDriveLetter()+0x20>
c000cb43:	c7 44 24 0c 6c de 01 c0 	mov    DWORD PTR [esp+0xc],0xc001de6c
c000cb4b:	5e                   	pop    esi
c000cb4c:	5f                   	pop    edi
c000cb4d:	e9 b1 35 00 00       	jmp    c0010103 <KePanic(char const*)>
c000cb52:	83 e9 41             	sub    ecx,0x41
c000cb55:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cb5c:	b8 01 00 00 00       	mov    eax,0x1
c000cb61:	c7 04 8d e0 2b 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd420],0x0
c000cb6c:	d3 e0                	shl    eax,cl
c000cb6e:	89 c7                	mov    edi,eax
c000cb70:	f7 d0                	not    eax
c000cb72:	c1 ff 1f             	sar    edi,0x1f
c000cb75:	21 05 c0 2b 02 c0    	and    DWORD PTR ds:0xc0022bc0,eax
c000cb7b:	89 fe                	mov    esi,edi
c000cb7d:	f7 d6                	not    esi
c000cb7f:	21 35 c4 2b 02 c0    	and    DWORD PTR ds:0xc0022bc4,esi
c000cb85:	5e                   	pop    esi
c000cb86:	5f                   	pop    edi
c000cb87:	c3                   	ret    

c000cb88 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cb88:	57                   	push   edi
c000cb89:	56                   	push   esi
c000cb8a:	53                   	push   ebx
c000cb8b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb93:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cb97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cb9b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cba1:	77 41                	ja     c000cbe4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cba3:	99                   	cdq    
c000cba4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cbaa:	01 c8                	add    eax,ecx
c000cbac:	11 da                	adc    edx,ebx
c000cbae:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cbb4:	19 d7                	sbb    edi,edx
c000cbb6:	72 33                	jb     c000cbeb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cbb8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cbbe:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cbc4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cbc8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cbcc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cbd2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cbd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbdc:	5b                   	pop    ebx
c000cbdd:	5e                   	pop    esi
c000cbde:	5f                   	pop    edi
c000cbdf:	e9 4e 0a 00 00       	jmp    c000d632 <VCache::read(unsigned long long, int, void*)>
c000cbe4:	b8 05 00 00 00       	mov    eax,0x5
c000cbe9:	eb 05                	jmp    c000cbf0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cbeb:	b8 07 00 00 00       	mov    eax,0x7
c000cbf0:	5b                   	pop    ebx
c000cbf1:	5e                   	pop    esi
c000cbf2:	5f                   	pop    edi
c000cbf3:	c3                   	ret    

c000cbf4 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cbf4:	57                   	push   edi
c000cbf5:	56                   	push   esi
c000cbf6:	53                   	push   ebx
c000cbf7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cbfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbff:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc07:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc0d:	77 41                	ja     c000cc50 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cc0f:	99                   	cdq    
c000cc10:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc16:	01 c8                	add    eax,ecx
c000cc18:	11 da                	adc    edx,ebx
c000cc1a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc20:	19 d7                	sbb    edi,edx
c000cc22:	72 33                	jb     c000cc57 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cc24:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc2a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc30:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc34:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc38:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc3e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc48:	5b                   	pop    ebx
c000cc49:	5e                   	pop    esi
c000cc4a:	5f                   	pop    edi
c000cc4b:	e9 cc 08 00 00       	jmp    c000d51c <VCache::write(unsigned long long, int, void*)>
c000cc50:	b8 05 00 00 00       	mov    eax,0x5
c000cc55:	eb 05                	jmp    c000cc5c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cc57:	b8 07 00 00 00       	mov    eax,0x7
c000cc5c:	5b                   	pop    ebx
c000cc5d:	5e                   	pop    esi
c000cc5e:	5f                   	pop    edi
c000cc5f:	c3                   	ret    

c000cc60 <Mouse::Mouse(char const*)>:
c000cc60:	83 ec 0c             	sub    esp,0xc
c000cc63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc67:	83 ec 08             	sub    esp,0x8
c000cc6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc6e:	50                   	push   eax
c000cc6f:	e8 04 ee ff ff       	call   c000ba78 <Device::Device(char const*)>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	ba c0 de 01 c0       	mov    edx,0xc001dec0
c000cc7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc80:	89 10                	mov    DWORD PTR [eax],edx
c000cc82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc86:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cc90:	90                   	nop
c000cc91:	83 c4 0c             	add    esp,0xc
c000cc94:	c3                   	ret    
c000cc95:	90                   	nop
c000cc96:	66 90                	xchg   ax,ax

c000cc98 <Mouse::~Mouse()>:
c000cc98:	83 ec 0c             	sub    esp,0xc
c000cc9b:	ba c0 de 01 c0       	mov    edx,0xc001dec0
c000cca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cca4:	89 10                	mov    DWORD PTR [eax],edx
c000cca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccaa:	83 ec 0c             	sub    esp,0xc
c000ccad:	50                   	push   eax
c000ccae:	e8 2f eb ff ff       	call   c000b7e2 <Device::~Device()>
c000ccb3:	83 c4 10             	add    esp,0x10
c000ccb6:	90                   	nop
c000ccb7:	83 c4 0c             	add    esp,0xc
c000ccba:	c3                   	ret    
c000ccbb:	90                   	nop

c000ccbc <Mouse::~Mouse()>:
c000ccbc:	83 ec 0c             	sub    esp,0xc
c000ccbf:	83 ec 0c             	sub    esp,0xc
c000ccc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc6:	e8 cd ff ff ff       	call   c000cc98 <Mouse::~Mouse()>
c000cccb:	83 c4 10             	add    esp,0x10
c000ccce:	83 ec 08             	sub    esp,0x8
c000ccd1:	68 58 01 00 00       	push   0x158
c000ccd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccda:	e8 cb d6 ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c000ccdf:	83 c4 10             	add    esp,0x10
c000cce2:	83 c4 0c             	add    esp,0xc
c000cce5:	c3                   	ret    

c000cce6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cce6:	55                   	push   ebp
c000cce7:	57                   	push   edi
c000cce8:	56                   	push   esi
c000cce9:	53                   	push   ebx
c000ccea:	81 ec 28 01 00 00    	sub    esp,0x128
c000ccf0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ccf7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ccfe:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cd05:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cd0c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd10:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd14:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd1b:	e8 54 ee ff ff       	call   c000bb74 <Device::getName()>
c000cd20:	5a                   	pop    edx
c000cd21:	59                   	pop    ecx
c000cd22:	50                   	push   eax
c000cd23:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cd27:	55                   	push   ebp
c000cd28:	e8 d3 38 ff ff       	call   c0000600 <strcpy>
c000cd2d:	5b                   	pop    ebx
c000cd2e:	58                   	pop    eax
c000cd2f:	68 e4 de 01 c0       	push   0xc001dee4
c000cd34:	55                   	push   ebp
c000cd35:	e8 86 3a ff ff       	call   c00007c0 <strcat>
c000cd3a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cd41:	e8 bf aa ff ff       	call   c0007805 <malloc>
c000cd46:	83 c4 0c             	add    esp,0xc
c000cd49:	89 c3                	mov    ebx,eax
c000cd4b:	57                   	push   edi
c000cd4c:	56                   	push   esi
c000cd4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd55:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cd5c:	55                   	push   ebp
c000cd5d:	50                   	push   eax
c000cd5e:	e8 f7 fb ff ff       	call   c000c95a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cd63:	83 c4 14             	add    esp,0x14
c000cd66:	53                   	push   ebx
c000cd67:	e8 a4 fc ff ff       	call   c000ca10 <LogicalDisk::assignDriveLetter()>
c000cd6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cd6f:	e8 52 fd ff ff       	call   c000cac6 <LogicalDisk::mount()>
c000cd74:	58                   	pop    eax
c000cd75:	5a                   	pop    edx
c000cd76:	53                   	push   ebx
c000cd77:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd7e:	e8 5d eb ff ff       	call   c000b8e0 <Device::addChild(Device*)>
c000cd83:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cd89:	5b                   	pop    ebx
c000cd8a:	5e                   	pop    esi
c000cd8b:	5f                   	pop    edi
c000cd8c:	5d                   	pop    ebp
c000cd8d:	c3                   	ret    

c000cd8e <createPartitionsForDisk(PhysicalDisk*)>:
c000cd8e:	55                   	push   ebp
c000cd8f:	57                   	push   edi
c000cd90:	56                   	push   esi
c000cd91:	53                   	push   ebx
c000cd92:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cd98:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cd9f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cda5:	3d 00 02 00 00       	cmp    eax,0x200
c000cdaa:	74 27                	je     c000cdd3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cdac:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cdb2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cdb8:	83 ec 10             	sub    esp,0x10
c000cdbb:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cdbf:	99                   	cdq    
c000cdc0:	c1 e6 0a             	shl    esi,0xa
c000cdc3:	52                   	push   edx
c000cdc4:	89 fd                	mov    ebp,edi
c000cdc6:	50                   	push   eax
c000cdc7:	55                   	push   ebp
c000cdc8:	56                   	push   esi
c000cdc9:	e8 72 f0 00 00       	call   c001be40 <__udivdi3>
c000cdce:	e9 b1 00 00 00       	jmp    c000ce84 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cdd3:	83 ec 0c             	sub    esp,0xc
c000cdd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cdd8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cddc:	56                   	push   esi
c000cddd:	6a 01                	push   0x1
c000cddf:	6a 00                	push   0x0
c000cde1:	6a 00                	push   0x0
c000cde3:	53                   	push   ebx
c000cde4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cde7:	83 c4 20             	add    esp,0x20
c000cdea:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cdf2:	75 0a                	jne    c000cdfe <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cdf4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cdfc:	74 2c                	je     c000ce2a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cdfe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce04:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce0a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce10:	83 ec 10             	sub    esp,0x10
c000ce13:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce17:	89 f7                	mov    edi,esi
c000ce19:	c1 e0 0a             	shl    eax,0xa
c000ce1c:	c1 ff 1f             	sar    edi,0x1f
c000ce1f:	57                   	push   edi
c000ce20:	56                   	push   esi
c000ce21:	52                   	push   edx
c000ce22:	50                   	push   eax
c000ce23:	e8 18 f0 00 00       	call   c001be40 <__udivdi3>
c000ce28:	eb 5a                	jmp    c000ce84 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce2a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ce31:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000ce38:	83 e1 7f             	and    ecx,0x7f
c000ce3b:	83 e0 7f             	and    eax,0x7f
c000ce3e:	01 c1                	add    ecx,eax
c000ce40:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ce47:	83 e0 7f             	and    eax,0x7f
c000ce4a:	01 c1                	add    ecx,eax
c000ce4c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ce53:	83 e0 7f             	and    eax,0x7f
c000ce56:	00 c1                	add    cl,al
c000ce58:	74 41                	je     c000ce9b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000ce5a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce60:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce66:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce6c:	83 ec 10             	sub    esp,0x10
c000ce6f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce73:	89 f7                	mov    edi,esi
c000ce75:	c1 e0 0a             	shl    eax,0xa
c000ce78:	c1 ff 1f             	sar    edi,0x1f
c000ce7b:	57                   	push   edi
c000ce7c:	56                   	push   esi
c000ce7d:	52                   	push   edx
c000ce7e:	50                   	push   eax
c000ce7f:	e8 bc ef 00 00       	call   c001be40 <__udivdi3>
c000ce84:	83 c4 14             	add    esp,0x14
c000ce87:	52                   	push   edx
c000ce88:	50                   	push   eax
c000ce89:	6a 00                	push   0x0
c000ce8b:	6a 00                	push   0x0
c000ce8d:	53                   	push   ebx
c000ce8e:	e8 53 fe ff ff       	call   c000cce6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ce93:	83 c4 20             	add    esp,0x20
c000ce96:	e9 79 01 00 00       	jmp    c000d014 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000ce9b:	89 f0                	mov    eax,esi
c000ce9d:	31 f6                	xor    esi,esi
c000ce9f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cea6:	75 02                	jne    c000ceaa <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cea8:	89 f1                	mov    ecx,esi
c000ceaa:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ceb1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000ceb8:	c1 e2 08             	shl    edx,0x8
c000cebb:	c1 e7 10             	shl    edi,0x10
c000cebe:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cec6:	09 fa                	or     edx,edi
c000cec8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000ced0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000ced7:	83 c0 10             	add    eax,0x10
c000ceda:	09 fa                	or     edx,edi
c000cedc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cee3:	c1 e7 18             	shl    edi,0x18
c000cee6:	09 fa                	or     edx,edi
c000cee8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000ceef:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cef3:	c1 e7 10             	shl    edi,0x10
c000cef6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cefd:	c1 e2 08             	shl    edx,0x8
c000cf00:	09 fa                	or     edx,edi
c000cf02:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cf09:	09 fa                	or     edx,edi
c000cf0b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cf12:	c1 e7 18             	shl    edi,0x18
c000cf15:	09 fa                	or     edx,edi
c000cf17:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cf1b:	46                   	inc    esi
c000cf1c:	83 fe 04             	cmp    esi,0x4
c000cf1f:	0f 85 7a ff ff ff    	jne    c000ce9f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000cf25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf29:	83 f0 01             	xor    eax,0x1
c000cf2c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cf30:	75 57                	jne    c000cf89 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf36:	83 f0 01             	xor    eax,0x1
c000cf39:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000cf3d:	75 4a                	jne    c000cf89 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf3f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000cf43:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cf4b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cf53:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf59:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf5f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf65:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf69:	89 f7                	mov    edi,esi
c000cf6b:	c1 e0 0a             	shl    eax,0xa
c000cf6e:	c1 ff 1f             	sar    edi,0x1f
c000cf71:	57                   	push   edi
c000cf72:	56                   	push   esi
c000cf73:	52                   	push   edx
c000cf74:	50                   	push   eax
c000cf75:	e8 c6 ee 00 00       	call   c001be40 <__udivdi3>
c000cf7a:	83 c4 10             	add    esp,0x10
c000cf7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf85:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000cf89:	84 c9                	test   cl,cl
c000cf8b:	74 53                	je     c000cfe0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000cf8d:	0f b6 c9             	movzx  ecx,cl
c000cf90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf98:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cf9c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000cfa0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfa4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfa8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000cfac:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000cfb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cfb4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cfb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfbc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfc0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000cfc4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000cfc8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000cfcc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000cfd0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfd4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfd8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000cfdc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000cfe0:	31 ed                	xor    ebp,ebp
c000cfe2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000cfe6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000cfea:	89 f8                	mov    eax,edi
c000cfec:	09 f0                	or     eax,esi
c000cfee:	74 1e                	je     c000d00e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000cff0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000cff4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000cff8:	89 d1                	mov    ecx,edx
c000cffa:	09 c1                	or     ecx,eax
c000cffc:	74 10                	je     c000d00e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000cffe:	83 ec 0c             	sub    esp,0xc
c000d001:	57                   	push   edi
c000d002:	56                   	push   esi
c000d003:	52                   	push   edx
c000d004:	50                   	push   eax
c000d005:	53                   	push   ebx
c000d006:	e8 db fc ff ff       	call   c000cce6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d00b:	83 c4 20             	add    esp,0x20
c000d00e:	45                   	inc    ebp
c000d00f:	83 fd 04             	cmp    ebp,0x4
c000d012:	75 ce                	jne    c000cfe2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d014:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d01a:	5b                   	pop    ebx
c000d01b:	5e                   	pop    esi
c000d01c:	5f                   	pop    edi
c000d01d:	5d                   	pop    ebp
c000d01e:	c3                   	ret    
c000d01f:	90                   	nop

c000d020 <Serial::Serial(char const*)>:
c000d020:	83 ec 0c             	sub    esp,0xc
c000d023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d027:	83 ec 08             	sub    esp,0x8
c000d02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d02e:	50                   	push   eax
c000d02f:	e8 44 ea ff ff       	call   c000ba78 <Device::Device(char const*)>
c000d034:	83 c4 10             	add    esp,0x10
c000d037:	ba f8 de 01 c0       	mov    edx,0xc001def8
c000d03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d040:	89 10                	mov    DWORD PTR [eax],edx
c000d042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d046:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d050:	90                   	nop
c000d051:	83 c4 0c             	add    esp,0xc
c000d054:	c3                   	ret    
c000d055:	90                   	nop
c000d056:	66 90                	xchg   ax,ax

c000d058 <Serial::~Serial()>:
c000d058:	83 ec 0c             	sub    esp,0xc
c000d05b:	ba f8 de 01 c0       	mov    edx,0xc001def8
c000d060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d064:	89 10                	mov    DWORD PTR [eax],edx
c000d066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d06a:	83 ec 0c             	sub    esp,0xc
c000d06d:	50                   	push   eax
c000d06e:	e8 6f e7 ff ff       	call   c000b7e2 <Device::~Device()>
c000d073:	83 c4 10             	add    esp,0x10
c000d076:	90                   	nop
c000d077:	83 c4 0c             	add    esp,0xc
c000d07a:	c3                   	ret    
c000d07b:	90                   	nop

c000d07c <Serial::~Serial()>:
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	83 ec 0c             	sub    esp,0xc
c000d082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d086:	e8 cd ff ff ff       	call   c000d058 <Serial::~Serial()>
c000d08b:	83 c4 10             	add    esp,0x10
c000d08e:	83 ec 08             	sub    esp,0x8
c000d091:	68 58 01 00 00       	push   0x158
c000d096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d09a:	e8 0b d3 ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c000d09f:	83 c4 10             	add    esp,0x10
c000d0a2:	83 c4 0c             	add    esp,0xc
c000d0a5:	c3                   	ret    
c000d0a6:	66 90                	xchg   ax,ax

c000d0a8 <Timer::Timer(char const*)>:
c000d0a8:	83 ec 0c             	sub    esp,0xc
c000d0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0af:	83 ec 08             	sub    esp,0x8
c000d0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b6:	50                   	push   eax
c000d0b7:	e8 bc e9 ff ff       	call   c000ba78 <Device::Device(char const*)>
c000d0bc:	83 c4 10             	add    esp,0x10
c000d0bf:	ba 3c df 01 c0       	mov    edx,0xc001df3c
c000d0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c8:	89 10                	mov    DWORD PTR [eax],edx
c000d0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ce:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d0d8:	90                   	nop
c000d0d9:	83 c4 0c             	add    esp,0xc
c000d0dc:	c3                   	ret    
c000d0dd:	90                   	nop
c000d0de:	66 90                	xchg   ax,ax

c000d0e0 <Timer::~Timer()>:
c000d0e0:	83 ec 0c             	sub    esp,0xc
c000d0e3:	ba 3c df 01 c0       	mov    edx,0xc001df3c
c000d0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ec:	89 10                	mov    DWORD PTR [eax],edx
c000d0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0f2:	83 ec 0c             	sub    esp,0xc
c000d0f5:	50                   	push   eax
c000d0f6:	e8 e7 e6 ff ff       	call   c000b7e2 <Device::~Device()>
c000d0fb:	83 c4 10             	add    esp,0x10
c000d0fe:	90                   	nop
c000d0ff:	83 c4 0c             	add    esp,0xc
c000d102:	c3                   	ret    
c000d103:	90                   	nop

c000d104 <Timer::~Timer()>:
c000d104:	83 ec 0c             	sub    esp,0xc
c000d107:	83 ec 0c             	sub    esp,0xc
c000d10a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d10e:	e8 cd ff ff ff       	call   c000d0e0 <Timer::~Timer()>
c000d113:	83 c4 10             	add    esp,0x10
c000d116:	83 ec 08             	sub    esp,0x8
c000d119:	68 5c 01 00 00       	push   0x15c
c000d11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d122:	e8 83 d2 ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c000d127:	83 c4 10             	add    esp,0x10
c000d12a:	83 c4 0c             	add    esp,0xc
c000d12d:	c3                   	ret    

c000d12e <Timer::read()>:
c000d12e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d132:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d138:	c3                   	ret    

c000d139 <setupTimer(int)>:
c000d139:	53                   	push   ebx
c000d13a:	83 ec 14             	sub    esp,0x14
c000d13d:	68 5c 01 00 00       	push   0x15c
c000d142:	e8 be a6 ff ff       	call   c0007805 <malloc>
c000d147:	89 04 24             	mov    DWORD PTR [esp],eax
c000d14a:	89 c3                	mov    ebx,eax
c000d14c:	e8 63 e6 00 00       	call   c001b7b4 <PIT::PIT()>
c000d151:	58                   	pop    eax
c000d152:	5a                   	pop    edx
c000d153:	53                   	push   ebx
c000d154:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c000d15a:	e8 81 e7 ff ff       	call   c000b8e0 <Device::addChild(Device*)>
c000d15f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d161:	6a 00                	push   0x0
c000d163:	6a 00                	push   0x0
c000d165:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d169:	53                   	push   ebx
c000d16a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d16d:	89 d8                	mov    eax,ebx
c000d16f:	83 c4 28             	add    esp,0x28
c000d172:	5b                   	pop    ebx
c000d173:	c3                   	ret    

c000d174 <timerHandler(unsigned int)>:
c000d174:	56                   	push   esi
c000d175:	53                   	push   ebx
c000d176:	51                   	push   ecx
c000d177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d17b:	01 05 4c 2c 02 c0    	add    DWORD PTR ds:0xc0022c4c,eax
c000d181:	80 3d 7d 06 02 c0 00 	cmp    BYTE PTR ds:0xc002067d,0x0
c000d188:	0f 84 4a 01 00 00    	je     c000d2d8 <timerHandler(unsigned int)+0x164>
c000d18e:	fa                   	cli    
c000d18f:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c000d195:	83 ec 0c             	sub    esp,0xc
c000d198:	ff 05 24 3b 02 c0    	inc    DWORD PTR ds:0xc0023b24
c000d19e:	68 38 3b 02 c0       	push   0xc0023b38
c000d1a3:	e8 68 f2 00 00       	call   c001c410 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d1a8:	83 c4 10             	add    esp,0x10
c000d1ab:	84 c0                	test   al,al
c000d1ad:	0f 85 a1 00 00 00    	jne    c000d254 <timerHandler(unsigned int)+0xe0>
c000d1b3:	83 ec 0c             	sub    esp,0xc
c000d1b6:	68 38 3b 02 c0       	push   0xc0023b38
c000d1bb:	e8 6c f2 00 00       	call   c001c42c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d1c0:	83 c4 10             	add    esp,0x10
c000d1c3:	89 c6                	mov    esi,eax
c000d1c5:	8d 76 00             	lea    esi,[esi+0x0]
c000d1c8:	83 ec 0c             	sub    esp,0xc
c000d1cb:	68 38 3b 02 c0       	push   0xc0023b38
c000d1d0:	e8 57 f2 00 00       	call   c001c42c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d1d5:	c7 04 24 38 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b38
c000d1dc:	89 c3                	mov    ebx,eax
c000d1de:	e8 51 f2 00 00       	call   c001c434 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d1e3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d1e6:	83 c4 10             	add    esp,0x10
c000d1e9:	3b 05 4c 2c 02 c0    	cmp    eax,DWORD PTR ds:0xc0022c4c
c000d1ef:	77 23                	ja     c000d214 <timerHandler(unsigned int)+0xa0>
c000d1f1:	83 ec 0c             	sub    esp,0xc
c000d1f4:	53                   	push   ebx
c000d1f5:	e8 ba 67 00 00       	call   c00139b4 <unblockTask(ThreadControlBlock*)>
c000d1fa:	83 c4 10             	add    esp,0x10
c000d1fd:	39 de                	cmp    esi,ebx
c000d1ff:	75 27                	jne    c000d228 <timerHandler(unsigned int)+0xb4>
c000d201:	83 ec 0c             	sub    esp,0xc
c000d204:	68 38 3b 02 c0       	push   0xc0023b38
c000d209:	e8 1e f2 00 00       	call   c001c42c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d20e:	89 c6                	mov    esi,eax
c000d210:	eb 12                	jmp    c000d224 <timerHandler(unsigned int)+0xb0>
c000d212:	66 90                	xchg   ax,ax
c000d214:	52                   	push   edx
c000d215:	52                   	push   edx
c000d216:	53                   	push   ebx
c000d217:	68 38 3b 02 c0       	push   0xc0023b38
c000d21c:	e8 cb f2 00 00       	call   c001c4ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d221:	8d 76 00             	lea    esi,[esi+0x0]
c000d224:	83 c4 10             	add    esp,0x10
c000d227:	90                   	nop
c000d228:	83 ec 0c             	sub    esp,0xc
c000d22b:	68 38 3b 02 c0       	push   0xc0023b38
c000d230:	e8 db f1 00 00       	call   c001c410 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d235:	83 c4 10             	add    esp,0x10
c000d238:	84 c0                	test   al,al
c000d23a:	75 18                	jne    c000d254 <timerHandler(unsigned int)+0xe0>
c000d23c:	83 ec 0c             	sub    esp,0xc
c000d23f:	68 38 3b 02 c0       	push   0xc0023b38
c000d244:	e8 e3 f1 00 00       	call   c001c42c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d249:	83 c4 10             	add    esp,0x10
c000d24c:	39 f0                	cmp    eax,esi
c000d24e:	0f 85 74 ff ff ff    	jne    c000d1c8 <timerHandler(unsigned int)+0x54>
c000d254:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d259:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d25d:	74 41                	je     c000d2a0 <timerHandler(unsigned int)+0x12c>
c000d25f:	80 3d 7c 06 02 c0 00 	cmp    BYTE PTR ds:0xc002067c,0x0
c000d266:	74 38                	je     c000d2a0 <timerHandler(unsigned int)+0x12c>
c000d268:	fa                   	cli    
c000d269:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c000d26f:	a1 4c 2c 02 c0       	mov    eax,ds:0xc0022c4c
c000d274:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d27a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d27d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d283:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d286:	72 08                	jb     c000d290 <timerHandler(unsigned int)+0x11c>
c000d288:	e8 63 62 00 00       	call   c00134f0 <schedule()>
c000d28d:	8d 76 00             	lea    esi,[esi+0x0]
c000d290:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c000d295:	48                   	dec    eax
c000d296:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c000d29b:	75 03                	jne    c000d2a0 <timerHandler(unsigned int)+0x12c>
c000d29d:	fb                   	sti    
c000d29e:	66 90                	xchg   ax,ax
c000d2a0:	a1 24 3b 02 c0       	mov    eax,ds:0xc0023b24
c000d2a5:	48                   	dec    eax
c000d2a6:	a3 24 3b 02 c0       	mov    ds:0xc0023b24,eax
c000d2ab:	75 1b                	jne    c000d2c8 <timerHandler(unsigned int)+0x154>
c000d2ad:	83 3d 20 3b 02 c0 00 	cmp    DWORD PTR ds:0xc0023b20,0x0
c000d2b4:	74 12                	je     c000d2c8 <timerHandler(unsigned int)+0x154>
c000d2b6:	c7 05 20 3b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023b20,0x0
c000d2c0:	e8 2b 62 00 00       	call   c00134f0 <schedule()>
c000d2c5:	8d 76 00             	lea    esi,[esi+0x0]
c000d2c8:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c000d2cd:	48                   	dec    eax
c000d2ce:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c000d2d3:	75 03                	jne    c000d2d8 <timerHandler(unsigned int)+0x164>
c000d2d5:	fb                   	sti    
c000d2d6:	66 90                	xchg   ax,ax
c000d2d8:	58                   	pop    eax
c000d2d9:	5b                   	pop    ebx
c000d2da:	5e                   	pop    esi
c000d2db:	c3                   	ret    

c000d2dc <VCache::VCache(PhysicalDisk*)>:
c000d2dc:	53                   	push   ebx
c000d2dd:	83 ec 18             	sub    esp,0x18
c000d2e0:	ba 6c df 01 c0       	mov    edx,0xc001df6c
c000d2e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2e9:	89 10                	mov    DWORD PTR [eax],edx
c000d2eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2ef:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d2f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2fa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d301:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d305:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d30c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d313:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d317:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d31e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d329:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d334:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d338:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d33c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d343:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d34a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d34e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d352:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d356:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d35a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d35e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d362:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d366:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d36d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d375:	83 ec 0c             	sub    esp,0xc
c000d378:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d37c:	e8 84 a4 ff ff       	call   c0007805 <malloc>
c000d381:	83 c4 10             	add    esp,0x10
c000d384:	89 c3                	mov    ebx,eax
c000d386:	83 ec 0c             	sub    esp,0xc
c000d389:	53                   	push   ebx
c000d38a:	e8 2d 5f 00 00       	call   c00132bc <Mutex::Mutex()>
c000d38f:	83 c4 10             	add    esp,0x10
c000d392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d396:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d399:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d39d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d3a1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d3a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3a8:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d3af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d3b3:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d3b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3bd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d3c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d3c4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d3ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d3d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d3d4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d3d7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d3da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3de:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d3e2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d3e6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d3ec:	05 00 01 00 00       	add    eax,0x100
c000d3f1:	c1 e0 04             	shl    eax,0x4
c000d3f4:	83 ec 0c             	sub    esp,0xc
c000d3f7:	50                   	push   eax
c000d3f8:	e8 08 a4 ff ff       	call   c0007805 <malloc>
c000d3fd:	83 c4 10             	add    esp,0x10
c000d400:	89 c2                	mov    edx,eax
c000d402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d406:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d40d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d418:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d41c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d420:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d426:	c1 e0 06             	shl    eax,0x6
c000d429:	83 ec 0c             	sub    esp,0xc
c000d42c:	50                   	push   eax
c000d42d:	e8 d3 a3 ff ff       	call   c0007805 <malloc>
c000d432:	83 c4 10             	add    esp,0x10
c000d435:	89 c2                	mov    edx,eax
c000d437:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d43b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d43e:	90                   	nop
c000d43f:	83 c4 18             	add    esp,0x18
c000d442:	5b                   	pop    ebx
c000d443:	c3                   	ret    

c000d444 <VCache::invalidateReadBuffer()>:
c000d444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d448:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d44e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d452:	c3                   	ret    
c000d453:	90                   	nop

c000d454 <VCache::writeWriteBuffer()>:
c000d454:	53                   	push   ebx
c000d455:	83 ec 08             	sub    esp,0x8
c000d458:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d45c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d460:	74 1e                	je     c000d480 <VCache::writeWriteBuffer()+0x2c>
c000d462:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d465:	83 ec 0c             	sub    esp,0xc
c000d468:	8b 10                	mov    edx,DWORD PTR [eax]
c000d46a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d46d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d470:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d473:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d476:	50                   	push   eax
c000d477:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d47a:	83 c4 20             	add    esp,0x20
c000d47d:	8d 76 00             	lea    esi,[esi+0x0]
c000d480:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d487:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d48e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d492:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d499:	83 c4 08             	add    esp,0x8
c000d49c:	5b                   	pop    ebx
c000d49d:	c3                   	ret    
c000d49e:	66 90                	xchg   ax,ax

c000d4a0 <VCache::~VCache()>:
c000d4a0:	83 ec 0c             	sub    esp,0xc
c000d4a3:	ba 6c df 01 c0       	mov    edx,0xc001df6c
c000d4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4ac:	89 10                	mov    DWORD PTR [eax],edx
c000d4ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d4b5:	84 c0                	test   al,al
c000d4b7:	74 0f                	je     c000d4c8 <VCache::~VCache()+0x28>
c000d4b9:	83 ec 0c             	sub    esp,0xc
c000d4bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4c0:	e8 8f ff ff ff       	call   c000d454 <VCache::writeWriteBuffer()>
c000d4c5:	83 c4 10             	add    esp,0x10
c000d4c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4cc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d4cf:	83 ec 0c             	sub    esp,0xc
c000d4d2:	50                   	push   eax
c000d4d3:	e8 3d a3 ff ff       	call   c0007815 <free>
c000d4d8:	83 c4 10             	add    esp,0x10
c000d4db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4df:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d4e2:	83 ec 0c             	sub    esp,0xc
c000d4e5:	50                   	push   eax
c000d4e6:	e8 2a a3 ff ff       	call   c0007815 <free>
c000d4eb:	83 c4 10             	add    esp,0x10
c000d4ee:	90                   	nop
c000d4ef:	83 c4 0c             	add    esp,0xc
c000d4f2:	c3                   	ret    
c000d4f3:	90                   	nop

c000d4f4 <VCache::~VCache()>:
c000d4f4:	83 ec 0c             	sub    esp,0xc
c000d4f7:	83 ec 0c             	sub    esp,0xc
c000d4fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4fe:	e8 9d ff ff ff       	call   c000d4a0 <VCache::~VCache()>
c000d503:	83 c4 10             	add    esp,0x10
c000d506:	83 ec 08             	sub    esp,0x8
c000d509:	6a 44                	push   0x44
c000d50b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d50f:	e8 96 ce ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c000d514:	83 c4 10             	add    esp,0x10
c000d517:	83 c4 0c             	add    esp,0xc
c000d51a:	c3                   	ret    
c000d51b:	90                   	nop

c000d51c <VCache::write(unsigned long long, int, void*)>:
c000d51c:	55                   	push   ebp
c000d51d:	57                   	push   edi
c000d51e:	56                   	push   esi
c000d51f:	53                   	push   ebx
c000d520:	83 ec 1c             	sub    esp,0x1c
c000d523:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d527:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d52b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d52f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d533:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d537:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d53b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d53f:	31 c0                	xor    eax,eax
c000d541:	8d 76 00             	lea    esi,[esi+0x0]
c000d544:	39 e8                	cmp    eax,ebp
c000d546:	7d 18                	jge    c000d560 <VCache::write(unsigned long long, int, void*)+0x44>
c000d548:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d54b:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d551:	0f af c8             	imul   ecx,eax
c000d554:	89 ca                	mov    edx,ecx
c000d556:	01 f2                	add    edx,esi
c000d558:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d55a:	40                   	inc    eax
c000d55b:	eb e7                	jmp    c000d544 <VCache::write(unsigned long long, int, void*)+0x28>
c000d55d:	8d 76 00             	lea    esi,[esi+0x0]
c000d560:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d564:	74 0a                	je     c000d570 <VCache::write(unsigned long long, int, void*)+0x54>
c000d566:	53                   	push   ebx
c000d567:	e8 d8 fe ff ff       	call   c000d444 <VCache::invalidateReadBuffer()>
c000d56c:	58                   	pop    eax
c000d56d:	8d 76 00             	lea    esi,[esi+0x0]
c000d570:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d574:	74 5a                	je     c000d5d0 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d576:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d579:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d57d:	89 f8                	mov    eax,edi
c000d57f:	99                   	cdq    
c000d580:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d583:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d586:	31 c1                	xor    ecx,eax
c000d588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d58c:	31 d0                	xor    eax,edx
c000d58e:	09 c1                	or     ecx,eax
c000d590:	75 32                	jne    c000d5c4 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d592:	83 fd 01             	cmp    ebp,0x1
c000d595:	75 2d                	jne    c000d5c4 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d597:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d59a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d5a0:	0f af f9             	imul   edi,ecx
c000d5a3:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d5a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d5a8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d5ab:	40                   	inc    eax
c000d5ac:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d5af:	83 f8 40             	cmp    eax,0x40
c000d5b2:	75 74                	jne    c000d628 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d5b4:	83 ec 0c             	sub    esp,0xc
c000d5b7:	53                   	push   ebx
c000d5b8:	e8 97 fe ff ff       	call   c000d454 <VCache::writeWriteBuffer()>
c000d5bd:	83 c4 10             	add    esp,0x10
c000d5c0:	eb 66                	jmp    c000d628 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d5c2:	66 90                	xchg   ax,ax
c000d5c4:	83 ec 0c             	sub    esp,0xc
c000d5c7:	53                   	push   ebx
c000d5c8:	e8 87 fe ff ff       	call   c000d454 <VCache::writeWriteBuffer()>
c000d5cd:	83 c4 10             	add    esp,0x10
c000d5d0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d5d3:	83 fd 3f             	cmp    ebp,0x3f
c000d5d6:	7f 24                	jg     c000d5fc <VCache::write(unsigned long long, int, void*)+0xe0>
c000d5d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d5dc:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d5df:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d5e2:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d5e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d5ea:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d5ed:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d5f0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d5f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d5f8:	eb 2e                	jmp    c000d628 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d5fa:	66 90                	xchg   ax,ax
c000d5fc:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5fe:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d602:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d606:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d60a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d60e:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d612:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d616:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d61a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d61d:	83 c4 1c             	add    esp,0x1c
c000d620:	5b                   	pop    ebx
c000d621:	5e                   	pop    esi
c000d622:	5f                   	pop    edi
c000d623:	5d                   	pop    ebp
c000d624:	ff e0                	jmp    eax
c000d626:	66 90                	xchg   ax,ax
c000d628:	83 c4 1c             	add    esp,0x1c
c000d62b:	31 c0                	xor    eax,eax
c000d62d:	5b                   	pop    ebx
c000d62e:	5e                   	pop    esi
c000d62f:	5f                   	pop    edi
c000d630:	5d                   	pop    ebp
c000d631:	c3                   	ret    

c000d632 <VCache::read(unsigned long long, int, void*)>:
c000d632:	55                   	push   ebp
c000d633:	57                   	push   edi
c000d634:	56                   	push   esi
c000d635:	53                   	push   ebx
c000d636:	83 ec 1c             	sub    esp,0x1c
c000d639:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d63d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d641:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d645:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d649:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d64d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d651:	31 c0                	xor    eax,eax
c000d653:	90                   	nop
c000d654:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d658:	7d 16                	jge    c000d670 <VCache::read(unsigned long long, int, void*)+0x3e>
c000d65a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d65d:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d663:	0f af c8             	imul   ecx,eax
c000d666:	89 ca                	mov    edx,ecx
c000d668:	01 f2                	add    edx,esi
c000d66a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000d66c:	40                   	inc    eax
c000d66d:	eb e5                	jmp    c000d654 <VCache::read(unsigned long long, int, void*)+0x22>
c000d66f:	90                   	nop
c000d670:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d674:	74 0e                	je     c000d684 <VCache::read(unsigned long long, int, void*)+0x52>
c000d676:	83 ec 0c             	sub    esp,0xc
c000d679:	53                   	push   ebx
c000d67a:	e8 d5 fd ff ff       	call   c000d454 <VCache::writeWriteBuffer()>
c000d67f:	83 c4 10             	add    esp,0x10
c000d682:	66 90                	xchg   ax,ax
c000d684:	83 ec 0c             	sub    esp,0xc
c000d687:	53                   	push   ebx
c000d688:	e8 b7 fd ff ff       	call   c000d444 <VCache::invalidateReadBuffer()>
c000d68d:	83 c4 0c             	add    esp,0xc
c000d690:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d693:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d699:	6a 00                	push   0x0
c000d69b:	56                   	push   esi
c000d69c:	e8 2f 2e ff ff       	call   c00004d0 <memset>
c000d6a1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6a6:	89 74 24 50          	mov    DWORD PTR [esp+0x50],esi
c000d6aa:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000d6ae:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d6b2:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000d6b6:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000d6ba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d6be:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d6c1:	83 c4 2c             	add    esp,0x2c
c000d6c4:	5b                   	pop    ebx
c000d6c5:	5e                   	pop    esi
c000d6c6:	5f                   	pop    edi
c000d6c7:	5d                   	pop    ebp
c000d6c8:	ff e0                	jmp    eax

c000d6ca <Video::putrect(int, int, int, int, unsigned int)>:
c000d6ca:	55                   	push   ebp
c000d6cb:	57                   	push   edi
c000d6cc:	56                   	push   esi
c000d6cd:	53                   	push   ebx
c000d6ce:	83 ec 1c             	sub    esp,0x1c
c000d6d1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d6d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d6d9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d6dd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d6e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d6e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d6e9:	01 df                	add    edi,ebx
c000d6eb:	39 fb                	cmp    ebx,edi
c000d6ed:	7d 1f                	jge    c000d70e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d6ef:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d6f3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d6f7:	7d 12                	jge    c000d70b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d6f9:	8b 16                	mov    edx,DWORD PTR [esi]
c000d6fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d6ff:	53                   	push   ebx
c000d700:	55                   	push   ebp
c000d701:	45                   	inc    ebp
c000d702:	56                   	push   esi
c000d703:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d706:	83 c4 10             	add    esp,0x10
c000d709:	eb e8                	jmp    c000d6f3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d70b:	43                   	inc    ebx
c000d70c:	eb dd                	jmp    c000d6eb <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d70e:	83 c4 1c             	add    esp,0x1c
c000d711:	5b                   	pop    ebx
c000d712:	5e                   	pop    esi
c000d713:	5f                   	pop    edi
c000d714:	5d                   	pop    ebp
c000d715:	c3                   	ret    

c000d716 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d716:	55                   	push   ebp
c000d717:	57                   	push   edi
c000d718:	31 ff                	xor    edi,edi
c000d71a:	56                   	push   esi
c000d71b:	53                   	push   ebx
c000d71c:	83 ec 1c             	sub    esp,0x1c
c000d71f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d723:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d727:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d72e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d733:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d737:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d73b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d73f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d742:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d746:	01 f9                	add    ecx,edi
c000d748:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d74c:	7d 2f                	jge    c000d77d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d74e:	31 f6                	xor    esi,esi
c000d750:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d754:	01 f2                	add    edx,esi
c000d756:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d75a:	7d 1a                	jge    c000d776 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d75c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d75f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d762:	46                   	inc    esi
c000d763:	51                   	push   ecx
c000d764:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d768:	52                   	push   edx
c000d769:	55                   	push   ebp
c000d76a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d76d:	83 c4 10             	add    esp,0x10
c000d770:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d774:	eb da                	jmp    c000d750 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d776:	47                   	inc    edi
c000d777:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d77b:	eb c5                	jmp    c000d742 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d77d:	83 c4 1c             	add    esp,0x1c
c000d780:	5b                   	pop    ebx
c000d781:	5e                   	pop    esi
c000d782:	5f                   	pop    edi
c000d783:	5d                   	pop    ebp
c000d784:	c3                   	ret    
c000d785:	90                   	nop

c000d786 <Video::blit(unsigned int*, int, int, int, int)>:
c000d786:	55                   	push   ebp
c000d787:	57                   	push   edi
c000d788:	56                   	push   esi
c000d789:	53                   	push   ebx
c000d78a:	83 ec 1c             	sub    esp,0x1c
c000d78d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d791:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d795:	85 c0                	test   eax,eax
c000d797:	79 02                	jns    c000d79b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d799:	31 c0                	xor    eax,eax
c000d79b:	c1 e0 02             	shl    eax,0x2
c000d79e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d7a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7a6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d7aa:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d7ae:	39 d8                	cmp    eax,ebx
c000d7b0:	7e 49                	jle    c000d7fb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d7b2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d7b8:	7c 41                	jl     c000d7fb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d7ba:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d7be:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d7c2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d7c6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d7ca:	39 f9                	cmp    ecx,edi
c000d7cc:	7e 22                	jle    c000d7f0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d7ce:	83 c5 04             	add    ebp,0x4
c000d7d1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d7d7:	7c 14                	jl     c000d7ed <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d7d9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d7db:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d7de:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d7e2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d7e6:	56                   	push   esi
c000d7e7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d7ea:	83 c4 10             	add    esp,0x10
c000d7ed:	47                   	inc    edi
c000d7ee:	eb d2                	jmp    c000d7c2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d7f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d7f4:	43                   	inc    ebx
c000d7f5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d7f9:	eb ab                	jmp    c000d7a6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d7fb:	83 c4 1c             	add    esp,0x1c
c000d7fe:	5b                   	pop    ebx
c000d7ff:	5e                   	pop    esi
c000d800:	5f                   	pop    edi
c000d801:	5d                   	pop    ebp
c000d802:	c3                   	ret    
c000d803:	90                   	nop

c000d804 <Video::clearScreen(unsigned int)>:
c000d804:	57                   	push   edi
c000d805:	56                   	push   esi
c000d806:	53                   	push   ebx
c000d807:	31 db                	xor    ebx,ebx
c000d809:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d80d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d813:	7e 1f                	jle    c000d834 <Video::clearScreen(unsigned int)+0x30>
c000d815:	31 ff                	xor    edi,edi
c000d817:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d81d:	7e 12                	jle    c000d831 <Video::clearScreen(unsigned int)+0x2d>
c000d81f:	8b 06                	mov    eax,DWORD PTR [esi]
c000d821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d825:	53                   	push   ebx
c000d826:	57                   	push   edi
c000d827:	47                   	inc    edi
c000d828:	56                   	push   esi
c000d829:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d82c:	83 c4 10             	add    esp,0x10
c000d82f:	eb e6                	jmp    c000d817 <Video::clearScreen(unsigned int)+0x13>
c000d831:	43                   	inc    ebx
c000d832:	eb d9                	jmp    c000d80d <Video::clearScreen(unsigned int)+0x9>
c000d834:	5b                   	pop    ebx
c000d835:	5e                   	pop    esi
c000d836:	5f                   	pop    edi
c000d837:	c3                   	ret    

c000d838 <Video::putpixel(int, int, unsigned int)>:
c000d838:	c7 44 24 04 74 df 01 c0 	mov    DWORD PTR [esp+0x4],0xc001df74
c000d840:	e9 be 28 00 00       	jmp    c0010103 <KePanic(char const*)>
c000d845:	90                   	nop

c000d846 <Video::Video(char const*)>:
c000d846:	83 ec 0c             	sub    esp,0xc
c000d849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84d:	83 ec 08             	sub    esp,0x8
c000d850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d854:	50                   	push   eax
c000d855:	e8 1e e2 ff ff       	call   c000ba78 <Device::Device(char const*)>
c000d85a:	83 c4 10             	add    esp,0x10
c000d85d:	ba e4 df 01 c0       	mov    edx,0xc001dfe4
c000d862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d866:	89 10                	mov    DWORD PTR [eax],edx
c000d868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d876:	90                   	nop
c000d877:	83 c4 0c             	add    esp,0xc
c000d87a:	c3                   	ret    
c000d87b:	90                   	nop

c000d87c <Video::~Video()>:
c000d87c:	83 ec 0c             	sub    esp,0xc
c000d87f:	ba e4 df 01 c0       	mov    edx,0xc001dfe4
c000d884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d888:	89 10                	mov    DWORD PTR [eax],edx
c000d88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d88e:	83 ec 0c             	sub    esp,0xc
c000d891:	50                   	push   eax
c000d892:	e8 4b df ff ff       	call   c000b7e2 <Device::~Device()>
c000d897:	83 c4 10             	add    esp,0x10
c000d89a:	90                   	nop
c000d89b:	83 c4 0c             	add    esp,0xc
c000d89e:	c3                   	ret    
c000d89f:	90                   	nop

c000d8a0 <Video::~Video()>:
c000d8a0:	83 ec 0c             	sub    esp,0xc
c000d8a3:	83 ec 0c             	sub    esp,0xc
c000d8a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8aa:	e8 cd ff ff ff       	call   c000d87c <Video::~Video()>
c000d8af:	83 c4 10             	add    esp,0x10
c000d8b2:	83 ec 08             	sub    esp,0x8
c000d8b5:	68 64 01 00 00       	push   0x164
c000d8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8be:	e8 e7 ca ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c000d8c3:	83 c4 10             	add    esp,0x10
c000d8c6:	83 c4 0c             	add    esp,0xc
c000d8c9:	c3                   	ret    

c000d8ca <Video::isMonochrome()>:
c000d8ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8ce:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d8d4:	c3                   	ret    
c000d8d5:	90                   	nop

c000d8d6 <Video::getWidth()>:
c000d8d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d8e0:	c3                   	ret    
c000d8e1:	90                   	nop

c000d8e2 <Video::getHeight()>:
c000d8e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8e6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d8ec:	c3                   	ret    
c000d8ed:	90                   	nop

c000d8ee <Video::drawCursor(int, int, unsigned char*, int)>:
c000d8ee:	55                   	push   ebp
c000d8ef:	57                   	push   edi
c000d8f0:	56                   	push   esi
c000d8f1:	53                   	push   ebx
c000d8f2:	83 ec 2c             	sub    esp,0x2c
c000d8f5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d8f9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d8fd:	83 f8 01             	cmp    eax,0x1
c000d900:	19 c9                	sbb    ecx,ecx
c000d902:	31 db                	xor    ebx,ebx
c000d904:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d908:	89 cd                	mov    ebp,ecx
c000d90a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d912:	f7 d5                	not    ebp
c000d914:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d91a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d91e:	01 d8                	add    eax,ebx
c000d920:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d924:	56                   	push   esi
c000d925:	e8 b8 ff ff ff       	call   c000d8e2 <Video::getHeight()>
c000d92a:	59                   	pop    ecx
c000d92b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d92f:	7e 70                	jle    c000d9a1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d931:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d935:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d939:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d93c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d940:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d944:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d94b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d94f:	89 f8                	mov    eax,edi
c000d951:	83 c0 20             	add    eax,0x20
c000d954:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d958:	56                   	push   esi
c000d959:	e8 78 ff ff ff       	call   c000d8d6 <Video::getWidth()>
c000d95e:	5a                   	pop    edx
c000d95f:	39 c7                	cmp    edi,eax
c000d961:	7d 34                	jge    c000d997 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000d963:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000d968:	74 05                	je     c000d96f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000d96a:	8b 06                	mov    eax,DWORD PTR [esi]
c000d96c:	55                   	push   ebp
c000d96d:	eb 0d                	jmp    c000d97c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000d96f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000d974:	74 12                	je     c000d988 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000d976:	8b 06                	mov    eax,DWORD PTR [esi]
c000d978:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d97c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d980:	57                   	push   edi
c000d981:	56                   	push   esi
c000d982:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d985:	83 c4 10             	add    esp,0x10
c000d988:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000d98c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000d990:	47                   	inc    edi
c000d991:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000d995:	75 c1                	jne    c000d958 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000d997:	43                   	inc    ebx
c000d998:	83 fb 20             	cmp    ebx,0x20
c000d99b:	0f 85 79 ff ff ff    	jne    c000d91a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000d9a1:	83 c4 2c             	add    esp,0x2c
c000d9a4:	5b                   	pop    ebx
c000d9a5:	5e                   	pop    esi
c000d9a6:	5f                   	pop    edi
c000d9a7:	5d                   	pop    ebp
c000d9a8:	c3                   	ret    
c000d9a9:	90                   	nop

c000d9aa <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000d9aa:	55                   	push   ebp
c000d9ab:	57                   	push   edi
c000d9ac:	56                   	push   esi
c000d9ad:	53                   	push   ebx
c000d9ae:	83 ec 28             	sub    esp,0x28
c000d9b1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d9b5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000d9b9:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000d9bd:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000d9c1:	c1 e6 08             	shl    esi,0x8
c000d9c4:	01 c6                	add    esi,eax
c000d9c6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000d9ca:	c1 e0 08             	shl    eax,0x8
c000d9cd:	01 d0                	add    eax,edx
c000d9cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d9d7:	0f af c6             	imul   eax,esi
c000d9da:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000d9e1:	50                   	push   eax
c000d9e2:	e8 1e 9e ff ff       	call   c0007805 <malloc>
c000d9e7:	83 c4 10             	add    esp,0x10
c000d9ea:	89 c7                	mov    edi,eax
c000d9ec:	85 c0                	test   eax,eax
c000d9ee:	75 10                	jne    c000da00 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000d9f0:	83 ec 0c             	sub    esp,0xc
c000d9f3:	68 95 df 01 c0       	push   0xc001df95
c000d9f8:	e8 06 27 00 00       	call   c0010103 <KePanic(char const*)>
c000d9fd:	83 c4 10             	add    esp,0x10
c000da00:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000da03:	ba 12 00 00 00       	mov    edx,0x12
c000da08:	84 c0                	test   al,al
c000da0a:	74 11                	je     c000da1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000da0c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000da10:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000da14:	c1 fa 03             	sar    edx,0x3
c000da17:	0f af d1             	imul   edx,ecx
c000da1a:	83 c2 12             	add    edx,0x12
c000da1d:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000da21:	74 04                	je     c000da27 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000da23:	85 f6                	test   esi,esi
c000da25:	75 12                	jne    c000da39 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000da27:	83 ec 0c             	sub    esp,0xc
c000da2a:	68 a5 df 01 c0       	push   0xc001dfa5
c000da2f:	e8 6c ca ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c000da34:	e9 b8 00 00 00       	jmp    c000daf1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000da39:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000da3d:	80 f9 02             	cmp    cl,0x2
c000da40:	0f 85 96 00 00 00    	jne    c000dadc <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000da46:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000da4b:	75 0e                	jne    c000da5b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da4d:	84 c0                	test   al,al
c000da4f:	75 0a                	jne    c000da5b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da51:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000da54:	83 e8 18             	sub    eax,0x18
c000da57:	a8 f7                	test   al,0xf7
c000da59:	74 0a                	je     c000da65 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000da5b:	83 ec 0c             	sub    esp,0xc
c000da5e:	68 ba df 01 c0       	push   0xc001dfba
c000da63:	eb 7f                	jmp    c000dae4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000da65:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000da6d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000da75:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000da79:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000da81:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000da85:	75 0c                	jne    c000da93 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000da87:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000da8c:	c1 e0 18             	shl    eax,0x18
c000da8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da93:	45                   	inc    ebp
c000da94:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000da99:	c1 e1 10             	shl    ecx,0x10
c000da9c:	89 c8                	mov    eax,ecx
c000da9e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000daa3:	c1 e1 08             	shl    ecx,0x8
c000daa6:	09 c1                	or     ecx,eax
c000daa8:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000daac:	09 c1                	or     ecx,eax
c000daae:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dab2:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dab6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000daba:	c1 f8 03             	sar    eax,0x3
c000dabd:	01 c2                	add    edx,eax
c000dabf:	89 e8                	mov    eax,ebp
c000dac1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dac5:	39 c6                	cmp    esi,eax
c000dac7:	7f b0                	jg     c000da79 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dac9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dacd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dad1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dad4:	7e 22                	jle    c000daf8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dad6:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dada:	eb 99                	jmp    c000da75 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dadc:	50                   	push   eax
c000dadd:	50                   	push   eax
c000dade:	51                   	push   ecx
c000dadf:	68 c8 df 01 c0       	push   0xc001dfc8
c000dae4:	e8 b7 c9 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c000dae9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000daec:	e8 24 9d ff ff       	call   c0007815 <free>
c000daf1:	83 c4 10             	add    esp,0x10
c000daf4:	31 ff                	xor    edi,edi
c000daf6:	eb 0f                	jmp    c000db07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000daf8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dafc:	89 30                	mov    DWORD PTR [eax],esi
c000dafe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db02:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000db05:	89 30                	mov    DWORD PTR [eax],esi
c000db07:	83 c4 1c             	add    esp,0x1c
c000db0a:	89 f8                	mov    eax,edi
c000db0c:	5b                   	pop    ebx
c000db0d:	5e                   	pop    esi
c000db0e:	5f                   	pop    edi
c000db0f:	5d                   	pop    ebp
c000db10:	c3                   	ret    
c000db11:	90                   	nop

c000db12 <Video::putTGA(int, int, unsigned char*, int)>:
c000db12:	55                   	push   ebp
c000db13:	57                   	push   edi
c000db14:	56                   	push   esi
c000db15:	53                   	push   ebx
c000db16:	83 ec 28             	sub    esp,0x28
c000db19:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000db1d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db21:	50                   	push   eax
c000db22:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db26:	50                   	push   eax
c000db27:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db2b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db2f:	56                   	push   esi
c000db30:	e8 75 fe ff ff       	call   c000d9aa <Video::tgaParse(unsigned char*, int, int*, int*)>
c000db35:	83 c4 20             	add    esp,0x20
c000db38:	85 c0                	test   eax,eax
c000db3a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000db3e:	74 35                	je     c000db75 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db40:	89 c7                	mov    edi,eax
c000db42:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db46:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000db4a:	39 d8                	cmp    eax,ebx
c000db4c:	7e 27                	jle    c000db75 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db4e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000db52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db56:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db5a:	39 e8                	cmp    eax,ebp
c000db5c:	7e 14                	jle    c000db72 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000db5e:	8b 06                	mov    eax,DWORD PTR [esi]
c000db60:	83 c7 04             	add    edi,0x4
c000db63:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000db66:	53                   	push   ebx
c000db67:	55                   	push   ebp
c000db68:	45                   	inc    ebp
c000db69:	56                   	push   esi
c000db6a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db6d:	83 c4 10             	add    esp,0x10
c000db70:	eb e0                	jmp    c000db52 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000db72:	43                   	inc    ebx
c000db73:	eb cd                	jmp    c000db42 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000db75:	83 c4 1c             	add    esp,0x1c
c000db78:	5b                   	pop    ebx
c000db79:	5e                   	pop    esi
c000db7a:	5f                   	pop    edi
c000db7b:	5d                   	pop    ebp
c000db7c:	c3                   	ret    
c000db7d:	66 90                	xchg   ax,ax
c000db7f:	90                   	nop

c000db80 <ACPI::close(int, int, void*)>:
c000db80:	83 ec 1c             	sub    esp,0x1c
c000db83:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000db8b:	74 0b                	je     c000db98 <ACPI::close(int, int, void*)+0x18>
c000db8d:	b8 00 00 00 00       	mov    eax,0x0
c000db92:	e9 9d 00 00 00       	jmp    c000dc34 <ACPI::close(int, int, void*)+0xb4>
c000db97:	90                   	nop
c000db98:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000db9d:	75 29                	jne    c000dbc8 <ACPI::close(int, int, void*)+0x48>
c000db9f:	a1 68 2c 02 c0       	mov    eax,ds:0xc0022c68
c000dba4:	85 c0                	test   eax,eax
c000dba6:	74 08                	je     c000dbb0 <ACPI::close(int, int, void*)+0x30>
c000dba8:	a1 68 2c 02 c0       	mov    eax,ds:0xc0022c68
c000dbad:	ff d0                	call   eax
c000dbaf:	90                   	nop
c000dbb0:	83 ec 0c             	sub    esp,0xc
c000dbb3:	68 24 e0 01 c0       	push   0xc001e024
c000dbb8:	e8 46 25 00 00       	call   c0010103 <KePanic(char const*)>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dbc5:	eb 6d                	jmp    c000dc34 <ACPI::close(int, int, void*)+0xb4>
c000dbc7:	90                   	nop
c000dbc8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dbcd:	75 5d                	jne    c000dc2c <ACPI::close(int, int, void*)+0xac>
c000dbcf:	a1 64 2c 02 c0       	mov    eax,ds:0xc0022c64
c000dbd4:	85 c0                	test   eax,eax
c000dbd6:	74 08                	je     c000dbe0 <ACPI::close(int, int, void*)+0x60>
c000dbd8:	a1 64 2c 02 c0       	mov    eax,ds:0xc0022c64
c000dbdd:	ff d0                	call   eax
c000dbdf:	90                   	nop
c000dbe0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dbe5:	8d 76 00             	lea    esi,[esi+0x0]
c000dbe8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dbec:	25 ff 00 00 00       	and    eax,0xff
c000dbf1:	83 e0 02             	and    eax,0x2
c000dbf4:	74 1e                	je     c000dc14 <ACPI::close(int, int, void*)+0x94>
c000dbf6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dbfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc01:	89 c2                	mov    edx,eax
c000dc03:	ec                   	in     al,dx
c000dc04:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dc08:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dc0c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dc10:	eb d6                	jmp    c000dbe8 <ACPI::close(int, int, void*)+0x68>
c000dc12:	66 90                	xchg   ax,ax
c000dc14:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dc1b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dc20:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dc24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc28:	ee                   	out    dx,al
c000dc29:	8d 76 00             	lea    esi,[esi+0x0]
c000dc2c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc31:	8d 76 00             	lea    esi,[esi+0x0]
c000dc34:	83 c4 1c             	add    esp,0x1c
c000dc37:	c3                   	ret    

c000dc38 <findRSDP()>:
c000dc38:	83 ec 1c             	sub    esp,0x1c
c000dc3b:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c000dc40:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dc46:	83 e0 04             	and    eax,0x4
c000dc49:	84 c0                	test   al,al
c000dc4b:	75 07                	jne    c000dc54 <findRSDP()+0x1c>
c000dc4d:	b8 00 00 00 00       	mov    eax,0x0
c000dc52:	eb 70                	jmp    c000dcc4 <findRSDP()+0x8c>
c000dc54:	a1 a8 06 02 c0       	mov    eax,ds:0xc00206a8
c000dc59:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dc5e:	7f 1c                	jg     c000dc7c <findRSDP()+0x44>
c000dc60:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c000dc65:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dc6b:	83 e2 fb             	and    edx,0xfffffffb
c000dc6e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dc74:	b8 00 00 00 00       	mov    eax,0x0
c000dc79:	eb 49                	jmp    c000dcc4 <findRSDP()+0x8c>
c000dc7b:	90                   	nop
c000dc7c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dc84:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dc8c:	77 2e                	ja     c000dcbc <findRSDP()+0x84>
c000dc8e:	83 ec 04             	sub    esp,0x4
c000dc91:	6a 08                	push   0x8
c000dc93:	68 bf e0 01 c0       	push   0xc001e0bf
c000dc98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc9c:	e8 ef 26 ff ff       	call   c0000390 <memcmp>
c000dca1:	83 c4 10             	add    esp,0x10
c000dca4:	85 c0                	test   eax,eax
c000dca6:	0f 94 c0             	sete   al
c000dca9:	84 c0                	test   al,al
c000dcab:	74 07                	je     c000dcb4 <findRSDP()+0x7c>
c000dcad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcb1:	eb 11                	jmp    c000dcc4 <findRSDP()+0x8c>
c000dcb3:	90                   	nop
c000dcb4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dcb9:	eb c9                	jmp    c000dc84 <findRSDP()+0x4c>
c000dcbb:	90                   	nop
c000dcbc:	b8 00 00 00 00       	mov    eax,0x0
c000dcc1:	8d 76 00             	lea    esi,[esi+0x0]
c000dcc4:	83 c4 1c             	add    esp,0x1c
c000dcc7:	c3                   	ret    

c000dcc8 <loadACPITables(unsigned char*)>:
c000dcc8:	57                   	push   edi
c000dcc9:	56                   	push   esi
c000dcca:	53                   	push   ebx
c000dccb:	83 ec 60             	sub    esp,0x60
c000dcce:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c000dcd3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dcd9:	83 e0 04             	and    eax,0x4
c000dcdc:	84 c0                	test   al,al
c000dcde:	0f 84 3c 02 00 00    	je     c000df20 <loadACPITables(unsigned char*)+0x258>
c000dce4:	a0 80 2e 02 c0       	mov    al,ds:0xc0022e80
c000dce9:	84 c0                	test   al,al
c000dceb:	74 77                	je     c000dd64 <loadACPITables(unsigned char*)+0x9c>
c000dced:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dcf1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dcf5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dcf9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dcfc:	83 e8 24             	sub    eax,0x24
c000dcff:	c1 e8 03             	shr    eax,0x3
c000dd02:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dd06:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dd0e:	66 90                	xchg   ax,ax
c000dd10:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd14:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dd18:	0f 8d b6 00 00 00    	jge    c000ddd4 <loadACPITables(unsigned char*)+0x10c>
c000dd1e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd22:	83 c0 24             	add    eax,0x24
c000dd25:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dd29:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dd2d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dd31:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd35:	c1 e0 03             	shl    eax,0x3
c000dd38:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dd3c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dd40:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dd43:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd45:	89 c1                	mov    ecx,eax
c000dd47:	a1 6c 2c 02 c0       	mov    eax,ds:0xc0022c6c
c000dd4c:	8d 50 01             	lea    edx,[eax+0x1]
c000dd4f:	89 15 6c 2c 02 c0    	mov    DWORD PTR ds:0xc0022c6c,edx
c000dd55:	89 ca                	mov    edx,ecx
c000dd57:	89 14 c5 84 2c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd37c],edx
c000dd5e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000dd62:	eb ac                	jmp    c000dd10 <loadACPITables(unsigned char*)+0x48>
c000dd64:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd68:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd73:	83 e8 24             	sub    eax,0x24
c000dd76:	c1 e8 02             	shr    eax,0x2
c000dd79:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000dd7d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000dd85:	8d 76 00             	lea    esi,[esi+0x0]
c000dd88:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dd8c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000dd90:	7d 42                	jge    c000ddd4 <loadACPITables(unsigned char*)+0x10c>
c000dd92:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd96:	83 c0 24             	add    eax,0x24
c000dd99:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dda1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dda5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dda9:	c1 e0 02             	shl    eax,0x2
c000ddac:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ddb0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ddb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ddb6:	a1 6c 2c 02 c0       	mov    eax,ds:0xc0022c6c
c000ddbb:	8d 50 01             	lea    edx,[eax+0x1]
c000ddbe:	89 15 6c 2c 02 c0    	mov    DWORD PTR ds:0xc0022c6c,edx
c000ddc4:	89 ca                	mov    edx,ecx
c000ddc6:	89 14 c5 84 2c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd37c],edx
c000ddcd:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000ddd1:	eb b5                	jmp    c000dd88 <loadACPITables(unsigned char*)+0xc0>
c000ddd3:	90                   	nop
c000ddd4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000dddc:	a1 6c 2c 02 c0       	mov    eax,ds:0xc0022c6c
c000dde1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000dde5:	0f 8d 39 01 00 00    	jge    c000df24 <loadACPITables(unsigned char*)+0x25c>
c000ddeb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ddef:	8b 04 c5 84 2c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd37c]
c000ddf6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ddfa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ddfe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000de02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de06:	25 ff 0f 00 00       	and    eax,0xfff
c000de0b:	89 c6                	mov    esi,eax
c000de0d:	8b 1d 70 07 02 c0    	mov    ebx,DWORD PTR ds:0xc0020770
c000de13:	83 ec 0c             	sub    esp,0xc
c000de16:	6a 01                	push   0x1
c000de18:	e8 30 b4 ff ff       	call   c000924d <Virt::allocateKernelVirtualPages(int)>
c000de1d:	83 c4 10             	add    esp,0x10
c000de20:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000de24:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000de2a:	83 ec 0c             	sub    esp,0xc
c000de2d:	6a 01                	push   0x1
c000de2f:	6a 01                	push   0x1
c000de31:	50                   	push   eax
c000de32:	52                   	push   edx
c000de33:	53                   	push   ebx
c000de34:	e8 a3 bd ff ff       	call   c0009bdc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000de39:	83 c4 20             	add    esp,0x20
c000de3c:	09 f0                	or     eax,esi
c000de3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de42:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de46:	c1 e0 03             	shl    eax,0x3
c000de49:	05 80 2c 02 c0       	add    eax,0xc0022c80
c000de4e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000de52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de5a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000de62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000de72:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de76:	89 c6                	mov    esi,eax
c000de78:	89 d7                	mov    edi,edx
c000de7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de7c:	89 c8                	mov    eax,ecx
c000de7e:	89 fa                	mov    edx,edi
c000de80:	89 f3                	mov    ebx,esi
c000de82:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000de86:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000de8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de95:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000de99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de9d:	05 00 10 00 00       	add    eax,0x1000
c000dea2:	c1 e8 0c             	shr    eax,0xc
c000dea5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dea9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dead:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000deb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deb5:	25 ff 0f 00 00       	and    eax,0xfff
c000deba:	89 c6                	mov    esi,eax
c000debc:	8b 1d 70 07 02 c0    	mov    ebx,DWORD PTR ds:0xc0020770
c000dec2:	83 ec 0c             	sub    esp,0xc
c000dec5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000dec9:	e8 7f b3 ff ff       	call   c000924d <Virt::allocateKernelVirtualPages(int)>
c000dece:	83 c4 10             	add    esp,0x10
c000ded1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ded5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dedb:	83 ec 0c             	sub    esp,0xc
c000dede:	6a 01                	push   0x1
c000dee0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dee4:	50                   	push   eax
c000dee5:	52                   	push   edx
c000dee6:	53                   	push   ebx
c000dee7:	e8 f0 bc ff ff       	call   c0009bdc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000deec:	83 c4 20             	add    esp,0x20
c000deef:	09 f0                	or     eax,esi
c000def1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000def5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000def9:	83 ec 0c             	sub    esp,0xc
c000defc:	50                   	push   eax
c000defd:	e8 7b b6 ff ff       	call   c000957d <Virt::freeKernelVirtualPages(unsigned long)>
c000df02:	83 c4 10             	add    esp,0x10
c000df05:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df09:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000df0d:	89 14 c5 84 2c 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd37c],edx
c000df14:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000df18:	e9 bf fe ff ff       	jmp    c000dddc <loadACPITables(unsigned char*)+0x114>
c000df1d:	8d 76 00             	lea    esi,[esi+0x0]
c000df20:	90                   	nop
c000df21:	8d 76 00             	lea    esi,[esi+0x0]
c000df24:	83 c4 60             	add    esp,0x60
c000df27:	5b                   	pop    ebx
c000df28:	5e                   	pop    esi
c000df29:	5f                   	pop    edi
c000df2a:	c3                   	ret    
c000df2b:	90                   	nop

c000df2c <findRSDT(unsigned char*)>:
c000df2c:	57                   	push   edi
c000df2d:	56                   	push   esi
c000df2e:	53                   	push   ebx
c000df2f:	83 ec 50             	sub    esp,0x50
c000df32:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c000df37:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df3d:	83 e0 04             	and    eax,0x4
c000df40:	84 c0                	test   al,al
c000df42:	75 0c                	jne    c000df50 <findRSDT(unsigned char*)+0x24>
c000df44:	b8 00 00 00 00       	mov    eax,0x0
c000df49:	e9 26 01 00 00       	jmp    c000e074 <findRSDT(unsigned char*)+0x148>
c000df4e:	66 90                	xchg   ax,ax
c000df50:	89 e0                	mov    eax,esp
c000df52:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000df56:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000df5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000df5e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000df66:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000df6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000df72:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000df76:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000df7a:	89 c6                	mov    esi,eax
c000df7c:	89 d7                	mov    edi,edx
c000df7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df80:	89 c8                	mov    eax,ecx
c000df82:	89 fa                	mov    edx,edi
c000df84:	89 f3                	mov    ebx,esi
c000df86:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000df8a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000df8e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000df92:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000df96:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000df9a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000dfa2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dfa6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dfaa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dfae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dfb6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dfba:	25 ff 0f 00 00       	and    eax,0xfff
c000dfbf:	89 c6                	mov    esi,eax
c000dfc1:	8b 1d 70 07 02 c0    	mov    ebx,DWORD PTR ds:0xc0020770
c000dfc7:	83 ec 0c             	sub    esp,0xc
c000dfca:	6a 02                	push   0x2
c000dfcc:	e8 7c b2 ff ff       	call   c000924d <Virt::allocateKernelVirtualPages(int)>
c000dfd1:	83 c4 10             	add    esp,0x10
c000dfd4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000dfd8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dfde:	83 ec 0c             	sub    esp,0xc
c000dfe1:	6a 01                	push   0x1
c000dfe3:	6a 02                	push   0x2
c000dfe5:	50                   	push   eax
c000dfe6:	52                   	push   edx
c000dfe7:	53                   	push   ebx
c000dfe8:	e8 ef bb ff ff       	call   c0009bdc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dfed:	83 c4 20             	add    esp,0x20
c000dff0:	09 f0                	or     eax,esi
c000dff2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dff6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dffa:	25 ff 0f 00 00       	and    eax,0xfff
c000dfff:	89 c6                	mov    esi,eax
c000e001:	8b 1d 70 07 02 c0    	mov    ebx,DWORD PTR ds:0xc0020770
c000e007:	83 ec 0c             	sub    esp,0xc
c000e00a:	6a 02                	push   0x2
c000e00c:	e8 3c b2 ff ff       	call   c000924d <Virt::allocateKernelVirtualPages(int)>
c000e011:	83 c4 10             	add    esp,0x10
c000e014:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e018:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e01e:	83 ec 0c             	sub    esp,0xc
c000e021:	6a 01                	push   0x1
c000e023:	6a 02                	push   0x2
c000e025:	50                   	push   eax
c000e026:	52                   	push   edx
c000e027:	53                   	push   ebx
c000e028:	e8 af bb ff ff       	call   c0009bdc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e02d:	83 c4 20             	add    esp,0x20
c000e030:	09 f0                	or     eax,esi
c000e032:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e036:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e03b:	75 13                	jne    c000e050 <findRSDT(unsigned char*)+0x124>
c000e03d:	c6 05 80 2e 02 c0 00 	mov    BYTE PTR ds:0xc0022e80,0x0
c000e044:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e048:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e04c:	eb 22                	jmp    c000e070 <findRSDT(unsigned char*)+0x144>
c000e04e:	66 90                	xchg   ax,ax
c000e050:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e055:	75 11                	jne    c000e068 <findRSDT(unsigned char*)+0x13c>
c000e057:	c6 05 80 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e80,0x1
c000e05e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e062:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e066:	eb 08                	jmp    c000e070 <findRSDT(unsigned char*)+0x144>
c000e068:	b8 00 00 00 00       	mov    eax,0x0
c000e06d:	eb 05                	jmp    c000e074 <findRSDT(unsigned char*)+0x148>
c000e06f:	90                   	nop
c000e070:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e074:	83 c4 50             	add    esp,0x50
c000e077:	5b                   	pop    ebx
c000e078:	5e                   	pop    esi
c000e079:	5f                   	pop    edi
c000e07a:	c3                   	ret    
c000e07b:	90                   	nop

c000e07c <findDataTable(unsigned char*, char*)>:
c000e07c:	83 ec 1c             	sub    esp,0x1c
c000e07f:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c000e084:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e08a:	83 e0 04             	and    eax,0x4
c000e08d:	84 c0                	test   al,al
c000e08f:	75 07                	jne    c000e098 <findDataTable(unsigned char*, char*)+0x1c>
c000e091:	b8 00 00 00 00       	mov    eax,0x0
c000e096:	eb 58                	jmp    c000e0f0 <findDataTable(unsigned char*, char*)+0x74>
c000e098:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e0a0:	a1 6c 2c 02 c0       	mov    eax,ds:0xc0022c6c
c000e0a5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e0a9:	7d 3d                	jge    c000e0e8 <findDataTable(unsigned char*, char*)+0x6c>
c000e0ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0af:	c1 e0 03             	shl    eax,0x3
c000e0b2:	05 80 2c 02 c0       	add    eax,0xc0022c80
c000e0b7:	83 ec 04             	sub    esp,0x4
c000e0ba:	6a 04                	push   0x4
c000e0bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0c0:	50                   	push   eax
c000e0c1:	e8 ca 22 ff ff       	call   c0000390 <memcmp>
c000e0c6:	83 c4 10             	add    esp,0x10
c000e0c9:	85 c0                	test   eax,eax
c000e0cb:	0f 94 c0             	sete   al
c000e0ce:	84 c0                	test   al,al
c000e0d0:	74 0e                	je     c000e0e0 <findDataTable(unsigned char*, char*)+0x64>
c000e0d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0d6:	8b 04 c5 84 2c 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd37c]
c000e0dd:	eb 11                	jmp    c000e0f0 <findDataTable(unsigned char*, char*)+0x74>
c000e0df:	90                   	nop
c000e0e0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e0e4:	eb ba                	jmp    c000e0a0 <findDataTable(unsigned char*, char*)+0x24>
c000e0e6:	66 90                	xchg   ax,ax
c000e0e8:	b8 00 00 00 00       	mov    eax,0x0
c000e0ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e0f0:	83 c4 1c             	add    esp,0x1c
c000e0f3:	c3                   	ret    

c000e0f4 <scanMADT()>:
c000e0f4:	53                   	push   ebx
c000e0f5:	83 ec 38             	sub    esp,0x38
c000e0f8:	a1 90 06 02 c0       	mov    eax,ds:0xc0020690
c000e0fd:	25 00 04 00 00       	and    eax,0x400
c000e102:	74 14                	je     c000e118 <scanMADT()+0x24>
c000e104:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c000e109:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e10f:	83 e2 fb             	and    edx,0xfffffffb
c000e112:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e118:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c000e11d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e123:	83 e0 04             	and    eax,0x4
c000e126:	84 c0                	test   al,al
c000e128:	0f 84 8a 04 00 00    	je     c000e5b8 <scanMADT()+0x4c4>
c000e12e:	e8 05 fb ff ff       	call   c000dc38 <findRSDP()>
c000e133:	a3 8c 2e 02 c0       	mov    ds:0xc0022e8c,eax
c000e138:	a1 8c 2e 02 c0       	mov    eax,ds:0xc0022e8c
c000e13d:	85 c0                	test   eax,eax
c000e13f:	75 1b                	jne    c000e15c <scanMADT()+0x68>
c000e141:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c000e146:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e14c:	83 e2 fb             	and    edx,0xfffffffb
c000e14f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e155:	e9 66 04 00 00       	jmp    c000e5c0 <scanMADT()+0x4cc>
c000e15a:	66 90                	xchg   ax,ax
c000e15c:	a1 8c 2e 02 c0       	mov    eax,ds:0xc0022e8c
c000e161:	83 ec 0c             	sub    esp,0xc
c000e164:	50                   	push   eax
c000e165:	e8 c2 fd ff ff       	call   c000df2c <findRSDT(unsigned char*)>
c000e16a:	83 c4 10             	add    esp,0x10
c000e16d:	a3 88 2e 02 c0       	mov    ds:0xc0022e88,eax
c000e172:	a1 88 2e 02 c0       	mov    eax,ds:0xc0022e88
c000e177:	85 c0                	test   eax,eax
c000e179:	75 19                	jne    c000e194 <scanMADT()+0xa0>
c000e17b:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c000e180:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e186:	83 e2 fb             	and    edx,0xfffffffb
c000e189:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e18f:	e9 2c 04 00 00       	jmp    c000e5c0 <scanMADT()+0x4cc>
c000e194:	a1 88 2e 02 c0       	mov    eax,ds:0xc0022e88
c000e199:	83 ec 0c             	sub    esp,0xc
c000e19c:	50                   	push   eax
c000e19d:	e8 26 fb ff ff       	call   c000dcc8 <loadACPITables(unsigned char*)>
c000e1a2:	83 c4 10             	add    esp,0x10
c000e1a5:	a1 88 2e 02 c0       	mov    eax,ds:0xc0022e88
c000e1aa:	83 ec 08             	sub    esp,0x8
c000e1ad:	68 c8 e0 01 c0       	push   0xc001e0c8
c000e1b2:	50                   	push   eax
c000e1b3:	e8 c4 fe ff ff       	call   c000e07c <findDataTable(unsigned char*, char*)>
c000e1b8:	83 c4 10             	add    esp,0x10
c000e1bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e1bf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e1c4:	75 1a                	jne    c000e1e0 <scanMADT()+0xec>
c000e1c6:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c000e1cb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1d1:	83 e2 fe             	and    edx,0xfffffffe
c000e1d4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1da:	e9 e1 03 00 00       	jmp    c000e5c0 <scanMADT()+0x4cc>
c000e1df:	90                   	nop
c000e1e0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e1e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e1ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e1ef:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e1f3:	0f 87 c7 03 00 00    	ja     c000e5c0 <scanMADT()+0x4cc>
c000e1f9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e201:	0f 87 b9 03 00 00    	ja     c000e5c0 <scanMADT()+0x4cc>
c000e207:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e20b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e20f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e213:	8d 50 01             	lea    edx,[eax+0x1]
c000e216:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e21a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e21e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e222:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e226:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e22a:	8d 50 01             	lea    edx,[eax+0x1]
c000e22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e235:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e239:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e23d:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e242:	0f 86 74 03 00 00    	jbe    c000e5bc <scanMADT()+0x4c8>
c000e248:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e24d:	75 5d                	jne    c000e2ac <scanMADT()+0x1b8>
c000e24f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e253:	8d 50 01             	lea    edx,[eax+0x1]
c000e256:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e25a:	8a 15 80 30 02 c0    	mov    dl,BYTE PTR ds:0xc0023080
c000e260:	81 e2 ff 00 00 00    	and    edx,0xff
c000e266:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e26a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e26e:	88 82 c0 30 02 c0    	mov    BYTE PTR [edx-0x3ffdcf40],al
c000e274:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e278:	8d 42 01             	lea    eax,[edx+0x1]
c000e27b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e27f:	a0 80 30 02 c0       	mov    al,ds:0xc0023080
c000e284:	8d 48 01             	lea    ecx,[eax+0x1]
c000e287:	88 0d 80 30 02 c0    	mov    BYTE PTR ds:0xc0023080,cl
c000e28d:	25 ff 00 00 00       	and    eax,0xff
c000e292:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e296:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e29a:	88 90 a0 30 02 c0    	mov    BYTE PTR [eax-0x3ffdcf60],dl
c000e2a0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e2a5:	e9 f6 02 00 00       	jmp    c000e5a0 <scanMADT()+0x4ac>
c000e2aa:	66 90                	xchg   ax,ax
c000e2ac:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e2b1:	0f 85 29 01 00 00    	jne    c000e3e0 <scanMADT()+0x2ec>
c000e2b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2bb:	8d 50 01             	lea    edx,[eax+0x1]
c000e2be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2c2:	8a 15 40 2f 02 c0    	mov    dl,BYTE PTR ds:0xc0022f40
c000e2c8:	81 e2 ff 00 00 00    	and    edx,0xff
c000e2ce:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2d2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e2d6:	88 82 60 2f 02 c0    	mov    BYTE PTR [edx-0x3ffdd0a0],al
c000e2dc:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e2e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e2e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2e8:	01 d0                	add    eax,edx
c000e2ea:	83 c0 2c             	add    eax,0x2c
c000e2ed:	8a 00                	mov    al,BYTE PTR [eax]
c000e2ef:	31 d2                	xor    edx,edx
c000e2f1:	88 c2                	mov    dl,al
c000e2f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2f7:	8d 48 01             	lea    ecx,[eax+0x1]
c000e2fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e2fe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e302:	25 ff 00 00 00       	and    eax,0xff
c000e307:	c1 e0 08             	shl    eax,0x8
c000e30a:	89 d1                	mov    ecx,edx
c000e30c:	09 c1                	or     ecx,eax
c000e30e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e312:	8d 50 02             	lea    edx,[eax+0x2]
c000e315:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e319:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e31d:	25 ff 00 00 00       	and    eax,0xff
c000e322:	c1 e0 10             	shl    eax,0x10
c000e325:	09 c1                	or     ecx,eax
c000e327:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e32b:	8d 50 03             	lea    edx,[eax+0x3]
c000e32e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e332:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e336:	25 ff 00 00 00       	and    eax,0xff
c000e33b:	c1 e0 18             	shl    eax,0x18
c000e33e:	09 c1                	or     ecx,eax
c000e340:	89 ca                	mov    edx,ecx
c000e342:	a0 40 2f 02 c0       	mov    al,ds:0xc0022f40
c000e347:	25 ff 00 00 00       	and    eax,0xff
c000e34c:	89 14 85 80 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd080],edx
c000e353:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e358:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e35c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e360:	01 d0                	add    eax,edx
c000e362:	83 c0 2c             	add    eax,0x2c
c000e365:	8a 00                	mov    al,BYTE PTR [eax]
c000e367:	31 d2                	xor    edx,edx
c000e369:	88 c2                	mov    dl,al
c000e36b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e36f:	8d 48 01             	lea    ecx,[eax+0x1]
c000e372:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e376:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e37a:	25 ff 00 00 00       	and    eax,0xff
c000e37f:	c1 e0 08             	shl    eax,0x8
c000e382:	89 d1                	mov    ecx,edx
c000e384:	09 c1                	or     ecx,eax
c000e386:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e38a:	8d 50 02             	lea    edx,[eax+0x2]
c000e38d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e391:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e395:	25 ff 00 00 00       	and    eax,0xff
c000e39a:	c1 e0 10             	shl    eax,0x10
c000e39d:	09 c1                	or     ecx,eax
c000e39f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3a3:	8d 50 03             	lea    edx,[eax+0x3]
c000e3a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3aa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3ae:	25 ff 00 00 00       	and    eax,0xff
c000e3b3:	c1 e0 18             	shl    eax,0x18
c000e3b6:	09 c1                	or     ecx,eax
c000e3b8:	89 ca                	mov    edx,ecx
c000e3ba:	a0 40 2f 02 c0       	mov    al,ds:0xc0022f40
c000e3bf:	25 ff 00 00 00       	and    eax,0xff
c000e3c4:	89 14 85 00 30 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd000],edx
c000e3cb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e3d0:	a0 40 2f 02 c0       	mov    al,ds:0xc0022f40
c000e3d5:	40                   	inc    eax
c000e3d6:	a2 40 2f 02 c0       	mov    ds:0xc0022f40,al
c000e3db:	e9 c0 01 00 00       	jmp    c000e5a0 <scanMADT()+0x4ac>
c000e3e0:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e3e5:	0f 85 fd 00 00 00    	jne    c000e4e8 <scanMADT()+0x3f4>
c000e3eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3ef:	8d 50 01             	lea    edx,[eax+0x1]
c000e3f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3fa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e3fe:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e402:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e406:	8d 50 01             	lea    edx,[eax+0x1]
c000e409:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e40d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e411:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e415:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e419:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e41d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e421:	01 d0                	add    eax,edx
c000e423:	83 c0 2c             	add    eax,0x2c
c000e426:	8a 00                	mov    al,BYTE PTR [eax]
c000e428:	31 d2                	xor    edx,edx
c000e42a:	88 c2                	mov    dl,al
c000e42c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e430:	8d 48 01             	lea    ecx,[eax+0x1]
c000e433:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e437:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e43b:	25 ff 00 00 00       	and    eax,0xff
c000e440:	c1 e0 08             	shl    eax,0x8
c000e443:	89 d1                	mov    ecx,edx
c000e445:	09 c1                	or     ecx,eax
c000e447:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e44b:	8d 50 02             	lea    edx,[eax+0x2]
c000e44e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e452:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e456:	25 ff 00 00 00       	and    eax,0xff
c000e45b:	c1 e0 10             	shl    eax,0x10
c000e45e:	09 c1                	or     ecx,eax
c000e460:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e464:	8d 50 03             	lea    edx,[eax+0x3]
c000e467:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e46b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e46f:	25 ff 00 00 00       	and    eax,0xff
c000e474:	c1 e0 18             	shl    eax,0x18
c000e477:	09 c8                	or     eax,ecx
c000e479:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e47d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e482:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e486:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e48a:	01 d0                	add    eax,edx
c000e48c:	83 c0 2c             	add    eax,0x2c
c000e48f:	8a 00                	mov    al,BYTE PTR [eax]
c000e491:	25 ff 00 00 00       	and    eax,0xff
c000e496:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e49a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e49d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4a1:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e4a5:	81 e2 ff 00 00 00    	and    edx,0xff
c000e4ab:	c1 e2 08             	shl    edx,0x8
c000e4ae:	09 d0                	or     eax,edx
c000e4b0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e4b5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e4ba:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e4be:	25 ff 00 00 00       	and    eax,0xff
c000e4c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e4c7:	88 90 80 f4 01 c0    	mov    BYTE PTR [eax-0x3ffe0b80],dl
c000e4cd:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e4d1:	31 d2                	xor    edx,edx
c000e4d3:	88 c2                	mov    dl,al
c000e4d5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e4da:	66 89 84 12 20 2f 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdd0e0],ax
c000e4e2:	e9 b9 00 00 00       	jmp    c000e5a0 <scanMADT()+0x4ac>
c000e4e7:	90                   	nop
c000e4e8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e4ed:	0f 85 a1 00 00 00    	jne    c000e594 <scanMADT()+0x4a0>
c000e4f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4f7:	8d 50 01             	lea    edx,[eax+0x1]
c000e4fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e502:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e506:	25 ff 00 00 00       	and    eax,0xff
c000e50b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e50f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e517:	01 d0                	add    eax,edx
c000e519:	83 c0 2c             	add    eax,0x2c
c000e51c:	8a 00                	mov    al,BYTE PTR [eax]
c000e51e:	31 d2                	xor    edx,edx
c000e520:	88 c2                	mov    dl,al
c000e522:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e526:	8d 48 01             	lea    ecx,[eax+0x1]
c000e529:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e52d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e531:	25 ff 00 00 00       	and    eax,0xff
c000e536:	c1 e0 08             	shl    eax,0x8
c000e539:	09 d0                	or     eax,edx
c000e53b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e53f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e544:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e548:	8d 50 01             	lea    edx,[eax+0x1]
c000e54b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e54f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e553:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e557:	25 ff 00 00 00       	and    eax,0xff
c000e55c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e564:	c1 e0 08             	shl    eax,0x8
c000e567:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e56b:	89 c1                	mov    ecx,eax
c000e56d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e571:	c1 e0 18             	shl    eax,0x18
c000e574:	89 c3                	mov    ebx,eax
c000e576:	a1 90 2e 02 c0       	mov    eax,ds:0xc0022e90
c000e57b:	8d 50 01             	lea    edx,[eax+0x1]
c000e57e:	89 15 90 2e 02 c0    	mov    DWORD PTR ds:0xc0022e90,edx
c000e584:	09 d9                	or     ecx,ebx
c000e586:	89 ca                	mov    edx,ecx
c000e588:	89 14 85 a0 2e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd160],edx
c000e58f:	eb 0f                	jmp    c000e5a0 <scanMADT()+0x4ac>
c000e591:	8d 76 00             	lea    esi,[esi+0x0]
c000e594:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e599:	75 05                	jne    c000e5a0 <scanMADT()+0x4ac>
c000e59b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e5a0:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e5a4:	31 d2                	xor    edx,edx
c000e5a6:	88 c2                	mov    dl,al
c000e5a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e5ac:	01 d0                	add    eax,edx
c000e5ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e5b2:	e9 31 fc ff ff       	jmp    c000e1e8 <scanMADT()+0xf4>
c000e5b7:	90                   	nop
c000e5b8:	90                   	nop
c000e5b9:	eb 05                	jmp    c000e5c0 <scanMADT()+0x4cc>
c000e5bb:	90                   	nop
c000e5bc:	90                   	nop
c000e5bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e5c0:	83 c4 38             	add    esp,0x38
c000e5c3:	5b                   	pop    ebx
c000e5c4:	c3                   	ret    
c000e5c5:	90                   	nop
c000e5c6:	66 90                	xchg   ax,ax

c000e5c8 <ACPI::ACPI()>:
c000e5c8:	83 ec 0c             	sub    esp,0xc
c000e5cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5cf:	83 ec 08             	sub    esp,0x8
c000e5d2:	68 cd e0 01 c0       	push   0xc001e0cd
c000e5d7:	50                   	push   eax
c000e5d8:	e8 9b d4 ff ff       	call   c000ba78 <Device::Device(char const*)>
c000e5dd:	83 c4 10             	add    esp,0x10
c000e5e0:	ba 04 e2 01 c0       	mov    edx,0xc001e204
c000e5e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e9:	89 10                	mov    DWORD PTR [eax],edx
c000e5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ef:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e5f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5fa:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e608:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e612:	e8 dd fa ff ff       	call   c000e0f4 <scanMADT()>
c000e617:	90                   	nop
c000e618:	83 c4 0c             	add    esp,0xc
c000e61b:	c3                   	ret    

c000e61c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e61c:	83 ec 2c             	sub    esp,0x2c
c000e61f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e623:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e627:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e62b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e62f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e634:	88 d0                	mov    al,dl
c000e636:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e63a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e63f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e647:	90                   	nop
c000e648:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e64c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e652:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e656:	0f 8d 9c 00 00 00    	jge    c000e6f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e65c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e660:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e664:	83 c2 2a             	add    edx,0x2a
c000e667:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e66b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e670:	75 7a                	jne    c000e6ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e672:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e676:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e67a:	83 c2 2a             	add    edx,0x2a
c000e67d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e681:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e685:	75 65                	jne    c000e6ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e687:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e68c:	74 3a                	je     c000e6c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e68e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e692:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e696:	83 c2 2a             	add    edx,0x2a
c000e699:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e69d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e6a4:	39 c2                	cmp    edx,eax
c000e6a6:	74 10                	je     c000e6b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e6a8:	83 ec 0c             	sub    esp,0xc
c000e6ab:	68 48 e0 01 c0       	push   0xc001e048
c000e6b0:	e8 4e 1a 00 00       	call   c0010103 <KePanic(char const*)>
c000e6b5:	83 c4 10             	add    esp,0x10
c000e6b8:	83 ec 0c             	sub    esp,0xc
c000e6bb:	68 d2 e0 01 c0       	push   0xc001e0d2
c000e6c0:	e8 3e 1a 00 00       	call   c0010103 <KePanic(char const*)>
c000e6c5:	83 c4 10             	add    esp,0x10
c000e6c8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e6cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6d4:	83 c2 2a             	add    edx,0x2a
c000e6d7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e6db:	8b 02                	mov    eax,DWORD PTR [edx]
c000e6dd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e6e0:	89 01                	mov    DWORD PTR [ecx],eax
c000e6e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e6e5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e6ea:	66 90                	xchg   ax,ax
c000e6ec:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e6f0:	e9 53 ff ff ff       	jmp    c000e648 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e6f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e6f8:	90                   	nop
c000e6f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6fd:	83 c4 2c             	add    esp,0x2c
c000e700:	c2 04 00             	ret    0x4
c000e703:	90                   	nop

c000e704 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e704:	83 ec 1c             	sub    esp,0x1c
c000e707:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e70b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e70f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e713:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e718:	88 c8                	mov    al,cl
c000e71a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e71e:	88 d0                	mov    al,dl
c000e720:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e724:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e728:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e72e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e732:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e735:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e739:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e73d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e741:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e747:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e74b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e74e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e752:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e757:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e75b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e761:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e765:	8d 48 01             	lea    ecx,[eax+0x1]
c000e768:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e76c:	83 c2 2a             	add    edx,0x2a
c000e76f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e773:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e777:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e77d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e781:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e784:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e788:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e78c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e790:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e796:	8d 50 01             	lea    edx,[eax+0x1]
c000e799:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e79d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e7a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7a7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7ad:	3d 00 02 00 00       	cmp    eax,0x200
c000e7b2:	75 10                	jne    c000e7c4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e7b4:	83 ec 0c             	sub    esp,0xc
c000e7b7:	68 e1 e0 01 c0       	push   0xc001e0e1
c000e7bc:	e8 42 19 00 00       	call   c0010103 <KePanic(char const*)>
c000e7c1:	83 c4 10             	add    esp,0x10
c000e7c4:	90                   	nop
c000e7c5:	83 c4 1c             	add    esp,0x1c
c000e7c8:	c3                   	ret    
c000e7c9:	90                   	nop
c000e7ca:	66 90                	xchg   ax,ax

c000e7cc <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e7cc:	b8 00 00 00 00       	mov    eax,0x0
c000e7d1:	c3                   	ret    
c000e7d2:	66 90                	xchg   ax,ax

c000e7d4 <ACPI::detectPCI()>:
c000e7d4:	53                   	push   ebx
c000e7d5:	83 ec 28             	sub    esp,0x28
c000e7d8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e7dd:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e7e2:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c000e7e7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e7ed:	83 e0 04             	and    eax,0x4
c000e7f0:	84 c0                	test   al,al
c000e7f2:	74 2c                	je     c000e820 <ACPI::detectPCI()+0x4c>
c000e7f4:	a1 88 2e 02 c0       	mov    eax,ds:0xc0022e88
c000e7f9:	83 ec 08             	sub    esp,0x8
c000e7fc:	68 fe e0 01 c0       	push   0xc001e0fe
c000e801:	50                   	push   eax
c000e802:	e8 75 f8 ff ff       	call   c000e07c <findDataTable(unsigned char*, char*)>
c000e807:	83 c4 10             	add    esp,0x10
c000e80a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e80e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e813:	74 0b                	je     c000e820 <ACPI::detectPCI()+0x4c>
c000e815:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e81a:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e81f:	90                   	nop
c000e820:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e828:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e82c:	8a 00                	mov    al,BYTE PTR [eax]
c000e82e:	3c 01                	cmp    al,0x1
c000e830:	75 0e                	jne    c000e840 <ACPI::detectPCI()+0x6c>
c000e832:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e837:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e83c:	eb 2a                	jmp    c000e868 <ACPI::detectPCI()+0x94>
c000e83e:	66 90                	xchg   ax,ax
c000e840:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e844:	8a 00                	mov    al,BYTE PTR [eax]
c000e846:	3c 02                	cmp    al,0x2
c000e848:	75 1e                	jne    c000e868 <ACPI::detectPCI()+0x94>
c000e84a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e84f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e854:	74 12                	je     c000e868 <ACPI::detectPCI()+0x94>
c000e856:	83 ec 0c             	sub    esp,0xc
c000e859:	68 78 e0 01 c0       	push   0xc001e078
c000e85e:	e8 a0 18 00 00       	call   c0010103 <KePanic(char const*)>
c000e863:	83 c4 10             	add    esp,0x10
c000e866:	66 90                	xchg   ax,ax
c000e868:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e86c:	83 f0 01             	xor    eax,0x1
c000e86f:	84 c0                	test   al,al
c000e871:	74 41                	je     c000e8b4 <ACPI::detectPCI()+0xe0>
c000e873:	e8 b8 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e878:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e87c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e881:	75 0d                	jne    c000e890 <ACPI::detectPCI()+0xbc>
c000e883:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e888:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e88d:	eb 25                	jmp    c000e8b4 <ACPI::detectPCI()+0xe0>
c000e88f:	90                   	nop
c000e890:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e895:	75 1d                	jne    c000e8b4 <ACPI::detectPCI()+0xe0>
c000e897:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e89c:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8a1:	74 11                	je     c000e8b4 <ACPI::detectPCI()+0xe0>
c000e8a3:	83 ec 0c             	sub    esp,0xc
c000e8a6:	68 78 e0 01 c0       	push   0xc001e078
c000e8ab:	e8 53 18 00 00       	call   c0010103 <KePanic(char const*)>
c000e8b0:	83 c4 10             	add    esp,0x10
c000e8b3:	90                   	nop
c000e8b4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e8b9:	0f 84 85 00 00 00    	je     c000e944 <ACPI::detectPCI()+0x170>
c000e8bf:	83 ec 0c             	sub    esp,0xc
c000e8c2:	68 03 e1 01 c0       	push   0xc001e103
c000e8c7:	e8 bf 11 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c000e8cc:	83 c4 10             	add    esp,0x10
c000e8cf:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e8d7:	83 ec 0c             	sub    esp,0xc
c000e8da:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e8de:	e8 22 8f ff ff       	call   c0007805 <malloc>
c000e8e3:	83 c4 10             	add    esp,0x10
c000e8e6:	89 c3                	mov    ebx,eax
c000e8e8:	83 ec 0c             	sub    esp,0xc
c000e8eb:	53                   	push   ebx
c000e8ec:	e8 ad 98 00 00       	call   c001819e <PCI::PCI()>
c000e8f1:	83 c4 10             	add    esp,0x10
c000e8f4:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e8f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8fc:	83 ec 08             	sub    esp,0x8
c000e8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e903:	50                   	push   eax
c000e904:	e8 d7 cf ff ff       	call   c000b8e0 <Device::addChild(Device*)>
c000e909:	83 c4 10             	add    esp,0x10
c000e90c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e910:	8b 00                	mov    eax,DWORD PTR [eax]
c000e912:	83 c0 08             	add    eax,0x8
c000e915:	8b 00                	mov    eax,DWORD PTR [eax]
c000e917:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e91c:	74 0a                	je     c000e928 <ACPI::detectPCI()+0x154>
c000e91e:	ba 01 00 00 00       	mov    edx,0x1
c000e923:	eb 0b                	jmp    c000e930 <ACPI::detectPCI()+0x15c>
c000e925:	8d 76 00             	lea    esi,[esi+0x0]
c000e928:	ba 02 00 00 00       	mov    edx,0x2
c000e92d:	8d 76 00             	lea    esi,[esi+0x0]
c000e930:	6a 00                	push   0x0
c000e932:	6a 00                	push   0x0
c000e934:	52                   	push   edx
c000e935:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e939:	ff d0                	call   eax
c000e93b:	83 c4 10             	add    esp,0x10
c000e93e:	e9 91 00 00 00       	jmp    c000e9d4 <ACPI::detectPCI()+0x200>
c000e943:	90                   	nop
c000e944:	83 ec 0c             	sub    esp,0xc
c000e947:	68 1b e1 01 c0       	push   0xc001e11b
c000e94c:	e8 3a 11 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c000e951:	83 c4 10             	add    esp,0x10
c000e954:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000e95b:	83 ec 0c             	sub    esp,0xc
c000e95e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e962:	e8 9e 8e ff ff       	call   c0007805 <malloc>
c000e967:	83 c4 10             	add    esp,0x10
c000e96a:	89 c3                	mov    ebx,eax
c000e96c:	83 ec 0c             	sub    esp,0xc
c000e96f:	53                   	push   ebx
c000e970:	e8 55 a3 00 00       	call   c0018cca <IDE::IDE()>
c000e975:	83 c4 10             	add    esp,0x10
c000e978:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e97c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e980:	83 ec 08             	sub    esp,0x8
c000e983:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e987:	50                   	push   eax
c000e988:	e8 53 cf ff ff       	call   c000b8e0 <Device::addChild(Device*)>
c000e98d:	83 c4 10             	add    esp,0x10
c000e990:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e994:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000e99e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9a2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000e9ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9af:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000e9b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9be:	83 c0 08             	add    eax,0x8
c000e9c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9c3:	6a 00                	push   0x0
c000e9c5:	6a 00                	push   0x0
c000e9c7:	6a 00                	push   0x0
c000e9c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9cd:	ff d0                	call   eax
c000e9cf:	83 c4 10             	add    esp,0x10
c000e9d2:	66 90                	xchg   ax,ax
c000e9d4:	90                   	nop
c000e9d5:	83 c4 28             	add    esp,0x28
c000e9d8:	5b                   	pop    ebx
c000e9d9:	c3                   	ret    
c000e9da:	66 90                	xchg   ax,ax

c000e9dc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000e9dc:	83 ec 1c             	sub    esp,0x1c
c000e9df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e9e3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e9e6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e9ea:	8b 15 78 06 02 c0    	mov    edx,DWORD PTR ds:0xc0020678
c000e9f0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e9f4:	25 ff 00 00 00       	and    eax,0xff
c000e9f9:	83 ec 08             	sub    esp,0x8
c000e9fc:	50                   	push   eax
c000e9fd:	52                   	push   edx
c000e9fe:	e8 ef 84 ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c000ea03:	83 c4 10             	add    esp,0x10
c000ea06:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ea0a:	8b 15 78 06 02 c0    	mov    edx,DWORD PTR ds:0xc0020678
c000ea10:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea14:	25 ff 00 00 00       	and    eax,0xff
c000ea19:	83 ec 04             	sub    esp,0x4
c000ea1c:	6a 01                	push   0x1
c000ea1e:	50                   	push   eax
c000ea1f:	52                   	push   edx
c000ea20:	e8 e3 85 ff ff       	call   c0007008 <Computer::writeCMOS(unsigned char, unsigned char)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	90                   	nop
c000ea29:	83 c4 1c             	add    esp,0x1c
c000ea2c:	c3                   	ret    
c000ea2d:	90                   	nop
c000ea2e:	66 90                	xchg   ax,ax

c000ea30 <ACPI::sleep()>:
c000ea30:	83 ec 0c             	sub    esp,0xc
c000ea33:	a1 60 2c 02 c0       	mov    eax,ds:0xc0022c60
c000ea38:	85 c0                	test   eax,eax
c000ea3a:	74 08                	je     c000ea44 <ACPI::sleep()+0x14>
c000ea3c:	a1 60 2c 02 c0       	mov    eax,ds:0xc0022c60
c000ea41:	ff d0                	call   eax
c000ea43:	90                   	nop
c000ea44:	90                   	nop
c000ea45:	83 c4 0c             	add    esp,0xc
c000ea48:	c3                   	ret    
c000ea49:	90                   	nop
c000ea4a:	66 90                	xchg   ax,ax

c000ea4c <ACPI::open(int, int, void*)>:
c000ea4c:	57                   	push   edi
c000ea4d:	56                   	push   esi
c000ea4e:	53                   	push   ebx
c000ea4f:	81 ec 70 01 00 00    	sub    esp,0x170
c000ea55:	83 ec 0c             	sub    esp,0xc
c000ea58:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ea5f:	e8 70 fd ff ff       	call   c000e7d4 <ACPI::detectPCI()>
c000ea64:	83 c4 10             	add    esp,0x10
c000ea67:	83 ec 0c             	sub    esp,0xc
c000ea6a:	68 a0 e0 01 c0       	push   0xc001e0a0
c000ea6f:	e8 17 10 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c000ea74:	83 c4 10             	add    esp,0x10
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 30 e1 01 c0       	push   0xc001e130
c000ea7f:	e8 02 36 00 00       	call   c0012086 <Thr::loadKernelSymbolTable(char const*)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ea8f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ea9a:	83 ec 0c             	sub    esp,0xc
c000ea9d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eaa4:	e8 5c 8d ff ff       	call   c0007805 <malloc>
c000eaa9:	83 c4 10             	add    esp,0x10
c000eaac:	89 c3                	mov    ebx,eax
c000eaae:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c000eab3:	83 ec 04             	sub    esp,0x4
c000eab6:	50                   	push   eax
c000eab7:	68 4e e1 01 c0       	push   0xc001e14e
c000eabc:	53                   	push   ebx
c000eabd:	e8 54 bf ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c000eac2:	83 c4 10             	add    esp,0x10
c000eac5:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eacc:	83 ec 08             	sub    esp,0x8
c000eacf:	6a 01                	push   0x1
c000ead1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ead8:	e8 f9 bf ff ff       	call   c000aad6 <File::open(FileOpenMode)>
c000eadd:	83 c4 10             	add    esp,0x10
c000eae0:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eae7:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eaef:	75 17                	jne    c000eb08 <ACPI::open(int, int, void*)+0xbc>
c000eaf1:	83 ec 0c             	sub    esp,0xc
c000eaf4:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eafb:	e8 34 c0 ff ff       	call   c000ab34 <File::close()>
c000eb00:	83 c4 10             	add    esp,0x10
c000eb03:	eb 0b                	jmp    c000eb10 <ACPI::open(int, int, void*)+0xc4>
c000eb05:	8d 76 00             	lea    esi,[esi+0x0]
c000eb08:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eb10:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eb18:	74 1e                	je     c000eb38 <ACPI::open(int, int, void*)+0xec>
c000eb1a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000eb21:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb23:	83 c0 08             	add    eax,0x8
c000eb26:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb28:	83 ec 0c             	sub    esp,0xc
c000eb2b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb32:	ff d0                	call   eax
c000eb34:	83 c4 10             	add    esp,0x10
c000eb37:	90                   	nop
c000eb38:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000eb3f:	83 f0 01             	xor    eax,0x1
c000eb42:	84 c0                	test   al,al
c000eb44:	74 42                	je     c000eb88 <ACPI::open(int, int, void*)+0x13c>
c000eb46:	83 ec 0c             	sub    esp,0xc
c000eb49:	68 6c e1 01 c0       	push   0xc001e16c
c000eb4e:	e8 38 0f 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c000eb53:	83 c4 10             	add    esp,0x10
c000eb56:	83 ec 04             	sub    esp,0x4
c000eb59:	6a 0c                	push   0xc
c000eb5b:	68 87 e1 01 c0       	push   0xc001e187
c000eb60:	68 98 e1 01 c0       	push   0xc001e198
c000eb65:	e8 47 2b 00 00       	call   c00116b1 <Reg::readIntWithDefault(char*, char*, int)>
c000eb6a:	83 c4 10             	add    esp,0x10
c000eb6d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000eb74:	83 ec 0c             	sub    esp,0xc
c000eb77:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000eb7e:	e8 d4 a8 ff ff       	call   c0009457 <Virt::setupPageSwapping(int)>
c000eb83:	83 c4 10             	add    esp,0x10
c000eb86:	66 90                	xchg   ax,ax
c000eb88:	83 ec 0c             	sub    esp,0xc
c000eb8b:	68 1f d2 01 c0       	push   0xc001d21f
c000eb90:	e8 f6 0e 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c000eb95:	83 c4 10             	add    esp,0x10
c000eb98:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000eb9f:	83 ec 08             	sub    esp,0x8
c000eba2:	6a 12                	push   0x12
c000eba4:	50                   	push   eax
c000eba5:	e8 4e d0 ff ff       	call   c000bbf8 <getDevicesOfType(DeviceType)>
c000ebaa:	83 c4 0c             	add    esp,0xc
c000ebad:	8d 76 00             	lea    esi,[esi+0x0]
c000ebb0:	83 ec 0c             	sub    esp,0xc
c000ebb3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ebba:	50                   	push   eax
c000ebbb:	e8 5c da 00 00       	call   c001c61c <LinkedList<Device>::isEmpty()>
c000ebc0:	83 c4 10             	add    esp,0x10
c000ebc3:	83 f0 01             	xor    eax,0x1
c000ebc6:	84 c0                	test   al,al
c000ebc8:	0f 84 46 01 00 00    	je     c000ed14 <ACPI::open(int, int, void*)+0x2c8>
c000ebce:	83 ec 0c             	sub    esp,0xc
c000ebd1:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ebd8:	50                   	push   eax
c000ebd9:	e8 5a da 00 00       	call   c001c638 <LinkedList<Device>::getFirstElement()>
c000ebde:	83 c4 10             	add    esp,0x10
c000ebe1:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ebe8:	83 ec 0c             	sub    esp,0xc
c000ebeb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ebf2:	50                   	push   eax
c000ebf3:	e8 48 da 00 00       	call   c001c640 <LinkedList<Device>::removeFirst()>
c000ebf8:	83 c4 10             	add    esp,0x10
c000ebfb:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ec02:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ec09:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ec10:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ec14:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ec1a:	ba 09 00 00 00       	mov    edx,0x9
c000ec1f:	fc                   	cld    
c000ec20:	89 c7                	mov    edi,eax
c000ec22:	89 de                	mov    esi,ebx
c000ec24:	89 d1                	mov    ecx,edx
c000ec26:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec28:	83 ec 08             	sub    esp,0x8
c000ec2b:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ec2f:	50                   	push   eax
c000ec30:	83 ec 24             	sub    esp,0x24
c000ec33:	89 e0                	mov    eax,esp
c000ec35:	89 c3                	mov    ebx,eax
c000ec37:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ec3b:	ba 09 00 00 00       	mov    edx,0x9
c000ec40:	89 df                	mov    edi,ebx
c000ec42:	89 c6                	mov    esi,eax
c000ec44:	89 d1                	mov    ecx,edx
c000ec46:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec48:	e8 33 9a 00 00       	call   c0018680 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ec4d:	83 c4 30             	add    esp,0x30
c000ec50:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ec57:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ec5f:	0f 84 4b ff ff ff    	je     c000ebb0 <ACPI::open(int, int, void*)+0x164>
c000ec65:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ec70:	83 ec 0c             	sub    esp,0xc
c000ec73:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ec7a:	e8 86 8b ff ff       	call   c0007805 <malloc>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	89 c3                	mov    ebx,eax
c000ec84:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c000ec89:	83 ec 04             	sub    esp,0x4
c000ec8c:	50                   	push   eax
c000ec8d:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ec94:	53                   	push   ebx
c000ec95:	e8 7c bd ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c000ec9a:	83 c4 10             	add    esp,0x10
c000ec9d:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000eca4:	83 ec 0c             	sub    esp,0xc
c000eca7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ecae:	e8 91 c0 ff ff       	call   c000ad44 <File::exists()>
c000ecb3:	83 c4 10             	add    esp,0x10
c000ecb6:	84 c0                	test   al,al
c000ecb8:	74 2a                	je     c000ece4 <ACPI::open(int, int, void*)+0x298>
c000ecba:	83 ec 08             	sub    esp,0x8
c000ecbd:	6a 01                	push   0x1
c000ecbf:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ecc6:	e8 32 3e 00 00       	call   c0012afd <Thr::loadDLL(char const*, bool)>
c000eccb:	83 c4 10             	add    esp,0x10
c000ecce:	83 ec 08             	sub    esp,0x8
c000ecd1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ecd8:	50                   	push   eax
c000ecd9:	e8 50 40 00 00       	call   c0012d2e <Thr::executeDLL(unsigned long, void*)>
c000ecde:	83 c4 10             	add    esp,0x10
c000ece1:	8d 76 00             	lea    esi,[esi+0x0]
c000ece4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ecec:	0f 84 be fe ff ff    	je     c000ebb0 <ACPI::open(int, int, void*)+0x164>
c000ecf2:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ecf9:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecfb:	83 c0 08             	add    eax,0x8
c000ecfe:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed00:	83 ec 0c             	sub    esp,0xc
c000ed03:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed0a:	ff d0                	call   eax
c000ed0c:	83 c4 10             	add    esp,0x10
c000ed0f:	e9 9c fe ff ff       	jmp    c000ebb0 <ACPI::open(int, int, void*)+0x164>
c000ed14:	83 ec 0c             	sub    esp,0xc
c000ed17:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed1e:	50                   	push   eax
c000ed1f:	e8 f4 d8 00 00       	call   c001c618 <LinkedList<Device>::~LinkedList()>
c000ed24:	83 c4 10             	add    esp,0x10
c000ed27:	8b 1d 78 06 02 c0    	mov    ebx,DWORD PTR ds:0xc0020678
c000ed2d:	83 ec 08             	sub    esp,0x8
c000ed30:	6a 01                	push   0x1
c000ed32:	68 9f e1 01 c0       	push   0xc001e19f
c000ed37:	e8 c1 3d 00 00       	call   c0012afd <Thr::loadDLL(char const*, bool)>
c000ed3c:	83 c4 10             	add    esp,0x10
c000ed3f:	83 ec 08             	sub    esp,0x8
c000ed42:	53                   	push   ebx
c000ed43:	50                   	push   eax
c000ed44:	e8 e5 3f 00 00       	call   c0012d2e <Thr::executeDLL(unsigned long, void*)>
c000ed49:	83 c4 10             	add    esp,0x10
c000ed4c:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c000ed51:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed57:	83 e0 04             	and    eax,0x4
c000ed5a:	84 c0                	test   al,al
c000ed5c:	0f 84 16 01 00 00    	je     c000ee78 <ACPI::open(int, int, void*)+0x42c>
c000ed62:	83 ec 0c             	sub    esp,0xc
c000ed65:	68 bc e1 01 c0       	push   0xc001e1bc
c000ed6a:	e8 1c 0d 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c000ed6f:	83 c4 10             	add    esp,0x10
c000ed72:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ed7d:	83 ec 0c             	sub    esp,0xc
c000ed80:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ed87:	e8 79 8a ff ff       	call   c0007805 <malloc>
c000ed8c:	83 c4 10             	add    esp,0x10
c000ed8f:	89 c3                	mov    ebx,eax
c000ed91:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c000ed96:	83 ec 04             	sub    esp,0x4
c000ed99:	50                   	push   eax
c000ed9a:	68 d9 e1 01 c0       	push   0xc001e1d9
c000ed9f:	53                   	push   ebx
c000eda0:	e8 71 bc ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c000eda5:	83 c4 10             	add    esp,0x10
c000eda8:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000edaf:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000edb7:	74 1b                	je     c000edd4 <ACPI::open(int, int, void*)+0x388>
c000edb9:	83 ec 0c             	sub    esp,0xc
c000edbc:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000edc3:	e8 7c bf ff ff       	call   c000ad44 <File::exists()>
c000edc8:	83 c4 10             	add    esp,0x10
c000edcb:	84 c0                	test   al,al
c000edcd:	74 05                	je     c000edd4 <ACPI::open(int, int, void*)+0x388>
c000edcf:	b0 01                	mov    al,0x1
c000edd1:	eb 05                	jmp    c000edd8 <ACPI::open(int, int, void*)+0x38c>
c000edd3:	90                   	nop
c000edd4:	b0 00                	mov    al,0x0
c000edd6:	66 90                	xchg   ax,ax
c000edd8:	84 c0                	test   al,al
c000edda:	74 28                	je     c000ee04 <ACPI::open(int, int, void*)+0x3b8>
c000eddc:	83 ec 08             	sub    esp,0x8
c000eddf:	6a 01                	push   0x1
c000ede1:	68 d9 e1 01 c0       	push   0xc001e1d9
c000ede6:	e8 12 3d 00 00       	call   c0012afd <Thr::loadDLL(char const*, bool)>
c000edeb:	83 c4 10             	add    esp,0x10
c000edee:	83 ec 08             	sub    esp,0x8
c000edf1:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000edf8:	50                   	push   eax
c000edf9:	e8 30 3f 00 00       	call   c0012d2e <Thr::executeDLL(unsigned long, void*)>
c000edfe:	83 c4 10             	add    esp,0x10
c000ee01:	8d 76 00             	lea    esi,[esi+0x0]
c000ee04:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee0c:	74 2a                	je     c000ee38 <ACPI::open(int, int, void*)+0x3ec>
c000ee0e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee16:	74 20                	je     c000ee38 <ACPI::open(int, int, void*)+0x3ec>
c000ee18:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ee1f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee21:	83 c0 08             	add    eax,0x8
c000ee24:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee26:	83 ec 0c             	sub    esp,0xc
c000ee29:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee30:	ff d0                	call   eax
c000ee32:	83 c4 10             	add    esp,0x10
c000ee35:	8d 76 00             	lea    esi,[esi+0x0]
c000ee38:	a1 88 2e 02 c0       	mov    eax,ds:0xc0022e88
c000ee3d:	83 ec 08             	sub    esp,0x8
c000ee40:	68 f6 e1 01 c0       	push   0xc001e1f6
c000ee45:	50                   	push   eax
c000ee46:	e8 31 f2 ff ff       	call   c000e07c <findDataTable(unsigned char*, char*)>
c000ee4b:	83 c4 10             	add    esp,0x10
c000ee4e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ee55:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ee5d:	74 19                	je     c000ee78 <ACPI::open(int, int, void*)+0x42c>
c000ee5f:	83 ec 08             	sub    esp,0x8
c000ee62:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ee69:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ee70:	e8 67 fb ff ff       	call   c000e9dc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ee75:	83 c4 10             	add    esp,0x10
c000ee78:	b8 00 00 00 00       	mov    eax,0x0
c000ee7d:	81 c4 70 01 00 00    	add    esp,0x170
c000ee83:	5b                   	pop    ebx
c000ee84:	5e                   	pop    esi
c000ee85:	5f                   	pop    edi
c000ee86:	c3                   	ret    
c000ee87:	90                   	nop

c000ee88 <CPU::close(int, int, void*)>:
c000ee88:	31 c0                	xor    eax,eax
c000ee8a:	c3                   	ret    
c000ee8b:	90                   	nop

c000ee8c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ee8c:	60                   	pusha  
c000ee8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee99:	9c                   	pushf  
c000ee9a:	fa                   	cli    
c000ee9b:	0f 09                	wbinvd 
c000ee9d:	0f 30                	wrmsr  
c000ee9f:	9d                   	popf   
c000eea0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eea4:	89 02                	mov    DWORD PTR [edx],eax
c000eea6:	61                   	popa   
c000eea7:	c3                   	ret    

c000eea8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000eea8:	60                   	pusha  
c000eea9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eead:	9c                   	pushf  
c000eeae:	fa                   	cli    
c000eeaf:	0f 09                	wbinvd 
c000eeb1:	31 c0                	xor    eax,eax
c000eeb3:	31 d2                	xor    edx,edx
c000eeb5:	0f 32                	rdmsr  
c000eeb7:	9d                   	popf   
c000eeb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eebc:	89 02                	mov    DWORD PTR [edx],eax
c000eebe:	61                   	popa   
c000eebf:	c3                   	ret    

c000eec0 <CPU::AMD_K6_writeback(int, int, int)>:
c000eec0:	56                   	push   esi
c000eec1:	53                   	push   ebx
c000eec2:	83 ec 10             	sub    esp,0x10
c000eec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec9:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000eece:	75 5d                	jne    c000ef2d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000eed0:	83 f8 08             	cmp    eax,0x8
c000eed3:	75 09                	jne    c000eede <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000eed5:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000eeda:	7e 13                	jle    c000eeef <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000eedc:	eb 30                	jmp    c000ef0e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000eede:	83 f8 06             	cmp    eax,0x6
c000eee1:	7c 4a                	jl     c000ef2d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000eee3:	83 f8 07             	cmp    eax,0x7
c000eee6:	7e 07                	jle    c000eeef <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000eee8:	83 f8 09             	cmp    eax,0x9
c000eeeb:	74 21                	je     c000ef0e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000eeed:	eb 3e                	jmp    c000ef2d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000eeef:	89 e6                	mov    esi,esp
c000eef1:	8b 1d 9c 06 02 c0    	mov    ebx,DWORD PTR ds:0xc002069c
c000eef7:	56                   	push   esi
c000eef8:	c1 eb 15             	shr    ebx,0x15
c000eefb:	68 82 00 00 c0       	push   0xc0000082
c000ef00:	83 e3 7e             	and    ebx,0x7e
c000ef03:	e8 a0 ff ff ff       	call   c000eea8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef08:	56                   	push   esi
c000ef09:	6a 00                	push   0x0
c000ef0b:	53                   	push   ebx
c000ef0c:	eb 12                	jmp    c000ef20 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ef0e:	89 e3                	mov    ebx,esp
c000ef10:	53                   	push   ebx
c000ef11:	68 82 00 00 c0       	push   0xc0000082
c000ef16:	e8 8d ff ff ff       	call   c000eea8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef1b:	53                   	push   ebx
c000ef1c:	6a 00                	push   0x0
c000ef1e:	6a 00                	push   0x0
c000ef20:	68 82 00 00 c0       	push   0xc0000082
c000ef25:	e8 62 ff ff ff       	call   c000ee8c <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ef2a:	83 c4 18             	add    esp,0x18
c000ef2d:	83 c4 10             	add    esp,0x10
c000ef30:	5b                   	pop    ebx
c000ef31:	5e                   	pop    esi
c000ef32:	c3                   	ret    
c000ef33:	90                   	nop

c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ef34:	55                   	push   ebp
c000ef35:	57                   	push   edi
c000ef36:	56                   	push   esi
c000ef37:	53                   	push   ebx
c000ef38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef3c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ef40:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ef44:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ef48:	39 05 90 f4 01 c0    	cmp    DWORD PTR ds:0xc001f490,eax
c000ef4e:	75 23                	jne    c000ef73 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ef50:	a1 ec 30 02 c0       	mov    eax,ds:0xc00230ec
c000ef55:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef59:	89 06                	mov    DWORD PTR [esi],eax
c000ef5b:	a1 e8 30 02 c0       	mov    eax,ds:0xc00230e8
c000ef60:	89 07                	mov    DWORD PTR [edi],eax
c000ef62:	a1 e4 30 02 c0       	mov    eax,ds:0xc00230e4
c000ef67:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ef6a:	a1 e0 30 02 c0       	mov    eax,ds:0xc00230e0
c000ef6f:	89 02                	mov    DWORD PTR [edx],eax
c000ef71:	eb 3f                	jmp    c000efb2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000ef73:	31 c9                	xor    ecx,ecx
c000ef75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef79:	0f a2                	cpuid  
c000ef7b:	89 06                	mov    DWORD PTR [esi],eax
c000ef7d:	89 1f                	mov    DWORD PTR [edi],ebx
c000ef7f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ef83:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000ef86:	89 10                	mov    DWORD PTR [eax],edx
c000ef88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef8c:	a3 90 f4 01 c0       	mov    ds:0xc001f490,eax
c000ef91:	8b 06                	mov    eax,DWORD PTR [esi]
c000ef93:	a3 ec 30 02 c0       	mov    ds:0xc00230ec,eax
c000ef98:	8b 07                	mov    eax,DWORD PTR [edi]
c000ef9a:	a3 e8 30 02 c0       	mov    ds:0xc00230e8,eax
c000ef9f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efa2:	a3 e4 30 02 c0       	mov    ds:0xc00230e4,eax
c000efa7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efab:	8b 00                	mov    eax,DWORD PTR [eax]
c000efad:	a3 e0 30 02 c0       	mov    ds:0xc00230e0,eax
c000efb2:	5b                   	pop    ebx
c000efb3:	5e                   	pop    esi
c000efb4:	5f                   	pop    edi
c000efb5:	5d                   	pop    ebp
c000efb6:	c3                   	ret    
c000efb7:	90                   	nop

c000efb8 <CPU::cpuidCheckEDX(unsigned int)>:
c000efb8:	83 ec 10             	sub    esp,0x10
c000efbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efbf:	50                   	push   eax
c000efc0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efc4:	50                   	push   eax
c000efc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efc9:	50                   	push   eax
c000efca:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efce:	50                   	push   eax
c000efcf:	6a 01                	push   0x1
c000efd1:	e8 5e ff ff ff       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000efd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000efda:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000efde:	0f 95 c0             	setne  al
c000efe1:	83 c4 24             	add    esp,0x24
c000efe4:	c3                   	ret    
c000efe5:	90                   	nop

c000efe6 <CPU::cpuidCheckECX(unsigned int)>:
c000efe6:	83 ec 10             	sub    esp,0x10
c000efe9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efed:	50                   	push   eax
c000efee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eff2:	50                   	push   eax
c000eff3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eff7:	50                   	push   eax
c000eff8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000effc:	50                   	push   eax
c000effd:	6a 01                	push   0x1
c000efff:	e8 30 ff ff ff       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f004:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f008:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f00c:	0f 95 c0             	setne  al
c000f00f:	83 c4 24             	add    esp,0x24
c000f012:	c3                   	ret    
c000f013:	90                   	nop

c000f014 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f014:	83 ec 10             	sub    esp,0x10
c000f017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f01b:	50                   	push   eax
c000f01c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f020:	50                   	push   eax
c000f021:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f025:	50                   	push   eax
c000f026:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f02a:	50                   	push   eax
c000f02b:	6a 07                	push   0x7
c000f02d:	e8 02 ff ff ff       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f032:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f036:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f03a:	0f 95 c0             	setne  al
c000f03d:	83 c4 24             	add    esp,0x24
c000f040:	c3                   	ret    
c000f041:	90                   	nop

c000f042 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f042:	83 ec 10             	sub    esp,0x10
c000f045:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f049:	50                   	push   eax
c000f04a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f04e:	50                   	push   eax
c000f04f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f053:	50                   	push   eax
c000f054:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f058:	50                   	push   eax
c000f059:	6a 07                	push   0x7
c000f05b:	e8 d4 fe ff ff       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f060:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f064:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f068:	0f 95 c0             	setne  al
c000f06b:	83 c4 24             	add    esp,0x24
c000f06e:	c3                   	ret    
c000f06f:	90                   	nop

c000f070 <CPU::CPU()>:
c000f070:	83 ec 0c             	sub    esp,0xc
c000f073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f077:	83 ec 08             	sub    esp,0x8
c000f07a:	68 19 e3 01 c0       	push   0xc001e319
c000f07f:	50                   	push   eax
c000f080:	e8 f3 c9 ff ff       	call   c000ba78 <Device::Device(char const*)>
c000f085:	83 c4 10             	add    esp,0x10
c000f088:	ba a0 e3 01 c0       	mov    edx,0xc001e3a0
c000f08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f091:	89 10                	mov    DWORD PTR [eax],edx
c000f093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f097:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f0a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0a5:	05 78 01 00 00       	add    eax,0x178
c000f0aa:	83 ec 0c             	sub    esp,0xc
c000f0ad:	50                   	push   eax
c000f0ae:	e8 13 80 ff ff       	call   c00070c6 <GDT::GDT()>
c000f0b3:	83 c4 10             	add    esp,0x10
c000f0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0ba:	05 7c 09 00 00       	add    eax,0x97c
c000f0bf:	83 ec 0c             	sub    esp,0xc
c000f0c2:	50                   	push   eax
c000f0c3:	e8 38 82 ff ff       	call   c0007300 <IDT::IDT()>
c000f0c8:	83 c4 10             	add    esp,0x10
c000f0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0cf:	05 7c 11 00 00       	add    eax,0x117c
c000f0d4:	83 ec 0c             	sub    esp,0xc
c000f0d7:	50                   	push   eax
c000f0d8:	e8 b3 9a ff ff       	call   c0008b90 <TSS::TSS()>
c000f0dd:	83 c4 10             	add    esp,0x10
c000f0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0e4:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f0eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0ef:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f0f9:	90                   	nop
c000f0fa:	83 c4 0c             	add    esp,0xc
c000f0fd:	c3                   	ret    

c000f0fe <CPU::displayFeatures()>:
c000f0fe:	c3                   	ret    
c000f0ff:	90                   	nop

c000f100 <CPU::detectFeatures()>:
c000f100:	55                   	push   ebp
c000f101:	57                   	push   edi
c000f102:	56                   	push   esi
c000f103:	53                   	push   ebx
c000f104:	83 ec 30             	sub    esp,0x30
c000f107:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f10b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f115:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f11c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f122:	6a 0d                	push   0xd
c000f124:	6a 00                	push   0x0
c000f126:	55                   	push   ebp
c000f127:	e8 a4 13 ff ff       	call   c00004d0 <memset>
c000f12c:	83 c4 10             	add    esp,0x10
c000f12f:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c000f134:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f13b:	0f 84 d5 05 00 00    	je     c000f716 <CPU::detectFeatures()+0x616>
c000f141:	83 ec 0c             	sub    esp,0xc
c000f144:	89 ef                	mov    edi,ebp
c000f146:	6a 10                	push   0x10
c000f148:	e8 6b fe ff ff       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c000f14d:	83 e0 01             	and    eax,0x1
c000f150:	8d 14 00             	lea    edx,[eax+eax*1]
c000f153:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f159:	83 e0 fd             	and    eax,0xfffffffd
c000f15c:	09 d0                	or     eax,edx
c000f15e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f164:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f16b:	e8 48 fe ff ff       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c000f170:	83 e0 01             	and    eax,0x1
c000f173:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f17a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f180:	83 e0 fb             	and    eax,0xfffffffb
c000f183:	09 d0                	or     eax,edx
c000f185:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f18b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f192:	e8 21 fe ff ff       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c000f197:	83 e0 01             	and    eax,0x1
c000f19a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f1a1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1a7:	83 e0 f7             	and    eax,0xfffffff7
c000f1aa:	09 d0                	or     eax,edx
c000f1ac:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1b2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f1b9:	e8 fa fd ff ff       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c000f1be:	83 e0 01             	and    eax,0x1
c000f1c1:	c1 e0 04             	shl    eax,0x4
c000f1c4:	88 c2                	mov    dl,al
c000f1c6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1cc:	83 e0 ef             	and    eax,0xffffffef
c000f1cf:	09 d0                	or     eax,edx
c000f1d1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1d7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f1de:	e8 d5 fd ff ff       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c000f1e3:	83 e0 01             	and    eax,0x1
c000f1e6:	c1 e0 05             	shl    eax,0x5
c000f1e9:	88 c2                	mov    dl,al
c000f1eb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1f1:	83 e0 df             	and    eax,0xffffffdf
c000f1f4:	09 d0                	or     eax,edx
c000f1f6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1fc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f203:	e8 b0 fd ff ff       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c000f208:	83 e0 01             	and    eax,0x1
c000f20b:	8d 14 00             	lea    edx,[eax+eax*1]
c000f20e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f214:	83 e0 fd             	and    eax,0xfffffffd
c000f217:	09 d0                	or     eax,edx
c000f219:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f21f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f226:	e8 8d fd ff ff       	call   c000efb8 <CPU::cpuidCheckEDX(unsigned int)>
c000f22b:	83 e0 01             	and    eax,0x1
c000f22e:	c1 e0 06             	shl    eax,0x6
c000f231:	88 c2                	mov    dl,al
c000f233:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f239:	83 e0 bf             	and    eax,0xffffffbf
c000f23c:	09 d0                	or     eax,edx
c000f23e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f244:	58                   	pop    eax
c000f245:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f249:	50                   	push   eax
c000f24a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f24e:	50                   	push   eax
c000f24f:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f253:	56                   	push   esi
c000f254:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f258:	50                   	push   eax
c000f259:	6a 00                	push   0x0
c000f25b:	e8 d4 fc ff ff       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f260:	b8 04 00 00 00       	mov    eax,0x4
c000f265:	89 c1                	mov    ecx,eax
c000f267:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f269:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f26f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f273:	89 c1                	mov    ecx,eax
c000f275:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f277:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f27d:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f281:	89 c1                	mov    ecx,eax
c000f283:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f285:	83 c4 18             	add    esp,0x18
c000f288:	68 28 e2 01 c0       	push   0xc001e228
c000f28d:	55                   	push   ebp
c000f28e:	e8 4d 14 ff ff       	call   c00006e0 <strcmp>
c000f293:	83 c4 10             	add    esp,0x10
c000f296:	85 c0                	test   eax,eax
c000f298:	75 0f                	jne    c000f2a9 <CPU::detectFeatures()+0x1a9>
c000f29a:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f2a4:	e9 22 02 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f2a9:	50                   	push   eax
c000f2aa:	50                   	push   eax
c000f2ab:	68 35 e2 01 c0       	push   0xc001e235
c000f2b0:	55                   	push   ebp
c000f2b1:	e8 2a 14 ff ff       	call   c00006e0 <strcmp>
c000f2b6:	83 c4 10             	add    esp,0x10
c000f2b9:	85 c0                	test   eax,eax
c000f2bb:	74 dd                	je     c000f29a <CPU::detectFeatures()+0x19a>
c000f2bd:	50                   	push   eax
c000f2be:	50                   	push   eax
c000f2bf:	68 42 e2 01 c0       	push   0xc001e242
c000f2c4:	55                   	push   ebp
c000f2c5:	e8 16 14 ff ff       	call   c00006e0 <strcmp>
c000f2ca:	83 c4 10             	add    esp,0x10
c000f2cd:	85 c0                	test   eax,eax
c000f2cf:	74 2a                	je     c000f2fb <CPU::detectFeatures()+0x1fb>
c000f2d1:	50                   	push   eax
c000f2d2:	50                   	push   eax
c000f2d3:	68 4f e2 01 c0       	push   0xc001e24f
c000f2d8:	55                   	push   ebp
c000f2d9:	e8 02 14 ff ff       	call   c00006e0 <strcmp>
c000f2de:	83 c4 10             	add    esp,0x10
c000f2e1:	85 c0                	test   eax,eax
c000f2e3:	74 16                	je     c000f2fb <CPU::detectFeatures()+0x1fb>
c000f2e5:	50                   	push   eax
c000f2e6:	50                   	push   eax
c000f2e7:	68 5c e2 01 c0       	push   0xc001e25c
c000f2ec:	55                   	push   ebp
c000f2ed:	e8 ee 13 ff ff       	call   c00006e0 <strcmp>
c000f2f2:	83 c4 10             	add    esp,0x10
c000f2f5:	85 c0                	test   eax,eax
c000f2f7:	74 48                	je     c000f341 <CPU::detectFeatures()+0x241>
c000f2f9:	eb 0f                	jmp    c000f30a <CPU::detectFeatures()+0x20a>
c000f2fb:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f305:	e9 c1 01 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f30a:	50                   	push   eax
c000f30b:	50                   	push   eax
c000f30c:	68 69 e2 01 c0       	push   0xc001e269
c000f311:	55                   	push   ebp
c000f312:	e8 c9 13 ff ff       	call   c00006e0 <strcmp>
c000f317:	83 c4 10             	add    esp,0x10
c000f31a:	85 c0                	test   eax,eax
c000f31c:	74 23                	je     c000f341 <CPU::detectFeatures()+0x241>
c000f31e:	57                   	push   edi
c000f31f:	57                   	push   edi
c000f320:	68 76 e2 01 c0       	push   0xc001e276
c000f325:	55                   	push   ebp
c000f326:	e8 b5 13 ff ff       	call   c00006e0 <strcmp>
c000f32b:	83 c4 10             	add    esp,0x10
c000f32e:	85 c0                	test   eax,eax
c000f330:	75 1e                	jne    c000f350 <CPU::detectFeatures()+0x250>
c000f332:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f33c:	e9 8a 01 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f341:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f34b:	e9 7b 01 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f350:	56                   	push   esi
c000f351:	56                   	push   esi
c000f352:	68 83 e2 01 c0       	push   0xc001e283
c000f357:	55                   	push   ebp
c000f358:	e8 83 13 ff ff       	call   c00006e0 <strcmp>
c000f35d:	83 c4 10             	add    esp,0x10
c000f360:	85 c0                	test   eax,eax
c000f362:	75 0f                	jne    c000f373 <CPU::detectFeatures()+0x273>
c000f364:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f36e:	e9 58 01 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f373:	51                   	push   ecx
c000f374:	51                   	push   ecx
c000f375:	68 42 e2 01 c0       	push   0xc001e242
c000f37a:	55                   	push   ebp
c000f37b:	e8 60 13 ff ff       	call   c00006e0 <strcmp>
c000f380:	83 c4 10             	add    esp,0x10
c000f383:	85 c0                	test   eax,eax
c000f385:	75 0f                	jne    c000f396 <CPU::detectFeatures()+0x296>
c000f387:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f391:	e9 35 01 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f396:	52                   	push   edx
c000f397:	52                   	push   edx
c000f398:	68 90 e2 01 c0       	push   0xc001e290
c000f39d:	55                   	push   ebp
c000f39e:	e8 3d 13 ff ff       	call   c00006e0 <strcmp>
c000f3a3:	83 c4 10             	add    esp,0x10
c000f3a6:	85 c0                	test   eax,eax
c000f3a8:	75 0f                	jne    c000f3b9 <CPU::detectFeatures()+0x2b9>
c000f3aa:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f3b4:	e9 12 01 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f3b9:	50                   	push   eax
c000f3ba:	50                   	push   eax
c000f3bb:	68 9d e2 01 c0       	push   0xc001e29d
c000f3c0:	55                   	push   ebp
c000f3c1:	e8 1a 13 ff ff       	call   c00006e0 <strcmp>
c000f3c6:	83 c4 10             	add    esp,0x10
c000f3c9:	85 c0                	test   eax,eax
c000f3cb:	75 0f                	jne    c000f3dc <CPU::detectFeatures()+0x2dc>
c000f3cd:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f3d7:	e9 ef 00 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f3dc:	50                   	push   eax
c000f3dd:	50                   	push   eax
c000f3de:	68 aa e2 01 c0       	push   0xc001e2aa
c000f3e3:	55                   	push   ebp
c000f3e4:	e8 f7 12 ff ff       	call   c00006e0 <strcmp>
c000f3e9:	83 c4 10             	add    esp,0x10
c000f3ec:	85 c0                	test   eax,eax
c000f3ee:	75 0f                	jne    c000f3ff <CPU::detectFeatures()+0x2ff>
c000f3f0:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f3fa:	e9 cc 00 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f3ff:	50                   	push   eax
c000f400:	50                   	push   eax
c000f401:	68 b7 e2 01 c0       	push   0xc001e2b7
c000f406:	55                   	push   ebp
c000f407:	e8 d4 12 ff ff       	call   c00006e0 <strcmp>
c000f40c:	83 c4 10             	add    esp,0x10
c000f40f:	85 c0                	test   eax,eax
c000f411:	75 0f                	jne    c000f422 <CPU::detectFeatures()+0x322>
c000f413:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f41d:	e9 a9 00 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f422:	50                   	push   eax
c000f423:	50                   	push   eax
c000f424:	68 c4 e2 01 c0       	push   0xc001e2c4
c000f429:	55                   	push   ebp
c000f42a:	e8 b1 12 ff ff       	call   c00006e0 <strcmp>
c000f42f:	83 c4 10             	add    esp,0x10
c000f432:	85 c0                	test   eax,eax
c000f434:	75 0f                	jne    c000f445 <CPU::detectFeatures()+0x345>
c000f436:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f440:	e9 86 00 00 00       	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f445:	50                   	push   eax
c000f446:	50                   	push   eax
c000f447:	68 d1 e2 01 c0       	push   0xc001e2d1
c000f44c:	55                   	push   ebp
c000f44d:	e8 8e 12 ff ff       	call   c00006e0 <strcmp>
c000f452:	83 c4 10             	add    esp,0x10
c000f455:	85 c0                	test   eax,eax
c000f457:	75 0c                	jne    c000f465 <CPU::detectFeatures()+0x365>
c000f459:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f463:	eb 66                	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f465:	50                   	push   eax
c000f466:	50                   	push   eax
c000f467:	68 de e2 01 c0       	push   0xc001e2de
c000f46c:	55                   	push   ebp
c000f46d:	e8 6e 12 ff ff       	call   c00006e0 <strcmp>
c000f472:	83 c4 10             	add    esp,0x10
c000f475:	85 c0                	test   eax,eax
c000f477:	75 0c                	jne    c000f485 <CPU::detectFeatures()+0x385>
c000f479:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f483:	eb 46                	jmp    c000f4cb <CPU::detectFeatures()+0x3cb>
c000f485:	57                   	push   edi
c000f486:	57                   	push   edi
c000f487:	68 eb e2 01 c0       	push   0xc001e2eb
c000f48c:	55                   	push   ebp
c000f48d:	e8 4e 12 ff ff       	call   c00006e0 <strcmp>
c000f492:	83 c4 10             	add    esp,0x10
c000f495:	85 c0                	test   eax,eax
c000f497:	74 e0                	je     c000f479 <CPU::detectFeatures()+0x379>
c000f499:	56                   	push   esi
c000f49a:	56                   	push   esi
c000f49b:	68 f8 e2 01 c0       	push   0xc001e2f8
c000f4a0:	55                   	push   ebp
c000f4a1:	e8 3a 12 ff ff       	call   c00006e0 <strcmp>
c000f4a6:	83 c4 10             	add    esp,0x10
c000f4a9:	85 c0                	test   eax,eax
c000f4ab:	74 cc                	je     c000f479 <CPU::detectFeatures()+0x379>
c000f4ad:	51                   	push   ecx
c000f4ae:	51                   	push   ecx
c000f4af:	68 05 e3 01 c0       	push   0xc001e305
c000f4b4:	55                   	push   ebp
c000f4b5:	e8 26 12 ff ff       	call   c00006e0 <strcmp>
c000f4ba:	83 c4 10             	add    esp,0x10
c000f4bd:	85 c0                	test   eax,eax
c000f4bf:	74 b8                	je     c000f479 <CPU::detectFeatures()+0x379>
c000f4c1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f4cb:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f4d0:	0f 86 be 00 00 00    	jbe    c000f594 <CPU::detectFeatures()+0x494>
c000f4d6:	83 ec 0c             	sub    esp,0xc
c000f4d9:	68 80 00 00 00       	push   0x80
c000f4de:	e8 31 fb ff ff       	call   c000f014 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f4e3:	83 e0 01             	and    eax,0x1
c000f4e6:	c1 e0 06             	shl    eax,0x6
c000f4e9:	88 c2                	mov    dl,al
c000f4eb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4f1:	83 e0 bf             	and    eax,0xffffffbf
c000f4f4:	09 d0                	or     eax,edx
c000f4f6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4fc:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f503:	e8 0c fb ff ff       	call   c000f014 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f508:	83 e0 01             	and    eax,0x1
c000f50b:	c1 e0 04             	shl    eax,0x4
c000f50e:	88 c2                	mov    dl,al
c000f510:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f516:	83 e0 ef             	and    eax,0xffffffef
c000f519:	09 d0                	or     eax,edx
c000f51b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f521:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f528:	e8 e7 fa ff ff       	call   c000f014 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f52d:	c1 e0 07             	shl    eax,0x7
c000f530:	88 c2                	mov    dl,al
c000f532:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f538:	83 e0 7f             	and    eax,0x7f
c000f53b:	09 d0                	or     eax,edx
c000f53d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f543:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f54a:	e8 f3 fa ff ff       	call   c000f042 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f54f:	83 e0 01             	and    eax,0x1
c000f552:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f559:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f55f:	83 e0 f7             	and    eax,0xfffffff7
c000f562:	09 d0                	or     eax,edx
c000f564:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f56a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f571:	e8 cc fa ff ff       	call   c000f042 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f576:	83 c4 10             	add    esp,0x10
c000f579:	83 e0 01             	and    eax,0x1
c000f57c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f583:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f589:	83 e0 fb             	and    eax,0xfffffffb
c000f58c:	09 d0                	or     eax,edx
c000f58e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f594:	83 ec 0c             	sub    esp,0xc
c000f597:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f59b:	50                   	push   eax
c000f59c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5a0:	50                   	push   eax
c000f5a1:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f5a5:	56                   	push   esi
c000f5a6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5aa:	50                   	push   eax
c000f5ab:	6a 01                	push   0x1
c000f5ad:	e8 82 f9 ff ff       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f5b2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f5b6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f5bc:	88 ca                	mov    dl,cl
c000f5be:	83 e0 f0             	and    eax,0xfffffff0
c000f5c1:	83 e2 0f             	and    edx,0xf
c000f5c4:	09 d0                	or     eax,edx
c000f5c6:	88 ca                	mov    dl,cl
c000f5c8:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f5ce:	c0 ea 04             	shr    dl,0x4
c000f5d1:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f5d5:	0f b6 c2             	movzx  eax,dl
c000f5d8:	83 c4 20             	add    esp,0x20
c000f5db:	c1 e0 06             	shl    eax,0x6
c000f5de:	89 c7                	mov    edi,eax
c000f5e0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f5e6:	66 25 3f c0          	and    ax,0xc03f
c000f5ea:	09 f8                	or     eax,edi
c000f5ec:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f5f3:	89 c8                	mov    eax,ecx
c000f5f5:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f5fc:	c1 e8 08             	shr    eax,0x8
c000f5ff:	83 e5 3f             	and    ebp,0x3f
c000f602:	83 e0 0f             	and    eax,0xf
c000f605:	89 c7                	mov    edi,eax
c000f607:	c1 e7 06             	shl    edi,0x6
c000f60a:	09 ef                	or     edi,ebp
c000f60c:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f613:	89 fa                	mov    edx,edi
c000f615:	83 e5 c0             	and    ebp,0xffffffc0
c000f618:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f61e:	88 c2                	mov    dl,al
c000f620:	c0 ea 02             	shr    dl,0x2
c000f623:	89 d7                	mov    edi,edx
c000f625:	09 ef                	or     edi,ebp
c000f627:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f62d:	89 fa                	mov    edx,edi
c000f62f:	83 e5 cf             	and    ebp,0xffffffcf
c000f632:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f638:	89 cf                	mov    edi,ecx
c000f63a:	c1 ef 0c             	shr    edi,0xc
c000f63d:	83 e7 03             	and    edi,0x3
c000f640:	c1 e7 04             	shl    edi,0x4
c000f643:	09 ef                	or     edi,ebp
c000f645:	3c 06                	cmp    al,0x6
c000f647:	89 fa                	mov    edx,edi
c000f649:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f64f:	74 04                	je     c000f655 <CPU::detectFeatures()+0x555>
c000f651:	3c 0f                	cmp    al,0xf
c000f653:	75 5c                	jne    c000f6b1 <CPU::detectFeatures()+0x5b1>
c000f655:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f659:	89 cf                	mov    edi,ecx
c000f65b:	c1 ef 10             	shr    edi,0x10
c000f65e:	c1 e7 04             	shl    edi,0x4
c000f661:	09 fa                	or     edx,edi
c000f663:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f669:	0f b6 d2             	movzx  edx,dl
c000f66c:	66 81 e7 3f c0       	and    di,0xc03f
c000f671:	c1 e2 06             	shl    edx,0x6
c000f674:	09 fa                	or     edx,edi
c000f676:	3c 0f                	cmp    al,0xf
c000f678:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f67f:	75 30                	jne    c000f6b1 <CPU::detectFeatures()+0x5b1>
c000f681:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f687:	c1 e9 14             	shr    ecx,0x14
c000f68a:	83 e0 3f             	and    eax,0x3f
c000f68d:	83 c1 0f             	add    ecx,0xf
c000f690:	88 ca                	mov    dl,cl
c000f692:	c0 e9 02             	shr    cl,0x2
c000f695:	c1 e2 06             	shl    edx,0x6
c000f698:	09 d0                	or     eax,edx
c000f69a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f6a0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f6a6:	83 e0 c0             	and    eax,0xffffffc0
c000f6a9:	09 c1                	or     ecx,eax
c000f6ab:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f6b1:	83 ec 0c             	sub    esp,0xc
c000f6b4:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f6bb:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6bf:	50                   	push   eax
c000f6c0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f6c4:	55                   	push   ebp
c000f6c5:	56                   	push   esi
c000f6c6:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f6ca:	57                   	push   edi
c000f6cb:	68 00 00 00 80       	push   0x80000000
c000f6d0:	e8 5f f8 ff ff       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6d5:	83 c4 20             	add    esp,0x20
c000f6d8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f6e0:	76 22                	jbe    c000f704 <CPU::detectFeatures()+0x604>
c000f6e2:	83 ec 0c             	sub    esp,0xc
c000f6e5:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6e9:	50                   	push   eax
c000f6ea:	55                   	push   ebp
c000f6eb:	56                   	push   esi
c000f6ec:	57                   	push   edi
c000f6ed:	68 01 00 00 80       	push   0x80000001
c000f6f2:	e8 3d f8 ff ff       	call   c000ef34 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6f7:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f701:	83 c4 20             	add    esp,0x20
c000f704:	52                   	push   edx
c000f705:	52                   	push   edx
c000f706:	68 11 e3 01 c0       	push   0xc001e311
c000f70b:	53                   	push   ebx
c000f70c:	e8 59 c3 ff ff       	call   c000ba6a <Device::setName(char const*)>
c000f711:	83 c4 10             	add    esp,0x10
c000f714:	eb 67                	jmp    c000f77d <CPU::detectFeatures()+0x67d>
c000f716:	50                   	push   eax
c000f717:	50                   	push   eax
c000f718:	68 76 e2 01 c0       	push   0xc001e276
c000f71d:	55                   	push   ebp
c000f71e:	e8 dd 0e ff ff       	call   c0000600 <strcpy>
c000f723:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f72d:	e8 91 0a ff ff       	call   c00001c3 <is486>
c000f732:	83 c4 10             	add    esp,0x10
c000f735:	85 c0                	test   eax,eax
c000f737:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f73d:	74 1d                	je     c000f75c <CPU::detectFeatures()+0x65c>
c000f73f:	83 c8 07             	or     eax,0x7
c000f742:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f748:	0f 20 c0             	mov    eax,cr0
c000f74b:	83 e0 14             	and    eax,0x14
c000f74e:	83 f8 04             	cmp    eax,0x4
c000f751:	75 0e                	jne    c000f761 <CPU::detectFeatures()+0x661>
c000f753:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f75a:	eb 21                	jmp    c000f77d <CPU::detectFeatures()+0x67d>
c000f75c:	83 e0 f8             	and    eax,0xfffffff8
c000f75f:	eb e1                	jmp    c000f742 <CPU::detectFeatures()+0x642>
c000f761:	e8 38 0a ff ff       	call   c000019e <hasLegacyFPU>
c000f766:	83 e0 01             	and    eax,0x1
c000f769:	8d 14 00             	lea    edx,[eax+eax*1]
c000f76c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f772:	83 e0 fd             	and    eax,0xfffffffd
c000f775:	09 d0                	or     eax,edx
c000f777:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f77d:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f784:	74 0e                	je     c000f794 <CPU::detectFeatures()+0x694>
c000f786:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c000f78b:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f792:	eb 20                	jmp    c000f7b4 <CPU::detectFeatures()+0x6b4>
c000f794:	e8 05 0a ff ff       	call   c000019e <hasLegacyFPU>
c000f799:	83 e0 01             	and    eax,0x1
c000f79c:	8d 14 00             	lea    edx,[eax+eax*1]
c000f79f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7a5:	83 e0 fd             	and    eax,0xfffffffd
c000f7a8:	09 d0                	or     eax,edx
c000f7aa:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7b0:	a8 02                	test   al,0x2
c000f7b2:	75 d2                	jne    c000f786 <CPU::detectFeatures()+0x686>
c000f7b4:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f7bb:	83 c4 2c             	add    esp,0x2c
c000f7be:	5b                   	pop    ebx
c000f7bf:	5e                   	pop    esi
c000f7c0:	5f                   	pop    edi
c000f7c1:	5d                   	pop    ebp
c000f7c2:	c3                   	ret    
c000f7c3:	90                   	nop

c000f7c4 <CPU::setupSMEP()>:
c000f7c4:	0f 20 e0             	mov    eax,cr4
c000f7c7:	0d 00 00 10 00       	or     eax,0x100000
c000f7cc:	0f 22 e0             	mov    cr4,eax
c000f7cf:	c3                   	ret    

c000f7d0 <CPU::setupUMIP()>:
c000f7d0:	0f 20 e0             	mov    eax,cr4
c000f7d3:	80 cc 08             	or     ah,0x8
c000f7d6:	0f 22 e0             	mov    cr4,eax
c000f7d9:	c3                   	ret    

c000f7da <CPU::setupTSC()>:
c000f7da:	0f 20 e0             	mov    eax,cr4
c000f7dd:	83 c8 04             	or     eax,0x4
c000f7e0:	0f 22 e0             	mov    cr4,eax
c000f7e3:	c3                   	ret    

c000f7e4 <CPU::setupLargePages()>:
c000f7e4:	0f 20 e0             	mov    eax,cr4
c000f7e7:	83 c8 10             	or     eax,0x10
c000f7ea:	0f 22 e0             	mov    cr4,eax
c000f7ed:	c3                   	ret    

c000f7ee <CPU::setupPAT()>:
c000f7ee:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c000f7f3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f7fa:	74 2c                	je     c000f828 <CPU::setupPAT()+0x3a>
c000f7fc:	53                   	push   ebx
c000f7fd:	83 ec 10             	sub    esp,0x10
c000f800:	68 77 02 00 00       	push   0x277
c000f805:	50                   	push   eax
c000f806:	e8 33 76 ff ff       	call   c0006e3e <Computer::rdmsr(unsigned int)>
c000f80b:	83 e2 f8             	and    edx,0xfffffff8
c000f80e:	83 ca 01             	or     edx,0x1
c000f811:	52                   	push   edx
c000f812:	50                   	push   eax
c000f813:	68 77 02 00 00       	push   0x277
c000f818:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c000f81e:	e8 47 76 ff ff       	call   c0006e6a <Computer::wrmsr(unsigned int, unsigned long long)>
c000f823:	83 c4 28             	add    esp,0x28
c000f826:	5b                   	pop    ebx
c000f827:	c3                   	ret    
c000f828:	c3                   	ret    
c000f829:	90                   	nop

c000f82a <CPU::setupMTRR()>:
c000f82a:	c3                   	ret    
c000f82b:	90                   	nop

c000f82c <CPU::setupGlobalPages()>:
c000f82c:	0f 20 e0             	mov    eax,cr4
c000f82f:	0c 80                	or     al,0x80
c000f831:	0f 22 e0             	mov    cr4,eax
c000f834:	c3                   	ret    
c000f835:	90                   	nop

c000f836 <CPU::allowUsermodeDataAccess()>:
c000f836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f83a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f841:	74 03                	je     c000f846 <CPU::allowUsermodeDataAccess()+0x10>
c000f843:	0f 01 cb             	stac   
c000f846:	c3                   	ret    
c000f847:	90                   	nop

c000f848 <CPU::prohibitUsermodeDataAccess()>:
c000f848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f84c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f853:	74 03                	je     c000f858 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f855:	0f 01 ca             	clac   
c000f858:	c3                   	ret    
c000f859:	90                   	nop

c000f85a <CPU::setupSMAP()>:
c000f85a:	0f 20 e0             	mov    eax,cr4
c000f85d:	0d 00 00 20 00       	or     eax,0x200000
c000f862:	0f 22 e0             	mov    cr4,eax
c000f865:	eb e1                	jmp    c000f848 <CPU::prohibitUsermodeDataAccess()>
c000f867:	90                   	nop

c000f868 <CPU::setupFeatures()>:
c000f868:	53                   	push   ebx
c000f869:	83 ec 08             	sub    esp,0x8
c000f86c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f870:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f877:	74 18                	je     c000f891 <CPU::setupFeatures()+0x29>
c000f879:	83 ec 0c             	sub    esp,0xc
c000f87c:	68 1d e3 01 c0       	push   0xc001e31d
c000f881:	e8 1a ac ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c000f886:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f889:	e8 42 ff ff ff       	call   c000f7d0 <CPU::setupUMIP()>
c000f88e:	83 c4 10             	add    esp,0x10
c000f891:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f898:	74 18                	je     c000f8b2 <CPU::setupFeatures()+0x4a>
c000f89a:	83 ec 0c             	sub    esp,0xc
c000f89d:	68 27 e3 01 c0       	push   0xc001e327
c000f8a2:	e8 f9 ab ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c000f8a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8aa:	e8 2b ff ff ff       	call   c000f7da <CPU::setupTSC()>
c000f8af:	83 c4 10             	add    esp,0x10
c000f8b2:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f8b9:	74 18                	je     c000f8d3 <CPU::setupFeatures()+0x6b>
c000f8bb:	83 ec 0c             	sub    esp,0xc
c000f8be:	68 30 e3 01 c0       	push   0xc001e330
c000f8c3:	e8 d8 ab ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c000f8c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8cb:	e8 14 ff ff ff       	call   c000f7e4 <CPU::setupLargePages()>
c000f8d0:	83 c4 10             	add    esp,0x10
c000f8d3:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f8da:	74 18                	je     c000f8f4 <CPU::setupFeatures()+0x8c>
c000f8dc:	83 ec 0c             	sub    esp,0xc
c000f8df:	68 39 e3 01 c0       	push   0xc001e339
c000f8e4:	e8 b7 ab ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c000f8e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8ec:	e8 3b ff ff ff       	call   c000f82c <CPU::setupGlobalPages()>
c000f8f1:	83 c4 10             	add    esp,0x10
c000f8f4:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f8fb:	74 18                	je     c000f915 <CPU::setupFeatures()+0xad>
c000f8fd:	83 ec 0c             	sub    esp,0xc
c000f900:	68 4b e3 01 c0       	push   0xc001e34b
c000f905:	e8 96 ab ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c000f90a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f90d:	e8 dc fe ff ff       	call   c000f7ee <CPU::setupPAT()>
c000f912:	83 c4 10             	add    esp,0x10
c000f915:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f91c:	74 11                	je     c000f92f <CPU::setupFeatures()+0xc7>
c000f91e:	c7 44 24 10 54 e3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e354
c000f926:	83 c4 08             	add    esp,0x8
c000f929:	5b                   	pop    ebx
c000f92a:	e9 71 ab ff ff       	jmp    c000a4a0 <Dbg::kprintf(char const*, ...)>
c000f92f:	83 c4 08             	add    esp,0x8
c000f932:	5b                   	pop    ebx
c000f933:	c3                   	ret    

c000f934 <CPU::open(int, int, void*)>:
c000f934:	57                   	push   edi
c000f935:	56                   	push   esi
c000f936:	53                   	push   ebx
c000f937:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f93b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f93f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f945:	83 ec 0c             	sub    esp,0xc
c000f948:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f94e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000f954:	50                   	push   eax
c000f955:	e8 ce 77 ff ff       	call   c0007128 <GDT::setup()>
c000f95a:	83 c4 0c             	add    esp,0xc
c000f95d:	6a 00                	push   0x0
c000f95f:	68 ef be ad de       	push   0xdeadbeef
c000f964:	57                   	push   edi
c000f965:	e8 6a 92 ff ff       	call   c0008bd4 <TSS::setup(unsigned long, unsigned long)>
c000f96a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f96d:	e8 42 92 ff ff       	call   c0008bb4 <TSS::flush()>
c000f972:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000f978:	89 04 24             	mov    DWORD PTR [esp],eax
c000f97b:	e8 f6 79 ff ff       	call   c0007376 <IDT::setup()>
c000f980:	b8 00 04 00 00       	mov    eax,0x400
c000f985:	0f 23 f8             	mov    db7,eax
c000f988:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000f992:	e8 4a 81 ff ff       	call   c0007ae1 <Phys::allocatePage()>
c000f997:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000f99d:	89 30                	mov    DWORD PTR [eax],esi
c000f99f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000f9a5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000f9a8:	58                   	pop    eax
c000f9a9:	5a                   	pop    edx
c000f9aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000f9b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f9b4:	e8 05 a2 ff ff       	call   c0009bbe <VAS::setCPUSpecific(unsigned long)>
c000f9b9:	c7 04 24 5e e3 01 c0 	mov    DWORD PTR [esp],0xc001e35e
c000f9c0:	e8 c6 00 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c000f9c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9c8:	e8 33 f7 ff ff       	call   c000f100 <CPU::detectFeatures()>
c000f9cd:	c7 04 24 81 e3 01 c0 	mov    DWORD PTR [esp],0xc001e381
c000f9d4:	e8 b2 00 00 00       	call   c000fa8b <KeSetBootMessage(char const*)>
c000f9d9:	e8 1e 5a 00 00       	call   c00153fc <HalInitialise()>
c000f9de:	a1 90 06 02 c0       	mov    eax,ds:0xc0020690
c000f9e3:	83 e0 10             	and    eax,0x10
c000f9e6:	83 f8 01             	cmp    eax,0x1
c000f9e9:	19 c0                	sbb    eax,eax
c000f9eb:	83 e0 46             	and    eax,0x46
c000f9ee:	83 c0 1e             	add    eax,0x1e
c000f9f1:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9f4:	e8 40 d7 ff ff       	call   c000d139 <setupTimer(int)>
c000f9f9:	83 c4 10             	add    esp,0x10
c000f9fc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fa02:	f6 05 90 06 02 c0 20 	test   BYTE PTR ds:0xc0020690,0x20
c000fa09:	74 0c                	je     c000fa17 <CPU::open(int, int, void*)+0xe3>
c000fa0b:	83 ec 0c             	sub    esp,0xc
c000fa0e:	53                   	push   ebx
c000fa0f:	e8 54 fe ff ff       	call   c000f868 <CPU::setupFeatures()>
c000fa14:	83 c4 10             	add    esp,0x10
c000fa17:	5b                   	pop    ebx
c000fa18:	31 c0                	xor    eax,eax
c000fa1a:	5e                   	pop    esi
c000fa1b:	5f                   	pop    edi
c000fa1c:	c3                   	ret    

c000fa1d <KeDisplaySplashScreen()>:
c000fa1d:	55                   	push   ebp
c000fa1e:	bd 05 00 00 00       	mov    ebp,0x5
c000fa23:	57                   	push   edi
c000fa24:	bf a0 f4 01 c0       	mov    edi,0xc001f4a0
c000fa29:	56                   	push   esi
c000fa2a:	be 0a 00 00 00       	mov    esi,0xa
c000fa2f:	53                   	push   ebx
c000fa30:	31 db                	xor    ebx,ebx
c000fa32:	83 ec 0c             	sub    esp,0xc
c000fa35:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fa38:	84 c0                	test   al,al
c000fa3a:	74 47                	je     c000fa83 <KeDisplaySplashScreen()+0x66>
c000fa3c:	80 bb d6 f4 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe0b2a],0xdb
c000fa43:	75 13                	jne    c000fa58 <KeDisplaySplashScreen()+0x3b>
c000fa45:	0f b6 93 d5 f4 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe0b2b]
c000fa4c:	83 e2 fe             	and    edx,0xfffffffe
c000fa4f:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fa55:	75 01                	jne    c000fa58 <KeDisplaySplashScreen()+0x3b>
c000fa57:	46                   	inc    esi
c000fa58:	3c 0d                	cmp    al,0xd
c000fa5a:	74 24                	je     c000fa80 <KeDisplaySplashScreen()+0x63>
c000fa5c:	3c 0a                	cmp    al,0xa
c000fa5e:	75 0a                	jne    c000fa6a <KeDisplaySplashScreen()+0x4d>
c000fa60:	45                   	inc    ebp
c000fa61:	be 0a 00 00 00       	mov    esi,0xa
c000fa66:	31 db                	xor    ebx,ebx
c000fa68:	eb 16                	jmp    c000fa80 <KeDisplaySplashScreen()+0x63>
c000fa6a:	83 ec 0c             	sub    esp,0xc
c000fa6d:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fa70:	55                   	push   ebp
c000fa71:	43                   	inc    ebx
c000fa72:	52                   	push   edx
c000fa73:	6a 00                	push   0x0
c000fa75:	6a 0e                	push   0xe
c000fa77:	50                   	push   eax
c000fa78:	e8 e3 65 00 00       	call   c0016060 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fa7d:	83 c4 20             	add    esp,0x20
c000fa80:	47                   	inc    edi
c000fa81:	eb b2                	jmp    c000fa35 <KeDisplaySplashScreen()+0x18>
c000fa83:	83 c4 0c             	add    esp,0xc
c000fa86:	5b                   	pop    ebx
c000fa87:	5e                   	pop    esi
c000fa88:	5f                   	pop    edi
c000fa89:	5d                   	pop    ebp
c000fa8a:	c3                   	ret    

c000fa8b <KeSetBootMessage(char const*)>:
c000fa8b:	57                   	push   edi
c000fa8c:	56                   	push   esi
c000fa8d:	53                   	push   ebx
c000fa8e:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fa94:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fa9b:	68 9e 00 00 00       	push   0x9e
c000faa0:	6a 00                	push   0x0
c000faa2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000faa6:	56                   	push   esi
c000faa7:	e8 24 0a ff ff       	call   c00004d0 <memset>
c000faac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000faaf:	e8 8c 0a ff ff       	call   c0000540 <strlen>
c000fab4:	ba 50 00 00 00       	mov    edx,0x50
c000fab9:	83 c4 10             	add    esp,0x10
c000fabc:	29 c2                	sub    edx,eax
c000fabe:	31 c9                	xor    ecx,ecx
c000fac0:	83 e2 fe             	and    edx,0xfffffffe
c000fac3:	01 f2                	add    edx,esi
c000fac5:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000faca:	84 c0                	test   al,al
c000facc:	74 0a                	je     c000fad8 <KeSetBootMessage(char const*)+0x4d>
c000face:	80 cc 0f             	or     ah,0xf
c000fad1:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fad5:	41                   	inc    ecx
c000fad6:	eb ed                	jmp    c000fac5 <KeSetBootMessage(char const*)+0x3a>
c000fad8:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fadd:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fae2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fae4:	81 c4 a0 00 00 00    	add    esp,0xa0
c000faea:	5b                   	pop    ebx
c000faeb:	5e                   	pop    esi
c000faec:	5f                   	pop    edi
c000faed:	c3                   	ret    

c000faee <EnvVarContainer::getEnv(char const*)>:
c000faee:	57                   	push   edi
c000faef:	56                   	push   esi
c000faf0:	53                   	push   ebx
c000faf1:	31 db                	xor    ebx,ebx
c000faf3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000faf7:	39 1e                	cmp    DWORD PTR [esi],ebx
c000faf9:	7e 2b                	jle    c000fb26 <EnvVarContainer::getEnv(char const*)+0x38>
c000fafb:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fb02:	50                   	push   eax
c000fb03:	50                   	push   eax
c000fb04:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb07:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fb0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fb0e:	e8 cd 0b ff ff       	call   c00006e0 <strcmp>
c000fb13:	83 c4 10             	add    esp,0x10
c000fb16:	85 c0                	test   eax,eax
c000fb18:	75 09                	jne    c000fb23 <EnvVarContainer::getEnv(char const*)+0x35>
c000fb1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb1d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fb21:	eb 05                	jmp    c000fb28 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fb23:	43                   	inc    ebx
c000fb24:	eb d1                	jmp    c000faf7 <EnvVarContainer::getEnv(char const*)+0x9>
c000fb26:	31 c0                	xor    eax,eax
c000fb28:	5b                   	pop    ebx
c000fb29:	5e                   	pop    esi
c000fb2a:	5f                   	pop    edi
c000fb2b:	c3                   	ret    

c000fb2c <EnvVarContainer::setEnv(char const*, char const*)>:
c000fb2c:	55                   	push   ebp
c000fb2d:	57                   	push   edi
c000fb2e:	56                   	push   esi
c000fb2f:	53                   	push   ebx
c000fb30:	83 ec 28             	sub    esp,0x28
c000fb33:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fb37:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fb3b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fb3f:	56                   	push   esi
c000fb40:	e8 fb 09 ff ff       	call   c0000540 <strlen>
c000fb45:	40                   	inc    eax
c000fb46:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb49:	e8 b7 7c ff ff       	call   c0007805 <malloc>
c000fb4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb55:	e8 e6 09 ff ff       	call   c0000540 <strlen>
c000fb5a:	40                   	inc    eax
c000fb5b:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb5e:	e8 a2 7c ff ff       	call   c0007805 <malloc>
c000fb63:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb66:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fb6a:	e8 d1 09 ff ff       	call   c0000540 <strlen>
c000fb6f:	83 c4 0c             	add    esp,0xc
c000fb72:	40                   	inc    eax
c000fb73:	50                   	push   eax
c000fb74:	6a 00                	push   0x0
c000fb76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb7a:	e8 51 09 ff ff       	call   c00004d0 <memset>
c000fb7f:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb82:	e8 b9 09 ff ff       	call   c0000540 <strlen>
c000fb87:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fb8b:	8d 48 01             	lea    ecx,[eax+0x1]
c000fb8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb93:	89 de                	mov    esi,ebx
c000fb95:	e8 a6 09 ff ff       	call   c0000540 <strlen>
c000fb9a:	83 c4 0c             	add    esp,0xc
c000fb9d:	40                   	inc    eax
c000fb9e:	50                   	push   eax
c000fb9f:	6a 00                	push   0x0
c000fba1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fba5:	e8 26 09 ff ff       	call   c00004d0 <memset>
c000fbaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbad:	e8 8e 09 ff ff       	call   c0000540 <strlen>
c000fbb2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fbb6:	8d 48 01             	lea    ecx,[eax+0x1]
c000fbb9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbbb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fbbe:	40                   	inc    eax
c000fbbf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fbc2:	c1 e0 03             	shl    eax,0x3
c000fbc5:	5a                   	pop    edx
c000fbc6:	59                   	pop    ecx
c000fbc7:	50                   	push   eax
c000fbc8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fbcb:	e8 21 7c ff ff       	call   c00077f1 <realloc>
c000fbd0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fbd4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fbd7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fbda:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fbde:	b9 08 00 00 00       	mov    ecx,0x8
c000fbe3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbe5:	83 c4 2c             	add    esp,0x2c
c000fbe8:	5b                   	pop    ebx
c000fbe9:	5e                   	pop    esi
c000fbea:	5f                   	pop    edi
c000fbeb:	5d                   	pop    ebp
c000fbec:	c3                   	ret    
c000fbed:	90                   	nop

c000fbee <EnvVarContainer::deleteEnv(char const*)>:
c000fbee:	c3                   	ret    
c000fbef:	90                   	nop

c000fbf0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fbf0:	55                   	push   ebp
c000fbf1:	57                   	push   edi
c000fbf2:	56                   	push   esi
c000fbf3:	53                   	push   ebx
c000fbf4:	81 ec 38 01 00 00    	sub    esp,0x138
c000fbfa:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fc01:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fc08:	68 14 01 00 00       	push   0x114
c000fc0d:	e8 f3 7b ff ff       	call   c0007805 <malloc>
c000fc12:	83 c4 0c             	add    esp,0xc
c000fc15:	89 c3                	mov    ebx,eax
c000fc17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fc1a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc21:	50                   	push   eax
c000fc22:	e8 ef ad ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c000fc27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc2a:	e8 15 b1 ff ff       	call   c000ad44 <File::exists()>
c000fc2f:	83 c4 10             	add    esp,0x10
c000fc32:	84 c0                	test   al,al
c000fc34:	75 31                	jne    c000fc67 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fc36:	50                   	push   eax
c000fc37:	50                   	push   eax
c000fc38:	6a 12                	push   0x12
c000fc3a:	53                   	push   ebx
c000fc3b:	e8 96 ae ff ff       	call   c000aad6 <File::open(FileOpenMode)>
c000fc40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fc42:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fc45:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc48:	e8 f3 08 ff ff       	call   c0000540 <strlen>
c000fc4d:	5a                   	pop    edx
c000fc4e:	31 d2                	xor    edx,edx
c000fc50:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fc54:	51                   	push   ecx
c000fc55:	56                   	push   esi
c000fc56:	52                   	push   edx
c000fc57:	50                   	push   eax
c000fc58:	53                   	push   ebx
c000fc59:	ff d7                	call   edi
c000fc5b:	83 c4 14             	add    esp,0x14
c000fc5e:	53                   	push   ebx
c000fc5f:	e8 d0 ae ff ff       	call   c000ab34 <File::close()>
c000fc64:	83 c4 10             	add    esp,0x10
c000fc67:	56                   	push   esi
c000fc68:	31 f6                	xor    esi,esi
c000fc6a:	68 00 01 00 00       	push   0x100
c000fc6f:	6a 00                	push   0x0
c000fc71:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fc75:	50                   	push   eax
c000fc76:	e8 55 08 ff ff       	call   c00004d0 <memset>
c000fc7b:	5f                   	pop    edi
c000fc7c:	58                   	pop    eax
c000fc7d:	6a 01                	push   0x1
c000fc7f:	53                   	push   ebx
c000fc80:	e8 51 ae ff ff       	call   c000aad6 <File::open(FileOpenMode)>
c000fc85:	83 c4 10             	add    esp,0x10
c000fc88:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fc90:	83 ec 0c             	sub    esp,0xc
c000fc93:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fc95:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fc99:	51                   	push   ecx
c000fc9a:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fc9e:	52                   	push   edx
c000fc9f:	6a 00                	push   0x0
c000fca1:	6a 01                	push   0x1
c000fca3:	53                   	push   ebx
c000fca4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fca7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fcab:	83 c4 20             	add    esp,0x20
c000fcae:	3c 0d                	cmp    al,0xd
c000fcb0:	0f 84 09 01 00 00    	je     c000fdbf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fcb6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fcbb:	0f 84 ef 00 00 00    	je     c000fdb0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fcc1:	3c 0a                	cmp    al,0xa
c000fcc3:	74 13                	je     c000fcd8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fcc5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fcca:	74 0c                	je     c000fcd8 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fccc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fcd2:	0f 8e d8 00 00 00    	jle    c000fdb0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fcd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcdc:	83 ec 0c             	sub    esp,0xc
c000fcdf:	8d 78 01             	lea    edi,[eax+0x1]
c000fce2:	57                   	push   edi
c000fce3:	e8 1d 7b ff ff       	call   c0007805 <malloc>
c000fce8:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fcec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fcf0:	8d 56 04             	lea    edx,[esi+0x4]
c000fcf3:	89 14 24             	mov    DWORD PTR [esp],edx
c000fcf6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fcfa:	e8 06 7b ff ff       	call   c0007805 <malloc>
c000fcff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fd03:	83 c4 0c             	add    esp,0xc
c000fd06:	57                   	push   edi
c000fd07:	6a 00                	push   0x0
c000fd09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd0d:	e8 be 07 ff ff       	call   c00004d0 <memset>
c000fd12:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd16:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fd1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fd1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd20:	83 c4 0c             	add    esp,0xc
c000fd23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd27:	52                   	push   edx
c000fd28:	6a 00                	push   0x0
c000fd2a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fd2e:	e8 9d 07 ff ff       	call   c00004d0 <memset>
c000fd33:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd37:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fd3b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd3e:	e8 fd 07 ff ff       	call   c0000540 <strlen>
c000fd43:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fd47:	89 c1                	mov    ecx,eax
c000fd49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd4b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fd4e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fd51:	40                   	inc    eax
c000fd52:	83 c4 10             	add    esp,0x10
c000fd55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fd58:	85 d2                	test   edx,edx
c000fd5a:	75 0c                	jne    c000fd68 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fd5c:	83 ec 0c             	sub    esp,0xc
c000fd5f:	6a 08                	push   0x8
c000fd61:	e8 9f 7a ff ff       	call   c0007805 <malloc>
c000fd66:	eb 0c                	jmp    c000fd74 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fd68:	c1 e0 03             	shl    eax,0x3
c000fd6b:	51                   	push   ecx
c000fd6c:	51                   	push   ecx
c000fd6d:	50                   	push   eax
c000fd6e:	52                   	push   edx
c000fd6f:	e8 7d 7a ff ff       	call   c00077f1 <realloc>
c000fd74:	83 c4 10             	add    esp,0x10
c000fd77:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fd7a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fd7d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fd80:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fd84:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fd88:	b9 08 00 00 00       	mov    ecx,0x8
c000fd8d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd8f:	31 f6                	xor    esi,esi
c000fd91:	50                   	push   eax
c000fd92:	68 00 01 00 00       	push   0x100
c000fd97:	6a 00                	push   0x0
c000fd99:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fd9d:	50                   	push   eax
c000fd9e:	e8 2d 07 ff ff       	call   c00004d0 <memset>
c000fda3:	83 c4 10             	add    esp,0x10
c000fda6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fdae:	eb 0f                	jmp    c000fdbf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fdb0:	3c 3d                	cmp    al,0x3d
c000fdb2:	74 07                	je     c000fdbb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fdb4:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fdb8:	46                   	inc    esi
c000fdb9:	eb 04                	jmp    c000fdbf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fdbb:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fdbf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fdc4:	0f 85 c6 fe ff ff    	jne    c000fc90 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fdca:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fdd0:	5b                   	pop    ebx
c000fdd1:	5e                   	pop    esi
c000fdd2:	5f                   	pop    edi
c000fdd3:	5d                   	pop    ebp
c000fdd4:	c3                   	ret    
c000fdd5:	90                   	nop

c000fdd6 <EnvVarContainer::__loadSystem()>:
c000fdd6:	83 ec 10             	sub    esp,0x10
c000fdd9:	68 00 f6 01 c0       	push   0xc001f600
c000fdde:	68 c4 e3 01 c0       	push   0xc001e3c4
c000fde3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fde7:	e8 04 fe ff ff       	call   c000fbf0 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fdec:	83 c4 1c             	add    esp,0x1c
c000fdef:	c3                   	ret    

c000fdf0 <EnvVarContainer::__loadUser()>:
c000fdf0:	c3                   	ret    
c000fdf1:	90                   	nop

c000fdf2 <EnvVarContainer::EnvVarContainer(Process*)>:
c000fdf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdf6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fdfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe04:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fe07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe0b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe12:	90                   	nop
c000fe13:	c3                   	ret    

c000fe14 <EnvVarContainer::~EnvVarContainer()>:
c000fe14:	83 ec 0c             	sub    esp,0xc
c000fe17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe1e:	85 c0                	test   eax,eax
c000fe20:	74 1d                	je     c000fe3f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe26:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe28:	85 c0                	test   eax,eax
c000fe2a:	74 13                	je     c000fe3f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe33:	83 ec 0c             	sub    esp,0xc
c000fe36:	50                   	push   eax
c000fe37:	e8 d9 79 ff ff       	call   c0007815 <free>
c000fe3c:	83 c4 10             	add    esp,0x10
c000fe3f:	90                   	nop
c000fe40:	83 c4 0c             	add    esp,0xc
c000fe43:	c3                   	ret    

c000fe44 <Krnl::getEnv(Process*, char const*)>:
c000fe44:	53                   	push   ebx
c000fe45:	83 ec 08             	sub    esp,0x8
c000fe48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe4c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fe50:	39 05 50 3b 02 c0    	cmp    DWORD PTR ds:0xc0023b50,eax
c000fe56:	74 04                	je     c000fe5c <Krnl::getEnv(Process*, char const*)+0x18>
c000fe58:	85 c0                	test   eax,eax
c000fe5a:	75 0b                	jne    c000fe67 <Krnl::getEnv(Process*, char const*)+0x23>
c000fe5c:	a1 f0 30 02 c0       	mov    eax,ds:0xc00230f0
c000fe61:	85 c0                	test   eax,eax
c000fe63:	75 19                	jne    c000fe7e <Krnl::getEnv(Process*, char const*)+0x3a>
c000fe65:	eb 27                	jmp    c000fe8e <Krnl::getEnv(Process*, char const*)+0x4a>
c000fe67:	52                   	push   edx
c000fe68:	52                   	push   edx
c000fe69:	53                   	push   ebx
c000fe6a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000fe70:	e8 79 fc ff ff       	call   c000faee <EnvVarContainer::getEnv(char const*)>
c000fe75:	83 c4 10             	add    esp,0x10
c000fe78:	85 c0                	test   eax,eax
c000fe7a:	75 28                	jne    c000fea4 <Krnl::getEnv(Process*, char const*)+0x60>
c000fe7c:	eb de                	jmp    c000fe5c <Krnl::getEnv(Process*, char const*)+0x18>
c000fe7e:	52                   	push   edx
c000fe7f:	52                   	push   edx
c000fe80:	53                   	push   ebx
c000fe81:	50                   	push   eax
c000fe82:	e8 67 fc ff ff       	call   c000faee <EnvVarContainer::getEnv(char const*)>
c000fe87:	83 c4 10             	add    esp,0x10
c000fe8a:	85 c0                	test   eax,eax
c000fe8c:	75 16                	jne    c000fea4 <Krnl::getEnv(Process*, char const*)+0x60>
c000fe8e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fe92:	a1 f4 30 02 c0       	mov    eax,ds:0xc00230f4
c000fe97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fe9b:	83 c4 08             	add    esp,0x8
c000fe9e:	5b                   	pop    ebx
c000fe9f:	e9 4a fc ff ff       	jmp    c000faee <EnvVarContainer::getEnv(char const*)>
c000fea4:	83 c4 08             	add    esp,0x8
c000fea7:	5b                   	pop    ebx
c000fea8:	c3                   	ret    

c000fea9 <Krnl::setEnvSystem(char const*, char const*)>:
c000fea9:	83 ec 10             	sub    esp,0x10
c000feac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000feb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000feb4:	ff 35 f4 30 02 c0    	push   DWORD PTR ds:0xc00230f4
c000feba:	e8 6d fc ff ff       	call   c000fb2c <EnvVarContainer::setEnv(char const*, char const*)>
c000febf:	83 c4 1c             	add    esp,0x1c
c000fec2:	c3                   	ret    

c000fec3 <Krnl::setEnvUser(char const*, char const*)>:
c000fec3:	a1 f0 30 02 c0       	mov    eax,ds:0xc00230f0
c000fec8:	85 c0                	test   eax,eax
c000feca:	74 15                	je     c000fee1 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000fecc:	83 ec 10             	sub    esp,0x10
c000fecf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fed3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fed7:	50                   	push   eax
c000fed8:	e8 4f fc ff ff       	call   c000fb2c <EnvVarContainer::setEnv(char const*, char const*)>
c000fedd:	83 c4 1c             	add    esp,0x1c
c000fee0:	c3                   	ret    
c000fee1:	c3                   	ret    

c000fee2 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000fee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fee6:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000feec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fef0:	e9 37 fc ff ff       	jmp    c000fb2c <EnvVarContainer::setEnv(char const*, char const*)>

c000fef5 <Krnl::deleteEnvSystem(char const*)>:
c000fef5:	c3                   	ret    

c000fef6 <Krnl::deleteEnvUser(char const*)>:
c000fef6:	c3                   	ret    

c000fef7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000fef7:	c3                   	ret    

c000fef8 <Krnl::newProcessEnv(Process*)>:
c000fef8:	83 ec 28             	sub    esp,0x28
c000fefb:	6a 0c                	push   0xc
c000fefd:	e8 03 79 ff ff       	call   c0007805 <malloc>
c000ff02:	5a                   	pop    edx
c000ff03:	59                   	pop    ecx
c000ff04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff08:	50                   	push   eax
c000ff09:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ff0d:	e8 e0 fe ff ff       	call   c000fdf2 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff16:	83 c4 2c             	add    esp,0x2c
c000ff19:	c3                   	ret    

c000ff1a <Krnl::copyProcessEnv(Process*, Process*)>:
c000ff1a:	57                   	push   edi
c000ff1b:	56                   	push   esi
c000ff1c:	53                   	push   ebx
c000ff1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff21:	83 ec 0c             	sub    esp,0xc
c000ff24:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ff2a:	6a 0c                	push   0xc
c000ff2c:	e8 d4 78 ff ff       	call   c0007805 <malloc>
c000ff31:	89 c3                	mov    ebx,eax
c000ff33:	58                   	pop    eax
c000ff34:	5a                   	pop    edx
c000ff35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff39:	53                   	push   ebx
c000ff3a:	e8 b3 fe ff ff       	call   c000fdf2 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff3f:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff41:	89 03                	mov    DWORD PTR [ebx],eax
c000ff43:	c1 e0 03             	shl    eax,0x3
c000ff46:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff49:	e8 b7 78 ff ff       	call   c0007805 <malloc>
c000ff4e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ff51:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ff53:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ff56:	c1 e1 03             	shl    ecx,0x3
c000ff59:	89 c7                	mov    edi,eax
c000ff5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff5d:	83 c4 10             	add    esp,0x10
c000ff60:	89 d8                	mov    eax,ebx
c000ff62:	5b                   	pop    ebx
c000ff63:	5e                   	pop    esi
c000ff64:	5f                   	pop    edi
c000ff65:	c3                   	ret    

c000ff66 <Krnl::loadSystemEnv()>:
c000ff66:	53                   	push   ebx
c000ff67:	83 ec 14             	sub    esp,0x14
c000ff6a:	6a 0c                	push   0xc
c000ff6c:	e8 94 78 ff ff       	call   c0007805 <malloc>
c000ff71:	89 c3                	mov    ebx,eax
c000ff73:	58                   	pop    eax
c000ff74:	5a                   	pop    edx
c000ff75:	ff 35 50 3b 02 c0    	push   DWORD PTR ds:0xc0023b50
c000ff7b:	53                   	push   ebx
c000ff7c:	e8 71 fe ff ff       	call   c000fdf2 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff84:	89 1d f4 30 02 c0    	mov    DWORD PTR ds:0xc00230f4,ebx
c000ff8a:	e8 47 fe ff ff       	call   c000fdd6 <EnvVarContainer::__loadSystem()>
c000ff8f:	83 c4 18             	add    esp,0x18
c000ff92:	5b                   	pop    ebx
c000ff93:	c3                   	ret    

c000ff94 <Krnl::loadUserEnv()>:
c000ff94:	53                   	push   ebx
c000ff95:	83 ec 14             	sub    esp,0x14
c000ff98:	6a 0c                	push   0xc
c000ff9a:	e8 66 78 ff ff       	call   c0007805 <malloc>
c000ff9f:	89 c3                	mov    ebx,eax
c000ffa1:	58                   	pop    eax
c000ffa2:	5a                   	pop    edx
c000ffa3:	ff 35 50 3b 02 c0    	push   DWORD PTR ds:0xc0023b50
c000ffa9:	53                   	push   ebx
c000ffaa:	e8 43 fe ff ff       	call   c000fdf2 <EnvVarContainer::EnvVarContainer(Process*)>
c000ffaf:	89 1d f0 30 02 c0    	mov    DWORD PTR ds:0xc00230f0,ebx
c000ffb5:	83 c4 18             	add    esp,0x18
c000ffb8:	5b                   	pop    ebx
c000ffb9:	c3                   	ret    

c000ffba <Krnl::flushEnv()>:
c000ffba:	c3                   	ret    

c000ffbb <Krnl::getProcessTotalEnvCount(Process*)>:
c000ffbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffbf:	8b 15 f0 30 02 c0    	mov    edx,DWORD PTR ds:0xc00230f0
c000ffc5:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000ffcb:	a1 f4 30 02 c0       	mov    eax,ds:0xc00230f4
c000ffd0:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffd2:	03 01                	add    eax,DWORD PTR [ecx]
c000ffd4:	85 d2                	test   edx,edx
c000ffd6:	74 02                	je     c000ffda <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c000ffd8:	03 02                	add    eax,DWORD PTR [edx]
c000ffda:	c3                   	ret    

c000ffdb <Krnl::getProcessEnvPair(Process*, int)>:
c000ffdb:	57                   	push   edi
c000ffdc:	56                   	push   esi
c000ffdd:	8b 35 f0 30 02 c0    	mov    esi,DWORD PTR ds:0xc00230f0
c000ffe3:	53                   	push   ebx
c000ffe4:	85 f6                	test   esi,esi
c000ffe6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffee:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000fff4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fff8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fffa:	75 16                	jne    c0010012 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c000fffc:	39 c2                	cmp    edx,eax
c000fffe:	7c 16                	jl     c0010016 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010000:	8b 0d f4 30 02 c0    	mov    ecx,DWORD PTR ds:0xc00230f4
c0010006:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010008:	01 c6                	add    esi,eax
c001000a:	39 d6                	cmp    esi,edx
c001000c:	7e 3c                	jle    c001004a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001000e:	29 c2                	sub    edx,eax
c0010010:	eb 04                	jmp    c0010016 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010012:	39 c2                	cmp    edx,eax
c0010014:	7d 05                	jge    c001001b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010016:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010019:	eb 20                	jmp    c001003b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001001b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001001d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010020:	39 d1                	cmp    ecx,edx
c0010022:	7e 04                	jle    c0010028 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010024:	29 c2                	sub    edx,eax
c0010026:	eb 10                	jmp    c0010038 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010028:	8b 35 f4 30 02 c0    	mov    esi,DWORD PTR ds:0xc00230f4
c001002e:	03 0e                	add    ecx,DWORD PTR [esi]
c0010030:	39 d1                	cmp    ecx,edx
c0010032:	7e 16                	jle    c001004a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010034:	29 c2                	sub    edx,eax
c0010036:	29 fa                	sub    edx,edi
c0010038:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001003b:	8d 14 d0             	lea    edx,[eax+edx*8]
c001003e:	8b 02                	mov    eax,DWORD PTR [edx]
c0010040:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010043:	89 03                	mov    DWORD PTR [ebx],eax
c0010045:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010048:	eb 1d                	jmp    c0010067 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001004a:	83 ec 0c             	sub    esp,0xc
c001004d:	68 e6 e3 01 c0       	push   0xc001e3e6
c0010052:	e8 ac 00 00 00       	call   c0010103 <KePanic(char const*)>
c0010057:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001005d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010064:	83 c4 10             	add    esp,0x10
c0010067:	89 d8                	mov    eax,ebx
c0010069:	5b                   	pop    ebx
c001006a:	5e                   	pop    esi
c001006b:	5f                   	pop    edi
c001006c:	c2 04 00             	ret    0x4

c001006f <CPU::current()>:
c001006f:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0010074:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001007a:	c3                   	ret    

c001007b <operator new(unsigned long)>:
c001007b:	e9 85 77 ff ff       	jmp    c0007805 <malloc>

c0010080 <operator delete(void*)>:
c0010080:	e9 a0 77 ff ff       	jmp    c0007825 <rfree>

c0010085 <disableIRQs()>:
c0010085:	fa                   	cli    
c0010086:	c3                   	ret    

c0010087 <enableIRQs()>:
c0010087:	fb                   	sti    
c0010088:	c3                   	ret    

c0010089 <lockScheduler()>:
c0010089:	fa                   	cli    
c001008a:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c0010090:	c3                   	ret    

c0010091 <unlockScheduler()>:
c0010091:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0010096:	48                   	dec    eax
c0010097:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c001009c:	75 01                	jne    c001009f <unlockScheduler()+0xe>
c001009e:	fb                   	sti    
c001009f:	c3                   	ret    

c00100a0 <lockStuff()>:
c00100a0:	fa                   	cli    
c00100a1:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c00100a7:	ff 05 24 3b 02 c0    	inc    DWORD PTR ds:0xc0023b24
c00100ad:	c3                   	ret    

c00100ae <unlockStuff()>:
c00100ae:	83 ec 0c             	sub    esp,0xc
c00100b1:	a1 24 3b 02 c0       	mov    eax,ds:0xc0023b24
c00100b6:	48                   	dec    eax
c00100b7:	a3 24 3b 02 c0       	mov    ds:0xc0023b24,eax
c00100bc:	75 18                	jne    c00100d6 <unlockStuff()+0x28>
c00100be:	83 3d 20 3b 02 c0 00 	cmp    DWORD PTR ds:0xc0023b20,0x0
c00100c5:	74 0f                	je     c00100d6 <unlockStuff()+0x28>
c00100c7:	c7 05 20 3b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023b20,0x0
c00100d1:	e8 1a 34 00 00       	call   c00134f0 <schedule()>
c00100d6:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c00100db:	48                   	dec    eax
c00100dc:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c00100e1:	75 01                	jne    c00100e4 <unlockStuff()+0x36>
c00100e3:	fb                   	sti    
c00100e4:	83 c4 0c             	add    esp,0xc
c00100e7:	c3                   	ret    

c00100e8 <Virt::getAKernelVAS()>:
c00100e8:	a1 70 07 02 c0       	mov    eax,ds:0xc0020770
c00100ed:	c3                   	ret    

c00100ee <__not_memcpy>:
c00100ee:	57                   	push   edi
c00100ef:	56                   	push   esi
c00100f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100f4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00100fc:	89 c7                	mov    edi,eax
c00100fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010100:	5e                   	pop    esi
c0010101:	5f                   	pop    edi
c0010102:	c3                   	ret    

c0010103 <KePanic(char const*)>:
c0010103:	c6 05 f8 30 02 c0 01 	mov    BYTE PTR ds:0xc00230f8,0x1
c001010a:	e9 d9 51 00 00       	jmp    c00152e8 <HalPanic(char const*)>

c001010f <Krnl::powerThread(void*)>:
c001010f:	83 ec 0c             	sub    esp,0xc
c0010112:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0010117:	48                   	dec    eax
c0010118:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c001011d:	75 01                	jne    c0010120 <Krnl::powerThread(void*)+0x11>
c001011f:	fb                   	sti    
c0010120:	83 ec 0c             	sub    esp,0xc
c0010123:	c6 05 00 31 02 c0 00 	mov    BYTE PTR ds:0xc0023100,0x0
c001012a:	6a 0a                	push   0xa
c001012c:	e8 cf 36 00 00       	call   c0013800 <sleep(unsigned int)>
c0010131:	83 05 44 31 02 c0 0a 	add    DWORD PTR ds:0xc0023144,0xa
c0010138:	83 c4 10             	add    esp,0x10
c001013b:	eb e3                	jmp    c0010120 <Krnl::powerThread(void*)+0x11>

c001013d <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001013d:	57                   	push   edi
c001013e:	b9 09 00 00 00       	mov    ecx,0x9
c0010143:	56                   	push   esi
c0010144:	bf 20 31 02 c0       	mov    edi,0xc0023120
c0010149:	fc                   	cld    
c001014a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001014e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010150:	5e                   	pop    esi
c0010151:	5f                   	pop    edi
c0010152:	c3                   	ret    

c0010153 <Krnl::userIOReceived()>:
c0010153:	c7 05 44 31 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023144,0x0
c001015d:	c3                   	ret    

c001015e <Krnl::handlePowerButton()>:
c001015e:	83 ec 0c             	sub    esp,0xc
c0010161:	a1 20 31 02 c0       	mov    eax,ds:0xc0023120
c0010166:	83 f8 02             	cmp    eax,0x2
c0010169:	75 10                	jne    c001017b <Krnl::handlePowerButton()+0x1d>
c001016b:	83 ec 0c             	sub    esp,0xc
c001016e:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0010174:	e8 29 6d ff ff       	call   c0006ea2 <Computer::shutdown()>
c0010179:	eb 11                	jmp    c001018c <Krnl::handlePowerButton()+0x2e>
c001017b:	48                   	dec    eax
c001017c:	75 11                	jne    c001018f <Krnl::handlePowerButton()+0x31>
c001017e:	83 ec 0c             	sub    esp,0xc
c0010181:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0010187:	e8 46 6d ff ff       	call   c0006ed2 <Computer::sleep()>
c001018c:	83 c4 10             	add    esp,0x10
c001018f:	83 c4 0c             	add    esp,0xc
c0010192:	c3                   	ret    

c0010193 <Krnl::handleSleepButton()>:
c0010193:	83 ec 0c             	sub    esp,0xc
c0010196:	a1 24 31 02 c0       	mov    eax,ds:0xc0023124
c001019b:	83 f8 02             	cmp    eax,0x2
c001019e:	75 10                	jne    c00101b0 <Krnl::handleSleepButton()+0x1d>
c00101a0:	83 ec 0c             	sub    esp,0xc
c00101a3:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c00101a9:	e8 f4 6c ff ff       	call   c0006ea2 <Computer::shutdown()>
c00101ae:	eb 11                	jmp    c00101c1 <Krnl::handleSleepButton()+0x2e>
c00101b0:	48                   	dec    eax
c00101b1:	75 11                	jne    c00101c4 <Krnl::handleSleepButton()+0x31>
c00101b3:	83 ec 0c             	sub    esp,0xc
c00101b6:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c00101bc:	e8 11 6d ff ff       	call   c0006ed2 <Computer::sleep()>
c00101c1:	83 c4 10             	add    esp,0x10
c00101c4:	83 c4 0c             	add    esp,0xc
c00101c7:	c3                   	ret    

c00101c8 <Krnl::setupPowerManager()>:
c00101c8:	83 ec 0c             	sub    esp,0xc
c00101cb:	c7 05 44 31 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023144,0x0
c00101d5:	68 f0 00 00 00       	push   0xf0
c00101da:	c6 05 00 31 02 c0 00 	mov    BYTE PTR ds:0xc0023100,0x0
c00101e1:	6a 00                	push   0x0
c00101e3:	68 0f 01 01 c0       	push   0xc001010f
c00101e8:	ff 35 50 3b 02 c0    	push   DWORD PTR ds:0xc0023b50
c00101ee:	e8 dd 30 00 00       	call   c00132d0 <Process::createThread(void (*)(void*), void*, int)>
c00101f3:	c7 05 20 31 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0023120,0x2
c00101fd:	c7 05 24 31 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023124,0x1
c0010207:	c7 05 28 31 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0023128,0x3
c0010211:	c7 05 2c 31 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002312c,0x0
c001021b:	c7 05 38 31 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023138,0x0
c0010225:	c7 05 30 31 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023130,0x0
c001022f:	c7 05 3c 31 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002313c,0x0
c0010239:	c7 05 34 31 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023134,0x3c
c0010243:	c7 05 40 31 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023140,0x3c
c001024d:	83 c4 1c             	add    esp,0x1c
c0010250:	c3                   	ret    
c0010251:	66 90                	xchg   ax,ax
c0010253:	90                   	nop

c0010254 <KeResolveCompatibilitySymbol(char*)>:
c0010254:	83 ec 0c             	sub    esp,0xc
c0010257:	83 ec 08             	sub    esp,0x8
c001025a:	68 00 e4 01 c0       	push   0xc001e400
c001025f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010263:	e8 78 04 ff ff       	call   c00006e0 <strcmp>
c0010268:	83 c4 10             	add    esp,0x10
c001026b:	85 c0                	test   eax,eax
c001026d:	0f 94 c0             	sete   al
c0010270:	84 c0                	test   al,al
c0010272:	74 0c                	je     c0010280 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010274:	b8 78 06 02 c0       	mov    eax,0xc0020678
c0010279:	e9 62 01 00 00       	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001027e:	66 90                	xchg   ax,ax
c0010280:	83 ec 08             	sub    esp,0x8
c0010283:	68 09 e4 01 c0       	push   0xc001e409
c0010288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001028c:	e8 4f 04 ff ff       	call   c00006e0 <strcmp>
c0010291:	83 c4 10             	add    esp,0x10
c0010294:	85 c0                	test   eax,eax
c0010296:	0f 94 c0             	sete   al
c0010299:	84 c0                	test   al,al
c001029b:	74 0b                	je     c00102a8 <KeResolveCompatibilitySymbol(char*)+0x54>
c001029d:	b8 40 be 01 c0       	mov    eax,0xc001be40
c00102a2:	e9 39 01 00 00       	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102a7:	90                   	nop
c00102a8:	83 ec 08             	sub    esp,0x8
c00102ab:	68 13 e4 01 c0       	push   0xc001e413
c00102b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b4:	e8 27 04 ff ff       	call   c00006e0 <strcmp>
c00102b9:	83 c4 10             	add    esp,0x10
c00102bc:	85 c0                	test   eax,eax
c00102be:	0f 94 c0             	sete   al
c00102c1:	84 c0                	test   al,al
c00102c3:	74 0b                	je     c00102d0 <KeResolveCompatibilitySymbol(char*)+0x7c>
c00102c5:	b8 74 bb 01 c0       	mov    eax,0xc001bb74
c00102ca:	e9 11 01 00 00       	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102cf:	90                   	nop
c00102d0:	83 ec 08             	sub    esp,0x8
c00102d3:	68 1c e4 01 c0       	push   0xc001e41c
c00102d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102dc:	e8 ff 03 ff ff       	call   c00006e0 <strcmp>
c00102e1:	83 c4 10             	add    esp,0x10
c00102e4:	85 c0                	test   eax,eax
c00102e6:	0f 94 c0             	sete   al
c00102e9:	84 c0                	test   al,al
c00102eb:	74 0b                	je     c00102f8 <KeResolveCompatibilitySymbol(char*)+0xa4>
c00102ed:	b8 03 01 01 c0       	mov    eax,0xc0010103
c00102f2:	e9 e9 00 00 00       	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102f7:	90                   	nop
c00102f8:	83 ec 08             	sub    esp,0x8
c00102fb:	68 2f e4 01 c0       	push   0xc001e42f
c0010300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010304:	e8 d7 03 ff ff       	call   c00006e0 <strcmp>
c0010309:	83 c4 10             	add    esp,0x10
c001030c:	85 c0                	test   eax,eax
c001030e:	0f 94 c0             	sete   al
c0010311:	84 c0                	test   al,al
c0010313:	74 0b                	je     c0010320 <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010315:	b8 8b fa 00 c0       	mov    eax,0xc000fa8b
c001031a:	e9 c1 00 00 00       	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001031f:	90                   	nop
c0010320:	83 ec 08             	sub    esp,0x8
c0010323:	68 4c e4 01 c0       	push   0xc001e44c
c0010328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001032c:	e8 af 03 ff ff       	call   c00006e0 <strcmp>
c0010331:	83 c4 10             	add    esp,0x10
c0010334:	85 c0                	test   eax,eax
c0010336:	0f 94 c0             	sete   al
c0010339:	84 c0                	test   al,al
c001033b:	74 0b                	je     c0010348 <KeResolveCompatibilitySymbol(char*)+0xf4>
c001033d:	b8 40 bf 01 c0       	mov    eax,0xc001bf40
c0010342:	e9 99 00 00 00       	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010347:	90                   	nop
c0010348:	83 ec 08             	sub    esp,0x8
c001034b:	68 56 e4 01 c0       	push   0xc001e456
c0010350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010354:	e8 87 03 ff ff       	call   c00006e0 <strcmp>
c0010359:	83 c4 10             	add    esp,0x10
c001035c:	85 c0                	test   eax,eax
c001035e:	0f 94 c0             	sete   al
c0010361:	84 c0                	test   al,al
c0010363:	74 07                	je     c001036c <KeResolveCompatibilitySymbol(char*)+0x118>
c0010365:	b8 c0 bc 01 c0       	mov    eax,0xc001bcc0
c001036a:	eb 74                	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001036c:	83 ec 08             	sub    esp,0x8
c001036f:	68 5f e4 01 c0       	push   0xc001e45f
c0010374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010378:	e8 63 03 ff ff       	call   c00006e0 <strcmp>
c001037d:	83 c4 10             	add    esp,0x10
c0010380:	85 c0                	test   eax,eax
c0010382:	0f 94 c0             	sete   al
c0010385:	84 c0                	test   al,al
c0010387:	74 07                	je     c0010390 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010389:	b8 7c 06 02 c0       	mov    eax,0xc002067c
c001038e:	eb 50                	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010390:	83 ec 08             	sub    esp,0x8
c0010393:	68 77 e4 01 c0       	push   0xc001e477
c0010398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001039c:	e8 3f 03 ff ff       	call   c00006e0 <strcmp>
c00103a1:	83 c4 10             	add    esp,0x10
c00103a4:	85 c0                	test   eax,eax
c00103a6:	0f 94 c0             	sete   al
c00103a9:	84 c0                	test   al,al
c00103ab:	74 07                	je     c00103b4 <KeResolveCompatibilitySymbol(char*)+0x160>
c00103ad:	b8 7c 06 02 c0       	mov    eax,0xc002067c
c00103b2:	eb 2c                	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103b4:	83 ec 08             	sub    esp,0x8
c00103b7:	68 84 e4 01 c0       	push   0xc001e484
c00103bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103c0:	e8 1b 03 ff ff       	call   c00006e0 <strcmp>
c00103c5:	83 c4 10             	add    esp,0x10
c00103c8:	85 c0                	test   eax,eax
c00103ca:	0f 94 c0             	sete   al
c00103cd:	84 c0                	test   al,al
c00103cf:	74 07                	je     c00103d8 <KeResolveCompatibilitySymbol(char*)+0x184>
c00103d1:	b8 7d 06 02 c0       	mov    eax,0xc002067d
c00103d6:	eb 08                	jmp    c00103e0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103d8:	b8 00 00 00 00       	mov    eax,0x0
c00103dd:	8d 76 00             	lea    esi,[esi+0x0]
c00103e0:	83 c4 0c             	add    esp,0xc
c00103e3:	c3                   	ret    

c00103e4 <SysSeekDir(regs*)>:
c00103e4:	31 c0                	xor    eax,eax
c00103e6:	31 d2                	xor    edx,edx
c00103e8:	c3                   	ret    

c00103e9 <SysTellDir(regs*)>:
c00103e9:	31 c0                	xor    eax,eax
c00103eb:	31 d2                	xor    edx,edx
c00103ed:	c3                   	ret    

c00103ee <SysVerify(regs*)>:
c00103ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103f2:	31 d2                	xor    edx,edx
c00103f4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00103f7:	c3                   	ret    

c00103f8 <SysGetArgc(regs*)>:
c00103f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00103fd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010400:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010406:	99                   	cdq    
c0010407:	c3                   	ret    

c0010408 <SysTTYName(regs*)>:
c0010408:	b8 01 00 00 00       	mov    eax,0x1
c001040d:	31 d2                	xor    edx,edx
c001040f:	c3                   	ret    

c0010410 <SysFormatDisk(regs*)>:
c0010410:	56                   	push   esi
c0010411:	53                   	push   ebx
c0010412:	50                   	push   eax
c0010413:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010417:	8b 1d 74 07 02 c0    	mov    ebx,DWORD PTR ds:0xc0020774
c001041d:	eb 28                	jmp    c0010447 <SysFormatDisk(regs*)+0x37>
c001041f:	83 ec 0c             	sub    esp,0xc
c0010422:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010425:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010428:	8b 13                	mov    edx,DWORD PTR [ebx]
c001042a:	51                   	push   ecx
c001042b:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001042e:	51                   	push   ecx
c001042f:	50                   	push   eax
c0010430:	8b 04 85 e0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd420]
c0010437:	50                   	push   eax
c0010438:	53                   	push   ebx
c0010439:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001043c:	83 c4 20             	add    esp,0x20
c001043f:	83 f8 08             	cmp    eax,0x8
c0010442:	75 12                	jne    c0010456 <SysFormatDisk(regs*)+0x46>
c0010444:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010447:	85 db                	test   ebx,ebx
c0010449:	75 d4                	jne    c001041f <SysFormatDisk(regs*)+0xf>
c001044b:	59                   	pop    ecx
c001044c:	b8 03 00 00 00       	mov    eax,0x3
c0010451:	31 d2                	xor    edx,edx
c0010453:	5b                   	pop    ebx
c0010454:	5e                   	pop    esi
c0010455:	c3                   	ret    
c0010456:	85 c0                	test   eax,eax
c0010458:	74 1b                	je     c0010475 <SysFormatDisk(regs*)+0x65>
c001045a:	83 f8 09             	cmp    eax,0x9
c001045d:	74 0b                	je     c001046a <SysFormatDisk(regs*)+0x5a>
c001045f:	59                   	pop    ecx
c0010460:	b8 02 00 00 00       	mov    eax,0x2
c0010465:	31 d2                	xor    edx,edx
c0010467:	5b                   	pop    ebx
c0010468:	5e                   	pop    esi
c0010469:	c3                   	ret    
c001046a:	59                   	pop    ecx
c001046b:	b8 01 00 00 00       	mov    eax,0x1
c0010470:	31 d2                	xor    edx,edx
c0010472:	5b                   	pop    ebx
c0010473:	5e                   	pop    esi
c0010474:	c3                   	ret    
c0010475:	59                   	pop    ecx
c0010476:	31 c0                	xor    eax,eax
c0010478:	31 d2                	xor    edx,edx
c001047a:	5b                   	pop    ebx
c001047b:	5e                   	pop    esi
c001047c:	c3                   	ret    

c001047d <SysSetDiskVolumeLabel(regs*)>:
c001047d:	56                   	push   esi
c001047e:	53                   	push   ebx
c001047f:	53                   	push   ebx
c0010480:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010484:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010487:	83 f8 19             	cmp    eax,0x19
c001048a:	77 2d                	ja     c00104b9 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001048c:	8b 0c 85 e0 2b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd420]
c0010493:	85 c9                	test   ecx,ecx
c0010495:	74 22                	je     c00104b9 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010497:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001049a:	85 db                	test   ebx,ebx
c001049c:	74 1b                	je     c00104b9 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001049e:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00104a4:	85 d2                	test   edx,edx
c00104a6:	74 11                	je     c00104b9 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00104a8:	8b 32                	mov    esi,DWORD PTR [edx]
c00104aa:	53                   	push   ebx
c00104ab:	50                   	push   eax
c00104ac:	51                   	push   ecx
c00104ad:	52                   	push   edx
c00104ae:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00104b1:	83 c4 10             	add    esp,0x10
c00104b4:	99                   	cdq    
c00104b5:	59                   	pop    ecx
c00104b6:	5b                   	pop    ebx
c00104b7:	5e                   	pop    esi
c00104b8:	c3                   	ret    
c00104b9:	59                   	pop    ecx
c00104ba:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00104bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104c4:	5b                   	pop    ebx
c00104c5:	5e                   	pop    esi
c00104c6:	c3                   	ret    

c00104c7 <SysGetDiskVolumeLabel(regs*)>:
c00104c7:	57                   	push   edi
c00104c8:	56                   	push   esi
c00104c9:	53                   	push   ebx
c00104ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ce:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00104d1:	83 fa 19             	cmp    edx,0x19
c00104d4:	77 38                	ja     c001050e <SysGetDiskVolumeLabel(regs*)+0x47>
c00104d6:	8b 0c 95 e0 2b 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd420]
c00104dd:	85 c9                	test   ecx,ecx
c00104df:	74 2d                	je     c001050e <SysGetDiskVolumeLabel(regs*)+0x47>
c00104e1:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00104e4:	85 db                	test   ebx,ebx
c00104e6:	74 26                	je     c001050e <SysGetDiskVolumeLabel(regs*)+0x47>
c00104e8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00104eb:	85 f6                	test   esi,esi
c00104ed:	74 1f                	je     c001050e <SysGetDiskVolumeLabel(regs*)+0x47>
c00104ef:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00104f5:	85 c0                	test   eax,eax
c00104f7:	74 15                	je     c001050e <SysGetDiskVolumeLabel(regs*)+0x47>
c00104f9:	83 ec 0c             	sub    esp,0xc
c00104fc:	8b 38                	mov    edi,DWORD PTR [eax]
c00104fe:	56                   	push   esi
c00104ff:	53                   	push   ebx
c0010500:	52                   	push   edx
c0010501:	51                   	push   ecx
c0010502:	50                   	push   eax
c0010503:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010506:	83 c4 20             	add    esp,0x20
c0010509:	99                   	cdq    
c001050a:	5b                   	pop    ebx
c001050b:	5e                   	pop    esi
c001050c:	5f                   	pop    edi
c001050d:	c3                   	ret    
c001050e:	5b                   	pop    ebx
c001050f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010514:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010519:	5e                   	pop    esi
c001051a:	5f                   	pop    edi
c001051b:	c3                   	ret    

c001051c <SysShutdown(regs*)>:
c001051c:	83 ec 0c             	sub    esp,0xc
c001051f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010523:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010526:	85 c0                	test   eax,eax
c0010528:	74 18                	je     c0010542 <SysShutdown(regs*)+0x26>
c001052a:	83 f8 01             	cmp    eax,0x1
c001052d:	74 38                	je     c0010567 <SysShutdown(regs*)+0x4b>
c001052f:	83 f8 02             	cmp    eax,0x2
c0010532:	74 24                	je     c0010558 <SysShutdown(regs*)+0x3c>
c0010534:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010539:	ba ff ff ff ff       	mov    edx,0xffffffff
c001053e:	83 c4 0c             	add    esp,0xc
c0010541:	c3                   	ret    
c0010542:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0010547:	8b 10                	mov    edx,DWORD PTR [eax]
c0010549:	6a 00                	push   0x0
c001054b:	6a 00                	push   0x0
c001054d:	6a 00                	push   0x0
c001054f:	50                   	push   eax
c0010550:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010553:	83 c4 10             	add    esp,0x10
c0010556:	eb dc                	jmp    c0010534 <SysShutdown(regs*)+0x18>
c0010558:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c001055d:	8b 10                	mov    edx,DWORD PTR [eax]
c001055f:	6a 00                	push   0x0
c0010561:	6a 00                	push   0x0
c0010563:	6a 01                	push   0x1
c0010565:	eb e8                	jmp    c001054f <SysShutdown(regs*)+0x33>
c0010567:	a1 60 2c 02 c0       	mov    eax,ds:0xc0022c60
c001056c:	85 c0                	test   eax,eax
c001056e:	74 02                	je     c0010572 <SysShutdown(regs*)+0x56>
c0010570:	ff d0                	call   eax
c0010572:	31 c0                	xor    eax,eax
c0010574:	31 d2                	xor    edx,edx
c0010576:	83 c4 0c             	add    esp,0xc
c0010579:	c3                   	ret    

c001057a <SysRealpath(regs*)>:
c001057a:	83 ec 0c             	sub    esp,0xc
c001057d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010581:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010584:	85 d2                	test   edx,edx
c0010586:	74 07                	je     c001058f <SysRealpath(regs*)+0x15>
c0010588:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001058b:	85 c0                	test   eax,eax
c001058d:	75 0b                	jne    c001059a <SysRealpath(regs*)+0x20>
c001058f:	b8 01 00 00 00       	mov    eax,0x1
c0010594:	31 d2                	xor    edx,edx
c0010596:	83 c4 0c             	add    esp,0xc
c0010599:	c3                   	ret    
c001059a:	51                   	push   ecx
c001059b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00105a1:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00105a4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00105aa:	51                   	push   ecx
c00105ab:	52                   	push   edx
c00105ac:	50                   	push   eax
c00105ad:	e8 ba a2 ff ff       	call   c000a86c <Fs::standardiseFiles(char*, char const*, char const*)>
c00105b2:	83 c4 10             	add    esp,0x10
c00105b5:	31 c0                	xor    eax,eax
c00105b7:	31 d2                	xor    edx,edx
c00105b9:	83 c4 0c             	add    esp,0xc
c00105bc:	c3                   	ret    

c00105bd <SysReadDir(regs*)>:
c00105bd:	53                   	push   ebx
c00105be:	83 ec 18             	sub    esp,0x18
c00105c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00105c5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00105c8:	83 f8 02             	cmp    eax,0x2
c00105cb:	76 61                	jbe    c001062e <SysReadDir(regs*)+0x71>
c00105cd:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00105d4:	77 49                	ja     c001061f <SysReadDir(regs*)+0x62>
c00105d6:	83 ec 0c             	sub    esp,0xc
c00105d9:	50                   	push   eax
c00105da:	e8 18 8b ff ff       	call   c00090f7 <getFromFileDescriptor(int)>
c00105df:	83 c4 10             	add    esp,0x10
c00105e2:	85 c0                	test   eax,eax
c00105e4:	74 39                	je     c001061f <SysReadDir(regs*)+0x62>
c00105e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00105ee:	83 ec 0c             	sub    esp,0xc
c00105f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00105f3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00105f7:	51                   	push   ecx
c00105f8:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00105fb:	51                   	push   ecx
c00105fc:	6a 00                	push   0x0
c00105fe:	68 10 01 00 00       	push   0x110
c0010603:	50                   	push   eax
c0010604:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010607:	83 c4 20             	add    esp,0x20
c001060a:	85 c0                	test   eax,eax
c001060c:	74 29                	je     c0010637 <SysReadDir(regs*)+0x7a>
c001060e:	83 f8 07             	cmp    eax,0x7
c0010611:	74 1b                	je     c001062e <SysReadDir(regs*)+0x71>
c0010613:	b8 02 00 00 00       	mov    eax,0x2
c0010618:	31 d2                	xor    edx,edx
c001061a:	83 c4 18             	add    esp,0x18
c001061d:	5b                   	pop    ebx
c001061e:	c3                   	ret    
c001061f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010624:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010629:	83 c4 18             	add    esp,0x18
c001062c:	5b                   	pop    ebx
c001062d:	c3                   	ret    
c001062e:	b8 01 00 00 00       	mov    eax,0x1
c0010633:	31 d2                	xor    edx,edx
c0010635:	eb e3                	jmp    c001061a <SysReadDir(regs*)+0x5d>
c0010637:	31 c0                	xor    eax,eax
c0010639:	31 d2                	xor    edx,edx
c001063b:	eb dd                	jmp    c001061a <SysReadDir(regs*)+0x5d>

c001063d <SysIsATTY(regs*)>:
c001063d:	83 ec 0c             	sub    esp,0xc
c0010640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010644:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010647:	83 f8 02             	cmp    eax,0x2
c001064a:	76 07                	jbe    c0010653 <SysIsATTY(regs*)+0x16>
c001064c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010651:	75 28                	jne    c001067b <SysIsATTY(regs*)+0x3e>
c0010653:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010658:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001065b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010661:	85 c0                	test   eax,eax
c0010663:	74 26                	je     c001068b <SysIsATTY(regs*)+0x4e>
c0010665:	83 ec 0c             	sub    esp,0xc
c0010668:	8b 10                	mov    edx,DWORD PTR [eax]
c001066a:	50                   	push   eax
c001066b:	ff 12                	call   DWORD PTR [edx]
c001066d:	31 d2                	xor    edx,edx
c001066f:	25 ff 00 00 00       	and    eax,0xff
c0010674:	83 c4 10             	add    esp,0x10
c0010677:	83 c4 0c             	add    esp,0xc
c001067a:	c3                   	ret    
c001067b:	83 ec 0c             	sub    esp,0xc
c001067e:	50                   	push   eax
c001067f:	e8 73 8a ff ff       	call   c00090f7 <getFromFileDescriptor(int)>
c0010684:	83 c4 10             	add    esp,0x10
c0010687:	85 c0                	test   eax,eax
c0010689:	75 da                	jne    c0010665 <SysIsATTY(regs*)+0x28>
c001068b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010690:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010695:	83 c4 0c             	add    esp,0xc
c0010698:	c3                   	ret    

c0010699 <SysSeek(regs*)>:
c0010699:	53                   	push   ebx
c001069a:	83 ec 08             	sub    esp,0x8
c001069d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106a1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00106a4:	8d 50 fd             	lea    edx,[eax-0x3]
c00106a7:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00106ad:	77 34                	ja     c00106e3 <SysSeek(regs*)+0x4a>
c00106af:	83 ec 0c             	sub    esp,0xc
c00106b2:	50                   	push   eax
c00106b3:	e8 3f 8a ff ff       	call   c00090f7 <getFromFileDescriptor(int)>
c00106b8:	83 c4 0c             	add    esp,0xc
c00106bb:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00106be:	31 db                	xor    ebx,ebx
c00106c0:	53                   	push   ebx
c00106c1:	51                   	push   ecx
c00106c2:	50                   	push   eax
c00106c3:	e8 cc a4 ff ff       	call   c000ab94 <File::seek(unsigned long long)>
c00106c8:	83 c4 10             	add    esp,0x10
c00106cb:	85 c0                	test   eax,eax
c00106cd:	0f 95 c0             	setne  al
c00106d0:	31 d2                	xor    edx,edx
c00106d2:	25 ff 00 00 00       	and    eax,0xff
c00106d7:	f7 d8                	neg    eax
c00106d9:	83 d2 00             	adc    edx,0x0
c00106dc:	83 c4 08             	add    esp,0x8
c00106df:	f7 da                	neg    edx
c00106e1:	5b                   	pop    ebx
c00106e2:	c3                   	ret    
c00106e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106ed:	83 c4 08             	add    esp,0x8
c00106f0:	5b                   	pop    ebx
c00106f1:	c3                   	ret    

c00106f2 <SysTell(regs*)>:
c00106f2:	53                   	push   ebx
c00106f3:	83 ec 08             	sub    esp,0x8
c00106f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106fa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00106fd:	83 f8 02             	cmp    eax,0x2
c0010700:	76 50                	jbe    c0010752 <SysTell(regs*)+0x60>
c0010702:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010707:	76 19                	jbe    c0010722 <SysTell(regs*)+0x30>
c0010709:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001070c:	31 d2                	xor    edx,edx
c001070e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010714:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001071b:	31 c0                	xor    eax,eax
c001071d:	83 c4 08             	add    esp,0x8
c0010720:	5b                   	pop    ebx
c0010721:	c3                   	ret    
c0010722:	83 ec 0c             	sub    esp,0xc
c0010725:	50                   	push   eax
c0010726:	e8 cc 89 ff ff       	call   c00090f7 <getFromFileDescriptor(int)>
c001072b:	5a                   	pop    edx
c001072c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001072f:	59                   	pop    ecx
c0010730:	53                   	push   ebx
c0010731:	50                   	push   eax
c0010732:	e8 b3 a4 ff ff       	call   c000abea <File::tell(unsigned long long*)>
c0010737:	83 c4 10             	add    esp,0x10
c001073a:	85 c0                	test   eax,eax
c001073c:	0f 95 c0             	setne  al
c001073f:	31 d2                	xor    edx,edx
c0010741:	25 ff 00 00 00       	and    eax,0xff
c0010746:	f7 d8                	neg    eax
c0010748:	83 d2 00             	adc    edx,0x0
c001074b:	83 c4 08             	add    esp,0x8
c001074e:	f7 da                	neg    edx
c0010750:	5b                   	pop    ebx
c0010751:	c3                   	ret    
c0010752:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010757:	ba ff ff ff ff       	mov    edx,0xffffffff
c001075c:	83 c4 08             	add    esp,0x8
c001075f:	5b                   	pop    ebx
c0010760:	c3                   	ret    

c0010761 <SysSize(regs*)>:
c0010761:	53                   	push   ebx
c0010762:	83 ec 18             	sub    esp,0x18
c0010765:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010769:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001076c:	83 f8 02             	cmp    eax,0x2
c001076f:	76 56                	jbe    c00107c7 <SysSize(regs*)+0x66>
c0010771:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010776:	76 19                	jbe    c0010791 <SysSize(regs*)+0x30>
c0010778:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001077b:	31 d2                	xor    edx,edx
c001077d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010783:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001078a:	31 c0                	xor    eax,eax
c001078c:	83 c4 18             	add    esp,0x18
c001078f:	5b                   	pop    ebx
c0010790:	c3                   	ret    
c0010791:	83 ec 0c             	sub    esp,0xc
c0010794:	50                   	push   eax
c0010795:	e8 5d 89 ff ff       	call   c00090f7 <getFromFileDescriptor(int)>
c001079a:	83 c4 0c             	add    esp,0xc
c001079d:	8d 54 24 13          	lea    edx,[esp+0x13]
c00107a1:	52                   	push   edx
c00107a2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00107a5:	52                   	push   edx
c00107a6:	50                   	push   eax
c00107a7:	e8 d6 a5 ff ff       	call   c000ad82 <File::stat(unsigned long long*, bool*)>
c00107ac:	83 c4 10             	add    esp,0x10
c00107af:	85 c0                	test   eax,eax
c00107b1:	0f 95 c0             	setne  al
c00107b4:	31 d2                	xor    edx,edx
c00107b6:	25 ff 00 00 00       	and    eax,0xff
c00107bb:	f7 d8                	neg    eax
c00107bd:	83 d2 00             	adc    edx,0x0
c00107c0:	83 c4 18             	add    esp,0x18
c00107c3:	f7 da                	neg    edx
c00107c5:	5b                   	pop    ebx
c00107c6:	c3                   	ret    
c00107c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107d1:	83 c4 18             	add    esp,0x18
c00107d4:	5b                   	pop    ebx
c00107d5:	c3                   	ret    

c00107d6 <SysSizeFromFilename(regs*)>:
c00107d6:	57                   	push   edi
c00107d7:	56                   	push   esi
c00107d8:	53                   	push   ebx
c00107d9:	83 ec 20             	sub    esp,0x20
c00107dc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00107e0:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00107e3:	83 fb 02             	cmp    ebx,0x2
c00107e6:	0f 86 8c 00 00 00    	jbe    c0010878 <SysSizeFromFilename(regs*)+0xa2>
c00107ec:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00107f2:	76 1b                	jbe    c001080f <SysSizeFromFilename(regs*)+0x39>
c00107f4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00107f7:	31 d2                	xor    edx,edx
c00107f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010806:	83 c4 20             	add    esp,0x20
c0010809:	31 c0                	xor    eax,eax
c001080b:	5b                   	pop    ebx
c001080c:	5e                   	pop    esi
c001080d:	5f                   	pop    edi
c001080e:	c3                   	ret    
c001080f:	83 ec 0c             	sub    esp,0xc
c0010812:	68 14 01 00 00       	push   0x114
c0010817:	e8 e9 6f ff ff       	call   c0007805 <malloc>
c001081c:	83 c4 0c             	add    esp,0xc
c001081f:	89 c7                	mov    edi,eax
c0010821:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010826:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010829:	50                   	push   eax
c001082a:	53                   	push   ebx
c001082b:	57                   	push   edi
c001082c:	e8 e5 a1 ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c0010831:	83 c4 0c             	add    esp,0xc
c0010834:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010838:	50                   	push   eax
c0010839:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c001083c:	52                   	push   edx
c001083d:	57                   	push   edi
c001083e:	e8 3f a5 ff ff       	call   c000ad82 <File::stat(unsigned long long*, bool*)>
c0010843:	83 c4 10             	add    esp,0x10
c0010846:	85 ff                	test   edi,edi
c0010848:	74 14                	je     c001085e <SysSizeFromFilename(regs*)+0x88>
c001084a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001084e:	8b 17                	mov    edx,DWORD PTR [edi]
c0010850:	83 ec 0c             	sub    esp,0xc
c0010853:	57                   	push   edi
c0010854:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010857:	83 c4 10             	add    esp,0x10
c001085a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001085e:	85 c0                	test   eax,eax
c0010860:	0f 95 c0             	setne  al
c0010863:	31 d2                	xor    edx,edx
c0010865:	25 ff 00 00 00       	and    eax,0xff
c001086a:	f7 d8                	neg    eax
c001086c:	83 d2 00             	adc    edx,0x0
c001086f:	83 c4 20             	add    esp,0x20
c0010872:	f7 da                	neg    edx
c0010874:	5b                   	pop    ebx
c0010875:	5e                   	pop    esi
c0010876:	5f                   	pop    edi
c0010877:	c3                   	ret    
c0010878:	83 c4 20             	add    esp,0x20
c001087b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010880:	5b                   	pop    ebx
c0010881:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010886:	5e                   	pop    esi
c0010887:	5f                   	pop    edi
c0010888:	c3                   	ret    

c0010889 <SysClose(regs*)>:
c0010889:	53                   	push   ebx
c001088a:	83 ec 08             	sub    esp,0x8
c001088d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010891:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010894:	83 f8 02             	cmp    eax,0x2
c0010897:	76 41                	jbe    c00108da <SysClose(regs*)+0x51>
c0010899:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001089f:	83 fa 01             	cmp    edx,0x1
c00108a2:	76 2d                	jbe    c00108d1 <SysClose(regs*)+0x48>
c00108a4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00108a9:	77 2f                	ja     c00108da <SysClose(regs*)+0x51>
c00108ab:	83 ec 0c             	sub    esp,0xc
c00108ae:	50                   	push   eax
c00108af:	e8 43 88 ff ff       	call   c00090f7 <getFromFileDescriptor(int)>
c00108b4:	89 c3                	mov    ebx,eax
c00108b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00108b9:	e8 76 a2 ff ff       	call   c000ab34 <File::close()>
c00108be:	83 c4 10             	add    esp,0x10
c00108c1:	85 db                	test   ebx,ebx
c00108c3:	74 0c                	je     c00108d1 <SysClose(regs*)+0x48>
c00108c5:	83 ec 0c             	sub    esp,0xc
c00108c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108ca:	53                   	push   ebx
c00108cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00108ce:	83 c4 10             	add    esp,0x10
c00108d1:	31 c0                	xor    eax,eax
c00108d3:	31 d2                	xor    edx,edx
c00108d5:	83 c4 08             	add    esp,0x8
c00108d8:	5b                   	pop    ebx
c00108d9:	c3                   	ret    
c00108da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108df:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108e4:	83 c4 08             	add    esp,0x8
c00108e7:	5b                   	pop    ebx
c00108e8:	c3                   	ret    

c00108e9 <SysOpenDir(regs*)>:
c00108e9:	56                   	push   esi
c00108ea:	53                   	push   ebx
c00108eb:	50                   	push   eax
c00108ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108f0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00108f3:	85 c0                	test   eax,eax
c00108f5:	74 5b                	je     c0010952 <SysOpenDir(regs*)+0x69>
c00108f7:	83 ec 0c             	sub    esp,0xc
c00108fa:	68 14 01 00 00       	push   0x114
c00108ff:	e8 01 6f ff ff       	call   c0007805 <malloc>
c0010904:	83 c4 0c             	add    esp,0xc
c0010907:	89 c6                	mov    esi,eax
c0010909:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001090e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010911:	50                   	push   eax
c0010912:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010915:	50                   	push   eax
c0010916:	56                   	push   esi
c0010917:	e8 24 a6 ff ff       	call   c000af40 <Directory::Directory(char const*, Process*)>
c001091c:	83 c4 10             	add    esp,0x10
c001091f:	85 f6                	test   esi,esi
c0010921:	74 2f                	je     c0010952 <SysOpenDir(regs*)+0x69>
c0010923:	83 ec 0c             	sub    esp,0xc
c0010926:	56                   	push   esi
c0010927:	e8 d4 a6 ff ff       	call   c000b000 <Directory::open()>
c001092c:	83 c4 10             	add    esp,0x10
c001092f:	85 c0                	test   eax,eax
c0010931:	75 1f                	jne    c0010952 <SysOpenDir(regs*)+0x69>
c0010933:	83 ec 0c             	sub    esp,0xc
c0010936:	56                   	push   esi
c0010937:	e8 c6 84 ff ff       	call   c0008e02 <UnixFile::getFileDescriptor()>
c001093c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001093f:	83 c4 10             	add    esp,0x10
c0010942:	89 02                	mov    DWORD PTR [edx],eax
c0010944:	c1 f8 1f             	sar    eax,0x1f
c0010947:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001094a:	31 c0                	xor    eax,eax
c001094c:	59                   	pop    ecx
c001094d:	31 d2                	xor    edx,edx
c001094f:	5b                   	pop    ebx
c0010950:	5e                   	pop    esi
c0010951:	c3                   	ret    
c0010952:	59                   	pop    ecx
c0010953:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010958:	ba ff ff ff ff       	mov    edx,0xffffffff
c001095d:	5b                   	pop    ebx
c001095e:	5e                   	pop    esi
c001095f:	c3                   	ret    

c0010960 <SysCloseDir(regs*)>:
c0010960:	53                   	push   ebx
c0010961:	83 ec 08             	sub    esp,0x8
c0010964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010968:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001096b:	8d 50 fd             	lea    edx,[eax-0x3]
c001096e:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010974:	77 2f                	ja     c00109a5 <SysCloseDir(regs*)+0x45>
c0010976:	83 ec 0c             	sub    esp,0xc
c0010979:	50                   	push   eax
c001097a:	e8 78 87 ff ff       	call   c00090f7 <getFromFileDescriptor(int)>
c001097f:	89 c3                	mov    ebx,eax
c0010981:	89 04 24             	mov    DWORD PTR [esp],eax
c0010984:	e8 d3 a6 ff ff       	call   c000b05c <Directory::close()>
c0010989:	83 c4 10             	add    esp,0x10
c001098c:	85 db                	test   ebx,ebx
c001098e:	74 0c                	je     c001099c <SysCloseDir(regs*)+0x3c>
c0010990:	83 ec 0c             	sub    esp,0xc
c0010993:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010995:	53                   	push   ebx
c0010996:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010999:	83 c4 10             	add    esp,0x10
c001099c:	31 c0                	xor    eax,eax
c001099e:	31 d2                	xor    edx,edx
c00109a0:	83 c4 08             	add    esp,0x8
c00109a3:	5b                   	pop    ebx
c00109a4:	c3                   	ret    
c00109a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109aa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109af:	83 c4 08             	add    esp,0x8
c00109b2:	5b                   	pop    ebx
c00109b3:	c3                   	ret    

c00109b4 <SysMakeDir(regs*)>:
c00109b4:	56                   	push   esi
c00109b5:	53                   	push   ebx
c00109b6:	83 ec 10             	sub    esp,0x10
c00109b9:	68 14 01 00 00       	push   0x114
c00109be:	e8 42 6e ff ff       	call   c0007805 <malloc>
c00109c3:	83 c4 0c             	add    esp,0xc
c00109c6:	89 c3                	mov    ebx,eax
c00109c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109cd:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c00109d0:	56                   	push   esi
c00109d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00109d5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00109d8:	50                   	push   eax
c00109d9:	53                   	push   ebx
c00109da:	e8 61 a5 ff ff       	call   c000af40 <Directory::Directory(char const*, Process*)>
c00109df:	83 c4 10             	add    esp,0x10
c00109e2:	85 db                	test   ebx,ebx
c00109e4:	74 32                	je     c0010a18 <SysMakeDir(regs*)+0x64>
c00109e6:	83 ec 0c             	sub    esp,0xc
c00109e9:	53                   	push   ebx
c00109ea:	e8 f1 a7 ff ff       	call   c000b1e0 <Directory::create()>
c00109ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109f2:	89 c6                	mov    esi,eax
c00109f4:	e8 63 a6 ff ff       	call   c000b05c <Directory::close()>
c00109f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00109fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010a01:	83 c4 10             	add    esp,0x10
c0010a04:	31 c0                	xor    eax,eax
c0010a06:	59                   	pop    ecx
c0010a07:	85 f6                	test   esi,esi
c0010a09:	5b                   	pop    ebx
c0010a0a:	0f 95 c0             	setne  al
c0010a0d:	5e                   	pop    esi
c0010a0e:	31 d2                	xor    edx,edx
c0010a10:	f7 d8                	neg    eax
c0010a12:	83 d2 00             	adc    edx,0x0
c0010a15:	f7 da                	neg    edx
c0010a17:	c3                   	ret    
c0010a18:	59                   	pop    ecx
c0010a19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a1e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a23:	5b                   	pop    ebx
c0010a24:	5e                   	pop    esi
c0010a25:	c3                   	ret    

c0010a26 <SysWait(regs*)>:
c0010a26:	83 ec 10             	sub    esp,0x10
c0010a29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a2d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010a30:	52                   	push   edx
c0010a31:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010a34:	51                   	push   ecx
c0010a35:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a38:	50                   	push   eax
c0010a39:	e8 de 2c 00 00       	call   c001371c <waitTask(int, int*, int)>
c0010a3e:	83 c4 1c             	add    esp,0x1c
c0010a41:	99                   	cdq    
c0010a42:	c3                   	ret    

c0010a43 <SysNotImpl(regs*)>:
c0010a43:	83 ec 18             	sub    esp,0x18
c0010a46:	68 91 e4 01 c0       	push   0xc001e491
c0010a4b:	e8 b3 f6 ff ff       	call   c0010103 <KePanic(char const*)>
c0010a50:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a55:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a5a:	83 c4 1c             	add    esp,0x1c
c0010a5d:	c3                   	ret    

c0010a5e <SysPanic(regs*)>:
c0010a5e:	83 ec 18             	sub    esp,0x18
c0010a61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a65:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010a68:	50                   	push   eax
c0010a69:	e8 95 f6 ff ff       	call   c0010103 <KePanic(char const*)>
c0010a6e:	b8 01 00 00 00       	mov    eax,0x1
c0010a73:	31 d2                	xor    edx,edx
c0010a75:	83 c4 1c             	add    esp,0x1c
c0010a78:	c3                   	ret    

c0010a79 <SysRmdir(regs*)>:
c0010a79:	56                   	push   esi
c0010a7a:	53                   	push   ebx
c0010a7b:	83 ec 20             	sub    esp,0x20
c0010a7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010a82:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010a85:	68 14 01 00 00       	push   0x114
c0010a8a:	e8 76 6d ff ff       	call   c0007805 <malloc>
c0010a8f:	83 c4 0c             	add    esp,0xc
c0010a92:	89 c3                	mov    ebx,eax
c0010a94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a99:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a9c:	50                   	push   eax
c0010a9d:	56                   	push   esi
c0010a9e:	53                   	push   ebx
c0010a9f:	e8 72 9f ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c0010aa4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010aa7:	e8 a2 a1 ff ff       	call   c000ac4e <File::unlink()>
c0010aac:	83 c4 10             	add    esp,0x10
c0010aaf:	85 db                	test   ebx,ebx
c0010ab1:	74 14                	je     c0010ac7 <SysRmdir(regs*)+0x4e>
c0010ab3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ab7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ab9:	83 ec 0c             	sub    esp,0xc
c0010abc:	53                   	push   ebx
c0010abd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010ac0:	83 c4 10             	add    esp,0x10
c0010ac3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ac7:	85 c0                	test   eax,eax
c0010ac9:	0f 95 c0             	setne  al
c0010acc:	31 d2                	xor    edx,edx
c0010ace:	25 ff 00 00 00       	and    eax,0xff
c0010ad3:	f7 d8                	neg    eax
c0010ad5:	83 d2 00             	adc    edx,0x0
c0010ad8:	83 c4 14             	add    esp,0x14
c0010adb:	f7 da                	neg    edx
c0010add:	5b                   	pop    ebx
c0010ade:	5e                   	pop    esi
c0010adf:	c3                   	ret    

c0010ae0 <SysUnlink(regs*)>:
c0010ae0:	56                   	push   esi
c0010ae1:	53                   	push   ebx
c0010ae2:	83 ec 20             	sub    esp,0x20
c0010ae5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ae9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010aec:	68 14 01 00 00       	push   0x114
c0010af1:	e8 0f 6d ff ff       	call   c0007805 <malloc>
c0010af6:	83 c4 0c             	add    esp,0xc
c0010af9:	89 c3                	mov    ebx,eax
c0010afb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b00:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b03:	50                   	push   eax
c0010b04:	56                   	push   esi
c0010b05:	53                   	push   ebx
c0010b06:	e8 0b 9f ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c0010b0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b0e:	e8 3b a1 ff ff       	call   c000ac4e <File::unlink()>
c0010b13:	83 c4 10             	add    esp,0x10
c0010b16:	85 db                	test   ebx,ebx
c0010b18:	74 14                	je     c0010b2e <SysUnlink(regs*)+0x4e>
c0010b1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b1e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010b20:	83 ec 0c             	sub    esp,0xc
c0010b23:	53                   	push   ebx
c0010b24:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010b27:	83 c4 10             	add    esp,0x10
c0010b2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b2e:	85 c0                	test   eax,eax
c0010b30:	0f 95 c0             	setne  al
c0010b33:	31 d2                	xor    edx,edx
c0010b35:	25 ff 00 00 00       	and    eax,0xff
c0010b3a:	f7 d8                	neg    eax
c0010b3c:	83 d2 00             	adc    edx,0x0
c0010b3f:	83 c4 14             	add    esp,0x14
c0010b42:	f7 da                	neg    edx
c0010b44:	5b                   	pop    ebx
c0010b45:	5e                   	pop    esi
c0010b46:	c3                   	ret    

c0010b47 <SysGetArgv(regs*)>:
c0010b47:	83 ec 0c             	sub    esp,0xc
c0010b4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010b4e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010b51:	85 c0                	test   eax,eax
c0010b53:	78 2c                	js     c0010b81 <SysGetArgv(regs*)+0x3a>
c0010b55:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010b5b:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010b5e:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010b64:	7d 1b                	jge    c0010b81 <SysGetArgv(regs*)+0x3a>
c0010b66:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010b6d:	85 c0                	test   eax,eax
c0010b6f:	74 18                	je     c0010b89 <SysGetArgv(regs*)+0x42>
c0010b71:	83 ec 08             	sub    esp,0x8
c0010b74:	50                   	push   eax
c0010b75:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010b78:	50                   	push   eax
c0010b79:	e8 82 fa fe ff       	call   c0000600 <strcpy>
c0010b7e:	83 c4 10             	add    esp,0x10
c0010b81:	31 c0                	xor    eax,eax
c0010b83:	31 d2                	xor    edx,edx
c0010b85:	83 c4 0c             	add    esp,0xc
c0010b88:	c3                   	ret    
c0010b89:	b8 01 00 00 00       	mov    eax,0x1
c0010b8e:	31 d2                	xor    edx,edx
c0010b90:	83 c4 0c             	add    esp,0xc
c0010b93:	c3                   	ret    

c0010b94 <SysUSleep(regs*)>:
c0010b94:	83 ec 1c             	sub    esp,0x1c
c0010b97:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010b9b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010b9e:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010ba1:	6a 00                	push   0x0
c0010ba3:	6a 64                	push   0x64
c0010ba5:	52                   	push   edx
c0010ba6:	50                   	push   eax
c0010ba7:	e8 94 b2 00 00       	call   c001be40 <__udivdi3>
c0010bac:	83 c4 14             	add    esp,0x14
c0010baf:	50                   	push   eax
c0010bb0:	e8 3b 2c 00 00       	call   c00137f0 <milliTenthSleep(unsigned int)>
c0010bb5:	31 c0                	xor    eax,eax
c0010bb7:	31 d2                	xor    edx,edx
c0010bb9:	83 c4 1c             	add    esp,0x1c
c0010bbc:	c3                   	ret    

c0010bbd <SysSpawn(regs*)>:
c0010bbd:	56                   	push   esi
c0010bbe:	53                   	push   ebx
c0010bbf:	50                   	push   eax
c0010bc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bc4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010bc7:	85 c0                	test   eax,eax
c0010bc9:	75 08                	jne    c0010bd3 <SysSpawn(regs*)+0x16>
c0010bcb:	59                   	pop    ecx
c0010bcc:	31 c0                	xor    eax,eax
c0010bce:	31 d2                	xor    edx,edx
c0010bd0:	5b                   	pop    ebx
c0010bd1:	5e                   	pop    esi
c0010bd2:	c3                   	ret    
c0010bd3:	83 ec 0c             	sub    esp,0xc
c0010bd6:	68 1f 07 00 00       	push   0x71f
c0010bdb:	e8 25 6c ff ff       	call   c0007805 <malloc>
c0010be0:	83 c4 10             	add    esp,0x10
c0010be3:	89 c6                	mov    esi,eax
c0010be5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010be8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010beb:	85 c0                	test   eax,eax
c0010bed:	75 33                	jne    c0010c22 <SysSpawn(regs*)+0x65>
c0010bef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bf4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bf7:	52                   	push   edx
c0010bf8:	50                   	push   eax
c0010bf9:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010bfc:	53                   	push   ebx
c0010bfd:	56                   	push   esi
c0010bfe:	e8 d1 22 00 00       	call   c0012ed4 <Process::Process(char const*, Process*, char**)>
c0010c03:	83 c4 10             	add    esp,0x10
c0010c06:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010c0d:	75 bc                	jne    c0010bcb <SysSpawn(regs*)+0xe>
c0010c0f:	83 ec 0c             	sub    esp,0xc
c0010c12:	56                   	push   esi
c0010c13:	e8 b0 27 00 00       	call   c00133c8 <Process::createUserThread()>
c0010c18:	8b 06                	mov    eax,DWORD PTR [esi]
c0010c1a:	83 c4 10             	add    esp,0x10
c0010c1d:	99                   	cdq    
c0010c1e:	59                   	pop    ecx
c0010c1f:	5b                   	pop    ebx
c0010c20:	5e                   	pop    esi
c0010c21:	c3                   	ret    
c0010c22:	31 c0                	xor    eax,eax
c0010c24:	eb d1                	jmp    c0010bf7 <SysSpawn(regs*)+0x3a>

c0010c26 <SysGetEnv(regs*)>:
c0010c26:	57                   	push   edi
c0010c27:	56                   	push   esi
c0010c28:	53                   	push   ebx
c0010c29:	83 ec 1c             	sub    esp,0x1c
c0010c2c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010c30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c35:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010c38:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010c3b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c3e:	50                   	push   eax
c0010c3f:	e8 77 f3 ff ff       	call   c000ffbb <Krnl::getProcessTotalEnvCount(Process*)>
c0010c44:	83 c4 10             	add    esp,0x10
c0010c47:	39 c7                	cmp    edi,eax
c0010c49:	7c 14                	jl     c0010c5f <SysGetEnv(regs*)+0x39>
c0010c4b:	85 f6                	test   esi,esi
c0010c4d:	75 0b                	jne    c0010c5a <SysGetEnv(regs*)+0x34>
c0010c4f:	83 c4 10             	add    esp,0x10
c0010c52:	31 c0                	xor    eax,eax
c0010c54:	5b                   	pop    ebx
c0010c55:	31 d2                	xor    edx,edx
c0010c57:	5e                   	pop    esi
c0010c58:	5f                   	pop    edi
c0010c59:	c3                   	ret    
c0010c5a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010c5d:	eb f0                	jmp    c0010c4f <SysGetEnv(regs*)+0x29>
c0010c5f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010c63:	52                   	push   edx
c0010c64:	57                   	push   edi
c0010c65:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c6b:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0010c6e:	51                   	push   ecx
c0010c6f:	50                   	push   eax
c0010c70:	e8 66 f3 ff ff       	call   c000ffdb <Krnl::getProcessEnvPair(Process*, int)>
c0010c75:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010c78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c7c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010c80:	83 c4 0c             	add    esp,0xc
c0010c83:	85 db                	test   ebx,ebx
c0010c85:	75 23                	jne    c0010caa <SysGetEnv(regs*)+0x84>
c0010c87:	83 ec 0c             	sub    esp,0xc
c0010c8a:	50                   	push   eax
c0010c8b:	e8 b0 f8 fe ff       	call   c0000540 <strlen>
c0010c90:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010c93:	89 c3                	mov    ebx,eax
c0010c95:	e8 a6 f8 fe ff       	call   c0000540 <strlen>
c0010c9a:	31 d2                	xor    edx,edx
c0010c9c:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010ca0:	83 c4 10             	add    esp,0x10
c0010ca3:	83 c4 10             	add    esp,0x10
c0010ca6:	5b                   	pop    ebx
c0010ca7:	5e                   	pop    esi
c0010ca8:	5f                   	pop    edi
c0010ca9:	c3                   	ret    
c0010caa:	83 ec 08             	sub    esp,0x8
c0010cad:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010cb0:	50                   	push   eax
c0010cb1:	56                   	push   esi
c0010cb2:	e8 49 f9 fe ff       	call   c0000600 <strcpy>
c0010cb7:	58                   	pop    eax
c0010cb8:	5a                   	pop    edx
c0010cb9:	68 ab e4 01 c0       	push   0xc001e4ab
c0010cbe:	56                   	push   esi
c0010cbf:	e8 fc fa fe ff       	call   c00007c0 <strcat>
c0010cc4:	59                   	pop    ecx
c0010cc5:	5b                   	pop    ebx
c0010cc6:	57                   	push   edi
c0010cc7:	56                   	push   esi
c0010cc8:	e8 f3 fa fe ff       	call   c00007c0 <strcat>
c0010ccd:	83 c4 10             	add    esp,0x10
c0010cd0:	e9 7a ff ff ff       	jmp    c0010c4f <SysGetEnv(regs*)+0x29>

c0010cd5 <SysSetFatAttrib(regs*)>:
c0010cd5:	57                   	push   edi
c0010cd6:	56                   	push   esi
c0010cd7:	53                   	push   ebx
c0010cd8:	83 ec 1c             	sub    esp,0x1c
c0010cdb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010cdf:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010ce2:	68 14 01 00 00       	push   0x114
c0010ce7:	e8 19 6b ff ff       	call   c0007805 <malloc>
c0010cec:	83 c4 0c             	add    esp,0xc
c0010cef:	89 c3                	mov    ebx,eax
c0010cf1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cf6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cf9:	50                   	push   eax
c0010cfa:	57                   	push   edi
c0010cfb:	53                   	push   ebx
c0010cfc:	e8 15 9d ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c0010d01:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010d04:	83 c4 0c             	add    esp,0xc
c0010d07:	0f b6 d4             	movzx  edx,ah
c0010d0a:	25 ff 00 00 00       	and    eax,0xff
c0010d0f:	52                   	push   edx
c0010d10:	50                   	push   eax
c0010d11:	53                   	push   ebx
c0010d12:	e8 d1 9f ff ff       	call   c000ace8 <File::chfatattr(unsigned char, unsigned char)>
c0010d17:	83 c4 10             	add    esp,0x10
c0010d1a:	85 db                	test   ebx,ebx
c0010d1c:	74 14                	je     c0010d32 <SysSetFatAttrib(regs*)+0x5d>
c0010d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d22:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010d24:	83 ec 0c             	sub    esp,0xc
c0010d27:	53                   	push   ebx
c0010d28:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010d2b:	83 c4 10             	add    esp,0x10
c0010d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d32:	85 c0                	test   eax,eax
c0010d34:	0f 95 c0             	setne  al
c0010d37:	31 d2                	xor    edx,edx
c0010d39:	25 ff 00 00 00       	and    eax,0xff
c0010d3e:	f7 d8                	neg    eax
c0010d40:	83 d2 00             	adc    edx,0x0
c0010d43:	83 c4 10             	add    esp,0x10
c0010d46:	f7 da                	neg    edx
c0010d48:	5b                   	pop    ebx
c0010d49:	5e                   	pop    esi
c0010d4a:	5f                   	pop    edi
c0010d4b:	c3                   	ret    

c0010d4c <SysPipe(regs*)>:
c0010d4c:	57                   	push   edi
c0010d4d:	56                   	push   esi
c0010d4e:	53                   	push   ebx
c0010d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d53:	83 ec 0c             	sub    esp,0xc
c0010d56:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010d59:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010d5c:	6a 20                	push   0x20
c0010d5e:	e8 a2 6a ff ff       	call   c0007805 <malloc>
c0010d63:	89 c3                	mov    ebx,eax
c0010d65:	58                   	pop    eax
c0010d66:	5a                   	pop    edx
c0010d67:	68 00 50 00 00       	push   0x5000
c0010d6c:	53                   	push   ebx
c0010d6d:	e8 98 73 ff ff       	call   c000810a <Pipe::Pipe(int)>
c0010d72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d75:	e8 88 80 ff ff       	call   c0008e02 <UnixFile::getFileDescriptor()>
c0010d7a:	89 07                	mov    DWORD PTR [edi],eax
c0010d7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d7f:	e8 7e 80 ff ff       	call   c0008e02 <UnixFile::getFileDescriptor()>
c0010d84:	83 c4 10             	add    esp,0x10
c0010d87:	89 06                	mov    DWORD PTR [esi],eax
c0010d89:	31 d2                	xor    edx,edx
c0010d8b:	5b                   	pop    ebx
c0010d8c:	31 c0                	xor    eax,eax
c0010d8e:	5e                   	pop    esi
c0010d8f:	5f                   	pop    edi
c0010d90:	c3                   	ret    

c0010d91 <SysGetUnixTime(regs*)>:
c0010d91:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0010d96:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010d9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010da0:	e9 81 a6 ff ff       	jmp    c000b426 <Clock::timeInSecondsLocal()>

c0010da5 <string_ends_with(char const*, char const*)>:
c0010da5:	57                   	push   edi
c0010da6:	56                   	push   esi
c0010da7:	53                   	push   ebx
c0010da8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010dac:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010db0:	83 ec 0c             	sub    esp,0xc
c0010db3:	53                   	push   ebx
c0010db4:	e8 87 f7 fe ff       	call   c0000540 <strlen>
c0010db9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010dbc:	89 c6                	mov    esi,eax
c0010dbe:	e8 7d f7 fe ff       	call   c0000540 <strlen>
c0010dc3:	83 c4 10             	add    esp,0x10
c0010dc6:	39 c6                	cmp    esi,eax
c0010dc8:	7d 06                	jge    c0010dd0 <string_ends_with(char const*, char const*)+0x2b>
c0010dca:	5b                   	pop    ebx
c0010dcb:	31 c0                	xor    eax,eax
c0010dcd:	5e                   	pop    esi
c0010dce:	5f                   	pop    edi
c0010dcf:	c3                   	ret    
c0010dd0:	83 ec 08             	sub    esp,0x8
c0010dd3:	29 c6                	sub    esi,eax
c0010dd5:	57                   	push   edi
c0010dd6:	01 f3                	add    ebx,esi
c0010dd8:	53                   	push   ebx
c0010dd9:	e8 02 f9 fe ff       	call   c00006e0 <strcmp>
c0010dde:	83 c4 10             	add    esp,0x10
c0010de1:	85 c0                	test   eax,eax
c0010de3:	5b                   	pop    ebx
c0010de4:	0f 94 c0             	sete   al
c0010de7:	5e                   	pop    esi
c0010de8:	25 ff 00 00 00       	and    eax,0xff
c0010ded:	5f                   	pop    edi
c0010dee:	c3                   	ret    

c0010def <SysOpen(regs*)>:
c0010def:	56                   	push   esi
c0010df0:	53                   	push   ebx
c0010df1:	81 ec 04 01 00 00    	sub    esp,0x104
c0010df7:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010dfe:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010e01:	85 c9                	test   ecx,ecx
c0010e03:	0f 84 b9 01 00 00    	je     c0010fc2 <SysOpen(regs*)+0x1d3>
c0010e09:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e0c:	85 c0                	test   eax,eax
c0010e0e:	0f 84 ae 01 00 00    	je     c0010fc2 <SysOpen(regs*)+0x1d3>
c0010e14:	52                   	push   edx
c0010e15:	68 ad e4 01 c0       	push   0xc001e4ad
c0010e1a:	50                   	push   eax
c0010e1b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010e1f:	56                   	push   esi
c0010e20:	e8 47 9a ff ff       	call   c000a86c <Fs::standardiseFiles(char*, char const*, char const*)>
c0010e25:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e28:	e8 13 f7 fe ff       	call   c0000540 <strlen>
c0010e2d:	83 c4 10             	add    esp,0x10
c0010e30:	48                   	dec    eax
c0010e31:	74 1d                	je     c0010e50 <SysOpen(regs*)+0x61>
c0010e33:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010e36:	eb 0f                	jmp    c0010e47 <SysOpen(regs*)+0x58>
c0010e38:	80 fa 3a             	cmp    dl,0x3a
c0010e3b:	74 0f                	je     c0010e4c <SysOpen(regs*)+0x5d>
c0010e3d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010e41:	48                   	dec    eax
c0010e42:	74 0c                	je     c0010e50 <SysOpen(regs*)+0x61>
c0010e44:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010e47:	80 fa 2e             	cmp    dl,0x2e
c0010e4a:	75 ec                	jne    c0010e38 <SysOpen(regs*)+0x49>
c0010e4c:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010e50:	83 ec 08             	sub    esp,0x8
c0010e53:	68 b1 e4 01 c0       	push   0xc001e4b1
c0010e58:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e5b:	50                   	push   eax
c0010e5c:	e8 44 ff ff ff       	call   c0010da5 <string_ends_with(char const*, char const*)>
c0010e61:	83 c4 10             	add    esp,0x10
c0010e64:	85 c0                	test   eax,eax
c0010e66:	74 1d                	je     c0010e85 <SysOpen(regs*)+0x96>
c0010e68:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010e6b:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010e71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e78:	81 c4 04 01 00 00    	add    esp,0x104
c0010e7e:	31 c0                	xor    eax,eax
c0010e80:	31 d2                	xor    edx,edx
c0010e82:	5b                   	pop    ebx
c0010e83:	5e                   	pop    esi
c0010e84:	c3                   	ret    
c0010e85:	83 ec 08             	sub    esp,0x8
c0010e88:	68 b6 e4 01 c0       	push   0xc001e4b6
c0010e8d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e90:	50                   	push   eax
c0010e91:	e8 0f ff ff ff       	call   c0010da5 <string_ends_with(char const*, char const*)>
c0010e96:	83 c4 10             	add    esp,0x10
c0010e99:	85 c0                	test   eax,eax
c0010e9b:	75 cb                	jne    c0010e68 <SysOpen(regs*)+0x79>
c0010e9d:	83 ec 08             	sub    esp,0x8
c0010ea0:	68 b2 e4 01 c0       	push   0xc001e4b2
c0010ea5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ea8:	50                   	push   eax
c0010ea9:	e8 32 f8 fe ff       	call   c00006e0 <strcmp>
c0010eae:	83 c4 10             	add    esp,0x10
c0010eb1:	85 c0                	test   eax,eax
c0010eb3:	74 b3                	je     c0010e68 <SysOpen(regs*)+0x79>
c0010eb5:	83 ec 08             	sub    esp,0x8
c0010eb8:	68 b1 e4 01 c0       	push   0xc001e4b1
c0010ebd:	56                   	push   esi
c0010ebe:	e8 e2 fe ff ff       	call   c0010da5 <string_ends_with(char const*, char const*)>
c0010ec3:	83 c4 10             	add    esp,0x10
c0010ec6:	85 c0                	test   eax,eax
c0010ec8:	75 9e                	jne    c0010e68 <SysOpen(regs*)+0x79>
c0010eca:	83 ec 08             	sub    esp,0x8
c0010ecd:	68 bb e4 01 c0       	push   0xc001e4bb
c0010ed2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ed5:	50                   	push   eax
c0010ed6:	e8 ca fe ff ff       	call   c0010da5 <string_ends_with(char const*, char const*)>
c0010edb:	83 c4 10             	add    esp,0x10
c0010ede:	85 c0                	test   eax,eax
c0010ee0:	0f 85 ef 00 00 00    	jne    c0010fd5 <SysOpen(regs*)+0x1e6>
c0010ee6:	83 ec 08             	sub    esp,0x8
c0010ee9:	68 c0 e4 01 c0       	push   0xc001e4c0
c0010eee:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ef1:	50                   	push   eax
c0010ef2:	e8 ae fe ff ff       	call   c0010da5 <string_ends_with(char const*, char const*)>
c0010ef7:	83 c4 10             	add    esp,0x10
c0010efa:	85 c0                	test   eax,eax
c0010efc:	0f 85 d3 00 00 00    	jne    c0010fd5 <SysOpen(regs*)+0x1e6>
c0010f02:	83 ec 08             	sub    esp,0x8
c0010f05:	68 bc e4 01 c0       	push   0xc001e4bc
c0010f0a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010f0d:	51                   	push   ecx
c0010f0e:	e8 cd f7 fe ff       	call   c00006e0 <strcmp>
c0010f13:	83 c4 10             	add    esp,0x10
c0010f16:	85 c0                	test   eax,eax
c0010f18:	0f 84 b7 00 00 00    	je     c0010fd5 <SysOpen(regs*)+0x1e6>
c0010f1e:	83 ec 08             	sub    esp,0x8
c0010f21:	68 bb e4 01 c0       	push   0xc001e4bb
c0010f26:	56                   	push   esi
c0010f27:	e8 79 fe ff ff       	call   c0010da5 <string_ends_with(char const*, char const*)>
c0010f2c:	83 c4 10             	add    esp,0x10
c0010f2f:	85 c0                	test   eax,eax
c0010f31:	0f 85 9e 00 00 00    	jne    c0010fd5 <SysOpen(regs*)+0x1e6>
c0010f37:	83 ec 0c             	sub    esp,0xc
c0010f3a:	68 14 01 00 00       	push   0x114
c0010f3f:	e8 c1 68 ff ff       	call   c0007805 <malloc>
c0010f44:	83 c4 0c             	add    esp,0xc
c0010f47:	89 c6                	mov    esi,eax
c0010f49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f4e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f51:	50                   	push   eax
c0010f52:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010f55:	52                   	push   edx
c0010f56:	56                   	push   esi
c0010f57:	e8 ba 9a ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c0010f5c:	83 c4 10             	add    esp,0x10
c0010f5f:	85 f6                	test   esi,esi
c0010f61:	74 5f                	je     c0010fc2 <SysOpen(regs*)+0x1d3>
c0010f63:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010f66:	89 d0                	mov    eax,edx
c0010f68:	25 ff 00 00 00       	and    eax,0xff
c0010f6d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010f70:	89 d0                	mov    eax,edx
c0010f72:	83 e0 01             	and    eax,0x1
c0010f75:	f6 c2 02             	test   dl,0x2
c0010f78:	74 03                	je     c0010f7d <SysOpen(regs*)+0x18e>
c0010f7a:	83 c8 02             	or     eax,0x2
c0010f7d:	f6 c2 04             	test   dl,0x4
c0010f80:	74 03                	je     c0010f85 <SysOpen(regs*)+0x196>
c0010f82:	83 c8 04             	or     eax,0x4
c0010f85:	f6 c2 08             	test   dl,0x8
c0010f88:	74 03                	je     c0010f8d <SysOpen(regs*)+0x19e>
c0010f8a:	83 c8 0a             	or     eax,0xa
c0010f8d:	83 e2 10             	and    edx,0x10
c0010f90:	74 03                	je     c0010f95 <SysOpen(regs*)+0x1a6>
c0010f92:	83 c8 12             	or     eax,0x12
c0010f95:	83 ec 08             	sub    esp,0x8
c0010f98:	50                   	push   eax
c0010f99:	56                   	push   esi
c0010f9a:	e8 37 9b ff ff       	call   c000aad6 <File::open(FileOpenMode)>
c0010f9f:	83 c4 10             	add    esp,0x10
c0010fa2:	85 c0                	test   eax,eax
c0010fa4:	75 1c                	jne    c0010fc2 <SysOpen(regs*)+0x1d3>
c0010fa6:	83 ec 0c             	sub    esp,0xc
c0010fa9:	56                   	push   esi
c0010faa:	e8 53 7e ff ff       	call   c0008e02 <UnixFile::getFileDescriptor()>
c0010faf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010fb2:	83 c4 10             	add    esp,0x10
c0010fb5:	89 02                	mov    DWORD PTR [edx],eax
c0010fb7:	c1 f8 1f             	sar    eax,0x1f
c0010fba:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010fbd:	e9 b6 fe ff ff       	jmp    c0010e78 <SysOpen(regs*)+0x89>
c0010fc2:	81 c4 04 01 00 00    	add    esp,0x104
c0010fc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010fcd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fd2:	5b                   	pop    ebx
c0010fd3:	5e                   	pop    esi
c0010fd4:	c3                   	ret    
c0010fd5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fd8:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010fde:	e9 8e fe ff ff       	jmp    c0010e71 <SysOpen(regs*)+0x82>

c0010fe3 <KeLoadSystemCalls()>:
c0010fe3:	c7 05 60 31 02 c0 5d 1b 01 c0 	mov    DWORD PTR ds:0xc0023160,0xc0011b5d
c0010fed:	c7 05 64 31 02 c0 54 17 01 c0 	mov    DWORD PTR ds:0xc0023164,0xc0011754
c0010ff7:	c7 05 68 31 02 c0 43 19 01 c0 	mov    DWORD PTR ds:0xc0023168,0xc0011943
c0011001:	c7 05 6c 31 02 c0 93 1a 01 c0 	mov    DWORD PTR ds:0xc002316c,0xc0011a93
c001100b:	c7 05 70 31 02 c0 db 18 01 c0 	mov    DWORD PTR ds:0xc0023170,0xc00118db
c0011015:	c7 05 74 31 02 c0 8b 17 01 c0 	mov    DWORD PTR ds:0xc0023174,0xc001178b
c001101f:	c7 05 78 31 02 c0 6c 17 01 c0 	mov    DWORD PTR ds:0xc0023178,0xc001176c
c0011029:	c7 05 7c 31 02 c0 98 19 01 c0 	mov    DWORD PTR ds:0xc002317c,0xc0011998
c0011033:	c7 05 84 31 02 c0 89 08 01 c0 	mov    DWORD PTR ds:0xc0023184,0xc0010889
c001103d:	c7 05 80 31 02 c0 ef 0d 01 c0 	mov    DWORD PTR ds:0xc0023180,0xc0010def
c0011047:	c7 05 88 31 02 c0 e9 08 01 c0 	mov    DWORD PTR ds:0xc0023188,0xc00108e9
c0011051:	c7 05 8c 31 02 c0 bd 05 01 c0 	mov    DWORD PTR ds:0xc002318c,0xc00105bd
c001105b:	c7 05 90 31 02 c0 e4 03 01 c0 	mov    DWORD PTR ds:0xc0023190,0xc00103e4
c0011065:	c7 05 94 31 02 c0 e9 03 01 c0 	mov    DWORD PTR ds:0xc0023194,0xc00103e9
c001106f:	c7 05 98 31 02 c0 b4 09 01 c0 	mov    DWORD PTR ds:0xc0023198,0xc00109b4
c0011079:	c7 05 9c 31 02 c0 60 09 01 c0 	mov    DWORD PTR ds:0xc002319c,0xc0010960
c0011083:	c7 05 a0 31 02 c0 99 06 01 c0 	mov    DWORD PTR ds:0xc00231a0,0xc0010699
c001108d:	c7 05 a4 31 02 c0 f2 06 01 c0 	mov    DWORD PTR ds:0xc00231a4,0xc00106f2
c0011097:	c7 05 a8 31 02 c0 61 07 01 c0 	mov    DWORD PTR ds:0xc00231a8,0xc0010761
c00110a1:	c7 05 ac 31 02 c0 ee 03 01 c0 	mov    DWORD PTR ds:0xc00231ac,0xc00103ee
c00110ab:	c7 05 b0 31 02 c0 26 0a 01 c0 	mov    DWORD PTR ds:0xc00231b0,0xc0010a26
c00110b5:	c7 05 b4 31 02 c0 43 0a 01 c0 	mov    DWORD PTR ds:0xc00231b4,0xc0010a43
c00110bf:	c7 05 b8 31 02 c0 43 0a 01 c0 	mov    DWORD PTR ds:0xc00231b8,0xc0010a43
c00110c9:	c7 05 bc 31 02 c0 79 0a 01 c0 	mov    DWORD PTR ds:0xc00231bc,0xc0010a79
c00110d3:	c7 05 c0 31 02 c0 e0 0a 01 c0 	mov    DWORD PTR ds:0xc00231c0,0xc0010ae0
c00110dd:	c7 05 c4 31 02 c0 f8 03 01 c0 	mov    DWORD PTR ds:0xc00231c4,0xc00103f8
c00110e7:	c7 05 c8 31 02 c0 47 0b 01 c0 	mov    DWORD PTR ds:0xc00231c8,0xc0010b47
c00110f1:	c7 05 cc 31 02 c0 7a 05 01 c0 	mov    DWORD PTR ds:0xc00231cc,0xc001057a
c00110fb:	c7 05 d0 31 02 c0 08 04 01 c0 	mov    DWORD PTR ds:0xc00231d0,0xc0010408
c0011105:	c7 05 d4 31 02 c0 3d 06 01 c0 	mov    DWORD PTR ds:0xc00231d4,0xc001063d
c001110f:	c7 05 d8 31 02 c0 94 0b 01 c0 	mov    DWORD PTR ds:0xc00231d8,0xc0010b94
c0011119:	c7 05 dc 31 02 c0 d6 07 01 c0 	mov    DWORD PTR ds:0xc00231dc,0xc00107d6
c0011123:	c7 05 e0 31 02 c0 bd 0b 01 c0 	mov    DWORD PTR ds:0xc00231e0,0xc0010bbd
c001112d:	c7 05 e4 31 02 c0 26 0c 01 c0 	mov    DWORD PTR ds:0xc00231e4,0xc0010c26
c0011137:	c7 05 ec 31 02 c0 10 04 01 c0 	mov    DWORD PTR ds:0xc00231ec,0xc0010410
c0011141:	c7 05 f0 31 02 c0 7d 04 01 c0 	mov    DWORD PTR ds:0xc00231f0,0xc001047d
c001114b:	c7 05 f4 31 02 c0 c7 04 01 c0 	mov    DWORD PTR ds:0xc00231f4,0xc00104c7
c0011155:	c7 05 f8 31 02 c0 d5 0c 01 c0 	mov    DWORD PTR ds:0xc00231f8,0xc0010cd5
c001115f:	c7 05 fc 31 02 c0 5e 0a 01 c0 	mov    DWORD PTR ds:0xc00231fc,0xc0010a5e
c0011169:	c7 05 00 32 02 c0 1c 05 01 c0 	mov    DWORD PTR ds:0xc0023200,0xc001051c
c0011173:	c7 05 04 32 02 c0 4c 0d 01 c0 	mov    DWORD PTR ds:0xc0023204,0xc0010d4c
c001117d:	c7 05 08 32 02 c0 91 0d 01 c0 	mov    DWORD PTR ds:0xc0023208,0xc0010d91
c0011187:	c7 05 0c 32 02 c0 33 18 01 c0 	mov    DWORD PTR ds:0xc002320c,0xc0011833
c0011191:	c7 05 10 32 02 c0 b4 19 01 c0 	mov    DWORD PTR ds:0xc0023210,0xc00119b4
c001119b:	c7 05 14 32 02 c0 49 1a 01 c0 	mov    DWORD PTR ds:0xc0023214,0xc0011a49
c00111a5:	c7 05 18 32 02 c0 1e 17 01 c0 	mov    DWORD PTR ds:0xc0023218,0xc001171e
c00111af:	c7 05 1c 32 02 c0 fb 1a 01 c0 	mov    DWORD PTR ds:0xc002321c,0xc0011afb
c00111b9:	c7 05 20 32 02 c0 97 17 01 c0 	mov    DWORD PTR ds:0xc0023220,0xc0011797
c00111c3:	c7 05 24 32 02 c0 b1 17 01 c0 	mov    DWORD PTR ds:0xc0023224,0xc00117b1
c00111cd:	c3                   	ret    

c00111ce <KeSystemCall(regs*, void*)>:
c00111ce:	53                   	push   ebx
c00111cf:	83 ec 08             	sub    esp,0x8
c00111d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00111d9:	83 f8 7f             	cmp    eax,0x7f
c00111dc:	77 16                	ja     c00111f4 <KeSystemCall(regs*, void*)+0x26>
c00111de:	8b 14 85 60 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcea0]
c00111e5:	85 d2                	test   edx,edx
c00111e7:	74 0b                	je     c00111f4 <KeSystemCall(regs*, void*)+0x26>
c00111e9:	83 ec 0c             	sub    esp,0xc
c00111ec:	53                   	push   ebx
c00111ed:	ff d2                	call   edx
c00111ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00111f2:	eb 0d                	jmp    c0011201 <KeSystemCall(regs*, void*)+0x33>
c00111f4:	52                   	push   edx
c00111f5:	52                   	push   edx
c00111f6:	50                   	push   eax
c00111f7:	68 c5 e4 01 c0       	push   0xc001e4c5
c00111fc:	e8 9f 92 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0011201:	83 c4 10             	add    esp,0x10
c0011204:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011209:	31 d2                	xor    edx,edx
c001120b:	83 c4 08             	add    esp,0x8
c001120e:	5b                   	pop    ebx
c001120f:	c3                   	ret    

c0011210 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011210:	55                   	push   ebp
c0011211:	57                   	push   edi
c0011212:	56                   	push   esi
c0011213:	53                   	push   ebx
c0011214:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001121a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0011221:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011223:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011226:	80 fb 40             	cmp    bl,0x40
c0011229:	75 1b                	jne    c0011246 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001122b:	8a 16                	mov    dl,BYTE PTR [esi]
c001122d:	84 d2                	test   dl,dl
c001122f:	0f 84 f1 00 00 00    	je     c0011326 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011235:	8d 46 01             	lea    eax,[esi+0x1]
c0011238:	80 fa 3a             	cmp    dl,0x3a
c001123b:	74 04                	je     c0011241 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001123d:	89 c6                	mov    esi,eax
c001123f:	eb ea                	jmp    c001122b <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0011241:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011244:	89 c6                	mov    esi,eax
c0011246:	50                   	push   eax
c0011247:	6a 40                	push   0x40
c0011249:	6a 00                	push   0x0
c001124b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001124f:	50                   	push   eax
c0011250:	e8 7b f2 fe ff       	call   c00004d0 <memset>
c0011255:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001125c:	31 c0                	xor    eax,eax
c001125e:	83 c4 10             	add    esp,0x10
c0011261:	8a 0f                	mov    cl,BYTE PTR [edi]
c0011263:	84 c9                	test   cl,cl
c0011265:	0f 84 bb 00 00 00    	je     c0011326 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001126b:	3d c7 00 00 00       	cmp    eax,0xc7
c0011270:	0f 8f b0 00 00 00    	jg     c0011326 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011276:	80 f9 0a             	cmp    cl,0xa
c0011279:	0f 85 98 00 00 00    	jne    c0011317 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001127f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0011284:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0011288:	a8 df                	test   al,0xdf
c001128a:	0f 94 c1             	sete   cl
c001128d:	3c 23                	cmp    al,0x23
c001128f:	0f 94 c2             	sete   dl
c0011292:	08 d1                	or     cl,dl
c0011294:	75 4a                	jne    c00112e0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011296:	8d 50 f7             	lea    edx,[eax-0x9]
c0011299:	80 fa 01             	cmp    dl,0x1
c001129c:	76 42                	jbe    c00112e0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001129e:	3c 5b                	cmp    al,0x5b
c00112a0:	75 42                	jne    c00112e4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00112a2:	80 fb 40             	cmp    bl,0x40
c00112a5:	75 39                	jne    c00112e0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00112a7:	83 ec 0c             	sub    esp,0xc
c00112aa:	8d 54 24 65          	lea    edx,[esp+0x65]
c00112ae:	52                   	push   edx
c00112af:	e8 8c f2 fe ff       	call   c0000540 <strlen>
c00112b4:	83 c4 10             	add    esp,0x10
c00112b7:	83 f8 3f             	cmp    eax,0x3f
c00112ba:	77 6a                	ja     c0011326 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00112bc:	50                   	push   eax
c00112bd:	50                   	push   eax
c00112be:	8d 54 24 61          	lea    edx,[esp+0x61]
c00112c2:	52                   	push   edx
c00112c3:	8d 54 24 24          	lea    edx,[esp+0x24]
c00112c7:	52                   	push   edx
c00112c8:	e8 33 f3 fe ff       	call   c0000600 <strcpy>
c00112cd:	58                   	pop    eax
c00112ce:	8d 54 24 24          	lea    edx,[esp+0x24]
c00112d2:	52                   	push   edx
c00112d3:	e8 68 f2 fe ff       	call   c0000540 <strlen>
c00112d8:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00112dd:	83 c4 10             	add    esp,0x10
c00112e0:	31 d2                	xor    edx,edx
c00112e2:	eb 3a                	jmp    c001131e <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00112e4:	80 fb 40             	cmp    bl,0x40
c00112e7:	74 06                	je     c00112ef <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00112e9:	8d 44 24 58          	lea    eax,[esp+0x58]
c00112ed:	eb 20                	jmp    c001130f <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00112ef:	50                   	push   eax
c00112f0:	50                   	push   eax
c00112f1:	55                   	push   ebp
c00112f2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00112f6:	50                   	push   eax
c00112f7:	e8 e4 f3 fe ff       	call   c00006e0 <strcmp>
c00112fc:	83 c4 10             	add    esp,0x10
c00112ff:	85 c0                	test   eax,eax
c0011301:	75 dd                	jne    c00112e0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011303:	eb e4                	jmp    c00112e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011305:	8d 50 01             	lea    edx,[eax+0x1]
c0011308:	80 f9 3d             	cmp    cl,0x3d
c001130b:	74 1d                	je     c001132a <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001130d:	89 d0                	mov    eax,edx
c001130f:	8a 08                	mov    cl,BYTE PTR [eax]
c0011311:	84 c9                	test   cl,cl
c0011313:	75 f0                	jne    c0011305 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011315:	eb 0f                	jmp    c0011326 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011317:	8d 50 01             	lea    edx,[eax+0x1]
c001131a:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001131e:	47                   	inc    edi
c001131f:	89 d0                	mov    eax,edx
c0011321:	e9 3b ff ff ff       	jmp    c0011261 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0011326:	31 c0                	xor    eax,eax
c0011328:	eb 33                	jmp    c001135d <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001132a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001132e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011331:	50                   	push   eax
c0011332:	50                   	push   eax
c0011333:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011337:	50                   	push   eax
c0011338:	56                   	push   esi
c0011339:	e8 a2 f3 fe ff       	call   c00006e0 <strcmp>
c001133e:	83 c4 10             	add    esp,0x10
c0011341:	85 c0                	test   eax,eax
c0011343:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011347:	75 97                	jne    c00112e0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011349:	51                   	push   ecx
c001134a:	51                   	push   ecx
c001134b:	52                   	push   edx
c001134c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0011353:	e8 a8 f2 fe ff       	call   c0000600 <strcpy>
c0011358:	83 c4 10             	add    esp,0x10
c001135b:	b0 01                	mov    al,0x1
c001135d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011363:	5b                   	pop    ebx
c0011364:	5e                   	pop    esi
c0011365:	5f                   	pop    edi
c0011366:	5d                   	pop    ebp
c0011367:	c3                   	ret    

c0011368 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0011368:	57                   	push   edi
c0011369:	56                   	push   esi
c001136a:	53                   	push   ebx
c001136b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011371:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0011378:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001137f:	53                   	push   ebx
c0011380:	e8 bb f1 fe ff       	call   c0000540 <strlen>
c0011385:	89 34 24             	mov    DWORD PTR [esp],esi
c0011388:	89 c7                	mov    edi,eax
c001138a:	e8 b1 f1 fe ff       	call   c0000540 <strlen>
c001138f:	83 c4 10             	add    esp,0x10
c0011392:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0011396:	3d ff 00 00 00       	cmp    eax,0xff
c001139b:	0f 87 d3 00 00 00    	ja     c0011474 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00113a1:	57                   	push   edi
c00113a2:	57                   	push   edi
c00113a3:	56                   	push   esi
c00113a4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00113a8:	56                   	push   esi
c00113a9:	e8 52 f2 fe ff       	call   c0000600 <strcpy>
c00113ae:	58                   	pop    eax
c00113af:	5a                   	pop    edx
c00113b0:	68 76 e7 01 c0       	push   0xc001e776
c00113b5:	56                   	push   esi
c00113b6:	e8 05 f4 fe ff       	call   c00007c0 <strcat>
c00113bb:	59                   	pop    ecx
c00113bc:	5f                   	pop    edi
c00113bd:	53                   	push   ebx
c00113be:	56                   	push   esi
c00113bf:	e8 fc f3 fe ff       	call   c00007c0 <strcat>
c00113c4:	58                   	pop    eax
c00113c5:	5a                   	pop    edx
c00113c6:	68 d9 e4 01 c0       	push   0xc001e4d9
c00113cb:	56                   	push   esi
c00113cc:	e8 ef f3 fe ff       	call   c00007c0 <strcat>
c00113d1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00113d8:	e8 28 64 ff ff       	call   c0007805 <malloc>
c00113dd:	83 c4 0c             	add    esp,0xc
c00113e0:	89 c3                	mov    ebx,eax
c00113e2:	ff 35 50 3b 02 c0    	push   DWORD PTR ds:0xc0023b50
c00113e8:	56                   	push   esi
c00113e9:	50                   	push   eax
c00113ea:	e8 27 96 ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c00113ef:	83 c4 10             	add    esp,0x10
c00113f2:	85 db                	test   ebx,ebx
c00113f4:	74 7e                	je     c0011474 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00113f6:	51                   	push   ecx
c00113f7:	51                   	push   ecx
c00113f8:	6a 01                	push   0x1
c00113fa:	53                   	push   ebx
c00113fb:	e8 d6 96 ff ff       	call   c000aad6 <File::open(FileOpenMode)>
c0011400:	83 c4 10             	add    esp,0x10
c0011403:	85 c0                	test   eax,eax
c0011405:	74 08                	je     c001140f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011407:	83 ec 0c             	sub    esp,0xc
c001140a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001140c:	53                   	push   ebx
c001140d:	eb 5f                	jmp    c001146e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001140f:	52                   	push   edx
c0011410:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011414:	50                   	push   eax
c0011415:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011419:	50                   	push   eax
c001141a:	53                   	push   ebx
c001141b:	e8 62 99 ff ff       	call   c000ad82 <File::stat(unsigned long long*, bool*)>
c0011420:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011424:	83 c4 10             	add    esp,0x10
c0011427:	89 c1                	mov    ecx,eax
c0011429:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001142d:	74 31                	je     c0011460 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001142f:	83 ec 0c             	sub    esp,0xc
c0011432:	50                   	push   eax
c0011433:	e8 cd 63 ff ff       	call   c0007805 <malloc>
c0011438:	89 c6                	mov    esi,eax
c001143a:	58                   	pop    eax
c001143b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001143d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0011441:	52                   	push   edx
c0011442:	56                   	push   esi
c0011443:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011447:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001144b:	53                   	push   ebx
c001144c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001144f:	83 c4 20             	add    esp,0x20
c0011452:	85 c0                	test   eax,eax
c0011454:	75 0a                	jne    c0011460 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011456:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001145a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001145e:	74 18                	je     c0011478 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0011460:	83 ec 0c             	sub    esp,0xc
c0011463:	53                   	push   ebx
c0011464:	e8 cb 96 ff ff       	call   c000ab34 <File::close()>
c0011469:	8b 03                	mov    eax,DWORD PTR [ebx]
c001146b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001146e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011471:	83 c4 10             	add    esp,0x10
c0011474:	31 c0                	xor    eax,eax
c0011476:	eb 3b                	jmp    c00114b3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0011478:	83 ec 0c             	sub    esp,0xc
c001147b:	53                   	push   ebx
c001147c:	e8 b3 96 ff ff       	call   c000ab34 <File::close()>
c0011481:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011483:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011486:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011489:	83 c4 0c             	add    esp,0xc
c001148c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011493:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001149a:	56                   	push   esi
c001149b:	e8 70 fd ff ff       	call   c0011210 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00114a0:	89 34 24             	mov    DWORD PTR [esp],esi
c00114a3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00114a7:	e8 69 63 ff ff       	call   c0007815 <free>
c00114ac:	83 c4 10             	add    esp,0x10
c00114af:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00114b3:	81 c4 20 01 00 00    	add    esp,0x120
c00114b9:	5b                   	pop    ebx
c00114ba:	5e                   	pop    esi
c00114bb:	5f                   	pop    edi
c00114bc:	c3                   	ret    

c00114bd <Reg::getLine(char*, char*, char*)>:
c00114bd:	57                   	push   edi
c00114be:	56                   	push   esi
c00114bf:	53                   	push   ebx
c00114c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00114c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00114cc:	57                   	push   edi
c00114cd:	56                   	push   esi
c00114ce:	53                   	push   ebx
c00114cf:	68 de e4 01 c0       	push   0xc001e4de
c00114d4:	e8 8f fe ff ff       	call   c0011368 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00114d9:	83 c4 10             	add    esp,0x10
c00114dc:	84 c0                	test   al,al
c00114de:	75 10                	jne    c00114f0 <Reg::getLine(char*, char*, char*)+0x33>
c00114e0:	57                   	push   edi
c00114e1:	56                   	push   esi
c00114e2:	53                   	push   ebx
c00114e3:	68 03 e5 01 c0       	push   0xc001e503
c00114e8:	e8 7b fe ff ff       	call   c0011368 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00114ed:	83 c4 10             	add    esp,0x10
c00114f0:	5b                   	pop    ebx
c00114f1:	5e                   	pop    esi
c00114f2:	5f                   	pop    edi
c00114f3:	c3                   	ret    

c00114f4 <Reg::readInt(char*, char*, int*)>:
c00114f4:	55                   	push   ebp
c00114f5:	57                   	push   edi
c00114f6:	56                   	push   esi
c00114f7:	53                   	push   ebx
c00114f8:	81 ec f0 00 00 00    	sub    esp,0xf0
c00114fe:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011502:	57                   	push   edi
c0011503:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001150a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011511:	e8 a7 ff ff ff       	call   c00114bd <Reg::getLine(char*, char*, char*)>
c0011516:	83 c4 10             	add    esp,0x10
c0011519:	84 c0                	test   al,al
c001151b:	0f 84 b3 00 00 00    	je     c00115d4 <Reg::readInt(char*, char*, int*)+0xe0>
c0011521:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011525:	80 fa 2b             	cmp    dl,0x2b
c0011528:	74 0c                	je     c0011536 <Reg::readInt(char*, char*, int*)+0x42>
c001152a:	80 fa 2d             	cmp    dl,0x2d
c001152d:	75 0e                	jne    c001153d <Reg::readInt(char*, char*, int*)+0x49>
c001152f:	ba 01 00 00 00       	mov    edx,0x1
c0011534:	eb 0b                	jmp    c0011541 <Reg::readInt(char*, char*, int*)+0x4d>
c0011536:	ba 01 00 00 00       	mov    edx,0x1
c001153b:	eb 02                	jmp    c001153f <Reg::readInt(char*, char*, int*)+0x4b>
c001153d:	31 d2                	xor    edx,edx
c001153f:	31 c0                	xor    eax,eax
c0011541:	be 0a 00 00 00       	mov    esi,0xa
c0011546:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001154b:	75 20                	jne    c001156d <Reg::readInt(char*, char*, int*)+0x79>
c001154d:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0011551:	80 f9 78             	cmp    cl,0x78
c0011554:	75 0a                	jne    c0011560 <Reg::readInt(char*, char*, int*)+0x6c>
c0011556:	83 c2 02             	add    edx,0x2
c0011559:	be 10 00 00 00       	mov    esi,0x10
c001155e:	eb 0d                	jmp    c001156d <Reg::readInt(char*, char*, int*)+0x79>
c0011560:	80 f9 62             	cmp    cl,0x62
c0011563:	75 08                	jne    c001156d <Reg::readInt(char*, char*, int*)+0x79>
c0011565:	83 c2 02             	add    edx,0x2
c0011568:	be 02 00 00 00       	mov    esi,0x2
c001156d:	01 d7                	add    edi,edx
c001156f:	31 d2                	xor    edx,edx
c0011571:	8a 1f                	mov    bl,BYTE PTR [edi]
c0011573:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0011577:	80 fb 0d             	cmp    bl,0xd
c001157a:	0f 94 c3             	sete   bl
c001157d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011582:	0f 94 c1             	sete   cl
c0011585:	08 cb                	or     bl,cl
c0011587:	75 3a                	jne    c00115c3 <Reg::readInt(char*, char*, int*)+0xcf>
c0011589:	0f af d6             	imul   edx,esi
c001158c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0011591:	83 fe 10             	cmp    esi,0x10
c0011594:	75 26                	jne    c00115bc <Reg::readInt(char*, char*, int*)+0xc8>
c0011596:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001159a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001159d:	89 e9                	mov    ecx,ebp
c001159f:	80 f9 05             	cmp    cl,0x5
c00115a2:	77 06                	ja     c00115aa <Reg::readInt(char*, char*, int*)+0xb6>
c00115a4:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00115a8:	eb 16                	jmp    c00115c0 <Reg::readInt(char*, char*, int*)+0xcc>
c00115aa:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00115ae:	83 e9 61             	sub    ecx,0x61
c00115b1:	80 f9 05             	cmp    cl,0x5
c00115b4:	77 06                	ja     c00115bc <Reg::readInt(char*, char*, int*)+0xc8>
c00115b6:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00115ba:	eb 04                	jmp    c00115c0 <Reg::readInt(char*, char*, int*)+0xcc>
c00115bc:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00115c0:	47                   	inc    edi
c00115c1:	eb ae                	jmp    c0011571 <Reg::readInt(char*, char*, int*)+0x7d>
c00115c3:	84 c0                	test   al,al
c00115c5:	74 02                	je     c00115c9 <Reg::readInt(char*, char*, int*)+0xd5>
c00115c7:	f7 da                	neg    edx
c00115c9:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00115d0:	89 10                	mov    DWORD PTR [eax],edx
c00115d2:	88 d8                	mov    al,bl
c00115d4:	81 c4 ec 00 00 00    	add    esp,0xec
c00115da:	5b                   	pop    ebx
c00115db:	5e                   	pop    esi
c00115dc:	5f                   	pop    edi
c00115dd:	5d                   	pop    ebp
c00115de:	c3                   	ret    

c00115df <Reg::readString(char*, char*, char*, int)>:
c00115df:	57                   	push   edi
c00115e0:	56                   	push   esi
c00115e1:	53                   	push   ebx
c00115e2:	81 ec d4 00 00 00    	sub    esp,0xd4
c00115e8:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00115ef:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00115f3:	57                   	push   edi
c00115f4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00115fb:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011602:	e8 b6 fe ff ff       	call   c00114bd <Reg::getLine(char*, char*, char*)>
c0011607:	83 c4 10             	add    esp,0x10
c001160a:	89 c6                	mov    esi,eax
c001160c:	84 c0                	test   al,al
c001160e:	74 44                	je     c0011654 <Reg::readString(char*, char*, char*, int)+0x75>
c0011610:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011617:	31 c0                	xor    eax,eax
c0011619:	4a                   	dec    edx
c001161a:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001161d:	84 c9                	test   cl,cl
c001161f:	74 0f                	je     c0011630 <Reg::readString(char*, char*, char*, int)+0x51>
c0011621:	39 c2                	cmp    edx,eax
c0011623:	7e 0b                	jle    c0011630 <Reg::readString(char*, char*, char*, int)+0x51>
c0011625:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011628:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001162d:	40                   	inc    eax
c001162e:	eb ea                	jmp    c001161a <Reg::readString(char*, char*, char*, int)+0x3b>
c0011630:	83 ec 0c             	sub    esp,0xc
c0011633:	53                   	push   ebx
c0011634:	e8 07 ef fe ff       	call   c0000540 <strlen>
c0011639:	83 c4 10             	add    esp,0x10
c001163c:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0011641:	75 11                	jne    c0011654 <Reg::readString(char*, char*, char*, int)+0x75>
c0011643:	83 ec 0c             	sub    esp,0xc
c0011646:	53                   	push   ebx
c0011647:	e8 f4 ee fe ff       	call   c0000540 <strlen>
c001164c:	83 c4 10             	add    esp,0x10
c001164f:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011654:	81 c4 d0 00 00 00    	add    esp,0xd0
c001165a:	89 f0                	mov    eax,esi
c001165c:	5b                   	pop    ebx
c001165d:	5e                   	pop    esi
c001165e:	5f                   	pop    edi
c001165f:	c3                   	ret    

c0011660 <Reg::readBool(char*, char*, bool*)>:
c0011660:	83 ec 20             	sub    esp,0x20
c0011663:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011667:	50                   	push   eax
c0011668:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001166c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011670:	e8 7f fe ff ff       	call   c00114f4 <Reg::readInt(char*, char*, int*)>
c0011675:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001167a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001167e:	0f 95 02             	setne  BYTE PTR [edx]
c0011681:	83 c4 2c             	add    esp,0x2c
c0011684:	c3                   	ret    

c0011685 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0011685:	53                   	push   ebx
c0011686:	83 ec 1c             	sub    esp,0x1c
c0011689:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001168d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011691:	50                   	push   eax
c0011692:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011696:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001169a:	e8 c1 ff ff ff       	call   c0011660 <Reg::readBool(char*, char*, bool*)>
c001169f:	83 c4 10             	add    esp,0x10
c00116a2:	84 c0                	test   al,al
c00116a4:	74 04                	je     c00116aa <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00116a6:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00116aa:	88 d8                	mov    al,bl
c00116ac:	83 c4 18             	add    esp,0x18
c00116af:	5b                   	pop    ebx
c00116b0:	c3                   	ret    

c00116b1 <Reg::readIntWithDefault(char*, char*, int)>:
c00116b1:	53                   	push   ebx
c00116b2:	83 ec 1c             	sub    esp,0x1c
c00116b5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00116b9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00116bd:	50                   	push   eax
c00116be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00116c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00116c6:	e8 29 fe ff ff       	call   c00114f4 <Reg::readInt(char*, char*, int*)>
c00116cb:	83 c4 10             	add    esp,0x10
c00116ce:	84 c0                	test   al,al
c00116d0:	74 04                	je     c00116d6 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00116d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00116d6:	89 d8                	mov    eax,ebx
c00116d8:	83 c4 18             	add    esp,0x18
c00116db:	5b                   	pop    ebx
c00116dc:	c3                   	ret    

c00116dd <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00116dd:	57                   	push   edi
c00116de:	56                   	push   esi
c00116df:	56                   	push   esi
c00116e0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00116e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00116e8:	56                   	push   esi
c00116e9:	57                   	push   edi
c00116ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116f2:	e8 e8 fe ff ff       	call   c00115df <Reg::readString(char*, char*, char*, int)>
c00116f7:	83 c4 10             	add    esp,0x10
c00116fa:	84 c0                	test   al,al
c00116fc:	75 1a                	jne    c0011718 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00116fe:	51                   	push   ecx
c00116ff:	56                   	push   esi
c0011700:	6a 00                	push   0x0
c0011702:	57                   	push   edi
c0011703:	e8 c8 ed fe ff       	call   c00004d0 <memset>
c0011708:	8d 4e ff             	lea    ecx,[esi-0x1]
c001170b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001170f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011711:	83 c4 10             	add    esp,0x10
c0011714:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011718:	89 f8                	mov    eax,edi
c001171a:	5a                   	pop    edx
c001171b:	5e                   	pop    esi
c001171c:	5f                   	pop    edi
c001171d:	c3                   	ret    

c001171e <SysEject(regs*)>:
c001171e:	83 ec 0c             	sub    esp,0xc
c0011721:	83 ca ff             	or     edx,0xffffffff
c0011724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011728:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001172b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011730:	83 e9 41             	sub    ecx,0x41
c0011733:	83 f9 19             	cmp    ecx,0x19
c0011736:	77 18                	ja     c0011750 <SysEject(regs*)+0x32>
c0011738:	8b 0c 8d e0 2b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd420]
c001173f:	85 c9                	test   ecx,ecx
c0011741:	74 0d                	je     c0011750 <SysEject(regs*)+0x32>
c0011743:	83 ec 0c             	sub    esp,0xc
c0011746:	51                   	push   ecx
c0011747:	e8 d2 b3 ff ff       	call   c000cb1e <LogicalDisk::eject()>
c001174c:	83 c4 10             	add    esp,0x10
c001174f:	99                   	cdq    
c0011750:	83 c4 0c             	add    esp,0xc
c0011753:	c3                   	ret    

c0011754 <SysExit(regs*)>:
c0011754:	83 ec 18             	sub    esp,0x18
c0011757:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001175b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001175e:	e8 b1 26 00 00       	call   c0013e14 <terminateTask(int)>
c0011763:	83 c8 ff             	or     eax,0xffffffff
c0011766:	83 c4 1c             	add    esp,0x1c
c0011769:	89 c2                	mov    edx,eax
c001176b:	c3                   	ret    

c001176c <SysGetCwd(regs*)>:
c001176c:	83 ec 10             	sub    esp,0x10
c001176f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011773:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011776:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011779:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001177e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011781:	e8 92 90 ff ff       	call   c000a818 <Fs::getcwd(Process*, char*, int)>
c0011786:	83 c4 1c             	add    esp,0x1c
c0011789:	99                   	cdq    
c001178a:	c3                   	ret    

c001178b <SysGetPID(regs*)>:
c001178b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011790:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011793:	8b 00                	mov    eax,DWORD PTR [eax]
c0011795:	99                   	cdq    
c0011796:	c3                   	ret    

c0011797 <SysGetRAMData(regs*)>:
c0011797:	8b 0d a8 06 02 c0    	mov    ecx,DWORD PTR ds:0xc00206a8
c001179d:	69 05 a4 06 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00206a4,0xc8
c00117a7:	99                   	cdq    
c00117a8:	f7 f9                	idiv   ecx
c00117aa:	c1 e0 18             	shl    eax,0x18
c00117ad:	09 c8                	or     eax,ecx
c00117af:	99                   	cdq    
c00117b0:	c3                   	ret    

c00117b1 <SysGetVGAPtr(regs*)>:
c00117b1:	55                   	push   ebp
c00117b2:	57                   	push   edi
c00117b3:	56                   	push   esi
c00117b4:	53                   	push   ebx
c00117b5:	83 ec 18             	sub    esp,0x18
c00117b8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00117bc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00117bf:	e8 50 21 00 00       	call   c0013914 <Thr::processFromPID(int)>
c00117c4:	83 c4 10             	add    esp,0x10
c00117c7:	89 c1                	mov    ecx,eax
c00117c9:	b8 01 00 00 00       	mov    eax,0x1
c00117ce:	85 c9                	test   ecx,ecx
c00117d0:	74 57                	je     c0011829 <SysGetVGAPtr(regs*)+0x78>
c00117d2:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00117d8:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00117dc:	74 0c                	je     c00117ea <SysGetVGAPtr(regs*)+0x39>
c00117de:	83 ec 0c             	sub    esp,0xc
c00117e1:	55                   	push   ebp
c00117e2:	e8 5c 6c ff ff       	call   c0008443 <setActiveTerminal(VgaText*)>
c00117e7:	83 c4 10             	add    esp,0x10
c00117ea:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00117ed:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00117f0:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00117f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00117f7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00117fa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00117fd:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011803:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011806:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011809:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001180f:	50                   	push   eax
c0011810:	50                   	push   eax
c0011811:	68 1e e5 01 c0       	push   0xc001e51e
c0011816:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011819:	05 a8 0f 00 00       	add    eax,0xfa8
c001181e:	50                   	push   eax
c001181f:	e8 dc ed fe ff       	call   c0000600 <strcpy>
c0011824:	83 c4 10             	add    esp,0x10
c0011827:	31 c0                	xor    eax,eax
c0011829:	83 c4 0c             	add    esp,0xc
c001182c:	31 d2                	xor    edx,edx
c001182e:	5b                   	pop    ebx
c001182f:	5e                   	pop    esi
c0011830:	5f                   	pop    edi
c0011831:	5d                   	pop    ebp
c0011832:	c3                   	ret    

c0011833 <SysLoadDLL(regs*)>:
c0011833:	56                   	push   esi
c0011834:	53                   	push   ebx
c0011835:	31 d2                	xor    edx,edx
c0011837:	51                   	push   ecx
c0011838:	b8 01 00 00 00       	mov    eax,0x1
c001183d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011841:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011845:	0f 84 8c 00 00 00    	je     c00118d7 <SysLoadDLL(regs*)+0xa4>
c001184b:	83 ec 0c             	sub    esp,0xc
c001184e:	68 14 01 00 00       	push   0x114
c0011853:	e8 ad 5f ff ff       	call   c0007805 <malloc>
c0011858:	83 c4 0c             	add    esp,0xc
c001185b:	89 c3                	mov    ebx,eax
c001185d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011862:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011865:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011868:	53                   	push   ebx
c0011869:	e8 a8 91 ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c001186e:	83 c4 10             	add    esp,0x10
c0011871:	31 d2                	xor    edx,edx
c0011873:	b8 02 00 00 00       	mov    eax,0x2
c0011878:	85 db                	test   ebx,ebx
c001187a:	74 5b                	je     c00118d7 <SysLoadDLL(regs*)+0xa4>
c001187c:	83 ec 0c             	sub    esp,0xc
c001187f:	53                   	push   ebx
c0011880:	e8 bf 94 ff ff       	call   c000ad44 <File::exists()>
c0011885:	83 c4 10             	add    esp,0x10
c0011888:	84 c0                	test   al,al
c001188a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001188c:	75 11                	jne    c001189f <SysLoadDLL(regs*)+0x6c>
c001188e:	83 ec 0c             	sub    esp,0xc
c0011891:	53                   	push   ebx
c0011892:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011895:	83 c4 10             	add    esp,0x10
c0011898:	b8 03 00 00 00       	mov    eax,0x3
c001189d:	eb 36                	jmp    c00118d5 <SysLoadDLL(regs*)+0xa2>
c001189f:	83 ec 0c             	sub    esp,0xc
c00118a2:	53                   	push   ebx
c00118a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118a6:	58                   	pop    eax
c00118a7:	5a                   	pop    edx
c00118a8:	6a 00                	push   0x0
c00118aa:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00118ad:	e8 4b 12 00 00       	call   c0012afd <Thr::loadDLL(char const*, bool)>
c00118b2:	83 c4 10             	add    esp,0x10
c00118b5:	89 c1                	mov    ecx,eax
c00118b7:	31 d2                	xor    edx,edx
c00118b9:	b8 04 00 00 00       	mov    eax,0x4
c00118be:	85 c9                	test   ecx,ecx
c00118c0:	74 15                	je     c00118d7 <SysLoadDLL(regs*)+0xa4>
c00118c2:	53                   	push   ebx
c00118c3:	53                   	push   ebx
c00118c4:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c00118ca:	51                   	push   ecx
c00118cb:	e8 5e 14 00 00       	call   c0012d2e <Thr::executeDLL(unsigned long, void*)>
c00118d0:	83 c4 10             	add    esp,0x10
c00118d3:	31 c0                	xor    eax,eax
c00118d5:	31 d2                	xor    edx,edx
c00118d7:	59                   	pop    ecx
c00118d8:	5b                   	pop    ebx
c00118d9:	5e                   	pop    esi
c00118da:	c3                   	ret    

c00118db <SysRead(regs*)>:
c00118db:	57                   	push   edi
c00118dc:	56                   	push   esi
c00118dd:	53                   	push   ebx
c00118de:	83 ec 10             	sub    esp,0x10
c00118e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00118e5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00118e8:	83 f8 02             	cmp    eax,0x2
c00118eb:	77 10                	ja     c00118fd <SysRead(regs*)+0x22>
c00118ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118f2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118f5:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00118fb:	eb 0e                	jmp    c001190b <SysRead(regs*)+0x30>
c00118fd:	83 ec 0c             	sub    esp,0xc
c0011900:	50                   	push   eax
c0011901:	e8 f1 77 ff ff       	call   c00090f7 <getFromFileDescriptor(int)>
c0011906:	83 c4 10             	add    esp,0x10
c0011909:	89 c1                	mov    ecx,eax
c001190b:	83 c8 ff             	or     eax,0xffffffff
c001190e:	85 c9                	test   ecx,ecx
c0011910:	89 c2                	mov    edx,eax
c0011912:	74 28                	je     c001193c <SysRead(regs*)+0x61>
c0011914:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001191c:	31 ff                	xor    edi,edi
c001191e:	83 ec 0c             	sub    esp,0xc
c0011921:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011923:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011927:	52                   	push   edx
c0011928:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001192b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001192e:	57                   	push   edi
c001192f:	56                   	push   esi
c0011930:	51                   	push   ecx
c0011931:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011934:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011938:	83 c4 20             	add    esp,0x20
c001193b:	99                   	cdq    
c001193c:	83 c4 10             	add    esp,0x10
c001193f:	5b                   	pop    ebx
c0011940:	5e                   	pop    esi
c0011941:	5f                   	pop    edi
c0011942:	c3                   	ret    

c0011943 <SysSbrk(regs*)>:
c0011943:	56                   	push   esi
c0011944:	53                   	push   ebx
c0011945:	50                   	push   eax
c0011946:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001194b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001194f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011952:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011955:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001195b:	85 db                	test   ebx,ebx
c001195d:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011960:	74 02                	je     c0011964 <SysSbrk(regs*)+0x21>
c0011962:	79 06                	jns    c001196a <SysSbrk(regs*)+0x27>
c0011964:	89 f0                	mov    eax,esi
c0011966:	31 d2                	xor    edx,edx
c0011968:	eb 2a                	jmp    c0011994 <SysSbrk(regs*)+0x51>
c001196a:	83 c8 ff             	or     eax,0xffffffff
c001196d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011973:	89 c2                	mov    edx,eax
c0011975:	77 1d                	ja     c0011994 <SysSbrk(regs*)+0x51>
c0011977:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001197d:	50                   	push   eax
c001197e:	c1 ea 0c             	shr    edx,0xc
c0011981:	68 07 0c 00 00       	push   0xc07
c0011986:	52                   	push   edx
c0011987:	51                   	push   ecx
c0011988:	e8 59 80 ff ff       	call   c00099e6 <VAS::allocatePages(int, int)>
c001198d:	89 f0                	mov    eax,esi
c001198f:	31 d2                	xor    edx,edx
c0011991:	83 c4 10             	add    esp,0x10
c0011994:	59                   	pop    ecx
c0011995:	5b                   	pop    ebx
c0011996:	5e                   	pop    esi
c0011997:	c3                   	ret    

c0011998 <SysSetCwd(regs*)>:
c0011998:	83 ec 14             	sub    esp,0x14
c001199b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001199f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119a7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00119aa:	e8 34 94 ff ff       	call   c000ade3 <Fs::setcwd(Process*, char*)>
c00119af:	83 c4 1c             	add    esp,0x1c
c00119b2:	99                   	cdq    
c00119b3:	c3                   	ret    

c00119b4 <SysSetTime(regs*)>:
c00119b4:	55                   	push   ebp
c00119b5:	31 c9                	xor    ecx,ecx
c00119b7:	57                   	push   edi
c00119b8:	bd 0c 00 00 00       	mov    ebp,0xc
c00119bd:	56                   	push   esi
c00119be:	53                   	push   ebx
c00119bf:	31 db                	xor    ebx,ebx
c00119c1:	83 ec 10             	sub    esp,0x10
c00119c4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00119c8:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00119cb:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00119ce:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00119d1:	89 c2                	mov    edx,eax
c00119d3:	66 81 ef 6c 07       	sub    di,0x76c
c00119d8:	83 e2 1f             	and    edx,0x1f
c00119db:	c1 e7 10             	shl    edi,0x10
c00119de:	42                   	inc    edx
c00119df:	c1 e8 05             	shr    eax,0x5
c00119e2:	88 d1                	mov    cl,dl
c00119e4:	31 d2                	xor    edx,edx
c00119e6:	f7 f5                	div    ebp
c00119e8:	89 dd                	mov    ebp,ebx
c00119ea:	88 d5                	mov    ch,dl
c00119ec:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00119f2:	0f b7 c1             	movzx  eax,cx
c00119f5:	31 d2                	xor    edx,edx
c00119f7:	09 f8                	or     eax,edi
c00119f9:	bf 3c 00 00 00       	mov    edi,0x3c
c00119fe:	89 c1                	mov    ecx,eax
c0011a00:	89 f0                	mov    eax,esi
c0011a02:	f7 f7                	div    edi
c0011a04:	c1 e2 10             	shl    edx,0x10
c0011a07:	09 d5                	or     ebp,edx
c0011a09:	31 d2                	xor    edx,edx
c0011a0b:	89 eb                	mov    ebx,ebp
c0011a0d:	f7 f7                	div    edi
c0011a0f:	bf 10 0e 00 00       	mov    edi,0xe10
c0011a14:	88 d7                	mov    bh,dl
c0011a16:	89 f0                	mov    eax,esi
c0011a18:	31 d2                	xor    edx,edx
c0011a1a:	f7 f7                	div    edi
c0011a1c:	bf 18 00 00 00       	mov    edi,0x18
c0011a21:	31 d2                	xor    edx,edx
c0011a23:	f7 f7                	div    edi
c0011a25:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0011a2a:	88 d3                	mov    bl,dl
c0011a2c:	53                   	push   ebx
c0011a2d:	51                   	push   ecx
c0011a2e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011a34:	e8 bb 9b ff ff       	call   c000b5f4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011a39:	83 c4 1c             	add    esp,0x1c
c0011a3c:	83 f0 01             	xor    eax,0x1
c0011a3f:	5b                   	pop    ebx
c0011a40:	0f b6 c0             	movzx  eax,al
c0011a43:	5e                   	pop    esi
c0011a44:	31 d2                	xor    edx,edx
c0011a46:	5f                   	pop    edi
c0011a47:	5d                   	pop    ebp
c0011a48:	c3                   	ret    

c0011a49 <SysTimezone(regs*)>:
c0011a49:	53                   	push   ebx
c0011a4a:	83 ec 08             	sub    esp,0x8
c0011a4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a51:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011a55:	75 17                	jne    c0011a6e <SysTimezone(regs*)+0x25>
c0011a57:	83 ec 0c             	sub    esp,0xc
c0011a5a:	68 28 e5 01 c0       	push   0xc001e528
c0011a5f:	e8 3c 8a ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0011a64:	83 c8 ff             	or     eax,0xffffffff
c0011a67:	83 c4 10             	add    esp,0x10
c0011a6a:	89 c2                	mov    edx,eax
c0011a6c:	eb 20                	jmp    c0011a8e <SysTimezone(regs*)+0x45>
c0011a6e:	83 ec 0c             	sub    esp,0xc
c0011a71:	68 3d e5 01 c0       	push   0xc001e53d
c0011a76:	e8 25 8a ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0011a7b:	58                   	pop    eax
c0011a7c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011a7f:	e8 cc 98 ff ff       	call   c000b350 <User::loadClockSettings(int)>
c0011a84:	83 c4 10             	add    esp,0x10
c0011a87:	b8 01 00 00 00       	mov    eax,0x1
c0011a8c:	31 d2                	xor    edx,edx
c0011a8e:	83 c4 08             	add    esp,0x8
c0011a91:	5b                   	pop    ebx
c0011a92:	c3                   	ret    

c0011a93 <SysWrite(regs*)>:
c0011a93:	57                   	push   edi
c0011a94:	56                   	push   esi
c0011a95:	53                   	push   ebx
c0011a96:	83 ec 10             	sub    esp,0x10
c0011a99:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a9d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011aa0:	83 f8 02             	cmp    eax,0x2
c0011aa3:	77 10                	ja     c0011ab5 <SysWrite(regs*)+0x22>
c0011aa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aaa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011aad:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011ab3:	eb 0e                	jmp    c0011ac3 <SysWrite(regs*)+0x30>
c0011ab5:	83 ec 0c             	sub    esp,0xc
c0011ab8:	50                   	push   eax
c0011ab9:	e8 39 76 ff ff       	call   c00090f7 <getFromFileDescriptor(int)>
c0011abe:	83 c4 10             	add    esp,0x10
c0011ac1:	89 c1                	mov    ecx,eax
c0011ac3:	83 c8 ff             	or     eax,0xffffffff
c0011ac6:	85 c9                	test   ecx,ecx
c0011ac8:	89 c2                	mov    edx,eax
c0011aca:	74 28                	je     c0011af4 <SysWrite(regs*)+0x61>
c0011acc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ad4:	31 ff                	xor    edi,edi
c0011ad6:	83 ec 0c             	sub    esp,0xc
c0011ad9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011adb:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011adf:	52                   	push   edx
c0011ae0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011ae3:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011ae6:	57                   	push   edi
c0011ae7:	56                   	push   esi
c0011ae8:	51                   	push   ecx
c0011ae9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011aec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011af0:	83 c4 20             	add    esp,0x20
c0011af3:	99                   	cdq    
c0011af4:	83 c4 10             	add    esp,0x10
c0011af7:	5b                   	pop    ebx
c0011af8:	5e                   	pop    esi
c0011af9:	5f                   	pop    edi
c0011afa:	c3                   	ret    

c0011afb <SysWsbe(regs*)>:
c0011afb:	57                   	push   edi
c0011afc:	b9 0b 00 00 00       	mov    ecx,0xb
c0011b01:	56                   	push   esi
c0011b02:	be 7c e5 01 c0       	mov    esi,0xc001e57c
c0011b07:	53                   	push   ebx
c0011b08:	83 ec 30             	sub    esp,0x30
c0011b0b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011b0f:	fc                   	cld    
c0011b10:	83 ec 0c             	sub    esp,0xc
c0011b13:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011b15:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011b19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b1e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b21:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011b27:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b29:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011b2c:	57                   	push   edi
c0011b2d:	e8 0e ea fe ff       	call   c0000540 <strlen>
c0011b32:	5a                   	pop    edx
c0011b33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011b37:	52                   	push   edx
c0011b38:	31 d2                	xor    edx,edx
c0011b3a:	57                   	push   edi
c0011b3b:	52                   	push   edx
c0011b3c:	50                   	push   eax
c0011b3d:	56                   	push   esi
c0011b3e:	ff d3                	call   ebx
c0011b40:	83 c4 14             	add    esp,0x14
c0011b43:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011b47:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011b4a:	e8 c5 22 00 00       	call   c0013e14 <terminateTask(int)>
c0011b4f:	83 c4 40             	add    esp,0x40
c0011b52:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011b57:	5b                   	pop    ebx
c0011b58:	31 d2                	xor    edx,edx
c0011b5a:	5e                   	pop    esi
c0011b5b:	5f                   	pop    edi
c0011b5c:	c3                   	ret    

c0011b5d <SysYield(regs*)>:
c0011b5d:	83 ec 0c             	sub    esp,0xc
c0011b60:	fa                   	cli    
c0011b61:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c0011b67:	e8 84 19 00 00       	call   c00134f0 <schedule()>
c0011b6c:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0011b71:	48                   	dec    eax
c0011b72:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0011b77:	75 01                	jne    c0011b7a <SysYield(regs*)+0x1d>
c0011b79:	fb                   	sti    
c0011b7a:	31 c0                	xor    eax,eax
c0011b7c:	31 d2                	xor    edx,edx
c0011b7e:	83 c4 0c             	add    esp,0xc
c0011b81:	c3                   	ret    

c0011b82 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011b82:	55                   	push   ebp
c0011b83:	57                   	push   edi
c0011b84:	56                   	push   esi
c0011b85:	53                   	push   ebx
c0011b86:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011b8c:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011b94:	0f 95 c2             	setne  dl
c0011b97:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011b9f:	0f 94 c0             	sete   al
c0011ba2:	84 c2                	test   dl,al
c0011ba4:	74 34                	je     c0011bda <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011ba6:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011bb1:	74 27                	je     c0011bda <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011bb3:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011bba:	05 00 10 00 00       	add    eax,0x1000
c0011bbf:	89 c1                	mov    ecx,eax
c0011bc1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011bc6:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011bcc:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011bd3:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011bda:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011be1:	83 ec 0c             	sub    esp,0xc
c0011be4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011bea:	6a 01                	push   0x1
c0011bec:	e8 5c 76 ff ff       	call   c000924d <Virt::allocateKernelVirtualPages(int)>
c0011bf1:	83 c4 10             	add    esp,0x10
c0011bf4:	89 c3                	mov    ebx,eax
c0011bf6:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011bfc:	0f 86 25 01 00 00    	jbe    c0011d27 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011c02:	c1 ee 0c             	shr    esi,0xc
c0011c05:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011c0c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011c10:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011c18:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011c1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c23:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011c2a:	29 ef                	sub    edi,ebp
c0011c2c:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011c30:	0f 83 f8 00 00 00    	jae    c0011d2e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011c36:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011c3c:	76 05                	jbe    c0011c43 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011c3e:	bf 00 10 00 00       	mov    edi,0x1000
c0011c43:	83 ec 0c             	sub    esp,0xc
c0011c46:	31 d2                	xor    edx,edx
c0011c48:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011c4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011c51:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011c55:	50                   	push   eax
c0011c56:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011c5a:	56                   	push   esi
c0011c5b:	52                   	push   edx
c0011c5c:	57                   	push   edi
c0011c5d:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011c64:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011c67:	83 c4 20             	add    esp,0x20
c0011c6a:	85 c0                	test   eax,eax
c0011c6c:	75 06                	jne    c0011c74 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011c6e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011c72:	74 13                	je     c0011c87 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011c74:	83 ec 0c             	sub    esp,0xc
c0011c77:	53                   	push   ebx
c0011c78:	e8 00 79 ff ff       	call   c000957d <Virt::freeKernelVirtualPages(unsigned long)>
c0011c7d:	83 c4 10             	add    esp,0x10
c0011c80:	31 c0                	xor    eax,eax
c0011c82:	e9 7c 01 00 00       	jmp    c0011e03 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011c87:	fa                   	cli    
c0011c88:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c0011c8e:	e8 4e 5e ff ff       	call   c0007ae1 <Phys::allocatePage()>
c0011c93:	6a 07                	push   0x7
c0011c95:	89 c7                	mov    edi,eax
c0011c97:	53                   	push   ebx
c0011c98:	50                   	push   eax
c0011c99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c9e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ca1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ca7:	e8 36 7c ff ff       	call   c00098e2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cac:	83 c4 0c             	add    esp,0xc
c0011caf:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011cb6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011cbc:	6a 00                	push   0x0
c0011cbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cc3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cc6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ccc:	e8 83 7a ff ff       	call   c0009754 <VAS::mapOtherVASIn(bool, VAS*)>
c0011cd1:	58                   	pop    eax
c0011cd2:	5a                   	pop    edx
c0011cd3:	68 07 0c 00 00       	push   0xc07
c0011cd8:	55                   	push   ebp
c0011cd9:	57                   	push   edi
c0011cda:	89 df                	mov    edi,ebx
c0011cdc:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011ce3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ce9:	6a 00                	push   0x0
c0011ceb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cf0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cf3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011cf9:	e8 a4 7f ff ff       	call   c0009ca2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011cfe:	b9 00 10 00 00       	mov    ecx,0x1000
c0011d03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011d05:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0011d0a:	83 c4 20             	add    esp,0x20
c0011d0d:	48                   	dec    eax
c0011d0e:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0011d13:	85 c0                	test   eax,eax
c0011d15:	75 01                	jne    c0011d18 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011d17:	fb                   	sti    
c0011d18:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011d1e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011d22:	e9 f1 fe ff ff       	jmp    c0011c18 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011d27:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011d2e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011d35:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011d3b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011d41:	0f 86 ae 00 00 00    	jbe    c0011df5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011d47:	fa                   	cli    
c0011d48:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c0011d4e:	c1 ee 0c             	shr    esi,0xc
c0011d51:	51                   	push   ecx
c0011d52:	31 ff                	xor    edi,edi
c0011d54:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011d5b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011d61:	6a 00                	push   0x0
c0011d63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d6b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011d71:	e8 de 79 ff ff       	call   c0009754 <VAS::mapOtherVASIn(bool, VAS*)>
c0011d76:	83 c4 10             	add    esp,0x10
c0011d79:	e8 63 5d ff ff       	call   c0007ae1 <Phys::allocatePage()>
c0011d7e:	47                   	inc    edi
c0011d7f:	6a 07                	push   0x7
c0011d81:	53                   	push   ebx
c0011d82:	50                   	push   eax
c0011d83:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d87:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011d8d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011d90:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0011d96:	e8 47 7b ff ff       	call   c00098e2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d9b:	58                   	pop    eax
c0011d9c:	5a                   	pop    edx
c0011d9d:	68 07 0c 00 00       	push   0xc07
c0011da2:	55                   	push   ebp
c0011da3:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011da9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011dad:	50                   	push   eax
c0011dae:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011db5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011dbb:	6a 00                	push   0x0
c0011dbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dc2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dc5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011dcb:	e8 d2 7e ff ff       	call   c0009ca2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011dd0:	83 c4 1c             	add    esp,0x1c
c0011dd3:	68 00 10 00 00       	push   0x1000
c0011dd8:	6a 00                	push   0x0
c0011dda:	53                   	push   ebx
c0011ddb:	e8 f0 e6 fe ff       	call   c00004d0 <memset>
c0011de0:	83 c4 10             	add    esp,0x10
c0011de3:	39 fe                	cmp    esi,edi
c0011de5:	77 92                	ja     c0011d79 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0011de7:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0011dec:	48                   	dec    eax
c0011ded:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0011df2:	75 01                	jne    c0011df5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011df4:	fb                   	sti    
c0011df5:	83 ec 0c             	sub    esp,0xc
c0011df8:	53                   	push   ebx
c0011df9:	e8 7f 77 ff ff       	call   c000957d <Virt::freeKernelVirtualPages(unsigned long)>
c0011dfe:	83 c4 10             	add    esp,0x10
c0011e01:	b0 01                	mov    al,0x1
c0011e03:	81 c4 2c 10 00 00    	add    esp,0x102c
c0011e09:	5b                   	pop    ebx
c0011e0a:	5e                   	pop    esi
c0011e0b:	5f                   	pop    edi
c0011e0c:	5d                   	pop    ebp
c0011e0d:	c3                   	ret    

c0011e0e <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0011e0e:	55                   	push   ebp
c0011e0f:	57                   	push   edi
c0011e10:	56                   	push   esi
c0011e11:	53                   	push   ebx
c0011e12:	83 ec 48             	sub    esp,0x48
c0011e15:	68 14 01 00 00       	push   0x114
c0011e1a:	e8 e6 59 ff ff       	call   c0007805 <malloc>
c0011e1f:	83 c4 0c             	add    esp,0xc
c0011e22:	89 c6                	mov    esi,eax
c0011e24:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011e28:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011e2c:	50                   	push   eax
c0011e2d:	e8 e4 8b ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c0011e32:	58                   	pop    eax
c0011e33:	5a                   	pop    edx
c0011e34:	6a 01                	push   0x1
c0011e36:	56                   	push   esi
c0011e37:	e8 9a 8c ff ff       	call   c000aad6 <File::open(FileOpenMode)>
c0011e3c:	83 c4 10             	add    esp,0x10
c0011e3f:	85 c0                	test   eax,eax
c0011e41:	0f 85 47 01 00 00    	jne    c0011f8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011e47:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011e4f:	83 ec 0c             	sub    esp,0xc
c0011e52:	6a 34                	push   0x34
c0011e54:	e8 ac 59 ff ff       	call   c0007805 <malloc>
c0011e59:	89 c3                	mov    ebx,eax
c0011e5b:	58                   	pop    eax
c0011e5c:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e5e:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0011e62:	57                   	push   edi
c0011e63:	53                   	push   ebx
c0011e64:	6a 00                	push   0x0
c0011e66:	6a 34                	push   0x34
c0011e68:	56                   	push   esi
c0011e69:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011e6c:	83 c4 20             	add    esp,0x20
c0011e6f:	85 c0                	test   eax,eax
c0011e71:	0f 85 17 01 00 00    	jne    c0011f8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011e77:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0011e7d:	0f 85 0b 01 00 00    	jne    c0011f8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011e83:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e86:	85 c0                	test   eax,eax
c0011e88:	0f 84 00 01 00 00    	je     c0011f8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011e8e:	31 d2                	xor    edx,edx
c0011e90:	55                   	push   ebp
c0011e91:	52                   	push   edx
c0011e92:	50                   	push   eax
c0011e93:	56                   	push   esi
c0011e94:	e8 fb 8c ff ff       	call   c000ab94 <File::seek(unsigned long long)>
c0011e99:	83 c4 10             	add    esp,0x10
c0011e9c:	85 c0                	test   eax,eax
c0011e9e:	0f 85 ea 00 00 00    	jne    c0011f8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011ea4:	83 ec 0c             	sub    esp,0xc
c0011ea7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011eaa:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011eae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011eb2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011eb6:	0f af c2             	imul   eax,edx
c0011eb9:	50                   	push   eax
c0011eba:	e8 46 59 ff ff       	call   c0007805 <malloc>
c0011ebf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011ec1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011ec5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ec8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011ecc:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011ed0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011ed4:	0f af c2             	imul   eax,edx
c0011ed7:	99                   	cdq    
c0011ed8:	52                   	push   edx
c0011ed9:	50                   	push   eax
c0011eda:	56                   	push   esi
c0011edb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011ede:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011ee1:	83 c4 20             	add    esp,0x20
c0011ee4:	85 c0                	test   eax,eax
c0011ee6:	0f 84 a2 00 00 00    	je     c0011f8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011eec:	31 d2                	xor    edx,edx
c0011eee:	51                   	push   ecx
c0011eef:	52                   	push   edx
c0011ef0:	50                   	push   eax
c0011ef1:	56                   	push   esi
c0011ef2:	e8 9d 8c ff ff       	call   c000ab94 <File::seek(unsigned long long)>
c0011ef7:	83 c4 10             	add    esp,0x10
c0011efa:	85 c0                	test   eax,eax
c0011efc:	0f 85 8c 00 00 00    	jne    c0011f8e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011f02:	83 ec 0c             	sub    esp,0xc
c0011f05:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011f09:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011f0d:	31 ed                	xor    ebp,ebp
c0011f0f:	0f af c2             	imul   eax,edx
c0011f12:	50                   	push   eax
c0011f13:	e8 ed 58 ff ff       	call   c0007805 <malloc>
c0011f18:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011f1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f1e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f25:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011f29:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011f2d:	0f af c2             	imul   eax,edx
c0011f30:	99                   	cdq    
c0011f31:	52                   	push   edx
c0011f32:	50                   	push   eax
c0011f33:	56                   	push   esi
c0011f34:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011f37:	83 c4 20             	add    esp,0x20
c0011f3a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011f42:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0011f46:	0f 86 80 00 00 00    	jbe    c0011fcc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0011f4c:	0f b7 fd             	movzx  edi,bp
c0011f4f:	c1 e7 05             	shl    edi,0x5
c0011f52:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0011f56:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0011f59:	75 6b                	jne    c0011fc6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011f5b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011f5e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011f62:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0011f65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f69:	52                   	push   edx
c0011f6a:	31 d2                	xor    edx,edx
c0011f6c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f6f:	52                   	push   edx
c0011f70:	50                   	push   eax
c0011f71:	56                   	push   esi
c0011f72:	e8 1d 8c ff ff       	call   c000ab94 <File::seek(unsigned long long)>
c0011f77:	83 c4 10             	add    esp,0x10
c0011f7a:	85 c0                	test   eax,eax
c0011f7c:	74 17                	je     c0011f95 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0011f7e:	83 ec 0c             	sub    esp,0xc
c0011f81:	68 a8 e5 01 c0       	push   0xc001e5a8
c0011f86:	e8 15 85 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0011f8b:	83 c4 10             	add    esp,0x10
c0011f8e:	31 c0                	xor    eax,eax
c0011f90:	e9 87 00 00 00       	jmp    c001201c <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0011f95:	83 ec 0c             	sub    esp,0xc
c0011f98:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0011f9b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0011f9e:	50                   	push   eax
c0011f9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011fa3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011fa7:	56                   	push   esi
c0011fa8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0011fac:	e8 d1 fb ff ff       	call   c0011b82 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0011fb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fb5:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0011fb9:	83 c4 20             	add    esp,0x20
c0011fbc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0011fc0:	73 04                	jae    c0011fc6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011fc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011fc6:	45                   	inc    ebp
c0011fc7:	e9 76 ff ff ff       	jmp    c0011f42 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0011fcc:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0011fd0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011fd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011fd8:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0011fde:	83 ec 0c             	sub    esp,0xc
c0011fe1:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0011fe7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fec:	05 00 10 00 00       	add    eax,0x1000
c0011ff1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011ff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ff8:	e8 18 58 ff ff       	call   c0007815 <free>
c0011ffd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012000:	e8 10 58 ff ff       	call   c0007815 <free>
c0012005:	58                   	pop    eax
c0012006:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001200a:	e8 06 58 ff ff       	call   c0007815 <free>
c001200f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012012:	e8 1d 8b ff ff       	call   c000ab34 <File::close()>
c0012017:	83 c4 10             	add    esp,0x10
c001201a:	b0 01                	mov    al,0x1
c001201c:	83 c4 3c             	add    esp,0x3c
c001201f:	5b                   	pop    ebx
c0012020:	5e                   	pop    esi
c0012021:	5f                   	pop    edi
c0012022:	5d                   	pop    ebp
c0012023:	c3                   	ret    

c0012024 <Thr::runtimeReferenceHelper()>:
c0012024:	83 ec 18             	sub    esp,0x18
c0012027:	68 b0 e5 01 c0       	push   0xc001e5b0
c001202c:	e8 6f 84 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0012031:	fa                   	cli    
c0012032:	83 c4 10             	add    esp,0x10
c0012035:	eb fe                	jmp    c0012035 <Thr::runtimeReferenceHelper()+0x11>

c0012037 <Thr::getAddressOfKernelSymbol(char const*)>:
c0012037:	57                   	push   edi
c0012038:	56                   	push   esi
c0012039:	53                   	push   ebx
c001203a:	31 db                	xor    ebx,ebx
c001203c:	39 1d 00 3b 02 c0    	cmp    DWORD PTR ds:0xc0023b00,ebx
c0012042:	7e 3c                	jle    c0012080 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0012044:	8b 34 9d 80 3a 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc580]
c001204b:	31 ff                	xor    edi,edi
c001204d:	39 3c 9d 80 39 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc680],edi
c0012054:	7e 27                	jle    c001207d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0012056:	50                   	push   eax
c0012057:	50                   	push   eax
c0012058:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001205c:	8b 06                	mov    eax,DWORD PTR [esi]
c001205e:	03 04 9d 00 3a 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc600]
c0012065:	50                   	push   eax
c0012066:	e8 75 e6 fe ff       	call   c00006e0 <strcmp>
c001206b:	83 c4 10             	add    esp,0x10
c001206e:	85 c0                	test   eax,eax
c0012070:	75 05                	jne    c0012077 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0012072:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012075:	eb 0b                	jmp    c0012082 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0012077:	83 c6 10             	add    esi,0x10
c001207a:	47                   	inc    edi
c001207b:	eb d0                	jmp    c001204d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001207d:	43                   	inc    ebx
c001207e:	eb bc                	jmp    c001203c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0012080:	31 c0                	xor    eax,eax
c0012082:	5b                   	pop    ebx
c0012083:	5e                   	pop    esi
c0012084:	5f                   	pop    edi
c0012085:	c3                   	ret    

c0012086 <Thr::loadKernelSymbolTable(char const*)>:
c0012086:	55                   	push   ebp
c0012087:	57                   	push   edi
c0012088:	56                   	push   esi
c0012089:	53                   	push   ebx
c001208a:	83 ec 68             	sub    esp,0x68
c001208d:	8b 35 50 3b 02 c0    	mov    esi,DWORD PTR ds:0xc0023b50
c0012093:	68 14 01 00 00       	push   0x114
c0012098:	e8 68 57 ff ff       	call   c0007805 <malloc>
c001209d:	83 c4 0c             	add    esp,0xc
c00120a0:	89 c3                	mov    ebx,eax
c00120a2:	56                   	push   esi
c00120a3:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00120a7:	50                   	push   eax
c00120a8:	e8 69 89 ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c00120ad:	5e                   	pop    esi
c00120ae:	5f                   	pop    edi
c00120af:	6a 01                	push   0x1
c00120b1:	53                   	push   ebx
c00120b2:	e8 1f 8a ff ff       	call   c000aad6 <File::open(FileOpenMode)>
c00120b7:	83 c4 10             	add    esp,0x10
c00120ba:	85 c0                	test   eax,eax
c00120bc:	74 0a                	je     c00120c8 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00120be:	83 ec 0c             	sub    esp,0xc
c00120c1:	68 d2 e5 01 c0       	push   0xc001e5d2
c00120c6:	eb 34                	jmp    c00120fc <Thr::loadKernelSymbolTable(char const*)+0x76>
c00120c8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00120d0:	83 ec 0c             	sub    esp,0xc
c00120d3:	6a 34                	push   0x34
c00120d5:	e8 2b 57 ff ff       	call   c0007805 <malloc>
c00120da:	59                   	pop    ecx
c00120db:	89 c7                	mov    edi,eax
c00120dd:	8d 74 24 34          	lea    esi,[esp+0x34]
c00120e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120e3:	56                   	push   esi
c00120e4:	57                   	push   edi
c00120e5:	6a 00                	push   0x0
c00120e7:	6a 34                	push   0x34
c00120e9:	53                   	push   ebx
c00120ea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00120ed:	83 c4 20             	add    esp,0x20
c00120f0:	85 c0                	test   eax,eax
c00120f2:	74 17                	je     c001210b <Thr::loadKernelSymbolTable(char const*)+0x85>
c00120f4:	83 ec 0c             	sub    esp,0xc
c00120f7:	68 e9 e5 01 c0       	push   0xc001e5e9
c00120fc:	e8 02 e0 ff ff       	call   c0010103 <KePanic(char const*)>
c0012101:	83 c4 10             	add    esp,0x10
c0012104:	31 c0                	xor    eax,eax
c0012106:	e9 31 02 00 00       	jmp    c001233c <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001210b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012111:	75 e1                	jne    c00120f4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012113:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012116:	85 c0                	test   eax,eax
c0012118:	74 da                	je     c00120f4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001211a:	52                   	push   edx
c001211b:	31 d2                	xor    edx,edx
c001211d:	52                   	push   edx
c001211e:	50                   	push   eax
c001211f:	53                   	push   ebx
c0012120:	e8 6f 8a ff ff       	call   c000ab94 <File::seek(unsigned long long)>
c0012125:	83 c4 10             	add    esp,0x10
c0012128:	85 c0                	test   eax,eax
c001212a:	75 c8                	jne    c00120f4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001212c:	83 ec 0c             	sub    esp,0xc
c001212f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012133:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012137:	31 ed                	xor    ebp,ebp
c0012139:	0f af c2             	imul   eax,edx
c001213c:	50                   	push   eax
c001213d:	e8 c3 56 ff ff       	call   c0007805 <malloc>
c0012142:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012144:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012148:	89 34 24             	mov    DWORD PTR [esp],esi
c001214b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001214f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012153:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012157:	0f af c2             	imul   eax,edx
c001215a:	99                   	cdq    
c001215b:	52                   	push   edx
c001215c:	50                   	push   eax
c001215d:	53                   	push   ebx
c001215e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012161:	83 c4 20             	add    esp,0x20
c0012164:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001216c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012174:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001217c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012184:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012188:	0f 86 aa 00 00 00    	jbe    c0012238 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001218e:	0f b7 f5             	movzx  esi,bp
c0012191:	6b f6 28             	imul   esi,esi,0x28
c0012194:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012198:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001219b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001219f:	50                   	push   eax
c00121a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00121a4:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00121a8:	8b 16                	mov    edx,DWORD PTR [esi]
c00121aa:	6b c0 28             	imul   eax,eax,0x28
c00121ad:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00121b1:	89 d0                	mov    eax,edx
c00121b3:	31 d2                	xor    edx,edx
c00121b5:	52                   	push   edx
c00121b6:	50                   	push   eax
c00121b7:	53                   	push   ebx
c00121b8:	e8 d7 89 ff ff       	call   c000ab94 <File::seek(unsigned long long)>
c00121bd:	83 c4 0c             	add    esp,0xc
c00121c0:	6a 20                	push   0x20
c00121c2:	6a 00                	push   0x0
c00121c4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00121c8:	52                   	push   edx
c00121c9:	e8 02 e3 fe ff       	call   c00004d0 <memset>
c00121ce:	58                   	pop    eax
c00121cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00121d1:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00121d5:	51                   	push   ecx
c00121d6:	8d 54 24 40          	lea    edx,[esp+0x40]
c00121da:	52                   	push   edx
c00121db:	6a 00                	push   0x0
c00121dd:	6a 1f                	push   0x1f
c00121df:	53                   	push   ebx
c00121e0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00121e3:	83 c4 18             	add    esp,0x18
c00121e6:	68 00 e6 01 c0       	push   0xc001e600
c00121eb:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00121ef:	52                   	push   edx
c00121f0:	e8 eb e4 fe ff       	call   c00006e0 <strcmp>
c00121f5:	83 c4 10             	add    esp,0x10
c00121f8:	85 c0                	test   eax,eax
c00121fa:	75 0f                	jne    c001220b <Thr::loadKernelSymbolTable(char const*)+0x185>
c00121fc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00121ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012203:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012207:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001220b:	50                   	push   eax
c001220c:	50                   	push   eax
c001220d:	68 08 e6 01 c0       	push   0xc001e608
c0012212:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012216:	50                   	push   eax
c0012217:	e8 c4 e4 fe ff       	call   c00006e0 <strcmp>
c001221c:	83 c4 10             	add    esp,0x10
c001221f:	85 c0                	test   eax,eax
c0012221:	75 0f                	jne    c0012232 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012223:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012226:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001222a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001222e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012232:	45                   	inc    ebp
c0012233:	e9 4c ff ff ff       	jmp    c0012184 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012238:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001223d:	75 10                	jne    c001224f <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001223f:	83 ec 0c             	sub    esp,0xc
c0012242:	68 10 e6 01 c0       	push   0xc001e610
c0012247:	e8 b7 de ff ff       	call   c0010103 <KePanic(char const*)>
c001224c:	83 c4 10             	add    esp,0x10
c001224f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012254:	75 10                	jne    c0012266 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0012256:	83 ec 0c             	sub    esp,0xc
c0012259:	68 10 e6 01 c0       	push   0xc001e610
c001225e:	e8 a0 de ff ff       	call   c0010103 <KePanic(char const*)>
c0012263:	83 c4 10             	add    esp,0x10
c0012266:	31 d2                	xor    edx,edx
c0012268:	50                   	push   eax
c0012269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001226d:	52                   	push   edx
c001226e:	50                   	push   eax
c001226f:	53                   	push   ebx
c0012270:	e8 1f 89 ff ff       	call   c000ab94 <File::seek(unsigned long long)>
c0012275:	5a                   	pop    edx
c0012276:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001227a:	e8 86 55 ff ff       	call   c0007805 <malloc>
c001227f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012283:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012287:	31 c9                	xor    ecx,ecx
c0012289:	5e                   	pop    esi
c001228a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001228c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0012290:	55                   	push   ebp
c0012291:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012295:	51                   	push   ecx
c0012296:	52                   	push   edx
c0012297:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001229b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001229f:	53                   	push   ebx
c00122a0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00122a3:	83 c4 14             	add    esp,0x14
c00122a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00122aa:	e8 56 55 ff ff       	call   c0007805 <malloc>
c00122af:	89 c6                	mov    esi,eax
c00122b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00122b3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00122b6:	56                   	push   esi
c00122b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00122bb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00122bf:	51                   	push   ecx
c00122c0:	52                   	push   edx
c00122c1:	53                   	push   ebx
c00122c2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00122c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00122c9:	8b 15 00 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023b00
c00122cf:	83 c4 1c             	add    esp,0x1c
c00122d2:	c1 e8 04             	shr    eax,0x4
c00122d5:	89 04 95 80 39 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc680],eax
c00122dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122e0:	31 d2                	xor    edx,edx
c00122e2:	52                   	push   edx
c00122e3:	50                   	push   eax
c00122e4:	53                   	push   ebx
c00122e5:	e8 aa 88 ff ff       	call   c000ab94 <File::seek(unsigned long long)>
c00122ea:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00122ec:	31 d2                	xor    edx,edx
c00122ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00122f1:	56                   	push   esi
c00122f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00122f6:	52                   	push   edx
c00122f7:	50                   	push   eax
c00122f8:	53                   	push   ebx
c00122f9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00122fc:	83 c4 14             	add    esp,0x14
c00122ff:	53                   	push   ebx
c0012300:	e8 2f 88 ff ff       	call   c000ab34 <File::close()>
c0012305:	5d                   	pop    ebp
c0012306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001230a:	e8 06 55 ff ff       	call   c0007815 <free>
c001230f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012312:	e8 fe 54 ff ff       	call   c0007815 <free>
c0012317:	a1 00 3b 02 c0       	mov    eax,ds:0xc0023b00
c001231c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012320:	8d 50 01             	lea    edx,[eax+0x1]
c0012323:	89 0c 85 80 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc580],ecx
c001232a:	89 34 85 00 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc600],esi
c0012331:	89 15 00 3b 02 c0    	mov    DWORD PTR ds:0xc0023b00,edx
c0012337:	83 c4 10             	add    esp,0x10
c001233a:	b0 01                	mov    al,0x1
c001233c:	83 c4 5c             	add    esp,0x5c
c001233f:	5b                   	pop    ebx
c0012340:	5e                   	pop    esi
c0012341:	5f                   	pop    edi
c0012342:	5d                   	pop    ebp
c0012343:	c3                   	ret    

c0012344 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012344:	55                   	push   ebp
c0012345:	57                   	push   edi
c0012346:	56                   	push   esi
c0012347:	53                   	push   ebx
c0012348:	81 ec 68 03 00 00    	sub    esp,0x368
c001234e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0012355:	8b 1d 50 3b 02 c0    	mov    ebx,DWORD PTR ds:0xc0023b50
c001235b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001235f:	68 14 01 00 00       	push   0x114
c0012364:	e8 9c 54 ff ff       	call   c0007805 <malloc>
c0012369:	83 c4 0c             	add    esp,0xc
c001236c:	89 c5                	mov    ebp,eax
c001236e:	53                   	push   ebx
c001236f:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0012376:	50                   	push   eax
c0012377:	e8 9a 86 ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c001237c:	5e                   	pop    esi
c001237d:	5f                   	pop    edi
c001237e:	6a 01                	push   0x1
c0012380:	55                   	push   ebp
c0012381:	e8 50 87 ff ff       	call   c000aad6 <File::open(FileOpenMode)>
c0012386:	83 c4 10             	add    esp,0x10
c0012389:	85 c0                	test   eax,eax
c001238b:	0f 85 a7 06 00 00    	jne    c0012a38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012391:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012399:	83 ec 0c             	sub    esp,0xc
c001239c:	6a 34                	push   0x34
c001239e:	e8 62 54 ff ff       	call   c0007805 <malloc>
c00123a3:	5b                   	pop    ebx
c00123a4:	89 c7                	mov    edi,eax
c00123a6:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00123aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123ad:	53                   	push   ebx
c00123ae:	57                   	push   edi
c00123af:	6a 00                	push   0x0
c00123b1:	6a 34                	push   0x34
c00123b3:	55                   	push   ebp
c00123b4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123b7:	83 c4 20             	add    esp,0x20
c00123ba:	85 c0                	test   eax,eax
c00123bc:	0f 85 76 06 00 00    	jne    c0012a38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00123c2:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00123c8:	0f 85 6a 06 00 00    	jne    c0012a38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00123ce:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00123d1:	85 c0                	test   eax,eax
c00123d3:	0f 84 5f 06 00 00    	je     c0012a38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00123d9:	31 d2                	xor    edx,edx
c00123db:	51                   	push   ecx
c00123dc:	52                   	push   edx
c00123dd:	50                   	push   eax
c00123de:	55                   	push   ebp
c00123df:	e8 b0 87 ff ff       	call   c000ab94 <File::seek(unsigned long long)>
c00123e4:	83 c4 10             	add    esp,0x10
c00123e7:	85 c0                	test   eax,eax
c00123e9:	0f 85 49 06 00 00    	jne    c0012a38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00123ef:	83 ec 0c             	sub    esp,0xc
c00123f2:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00123f5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123f9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00123fd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012401:	0f af c2             	imul   eax,edx
c0012404:	50                   	push   eax
c0012405:	e8 fb 53 ff ff       	call   c0007805 <malloc>
c001240a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001240d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012411:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012414:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012418:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001241c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012420:	0f af c2             	imul   eax,edx
c0012423:	99                   	cdq    
c0012424:	52                   	push   edx
c0012425:	50                   	push   eax
c0012426:	55                   	push   ebp
c0012427:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001242a:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001242d:	83 c4 20             	add    esp,0x20
c0012430:	85 c0                	test   eax,eax
c0012432:	0f 84 00 06 00 00    	je     c0012a38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012438:	52                   	push   edx
c0012439:	31 d2                	xor    edx,edx
c001243b:	52                   	push   edx
c001243c:	50                   	push   eax
c001243d:	55                   	push   ebp
c001243e:	e8 51 87 ff ff       	call   c000ab94 <File::seek(unsigned long long)>
c0012443:	83 c4 10             	add    esp,0x10
c0012446:	85 c0                	test   eax,eax
c0012448:	0f 85 ea 05 00 00    	jne    c0012a38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001244e:	83 ec 0c             	sub    esp,0xc
c0012451:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012455:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012459:	31 f6                	xor    esi,esi
c001245b:	0f af c2             	imul   eax,edx
c001245e:	50                   	push   eax
c001245f:	e8 a1 53 ff ff       	call   c0007805 <malloc>
c0012464:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012467:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001246b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001246e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012472:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012476:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001247a:	0f af c2             	imul   eax,edx
c001247d:	99                   	cdq    
c001247e:	52                   	push   edx
c001247f:	50                   	push   eax
c0012480:	55                   	push   ebp
c0012481:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012484:	83 c4 20             	add    esp,0x20
c0012487:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001248b:	0f 86 8a 00 00 00    	jbe    c001251b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0012491:	0f b7 de             	movzx  ebx,si
c0012494:	c1 e3 05             	shl    ebx,0x5
c0012497:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001249b:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001249e:	75 75                	jne    c0012515 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00124a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00124a3:	31 d2                	xor    edx,edx
c00124a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124a9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00124ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124b0:	50                   	push   eax
c00124b1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00124b4:	52                   	push   edx
c00124b5:	50                   	push   eax
c00124b6:	55                   	push   ebp
c00124b7:	e8 d8 86 ff ff       	call   c000ab94 <File::seek(unsigned long long)>
c00124bc:	83 c4 10             	add    esp,0x10
c00124bf:	85 c0                	test   eax,eax
c00124c1:	0f 85 71 05 00 00    	jne    c0012a38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00124c7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00124ce:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00124d1:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00124d5:	31 d2                	xor    edx,edx
c00124d7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00124db:	83 ec 0c             	sub    esp,0xc
c00124de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00124e2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00124e9:	50                   	push   eax
c00124ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00124ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00124f2:	52                   	push   edx
c00124f3:	50                   	push   eax
c00124f4:	55                   	push   ebp
c00124f5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00124f8:	83 c4 1c             	add    esp,0x1c
c00124fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00124fe:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012501:	50                   	push   eax
c0012502:	6a 00                	push   0x0
c0012504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012508:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001250c:	50                   	push   eax
c001250d:	e8 be df fe ff       	call   c00004d0 <memset>
c0012512:	83 c4 10             	add    esp,0x10
c0012515:	46                   	inc    esi
c0012516:	e9 6c ff ff ff       	jmp    c0012487 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001251b:	53                   	push   ebx
c001251c:	31 db                	xor    ebx,ebx
c001251e:	68 00 01 00 00       	push   0x100
c0012523:	6a 00                	push   0x0
c0012525:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012529:	50                   	push   eax
c001252a:	e8 a1 df fe ff       	call   c00004d0 <memset>
c001252f:	83 c4 0c             	add    esp,0xc
c0012532:	68 00 01 00 00       	push   0x100
c0012537:	6a 00                	push   0x0
c0012539:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012540:	50                   	push   eax
c0012541:	e8 8a df fe ff       	call   c00004d0 <memset>
c0012546:	83 c4 10             	add    esp,0x10
c0012549:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012551:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012559:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0012561:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012569:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012571:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012575:	0f 86 30 01 00 00    	jbe    c00126ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001257b:	0f b7 f3             	movzx  esi,bx
c001257e:	6b f6 28             	imul   esi,esi,0x28
c0012581:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012585:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001258c:	52                   	push   edx
c001258d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012591:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012595:	8b 06                	mov    eax,DWORD PTR [esi]
c0012597:	6b d2 28             	imul   edx,edx,0x28
c001259a:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001259e:	31 d2                	xor    edx,edx
c00125a0:	52                   	push   edx
c00125a1:	50                   	push   eax
c00125a2:	55                   	push   ebp
c00125a3:	e8 ec 85 ff ff       	call   c000ab94 <File::seek(unsigned long long)>
c00125a8:	83 c4 0c             	add    esp,0xc
c00125ab:	6a 20                	push   0x20
c00125ad:	6a 00                	push   0x0
c00125af:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00125b6:	51                   	push   ecx
c00125b7:	e8 14 df fe ff       	call   c00004d0 <memset>
c00125bc:	59                   	pop    ecx
c00125bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125c0:	8d 54 24 58          	lea    edx,[esp+0x58]
c00125c4:	52                   	push   edx
c00125c5:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00125cc:	51                   	push   ecx
c00125cd:	6a 00                	push   0x0
c00125cf:	6a 1f                	push   0x1f
c00125d1:	55                   	push   ebp
c00125d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00125d5:	83 c4 1c             	add    esp,0x1c
c00125d8:	6a 09                	push   0x9
c00125da:	68 2a e6 01 c0       	push   0xc001e62a
c00125df:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00125e6:	51                   	push   ecx
c00125e7:	e8 a4 dd fe ff       	call   c0000390 <memcmp>
c00125ec:	83 c4 10             	add    esp,0x10
c00125ef:	85 c0                	test   eax,eax
c00125f1:	75 21                	jne    c0012614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00125f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125fb:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00125ff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012603:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012606:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001260d:	89 d0                	mov    eax,edx
c001260f:	40                   	inc    eax
c0012610:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012614:	50                   	push   eax
c0012615:	6a 09                	push   0x9
c0012617:	68 34 e6 01 c0       	push   0xc001e634
c001261c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012623:	50                   	push   eax
c0012624:	e8 67 dd fe ff       	call   c0000390 <memcmp>
c0012629:	83 c4 10             	add    esp,0x10
c001262c:	85 c0                	test   eax,eax
c001262e:	75 21                	jne    c0012651 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012634:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012638:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001263c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012640:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012643:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001264a:	89 d0                	mov    eax,edx
c001264c:	40                   	inc    eax
c001264d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012651:	50                   	push   eax
c0012652:	50                   	push   eax
c0012653:	68 00 e6 01 c0       	push   0xc001e600
c0012658:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001265f:	50                   	push   eax
c0012660:	e8 7b e0 fe ff       	call   c00006e0 <strcmp>
c0012665:	83 c4 10             	add    esp,0x10
c0012668:	85 c0                	test   eax,eax
c001266a:	75 0f                	jne    c001267b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001266c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001266f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012673:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012677:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001267b:	50                   	push   eax
c001267c:	50                   	push   eax
c001267d:	68 08 e6 01 c0       	push   0xc001e608
c0012682:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012689:	50                   	push   eax
c001268a:	e8 51 e0 fe ff       	call   c00006e0 <strcmp>
c001268f:	83 c4 10             	add    esp,0x10
c0012692:	85 c0                	test   eax,eax
c0012694:	75 0f                	jne    c00126a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012696:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012699:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001269d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00126a1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00126a5:	43                   	inc    ebx
c00126a6:	e9 c6 fe ff ff       	jmp    c0012571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00126ab:	31 d2                	xor    edx,edx
c00126ad:	50                   	push   eax
c00126ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00126b2:	52                   	push   edx
c00126b3:	50                   	push   eax
c00126b4:	55                   	push   ebp
c00126b5:	e8 da 84 ff ff       	call   c000ab94 <File::seek(unsigned long long)>
c00126ba:	58                   	pop    eax
c00126bb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126bf:	e8 41 51 ff ff       	call   c0007805 <malloc>
c00126c4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126c7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00126cb:	31 d2                	xor    edx,edx
c00126cd:	58                   	pop    eax
c00126ce:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00126d2:	53                   	push   ebx
c00126d3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00126d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00126db:	52                   	push   edx
c00126dc:	50                   	push   eax
c00126dd:	55                   	push   ebp
c00126de:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126e1:	83 c4 14             	add    esp,0x14
c00126e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00126e8:	e8 18 51 ff ff       	call   c0007805 <malloc>
c00126ed:	31 d2                	xor    edx,edx
c00126ef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00126f3:	83 c4 0c             	add    esp,0xc
c00126f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00126fa:	52                   	push   edx
c00126fb:	50                   	push   eax
c00126fc:	55                   	push   ebp
c00126fd:	e8 92 84 ff ff       	call   c000ab94 <File::seek(unsigned long long)>
c0012702:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012705:	31 d2                	xor    edx,edx
c0012707:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001270a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001270e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012712:	52                   	push   edx
c0012713:	50                   	push   eax
c0012714:	55                   	push   ebp
c0012715:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012718:	83 c4 20             	add    esp,0x20
c001271b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012723:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012727:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001272b:	0f 84 0b 03 00 00    	je     c0012a3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012731:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012738:	31 d2                	xor    edx,edx
c001273a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001273e:	c1 e8 03             	shr    eax,0x3
c0012741:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012745:	51                   	push   ecx
c0012746:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001274a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001274e:	52                   	push   edx
c001274f:	50                   	push   eax
c0012750:	55                   	push   ebp
c0012751:	e8 3e 84 ff ff       	call   c000ab94 <File::seek(unsigned long long)>
c0012756:	5b                   	pop    ebx
c0012757:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001275b:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012762:	e8 9e 50 ff ff       	call   c0007805 <malloc>
c0012767:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001276a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001276e:	31 d2                	xor    edx,edx
c0012770:	5e                   	pop    esi
c0012771:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012775:	50                   	push   eax
c0012776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001277a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001277e:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012785:	52                   	push   edx
c0012786:	50                   	push   eax
c0012787:	55                   	push   ebp
c0012788:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001278b:	83 c4 20             	add    esp,0x20
c001278e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012796:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001279a:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001279e:	0f 8d 7c 02 00 00    	jge    c0012a20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00127a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00127a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00127ac:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00127b1:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00127b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00127b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00127bc:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00127c0:	89 d8                	mov    eax,ebx
c00127c2:	c1 e8 08             	shr    eax,0x8
c00127c5:	89 c6                	mov    esi,eax
c00127c7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00127cb:	c1 e6 04             	shl    esi,0x4
c00127ce:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00127d2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00127d5:	85 d2                	test   edx,edx
c00127d7:	0f 85 bf 00 00 00    	jne    c001289c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00127dd:	83 ec 0c             	sub    esp,0xc
c00127e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00127e4:	03 06                	add    eax,DWORD PTR [esi]
c00127e6:	50                   	push   eax
c00127e7:	e8 4b f8 ff ff       	call   c0012037 <Thr::getAddressOfKernelSymbol(char const*)>
c00127ec:	83 c4 10             	add    esp,0x10
c00127ef:	89 c2                	mov    edx,eax
c00127f1:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00127f6:	85 c0                	test   eax,eax
c00127f8:	0f 85 9e 00 00 00    	jne    c001289c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00127fe:	83 ec 0c             	sub    esp,0xc
c0012801:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012805:	03 06                	add    eax,DWORD PTR [esi]
c0012807:	50                   	push   eax
c0012808:	e8 47 da ff ff       	call   c0010254 <KeResolveCompatibilitySymbol(char*)>
c001280d:	83 c4 10             	add    esp,0x10
c0012810:	89 c2                	mov    edx,eax
c0012812:	85 c0                	test   eax,eax
c0012814:	0f 85 82 00 00 00    	jne    c001289c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001281a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001281e:	50                   	push   eax
c001281f:	50                   	push   eax
c0012820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012824:	03 06                	add    eax,DWORD PTR [esi]
c0012826:	50                   	push   eax
c0012827:	68 3e e6 01 c0       	push   0xc001e63e
c001282c:	e8 6f 7c ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0012831:	58                   	pop    eax
c0012832:	5a                   	pop    edx
c0012833:	68 58 e6 01 c0       	push   0xc001e658
c0012838:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001283f:	50                   	push   eax
c0012840:	e8 bb dd fe ff       	call   c0000600 <strcpy>
c0012845:	59                   	pop    ecx
c0012846:	58                   	pop    eax
c0012847:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001284b:	03 06                	add    eax,DWORD PTR [esi]
c001284d:	50                   	push   eax
c001284e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012855:	50                   	push   eax
c0012856:	e8 65 df fe ff       	call   c00007c0 <strcat>
c001285b:	58                   	pop    eax
c001285c:	5a                   	pop    edx
c001285d:	68 ee e6 01 c0       	push   0xc001e6ee
c0012862:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012869:	50                   	push   eax
c001286a:	e8 51 df fe ff       	call   c00007c0 <strcat>
c001286f:	83 c4 10             	add    esp,0x10
c0012872:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012877:	0f 84 5d 01 00 00    	je     c00129da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001287d:	83 ec 0c             	sub    esp,0xc
c0012880:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012887:	50                   	push   eax
c0012888:	e8 76 d8 ff ff       	call   c0010103 <KePanic(char const*)>
c001288d:	83 c4 10             	add    esp,0x10
c0012890:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012894:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012898:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001289c:	80 fb 01             	cmp    bl,0x1
c001289f:	0f 85 88 00 00 00    	jne    c001292d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00128a5:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00128ac:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00128b0:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00128b4:	01 ce                	add    esi,ecx
c00128b6:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00128bc:	0f 94 c0             	sete   al
c00128bf:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00128c5:	0f 94 c3             	sete   bl
c00128c8:	09 c3                	or     ebx,eax
c00128ca:	8b 06                	mov    eax,DWORD PTR [esi]
c00128cc:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00128d1:	74 41                	je     c0012914 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00128d3:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00128d6:	84 db                	test   bl,bl
c00128d8:	75 15                	jne    c00128ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00128da:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00128de:	66 83 f8 0c          	cmp    ax,0xc
c00128e2:	76 05                	jbe    c00128e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00128e4:	b8 0c 00 00 00       	mov    eax,0xc
c00128e9:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00128ed:	76 37                	jbe    c0012926 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00128ef:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00128f3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00128f8:	0f 84 dc 00 00 00    	je     c00129da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00128fe:	83 ec 0c             	sub    esp,0xc
c0012901:	68 6f e6 01 c0       	push   0xc001e66f
c0012906:	e8 f8 d7 ff ff       	call   c0010103 <KePanic(char const*)>
c001290b:	83 c4 10             	add    esp,0x10
c001290e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012912:	eb 12                	jmp    c0012926 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012914:	01 c1                	add    ecx,eax
c0012916:	84 db                	test   bl,bl
c0012918:	75 0c                	jne    c0012926 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001291a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001291e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012922:	77 02                	ja     c0012926 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012924:	01 d1                	add    ecx,edx
c0012926:	89 0e                	mov    DWORD PTR [esi],ecx
c0012928:	e9 ea 00 00 00       	jmp    c0012a17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001292d:	80 fb 02             	cmp    bl,0x2
c0012930:	75 7c                	jne    c00129ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012932:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012939:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001293d:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012941:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012947:	74 20                	je     c0012969 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012949:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001294f:	74 18                	je     c0012969 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012951:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012955:	b9 0a 00 00 00       	mov    ecx,0xa
c001295a:	66 83 f8 0e          	cmp    ax,0xe
c001295e:	77 03                	ja     c0012963 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012960:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012963:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012967:	76 1f                	jbe    c0012988 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012969:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001296d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012972:	74 66                	je     c00129da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012974:	83 ec 0c             	sub    esp,0xc
c0012977:	68 8b e6 01 c0       	push   0xc001e68b
c001297c:	e8 82 d7 ff ff       	call   c0010103 <KePanic(char const*)>
c0012981:	83 c4 10             	add    esp,0x10
c0012984:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012988:	8b 06                	mov    eax,DWORD PTR [esi]
c001298a:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001298f:	74 13                	je     c00129a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012991:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012995:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001299c:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00129a0:	01 c8                	add    eax,ecx
c00129a2:	eb 04                	jmp    c00129a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00129a4:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00129a8:	01 c2                	add    edx,eax
c00129aa:	89 16                	mov    DWORD PTR [esi],edx
c00129ac:	eb 69                	jmp    c0012a17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00129ae:	0f b6 db             	movzx  ebx,bl
c00129b1:	50                   	push   eax
c00129b2:	50                   	push   eax
c00129b3:	53                   	push   ebx
c00129b4:	68 a7 e6 01 c0       	push   0xc001e6a7
c00129b9:	e8 e2 7a ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c00129be:	83 c4 10             	add    esp,0x10
c00129c1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00129c6:	74 12                	je     c00129da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00129c8:	83 ec 0c             	sub    esp,0xc
c00129cb:	68 b2 e6 01 c0       	push   0xc001e6b2
c00129d0:	e8 2e d7 ff ff       	call   c0010103 <KePanic(char const*)>
c00129d5:	83 c4 10             	add    esp,0x10
c00129d8:	eb 3d                	jmp    c0012a17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00129da:	83 ec 0c             	sub    esp,0xc
c00129dd:	55                   	push   ebp
c00129de:	e8 51 81 ff ff       	call   c000ab34 <File::close()>
c00129e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129e6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00129e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00129ec:	59                   	pop    ecx
c00129ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129f1:	e8 1f 4e ff ff       	call   c0007815 <free>
c00129f6:	5b                   	pop    ebx
c00129f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00129fb:	e8 15 4e ff ff       	call   c0007815 <free>
c0012a00:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012a03:	e8 0d 4e ff ff       	call   c0007815 <free>
c0012a08:	5e                   	pop    esi
c0012a09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a0d:	e8 03 4e ff ff       	call   c0007815 <free>
c0012a12:	83 c4 10             	add    esp,0x10
c0012a15:	eb 21                	jmp    c0012a38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012a17:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012a1b:	e9 76 fd ff ff       	jmp    c0012796 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012a20:	83 ec 0c             	sub    esp,0xc
c0012a23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a27:	e8 e9 4d ff ff       	call   c0007815 <free>
c0012a2c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012a30:	83 c4 10             	add    esp,0x10
c0012a33:	e9 eb fc ff ff       	jmp    c0012723 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012a38:	31 c0                	xor    eax,eax
c0012a3a:	eb 33                	jmp    c0012a6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012a3c:	83 ec 0c             	sub    esp,0xc
c0012a3f:	55                   	push   ebp
c0012a40:	e8 ef 80 ff ff       	call   c000ab34 <File::close()>
c0012a45:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a48:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012a4b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012a4e:	58                   	pop    eax
c0012a4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012a53:	e8 bd 4d ff ff       	call   c0007815 <free>
c0012a58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012a5b:	e8 b5 4d ff ff       	call   c0007815 <free>
c0012a60:	5a                   	pop    edx
c0012a61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a65:	e8 ab 4d ff ff       	call   c0007815 <free>
c0012a6a:	83 c4 10             	add    esp,0x10
c0012a6d:	b0 01                	mov    al,0x1
c0012a6f:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012a75:	5b                   	pop    ebx
c0012a76:	5e                   	pop    esi
c0012a77:	5f                   	pop    edi
c0012a78:	5d                   	pop    ebp
c0012a79:	c3                   	ret    

c0012a7a <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012a7a:	56                   	push   esi
c0012a7b:	31 d2                	xor    edx,edx
c0012a7d:	53                   	push   ebx
c0012a7e:	8b 1d 60 33 02 c0    	mov    ebx,DWORD PTR ds:0xc0023360
c0012a84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012a88:	39 d3                	cmp    ebx,edx
c0012a8a:	7e 1b                	jle    c0012aa7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012a8c:	8b 04 95 80 35 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdca80]
c0012a93:	39 c8                	cmp    eax,ecx
c0012a95:	77 0d                	ja     c0012aa4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012a97:	8b 34 95 80 33 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdcc80]
c0012a9e:	01 c6                	add    esi,eax
c0012aa0:	39 ce                	cmp    esi,ecx
c0012aa2:	77 05                	ja     c0012aa9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012aa4:	42                   	inc    edx
c0012aa5:	eb e1                	jmp    c0012a88 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012aa7:	31 c0                	xor    eax,eax
c0012aa9:	5b                   	pop    ebx
c0012aaa:	5e                   	pop    esi
c0012aab:	c3                   	ret    

c0012aac <Thr::getDriverNameFromAddress(unsigned long)>:
c0012aac:	53                   	push   ebx
c0012aad:	31 c0                	xor    eax,eax
c0012aaf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012ab3:	8b 1d 60 33 02 c0    	mov    ebx,DWORD PTR ds:0xc0023360
c0012ab9:	39 c3                	cmp    ebx,eax
c0012abb:	7e 22                	jle    c0012adf <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012abd:	8b 14 85 80 35 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdca80]
c0012ac4:	39 ca                	cmp    edx,ecx
c0012ac6:	77 14                	ja     c0012adc <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012ac8:	03 14 85 80 33 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdcc80]
c0012acf:	39 ca                	cmp    edx,ecx
c0012ad1:	76 09                	jbe    c0012adc <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012ad3:	8b 04 85 80 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc880]
c0012ada:	eb 05                	jmp    c0012ae1 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012adc:	40                   	inc    eax
c0012add:	eb da                	jmp    c0012ab9 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012adf:	31 c0                	xor    eax,eax
c0012ae1:	5b                   	pop    ebx
c0012ae2:	c3                   	ret    

c0012ae3 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012ae3:	53                   	push   ebx
c0012ae4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012ae8:	53                   	push   ebx
c0012ae9:	e8 8c ff ff ff       	call   c0012a7a <Thr::getDriverBaseFromAddress(unsigned long)>
c0012aee:	5a                   	pop    edx
c0012aef:	31 d2                	xor    edx,edx
c0012af1:	85 c0                	test   eax,eax
c0012af3:	74 04                	je     c0012af9 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012af5:	89 da                	mov    edx,ebx
c0012af7:	29 c2                	sub    edx,eax
c0012af9:	89 d0                	mov    eax,edx
c0012afb:	5b                   	pop    ebx
c0012afc:	c3                   	ret    

c0012afd <Thr::loadDLL(char const*, bool)>:
c0012afd:	55                   	push   ebp
c0012afe:	57                   	push   edi
c0012aff:	56                   	push   esi
c0012b00:	53                   	push   ebx
c0012b01:	81 ec 34 01 00 00    	sub    esp,0x134
c0012b07:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012b0e:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012b15:	56                   	push   esi
c0012b16:	68 ca e6 01 c0       	push   0xc001e6ca
c0012b1b:	e8 80 79 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0012b20:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012b27:	e8 d9 4c ff ff       	call   c0007805 <malloc>
c0012b2c:	83 c4 0c             	add    esp,0xc
c0012b2f:	89 c3                	mov    ebx,eax
c0012b31:	ff 35 50 3b 02 c0    	push   DWORD PTR ds:0xc0023b50
c0012b37:	56                   	push   esi
c0012b38:	50                   	push   eax
c0012b39:	e8 d8 7e ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c0012b3e:	83 c4 10             	add    esp,0x10
c0012b41:	85 db                	test   ebx,ebx
c0012b43:	75 3c                	jne    c0012b81 <Thr::loadDLL(char const*, bool)+0x84>
c0012b45:	89 f8                	mov    eax,edi
c0012b47:	84 c0                	test   al,al
c0012b49:	0f 84 d2 01 00 00    	je     c0012d21 <Thr::loadDLL(char const*, bool)+0x224>
c0012b4f:	55                   	push   ebp
c0012b50:	55                   	push   ebp
c0012b51:	68 db e6 01 c0       	push   0xc001e6db
c0012b56:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012b5a:	55                   	push   ebp
c0012b5b:	e8 a0 da fe ff       	call   c0000600 <strcpy>
c0012b60:	58                   	pop    eax
c0012b61:	5a                   	pop    edx
c0012b62:	56                   	push   esi
c0012b63:	55                   	push   ebp
c0012b64:	e8 57 dc fe ff       	call   c00007c0 <strcat>
c0012b69:	59                   	pop    ecx
c0012b6a:	58                   	pop    eax
c0012b6b:	68 ee e6 01 c0       	push   0xc001e6ee
c0012b70:	55                   	push   ebp
c0012b71:	e8 4a dc fe ff       	call   c00007c0 <strcat>
c0012b76:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b79:	e8 85 d5 ff ff       	call   c0010103 <KePanic(char const*)>
c0012b7e:	83 c4 10             	add    esp,0x10
c0012b81:	51                   	push   ecx
c0012b82:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012b86:	50                   	push   eax
c0012b87:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012b8b:	50                   	push   eax
c0012b8c:	53                   	push   ebx
c0012b8d:	e8 f0 81 ff ff       	call   c000ad82 <File::stat(unsigned long long*, bool*)>
c0012b92:	83 c4 10             	add    esp,0x10
c0012b95:	85 db                	test   ebx,ebx
c0012b97:	74 0c                	je     c0012ba5 <Thr::loadDLL(char const*, bool)+0xa8>
c0012b99:	83 ec 0c             	sub    esp,0xc
c0012b9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012b9e:	53                   	push   ebx
c0012b9f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ba2:	83 c4 10             	add    esp,0x10
c0012ba5:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012baa:	75 0a                	jne    c0012bb6 <Thr::loadDLL(char const*, bool)+0xb9>
c0012bac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012bb0:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012bb4:	75 3c                	jne    c0012bf2 <Thr::loadDLL(char const*, bool)+0xf5>
c0012bb6:	89 f8                	mov    eax,edi
c0012bb8:	84 c0                	test   al,al
c0012bba:	0f 84 49 01 00 00    	je     c0012d09 <Thr::loadDLL(char const*, bool)+0x20c>
c0012bc0:	51                   	push   ecx
c0012bc1:	51                   	push   ecx
c0012bc2:	68 db e6 01 c0       	push   0xc001e6db
c0012bc7:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012bcb:	53                   	push   ebx
c0012bcc:	e8 2f da fe ff       	call   c0000600 <strcpy>
c0012bd1:	5d                   	pop    ebp
c0012bd2:	58                   	pop    eax
c0012bd3:	56                   	push   esi
c0012bd4:	53                   	push   ebx
c0012bd5:	e8 e6 db fe ff       	call   c00007c0 <strcat>
c0012bda:	58                   	pop    eax
c0012bdb:	5a                   	pop    edx
c0012bdc:	68 ee e6 01 c0       	push   0xc001e6ee
c0012be1:	53                   	push   ebx
c0012be2:	e8 d9 db fe ff       	call   c00007c0 <strcat>
c0012be7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012bea:	e8 14 d5 ff ff       	call   c0010103 <KePanic(char const*)>
c0012bef:	83 c4 10             	add    esp,0x10
c0012bf2:	52                   	push   edx
c0012bf3:	6a 03                	push   0x3
c0012bf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012bf9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012bfd:	05 ff 0f 00 00       	add    eax,0xfff
c0012c02:	83 d2 00             	adc    edx,0x0
c0012c05:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012c09:	50                   	push   eax
c0012c0a:	ff 35 70 07 02 c0    	push   DWORD PTR ds:0xc0020770
c0012c10:	e8 d1 6d ff ff       	call   c00099e6 <VAS::allocatePages(int, int)>
c0012c15:	59                   	pop    ecx
c0012c16:	89 c3                	mov    ebx,eax
c0012c18:	5d                   	pop    ebp
c0012c19:	50                   	push   eax
c0012c1a:	68 be d4 01 c0       	push   0xc001d4be
c0012c1f:	e8 7c 78 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0012c24:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c27:	e8 14 d9 fe ff       	call   c0000540 <strlen>
c0012c2c:	8b 2d 60 33 02 c0    	mov    ebp,DWORD PTR ds:0xc0023360
c0012c32:	40                   	inc    eax
c0012c33:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c36:	e8 ca 4b ff ff       	call   c0007805 <malloc>
c0012c3b:	89 04 ad 80 37 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc880],eax
c0012c42:	58                   	pop    eax
c0012c43:	a1 60 33 02 c0       	mov    eax,ds:0xc0023360
c0012c48:	5a                   	pop    edx
c0012c49:	56                   	push   esi
c0012c4a:	ff 34 85 80 37 02 c0 	push   DWORD PTR [eax*4-0x3ffdc880]
c0012c51:	e8 aa d9 fe ff       	call   c0000600 <strcpy>
c0012c56:	a1 60 33 02 c0       	mov    eax,ds:0xc0023360
c0012c5b:	8d 50 01             	lea    edx,[eax+0x1]
c0012c5e:	89 1c 85 80 35 02 c0 	mov    DWORD PTR [eax*4-0x3ffdca80],ebx
c0012c65:	89 15 60 33 02 c0    	mov    DWORD PTR ds:0xc0023360,edx
c0012c6b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012c6f:	83 c4 0c             	add    esp,0xc
c0012c72:	89 14 85 80 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcc80],edx
c0012c79:	6a 01                	push   0x1
c0012c7b:	53                   	push   ebx
c0012c7c:	56                   	push   esi
c0012c7d:	e8 c2 f6 ff ff       	call   c0012344 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012c82:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012c86:	83 c4 10             	add    esp,0x10
c0012c89:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012c8e:	0f 85 89 00 00 00    	jne    c0012d1d <Thr::loadDLL(char const*, bool)+0x220>
c0012c94:	89 f8                	mov    eax,edi
c0012c96:	84 c0                	test   al,al
c0012c98:	74 73                	je     c0012d0d <Thr::loadDLL(char const*, bool)+0x210>
c0012c9a:	83 ec 0c             	sub    esp,0xc
c0012c9d:	68 f0 e6 01 c0       	push   0xc001e6f0
c0012ca2:	e8 5c d4 ff ff       	call   c0010103 <KePanic(char const*)>
c0012ca7:	83 c4 10             	add    esp,0x10
c0012caa:	eb 61                	jmp    c0012d0d <Thr::loadDLL(char const*, bool)+0x210>
c0012cac:	50                   	push   eax
c0012cad:	50                   	push   eax
c0012cae:	89 e8                	mov    eax,ebp
c0012cb0:	c1 e0 0c             	shl    eax,0xc
c0012cb3:	01 d8                	add    eax,ebx
c0012cb5:	50                   	push   eax
c0012cb6:	ff 35 70 07 02 c0    	push   DWORD PTR ds:0xc0020770
c0012cbc:	e8 9d 68 ff ff       	call   c000955e <VAS::getPageTableEntry(unsigned long)>
c0012cc1:	83 c4 10             	add    esp,0x10
c0012cc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cc6:	a8 60                	test   al,0x60
c0012cc8:	75 11                	jne    c0012cdb <Thr::loadDLL(char const*, bool)+0x1de>
c0012cca:	83 ec 0c             	sub    esp,0xc
c0012ccd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012cd2:	50                   	push   eax
c0012cd3:	e8 a7 4d ff ff       	call   c0007a7f <Phys::freePage(unsigned long)>
c0012cd8:	83 c4 10             	add    esp,0x10
c0012cdb:	45                   	inc    ebp
c0012cdc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ce0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012ce4:	05 ff 0f 00 00       	add    eax,0xfff
c0012ce9:	bf 00 00 00 00       	mov    edi,0x0
c0012cee:	83 d2 00             	adc    edx,0x0
c0012cf1:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012cf5:	c1 ea 0c             	shr    edx,0xc
c0012cf8:	39 c5                	cmp    ebp,eax
c0012cfa:	89 d1                	mov    ecx,edx
c0012cfc:	89 f8                	mov    eax,edi
c0012cfe:	19 c8                	sbb    eax,ecx
c0012d00:	72 aa                	jb     c0012cac <Thr::loadDLL(char const*, bool)+0x1af>
c0012d02:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012d07:	75 18                	jne    c0012d21 <Thr::loadDLL(char const*, bool)+0x224>
c0012d09:	31 db                	xor    ebx,ebx
c0012d0b:	eb 14                	jmp    c0012d21 <Thr::loadDLL(char const*, bool)+0x224>
c0012d0d:	83 ec 0c             	sub    esp,0xc
c0012d10:	68 0f e7 01 c0       	push   0xc001e70f
c0012d15:	e8 e9 d3 ff ff       	call   c0010103 <KePanic(char const*)>
c0012d1a:	83 c4 10             	add    esp,0x10
c0012d1d:	31 ed                	xor    ebp,ebp
c0012d1f:	eb bb                	jmp    c0012cdc <Thr::loadDLL(char const*, bool)+0x1df>
c0012d21:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012d27:	89 d8                	mov    eax,ebx
c0012d29:	5b                   	pop    ebx
c0012d2a:	5e                   	pop    esi
c0012d2b:	5f                   	pop    edi
c0012d2c:	5d                   	pop    ebp
c0012d2d:	c3                   	ret    

c0012d2e <Thr::executeDLL(unsigned long, void*)>:
c0012d2e:	56                   	push   esi
c0012d2f:	53                   	push   ebx
c0012d30:	52                   	push   edx
c0012d31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d35:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012d39:	85 db                	test   ebx,ebx
c0012d3b:	75 10                	jne    c0012d4d <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012d3d:	83 ec 0c             	sub    esp,0xc
c0012d40:	68 2b e7 01 c0       	push   0xc001e72b
c0012d45:	e8 b9 d3 ff ff       	call   c0010103 <KePanic(char const*)>
c0012d4a:	83 c4 10             	add    esp,0x10
c0012d4d:	50                   	push   eax
c0012d4e:	50                   	push   eax
c0012d4f:	53                   	push   ebx
c0012d50:	68 55 e7 01 c0       	push   0xc001e755
c0012d55:	e8 46 77 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0012d5a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012d5e:	89 d8                	mov    eax,ebx
c0012d60:	83 c4 14             	add    esp,0x14
c0012d63:	5b                   	pop    ebx
c0012d64:	5e                   	pop    esi
c0012d65:	ff e0                	jmp    eax
c0012d67:	90                   	nop

c0012d68 <userModeEntryPoint(void*)>:
c0012d68:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0012d6d:	48                   	dec    eax
c0012d6e:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0012d73:	75 03                	jne    c0012d78 <userModeEntryPoint(void*)+0x10>
c0012d75:	fb                   	sti    
c0012d76:	66 90                	xchg   ax,ax
c0012d78:	fb                   	sti    
c0012d79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d7e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012d81:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012d87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d8b:	e9 af d4 fe ff       	jmp    c000023f <goToUsermode>

c0012d90 <changeTSS>:
c0012d90:	83 ec 14             	sub    esp,0x14
c0012d93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d98:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0012d9b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012da0:	c1 e2 15             	shl    edx,0x15
c0012da3:	29 d0                	sub    eax,edx
c0012da5:	50                   	push   eax
c0012da6:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0012dab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012db1:	05 7c 11 00 00       	add    eax,0x117c
c0012db6:	50                   	push   eax
c0012db7:	e8 e4 5d ff ff       	call   c0008ba0 <TSS::setESP(unsigned long)>
c0012dbc:	83 c4 1c             	add    esp,0x1c
c0012dbf:	c3                   	ret    

c0012dc0 <switchToThread(ThreadControlBlock*)>:
c0012dc0:	57                   	push   edi
c0012dc1:	a1 24 3b 02 c0       	mov    eax,ds:0xc0023b24
c0012dc6:	56                   	push   esi
c0012dc7:	85 c0                	test   eax,eax
c0012dc9:	53                   	push   ebx
c0012dca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012dce:	0f 85 90 00 00 00    	jne    c0012e64 <switchToThread(ThreadControlBlock*)+0xa4>
c0012dd4:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0012dd7:	80 fa ff             	cmp    dl,0xff
c0012dda:	0f 84 80 00 00 00    	je     c0012e60 <switchToThread(ThreadControlBlock*)+0xa0>
c0012de0:	81 e2 ff 00 00 00    	and    edx,0xff
c0012de6:	b8 00 04 00 00       	mov    eax,0x400
c0012deb:	29 d0                	sub    eax,edx
c0012ded:	d1 f8                	sar    eax,1
c0012def:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0012df2:	66 90                	xchg   ax,ax
c0012df4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0012df7:	e8 e5 25 00 00       	call   c00153e1 <HalQueryPerformanceCounter()>
c0012dfc:	a3 68 3b 02 c0       	mov    ds:0xc0023b68,eax
c0012e01:	89 15 6c 3b 02 c0    	mov    DWORD PTR ds:0xc0023b6c,edx
c0012e07:	89 c6                	mov    esi,eax
c0012e09:	89 d7                	mov    edi,edx
c0012e0b:	2b 35 58 3b 02 c0    	sub    esi,DWORD PTR ds:0xc0023b58
c0012e11:	a3 58 3b 02 c0       	mov    ds:0xc0023b58,eax
c0012e16:	1b 3d 5c 3b 02 c0    	sbb    edi,DWORD PTR ds:0xc0023b5c
c0012e1c:	89 35 60 3b 02 c0    	mov    DWORD PTR ds:0xc0023b60,esi
c0012e22:	89 3d 64 3b 02 c0    	mov    DWORD PTR ds:0xc0023b64,edi
c0012e28:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012e2e:	89 15 5c 3b 02 c0    	mov    DWORD PTR ds:0xc0023b5c,edx
c0012e34:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0012e37:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0012e3a:	01 c6                	add    esi,eax
c0012e3c:	11 d7                	adc    edi,edx
c0012e3e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0012e41:	83 ec 0c             	sub    esp,0xc
c0012e44:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0012e47:	53                   	push   ebx
c0012e48:	e8 2a d4 fe ff       	call   c0000277 <switchToThreadASM>
c0012e4d:	0f 20 c0             	mov    eax,cr0
c0012e50:	83 c8 08             	or     eax,0x8
c0012e53:	0f 22 c0             	mov    cr0,eax
c0012e56:	83 c4 10             	add    esp,0x10
c0012e59:	5b                   	pop    ebx
c0012e5a:	5e                   	pop    esi
c0012e5b:	5f                   	pop    edi
c0012e5c:	c3                   	ret    
c0012e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0012e60:	31 c0                	xor    eax,eax
c0012e62:	eb 90                	jmp    c0012df4 <switchToThread(ThreadControlBlock*)+0x34>
c0012e64:	5b                   	pop    ebx
c0012e65:	c7 05 20 3b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023b20,0x1
c0012e6f:	5e                   	pop    esi
c0012e70:	5f                   	pop    edi
c0012e71:	c3                   	ret    
c0012e72:	66 90                	xchg   ax,ax

c0012e74 <Process::addArgs(char**)>:
c0012e74:	57                   	push   edi
c0012e75:	56                   	push   esi
c0012e76:	53                   	push   ebx
c0012e77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012e7b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012e7f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0012e89:	85 ff                	test   edi,edi
c0012e8b:	74 43                	je     c0012ed0 <Process::addArgs(char**)+0x5c>
c0012e8d:	8b 07                	mov    eax,DWORD PTR [edi]
c0012e8f:	85 c0                	test   eax,eax
c0012e91:	74 3d                	je     c0012ed0 <Process::addArgs(char**)+0x5c>
c0012e93:	31 db                	xor    ebx,ebx
c0012e95:	8d 76 00             	lea    esi,[esi+0x0]
c0012e98:	83 ec 0c             	sub    esp,0xc
c0012e9b:	50                   	push   eax
c0012e9c:	e8 9f d6 fe ff       	call   c0000540 <strlen>
c0012ea1:	40                   	inc    eax
c0012ea2:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ea5:	e8 5b 49 ff ff       	call   c0007805 <malloc>
c0012eaa:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012eb1:	5a                   	pop    edx
c0012eb2:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0012eb5:	59                   	pop    ecx
c0012eb6:	43                   	inc    ebx
c0012eb7:	52                   	push   edx
c0012eb8:	50                   	push   eax
c0012eb9:	e8 42 d7 fe ff       	call   c0000600 <strcpy>
c0012ebe:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012ec4:	83 c4 10             	add    esp,0x10
c0012ec7:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0012eca:	85 c0                	test   eax,eax
c0012ecc:	75 ca                	jne    c0012e98 <Process::addArgs(char**)+0x24>
c0012ece:	66 90                	xchg   ax,ax
c0012ed0:	5b                   	pop    ebx
c0012ed1:	5e                   	pop    esi
c0012ed2:	5f                   	pop    edi
c0012ed3:	c3                   	ret    

c0012ed4 <Process::Process(char const*, Process*, char**)>:
c0012ed4:	56                   	push   esi
c0012ed5:	53                   	push   ebx
c0012ed6:	83 ec 14             	sub    esp,0x14
c0012ed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012edd:	05 0c 02 00 00       	add    eax,0x20c
c0012ee2:	bb 07 00 00 00       	mov    ebx,0x7
c0012ee7:	89 c6                	mov    esi,eax
c0012ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0012eec:	85 db                	test   ebx,ebx
c0012eee:	78 14                	js     c0012f04 <Process::Process(char const*, Process*, char**)+0x30>
c0012ef0:	83 ec 0c             	sub    esp,0xc
c0012ef3:	56                   	push   esi
c0012ef4:	e8 53 98 00 00       	call   c001c74c <ThreadControlBlock::ThreadControlBlock()>
c0012ef9:	83 c4 10             	add    esp,0x10
c0012efc:	83 c6 5f             	add    esi,0x5f
c0012eff:	4b                   	dec    ebx
c0012f00:	eb ea                	jmp    c0012eec <Process::Process(char const*, Process*, char**)+0x18>
c0012f02:	66 90                	xchg   ax,ax
c0012f04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f08:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012f0f:	83 ec 0c             	sub    esp,0xc
c0012f12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f16:	e8 dd cf ff ff       	call   c000fef8 <Krnl::newProcessEnv(Process*)>
c0012f1b:	83 c4 10             	add    esp,0x10
c0012f1e:	89 c2                	mov    edx,eax
c0012f20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f24:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012f2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f2e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012f37:	a1 50 f6 01 c0       	mov    eax,ds:0xc001f650
c0012f3c:	8d 50 01             	lea    edx,[eax+0x1]
c0012f3f:	89 15 50 f6 01 c0    	mov    DWORD PTR ds:0xc001f650,edx
c0012f45:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012f49:	89 02                	mov    DWORD PTR [edx],eax
c0012f4b:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0012f53:	83 ec 0c             	sub    esp,0xc
c0012f56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f5a:	e8 a6 48 ff ff       	call   c0007805 <malloc>
c0012f5f:	83 c4 10             	add    esp,0x10
c0012f62:	89 c3                	mov    ebx,eax
c0012f64:	83 ec 08             	sub    esp,0x8
c0012f67:	6a 00                	push   0x0
c0012f69:	53                   	push   ebx
c0012f6a:	e8 21 6e ff ff       	call   c0009d90 <VAS::VAS(bool)>
c0012f6f:	83 c4 10             	add    esp,0x10
c0012f72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f76:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012f7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f80:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012f8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f8e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012f92:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f9c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012fa2:	85 c0                	test   eax,eax
c0012fa4:	74 42                	je     c0012fe8 <Process::Process(char const*, Process*, char**)+0x114>
c0012fa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012faa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012fb0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012fb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012fba:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012fc4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012fca:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012fd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012fd4:	05 0c 01 00 00       	add    eax,0x10c
c0012fd9:	83 ec 08             	sub    esp,0x8
c0012fdc:	52                   	push   edx
c0012fdd:	50                   	push   eax
c0012fde:	e8 1d d6 fe ff       	call   c0000600 <strcpy>
c0012fe3:	83 c4 10             	add    esp,0x10
c0012fe6:	eb 64                	jmp    c001304c <Process::Process(char const*, Process*, char**)+0x178>
c0012fe8:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0012ff0:	83 ec 0c             	sub    esp,0xc
c0012ff3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ff7:	e8 09 48 ff ff       	call   c0007805 <malloc>
c0012ffc:	83 c4 10             	add    esp,0x10
c0012fff:	89 c3                	mov    ebx,eax
c0013001:	83 ec 08             	sub    esp,0x8
c0013004:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013008:	53                   	push   ebx
c0013009:	e8 38 59 ff ff       	call   c0008946 <VgaText::VgaText(char const*)>
c001300e:	83 c4 10             	add    esp,0x10
c0013011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013015:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001301b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001301f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013025:	83 ec 0c             	sub    esp,0xc
c0013028:	50                   	push   eax
c0013029:	e8 b8 51 ff ff       	call   c00081e6 <addToTerminalCycle(VgaText*)>
c001302e:	83 c4 10             	add    esp,0x10
c0013031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013035:	05 0c 01 00 00       	add    eax,0x10c
c001303a:	83 ec 08             	sub    esp,0x8
c001303d:	68 74 e7 01 c0       	push   0xc001e774
c0013042:	50                   	push   eax
c0013043:	e8 b8 d5 fe ff       	call   c0000600 <strcpy>
c0013048:	83 c4 10             	add    esp,0x10
c001304b:	90                   	nop
c001304c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013050:	83 c0 0c             	add    eax,0xc
c0013053:	83 ec 08             	sub    esp,0x8
c0013056:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001305a:	50                   	push   eax
c001305b:	e8 a0 d5 fe ff       	call   c0000600 <strcpy>
c0013060:	83 c4 10             	add    esp,0x10
c0013063:	83 ec 08             	sub    esp,0x8
c0013066:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001306a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001306e:	e8 01 fe ff ff       	call   c0012e74 <Process::addArgs(char**)>
c0013073:	83 c4 10             	add    esp,0x10
c0013076:	83 ec 08             	sub    esp,0x8
c0013079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001307d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013081:	e8 88 ed ff ff       	call   c0011e0e <Thr::loadProgramIntoMemory(Process*, char const*)>
c0013086:	83 c4 10             	add    esp,0x10
c0013089:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001308d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013091:	83 f0 01             	xor    eax,0x1
c0013094:	88 c2                	mov    dl,al
c0013096:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001309a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00130a0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00130a4:	25 ff 00 00 00       	and    eax,0xff
c00130a9:	83 ec 08             	sub    esp,0x8
c00130ac:	50                   	push   eax
c00130ad:	68 cc e7 01 c0       	push   0xc001e7cc
c00130b2:	e8 e9 73 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c00130b7:	83 c4 10             	add    esp,0x10
c00130ba:	90                   	nop
c00130bb:	83 c4 14             	add    esp,0x14
c00130be:	5b                   	pop    ebx
c00130bf:	5e                   	pop    esi
c00130c0:	c3                   	ret    
c00130c1:	90                   	nop
c00130c2:	66 90                	xchg   ax,ax

c00130c4 <Process::Process(bool, char const*, Process*, char**)>:
c00130c4:	56                   	push   esi
c00130c5:	53                   	push   ebx
c00130c6:	83 ec 24             	sub    esp,0x24
c00130c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00130cd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00130d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130d5:	05 0c 02 00 00       	add    eax,0x20c
c00130da:	bb 07 00 00 00       	mov    ebx,0x7
c00130df:	89 c6                	mov    esi,eax
c00130e1:	8d 76 00             	lea    esi,[esi+0x0]
c00130e4:	85 db                	test   ebx,ebx
c00130e6:	78 14                	js     c00130fc <Process::Process(bool, char const*, Process*, char**)+0x38>
c00130e8:	83 ec 0c             	sub    esp,0xc
c00130eb:	56                   	push   esi
c00130ec:	e8 5b 96 00 00       	call   c001c74c <ThreadControlBlock::ThreadControlBlock()>
c00130f1:	83 c4 10             	add    esp,0x10
c00130f4:	83 c6 5f             	add    esi,0x5f
c00130f7:	4b                   	dec    ebx
c00130f8:	eb ea                	jmp    c00130e4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00130fa:	66 90                	xchg   ax,ax
c00130fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013100:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013107:	83 ec 0c             	sub    esp,0xc
c001310a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001310e:	e8 e5 cd ff ff       	call   c000fef8 <Krnl::newProcessEnv(Process*)>
c0013113:	83 c4 10             	add    esp,0x10
c0013116:	89 c2                	mov    edx,eax
c0013118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001311c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013122:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013126:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001312f:	a1 50 f6 01 c0       	mov    eax,ds:0xc001f650
c0013134:	8d 50 01             	lea    edx,[eax+0x1]
c0013137:	89 15 50 f6 01 c0    	mov    DWORD PTR ds:0xc001f650,edx
c001313d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013141:	89 02                	mov    DWORD PTR [edx],eax
c0013143:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001314b:	83 ec 0c             	sub    esp,0xc
c001314e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013152:	e8 ae 46 ff ff       	call   c0007805 <malloc>
c0013157:	83 c4 10             	add    esp,0x10
c001315a:	89 c3                	mov    ebx,eax
c001315c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0013160:	25 ff 00 00 00       	and    eax,0xff
c0013165:	83 ec 08             	sub    esp,0x8
c0013168:	50                   	push   eax
c0013169:	53                   	push   ebx
c001316a:	e8 21 6c ff ff       	call   c0009d90 <VAS::VAS(bool)>
c001316f:	83 c4 10             	add    esp,0x10
c0013172:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013176:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001317c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013180:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001318a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001318e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013192:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013198:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001319c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00131a2:	85 c0                	test   eax,eax
c00131a4:	74 42                	je     c00131e8 <Process::Process(bool, char const*, Process*, char**)+0x124>
c00131a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131aa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00131b0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00131b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131ba:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00131c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131c4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00131ca:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00131d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131d4:	05 0c 01 00 00       	add    eax,0x10c
c00131d9:	83 ec 08             	sub    esp,0x8
c00131dc:	52                   	push   edx
c00131dd:	50                   	push   eax
c00131de:	e8 1d d4 fe ff       	call   c0000600 <strcpy>
c00131e3:	83 c4 10             	add    esp,0x10
c00131e6:	eb 64                	jmp    c001324c <Process::Process(bool, char const*, Process*, char**)+0x188>
c00131e8:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c00131f0:	83 ec 0c             	sub    esp,0xc
c00131f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00131f7:	e8 09 46 ff ff       	call   c0007805 <malloc>
c00131fc:	83 c4 10             	add    esp,0x10
c00131ff:	89 c3                	mov    ebx,eax
c0013201:	83 ec 08             	sub    esp,0x8
c0013204:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013208:	53                   	push   ebx
c0013209:	e8 38 57 ff ff       	call   c0008946 <VgaText::VgaText(char const*)>
c001320e:	83 c4 10             	add    esp,0x10
c0013211:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013215:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001321b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001321f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013225:	83 ec 0c             	sub    esp,0xc
c0013228:	50                   	push   eax
c0013229:	e8 b8 4f ff ff       	call   c00081e6 <addToTerminalCycle(VgaText*)>
c001322e:	83 c4 10             	add    esp,0x10
c0013231:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013235:	05 0c 01 00 00       	add    eax,0x10c
c001323a:	83 ec 08             	sub    esp,0x8
c001323d:	68 74 e7 01 c0       	push   0xc001e774
c0013242:	50                   	push   eax
c0013243:	e8 b8 d3 fe ff       	call   c0000600 <strcpy>
c0013248:	83 c4 10             	add    esp,0x10
c001324b:	90                   	nop
c001324c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013250:	83 c0 0c             	add    eax,0xc
c0013253:	83 ec 08             	sub    esp,0x8
c0013256:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001325a:	50                   	push   eax
c001325b:	e8 a0 d3 fe ff       	call   c0000600 <strcpy>
c0013260:	83 c4 10             	add    esp,0x10
c0013263:	83 ec 08             	sub    esp,0x8
c0013266:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001326a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001326e:	e8 01 fc ff ff       	call   c0012e74 <Process::addArgs(char**)>
c0013273:	83 c4 10             	add    esp,0x10
c0013276:	90                   	nop
c0013277:	83 c4 24             	add    esp,0x24
c001327a:	5b                   	pop    ebx
c001327b:	5e                   	pop    esi
c001327c:	c3                   	ret    
c001327d:	8d 76 00             	lea    esi,[esi+0x0]

c0013280 <taskStartupFunction>:
c0013280:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013285:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013288:	c3                   	ret    
c0013289:	90                   	nop
c001328a:	66 90                	xchg   ax,ax

c001328c <Semaphore::Semaphore(int)>:
c001328c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013290:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013294:	89 10                	mov    DWORD PTR [eax],edx
c0013296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001329a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00132a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00132ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132b0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00132b7:	90                   	nop
c00132b8:	c3                   	ret    
c00132b9:	90                   	nop
c00132ba:	66 90                	xchg   ax,ax

c00132bc <Mutex::Mutex()>:
c00132bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132c0:	6a 01                	push   0x1
c00132c2:	50                   	push   eax
c00132c3:	e8 c4 ff ff ff       	call   c001328c <Semaphore::Semaphore(int)>
c00132c8:	83 c4 08             	add    esp,0x8
c00132cb:	90                   	nop
c00132cc:	c3                   	ret    
c00132cd:	90                   	nop
c00132ce:	66 90                	xchg   ax,ax

c00132d0 <Process::createThread(void (*)(void*), void*, int)>:
c00132d0:	57                   	push   edi
c00132d1:	31 c9                	xor    ecx,ecx
c00132d3:	56                   	push   esi
c00132d4:	53                   	push   ebx
c00132d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132d9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00132e0:	89 f2                	mov    edx,esi
c00132e2:	66 90                	xchg   ax,ax
c00132e4:	31 c0                	xor    eax,eax
c00132e6:	66 89 d0             	mov    ax,dx
c00132e9:	83 e2 01             	and    edx,0x1
c00132ec:	74 12                	je     c0013300 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00132ee:	d1 f8                	sar    eax,1
c00132f0:	41                   	inc    ecx
c00132f1:	89 c2                	mov    edx,eax
c00132f3:	83 f9 10             	cmp    ecx,0x10
c00132f6:	75 ec                	jne    c00132e4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00132f8:	31 db                	xor    ebx,ebx
c00132fa:	89 d8                	mov    eax,ebx
c00132fc:	5b                   	pop    ebx
c00132fd:	5e                   	pop    esi
c00132fe:	5f                   	pop    edi
c00132ff:	c3                   	ret    
c0013300:	b8 01 00 00 00       	mov    eax,0x1
c0013305:	d3 e0                	shl    eax,cl
c0013307:	09 c6                	or     esi,eax
c0013309:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001330c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0013313:	01 c0                	add    eax,eax
c0013315:	01 c8                	add    eax,ecx
c0013317:	8d 04 80             	lea    eax,[eax+eax*4]
c001331a:	01 d8                	add    eax,ebx
c001331c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0013323:	75 0b                	jne    c0013330 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013325:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001332f:	90                   	nop
c0013330:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013336:	83 ec 08             	sub    esp,0x8
c0013339:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001333c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001333f:	01 c0                	add    eax,eax
c0013341:	01 c8                	add    eax,ecx
c0013343:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013346:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013349:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001334f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013355:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013359:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001335f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013365:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c001336c:	89 ca                	mov    edx,ecx
c001336e:	f7 da                	neg    edx
c0013370:	c1 e2 15             	shl    edx,0x15
c0013373:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013379:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001337f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013383:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001338d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0013393:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013397:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001339d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00133a7:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00133b1:	53                   	push   ebx
c00133b2:	68 44 3b 02 c0       	push   0xc0023b44
c00133b7:	e8 30 91 00 00       	call   c001c4ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00133bc:	83 c4 10             	add    esp,0x10
c00133bf:	89 d8                	mov    eax,ebx
c00133c1:	5b                   	pop    ebx
c00133c2:	5e                   	pop    esi
c00133c3:	5f                   	pop    edi
c00133c4:	c3                   	ret    
c00133c5:	90                   	nop
c00133c6:	66 90                	xchg   ax,ax

c00133c8 <Process::createUserThread()>:
c00133c8:	83 ec 0c             	sub    esp,0xc
c00133cb:	68 80 00 00 00       	push   0x80
c00133d0:	6a 00                	push   0x0
c00133d2:	68 68 2d 01 c0       	push   0xc0012d68
c00133d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133db:	50                   	push   eax
c00133dc:	e8 ef fe ff ff       	call   c00132d0 <Process::createThread(void (*)(void*), void*, int)>
c00133e1:	83 c4 1c             	add    esp,0x1c
c00133e4:	c3                   	ret    
c00133e5:	8d 76 00             	lea    esi,[esi+0x0]

c00133e8 <setupMultitasking(void (*)())>:
c00133e8:	56                   	push   esi
c00133e9:	53                   	push   ebx
c00133ea:	53                   	push   ebx
c00133eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00133ef:	eb 13                	jmp    c0013404 <setupMultitasking(void (*)())+0x1c>
c00133f1:	8d 76 00             	lea    esi,[esi+0x0]
c00133f4:	83 ec 0c             	sub    esp,0xc
c00133f7:	68 44 3b 02 c0       	push   0xc0023b44
c00133fc:	e8 33 90 00 00       	call   c001c434 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013401:	83 c4 10             	add    esp,0x10
c0013404:	83 ec 0c             	sub    esp,0xc
c0013407:	68 44 3b 02 c0       	push   0xc0023b44
c001340c:	e8 ff 8f 00 00       	call   c001c410 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013411:	83 c4 10             	add    esp,0x10
c0013414:	84 c0                	test   al,al
c0013416:	74 dc                	je     c00133f4 <setupMultitasking(void (*)())+0xc>
c0013418:	83 ec 0c             	sub    esp,0xc
c001341b:	68 1f 07 00 00       	push   0x71f
c0013420:	e8 e0 43 ff ff       	call   c0007805 <malloc>
c0013425:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001342c:	89 c3                	mov    ebx,eax
c001342e:	6a 00                	push   0x0
c0013430:	68 78 e7 01 c0       	push   0xc001e778
c0013435:	6a 01                	push   0x1
c0013437:	50                   	push   eax
c0013438:	e8 87 fc ff ff       	call   c00130c4 <Process::Process(bool, char const*, Process*, char**)>
c001343d:	83 c4 14             	add    esp,0x14
c0013440:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013446:	89 1d 50 3b 02 c0    	mov    DWORD PTR ds:0xc0023b50,ebx
c001344c:	50                   	push   eax
c001344d:	e8 f1 4f ff ff       	call   c0008443 <setActiveTerminal(VgaText*)>
c0013452:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c001345a:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013464:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001346a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001346d:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013477:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001347d:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013483:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001348d:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0013497:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00134a1:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00134a7:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00134ad:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00134b7:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00134bd:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00134c7:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00134cd:	5a                   	pop    edx
c00134ce:	59                   	pop    ecx
c00134cf:	68 74 e7 01 c0       	push   0xc001e774
c00134d4:	50                   	push   eax
c00134d5:	e8 26 d1 fe ff       	call   c0000600 <strcpy>
c00134da:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00134e1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00134e5:	83 c4 14             	add    esp,0x14
c00134e8:	5b                   	pop    ebx
c00134e9:	5e                   	pop    esi
c00134ea:	e9 7a cd fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00134ef:	90                   	nop

c00134f0 <schedule()>:
c00134f0:	8b 15 24 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023b24
c00134f6:	85 d2                	test   edx,edx
c00134f8:	74 0e                	je     c0013508 <schedule()+0x18>
c00134fa:	c7 05 20 3b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023b20,0x1
c0013504:	c3                   	ret    
c0013505:	8d 76 00             	lea    esi,[esi+0x0]
c0013508:	53                   	push   ebx
c0013509:	83 ec 14             	sub    esp,0x14
c001350c:	68 44 3b 02 c0       	push   0xc0023b44
c0013511:	e8 fa 8e 00 00       	call   c001c410 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013516:	83 c4 10             	add    esp,0x10
c0013519:	84 c0                	test   al,al
c001351b:	75 3b                	jne    c0013558 <schedule()+0x68>
c001351d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013522:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013525:	4a                   	dec    edx
c0013526:	74 38                	je     c0013560 <schedule()+0x70>
c0013528:	83 ec 0c             	sub    esp,0xc
c001352b:	68 44 3b 02 c0       	push   0xc0023b44
c0013530:	e8 f7 8e 00 00       	call   c001c42c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013535:	c7 04 24 44 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b44
c001353c:	89 c3                	mov    ebx,eax
c001353e:	e8 f1 8e 00 00       	call   c001c434 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013543:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001354a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001354d:	e8 6e f8 ff ff       	call   c0012dc0 <switchToThread(ThreadControlBlock*)>
c0013552:	83 c4 10             	add    esp,0x10
c0013555:	8d 76 00             	lea    esi,[esi+0x0]
c0013558:	83 c4 08             	add    esp,0x8
c001355b:	5b                   	pop    ebx
c001355c:	c3                   	ret    
c001355d:	8d 76 00             	lea    esi,[esi+0x0]
c0013560:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013567:	83 ec 08             	sub    esp,0x8
c001356a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001356f:	50                   	push   eax
c0013570:	68 44 3b 02 c0       	push   0xc0023b44
c0013575:	e8 72 8f 00 00       	call   c001c4ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001357a:	83 c4 10             	add    esp,0x10
c001357d:	eb a9                	jmp    c0013528 <schedule()+0x38>
c001357f:	90                   	nop

c0013580 <Semaphore::tryAcquire()>:
c0013580:	53                   	push   ebx
c0013581:	83 ec 08             	sub    esp,0x8
c0013584:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013588:	fa                   	cli    
c0013589:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c001358e:	8d 50 01             	lea    edx,[eax+0x1]
c0013591:	89 15 28 3b 02 c0    	mov    DWORD PTR ds:0xc0023b28,edx
c0013597:	8b 15 24 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023b24
c001359d:	8d 5a 01             	lea    ebx,[edx+0x1]
c00135a0:	89 1d 24 3b 02 c0    	mov    DWORD PTR ds:0xc0023b24,ebx
c00135a6:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00135a9:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00135ab:	7c 33                	jl     c00135e0 <Semaphore::tryAcquire()+0x60>
c00135ad:	89 15 24 3b 02 c0    	mov    DWORD PTR ds:0xc0023b24,edx
c00135b3:	85 d2                	test   edx,edx
c00135b5:	75 0d                	jne    c00135c4 <Semaphore::tryAcquire()+0x44>
c00135b7:	8b 15 20 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023b20
c00135bd:	85 d2                	test   edx,edx
c00135bf:	75 6b                	jne    c001362c <Semaphore::tryAcquire()+0xac>
c00135c1:	8d 76 00             	lea    esi,[esi+0x0]
c00135c4:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c00135c9:	85 c0                	test   eax,eax
c00135cb:	74 0b                	je     c00135d8 <Semaphore::tryAcquire()+0x58>
c00135cd:	8d 76 00             	lea    esi,[esi+0x0]
c00135d0:	31 c0                	xor    eax,eax
c00135d2:	83 c4 08             	add    esp,0x8
c00135d5:	5b                   	pop    ebx
c00135d6:	c3                   	ret    
c00135d7:	90                   	nop
c00135d8:	fb                   	sti    
c00135d9:	83 c4 08             	add    esp,0x8
c00135dc:	5b                   	pop    ebx
c00135dd:	c3                   	ret    
c00135de:	66 90                	xchg   ax,ax
c00135e0:	43                   	inc    ebx
c00135e1:	89 15 24 3b 02 c0    	mov    DWORD PTR ds:0xc0023b24,edx
c00135e7:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00135ea:	85 d2                	test   edx,edx
c00135ec:	75 22                	jne    c0013610 <Semaphore::tryAcquire()+0x90>
c00135ee:	8b 0d 20 3b 02 c0    	mov    ecx,DWORD PTR ds:0xc0023b20
c00135f4:	85 c9                	test   ecx,ecx
c00135f6:	74 18                	je     c0013610 <Semaphore::tryAcquire()+0x90>
c00135f8:	c7 05 20 3b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023b20,0x0
c0013602:	e8 e9 fe ff ff       	call   c00134f0 <schedule()>
c0013607:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c001360c:	48                   	dec    eax
c001360d:	8d 76 00             	lea    esi,[esi+0x0]
c0013610:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0013615:	85 c0                	test   eax,eax
c0013617:	75 0b                	jne    c0013624 <Semaphore::tryAcquire()+0xa4>
c0013619:	fb                   	sti    
c001361a:	b0 01                	mov    al,0x1
c001361c:	83 c4 08             	add    esp,0x8
c001361f:	5b                   	pop    ebx
c0013620:	c3                   	ret    
c0013621:	8d 76 00             	lea    esi,[esi+0x0]
c0013624:	b0 01                	mov    al,0x1
c0013626:	83 c4 08             	add    esp,0x8
c0013629:	5b                   	pop    ebx
c001362a:	c3                   	ret    
c001362b:	90                   	nop
c001362c:	c7 05 20 3b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023b20,0x0
c0013636:	e8 b5 fe ff ff       	call   c00134f0 <schedule()>
c001363b:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0013640:	48                   	dec    eax
c0013641:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0013646:	85 c0                	test   eax,eax
c0013648:	75 86                	jne    c00135d0 <Semaphore::tryAcquire()+0x50>
c001364a:	eb 8c                	jmp    c00135d8 <Semaphore::tryAcquire()+0x58>

c001364c <Semaphore::assertLocked(char const*)>:
c001364c:	83 ec 0c             	sub    esp,0xc
c001364f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013653:	fa                   	cli    
c0013654:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c001365a:	a1 24 3b 02 c0       	mov    eax,ds:0xc0023b24
c001365f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013662:	89 0d 24 3b 02 c0    	mov    DWORD PTR ds:0xc0023b24,ecx
c0013668:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001366a:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001366d:	7c 29                	jl     c0013698 <Semaphore::assertLocked(char const*)+0x4c>
c001366f:	90                   	nop
c0013670:	a3 24 3b 02 c0       	mov    ds:0xc0023b24,eax
c0013675:	85 c0                	test   eax,eax
c0013677:	75 0b                	jne    c0013684 <Semaphore::assertLocked(char const*)+0x38>
c0013679:	a1 20 3b 02 c0       	mov    eax,ds:0xc0023b20
c001367e:	85 c0                	test   eax,eax
c0013680:	75 2e                	jne    c00136b0 <Semaphore::assertLocked(char const*)+0x64>
c0013682:	66 90                	xchg   ax,ax
c0013684:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0013689:	48                   	dec    eax
c001368a:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c001368f:	75 03                	jne    c0013694 <Semaphore::assertLocked(char const*)+0x48>
c0013691:	fb                   	sti    
c0013692:	66 90                	xchg   ax,ax
c0013694:	83 c4 0c             	add    esp,0xc
c0013697:	c3                   	ret    
c0013698:	83 ec 0c             	sub    esp,0xc
c001369b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001369f:	52                   	push   edx
c00136a0:	e8 5e ca ff ff       	call   c0010103 <KePanic(char const*)>
c00136a5:	a1 24 3b 02 c0       	mov    eax,ds:0xc0023b24
c00136aa:	83 c4 10             	add    esp,0x10
c00136ad:	48                   	dec    eax
c00136ae:	eb c0                	jmp    c0013670 <Semaphore::assertLocked(char const*)+0x24>
c00136b0:	c7 05 20 3b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023b20,0x0
c00136ba:	e8 31 fe ff ff       	call   c00134f0 <schedule()>
c00136bf:	eb c3                	jmp    c0013684 <Semaphore::assertLocked(char const*)+0x38>
c00136c1:	8d 76 00             	lea    esi,[esi+0x0]

c00136c4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00136c4:	83 ec 0c             	sub    esp,0xc
c00136c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136d0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00136d3:	e8 18 fe ff ff       	call   c00134f0 <schedule()>
c00136d8:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c00136dd:	48                   	dec    eax
c00136de:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c00136e3:	75 03                	jne    c00136e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00136e5:	fb                   	sti    
c00136e6:	66 90                	xchg   ax,ax
c00136e8:	83 c4 0c             	add    esp,0xc
c00136eb:	c3                   	ret    

c00136ec <blockTask(TaskState)>:
c00136ec:	83 ec 0c             	sub    esp,0xc
c00136ef:	fa                   	cli    
c00136f0:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c00136f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136ff:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013702:	e8 e9 fd ff ff       	call   c00134f0 <schedule()>
c0013707:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c001370c:	48                   	dec    eax
c001370d:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0013712:	75 04                	jne    c0013718 <blockTask(TaskState)+0x2c>
c0013714:	fb                   	sti    
c0013715:	8d 76 00             	lea    esi,[esi+0x0]
c0013718:	83 c4 0c             	add    esp,0xc
c001371b:	c3                   	ret    

c001371c <waitTask(int, int*, int)>:
c001371c:	83 ec 18             	sub    esp,0x18
c001371f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013724:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013728:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001372b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001372f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013734:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013737:	6a 07                	push   0x7
c0013739:	e8 ae ff ff ff       	call   c00136ec <blockTask(TaskState)>
c001373e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013743:	83 c4 10             	add    esp,0x10
c0013746:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013749:	85 d2                	test   edx,edx
c001374b:	74 0b                	je     c0013758 <waitTask(int, int*, int)+0x3c>
c001374d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013750:	89 02                	mov    DWORD PTR [edx],eax
c0013752:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013757:	90                   	nop
c0013758:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001375b:	83 c4 0c             	add    esp,0xc
c001375e:	c3                   	ret    
c001375f:	90                   	nop

c0013760 <milliTenthSleepUntil(unsigned int)>:
c0013760:	83 ec 0c             	sub    esp,0xc
c0013763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013767:	39 05 4c 2c 02 c0    	cmp    DWORD PTR ds:0xc0022c4c,eax
c001376d:	76 05                	jbe    c0013774 <milliTenthSleepUntil(unsigned int)+0x14>
c001376f:	90                   	nop
c0013770:	83 c4 0c             	add    esp,0xc
c0013773:	c3                   	ret    
c0013774:	fa                   	cli    
c0013775:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c001377b:	83 ec 08             	sub    esp,0x8
c001377e:	ff 05 24 3b 02 c0    	inc    DWORD PTR ds:0xc0023b24
c0013784:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001378a:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001378d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013793:	52                   	push   edx
c0013794:	68 38 3b 02 c0       	push   0xc0023b38
c0013799:	e8 4e 8d 00 00       	call   c001c4ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001379e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00137a5:	e8 42 ff ff ff       	call   c00136ec <blockTask(TaskState)>
c00137aa:	a1 24 3b 02 c0       	mov    eax,ds:0xc0023b24
c00137af:	83 c4 10             	add    esp,0x10
c00137b2:	48                   	dec    eax
c00137b3:	a3 24 3b 02 c0       	mov    ds:0xc0023b24,eax
c00137b8:	85 c0                	test   eax,eax
c00137ba:	75 0c                	jne    c00137c8 <milliTenthSleepUntil(unsigned int)+0x68>
c00137bc:	a1 20 3b 02 c0       	mov    eax,ds:0xc0023b20
c00137c1:	85 c0                	test   eax,eax
c00137c3:	75 17                	jne    c00137dc <milliTenthSleepUntil(unsigned int)+0x7c>
c00137c5:	8d 76 00             	lea    esi,[esi+0x0]
c00137c8:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c00137cd:	48                   	dec    eax
c00137ce:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c00137d3:	75 9b                	jne    c0013770 <milliTenthSleepUntil(unsigned int)+0x10>
c00137d5:	fb                   	sti    
c00137d6:	83 c4 0c             	add    esp,0xc
c00137d9:	c3                   	ret    
c00137da:	66 90                	xchg   ax,ax
c00137dc:	c7 05 20 3b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023b20,0x0
c00137e6:	e8 05 fd ff ff       	call   c00134f0 <schedule()>
c00137eb:	eb db                	jmp    c00137c8 <milliTenthSleepUntil(unsigned int)+0x68>
c00137ed:	8d 76 00             	lea    esi,[esi+0x0]

c00137f0 <milliTenthSleep(unsigned int)>:
c00137f0:	a1 4c 2c 02 c0       	mov    eax,ds:0xc0022c4c
c00137f5:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00137f9:	e9 62 ff ff ff       	jmp    c0013760 <milliTenthSleepUntil(unsigned int)>
c00137fe:	66 90                	xchg   ax,ax

c0013800 <sleep(unsigned int)>:
c0013800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013804:	8d 04 80             	lea    eax,[eax+eax*4]
c0013807:	8d 04 80             	lea    eax,[eax+eax*4]
c001380a:	8d 04 80             	lea    eax,[eax+eax*4]
c001380d:	8d 04 80             	lea    eax,[eax+eax*4]
c0013810:	c1 e0 04             	shl    eax,0x4
c0013813:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013817:	eb d7                	jmp    c00137f0 <milliTenthSleep(unsigned int)>
c0013819:	90                   	nop
c001381a:	66 90                	xchg   ax,ax

c001381c <Semaphore::acquire()>:
c001381c:	83 ec 0c             	sub    esp,0xc
c001381f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013823:	fa                   	cli    
c0013824:	a1 24 3b 02 c0       	mov    eax,ds:0xc0023b24
c0013829:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c001382f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013832:	89 0d 24 3b 02 c0    	mov    DWORD PTR ds:0xc0023b24,ecx
c0013838:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001383b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001383d:	7d 2d                	jge    c001386c <Semaphore::acquire()+0x50>
c001383f:	41                   	inc    ecx
c0013840:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013843:	90                   	nop
c0013844:	a3 24 3b 02 c0       	mov    ds:0xc0023b24,eax
c0013849:	85 c0                	test   eax,eax
c001384b:	75 0b                	jne    c0013858 <Semaphore::acquire()+0x3c>
c001384d:	a1 20 3b 02 c0       	mov    eax,ds:0xc0023b20
c0013852:	85 c0                	test   eax,eax
c0013854:	75 62                	jne    c00138b8 <Semaphore::acquire()+0x9c>
c0013856:	66 90                	xchg   ax,ax
c0013858:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c001385d:	48                   	dec    eax
c001385e:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0013863:	75 03                	jne    c0013868 <Semaphore::acquire()+0x4c>
c0013865:	fb                   	sti    
c0013866:	66 90                	xchg   ax,ax
c0013868:	83 c4 0c             	add    esp,0xc
c001386b:	c3                   	ret    
c001386c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013871:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013878:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001387b:	85 c9                	test   ecx,ecx
c001387d:	74 4d                	je     c00138cc <Semaphore::acquire()+0xb0>
c001387f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013882:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013888:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001388b:	90                   	nop
c001388c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013891:	83 ec 0c             	sub    esp,0xc
c0013894:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013897:	68 f4 e7 01 c0       	push   0xc001e7f4
c001389c:	e8 ff 6b ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c00138a1:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00138a8:	e8 3f fe ff ff       	call   c00136ec <blockTask(TaskState)>
c00138ad:	a1 24 3b 02 c0       	mov    eax,ds:0xc0023b24
c00138b2:	83 c4 10             	add    esp,0x10
c00138b5:	48                   	dec    eax
c00138b6:	eb 8c                	jmp    c0013844 <Semaphore::acquire()+0x28>
c00138b8:	c7 05 20 3b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023b20,0x0
c00138c2:	e8 29 fc ff ff       	call   c00134f0 <schedule()>
c00138c7:	eb 8f                	jmp    c0013858 <Semaphore::acquire()+0x3c>
c00138c9:	8d 76 00             	lea    esi,[esi+0x0]
c00138cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138d1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00138d4:	eb b6                	jmp    c001388c <Semaphore::acquire()+0x70>
c00138d6:	66 90                	xchg   ax,ax

c00138d8 <taskReturned>:
c00138d8:	83 ec 18             	sub    esp,0x18
c00138db:	68 14 e8 01 c0       	push   0xc001e814
c00138e0:	e8 1e c8 ff ff       	call   c0010103 <KePanic(char const*)>
c00138e5:	83 c4 10             	add    esp,0x10
c00138e8:	83 ec 0c             	sub    esp,0xc
c00138eb:	6a 02                	push   0x2
c00138ed:	e8 fa fd ff ff       	call   c00136ec <blockTask(TaskState)>
c00138f2:	fa                   	cli    
c00138f3:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c00138f9:	e8 f2 fb ff ff       	call   c00134f0 <schedule()>
c00138fe:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0013903:	83 c4 10             	add    esp,0x10
c0013906:	48                   	dec    eax
c0013907:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c001390c:	85 c0                	test   eax,eax
c001390e:	75 d8                	jne    c00138e8 <taskReturned+0x10>
c0013910:	fb                   	sti    
c0013911:	eb d5                	jmp    c00138e8 <taskReturned+0x10>
c0013913:	90                   	nop

c0013914 <Thr::processFromPID(int)>:
c0013914:	57                   	push   edi
c0013915:	56                   	push   esi
c0013916:	53                   	push   ebx
c0013917:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001391b:	fa                   	cli    
c001391c:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c0013922:	83 ec 0c             	sub    esp,0xc
c0013925:	68 44 3b 02 c0       	push   0xc0023b44
c001392a:	e8 fd 8a 00 00       	call   c001c42c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001392f:	83 c4 10             	add    esp,0x10
c0013932:	89 c7                	mov    edi,eax
c0013934:	eb 16                	jmp    c001394c <Thr::processFromPID(int)+0x38>
c0013936:	66 90                	xchg   ax,ax
c0013938:	83 ec 0c             	sub    esp,0xc
c001393b:	68 44 3b 02 c0       	push   0xc0023b44
c0013940:	e8 e7 8a 00 00       	call   c001c42c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013945:	83 c4 10             	add    esp,0x10
c0013948:	39 f8                	cmp    eax,edi
c001394a:	74 4c                	je     c0013998 <Thr::processFromPID(int)+0x84>
c001394c:	83 ec 0c             	sub    esp,0xc
c001394f:	68 44 3b 02 c0       	push   0xc0023b44
c0013954:	e8 d3 8a 00 00       	call   c001c42c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013959:	c7 04 24 44 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b44
c0013960:	89 c3                	mov    ebx,eax
c0013962:	e8 cd 8a 00 00       	call   c001c434 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013967:	58                   	pop    eax
c0013968:	5a                   	pop    edx
c0013969:	53                   	push   ebx
c001396a:	68 44 3b 02 c0       	push   0xc0023b44
c001396f:	e8 78 8b 00 00       	call   c001c4ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013974:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013977:	83 c4 10             	add    esp,0x10
c001397a:	39 30                	cmp    DWORD PTR [eax],esi
c001397c:	75 ba                	jne    c0013938 <Thr::processFromPID(int)+0x24>
c001397e:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0013983:	48                   	dec    eax
c0013984:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0013989:	74 09                	je     c0013994 <Thr::processFromPID(int)+0x80>
c001398b:	90                   	nop
c001398c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001398f:	5b                   	pop    ebx
c0013990:	5e                   	pop    esi
c0013991:	5f                   	pop    edi
c0013992:	c3                   	ret    
c0013993:	90                   	nop
c0013994:	fb                   	sti    
c0013995:	eb f5                	jmp    c001398c <Thr::processFromPID(int)+0x78>
c0013997:	90                   	nop
c0013998:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c001399d:	48                   	dec    eax
c001399e:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c00139a3:	75 07                	jne    c00139ac <Thr::processFromPID(int)+0x98>
c00139a5:	fb                   	sti    
c00139a6:	5b                   	pop    ebx
c00139a7:	5e                   	pop    esi
c00139a8:	5f                   	pop    edi
c00139a9:	c3                   	ret    
c00139aa:	66 90                	xchg   ax,ax
c00139ac:	5b                   	pop    ebx
c00139ad:	31 c0                	xor    eax,eax
c00139af:	5e                   	pop    esi
c00139b0:	5f                   	pop    edi
c00139b1:	c3                   	ret    
c00139b2:	66 90                	xchg   ax,ax

c00139b4 <unblockTask(ThreadControlBlock*)>:
c00139b4:	53                   	push   ebx
c00139b5:	83 ec 08             	sub    esp,0x8
c00139b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00139bc:	fa                   	cli    
c00139bd:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c00139c3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00139c6:	85 c0                	test   eax,eax
c00139c8:	74 66                	je     c0013a30 <unblockTask(ThreadControlBlock*)+0x7c>
c00139ca:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00139cd:	48                   	dec    eax
c00139ce:	74 38                	je     c0013a08 <unblockTask(ThreadControlBlock*)+0x54>
c00139d0:	83 ec 0c             	sub    esp,0xc
c00139d3:	68 44 3b 02 c0       	push   0xc0023b44
c00139d8:	e8 4f 8a 00 00       	call   c001c42c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00139dd:	83 c4 10             	add    esp,0x10
c00139e0:	85 c0                	test   eax,eax
c00139e2:	75 1c                	jne    c0013a00 <unblockTask(ThreadControlBlock*)+0x4c>
c00139e4:	eb 5e                	jmp    c0013a44 <unblockTask(ThreadControlBlock*)+0x90>
c00139e6:	66 90                	xchg   ax,ax
c00139e8:	83 ec 08             	sub    esp,0x8
c00139eb:	50                   	push   eax
c00139ec:	68 44 3b 02 c0       	push   0xc0023b44
c00139f1:	e8 e6 8d 00 00       	call   c001c7dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00139f6:	83 c4 10             	add    esp,0x10
c00139f9:	85 c0                	test   eax,eax
c00139fb:	74 47                	je     c0013a44 <unblockTask(ThreadControlBlock*)+0x90>
c00139fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013a00:	39 c3                	cmp    ebx,eax
c0013a02:	75 e4                	jne    c00139e8 <unblockTask(ThreadControlBlock*)+0x34>
c0013a04:	eb 12                	jmp    c0013a18 <unblockTask(ThreadControlBlock*)+0x64>
c0013a06:	66 90                	xchg   ax,ax
c0013a08:	83 ec 0c             	sub    esp,0xc
c0013a0b:	68 96 e7 01 c0       	push   0xc001e796
c0013a10:	e8 8b 6a ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0013a15:	83 c4 10             	add    esp,0x10
c0013a18:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0013a1d:	48                   	dec    eax
c0013a1e:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0013a23:	75 03                	jne    c0013a28 <unblockTask(ThreadControlBlock*)+0x74>
c0013a25:	fb                   	sti    
c0013a26:	66 90                	xchg   ax,ax
c0013a28:	83 c4 08             	add    esp,0x8
c0013a2b:	5b                   	pop    ebx
c0013a2c:	c3                   	ret    
c0013a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a30:	83 ec 0c             	sub    esp,0xc
c0013a33:	68 7f e7 01 c0       	push   0xc001e77f
c0013a38:	e8 63 6a ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0013a3d:	83 c4 10             	add    esp,0x10
c0013a40:	eb d6                	jmp    c0013a18 <unblockTask(ThreadControlBlock*)+0x64>
c0013a42:	66 90                	xchg   ax,ax
c0013a44:	83 ec 08             	sub    esp,0x8
c0013a47:	53                   	push   ebx
c0013a48:	68 44 3b 02 c0       	push   0xc0023b44
c0013a4d:	e8 9a 8a 00 00       	call   c001c4ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013a52:	83 c4 10             	add    esp,0x10
c0013a55:	eb c1                	jmp    c0013a18 <unblockTask(ThreadControlBlock*)+0x64>
c0013a57:	90                   	nop

c0013a58 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013a58:	55                   	push   ebp
c0013a59:	57                   	push   edi
c0013a5a:	56                   	push   esi
c0013a5b:	53                   	push   ebx
c0013a5c:	83 ec 1c             	sub    esp,0x1c
c0013a5f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013a63:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a66:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013a6c:	85 ed                	test   ebp,ebp
c0013a6e:	7e 24                	jle    c0013a94 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013a70:	31 f6                	xor    esi,esi
c0013a72:	66 90                	xchg   ax,ax
c0013a74:	83 ec 0c             	sub    esp,0xc
c0013a77:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013a7e:	46                   	inc    esi
c0013a7f:	57                   	push   edi
c0013a80:	e8 90 3d ff ff       	call   c0007815 <free>
c0013a85:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a88:	83 c4 10             	add    esp,0x10
c0013a8b:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013a91:	7f e1                	jg     c0013a74 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013a93:	90                   	nop
c0013a94:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013a9e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013aa3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013aa6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013aa9:	d3 c0                	rol    eax,cl
c0013aab:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013ab2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ab5:	89 f7                	mov    edi,esi
c0013ab7:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013abf:	0f 85 77 01 00 00    	jne    c0013c3c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013ac5:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013acb:	85 ed                	test   ebp,ebp
c0013acd:	74 1d                	je     c0013aec <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013acf:	83 ec 0c             	sub    esp,0xc
c0013ad2:	55                   	push   ebp
c0013ad3:	e8 3c c3 ff ff       	call   c000fe14 <EnvVarContainer::~EnvVarContainer()>
c0013ad8:	59                   	pop    ecx
c0013ad9:	5e                   	pop    esi
c0013ada:	6a 0c                	push   0xc
c0013adc:	55                   	push   ebp
c0013add:	e8 c8 68 ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c0013ae2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ae5:	83 c4 10             	add    esp,0x10
c0013ae8:	89 f7                	mov    edi,esi
c0013aea:	66 90                	xchg   ax,ax
c0013aec:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013af2:	85 c0                	test   eax,eax
c0013af4:	0f 84 b6 00 00 00    	je     c0013bb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013afa:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013afd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013b01:	31 c9                	xor    ecx,ecx
c0013b03:	eb 17                	jmp    c0013b1c <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013b05:	8d 76 00             	lea    esi,[esi+0x0]
c0013b08:	41                   	inc    ecx
c0013b09:	83 f9 10             	cmp    ecx,0x10
c0013b0c:	0f 84 9e 00 00 00    	je     c0013bb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013b12:	66 90                	xchg   ax,ax
c0013b14:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013b1a:	66 90                	xchg   ax,ax
c0013b1c:	31 d2                	xor    edx,edx
c0013b1e:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013b25:	d3 fa                	sar    edx,cl
c0013b27:	83 e2 01             	and    edx,0x1
c0013b2a:	74 dc                	je     c0013b08 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013b2c:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013b2f:	01 d2                	add    edx,edx
c0013b31:	01 ca                	add    edx,ecx
c0013b33:	8d 14 92             	lea    edx,[edx+edx*4]
c0013b36:	01 d0                	add    eax,edx
c0013b38:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013b3e:	83 fd 07             	cmp    ebp,0x7
c0013b41:	75 c5                	jne    c0013b08 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013b43:	05 40 02 00 00       	add    eax,0x240
c0013b48:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013b4b:	83 fd ff             	cmp    ebp,0xffffffff
c0013b4e:	0f 8c f0 00 00 00    	jl     c0013c44 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013b54:	0f 84 ae 01 00 00    	je     c0013d08 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013b5a:	85 ed                	test   ebp,ebp
c0013b5c:	0f 84 92 01 00 00    	je     c0013cf4 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013b62:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013b64:	75 a2                	jne    c0013b08 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013b66:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013b6c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b70:	01 d0                	add    eax,edx
c0013b72:	66 90                	xchg   ax,ax
c0013b74:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013b78:	83 ec 0c             	sub    esp,0xc
c0013b7b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013b81:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013b84:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013b8a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013b91:	50                   	push   eax
c0013b92:	e8 1d fe ff ff       	call   c00139b4 <unblockTask(ThreadControlBlock*)>
c0013b97:	83 c4 10             	add    esp,0x10
c0013b9a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013b9d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013ba1:	89 f7                	mov    edi,esi
c0013ba3:	41                   	inc    ecx
c0013ba4:	83 f9 10             	cmp    ecx,0x10
c0013ba7:	0f 85 67 ff ff ff    	jne    c0013b14 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013bad:	8d 76 00             	lea    esi,[esi+0x0]
c0013bb0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013bb6:	85 c0                	test   eax,eax
c0013bb8:	74 62                	je     c0013c1c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013bba:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013bc0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013bc6:	74 54                	je     c0013c1c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013bc8:	83 ec 0c             	sub    esp,0xc
c0013bcb:	68 44 3b 02 c0       	push   0xc0023b44
c0013bd0:	e8 57 88 00 00       	call   c001c42c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013bd5:	c7 04 24 44 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b44
c0013bdc:	89 c7                	mov    edi,eax
c0013bde:	e8 2d 88 00 00       	call   c001c410 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013be3:	83 c4 10             	add    esp,0x10
c0013be6:	84 c0                	test   al,al
c0013be8:	0f 84 ce 00 00 00    	je     c0013cbc <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013bee:	66 90                	xchg   ax,ax
c0013bf0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013bf3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013bf9:	85 d2                	test   edx,edx
c0013bfb:	74 0f                	je     c0013c0c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013bfd:	83 ec 0c             	sub    esp,0xc
c0013c00:	8b 02                	mov    eax,DWORD PTR [edx]
c0013c02:	52                   	push   edx
c0013c03:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c06:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c09:	83 c4 10             	add    esp,0x10
c0013c0c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013c16:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013c19:	8d 76 00             	lea    esi,[esi+0x0]
c0013c1c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013c22:	85 db                	test   ebx,ebx
c0013c24:	74 16                	je     c0013c3c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013c26:	83 ec 0c             	sub    esp,0xc
c0013c29:	53                   	push   ebx
c0013c2a:	e8 4f 5b ff ff       	call   c000977e <VAS::~VAS()>
c0013c2f:	58                   	pop    eax
c0013c30:	5a                   	pop    edx
c0013c31:	6a 14                	push   0x14
c0013c33:	53                   	push   ebx
c0013c34:	e8 71 67 ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c0013c39:	83 c4 10             	add    esp,0x10
c0013c3c:	83 c4 1c             	add    esp,0x1c
c0013c3f:	5b                   	pop    ebx
c0013c40:	5e                   	pop    esi
c0013c41:	5f                   	pop    edi
c0013c42:	5d                   	pop    ebp
c0013c43:	c3                   	ret    
c0013c44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013c48:	83 ec 0c             	sub    esp,0xc
c0013c4b:	68 48 e8 01 c0       	push   0xc001e848
c0013c50:	e8 ae c4 ff ff       	call   c0010103 <KePanic(char const*)>
c0013c55:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013c58:	83 c4 10             	add    esp,0x10
c0013c5b:	89 f7                	mov    edi,esi
c0013c5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c61:	e9 a2 fe ff ff       	jmp    c0013b08 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013c66:	66 90                	xchg   ax,ax
c0013c68:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013c6e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013c74:	75 1e                	jne    c0013c94 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013c76:	83 ec 0c             	sub    esp,0xc
c0013c79:	68 b0 e8 01 c0       	push   0xc001e8b0
c0013c7e:	e8 1d 68 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0013c83:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013c8a:	e8 5d fa ff ff       	call   c00136ec <blockTask(TaskState)>
c0013c8f:	83 c4 10             	add    esp,0x10
c0013c92:	66 90                	xchg   ax,ax
c0013c94:	83 ec 08             	sub    esp,0x8
c0013c97:	56                   	push   esi
c0013c98:	68 44 3b 02 c0       	push   0xc0023b44
c0013c9d:	e8 4a 88 00 00       	call   c001c4ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013ca2:	c7 04 24 44 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b44
c0013ca9:	e8 7e 87 00 00       	call   c001c42c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013cae:	83 c4 10             	add    esp,0x10
c0013cb1:	39 f8                	cmp    eax,edi
c0013cb3:	0f 84 37 ff ff ff    	je     c0013bf0 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0013cbc:	83 ec 0c             	sub    esp,0xc
c0013cbf:	68 44 3b 02 c0       	push   0xc0023b44
c0013cc4:	e8 63 87 00 00       	call   c001c42c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013cc9:	c7 04 24 44 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b44
c0013cd0:	89 c6                	mov    esi,eax
c0013cd2:	e8 5d 87 00 00       	call   c001c434 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013cd7:	83 c4 10             	add    esp,0x10
c0013cda:	39 f3                	cmp    ebx,esi
c0013cdc:	74 b6                	je     c0013c94 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013cde:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013ce1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ce4:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013cea:	75 a8                	jne    c0013c94 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013cec:	e9 77 ff ff ff       	jmp    c0013c68 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0013cf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013cf8:	83 ec 0c             	sub    esp,0xc
c0013cfb:	68 7c e8 01 c0       	push   0xc001e87c
c0013d00:	e9 4b ff ff ff       	jmp    c0013c50 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013d05:	8d 76 00             	lea    esi,[esi+0x0]
c0013d08:	8b 36                	mov    esi,DWORD PTR [esi]
c0013d0a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013d0e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013d11:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d14:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013d1a:	01 d7                	add    edi,edx
c0013d1c:	89 f8                	mov    eax,edi
c0013d1e:	e9 51 fe ff ff       	jmp    c0013b74 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013d23:	90                   	nop

c0013d24 <cleanerTaskFunction(void*)>:
c0013d24:	53                   	push   ebx
c0013d25:	83 ec 08             	sub    esp,0x8
c0013d28:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0013d2d:	48                   	dec    eax
c0013d2e:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0013d33:	75 03                	jne    c0013d38 <cleanerTaskFunction(void*)+0x14>
c0013d35:	fb                   	sti    
c0013d36:	66 90                	xchg   ax,ax
c0013d38:	fa                   	cli    
c0013d39:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0013d3e:	80 3d 0c 3b 02 c0 00 	cmp    BYTE PTR ds:0xc0023b0c,0x0
c0013d45:	8d 50 01             	lea    edx,[eax+0x1]
c0013d48:	89 15 28 3b 02 c0    	mov    DWORD PTR ds:0xc0023b28,edx
c0013d4e:	0f 84 ac 00 00 00    	je     c0013e00 <cleanerTaskFunction(void*)+0xdc>
c0013d54:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0013d59:	85 c0                	test   eax,eax
c0013d5b:	75 03                	jne    c0013d60 <cleanerTaskFunction(void*)+0x3c>
c0013d5d:	fb                   	sti    
c0013d5e:	66 90                	xchg   ax,ax
c0013d60:	c6 05 0c 3b 02 c0 00 	mov    BYTE PTR ds:0xc0023b0c,0x0
c0013d67:	fa                   	cli    
c0013d68:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c0013d6e:	ff 05 24 3b 02 c0    	inc    DWORD PTR ds:0xc0023b24
c0013d74:	fa                   	cli    
c0013d75:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c0013d7b:	eb 2b                	jmp    c0013da8 <cleanerTaskFunction(void*)+0x84>
c0013d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0013d80:	83 ec 0c             	sub    esp,0xc
c0013d83:	68 2c 3b 02 c0       	push   0xc0023b2c
c0013d88:	e8 9f 86 00 00       	call   c001c42c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d8d:	c7 04 24 2c 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b2c
c0013d94:	89 c3                	mov    ebx,eax
c0013d96:	e8 99 86 00 00       	call   c001c434 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013d9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d9e:	e8 b5 fc ff ff       	call   c0013a58 <cleanupTerminatedTask(ThreadControlBlock*)>
c0013da3:	83 c4 10             	add    esp,0x10
c0013da6:	66 90                	xchg   ax,ax
c0013da8:	83 ec 0c             	sub    esp,0xc
c0013dab:	68 2c 3b 02 c0       	push   0xc0023b2c
c0013db0:	e8 5b 86 00 00       	call   c001c410 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013db5:	83 c4 10             	add    esp,0x10
c0013db8:	84 c0                	test   al,al
c0013dba:	74 c4                	je     c0013d80 <cleanerTaskFunction(void*)+0x5c>
c0013dbc:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0013dc1:	48                   	dec    eax
c0013dc2:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0013dc7:	75 03                	jne    c0013dcc <cleanerTaskFunction(void*)+0xa8>
c0013dc9:	fb                   	sti    
c0013dca:	66 90                	xchg   ax,ax
c0013dcc:	a1 24 3b 02 c0       	mov    eax,ds:0xc0023b24
c0013dd1:	48                   	dec    eax
c0013dd2:	a3 24 3b 02 c0       	mov    ds:0xc0023b24,eax
c0013dd7:	0f 85 4b ff ff ff    	jne    c0013d28 <cleanerTaskFunction(void*)+0x4>
c0013ddd:	a1 20 3b 02 c0       	mov    eax,ds:0xc0023b20
c0013de2:	85 c0                	test   eax,eax
c0013de4:	0f 84 3e ff ff ff    	je     c0013d28 <cleanerTaskFunction(void*)+0x4>
c0013dea:	c7 05 20 3b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023b20,0x0
c0013df4:	e8 f7 f6 ff ff       	call   c00134f0 <schedule()>
c0013df9:	e9 2a ff ff ff       	jmp    c0013d28 <cleanerTaskFunction(void*)+0x4>
c0013dfe:	66 90                	xchg   ax,ax
c0013e00:	83 ec 0c             	sub    esp,0xc
c0013e03:	6a 02                	push   0x2
c0013e05:	e8 ba f8 ff ff       	call   c00136c4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013e0a:	83 c4 10             	add    esp,0x10
c0013e0d:	e9 4e ff ff ff       	jmp    c0013d60 <cleanerTaskFunction(void*)+0x3c>
c0013e12:	66 90                	xchg   ax,ax

c0013e14 <terminateTask(int)>:
c0013e14:	83 ec 14             	sub    esp,0x14
c0013e17:	fa                   	cli    
c0013e18:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c0013e1e:	ff 05 24 3b 02 c0    	inc    DWORD PTR ds:0xc0023b24
c0013e24:	fa                   	cli    
c0013e25:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c0013e2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e34:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0013e37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e3c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0013e3f:	50                   	push   eax
c0013e40:	68 2c 3b 02 c0       	push   0xc0023b2c
c0013e45:	e8 a2 86 00 00       	call   c001c4ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013e4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e4f:	83 c4 10             	add    esp,0x10
c0013e52:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0013e59:	a1 08 3b 02 c0       	mov    eax,ds:0xc0023b08
c0013e5e:	85 c0                	test   eax,eax
c0013e60:	74 5e                	je     c0013ec0 <terminateTask(int)+0xac>
c0013e62:	83 ec 0c             	sub    esp,0xc
c0013e65:	c6 05 0c 3b 02 c0 01 	mov    BYTE PTR ds:0xc0023b0c,0x1
c0013e6c:	50                   	push   eax
c0013e6d:	e8 42 fb ff ff       	call   c00139b4 <unblockTask(ThreadControlBlock*)>
c0013e72:	83 c4 10             	add    esp,0x10
c0013e75:	8d 76 00             	lea    esi,[esi+0x0]
c0013e78:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0013e7d:	48                   	dec    eax
c0013e7e:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0013e83:	75 03                	jne    c0013e88 <terminateTask(int)+0x74>
c0013e85:	fb                   	sti    
c0013e86:	66 90                	xchg   ax,ax
c0013e88:	a1 24 3b 02 c0       	mov    eax,ds:0xc0023b24
c0013e8d:	48                   	dec    eax
c0013e8e:	a3 24 3b 02 c0       	mov    ds:0xc0023b24,eax
c0013e93:	75 0b                	jne    c0013ea0 <terminateTask(int)+0x8c>
c0013e95:	83 3d 20 3b 02 c0 00 	cmp    DWORD PTR ds:0xc0023b20,0x0
c0013e9c:	75 36                	jne    c0013ed4 <terminateTask(int)+0xc0>
c0013e9e:	66 90                	xchg   ax,ax
c0013ea0:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0013ea5:	48                   	dec    eax
c0013ea6:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0013eab:	75 03                	jne    c0013eb0 <terminateTask(int)+0x9c>
c0013ead:	fb                   	sti    
c0013eae:	66 90                	xchg   ax,ax
c0013eb0:	fa                   	cli    
c0013eb1:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c0013eb7:	90                   	nop
c0013eb8:	e8 33 f6 ff ff       	call   c00134f0 <schedule()>
c0013ebd:	eb e1                	jmp    c0013ea0 <terminateTask(int)+0x8c>
c0013ebf:	90                   	nop
c0013ec0:	83 ec 0c             	sub    esp,0xc
c0013ec3:	68 ad e7 01 c0       	push   0xc001e7ad
c0013ec8:	e8 d3 65 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0013ecd:	83 c4 10             	add    esp,0x10
c0013ed0:	eb a6                	jmp    c0013e78 <terminateTask(int)+0x64>
c0013ed2:	66 90                	xchg   ax,ax
c0013ed4:	c7 05 20 3b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023b20,0x0
c0013ede:	eb d8                	jmp    c0013eb8 <terminateTask(int)+0xa4>

c0013ee0 <Thr::terminateFromIRQ(int)>:
c0013ee0:	83 ec 18             	sub    esp,0x18
c0013ee3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ee7:	50                   	push   eax
c0013ee8:	e8 27 ff ff ff       	call   c0013e14 <terminateTask(int)>
c0013eed:	90                   	nop
c0013eee:	66 90                	xchg   ax,ax

c0013ef0 <Semaphore::release()>:
c0013ef0:	83 ec 0c             	sub    esp,0xc
c0013ef3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ef7:	fa                   	cli    
c0013ef8:	a1 24 3b 02 c0       	mov    eax,ds:0xc0023b24
c0013efd:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c0013f03:	8d 48 01             	lea    ecx,[eax+0x1]
c0013f06:	89 0d 24 3b 02 c0    	mov    DWORD PTR ds:0xc0023b24,ecx
c0013f0c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013f0f:	85 c9                	test   ecx,ecx
c0013f11:	74 41                	je     c0013f54 <Semaphore::release()+0x64>
c0013f13:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013f16:	83 ec 0c             	sub    esp,0xc
c0013f19:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013f1c:	51                   	push   ecx
c0013f1d:	e8 92 fa ff ff       	call   c00139b4 <unblockTask(ThreadControlBlock*)>
c0013f22:	a1 24 3b 02 c0       	mov    eax,ds:0xc0023b24
c0013f27:	83 c4 10             	add    esp,0x10
c0013f2a:	48                   	dec    eax
c0013f2b:	90                   	nop
c0013f2c:	a3 24 3b 02 c0       	mov    ds:0xc0023b24,eax
c0013f31:	85 c0                	test   eax,eax
c0013f33:	75 0b                	jne    c0013f40 <Semaphore::release()+0x50>
c0013f35:	a1 20 3b 02 c0       	mov    eax,ds:0xc0023b20
c0013f3a:	85 c0                	test   eax,eax
c0013f3c:	75 1e                	jne    c0013f5c <Semaphore::release()+0x6c>
c0013f3e:	66 90                	xchg   ax,ax
c0013f40:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0013f45:	48                   	dec    eax
c0013f46:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0013f4b:	75 03                	jne    c0013f50 <Semaphore::release()+0x60>
c0013f4d:	fb                   	sti    
c0013f4e:	66 90                	xchg   ax,ax
c0013f50:	83 c4 0c             	add    esp,0xc
c0013f53:	c3                   	ret    
c0013f54:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0013f57:	eb d3                	jmp    c0013f2c <Semaphore::release()+0x3c>
c0013f59:	8d 76 00             	lea    esi,[esi+0x0]
c0013f5c:	c7 05 20 3b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023b20,0x0
c0013f66:	e8 85 f5 ff ff       	call   c00134f0 <schedule()>
c0013f6b:	eb d3                	jmp    c0013f40 <Semaphore::release()+0x50>
c0013f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0013f70 <__static_initialization_and_destruction_0(int, int)>:
c0013f70:	83 ec 0c             	sub    esp,0xc
c0013f73:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013f78:	0f 85 8e 00 00 00    	jne    c001400c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013f7e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013f86:	0f 85 80 00 00 00    	jne    c001400c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013f8c:	83 ec 0c             	sub    esp,0xc
c0013f8f:	68 44 3b 02 c0       	push   0xc0023b44
c0013f94:	e8 ff 87 00 00       	call   c001c798 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013f99:	83 c4 10             	add    esp,0x10
c0013f9c:	83 ec 04             	sub    esp,0x4
c0013f9f:	68 e8 f3 01 c0       	push   0xc001f3e8
c0013fa4:	68 44 3b 02 c0       	push   0xc0023b44
c0013fa9:	68 48 c7 01 c0       	push   0xc001c748
c0013fae:	e8 a7 63 ff ff       	call   c000a35a <__cxa_atexit>
c0013fb3:	83 c4 10             	add    esp,0x10
c0013fb6:	83 ec 0c             	sub    esp,0xc
c0013fb9:	68 38 3b 02 c0       	push   0xc0023b38
c0013fbe:	e8 d5 87 00 00       	call   c001c798 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013fc3:	83 c4 10             	add    esp,0x10
c0013fc6:	83 ec 04             	sub    esp,0x4
c0013fc9:	68 e8 f3 01 c0       	push   0xc001f3e8
c0013fce:	68 38 3b 02 c0       	push   0xc0023b38
c0013fd3:	68 48 c7 01 c0       	push   0xc001c748
c0013fd8:	e8 7d 63 ff ff       	call   c000a35a <__cxa_atexit>
c0013fdd:	83 c4 10             	add    esp,0x10
c0013fe0:	83 ec 0c             	sub    esp,0xc
c0013fe3:	68 2c 3b 02 c0       	push   0xc0023b2c
c0013fe8:	e8 ab 87 00 00       	call   c001c798 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013fed:	83 c4 10             	add    esp,0x10
c0013ff0:	83 ec 04             	sub    esp,0x4
c0013ff3:	68 e8 f3 01 c0       	push   0xc001f3e8
c0013ff8:	68 2c 3b 02 c0       	push   0xc0023b2c
c0013ffd:	68 48 c7 01 c0       	push   0xc001c748
c0014002:	e8 53 63 ff ff       	call   c000a35a <__cxa_atexit>
c0014007:	83 c4 10             	add    esp,0x10
c001400a:	66 90                	xchg   ax,ax
c001400c:	90                   	nop
c001400d:	83 c4 0c             	add    esp,0xc
c0014010:	c3                   	ret    
c0014011:	8d 76 00             	lea    esi,[esi+0x0]

c0014014 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014014:	83 ec 0c             	sub    esp,0xc
c0014017:	83 ec 08             	sub    esp,0x8
c001401a:	68 ff ff 00 00       	push   0xffff
c001401f:	6a 01                	push   0x1
c0014021:	e8 4a ff ff ff       	call   c0013f70 <__static_initialization_and_destruction_0(int, int)>
c0014026:	83 c4 10             	add    esp,0x10
c0014029:	83 c4 0c             	add    esp,0xc
c001402c:	c3                   	ret    

c001402d <Vm::inbv(unsigned short)>:
c001402d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014031:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014036:	75 06                	jne    c001403e <Vm::inbv(unsigned short)+0x11>
c0014038:	a0 8c 3b 02 c0       	mov    al,ds:0xc0023b8c
c001403d:	c3                   	ret    
c001403e:	ec                   	in     al,dx
c001403f:	c3                   	ret    

c0014040 <Vm::outbv(unsigned short, unsigned char)>:
c0014040:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014044:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014048:	66 81 fa fe fe       	cmp    dx,0xfefe
c001404d:	75 25                	jne    c0014074 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001404f:	8b 0d 8c 3b 02 c0    	mov    ecx,DWORD PTR ds:0xc0023b8c
c0014055:	8d 51 01             	lea    edx,[ecx+0x1]
c0014058:	88 81 a0 3b 02 c0    	mov    BYTE PTR [ecx-0x3ffdc460],al
c001405e:	89 15 8c 3b 02 c0    	mov    DWORD PTR ds:0xc0023b8c,edx
c0014064:	83 fa 20             	cmp    edx,0x20
c0014067:	75 0c                	jne    c0014075 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014069:	c7 05 8c 3b 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0023b8c,0x1f
c0014073:	c3                   	ret    
c0014074:	ee                   	out    dx,al
c0014075:	c3                   	ret    

c0014076 <Vm::realToLinear(unsigned short, unsigned short)>:
c0014076:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001407b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014080:	c1 e0 04             	shl    eax,0x4
c0014083:	01 d0                	add    eax,edx
c0014085:	c3                   	ret    

c0014086 <Vm::getSegment(unsigned int)>:
c0014086:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001408a:	c1 e8 10             	shr    eax,0x10
c001408d:	c3                   	ret    

c001408e <Vm::getOffset(unsigned int)>:
c001408e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014092:	c3                   	ret    

c0014093 <Vm::mainloop2()>:
c0014093:	83 ec 18             	sub    esp,0x18
c0014096:	fa                   	cli    
c0014097:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c001409d:	6a 02                	push   0x2
c001409f:	c6 05 85 3b 02 c0 01 	mov    BYTE PTR ds:0xc0023b85,0x1
c00140a6:	e8 19 f6 ff ff       	call   c00136c4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00140ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140b0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00140b4:	52                   	push   edx
c00140b5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00140b9:	52                   	push   edx
c00140ba:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00140be:	52                   	push   edx
c00140bf:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00140c3:	50                   	push   eax
c00140c4:	e8 46 c1 fe ff       	call   c000020f <goToVM86>
c00140c9:	83 c4 2c             	add    esp,0x2c
c00140cc:	c3                   	ret    

c00140cd <Vm::mainVm8086Loop(void*)>:
c00140cd:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c00140d2:	48                   	dec    eax
c00140d3:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c00140d8:	75 01                	jne    c00140db <Vm::mainVm8086Loop(void*)+0xe>
c00140da:	fb                   	sti    
c00140db:	eb b6                	jmp    c0014093 <Vm::mainloop2()>

c00140dd <Vm::mainloop3(unsigned long)>:
c00140dd:	83 ec 18             	sub    esp,0x18
c00140e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00140e4:	fa                   	cli    
c00140e5:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c00140eb:	6a 02                	push   0x2
c00140ed:	c6 05 84 3b 02 c0 01 	mov    BYTE PTR ds:0xc0023b84,0x1
c00140f4:	a3 80 3b 02 c0       	mov    ds:0xc0023b80,eax
c00140f9:	e8 c6 f5 ff ff       	call   c00136c4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00140fe:	83 c4 1c             	add    esp,0x1c
c0014101:	eb 90                	jmp    c0014093 <Vm::mainloop2()>

c0014103 <Vm::initialise8086()>:
c0014103:	83 ec 0c             	sub    esp,0xc
c0014106:	68 80 00 00 00       	push   0x80
c001410b:	6a 00                	push   0x0
c001410d:	68 cd 40 01 c0       	push   0xc00140cd
c0014112:	ff 35 50 3b 02 c0    	push   DWORD PTR ds:0xc0023b50
c0014118:	e8 b3 f1 ff ff       	call   c00132d0 <Process::createThread(void (*)(void*), void*, int)>
c001411d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014124:	a3 88 3b 02 c0       	mov    ds:0xc0023b88,eax
c0014129:	68 00 01 00 00       	push   0x100
c001412e:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014133:	6a 00                	push   0x0
c0014135:	6a 00                	push   0x0
c0014137:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001413d:	e8 9a 5a ff ff       	call   c0009bdc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0014142:	83 c4 2c             	add    esp,0x2c
c0014145:	c3                   	ret    

c0014146 <Vm::finish8086()>:
c0014146:	53                   	push   ebx
c0014147:	83 ec 08             	sub    esp,0x8
c001414a:	fa                   	cli    
c001414b:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c0014151:	80 3d 84 3b 02 c0 00 	cmp    BYTE PTR ds:0xc0023b84,0x0
c0014158:	75 15                	jne    c001416f <Vm::finish8086()+0x29>
c001415a:	e8 91 f3 ff ff       	call   c00134f0 <schedule()>
c001415f:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0014164:	48                   	dec    eax
c0014165:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c001416a:	75 de                	jne    c001414a <Vm::finish8086()+0x4>
c001416c:	fb                   	sti    
c001416d:	eb db                	jmp    c001414a <Vm::finish8086()+0x4>
c001416f:	83 ec 0c             	sub    esp,0xc
c0014172:	8b 1d 80 3b 02 c0    	mov    ebx,DWORD PTR ds:0xc0023b80
c0014178:	ff 35 88 3b 02 c0    	push   DWORD PTR ds:0xc0023b88
c001417e:	c6 05 84 3b 02 c0 00 	mov    BYTE PTR ds:0xc0023b84,0x0
c0014185:	e8 2a f8 ff ff       	call   c00139b4 <unblockTask(ThreadControlBlock*)>
c001418a:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c001418f:	83 c4 10             	add    esp,0x10
c0014192:	8d 50 ff             	lea    edx,[eax-0x1]
c0014195:	89 15 28 3b 02 c0    	mov    DWORD PTR ds:0xc0023b28,edx
c001419b:	85 d2                	test   edx,edx
c001419d:	75 01                	jne    c00141a0 <Vm::finish8086()+0x5a>
c001419f:	fb                   	sti    
c00141a0:	89 d8                	mov    eax,ebx
c00141a2:	83 c4 08             	add    esp,0x8
c00141a5:	5b                   	pop    ebx
c00141a6:	c3                   	ret    

c00141a7 <Vm::getOutput8086(unsigned char*)>:
c00141a7:	57                   	push   edi
c00141a8:	8b 0d 8c 3b 02 c0    	mov    ecx,DWORD PTR ds:0xc0023b8c
c00141ae:	56                   	push   esi
c00141af:	be a0 3b 02 c0       	mov    esi,0xc0023ba0
c00141b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00141b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141ba:	a1 8c 3b 02 c0       	mov    eax,ds:0xc0023b8c
c00141bf:	5e                   	pop    esi
c00141c0:	c7 05 8c 3b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023b8c,0x0
c00141ca:	5f                   	pop    edi
c00141cb:	c3                   	ret    

c00141cc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00141cc:	55                   	push   ebp
c00141cd:	57                   	push   edi
c00141ce:	56                   	push   esi
c00141cf:	53                   	push   ebx
c00141d0:	83 ec 0c             	sub    esp,0xc
c00141d3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00141d7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00141db:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00141df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00141e3:	fa                   	cli    
c00141e4:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c00141ea:	80 3d 85 3b 02 c0 00 	cmp    BYTE PTR ds:0xc0023b85,0x0
c00141f1:	75 15                	jne    c0014208 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00141f3:	e8 f8 f2 ff ff       	call   c00134f0 <schedule()>
c00141f8:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c00141fd:	48                   	dec    eax
c00141fe:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0014203:	75 de                	jne    c00141e3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014205:	fb                   	sti    
c0014206:	eb db                	jmp    c00141e3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014208:	a1 88 3b 02 c0       	mov    eax,ds:0xc0023b88
c001420d:	c7 05 8c 3b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023b8c,0x0
c0014217:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001421b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001421f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0014223:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014227:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001422b:	0f b7 ff             	movzx  edi,di
c001422e:	0f b7 f6             	movzx  esi,si
c0014231:	50                   	push   eax
c0014232:	6a 20                	push   0x20
c0014234:	6a 00                	push   0x0
c0014236:	68 a0 3b 02 c0       	push   0xc0023ba0
c001423b:	e8 90 c2 fe ff       	call   c00004d0 <memset>
c0014240:	5a                   	pop    edx
c0014241:	59                   	pop    ecx
c0014242:	57                   	push   edi
c0014243:	56                   	push   esi
c0014244:	e8 2d fe ff ff       	call   c0014076 <Vm::realToLinear(unsigned short, unsigned short)>
c0014249:	83 c4 10             	add    esp,0x10
c001424c:	89 c7                	mov    edi,eax
c001424e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014252:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014256:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014258:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c001425d:	c6 05 85 3b 02 c0 00 	mov    BYTE PTR ds:0xc0023b85,0x0
c0014264:	48                   	dec    eax
c0014265:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c001426a:	75 01                	jne    c001426d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c001426c:	fb                   	sti    
c001426d:	83 ec 0c             	sub    esp,0xc
c0014270:	ff 35 88 3b 02 c0    	push   DWORD PTR ds:0xc0023b88
c0014276:	e8 39 f7 ff ff       	call   c00139b4 <unblockTask(ThreadControlBlock*)>
c001427b:	83 c4 1c             	add    esp,0x1c
c001427e:	b0 01                	mov    al,0x1
c0014280:	5b                   	pop    ebx
c0014281:	5e                   	pop    esi
c0014282:	5f                   	pop    edi
c0014283:	5d                   	pop    ebp
c0014284:	c3                   	ret    

c0014285 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014285:	55                   	push   ebp
c0014286:	57                   	push   edi
c0014287:	56                   	push   esi
c0014288:	53                   	push   ebx
c0014289:	83 ec 2c             	sub    esp,0x2c
c001428c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014290:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014294:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014298:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001429c:	fa                   	cli    
c001429d:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c00142a3:	0f b6 35 85 3b 02 c0 	movzx  esi,BYTE PTR ds:0xc0023b85
c00142aa:	89 f0                	mov    eax,esi
c00142ac:	84 c0                	test   al,al
c00142ae:	75 1d                	jne    c00142cd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00142b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00142b4:	e8 37 f2 ff ff       	call   c00134f0 <schedule()>
c00142b9:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c00142be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00142c2:	48                   	dec    eax
c00142c3:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c00142c8:	75 d2                	jne    c001429c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00142ca:	fb                   	sti    
c00142cb:	eb cf                	jmp    c001429c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00142cd:	a1 88 3b 02 c0       	mov    eax,ds:0xc0023b88
c00142d2:	c7 05 8c 3b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023b8c,0x0
c00142dc:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00142e0:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00142e4:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00142e8:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00142ec:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00142f0:	50                   	push   eax
c00142f1:	6a 20                	push   0x20
c00142f3:	6a 00                	push   0x0
c00142f5:	68 a0 3b 02 c0       	push   0xc0023ba0
c00142fa:	e8 d1 c1 fe ff       	call   c00004d0 <memset>
c00142ff:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014306:	e8 fa 34 ff ff       	call   c0007805 <malloc>
c001430b:	83 c4 0c             	add    esp,0xc
c001430e:	89 c3                	mov    ebx,eax
c0014310:	ff 35 50 3b 02 c0    	push   DWORD PTR ds:0xc0023b50
c0014316:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001431a:	50                   	push   eax
c001431b:	e8 f6 66 ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c0014320:	83 c4 10             	add    esp,0x10
c0014323:	85 db                	test   ebx,ebx
c0014325:	75 0a                	jne    c0014331 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014327:	83 ec 0c             	sub    esp,0xc
c001432a:	68 d8 e8 01 c0       	push   0xc001e8d8
c001432f:	eb 3e                	jmp    c001436f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014331:	50                   	push   eax
c0014332:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014336:	50                   	push   eax
c0014337:	8d 44 24 20          	lea    eax,[esp+0x20]
c001433b:	50                   	push   eax
c001433c:	53                   	push   ebx
c001433d:	e8 40 6a ff ff       	call   c000ad82 <File::stat(unsigned long long*, bool*)>
c0014342:	83 c4 10             	add    esp,0x10
c0014345:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001434a:	74 0a                	je     c0014356 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001434c:	83 ec 0c             	sub    esp,0xc
c001434f:	68 ec e8 01 c0       	push   0xc001e8ec
c0014354:	eb 19                	jmp    c001436f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014356:	51                   	push   ecx
c0014357:	51                   	push   ecx
c0014358:	6a 01                	push   0x1
c001435a:	53                   	push   ebx
c001435b:	e8 76 67 ff ff       	call   c000aad6 <File::open(FileOpenMode)>
c0014360:	83 c4 10             	add    esp,0x10
c0014363:	85 c0                	test   eax,eax
c0014365:	74 24                	je     c001438b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014367:	83 ec 0c             	sub    esp,0xc
c001436a:	68 05 e9 01 c0       	push   0xc001e905
c001436f:	e8 8f bd ff ff       	call   c0010103 <KePanic(char const*)>
c0014374:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0014379:	83 c4 10             	add    esp,0x10
c001437c:	48                   	dec    eax
c001437d:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0014382:	85 c0                	test   eax,eax
c0014384:	75 01                	jne    c0014387 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0014386:	fb                   	sti    
c0014387:	31 f6                	xor    esi,esi
c0014389:	eb 58                	jmp    c00143e3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001438b:	0f b7 ed             	movzx  ebp,bp
c001438e:	50                   	push   eax
c001438f:	0f b7 ff             	movzx  edi,di
c0014392:	50                   	push   eax
c0014393:	55                   	push   ebp
c0014394:	57                   	push   edi
c0014395:	e8 dc fc ff ff       	call   c0014076 <Vm::realToLinear(unsigned short, unsigned short)>
c001439a:	5a                   	pop    edx
c001439b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001439d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00143a1:	51                   	push   ecx
c00143a2:	50                   	push   eax
c00143a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00143a7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00143ab:	53                   	push   ebx
c00143ac:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00143af:	83 c4 14             	add    esp,0x14
c00143b2:	53                   	push   ebx
c00143b3:	e8 7c 67 ff ff       	call   c000ab34 <File::close()>
c00143b8:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c00143bd:	83 c4 10             	add    esp,0x10
c00143c0:	48                   	dec    eax
c00143c1:	c6 05 85 3b 02 c0 00 	mov    BYTE PTR ds:0xc0023b85,0x0
c00143c8:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c00143cd:	85 c0                	test   eax,eax
c00143cf:	75 01                	jne    c00143d2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00143d1:	fb                   	sti    
c00143d2:	83 ec 0c             	sub    esp,0xc
c00143d5:	ff 35 88 3b 02 c0    	push   DWORD PTR ds:0xc0023b88
c00143db:	e8 d4 f5 ff ff       	call   c00139b4 <unblockTask(ThreadControlBlock*)>
c00143e0:	83 c4 10             	add    esp,0x10
c00143e3:	83 c4 2c             	add    esp,0x2c
c00143e6:	89 f0                	mov    eax,esi
c00143e8:	5b                   	pop    ebx
c00143e9:	5e                   	pop    esi
c00143ea:	5f                   	pop    edi
c00143eb:	5d                   	pop    ebp
c00143ec:	c3                   	ret    

c00143ed <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00143ed:	57                   	push   edi
c00143ee:	56                   	push   esi
c00143ef:	53                   	push   ebx
c00143f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00143f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143f8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143fc:	83 e8 06             	sub    eax,0x6
c00143ff:	0f b7 c0             	movzx  eax,ax
c0014402:	50                   	push   eax
c0014403:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014408:	50                   	push   eax
c0014409:	e8 68 fc ff ff       	call   c0014076 <Vm::realToLinear(unsigned short, unsigned short)>
c001440e:	5a                   	pop    edx
c001440f:	5e                   	pop    esi
c0014410:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0014413:	8d 56 fa             	lea    edx,[esi-0x6]
c0014416:	81 e2 ff ff 00 00    	and    edx,0xffff
c001441c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001441f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0014422:	83 c2 02             	add    edx,0x2
c0014425:	66 89 10             	mov    WORD PTR [eax],dx
c0014428:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001442b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001442f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0014432:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014436:	89 d6                	mov    esi,edx
c0014438:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001443e:	66 81 e6 ff fd       	and    si,0xfdff
c0014443:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014447:	74 07                	je     c0014450 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014449:	89 d6                	mov    esi,edx
c001444b:	66 81 ce 00 02       	or     si,0x200
c0014450:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014454:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014459:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001445d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014465:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014468:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014470:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014473:	5b                   	pop    ebx
c0014474:	5e                   	pop    esi
c0014475:	5f                   	pop    edi
c0014476:	c3                   	ret    

c0014477 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014477:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001447c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014481:	c1 e0 04             	shl    eax,0x4
c0014484:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014487:	c3                   	ret    

c0014488 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014488:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001448d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014492:	c1 e0 04             	shl    eax,0x4
c0014495:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014499:	c3                   	ret    

c001449a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001449a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001449f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00144a4:	c1 e0 04             	shl    eax,0x4
c00144a7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00144aa:	c3                   	ret    

c00144ab <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00144ab:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00144b0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00144b5:	c1 e0 04             	shl    eax,0x4
c00144b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00144bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00144bf:	c3                   	ret    

c00144c0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00144c0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00144c5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00144ca:	c1 e0 04             	shl    eax,0x4
c00144cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00144d1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00144d5:	c3                   	ret    

c00144d6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00144d6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00144db:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00144e0:	c1 e0 04             	shl    eax,0x4
c00144e3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00144e7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00144ea:	c3                   	ret    

c00144eb <Vm::faultHandler(regs*)>:
c00144eb:	55                   	push   ebp
c00144ec:	57                   	push   edi
c00144ed:	56                   	push   esi
c00144ee:	53                   	push   ebx
c00144ef:	83 ec 1c             	sub    esp,0x1c
c00144f2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00144f6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00144f9:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00144fd:	0f b7 f8             	movzx  edi,ax
c0014500:	52                   	push   edx
c0014501:	0f b7 c0             	movzx  eax,ax
c0014504:	50                   	push   eax
c0014505:	e8 6c fb ff ff       	call   c0014076 <Vm::realToLinear(unsigned short, unsigned short)>
c001450a:	5a                   	pop    edx
c001450b:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001450e:	59                   	pop    ecx
c001450f:	89 c1                	mov    ecx,eax
c0014511:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014514:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014518:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001451d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014521:	0f b7 c5             	movzx  eax,bp
c0014524:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014528:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001452c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014530:	e8 41 fb ff ff       	call   c0014076 <Vm::realToLinear(unsigned short, unsigned short)>
c0014535:	5e                   	pop    esi
c0014536:	be 06 00 00 00       	mov    esi,0x6
c001453b:	5a                   	pop    edx
c001453c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014541:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014546:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014549:	80 fa 9d             	cmp    dl,0x9d
c001454c:	0f 84 2c 02 00 00    	je     c001477e <Vm::faultHandler(regs*)+0x293>
c0014552:	0f 87 91 00 00 00    	ja     c00145e9 <Vm::faultHandler(regs*)+0xfe>
c0014558:	80 fa 66             	cmp    dl,0x66
c001455b:	0f 84 98 01 00 00    	je     c00146f9 <Vm::faultHandler(regs*)+0x20e>
c0014561:	77 47                	ja     c00145aa <Vm::faultHandler(regs*)+0xbf>
c0014563:	80 fa 36             	cmp    dl,0x36
c0014566:	0f 84 80 01 00 00    	je     c00146ec <Vm::faultHandler(regs*)+0x201>
c001456c:	77 1a                	ja     c0014588 <Vm::faultHandler(regs*)+0x9d>
c001456e:	80 fa 26             	cmp    dl,0x26
c0014571:	0f 84 4e 01 00 00    	je     c00146c5 <Vm::faultHandler(regs*)+0x1da>
c0014577:	80 fa 2e             	cmp    dl,0x2e
c001457a:	0f 85 e2 05 00 00    	jne    c0014b62 <Vm::faultHandler(regs*)+0x677>
c0014580:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014583:	31 f6                	xor    esi,esi
c0014585:	41                   	inc    ecx
c0014586:	eb be                	jmp    c0014546 <Vm::faultHandler(regs*)+0x5b>
c0014588:	80 fa 64             	cmp    dl,0x64
c001458b:	0f 84 41 01 00 00    	je     c00146d2 <Vm::faultHandler(regs*)+0x1e7>
c0014591:	0f 87 48 01 00 00    	ja     c00146df <Vm::faultHandler(regs*)+0x1f4>
c0014597:	80 fa 3e             	cmp    dl,0x3e
c001459a:	0f 85 c2 05 00 00    	jne    c0014b62 <Vm::faultHandler(regs*)+0x677>
c00145a0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00145a3:	be 01 00 00 00       	mov    esi,0x1
c00145a8:	eb db                	jmp    c0014585 <Vm::faultHandler(regs*)+0x9a>
c00145aa:	80 fa 6d             	cmp    dl,0x6d
c00145ad:	0f 84 ec 02 00 00    	je     c001489f <Vm::faultHandler(regs*)+0x3b4>
c00145b3:	77 17                	ja     c00145cc <Vm::faultHandler(regs*)+0xe1>
c00145b5:	80 fa 67             	cmp    dl,0x67
c00145b8:	0f 84 48 01 00 00    	je     c0014706 <Vm::faultHandler(regs*)+0x21b>
c00145be:	80 fa 6c             	cmp    dl,0x6c
c00145c1:	0f 84 69 02 00 00    	je     c0014830 <Vm::faultHandler(regs*)+0x345>
c00145c7:	e9 96 05 00 00       	jmp    c0014b62 <Vm::faultHandler(regs*)+0x677>
c00145cc:	80 fa 6f             	cmp    dl,0x6f
c00145cf:	0f 84 f4 03 00 00    	je     c00149c9 <Vm::faultHandler(regs*)+0x4de>
c00145d5:	0f 82 59 03 00 00    	jb     c0014934 <Vm::faultHandler(regs*)+0x449>
c00145db:	80 fa 9c             	cmp    dl,0x9c
c00145de:	0f 84 2f 01 00 00    	je     c0014713 <Vm::faultHandler(regs*)+0x228>
c00145e4:	e9 79 05 00 00       	jmp    c0014b62 <Vm::faultHandler(regs*)+0x677>
c00145e9:	80 fa ec             	cmp    dl,0xec
c00145ec:	0f 84 14 05 00 00    	je     c0014b06 <Vm::faultHandler(regs*)+0x61b>
c00145f2:	77 7b                	ja     c001466f <Vm::faultHandler(regs*)+0x184>
c00145f4:	80 fa e4             	cmp    dl,0xe4
c00145f7:	0f 84 93 04 00 00    	je     c0014a90 <Vm::faultHandler(regs*)+0x5a5>
c00145fd:	77 53                	ja     c0014652 <Vm::faultHandler(regs*)+0x167>
c00145ff:	80 fa cd             	cmp    dl,0xcd
c0014602:	0f 84 d9 01 00 00    	je     c00147e1 <Vm::faultHandler(regs*)+0x2f6>
c0014608:	80 fa cf             	cmp    dl,0xcf
c001460b:	0f 85 51 05 00 00    	jne    c0014b62 <Vm::faultHandler(regs*)+0x677>
c0014611:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014614:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014617:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001461b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001461e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014622:	81 ca 00 02 02 00    	or     edx,0x20200
c0014628:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001462b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001462f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014635:	66 c1 e8 09          	shr    ax,0x9
c0014639:	83 e0 01             	and    eax,0x1
c001463c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001463f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014642:	83 c0 06             	add    eax,0x6
c0014645:	25 ff ff 00 00       	and    eax,0xffff
c001464a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001464d:	e9 0c 05 00 00       	jmp    c0014b5e <Vm::faultHandler(regs*)+0x673>
c0014652:	80 fa e6             	cmp    dl,0xe6
c0014655:	0f 84 7f 04 00 00    	je     c0014ada <Vm::faultHandler(regs*)+0x5ef>
c001465b:	0f 82 4b 04 00 00    	jb     c0014aac <Vm::faultHandler(regs*)+0x5c1>
c0014661:	80 fa e7             	cmp    dl,0xe7
c0014664:	0f 84 87 04 00 00    	je     c0014af1 <Vm::faultHandler(regs*)+0x606>
c001466a:	e9 f3 04 00 00       	jmp    c0014b62 <Vm::faultHandler(regs*)+0x677>
c001466f:	80 fa ef             	cmp    dl,0xef
c0014672:	0f 84 d1 04 00 00    	je     c0014b49 <Vm::faultHandler(regs*)+0x65e>
c0014678:	77 28                	ja     c00146a2 <Vm::faultHandler(regs*)+0x1b7>
c001467a:	80 fa ed             	cmp    dl,0xed
c001467d:	0f 84 9f 04 00 00    	je     c0014b22 <Vm::faultHandler(regs*)+0x637>
c0014683:	80 fa ee             	cmp    dl,0xee
c0014686:	0f 85 d6 04 00 00    	jne    c0014b62 <Vm::faultHandler(regs*)+0x677>
c001468c:	50                   	push   eax
c001468d:	50                   	push   eax
c001468e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014692:	50                   	push   eax
c0014693:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014697:	50                   	push   eax
c0014698:	e8 a3 f9 ff ff       	call   c0014040 <Vm::outbv(unsigned short, unsigned char)>
c001469d:	e9 9f 04 00 00       	jmp    c0014b41 <Vm::faultHandler(regs*)+0x656>
c00146a2:	80 fa fa             	cmp    dl,0xfa
c00146a5:	0f 84 69 01 00 00    	je     c0014814 <Vm::faultHandler(regs*)+0x329>
c00146ab:	80 fa fb             	cmp    dl,0xfb
c00146ae:	0f 84 6e 01 00 00    	je     c0014822 <Vm::faultHandler(regs*)+0x337>
c00146b4:	80 fa f3             	cmp    dl,0xf3
c00146b7:	0f 85 a5 04 00 00    	jne    c0014b62 <Vm::faultHandler(regs*)+0x677>
c00146bd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00146c0:	e9 c0 fe ff ff       	jmp    c0014585 <Vm::faultHandler(regs*)+0x9a>
c00146c5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00146c8:	be 02 00 00 00       	mov    esi,0x2
c00146cd:	e9 b3 fe ff ff       	jmp    c0014585 <Vm::faultHandler(regs*)+0x9a>
c00146d2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00146d5:	be 03 00 00 00       	mov    esi,0x3
c00146da:	e9 a6 fe ff ff       	jmp    c0014585 <Vm::faultHandler(regs*)+0x9a>
c00146df:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00146e2:	be 04 00 00 00       	mov    esi,0x4
c00146e7:	e9 99 fe ff ff       	jmp    c0014585 <Vm::faultHandler(regs*)+0x9a>
c00146ec:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00146ef:	be 05 00 00 00       	mov    esi,0x5
c00146f4:	e9 8c fe ff ff       	jmp    c0014585 <Vm::faultHandler(regs*)+0x9a>
c00146f9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00146fc:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014701:	e9 7f fe ff ff       	jmp    c0014585 <Vm::faultHandler(regs*)+0x9a>
c0014706:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014709:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001470e:	e9 72 fe ff ff       	jmp    c0014585 <Vm::faultHandler(regs*)+0x9a>
c0014713:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014716:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001471a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001471f:	74 30                	je     c0014751 <Vm::faultHandler(regs*)+0x266>
c0014721:	83 e9 04             	sub    ecx,0x4
c0014724:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001472a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014730:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014733:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014736:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001473c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014740:	0f 84 15 04 00 00    	je     c0014b5b <Vm::faultHandler(regs*)+0x670>
c0014746:	80 ce 02             	or     dh,0x2
c0014749:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001474c:	e9 0a 04 00 00       	jmp    c0014b5b <Vm::faultHandler(regs*)+0x670>
c0014751:	83 e9 02             	sub    ecx,0x2
c0014754:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001475a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001475d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014761:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014767:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001476b:	74 05                	je     c0014772 <Vm::faultHandler(regs*)+0x287>
c001476d:	80 ce 02             	or     dh,0x2
c0014770:	eb 03                	jmp    c0014775 <Vm::faultHandler(regs*)+0x28a>
c0014772:	80 e6 fd             	and    dh,0xfd
c0014775:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014779:	e9 dd 03 00 00       	jmp    c0014b5b <Vm::faultHandler(regs*)+0x670>
c001477e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014783:	74 2a                	je     c00147af <Vm::faultHandler(regs*)+0x2c4>
c0014785:	8b 10                	mov    edx,DWORD PTR [eax]
c0014787:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001478d:	81 ca 00 02 02 00    	or     edx,0x20200
c0014793:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014796:	8b 00                	mov    eax,DWORD PTR [eax]
c0014798:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001479e:	c1 e8 09             	shr    eax,0x9
c00147a1:	83 e0 01             	and    eax,0x1
c00147a4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00147a7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00147aa:	83 c0 04             	add    eax,0x4
c00147ad:	eb 25                	jmp    c00147d4 <Vm::faultHandler(regs*)+0x2e9>
c00147af:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00147b2:	81 ca 00 02 02 00    	or     edx,0x20200
c00147b8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00147bb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00147be:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00147c4:	66 c1 e8 09          	shr    ax,0x9
c00147c8:	83 e0 01             	and    eax,0x1
c00147cb:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00147ce:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00147d1:	83 c0 02             	add    eax,0x2
c00147d4:	25 ff ff 00 00       	and    eax,0xffff
c00147d9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00147dc:	e9 7a 03 00 00       	jmp    c0014b5b <Vm::faultHandler(regs*)+0x670>
c00147e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00147e5:	3c ee                	cmp    al,0xee
c00147e7:	75 10                	jne    c00147f9 <Vm::faultHandler(regs*)+0x30e>
c00147e9:	83 ec 0c             	sub    esp,0xc
c00147ec:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00147ef:	e8 e9 f8 ff ff       	call   c00140dd <Vm::mainloop3(unsigned long)>
c00147f4:	e9 4b 03 00 00       	jmp    c0014b44 <Vm::faultHandler(regs*)+0x659>
c00147f9:	83 ec 0c             	sub    esp,0xc
c00147fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014804:	51                   	push   ecx
c0014805:	50                   	push   eax
c0014806:	53                   	push   ebx
c0014807:	e8 e1 fb ff ff       	call   c00143ed <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001480c:	83 c4 20             	add    esp,0x20
c001480f:	e9 4a 03 00 00       	jmp    c0014b5e <Vm::faultHandler(regs*)+0x673>
c0014814:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014819:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001481d:	e9 39 03 00 00       	jmp    c0014b5b <Vm::faultHandler(regs*)+0x670>
c0014822:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014827:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001482b:	e9 2b 03 00 00       	jmp    c0014b5b <Vm::faultHandler(regs*)+0x670>
c0014830:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014833:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014838:	74 2b                	je     c0014865 <Vm::faultHandler(regs*)+0x37a>
c001483a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014841:	76 22                	jbe    c0014865 <Vm::faultHandler(regs*)+0x37a>
c0014843:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014847:	50                   	push   eax
c0014848:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001484c:	50                   	push   eax
c001484d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014851:	50                   	push   eax
c0014852:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014856:	50                   	push   eax
c0014857:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001485b:	50                   	push   eax
c001485c:	6a 6c                	push   0x6c
c001485e:	6a 6c                	push   0x6c
c0014860:	e9 b9 01 00 00       	jmp    c0014a1e <Vm::faultHandler(regs*)+0x533>
c0014865:	83 ec 0c             	sub    esp,0xc
c0014868:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001486c:	0f b7 f6             	movzx  esi,si
c001486f:	50                   	push   eax
c0014870:	e8 b8 f7 ff ff       	call   c001402d <Vm::inbv(unsigned short)>
c0014875:	83 c4 0c             	add    esp,0xc
c0014878:	0f b6 c0             	movzx  eax,al
c001487b:	50                   	push   eax
c001487c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014880:	50                   	push   eax
c0014881:	56                   	push   esi
c0014882:	e8 24 fc ff ff       	call   c00144ab <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014887:	83 c4 10             	add    esp,0x10
c001488a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001488d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014891:	74 03                	je     c0014896 <Vm::faultHandler(regs*)+0x3ab>
c0014893:	48                   	dec    eax
c0014894:	eb 01                	jmp    c0014897 <Vm::faultHandler(regs*)+0x3ac>
c0014896:	40                   	inc    eax
c0014897:	0f b7 c0             	movzx  eax,ax
c001489a:	e9 8d 00 00 00       	jmp    c001492c <Vm::faultHandler(regs*)+0x441>
c001489f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00148a2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00148a5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00148aa:	74 29                	je     c00148d5 <Vm::faultHandler(regs*)+0x3ea>
c00148ac:	3d ff ff 00 00       	cmp    eax,0xffff
c00148b1:	76 22                	jbe    c00148d5 <Vm::faultHandler(regs*)+0x3ea>
c00148b3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00148b7:	50                   	push   eax
c00148b8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00148bc:	50                   	push   eax
c00148bd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00148c1:	50                   	push   eax
c00148c2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00148c6:	50                   	push   eax
c00148c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00148cb:	50                   	push   eax
c00148cc:	6a 6d                	push   0x6d
c00148ce:	6a 6d                	push   0x6d
c00148d0:	e9 49 01 00 00       	jmp    c0014a1e <Vm::faultHandler(regs*)+0x533>
c00148d5:	0f b7 c8             	movzx  ecx,ax
c00148d8:	0f b7 f6             	movzx  esi,si
c00148db:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00148de:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00148e3:	74 20                	je     c0014905 <Vm::faultHandler(regs*)+0x41a>
c00148e5:	ed                   	in     eax,dx
c00148e6:	55                   	push   ebp
c00148e7:	50                   	push   eax
c00148e8:	51                   	push   ecx
c00148e9:	56                   	push   esi
c00148ea:	e8 e7 fb ff ff       	call   c00144d6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00148ef:	83 c4 10             	add    esp,0x10
c00148f2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00148f5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00148f9:	74 05                	je     c0014900 <Vm::faultHandler(regs*)+0x415>
c00148fb:	83 e8 04             	sub    eax,0x4
c00148fe:	eb 27                	jmp    c0014927 <Vm::faultHandler(regs*)+0x43c>
c0014900:	83 c0 04             	add    eax,0x4
c0014903:	eb 22                	jmp    c0014927 <Vm::faultHandler(regs*)+0x43c>
c0014905:	66 ed                	in     ax,dx
c0014907:	0f b7 c0             	movzx  eax,ax
c001490a:	57                   	push   edi
c001490b:	50                   	push   eax
c001490c:	51                   	push   ecx
c001490d:	56                   	push   esi
c001490e:	e8 ad fb ff ff       	call   c00144c0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014913:	83 c4 10             	add    esp,0x10
c0014916:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014919:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001491d:	74 05                	je     c0014924 <Vm::faultHandler(regs*)+0x439>
c001491f:	83 e8 02             	sub    eax,0x2
c0014922:	eb 03                	jmp    c0014927 <Vm::faultHandler(regs*)+0x43c>
c0014924:	83 c0 02             	add    eax,0x2
c0014927:	25 ff ff 00 00       	and    eax,0xffff
c001492c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001492f:	e9 27 02 00 00       	jmp    c0014b5b <Vm::faultHandler(regs*)+0x670>
c0014934:	8d 46 ff             	lea    eax,[esi-0x1]
c0014937:	3c 05                	cmp    al,0x5
c0014939:	77 24                	ja     c001495f <Vm::faultHandler(regs*)+0x474>
c001493b:	0f b6 c0             	movzx  eax,al
c001493e:	ff 24 85 78 e9 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1688]
c0014945:	0f b7 fd             	movzx  edi,bp
c0014948:	eb 15                	jmp    c001495f <Vm::faultHandler(regs*)+0x474>
c001494a:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001494e:	eb 0f                	jmp    c001495f <Vm::faultHandler(regs*)+0x474>
c0014950:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014954:	eb 09                	jmp    c001495f <Vm::faultHandler(regs*)+0x474>
c0014956:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001495a:	eb 03                	jmp    c001495f <Vm::faultHandler(regs*)+0x474>
c001495c:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001495f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014962:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014967:	74 29                	je     c0014992 <Vm::faultHandler(regs*)+0x4a7>
c0014969:	3d ff ff 00 00       	cmp    eax,0xffff
c001496e:	76 22                	jbe    c0014992 <Vm::faultHandler(regs*)+0x4a7>
c0014970:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014974:	50                   	push   eax
c0014975:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014979:	50                   	push   eax
c001497a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001497e:	50                   	push   eax
c001497f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014983:	50                   	push   eax
c0014984:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014988:	50                   	push   eax
c0014989:	6a 6e                	push   0x6e
c001498b:	6a 6e                	push   0x6e
c001498d:	e9 8c 00 00 00       	jmp    c0014a1e <Vm::faultHandler(regs*)+0x533>
c0014992:	0f b7 c0             	movzx  eax,ax
c0014995:	52                   	push   edx
c0014996:	52                   	push   edx
c0014997:	50                   	push   eax
c0014998:	57                   	push   edi
c0014999:	e8 d9 fa ff ff       	call   c0014477 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001499e:	59                   	pop    ecx
c001499f:	0f b6 c0             	movzx  eax,al
c00149a2:	5e                   	pop    esi
c00149a3:	50                   	push   eax
c00149a4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00149a8:	50                   	push   eax
c00149a9:	e8 92 f6 ff ff       	call   c0014040 <Vm::outbv(unsigned short, unsigned char)>
c00149ae:	83 c4 10             	add    esp,0x10
c00149b1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00149b4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00149b8:	74 03                	je     c00149bd <Vm::faultHandler(regs*)+0x4d2>
c00149ba:	48                   	dec    eax
c00149bb:	eb 01                	jmp    c00149be <Vm::faultHandler(regs*)+0x4d3>
c00149bd:	40                   	inc    eax
c00149be:	0f b7 c0             	movzx  eax,ax
c00149c1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00149c4:	e9 92 01 00 00       	jmp    c0014b5b <Vm::faultHandler(regs*)+0x670>
c00149c9:	8d 46 ff             	lea    eax,[esi-0x1]
c00149cc:	3c 05                	cmp    al,0x5
c00149ce:	77 1f                	ja     c00149ef <Vm::faultHandler(regs*)+0x504>
c00149d0:	0f b6 c0             	movzx  eax,al
c00149d3:	ff 24 85 90 e9 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1670]
c00149da:	89 ef                	mov    edi,ebp
c00149dc:	eb 11                	jmp    c00149ef <Vm::faultHandler(regs*)+0x504>
c00149de:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00149e1:	eb 0c                	jmp    c00149ef <Vm::faultHandler(regs*)+0x504>
c00149e3:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00149e6:	eb 07                	jmp    c00149ef <Vm::faultHandler(regs*)+0x504>
c00149e8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00149eb:	eb 02                	jmp    c00149ef <Vm::faultHandler(regs*)+0x504>
c00149ed:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00149ef:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00149f2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00149f7:	74 37                	je     c0014a30 <Vm::faultHandler(regs*)+0x545>
c00149f9:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00149ff:	76 2f                	jbe    c0014a30 <Vm::faultHandler(regs*)+0x545>
c0014a01:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014a05:	50                   	push   eax
c0014a06:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014a0a:	50                   	push   eax
c0014a0b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014a0f:	50                   	push   eax
c0014a10:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014a14:	50                   	push   eax
c0014a15:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014a19:	50                   	push   eax
c0014a1a:	6a 6f                	push   0x6f
c0014a1c:	6a 6f                	push   0x6f
c0014a1e:	68 1e e9 01 c0       	push   0xc001e91e
c0014a23:	e8 78 5a ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0014a28:	83 c4 20             	add    esp,0x20
c0014a2b:	e9 86 01 00 00       	jmp    c0014bb6 <Vm::faultHandler(regs*)+0x6cb>
c0014a30:	0f b7 d7             	movzx  edx,di
c0014a33:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014a36:	0f b7 c6             	movzx  eax,si
c0014a39:	81 e1 00 04 00 00    	and    ecx,0x400
c0014a3f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014a42:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a47:	74 1d                	je     c0014a66 <Vm::faultHandler(regs*)+0x57b>
c0014a49:	55                   	push   ebp
c0014a4a:	55                   	push   ebp
c0014a4b:	50                   	push   eax
c0014a4c:	52                   	push   edx
c0014a4d:	e8 48 fa ff ff       	call   c001449a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014a52:	83 c4 10             	add    esp,0x10
c0014a55:	89 fa                	mov    edx,edi
c0014a57:	ef                   	out    dx,eax
c0014a58:	85 c9                	test   ecx,ecx
c0014a5a:	74 05                	je     c0014a61 <Vm::faultHandler(regs*)+0x576>
c0014a5c:	83 ee 04             	sub    esi,0x4
c0014a5f:	eb 21                	jmp    c0014a82 <Vm::faultHandler(regs*)+0x597>
c0014a61:	83 c6 04             	add    esi,0x4
c0014a64:	eb 1c                	jmp    c0014a82 <Vm::faultHandler(regs*)+0x597>
c0014a66:	55                   	push   ebp
c0014a67:	55                   	push   ebp
c0014a68:	50                   	push   eax
c0014a69:	52                   	push   edx
c0014a6a:	e8 19 fa ff ff       	call   c0014488 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014a6f:	83 c4 10             	add    esp,0x10
c0014a72:	89 fa                	mov    edx,edi
c0014a74:	66 ef                	out    dx,ax
c0014a76:	85 c9                	test   ecx,ecx
c0014a78:	74 05                	je     c0014a7f <Vm::faultHandler(regs*)+0x594>
c0014a7a:	83 ee 02             	sub    esi,0x2
c0014a7d:	eb 03                	jmp    c0014a82 <Vm::faultHandler(regs*)+0x597>
c0014a7f:	83 c6 02             	add    esi,0x2
c0014a82:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014a88:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014a8b:	e9 cb 00 00 00       	jmp    c0014b5b <Vm::faultHandler(regs*)+0x670>
c0014a90:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014a97:	83 ec 0c             	sub    esp,0xc
c0014a9a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014a9e:	50                   	push   eax
c0014a9f:	e8 89 f5 ff ff       	call   c001402d <Vm::inbv(unsigned short)>
c0014aa4:	0f b6 c0             	movzx  eax,al
c0014aa7:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014aaa:	eb 3f                	jmp    c0014aeb <Vm::faultHandler(regs*)+0x600>
c0014aac:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ab1:	74 07                	je     c0014aba <Vm::faultHandler(regs*)+0x5cf>
c0014ab3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014ab7:	ed                   	in     eax,dx
c0014ab8:	eb 14                	jmp    c0014ace <Vm::faultHandler(regs*)+0x5e3>
c0014aba:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014abd:	66 31 f6             	xor    si,si
c0014ac0:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014ac3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014ac7:	66 ed                	in     ax,dx
c0014ac9:	0f b7 c0             	movzx  eax,ax
c0014acc:	09 f0                	or     eax,esi
c0014ace:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014ad1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014ad5:	e9 84 00 00 00       	jmp    c0014b5e <Vm::faultHandler(regs*)+0x673>
c0014ada:	52                   	push   edx
c0014adb:	52                   	push   edx
c0014adc:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014ae0:	50                   	push   eax
c0014ae1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ae5:	50                   	push   eax
c0014ae6:	e8 55 f5 ff ff       	call   c0014040 <Vm::outbv(unsigned short, unsigned char)>
c0014aeb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014aef:	eb 53                	jmp    c0014b44 <Vm::faultHandler(regs*)+0x659>
c0014af1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014af4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014af8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014afd:	74 03                	je     c0014b02 <Vm::faultHandler(regs*)+0x617>
c0014aff:	ef                   	out    dx,eax
c0014b00:	eb cf                	jmp    c0014ad1 <Vm::faultHandler(regs*)+0x5e6>
c0014b02:	66 ef                	out    dx,ax
c0014b04:	eb cb                	jmp    c0014ad1 <Vm::faultHandler(regs*)+0x5e6>
c0014b06:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014b0d:	83 ec 0c             	sub    esp,0xc
c0014b10:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014b14:	50                   	push   eax
c0014b15:	e8 13 f5 ff ff       	call   c001402d <Vm::inbv(unsigned short)>
c0014b1a:	0f b6 c0             	movzx  eax,al
c0014b1d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014b20:	eb 1f                	jmp    c0014b41 <Vm::faultHandler(regs*)+0x656>
c0014b22:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014b25:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b2a:	74 03                	je     c0014b2f <Vm::faultHandler(regs*)+0x644>
c0014b2c:	ed                   	in     eax,dx
c0014b2d:	eb 0d                	jmp    c0014b3c <Vm::faultHandler(regs*)+0x651>
c0014b2f:	66 ed                	in     ax,dx
c0014b31:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014b34:	0f b7 c0             	movzx  eax,ax
c0014b37:	66 31 d2             	xor    dx,dx
c0014b3a:	09 d0                	or     eax,edx
c0014b3c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014b3f:	eb 1a                	jmp    c0014b5b <Vm::faultHandler(regs*)+0x670>
c0014b41:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b44:	83 c4 10             	add    esp,0x10
c0014b47:	eb 15                	jmp    c0014b5e <Vm::faultHandler(regs*)+0x673>
c0014b49:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014b4c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014b4f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b54:	74 03                	je     c0014b59 <Vm::faultHandler(regs*)+0x66e>
c0014b56:	ef                   	out    dx,eax
c0014b57:	eb 02                	jmp    c0014b5b <Vm::faultHandler(regs*)+0x670>
c0014b59:	66 ef                	out    dx,ax
c0014b5b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b5e:	b0 01                	mov    al,0x1
c0014b60:	eb 56                	jmp    c0014bb8 <Vm::faultHandler(regs*)+0x6cd>
c0014b62:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b66:	50                   	push   eax
c0014b67:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b6b:	50                   	push   eax
c0014b6c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b70:	50                   	push   eax
c0014b71:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b75:	50                   	push   eax
c0014b76:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b7a:	50                   	push   eax
c0014b7b:	52                   	push   edx
c0014b7c:	52                   	push   edx
c0014b7d:	68 4b e9 01 c0       	push   0xc001e94b
c0014b82:	e8 19 59 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0014b87:	83 c4 20             	add    esp,0x20
c0014b8a:	83 ec 0c             	sub    esp,0xc
c0014b8d:	6a 60                	push   0x60
c0014b8f:	e8 99 f4 ff ff       	call   c001402d <Vm::inbv(unsigned short)>
c0014b94:	83 c4 10             	add    esp,0x10
c0014b97:	3c 1c                	cmp    al,0x1c
c0014b99:	74 04                	je     c0014b9f <Vm::faultHandler(regs*)+0x6b4>
c0014b9b:	3c 5a                	cmp    al,0x5a
c0014b9d:	75 eb                	jne    c0014b8a <Vm::faultHandler(regs*)+0x69f>
c0014b9f:	3c 5a                	cmp    al,0x5a
c0014ba1:	74 04                	je     c0014ba7 <Vm::faultHandler(regs*)+0x6bc>
c0014ba3:	3c 1c                	cmp    al,0x1c
c0014ba5:	75 0f                	jne    c0014bb6 <Vm::faultHandler(regs*)+0x6cb>
c0014ba7:	83 ec 0c             	sub    esp,0xc
c0014baa:	6a 60                	push   0x60
c0014bac:	e8 7c f4 ff ff       	call   c001402d <Vm::inbv(unsigned short)>
c0014bb1:	83 c4 10             	add    esp,0x10
c0014bb4:	eb e9                	jmp    c0014b9f <Vm::faultHandler(regs*)+0x6b4>
c0014bb6:	31 c0                	xor    eax,eax
c0014bb8:	83 c4 1c             	add    esp,0x1c
c0014bbb:	5b                   	pop    ebx
c0014bbc:	5e                   	pop    esi
c0014bbd:	5f                   	pop    edi
c0014bbe:	5d                   	pop    ebp
c0014bbf:	c3                   	ret    

c0014bc0 <noCopro(unsigned long)>:
c0014bc0:	c3                   	ret    

c0014bc1 <nmiHandler(regs*, void*)>:
c0014bc1:	83 ec 0c             	sub    esp,0xc
c0014bc4:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0014bc9:	83 ec 0c             	sub    esp,0xc
c0014bcc:	50                   	push   eax
c0014bcd:	e8 54 24 ff ff       	call   c0007026 <Computer::handleNMI()>
c0014bd2:	83 c4 10             	add    esp,0x10
c0014bd5:	90                   	nop
c0014bd6:	83 c4 0c             	add    esp,0xc
c0014bd9:	c3                   	ret    

c0014bda <doubleFault(regs*, void*)>:
c0014bda:	55                   	push   ebp
c0014bdb:	89 e5                	mov    ebp,esp
c0014bdd:	83 ec 08             	sub    esp,0x8
c0014be0:	83 ec 0c             	sub    esp,0xc
c0014be3:	68 a8 e9 01 c0       	push   0xc001e9a8
c0014be8:	e8 16 b5 ff ff       	call   c0010103 <KePanic(char const*)>
c0014bed:	83 c4 10             	add    esp,0x10
c0014bf0:	90                   	nop
c0014bf1:	c9                   	leave  
c0014bf2:	c3                   	ret    

c0014bf3 <displayDebugInfo(regs*)>:
c0014bf3:	83 ec 1c             	sub    esp,0x1c
c0014bf6:	0f 20 c0             	mov    eax,cr0
c0014bf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014bfd:	0f 20 d0             	mov    eax,cr2
c0014c00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014c04:	0f 20 d8             	mov    eax,cr3
c0014c07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c0b:	0f 20 e0             	mov    eax,cr4
c0014c0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c15:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014c18:	83 ec 08             	sub    esp,0x8
c0014c1b:	50                   	push   eax
c0014c1c:	68 c4 e9 01 c0       	push   0xc001e9c4
c0014c21:	e8 7a 58 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0014c26:	83 c4 10             	add    esp,0x10
c0014c29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c2d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014c30:	83 ec 08             	sub    esp,0x8
c0014c33:	50                   	push   eax
c0014c34:	68 b5 e9 01 c0       	push   0xc001e9b5
c0014c39:	e8 62 58 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0014c3e:	83 c4 10             	add    esp,0x10
c0014c41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c45:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014c48:	83 ec 08             	sub    esp,0x8
c0014c4b:	50                   	push   eax
c0014c4c:	68 c0 e9 01 c0       	push   0xc001e9c0
c0014c51:	e8 4a 58 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0014c56:	83 c4 10             	add    esp,0x10
c0014c59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c5d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c60:	83 ec 08             	sub    esp,0x8
c0014c63:	50                   	push   eax
c0014c64:	68 cf e9 01 c0       	push   0xc001e9cf
c0014c69:	e8 32 58 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0014c6e:	83 c4 10             	add    esp,0x10
c0014c71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c75:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014c78:	83 ec 08             	sub    esp,0x8
c0014c7b:	50                   	push   eax
c0014c7c:	68 da e9 01 c0       	push   0xc001e9da
c0014c81:	e8 1a 58 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0014c86:	83 c4 10             	add    esp,0x10
c0014c89:	83 ec 08             	sub    esp,0x8
c0014c8c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014c90:	68 e5 e9 01 c0       	push   0xc001e9e5
c0014c95:	e8 06 58 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0014c9a:	83 c4 10             	add    esp,0x10
c0014c9d:	83 ec 08             	sub    esp,0x8
c0014ca0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014ca4:	68 f0 e9 01 c0       	push   0xc001e9f0
c0014ca9:	e8 f2 57 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0014cae:	83 c4 10             	add    esp,0x10
c0014cb1:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014cb6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cbc:	83 ec 0c             	sub    esp,0xc
c0014cbf:	50                   	push   eax
c0014cc0:	e8 7e 37 ff ff       	call   c0008443 <setActiveTerminal(VgaText*)>
c0014cc5:	83 c4 10             	add    esp,0x10
c0014cc8:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014ccd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cd3:	83 ec 08             	sub    esp,0x8
c0014cd6:	68 fb e9 01 c0       	push   0xc001e9fb
c0014cdb:	50                   	push   eax
c0014cdc:	e8 a1 3a ff ff       	call   c0008782 <VgaText::puts(char const*)>
c0014ce1:	83 c4 10             	add    esp,0x10
c0014ce4:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014ce9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cef:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014cf4:	8b 12                	mov    edx,DWORD PTR [edx]
c0014cf6:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014cf9:	83 c2 0c             	add    edx,0xc
c0014cfc:	83 ec 08             	sub    esp,0x8
c0014cff:	52                   	push   edx
c0014d00:	50                   	push   eax
c0014d01:	e8 7c 3a ff ff       	call   c0008782 <VgaText::puts(char const*)>
c0014d06:	83 c4 10             	add    esp,0x10
c0014d09:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014d0e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d14:	83 ec 08             	sub    esp,0x8
c0014d17:	68 04 ea 01 c0       	push   0xc001ea04
c0014d1c:	50                   	push   eax
c0014d1d:	e8 60 3a ff ff       	call   c0008782 <VgaText::puts(char const*)>
c0014d22:	83 c4 10             	add    esp,0x10
c0014d25:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014d2a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014d34:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014d37:	83 ec 08             	sub    esp,0x8
c0014d3a:	52                   	push   edx
c0014d3b:	50                   	push   eax
c0014d3c:	e8 fb 39 ff ff       	call   c000873c <VgaText::putx(unsigned int)>
c0014d41:	83 c4 10             	add    esp,0x10
c0014d44:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014d49:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d4f:	83 ec 08             	sub    esp,0x8
c0014d52:	68 0c ea 01 c0       	push   0xc001ea0c
c0014d57:	50                   	push   eax
c0014d58:	e8 25 3a ff ff       	call   c0008782 <VgaText::puts(char const*)>
c0014d5d:	83 c4 10             	add    esp,0x10
c0014d60:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014d65:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014d6f:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0014d72:	83 ec 08             	sub    esp,0x8
c0014d75:	52                   	push   edx
c0014d76:	50                   	push   eax
c0014d77:	e8 c0 39 ff ff       	call   c000873c <VgaText::putx(unsigned int)>
c0014d7c:	83 c4 10             	add    esp,0x10
c0014d7f:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014d84:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d8a:	83 ec 08             	sub    esp,0x8
c0014d8d:	68 14 ea 01 c0       	push   0xc001ea14
c0014d92:	50                   	push   eax
c0014d93:	e8 ea 39 ff ff       	call   c0008782 <VgaText::puts(char const*)>
c0014d98:	83 c4 10             	add    esp,0x10
c0014d9b:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014da0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014da6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014daa:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0014dad:	83 ec 08             	sub    esp,0x8
c0014db0:	52                   	push   edx
c0014db1:	50                   	push   eax
c0014db2:	e8 85 39 ff ff       	call   c000873c <VgaText::putx(unsigned int)>
c0014db7:	83 c4 10             	add    esp,0x10
c0014dba:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014dbf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014dc5:	83 ec 08             	sub    esp,0x8
c0014dc8:	68 1c ea 01 c0       	push   0xc001ea1c
c0014dcd:	50                   	push   eax
c0014dce:	e8 af 39 ff ff       	call   c0008782 <VgaText::puts(char const*)>
c0014dd3:	83 c4 10             	add    esp,0x10
c0014dd6:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014ddb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014de1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014de5:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014de8:	83 ec 08             	sub    esp,0x8
c0014deb:	52                   	push   edx
c0014dec:	50                   	push   eax
c0014ded:	e8 4a 39 ff ff       	call   c000873c <VgaText::putx(unsigned int)>
c0014df2:	83 c4 10             	add    esp,0x10
c0014df5:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014dfa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e00:	83 ec 08             	sub    esp,0x8
c0014e03:	68 24 ea 01 c0       	push   0xc001ea24
c0014e08:	50                   	push   eax
c0014e09:	e8 74 39 ff ff       	call   c0008782 <VgaText::puts(char const*)>
c0014e0e:	83 c4 10             	add    esp,0x10
c0014e11:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014e16:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e1c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e20:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0014e23:	83 ec 08             	sub    esp,0x8
c0014e26:	52                   	push   edx
c0014e27:	50                   	push   eax
c0014e28:	e8 0f 39 ff ff       	call   c000873c <VgaText::putx(unsigned int)>
c0014e2d:	83 c4 10             	add    esp,0x10
c0014e30:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014e35:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e3b:	83 ec 08             	sub    esp,0x8
c0014e3e:	68 2c ea 01 c0       	push   0xc001ea2c
c0014e43:	50                   	push   eax
c0014e44:	e8 39 39 ff ff       	call   c0008782 <VgaText::puts(char const*)>
c0014e49:	83 c4 10             	add    esp,0x10
c0014e4c:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014e51:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e57:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e5b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0014e5e:	83 ec 08             	sub    esp,0x8
c0014e61:	52                   	push   edx
c0014e62:	50                   	push   eax
c0014e63:	e8 d4 38 ff ff       	call   c000873c <VgaText::putx(unsigned int)>
c0014e68:	83 c4 10             	add    esp,0x10
c0014e6b:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014e70:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e76:	83 ec 08             	sub    esp,0x8
c0014e79:	68 34 ea 01 c0       	push   0xc001ea34
c0014e7e:	50                   	push   eax
c0014e7f:	e8 fe 38 ff ff       	call   c0008782 <VgaText::puts(char const*)>
c0014e84:	83 c4 10             	add    esp,0x10
c0014e87:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014e8c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e92:	83 ec 08             	sub    esp,0x8
c0014e95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e99:	50                   	push   eax
c0014e9a:	e8 9d 38 ff ff       	call   c000873c <VgaText::putx(unsigned int)>
c0014e9f:	83 c4 10             	add    esp,0x10
c0014ea2:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014ea7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ead:	83 ec 08             	sub    esp,0x8
c0014eb0:	68 3d ea 01 c0       	push   0xc001ea3d
c0014eb5:	50                   	push   eax
c0014eb6:	e8 c7 38 ff ff       	call   c0008782 <VgaText::puts(char const*)>
c0014ebb:	83 c4 10             	add    esp,0x10
c0014ebe:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014ec3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ec9:	83 ec 08             	sub    esp,0x8
c0014ecc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ed0:	50                   	push   eax
c0014ed1:	e8 66 38 ff ff       	call   c000873c <VgaText::putx(unsigned int)>
c0014ed6:	83 c4 10             	add    esp,0x10
c0014ed9:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014ede:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ee4:	83 ec 08             	sub    esp,0x8
c0014ee7:	68 45 ea 01 c0       	push   0xc001ea45
c0014eec:	50                   	push   eax
c0014eed:	e8 90 38 ff ff       	call   c0008782 <VgaText::puts(char const*)>
c0014ef2:	83 c4 10             	add    esp,0x10
c0014ef5:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c0014efa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f00:	83 ec 08             	sub    esp,0x8
c0014f03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014f07:	50                   	push   eax
c0014f08:	e8 2f 38 ff ff       	call   c000873c <VgaText::putx(unsigned int)>
c0014f0d:	83 c4 10             	add    esp,0x10
c0014f10:	fa                   	cli    
c0014f11:	f4                   	hlt    
c0014f12:	eb fe                	jmp    c0014f12 <displayDebugInfo(regs*)+0x31f>

c0014f14 <HalSystemIdle()>:
c0014f14:	56                   	push   esi
c0014f15:	53                   	push   ebx
c0014f16:	83 ec 14             	sub    esp,0x14
c0014f19:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0014f1e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014f24:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0014f2a:	83 e0 04             	and    eax,0x4
c0014f2d:	84 c0                	test   al,al
c0014f2f:	0f 95 c0             	setne  al
c0014f32:	84 c0                	test   al,al
c0014f34:	74 4c                	je     c0014f82 <HalSystemIdle()+0x6e>
c0014f36:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0014f3b:	83 ec 08             	sub    esp,0x8
c0014f3e:	68 e1 00 00 00       	push   0xe1
c0014f43:	50                   	push   eax
c0014f44:	e8 f5 1e ff ff       	call   c0006e3e <Computer::rdmsr(unsigned int)>
c0014f49:	83 c4 10             	add    esp,0x10
c0014f4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014f50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014f54:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0014f59:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014f5d:	83 e2 02             	and    edx,0x2
c0014f60:	89 d3                	mov    ebx,edx
c0014f62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014f66:	83 e2 00             	and    edx,0x0
c0014f69:	89 d6                	mov    esi,edx
c0014f6b:	56                   	push   esi
c0014f6c:	53                   	push   ebx
c0014f6d:	68 e1 00 00 00       	push   0xe1
c0014f72:	50                   	push   eax
c0014f73:	e8 f2 1e ff ff       	call   c0006e6a <Computer::wrmsr(unsigned int, unsigned long long)>
c0014f78:	83 c4 10             	add    esp,0x10
c0014f7b:	e8 14 b2 fe ff       	call   c0000194 <doTPAUSE>
c0014f80:	eb 01                	jmp    c0014f83 <HalSystemIdle()+0x6f>
c0014f82:	f4                   	hlt    
c0014f83:	90                   	nop
c0014f84:	83 c4 14             	add    esp,0x14
c0014f87:	5b                   	pop    ebx
c0014f88:	5e                   	pop    esi
c0014f89:	c3                   	ret    

c0014f8a <displayProgramFault(char const*)>:
c0014f8a:	83 ec 0c             	sub    esp,0xc
c0014f8d:	83 ec 0c             	sub    esp,0xc
c0014f90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f94:	e8 07 55 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0014f99:	83 c4 10             	add    esp,0x10
c0014f9c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014fa1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fa3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fa6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fac:	85 c0                	test   eax,eax
c0014fae:	74 21                	je     c0014fd1 <displayProgramFault(char const*)+0x47>
c0014fb0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014fb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fb7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fc0:	6a 04                	push   0x4
c0014fc2:	6a 0f                	push   0xf
c0014fc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014fc8:	50                   	push   eax
c0014fc9:	e8 26 38 ff ff       	call   c00087f4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014fce:	83 c4 10             	add    esp,0x10
c0014fd1:	90                   	nop
c0014fd2:	83 c4 0c             	add    esp,0xc
c0014fd5:	c3                   	ret    

c0014fd6 <gpFault(regs*, void*)>:
c0014fd6:	83 ec 1c             	sub    esp,0x1c
c0014fd9:	c7 05 d0 3b 02 c0 eb 44 01 c0 	mov    DWORD PTR ds:0xc0023bd0,0xc00144eb
c0014fe3:	a1 d0 3b 02 c0       	mov    eax,ds:0xc0023bd0
c0014fe8:	85 c0                	test   eax,eax
c0014fea:	74 1c                	je     c0015008 <gpFault(regs*, void*)+0x32>
c0014fec:	a1 d0 3b 02 c0       	mov    eax,ds:0xc0023bd0
c0014ff1:	83 ec 0c             	sub    esp,0xc
c0014ff4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ff8:	ff d0                	call   eax
c0014ffa:	83 c4 10             	add    esp,0x10
c0014ffd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015001:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015006:	75 2e                	jne    c0015036 <gpFault(regs*, void*)+0x60>
c0015008:	83 ec 0c             	sub    esp,0xc
c001500b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001500f:	e8 df fb ff ff       	call   c0014bf3 <displayDebugInfo(regs*)>
c0015014:	83 c4 10             	add    esp,0x10
c0015017:	83 ec 0c             	sub    esp,0xc
c001501a:	68 4d ea 01 c0       	push   0xc001ea4d
c001501f:	e8 66 ff ff ff       	call   c0014f8a <displayProgramFault(char const*)>
c0015024:	83 c4 10             	add    esp,0x10
c0015027:	83 ec 0c             	sub    esp,0xc
c001502a:	6a 00                	push   0x0
c001502c:	e8 af ee ff ff       	call   c0013ee0 <Thr::terminateFromIRQ(int)>
c0015031:	83 c4 10             	add    esp,0x10
c0015034:	eb 01                	jmp    c0015037 <gpFault(regs*, void*)+0x61>
c0015036:	90                   	nop
c0015037:	83 c4 1c             	add    esp,0x1c
c001503a:	c3                   	ret    

c001503b <pgFault(regs*, void*)>:
c001503b:	83 ec 1c             	sub    esp,0x1c
c001503e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015042:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015045:	0f 20 d0             	mov    eax,cr2
c0015048:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001504c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015050:	83 ec 04             	sub    esp,0x4
c0015053:	52                   	push   edx
c0015054:	50                   	push   eax
c0015055:	68 2c eb 01 c0       	push   0xc001eb2c
c001505a:	e8 41 54 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c001505f:	83 c4 10             	add    esp,0x10
c0015062:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015067:	8b 00                	mov    eax,DWORD PTR [eax]
c0015069:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001506c:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0015072:	0f 20 d2             	mov    edx,cr2
c0015075:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015079:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001507d:	83 ec 08             	sub    esp,0x8
c0015080:	52                   	push   edx
c0015081:	50                   	push   eax
c0015082:	e8 4b 50 ff ff       	call   c000a0d2 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015087:	83 c4 10             	add    esp,0x10
c001508a:	84 c0                	test   al,al
c001508c:	75 2e                	jne    c00150bc <pgFault(regs*, void*)+0x81>
c001508e:	83 ec 0c             	sub    esp,0xc
c0015091:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015095:	e8 59 fb ff ff       	call   c0014bf3 <displayDebugInfo(regs*)>
c001509a:	83 c4 10             	add    esp,0x10
c001509d:	83 ec 0c             	sub    esp,0xc
c00150a0:	68 66 ea 01 c0       	push   0xc001ea66
c00150a5:	e8 e0 fe ff ff       	call   c0014f8a <displayProgramFault(char const*)>
c00150aa:	83 c4 10             	add    esp,0x10
c00150ad:	83 ec 0c             	sub    esp,0xc
c00150b0:	6a 00                	push   0x0
c00150b2:	e8 29 ee ff ff       	call   c0013ee0 <Thr::terminateFromIRQ(int)>
c00150b7:	83 c4 10             	add    esp,0x10
c00150ba:	eb 01                	jmp    c00150bd <pgFault(regs*, void*)+0x82>
c00150bc:	90                   	nop
c00150bd:	83 c4 1c             	add    esp,0x1c
c00150c0:	c3                   	ret    

c00150c1 <otherISRHandler(regs*, void*)>:
c00150c1:	83 ec 0c             	sub    esp,0xc
c00150c4:	83 ec 0c             	sub    esp,0xc
c00150c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150cb:	e8 23 fb ff ff       	call   c0014bf3 <displayDebugInfo(regs*)>
c00150d0:	83 c4 10             	add    esp,0x10
c00150d3:	83 ec 0c             	sub    esp,0xc
c00150d6:	68 54 eb 01 c0       	push   0xc001eb54
c00150db:	e8 aa fe ff ff       	call   c0014f8a <displayProgramFault(char const*)>
c00150e0:	83 c4 10             	add    esp,0x10
c00150e3:	83 ec 0c             	sub    esp,0xc
c00150e6:	6a 00                	push   0x0
c00150e8:	e8 f3 ed ff ff       	call   c0013ee0 <Thr::terminateFromIRQ(int)>
c00150ed:	83 c4 10             	add    esp,0x10
c00150f0:	90                   	nop
c00150f1:	83 c4 0c             	add    esp,0xc
c00150f4:	c3                   	ret    

c00150f5 <opcodeFault(regs*, void*)>:
c00150f5:	55                   	push   ebp
c00150f6:	89 e5                	mov    ebp,esp
c00150f8:	83 ec 08             	sub    esp,0x8
c00150fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150fe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015101:	83 ec 08             	sub    esp,0x8
c0015104:	50                   	push   eax
c0015105:	68 71 ea 01 c0       	push   0xc001ea71
c001510a:	e8 91 53 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c001510f:	83 c4 10             	add    esp,0x10
c0015112:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0015117:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001511d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0015123:	84 c0                	test   al,al
c0015125:	74 21                	je     c0015148 <opcodeFault(regs*, void*)+0x53>
c0015127:	83 ec 0c             	sub    esp,0xc
c001512a:	68 7c eb 01 c0       	push   0xc001eb7c
c001512f:	e8 6c 53 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0015134:	83 c4 10             	add    esp,0x10
c0015137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001513a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001513d:	8d 50 19             	lea    edx,[eax+0x19]
c0015140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015143:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015146:	eb 2b                	jmp    c0015173 <opcodeFault(regs*, void*)+0x7e>
c0015148:	83 ec 0c             	sub    esp,0xc
c001514b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001514e:	e8 a0 fa ff ff       	call   c0014bf3 <displayDebugInfo(regs*)>
c0015153:	83 c4 10             	add    esp,0x10
c0015156:	83 ec 0c             	sub    esp,0xc
c0015159:	68 7f ea 01 c0       	push   0xc001ea7f
c001515e:	e8 27 fe ff ff       	call   c0014f8a <displayProgramFault(char const*)>
c0015163:	83 c4 10             	add    esp,0x10
c0015166:	83 ec 0c             	sub    esp,0xc
c0015169:	6a 00                	push   0x0
c001516b:	e8 70 ed ff ff       	call   c0013ee0 <Thr::terminateFromIRQ(int)>
c0015170:	83 c4 10             	add    esp,0x10
c0015173:	c9                   	leave  
c0015174:	c3                   	ret    

c0015175 <i386SaveCoprocessor(void*)>:
c0015175:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015179:	83 c0 3f             	add    eax,0x3f
c001517c:	83 e0 c0             	and    eax,0xffffffc0
c001517f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015183:	ff 25 cc 3b 02 c0    	jmp    DWORD PTR ds:0xc0023bcc

c0015189 <i386LoadCoprocessor(void*)>:
c0015189:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001518d:	83 c0 3f             	add    eax,0x3f
c0015190:	83 e0 c0             	and    eax,0xffffffc0
c0015193:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015197:	ff 25 c8 3b 02 c0    	jmp    DWORD PTR ds:0xc0023bc8

c001519d <x87EmulHandler(regs*, void*)>:
c001519d:	53                   	push   ebx
c001519e:	83 ec 08             	sub    esp,0x8
c00151a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151a6:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00151aa:	74 10                	je     c00151bc <x87EmulHandler(regs*, void*)+0x1f>
c00151ac:	83 ec 0c             	sub    esp,0xc
c00151af:	68 8c ea 01 c0       	push   0xc001ea8c
c00151b4:	e8 4a af ff ff       	call   c0010103 <KePanic(char const*)>
c00151b9:	83 c4 10             	add    esp,0x10
c00151bc:	0f 20 c0             	mov    eax,cr0
c00151bf:	a8 08                	test   al,0x8
c00151c1:	74 59                	je     c001521c <x87EmulHandler(regs*, void*)+0x7f>
c00151c3:	0f 06                	clts   
c00151c5:	a1 c4 3b 02 c0       	mov    eax,ds:0xc0023bc4
c00151ca:	85 c0                	test   eax,eax
c00151cc:	74 0e                	je     c00151dc <x87EmulHandler(regs*, void*)+0x3f>
c00151ce:	83 ec 0c             	sub    esp,0xc
c00151d1:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00151d4:	e8 9c ff ff ff       	call   c0015175 <i386SaveCoprocessor(void*)>
c00151d9:	83 c4 10             	add    esp,0x10
c00151dc:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00151e2:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00151e6:	75 12                	jne    c00151fa <x87EmulHandler(regs*, void*)+0x5d>
c00151e8:	83 ec 0c             	sub    esp,0xc
c00151eb:	68 40 02 00 00       	push   0x240
c00151f0:	e8 10 26 ff ff       	call   c0007805 <malloc>
c00151f5:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00151f8:	eb 10                	jmp    c001520a <x87EmulHandler(regs*, void*)+0x6d>
c00151fa:	83 ec 0c             	sub    esp,0xc
c00151fd:	a1 c4 3b 02 c0       	mov    eax,ds:0xc0023bc4
c0015202:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015205:	e8 7f ff ff ff       	call   c0015189 <i386LoadCoprocessor(void*)>
c001520a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001520f:	83 c4 10             	add    esp,0x10
c0015212:	a3 c4 3b 02 c0       	mov    ds:0xc0023bc4,eax
c0015217:	83 c4 08             	add    esp,0x8
c001521a:	5b                   	pop    ebx
c001521b:	c3                   	ret    
c001521c:	83 ec 0c             	sub    esp,0xc
c001521f:	68 a0 ea 01 c0       	push   0xc001eaa0
c0015224:	e8 77 52 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0015229:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015231:	83 c4 18             	add    esp,0x18
c0015234:	5b                   	pop    ebx
c0015235:	e9 a6 ec ff ff       	jmp    c0013ee0 <Thr::terminateFromIRQ(int)>

c001523a <HalInitialiseCoprocessor()>:
c001523a:	83 ec 10             	sub    esp,0x10
c001523d:	c7 05 c4 3b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023bc4,0x0
c0015247:	6a 00                	push   0x0
c0015249:	68 9d 51 01 c0       	push   0xc001519d
c001524e:	6a 07                	push   0x7
c0015250:	e8 bf 6b ff ff       	call   c000be14 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015255:	e8 e6 65 00 00       	call   c001b840 <avxDetect>
c001525a:	83 c4 10             	add    esp,0x10
c001525d:	85 c0                	test   eax,eax
c001525f:	74 1c                	je     c001527d <HalInitialiseCoprocessor()+0x43>
c0015261:	c7 05 cc 3b 02 c0 6a b8 01 c0 	mov    DWORD PTR ds:0xc0023bcc,0xc001b86a
c001526b:	c7 05 c8 3b 02 c0 7b b8 01 c0 	mov    DWORD PTR ds:0xc0023bc8,0xc001b87b
c0015275:	83 c4 0c             	add    esp,0xc
c0015278:	e9 0f 66 00 00       	jmp    c001b88c <avxInit>
c001527d:	e8 3e 68 00 00       	call   c001bac0 <absolutelyNoChanceInHell>
c0015282:	85 c0                	test   eax,eax
c0015284:	74 1c                	je     c00152a2 <HalInitialiseCoprocessor()+0x68>
c0015286:	c7 05 cc 3b 02 c0 d8 ba 01 c0 	mov    DWORD PTR ds:0xc0023bcc,0xc001bad8
c0015290:	c7 05 c8 3b 02 c0 e0 ba 01 c0 	mov    DWORD PTR ds:0xc0023bc8,0xc001bae0
c001529a:	83 c4 0c             	add    esp,0xc
c001529d:	e9 46 68 00 00       	jmp    c001bae8 <sseInit>
c00152a2:	e8 5f 68 00 00       	call   c001bb06 <x87Detect>
c00152a7:	85 c0                	test   eax,eax
c00152a9:	74 1c                	je     c00152c7 <HalInitialiseCoprocessor()+0x8d>
c00152ab:	c7 05 cc 3b 02 c0 21 bb 01 c0 	mov    DWORD PTR ds:0xc0023bcc,0xc001bb21
c00152b5:	c7 05 c8 3b 02 c0 28 bb 01 c0 	mov    DWORD PTR ds:0xc0023bc8,0xc001bb28
c00152bf:	83 c4 0c             	add    esp,0xc
c00152c2:	e9 68 68 00 00       	jmp    c001bb2f <x87Init>
c00152c7:	c7 05 cc 3b 02 c0 c0 4b 01 c0 	mov    DWORD PTR ds:0xc0023bcc,0xc0014bc0
c00152d1:	c7 05 c8 3b 02 c0 c0 4b 01 c0 	mov    DWORD PTR ds:0xc0023bc8,0xc0014bc0
c00152db:	0f 20 c0             	mov    eax,cr0
c00152de:	83 c8 04             	or     eax,0x4
c00152e1:	0f 22 c0             	mov    cr0,eax
c00152e4:	83 c4 0c             	add    esp,0xc
c00152e7:	c3                   	ret    

c00152e8 <HalPanic(char const*)>:
c00152e8:	53                   	push   ebx
c00152e9:	83 ec 10             	sub    esp,0x10
c00152ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00152f0:	fa                   	cli    
c00152f1:	53                   	push   ebx
c00152f2:	68 b6 ea 01 c0       	push   0xc001eab6
c00152f7:	e8 a4 51 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c00152fc:	83 c4 0c             	add    esp,0xc
c00152ff:	6a 01                	push   0x1
c0015301:	6a 0f                	push   0xf
c0015303:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c0015309:	e8 88 2f ff ff       	call   c0008296 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001530e:	58                   	pop    eax
c001530f:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c0015315:	e8 74 31 ff ff       	call   c000848e <VgaText::clearScreen()>
c001531a:	5a                   	pop    edx
c001531b:	59                   	pop    ecx
c001531c:	68 1e eb 01 c0       	push   0xc001eb1e
c0015321:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c0015327:	e8 a2 2f ff ff       	call   c00082ce <VgaText::setTitle(char*)>
c001532c:	83 c4 0c             	add    esp,0xc
c001532f:	6a 01                	push   0x1
c0015331:	6a 0f                	push   0xf
c0015333:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c0015339:	e8 58 2f ff ff       	call   c0008296 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001533e:	58                   	pop    eax
c001533f:	5a                   	pop    edx
c0015340:	68 cf ea 01 c0       	push   0xc001eacf
c0015345:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c001534b:	e8 32 34 ff ff       	call   c0008782 <VgaText::puts(char const*)>
c0015350:	83 c4 0c             	add    esp,0xc
c0015353:	6a 0f                	push   0xf
c0015355:	6a 01                	push   0x1
c0015357:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c001535d:	e8 34 2f ff ff       	call   c0008296 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015362:	59                   	pop    ecx
c0015363:	58                   	pop    eax
c0015364:	68 d8 ea 01 c0       	push   0xc001ead8
c0015369:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c001536f:	e8 0e 34 ff ff       	call   c0008782 <VgaText::puts(char const*)>
c0015374:	83 c4 0c             	add    esp,0xc
c0015377:	6a 01                	push   0x1
c0015379:	6a 0f                	push   0xf
c001537b:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c0015381:	e8 10 2f ff ff       	call   c0008296 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015386:	58                   	pop    eax
c0015387:	5a                   	pop    edx
c0015388:	68 1c eb 01 c0       	push   0xc001eb1c
c001538d:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c0015393:	e8 ea 33 ff ff       	call   c0008782 <VgaText::puts(char const*)>
c0015398:	59                   	pop    ecx
c0015399:	58                   	pop    eax
c001539a:	68 e5 ea 01 c0       	push   0xc001eae5
c001539f:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c00153a5:	e8 d8 33 ff ff       	call   c0008782 <VgaText::puts(char const*)>
c00153aa:	58                   	pop    eax
c00153ab:	5a                   	pop    edx
c00153ac:	68 1f eb 01 c0       	push   0xc001eb1f
c00153b1:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c00153b7:	e8 c6 33 ff ff       	call   c0008782 <VgaText::puts(char const*)>
c00153bc:	59                   	pop    ecx
c00153bd:	58                   	pop    eax
c00153be:	53                   	push   ebx
c00153bf:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c00153c5:	e8 b8 33 ff ff       	call   c0008782 <VgaText::puts(char const*)>
c00153ca:	58                   	pop    eax
c00153cb:	5a                   	pop    edx
c00153cc:	68 1c eb 01 c0       	push   0xc001eb1c
c00153d1:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c00153d7:	e8 a6 33 ff ff       	call   c0008782 <VgaText::puts(char const*)>
c00153dc:	83 c4 10             	add    esp,0x10
c00153df:	eb fe                	jmp    c00153df <HalPanic(char const*)+0xf7>

c00153e1 <HalQueryPerformanceCounter()>:
c00153e1:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c00153e6:	31 d2                	xor    edx,edx
c00153e8:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00153ee:	31 c0                	xor    eax,eax
c00153f0:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00153f7:	74 02                	je     c00153fb <HalQueryPerformanceCounter()+0x1a>
c00153f9:	0f 31                	rdtsc  
c00153fb:	c3                   	ret    

c00153fc <HalInitialise()>:
c00153fc:	53                   	push   ebx
c00153fd:	83 ec 08             	sub    esp,0x8
c0015400:	e8 42 6c ff ff       	call   c000c047 <setupINTS()>
c0015405:	80 3d 40 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022f40,0x0
c001540c:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0015411:	75 07                	jne    c001541a <HalInitialise()+0x1e>
c0015413:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c001541a:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0015420:	83 e0 01             	and    eax,0x1
c0015423:	a2 c0 3b 02 c0       	mov    ds:0xc0023bc0,al
c0015428:	e8 a7 02 00 00       	call   c00156d4 <picOpen()>
c001542d:	80 3d c0 3b 02 c0 00 	cmp    BYTE PTR ds:0xc0023bc0,0x0
c0015434:	74 0a                	je     c0015440 <HalInitialise()+0x44>
c0015436:	e8 e1 01 00 00       	call   c001561c <picDisable()>
c001543b:	e8 74 5d 00 00       	call   c001b1b4 <apicOpen()>
c0015440:	bb 0f 00 00 00       	mov    ebx,0xf
c0015445:	50                   	push   eax
c0015446:	6a 00                	push   0x0
c0015448:	68 c1 50 01 c0       	push   0xc00150c1
c001544d:	6a 00                	push   0x0
c001544f:	e8 c0 69 ff ff       	call   c000be14 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015454:	83 c4 0c             	add    esp,0xc
c0015457:	6a 00                	push   0x0
c0015459:	68 c1 50 01 c0       	push   0xc00150c1
c001545e:	6a 01                	push   0x1
c0015460:	e8 af 69 ff ff       	call   c000be14 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015465:	83 c4 0c             	add    esp,0xc
c0015468:	6a 00                	push   0x0
c001546a:	68 c1 4b 01 c0       	push   0xc0014bc1
c001546f:	6a 02                	push   0x2
c0015471:	e8 9e 69 ff ff       	call   c000be14 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015476:	83 c4 0c             	add    esp,0xc
c0015479:	6a 00                	push   0x0
c001547b:	68 c1 50 01 c0       	push   0xc00150c1
c0015480:	6a 03                	push   0x3
c0015482:	e8 8d 69 ff ff       	call   c000be14 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015487:	83 c4 0c             	add    esp,0xc
c001548a:	6a 00                	push   0x0
c001548c:	68 c1 50 01 c0       	push   0xc00150c1
c0015491:	6a 04                	push   0x4
c0015493:	e8 7c 69 ff ff       	call   c000be14 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015498:	83 c4 0c             	add    esp,0xc
c001549b:	6a 00                	push   0x0
c001549d:	68 c1 50 01 c0       	push   0xc00150c1
c00154a2:	6a 05                	push   0x5
c00154a4:	e8 6b 69 ff ff       	call   c000be14 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00154a9:	83 c4 0c             	add    esp,0xc
c00154ac:	6a 00                	push   0x0
c00154ae:	68 f5 50 01 c0       	push   0xc00150f5
c00154b3:	6a 06                	push   0x6
c00154b5:	e8 5a 69 ff ff       	call   c000be14 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00154ba:	83 c4 0c             	add    esp,0xc
c00154bd:	6a 00                	push   0x0
c00154bf:	68 da 4b 01 c0       	push   0xc0014bda
c00154c4:	6a 08                	push   0x8
c00154c6:	e8 49 69 ff ff       	call   c000be14 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00154cb:	83 c4 0c             	add    esp,0xc
c00154ce:	6a 00                	push   0x0
c00154d0:	68 c1 50 01 c0       	push   0xc00150c1
c00154d5:	6a 09                	push   0x9
c00154d7:	e8 38 69 ff ff       	call   c000be14 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00154dc:	83 c4 0c             	add    esp,0xc
c00154df:	6a 00                	push   0x0
c00154e1:	68 c1 50 01 c0       	push   0xc00150c1
c00154e6:	6a 0a                	push   0xa
c00154e8:	e8 27 69 ff ff       	call   c000be14 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00154ed:	83 c4 0c             	add    esp,0xc
c00154f0:	6a 00                	push   0x0
c00154f2:	68 c1 50 01 c0       	push   0xc00150c1
c00154f7:	6a 0b                	push   0xb
c00154f9:	e8 16 69 ff ff       	call   c000be14 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00154fe:	83 c4 0c             	add    esp,0xc
c0015501:	6a 00                	push   0x0
c0015503:	68 d6 4f 01 c0       	push   0xc0014fd6
c0015508:	6a 0d                	push   0xd
c001550a:	e8 05 69 ff ff       	call   c000be14 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001550f:	83 c4 0c             	add    esp,0xc
c0015512:	6a 00                	push   0x0
c0015514:	68 3b 50 01 c0       	push   0xc001503b
c0015519:	6a 0e                	push   0xe
c001551b:	e8 f4 68 ff ff       	call   c000be14 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015520:	83 c4 10             	add    esp,0x10
c0015523:	50                   	push   eax
c0015524:	6a 00                	push   0x0
c0015526:	68 c1 50 01 c0       	push   0xc00150c1
c001552b:	53                   	push   ebx
c001552c:	43                   	inc    ebx
c001552d:	e8 e2 68 ff ff       	call   c000be14 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015532:	83 c4 10             	add    esp,0x10
c0015535:	83 fb 1e             	cmp    ebx,0x1e
c0015538:	75 e9                	jne    c0015523 <HalInitialise()+0x127>
c001553a:	50                   	push   eax
c001553b:	6a 00                	push   0x0
c001553d:	68 ce 11 01 c0       	push   0xc00111ce
c0015542:	6a 60                	push   0x60
c0015544:	e8 cb 68 ff ff       	call   c000be14 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015549:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c001554e:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015558:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001555f:	e8 a1 22 ff ff       	call   c0007805 <malloc>
c0015564:	89 04 24             	mov    DWORD PTR [esp],eax
c0015567:	89 c3                	mov    ebx,eax
c0015569:	e8 2e 09 00 00       	call   c0015e9c <RTC::RTC()>
c001556e:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015578:	5a                   	pop    edx
c0015579:	59                   	pop    ecx
c001557a:	53                   	push   ebx
c001557b:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015581:	e8 5a 63 ff ff       	call   c000b8e0 <Device::addChild(Device*)>
c0015586:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015588:	6a 00                	push   0x0
c001558a:	6a 00                	push   0x0
c001558c:	6a 00                	push   0x0
c001558e:	53                   	push   ebx
c001558f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015592:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0015597:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001559d:	83 c4 28             	add    esp,0x28
c00155a0:	5b                   	pop    ebx
c00155a1:	c3                   	ret    

c00155a2 <HalMakeBeep(int)>:
c00155a2:	53                   	push   ebx
c00155a3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00155a7:	85 db                	test   ebx,ebx
c00155a9:	75 07                	jne    c00155b2 <HalMakeBeep(int)+0x10>
c00155ab:	e4 61                	in     al,0x61
c00155ad:	83 e0 fc             	and    eax,0xfffffffc
c00155b0:	eb 26                	jmp    c00155d8 <HalMakeBeep(int)+0x36>
c00155b2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00155b7:	99                   	cdq    
c00155b8:	f7 fb                	idiv   ebx
c00155ba:	89 c1                	mov    ecx,eax
c00155bc:	b0 b6                	mov    al,0xb6
c00155be:	e6 43                	out    0x43,al
c00155c0:	88 c8                	mov    al,cl
c00155c2:	e6 42                	out    0x42,al
c00155c4:	89 c8                	mov    eax,ecx
c00155c6:	c1 e8 08             	shr    eax,0x8
c00155c9:	e6 42                	out    0x42,al
c00155cb:	e4 61                	in     al,0x61
c00155cd:	88 c2                	mov    dl,al
c00155cf:	83 ca 03             	or     edx,0x3
c00155d2:	38 c2                	cmp    dl,al
c00155d4:	74 04                	je     c00155da <HalMakeBeep(int)+0x38>
c00155d6:	88 d0                	mov    al,dl
c00155d8:	e6 61                	out    0x61,al
c00155da:	5b                   	pop    ebx
c00155db:	c3                   	ret    

c00155dc <HalGetRand()>:
c00155dc:	31 c0                	xor    eax,eax
c00155de:	c3                   	ret    

c00155df <HalEndOfInterrupt(int)>:
c00155df:	80 3d c0 3b 02 c0 00 	cmp    BYTE PTR ds:0xc0023bc0,0x0
c00155e6:	74 23                	je     c001560b <HalEndOfInterrupt(int)+0x2c>
c00155e8:	83 ec 14             	sub    esp,0x14
c00155eb:	6a 1b                	push   0x1b
c00155ed:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c00155f3:	e8 46 18 ff ff       	call   c0006e3e <Computer::rdmsr(unsigned int)>
c00155f8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00155fd:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015607:	83 c4 1c             	add    esp,0x1c
c001560a:	c3                   	ret    
c001560b:	e9 54 02 00 00       	jmp    c0015864 <picEOI(int)>

c0015610 <HalRestart()>:
c0015610:	c3                   	ret    

c0015611 <HalShutdown()>:
c0015611:	c3                   	ret    

c0015612 <HalSleep()>:
c0015612:	c3                   	ret    
c0015613:	90                   	nop

c0015614 <picIoWait()>:
c0015614:	eb 00                	jmp    c0015616 <picIoWait()+0x2>
c0015616:	eb 00                	jmp    c0015618 <picIoWait()+0x4>
c0015618:	90                   	nop
c0015619:	c3                   	ret    
c001561a:	66 90                	xchg   ax,ax

c001561c <picDisable()>:
c001561c:	83 ec 10             	sub    esp,0x10
c001561f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015626:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001562b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001562f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015634:	ee                   	out    dx,al
c0015635:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001563c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015641:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015645:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001564a:	ee                   	out    dx,al
c001564b:	90                   	nop
c001564c:	83 c4 10             	add    esp,0x10
c001564f:	c3                   	ret    

c0015650 <picGetIRQReg(int)>:
c0015650:	83 ec 10             	sub    esp,0x10
c0015653:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015657:	25 ff 00 00 00       	and    eax,0xff
c001565c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015663:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015667:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001566b:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015670:	ee                   	out    dx,al
c0015671:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015675:	25 ff 00 00 00       	and    eax,0xff
c001567a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015681:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015685:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015689:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001568e:	ee                   	out    dx,al
c001568f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015696:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001569b:	89 c2                	mov    edx,eax
c001569d:	ec                   	in     al,dx
c001569e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00156a2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00156a6:	25 ff 00 00 00       	and    eax,0xff
c00156ab:	c1 e0 08             	shl    eax,0x8
c00156ae:	89 c1                	mov    ecx,eax
c00156b0:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00156b7:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00156bc:	89 c2                	mov    edx,eax
c00156be:	ec                   	in     al,dx
c00156bf:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00156c3:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00156c7:	25 ff 00 00 00       	and    eax,0xff
c00156cc:	09 c8                	or     eax,ecx
c00156ce:	83 c4 10             	add    esp,0x10
c00156d1:	c3                   	ret    
c00156d2:	66 90                	xchg   ax,ax

c00156d4 <picOpen()>:
c00156d4:	83 ec 50             	sub    esp,0x50
c00156d7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00156de:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00156e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00156e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00156eb:	ee                   	out    dx,al
c00156ec:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00156f3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00156f8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00156fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015700:	ee                   	out    dx,al
c0015701:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015709:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015711:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015718:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001571c:	89 c2                	mov    edx,eax
c001571e:	ec                   	in     al,dx
c001571f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015723:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015727:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001572b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015732:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015736:	89 c2                	mov    edx,eax
c0015738:	ec                   	in     al,dx
c0015739:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001573d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015741:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015745:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001574c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015751:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015755:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015759:	ee                   	out    dx,al
c001575a:	e8 b5 fe ff ff       	call   c0015614 <picIoWait()>
c001575f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015766:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001576b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001576f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015773:	ee                   	out    dx,al
c0015774:	e8 9b fe ff ff       	call   c0015614 <picIoWait()>
c0015779:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001577d:	25 ff 00 00 00       	and    eax,0xff
c0015782:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015789:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001578d:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015791:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015795:	ee                   	out    dx,al
c0015796:	e8 79 fe ff ff       	call   c0015614 <picIoWait()>
c001579b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001579f:	25 ff 00 00 00       	and    eax,0xff
c00157a4:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00157ab:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00157af:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00157b3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00157b7:	ee                   	out    dx,al
c00157b8:	e8 57 fe ff ff       	call   c0015614 <picIoWait()>
c00157bd:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00157c4:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00157c9:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00157cd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00157d1:	ee                   	out    dx,al
c00157d2:	e8 3d fe ff ff       	call   c0015614 <picIoWait()>
c00157d7:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00157de:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00157e3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00157e7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00157eb:	ee                   	out    dx,al
c00157ec:	e8 23 fe ff ff       	call   c0015614 <picIoWait()>
c00157f1:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00157f8:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00157fd:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015801:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015805:	ee                   	out    dx,al
c0015806:	e8 09 fe ff ff       	call   c0015614 <picIoWait()>
c001580b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015812:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015817:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001581b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001581f:	ee                   	out    dx,al
c0015820:	e8 ef fd ff ff       	call   c0015614 <picIoWait()>
c0015825:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015829:	25 ff 00 00 00       	and    eax,0xff
c001582e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015835:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015839:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001583d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015841:	ee                   	out    dx,al
c0015842:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015846:	25 ff 00 00 00       	and    eax,0xff
c001584b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015852:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015856:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001585a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001585e:	ee                   	out    dx,al
c001585f:	90                   	nop
c0015860:	83 c4 50             	add    esp,0x50
c0015863:	c3                   	ret    

c0015864 <picEOI(int)>:
c0015864:	83 ec 10             	sub    esp,0x10
c0015867:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001586c:	75 22                	jne    c0015890 <picEOI(int)+0x2c>
c001586e:	6a 0b                	push   0xb
c0015870:	e8 db fd ff ff       	call   c0015650 <picGetIRQReg(int)>
c0015875:	83 c4 04             	add    esp,0x4
c0015878:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001587d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015882:	25 ff ff 00 00       	and    eax,0xffff
c0015887:	25 80 00 00 00       	and    eax,0x80
c001588c:	74 72                	je     c0015900 <picEOI(int)+0x9c>
c001588e:	66 90                	xchg   ax,ax
c0015890:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015895:	75 31                	jne    c00158c8 <picEOI(int)+0x64>
c0015897:	6a 0b                	push   0xb
c0015899:	e8 b2 fd ff ff       	call   c0015650 <picGetIRQReg(int)>
c001589e:	83 c4 04             	add    esp,0x4
c00158a1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00158a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00158aa:	66 85 c0             	test   ax,ax
c00158ad:	78 19                	js     c00158c8 <picEOI(int)+0x64>
c00158af:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00158b6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00158bb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00158bf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00158c4:	ee                   	out    dx,al
c00158c5:	eb 3d                	jmp    c0015904 <picEOI(int)+0xa0>
c00158c7:	90                   	nop
c00158c8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00158cd:	7e 19                	jle    c00158e8 <picEOI(int)+0x84>
c00158cf:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00158d6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00158db:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00158df:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00158e4:	ee                   	out    dx,al
c00158e5:	8d 76 00             	lea    esi,[esi+0x0]
c00158e8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00158ef:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00158f4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00158f8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00158fd:	ee                   	out    dx,al
c00158fe:	eb 04                	jmp    c0015904 <picEOI(int)+0xa0>
c0015900:	90                   	nop
c0015901:	8d 76 00             	lea    esi,[esi+0x0]
c0015904:	83 c4 10             	add    esp,0x10
c0015907:	c3                   	ret    

c0015908 <RTC::open(int, int, void*)>:
c0015908:	31 c0                	xor    eax,eax
c001590a:	c3                   	ret    
c001590b:	90                   	nop

c001590c <RTC::close(int, int, void*)>:
c001590c:	31 c0                	xor    eax,eax
c001590e:	c3                   	ret    
c001590f:	90                   	nop

c0015910 <RTC::timeInSecondsUTC()>:
c0015910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015914:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001591a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015920:	c3                   	ret    
c0015921:	90                   	nop

c0015922 <RTC::timeInDatetimeUTC()>:
c0015922:	53                   	push   ebx
c0015923:	83 ec 14             	sub    esp,0x14
c0015926:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001592a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001592e:	8b 10                	mov    edx,DWORD PTR [eax]
c0015930:	50                   	push   eax
c0015931:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015934:	83 c4 0c             	add    esp,0xc
c0015937:	52                   	push   edx
c0015938:	50                   	push   eax
c0015939:	53                   	push   ebx
c001593a:	e8 15 5d ff ff       	call   c000b654 <secondsToDatetime(unsigned long long)>
c001593f:	89 d8                	mov    eax,ebx
c0015941:	83 c4 14             	add    esp,0x14
c0015944:	5b                   	pop    ebx
c0015945:	c2 04 00             	ret    0x4

c0015948 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015948:	56                   	push   esi
c0015949:	53                   	push   ebx
c001594a:	83 ec 14             	sub    esp,0x14
c001594d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015951:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015953:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015956:	8d 44 24 08          	lea    eax,[esp+0x8]
c001595a:	52                   	push   edx
c001595b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001595f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015963:	50                   	push   eax
c0015964:	e8 eb 5c ff ff       	call   c000b654 <secondsToDatetime(unsigned long long)>
c0015969:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001596d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015971:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015975:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015979:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001597d:	89 f0                	mov    eax,esi
c001597f:	83 c4 20             	add    esp,0x20
c0015982:	5b                   	pop    ebx
c0015983:	5e                   	pop    esi
c0015984:	ff e0                	jmp    eax

c0015986 <RTC::~RTC()>:
c0015986:	83 ec 0c             	sub    esp,0xc
c0015989:	ba bc eb 01 c0       	mov    edx,0xc001ebbc
c001598e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015992:	89 10                	mov    DWORD PTR [eax],edx
c0015994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015998:	83 ec 0c             	sub    esp,0xc
c001599b:	50                   	push   eax
c001599c:	e8 37 5a ff ff       	call   c000b3d8 <Clock::~Clock()>
c00159a1:	83 c4 10             	add    esp,0x10
c00159a4:	90                   	nop
c00159a5:	83 c4 0c             	add    esp,0xc
c00159a8:	c3                   	ret    
c00159a9:	90                   	nop

c00159aa <RTC::~RTC()>:
c00159aa:	83 ec 0c             	sub    esp,0xc
c00159ad:	83 ec 0c             	sub    esp,0xc
c00159b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159b4:	e8 cd ff ff ff       	call   c0015986 <RTC::~RTC()>
c00159b9:	83 c4 10             	add    esp,0x10
c00159bc:	83 ec 08             	sub    esp,0x8
c00159bf:	68 60 01 00 00       	push   0x160
c00159c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159c8:	e8 dd 49 ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c00159cd:	83 c4 10             	add    esp,0x10
c00159d0:	83 c4 0c             	add    esp,0xc
c00159d3:	c3                   	ret    

c00159d4 <RTC::get_update_in_progress_flag()>:
c00159d4:	83 ec 14             	sub    esp,0x14
c00159d7:	6a 0a                	push   0xa
c00159d9:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c00159df:	e8 0e 15 ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c00159e4:	83 c4 1c             	add    esp,0x1c
c00159e7:	c0 e8 07             	shr    al,0x7
c00159ea:	c3                   	ret    
c00159eb:	90                   	nop

c00159ec <RTC::completeRTCRefresh()>:
c00159ec:	55                   	push   ebp
c00159ed:	57                   	push   edi
c00159ee:	56                   	push   esi
c00159ef:	53                   	push   ebx
c00159f0:	83 ec 2c             	sub    esp,0x2c
c00159f3:	8b 1d 4c 2c 02 c0    	mov    ebx,DWORD PTR ds:0xc0022c4c
c00159f9:	83 ec 0c             	sub    esp,0xc
c00159fc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015a00:	e8 cf ff ff ff       	call   c00159d4 <RTC::get_update_in_progress_flag()>
c0015a05:	83 c4 10             	add    esp,0x10
c0015a08:	84 c0                	test   al,al
c0015a0a:	74 0e                	je     c0015a1a <RTC::completeRTCRefresh()+0x2e>
c0015a0c:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015a12:	3b 05 4c 2c 02 c0    	cmp    eax,DWORD PTR ds:0xc0022c4c
c0015a18:	73 df                	jae    c00159f9 <RTC::completeRTCRefresh()+0xd>
c0015a1a:	55                   	push   ebp
c0015a1b:	55                   	push   ebp
c0015a1c:	6a 00                	push   0x0
c0015a1e:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015a24:	e8 c9 14 ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c0015a29:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015a2d:	58                   	pop    eax
c0015a2e:	5a                   	pop    edx
c0015a2f:	6a 02                	push   0x2
c0015a31:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015a37:	e8 b6 14 ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c0015a3c:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015a40:	59                   	pop    ecx
c0015a41:	5b                   	pop    ebx
c0015a42:	6a 04                	push   0x4
c0015a44:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015a4a:	e8 a3 14 ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c0015a4f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015a53:	5e                   	pop    esi
c0015a54:	5f                   	pop    edi
c0015a55:	6a 07                	push   0x7
c0015a57:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015a5d:	e8 90 14 ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c0015a62:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015a66:	5d                   	pop    ebp
c0015a67:	58                   	pop    eax
c0015a68:	6a 08                	push   0x8
c0015a6a:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015a70:	e8 7d 14 ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c0015a75:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015a79:	58                   	pop    eax
c0015a7a:	5a                   	pop    edx
c0015a7b:	6a 09                	push   0x9
c0015a7d:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015a83:	e8 6a 14 ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c0015a88:	83 c4 10             	add    esp,0x10
c0015a8b:	0f b6 e8             	movzx  ebp,al
c0015a8e:	8b 1d 4c 2c 02 c0    	mov    ebx,DWORD PTR ds:0xc0022c4c
c0015a94:	83 ec 0c             	sub    esp,0xc
c0015a97:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015a9b:	e8 34 ff ff ff       	call   c00159d4 <RTC::get_update_in_progress_flag()>
c0015aa0:	83 c4 10             	add    esp,0x10
c0015aa3:	84 c0                	test   al,al
c0015aa5:	74 0e                	je     c0015ab5 <RTC::completeRTCRefresh()+0xc9>
c0015aa7:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015aad:	3b 05 4c 2c 02 c0    	cmp    eax,DWORD PTR ds:0xc0022c4c
c0015ab3:	73 df                	jae    c0015a94 <RTC::completeRTCRefresh()+0xa8>
c0015ab5:	50                   	push   eax
c0015ab6:	50                   	push   eax
c0015ab7:	6a 00                	push   0x0
c0015ab9:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015abf:	e8 2e 14 ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c0015ac4:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015ac8:	58                   	pop    eax
c0015ac9:	5a                   	pop    edx
c0015aca:	6a 02                	push   0x2
c0015acc:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015ad2:	e8 1b 14 ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c0015ad7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015adb:	59                   	pop    ecx
c0015adc:	5b                   	pop    ebx
c0015add:	6a 04                	push   0x4
c0015adf:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015ae5:	e8 08 14 ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c0015aea:	5e                   	pop    esi
c0015aeb:	88 c3                	mov    bl,al
c0015aed:	5f                   	pop    edi
c0015aee:	6a 07                	push   0x7
c0015af0:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015af6:	e8 f7 13 ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c0015afb:	89 c6                	mov    esi,eax
c0015afd:	58                   	pop    eax
c0015afe:	5a                   	pop    edx
c0015aff:	6a 08                	push   0x8
c0015b01:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015b07:	e8 e6 13 ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c0015b0c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015b10:	59                   	pop    ecx
c0015b11:	5f                   	pop    edi
c0015b12:	6a 09                	push   0x9
c0015b14:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015b1a:	e8 d3 13 ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c0015b1f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015b23:	0f b6 f8             	movzx  edi,al
c0015b26:	83 c4 10             	add    esp,0x10
c0015b29:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015b2d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015b31:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015b35:	89 f1                	mov    ecx,esi
c0015b37:	0f 94 c0             	sete   al
c0015b3a:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015b3e:	0f 94 c2             	sete   dl
c0015b41:	21 d0                	and    eax,edx
c0015b43:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015b47:	0f 94 c2             	sete   dl
c0015b4a:	21 c2                	and    edx,eax
c0015b4c:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015b50:	0f 94 c0             	sete   al
c0015b53:	21 d0                	and    eax,edx
c0015b55:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015b59:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015b5d:	0f 94 c1             	sete   cl
c0015b60:	84 c8                	test   al,cl
c0015b62:	75 29                	jne    c0015b8d <RTC::completeRTCRefresh()+0x1a1>
c0015b64:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015b68:	89 fd                	mov    ebp,edi
c0015b6a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015b6e:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015b72:	89 f0                	mov    eax,esi
c0015b74:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015b78:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015b7c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015b80:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015b84:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015b88:	e9 01 ff ff ff       	jmp    c0015a8e <RTC::completeRTCRefresh()+0xa2>
c0015b8d:	39 fd                	cmp    ebp,edi
c0015b8f:	75 d3                	jne    c0015b64 <RTC::completeRTCRefresh()+0x178>
c0015b91:	55                   	push   ebp
c0015b92:	55                   	push   ebp
c0015b93:	6a 0b                	push   0xb
c0015b95:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015b9b:	e8 52 13 ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c0015ba0:	83 c4 10             	add    esp,0x10
c0015ba3:	89 c5                	mov    ebp,eax
c0015ba5:	a8 04                	test   al,0x4
c0015ba7:	75 78                	jne    c0015c21 <RTC::completeRTCRefresh()+0x235>
c0015ba9:	b1 0a                	mov    cl,0xa
c0015bab:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015baf:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015bb3:	83 e2 0f             	and    edx,0xf
c0015bb6:	c0 e8 04             	shr    al,0x4
c0015bb9:	c1 ef 04             	shr    edi,0x4
c0015bbc:	f6 e1                	mul    cl
c0015bbe:	6b ff 0a             	imul   edi,edi,0xa
c0015bc1:	01 d0                	add    eax,edx
c0015bc3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015bc7:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015bcb:	83 e2 0f             	and    edx,0xf
c0015bce:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015bd2:	c0 e8 04             	shr    al,0x4
c0015bd5:	f6 e1                	mul    cl
c0015bd7:	01 d0                	add    eax,edx
c0015bd9:	88 da                	mov    dl,bl
c0015bdb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015bdf:	83 e2 0f             	and    edx,0xf
c0015be2:	88 d8                	mov    al,bl
c0015be4:	83 e3 80             	and    ebx,0xffffff80
c0015be7:	c0 e8 04             	shr    al,0x4
c0015bea:	83 e0 07             	and    eax,0x7
c0015bed:	f6 e1                	mul    cl
c0015bef:	01 d0                	add    eax,edx
c0015bf1:	89 f2                	mov    edx,esi
c0015bf3:	09 c3                	or     ebx,eax
c0015bf5:	83 e2 0f             	and    edx,0xf
c0015bf8:	89 f0                	mov    eax,esi
c0015bfa:	c0 e8 04             	shr    al,0x4
c0015bfd:	f6 e1                	mul    cl
c0015bff:	8d 34 02             	lea    esi,[edx+eax*1]
c0015c02:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015c06:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015c0a:	83 e2 0f             	and    edx,0xf
c0015c0d:	c0 e8 04             	shr    al,0x4
c0015c10:	f6 e1                	mul    cl
c0015c12:	01 d0                	add    eax,edx
c0015c14:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015c18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c1c:	83 e0 0f             	and    eax,0xf
c0015c1f:	01 c7                	add    edi,eax
c0015c21:	83 e5 02             	and    ebp,0x2
c0015c24:	75 14                	jne    c0015c3a <RTC::completeRTCRefresh()+0x24e>
c0015c26:	84 db                	test   bl,bl
c0015c28:	79 10                	jns    c0015c3a <RTC::completeRTCRefresh()+0x24e>
c0015c2a:	83 e3 7f             	and    ebx,0x7f
c0015c2d:	b9 18 00 00 00       	mov    ecx,0x18
c0015c32:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015c35:	99                   	cdq    
c0015c36:	f7 f9                	idiv   ecx
c0015c38:	88 d3                	mov    bl,dl
c0015c3a:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015c40:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015c46:	77 06                	ja     c0015c4e <RTC::completeRTCRefresh()+0x262>
c0015c48:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015c4e:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015c53:	31 d2                	xor    edx,edx
c0015c55:	c1 e1 10             	shl    ecx,0x10
c0015c58:	89 d7                	mov    edi,edx
c0015c5a:	c1 e5 10             	shl    ebp,0x10
c0015c5d:	31 c0                	xor    eax,eax
c0015c5f:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015c65:	09 cf                	or     edi,ecx
c0015c67:	89 fa                	mov    edx,edi
c0015c69:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015c6d:	88 da                	mov    dl,bl
c0015c6f:	89 f3                	mov    ebx,esi
c0015c71:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015c75:	88 d8                	mov    al,bl
c0015c77:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015c7b:	0f b7 c8             	movzx  ecx,ax
c0015c7e:	09 e9                	or     ecx,ebp
c0015c80:	89 c8                	mov    eax,ecx
c0015c82:	51                   	push   ecx
c0015c83:	51                   	push   ecx
c0015c84:	52                   	push   edx
c0015c85:	50                   	push   eax
c0015c86:	e8 3c 58 ff ff       	call   c000b4c7 <datetimeToSeconds(datetime_t)>
c0015c8b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015c8f:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015c95:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015c9b:	83 c4 3c             	add    esp,0x3c
c0015c9e:	5b                   	pop    ebx
c0015c9f:	5e                   	pop    esi
c0015ca0:	5f                   	pop    edi
c0015ca1:	5d                   	pop    ebp
c0015ca2:	c3                   	ret    
c0015ca3:	90                   	nop

c0015ca4 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015ca4:	55                   	push   ebp
c0015ca5:	57                   	push   edi
c0015ca6:	56                   	push   esi
c0015ca7:	53                   	push   ebx
c0015ca8:	83 ec 30             	sub    esp,0x30
c0015cab:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015caf:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015cb3:	6a 00                	push   0x0
c0015cb5:	6a 00                	push   0x0
c0015cb7:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015cbd:	e8 46 13 ff ff       	call   c0007008 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015cc2:	83 c4 0c             	add    esp,0xc
c0015cc5:	6a 00                	push   0x0
c0015cc7:	6a 02                	push   0x2
c0015cc9:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015ccf:	e8 34 13 ff ff       	call   c0007008 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015cd4:	31 d2                	xor    edx,edx
c0015cd6:	89 f9                	mov    ecx,edi
c0015cd8:	89 f8                	mov    eax,edi
c0015cda:	c1 e9 10             	shr    ecx,0x10
c0015cdd:	0f b6 c4             	movzx  eax,ah
c0015ce0:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015ce4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015ce8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015cec:	b9 64 00 00 00       	mov    ecx,0x64
c0015cf1:	89 f0                	mov    eax,esi
c0015cf3:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015cf7:	89 f0                	mov    eax,esi
c0015cf9:	0f b6 c4             	movzx  eax,ah
c0015cfc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015d00:	89 f0                	mov    eax,esi
c0015d02:	c1 e8 10             	shr    eax,0x10
c0015d05:	66 f7 f1             	div    cx
c0015d08:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015d0d:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015d12:	59                   	pop    ecx
c0015d13:	5b                   	pop    ebx
c0015d14:	89 fb                	mov    ebx,edi
c0015d16:	6a 0b                	push   0xb
c0015d18:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015d1e:	e8 cf 11 ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c0015d23:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015d27:	83 c4 10             	add    esp,0x10
c0015d2a:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015d2f:	75 74                	jne    c0015da5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015d31:	b2 0a                	mov    dl,0xa
c0015d33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015d37:	0f b6 c1             	movzx  eax,cl
c0015d3a:	f6 f2                	div    dl
c0015d3c:	88 c3                	mov    bl,al
c0015d3e:	88 e0                	mov    al,ah
c0015d40:	c1 e3 04             	shl    ebx,0x4
c0015d43:	09 c3                	or     ebx,eax
c0015d45:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015d4a:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015d4e:	f6 f2                	div    dl
c0015d50:	88 c1                	mov    cl,al
c0015d52:	88 e0                	mov    al,ah
c0015d54:	c1 e1 04             	shl    ecx,0x4
c0015d57:	09 c1                	or     ecx,eax
c0015d59:	89 f8                	mov    eax,edi
c0015d5b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0015d5f:	0f b6 c0             	movzx  eax,al
c0015d62:	f6 f2                	div    dl
c0015d64:	88 c3                	mov    bl,al
c0015d66:	88 e0                	mov    al,ah
c0015d68:	c1 e3 04             	shl    ebx,0x4
c0015d6b:	09 c3                	or     ebx,eax
c0015d6d:	89 f0                	mov    eax,esi
c0015d6f:	0f b6 c0             	movzx  eax,al
c0015d72:	f6 f2                	div    dl
c0015d74:	88 c1                	mov    cl,al
c0015d76:	88 e0                	mov    al,ah
c0015d78:	c1 e1 04             	shl    ecx,0x4
c0015d7b:	09 c1                	or     ecx,eax
c0015d7d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015d82:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0015d86:	f6 f2                	div    dl
c0015d88:	88 c1                	mov    cl,al
c0015d8a:	88 e0                	mov    al,ah
c0015d8c:	c1 e1 04             	shl    ecx,0x4
c0015d8f:	09 c1                	or     ecx,eax
c0015d91:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0015d96:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0015d9a:	f6 f2                	div    dl
c0015d9c:	89 c5                	mov    ebp,eax
c0015d9e:	88 e0                	mov    al,ah
c0015da0:	c1 e5 04             	shl    ebp,0x4
c0015da3:	09 c5                	or     ebp,eax
c0015da5:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0015daa:	75 17                	jne    c0015dc3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015dac:	80 fb 0b             	cmp    bl,0xb
c0015daf:	76 0c                	jbe    c0015dbd <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0015db1:	80 eb 0c             	sub    bl,0xc
c0015db4:	75 02                	jne    c0015db8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0015db6:	b3 0c                	mov    bl,0xc
c0015db8:	83 cb 80             	or     ebx,0xffffff80
c0015dbb:	eb 06                	jmp    c0015dc3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015dbd:	84 db                	test   bl,bl
c0015dbf:	75 02                	jne    c0015dc3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015dc1:	b3 0c                	mov    bl,0xc
c0015dc3:	0f b6 db             	movzx  ebx,bl
c0015dc6:	50                   	push   eax
c0015dc7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0015dcc:	50                   	push   eax
c0015dcd:	6a 00                	push   0x0
c0015dcf:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015dd5:	e8 2e 12 ff ff       	call   c0007008 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015dda:	83 c4 0c             	add    esp,0xc
c0015ddd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015de2:	50                   	push   eax
c0015de3:	6a 02                	push   0x2
c0015de5:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015deb:	e8 18 12 ff ff       	call   c0007008 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015df0:	83 c4 0c             	add    esp,0xc
c0015df3:	53                   	push   ebx
c0015df4:	6a 04                	push   0x4
c0015df6:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015dfc:	e8 07 12 ff ff       	call   c0007008 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015e01:	83 c4 0c             	add    esp,0xc
c0015e04:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0015e09:	50                   	push   eax
c0015e0a:	6a 07                	push   0x7
c0015e0c:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015e12:	e8 f1 11 ff ff       	call   c0007008 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015e17:	83 c4 0c             	add    esp,0xc
c0015e1a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0015e1f:	50                   	push   eax
c0015e20:	6a 08                	push   0x8
c0015e22:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015e28:	e8 db 11 ff ff       	call   c0007008 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015e2d:	83 c4 0c             	add    esp,0xc
c0015e30:	89 e8                	mov    eax,ebp
c0015e32:	0f b6 e8             	movzx  ebp,al
c0015e35:	55                   	push   ebp
c0015e36:	6a 09                	push   0x9
c0015e38:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015e3e:	e8 c5 11 ff ff       	call   c0007008 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015e43:	5a                   	pop    edx
c0015e44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e48:	e8 9f fb ff ff       	call   c00159ec <RTC::completeRTCRefresh()>
c0015e4d:	83 c4 3c             	add    esp,0x3c
c0015e50:	b0 01                	mov    al,0x1
c0015e52:	5b                   	pop    ebx
c0015e53:	5e                   	pop    esi
c0015e54:	5f                   	pop    edi
c0015e55:	5d                   	pop    ebp
c0015e56:	c3                   	ret    

c0015e57 <rtcIRQHandler(regs*, void*)>:
c0015e57:	53                   	push   ebx
c0015e58:	83 ec 10             	sub    esp,0x10
c0015e5b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015e5f:	6a 0c                	push   0xc
c0015e61:	ff 35 78 06 02 c0    	push   DWORD PTR ds:0xc0020678
c0015e67:	e8 86 10 ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c0015e6c:	83 c4 10             	add    esp,0x10
c0015e6f:	84 c0                	test   al,al
c0015e71:	79 24                	jns    c0015e97 <rtcIRQHandler(regs*, void*)+0x40>
c0015e73:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0015e7a:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0015e81:	66 ff 05 d4 3b 02 c0 	inc    WORD PTR ds:0xc0023bd4
c0015e88:	75 0d                	jne    c0015e97 <rtcIRQHandler(regs*, void*)+0x40>
c0015e8a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015e8e:	83 c4 08             	add    esp,0x8
c0015e91:	5b                   	pop    ebx
c0015e92:	e9 55 fb ff ff       	jmp    c00159ec <RTC::completeRTCRefresh()>
c0015e97:	83 c4 08             	add    esp,0x8
c0015e9a:	5b                   	pop    ebx
c0015e9b:	c3                   	ret    

c0015e9c <RTC::RTC()>:
c0015e9c:	83 ec 1c             	sub    esp,0x1c
c0015e9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ea3:	83 ec 08             	sub    esp,0x8
c0015ea6:	68 9f eb 01 c0       	push   0xc001eb9f
c0015eab:	50                   	push   eax
c0015eac:	e8 f1 54 ff ff       	call   c000b3a2 <Clock::Clock(char const*)>
c0015eb1:	83 c4 10             	add    esp,0x10
c0015eb4:	ba bc eb 01 c0       	mov    edx,0xc001ebbc
c0015eb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ebd:	89 10                	mov    DWORD PTR [eax],edx
c0015ebf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ec3:	83 ec 0c             	sub    esp,0xc
c0015ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015eca:	6a 01                	push   0x1
c0015ecc:	68 57 5e 01 c0       	push   0xc0015e57
c0015ed1:	6a 08                	push   0x8
c0015ed3:	50                   	push   eax
c0015ed4:	e8 b3 59 ff ff       	call   c000b88c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0015ed9:	83 c4 20             	add    esp,0x20
c0015edc:	89 c2                	mov    edx,eax
c0015ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ee2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0015ee8:	fa                   	cli    
c0015ee9:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0015eee:	40                   	inc    eax
c0015eef:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0015ef4:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0015ef9:	83 ec 08             	sub    esp,0x8
c0015efc:	6a 0b                	push   0xb
c0015efe:	50                   	push   eax
c0015eff:	e8 ee 0f ff ff       	call   c0006ef2 <Computer::readCMOS(unsigned char)>
c0015f04:	83 c4 10             	add    esp,0x10
c0015f07:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015f0b:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0015f10:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0015f14:	83 ca 10             	or     edx,0x10
c0015f17:	81 e2 ff 00 00 00    	and    edx,0xff
c0015f1d:	83 ec 04             	sub    esp,0x4
c0015f20:	52                   	push   edx
c0015f21:	6a 0b                	push   0xb
c0015f23:	50                   	push   eax
c0015f24:	e8 df 10 ff ff       	call   c0007008 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f29:	83 c4 10             	add    esp,0x10
c0015f2c:	83 ec 0c             	sub    esp,0xc
c0015f2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f33:	e8 b4 fa ff ff       	call   c00159ec <RTC::completeRTCRefresh()>
c0015f38:	83 c4 10             	add    esp,0x10
c0015f3b:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0015f40:	48                   	dec    eax
c0015f41:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c0015f46:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c0015f4b:	85 c0                	test   eax,eax
c0015f4d:	75 01                	jne    c0015f50 <RTC::RTC()+0xb4>
c0015f4f:	fb                   	sti    
c0015f50:	90                   	nop
c0015f51:	83 c4 1c             	add    esp,0x1c
c0015f54:	c3                   	ret    
c0015f55:	66 90                	xchg   ax,ax
c0015f57:	90                   	nop

c0015f58 <HalConsoleScroll(int, int)>:
c0015f58:	83 ec 10             	sub    esp,0x10
c0015f5b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0015f63:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0015f6b:	90                   	nop
c0015f6c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015f71:	0f 8f e1 00 00 00    	jg     c0016058 <HalConsoleScroll(int, int)+0x100>
c0015f77:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015f7f:	90                   	nop
c0015f80:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0015f88:	0f 8f be 00 00 00    	jg     c001604c <HalConsoleScroll(int, int)+0xf4>
c0015f8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f92:	89 d0                	mov    eax,edx
c0015f94:	c1 e0 02             	shl    eax,0x2
c0015f97:	01 d0                	add    eax,edx
c0015f99:	c1 e0 05             	shl    eax,0x5
c0015f9c:	89 c2                	mov    edx,eax
c0015f9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fa2:	01 d0                	add    eax,edx
c0015fa4:	89 c2                	mov    edx,eax
c0015fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015faa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0015fad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015fb1:	89 d0                	mov    eax,edx
c0015fb3:	c1 e0 02             	shl    eax,0x2
c0015fb6:	01 d0                	add    eax,edx
c0015fb8:	c1 e0 05             	shl    eax,0x5
c0015fbb:	89 c2                	mov    edx,eax
c0015fbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fc1:	01 d0                	add    eax,edx
c0015fc3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0015fc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fcd:	01 c2                	add    edx,eax
c0015fcf:	8a 01                	mov    al,BYTE PTR [ecx]
c0015fd1:	88 02                	mov    BYTE PTR [edx],al
c0015fd3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015fd8:	75 66                	jne    c0016040 <HalConsoleScroll(int, int)+0xe8>
c0015fda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fde:	83 e0 01             	and    eax,0x1
c0015fe1:	74 39                	je     c001601c <HalConsoleScroll(int, int)+0xc4>
c0015fe3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015fe7:	83 e0 0f             	and    eax,0xf
c0015fea:	88 c2                	mov    dl,al
c0015fec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015ff0:	c1 e0 04             	shl    eax,0x4
c0015ff3:	88 d1                	mov    cl,dl
c0015ff5:	09 c1                	or     ecx,eax
c0015ff7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ffb:	89 d0                	mov    eax,edx
c0015ffd:	c1 e0 02             	shl    eax,0x2
c0016000:	01 d0                	add    eax,edx
c0016002:	c1 e0 05             	shl    eax,0x5
c0016005:	89 c2                	mov    edx,eax
c0016007:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001600b:	01 d0                	add    eax,edx
c001600d:	89 c2                	mov    edx,eax
c001600f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016013:	01 d0                	add    eax,edx
c0016015:	88 ca                	mov    dl,cl
c0016017:	88 10                	mov    BYTE PTR [eax],dl
c0016019:	eb 25                	jmp    c0016040 <HalConsoleScroll(int, int)+0xe8>
c001601b:	90                   	nop
c001601c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016020:	89 d0                	mov    eax,edx
c0016022:	c1 e0 02             	shl    eax,0x2
c0016025:	01 d0                	add    eax,edx
c0016027:	c1 e0 05             	shl    eax,0x5
c001602a:	89 c2                	mov    edx,eax
c001602c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016030:	01 d0                	add    eax,edx
c0016032:	89 c2                	mov    edx,eax
c0016034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016038:	01 d0                	add    eax,edx
c001603a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001603d:	8d 76 00             	lea    esi,[esi+0x0]
c0016040:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016044:	e9 37 ff ff ff       	jmp    c0015f80 <HalConsoleScroll(int, int)+0x28>
c0016049:	8d 76 00             	lea    esi,[esi+0x0]
c001604c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016050:	e9 17 ff ff ff       	jmp    c0015f6c <HalConsoleScroll(int, int)+0x14>
c0016055:	8d 76 00             	lea    esi,[esi+0x0]
c0016058:	90                   	nop
c0016059:	83 c4 10             	add    esp,0x10
c001605c:	c3                   	ret    
c001605d:	8d 76 00             	lea    esi,[esi+0x0]

c0016060 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016060:	83 ec 14             	sub    esp,0x14
c0016063:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016067:	88 04 24             	mov    BYTE PTR [esp],al
c001606a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001606d:	25 ff 00 00 00       	and    eax,0xff
c0016072:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016076:	89 d1                	mov    ecx,edx
c0016078:	83 e1 0f             	and    ecx,0xf
c001607b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001607f:	c1 e2 04             	shl    edx,0x4
c0016082:	81 e2 ff 00 00 00    	and    edx,0xff
c0016088:	09 ca                	or     edx,ecx
c001608a:	c1 e2 08             	shl    edx,0x8
c001608d:	09 d0                	or     eax,edx
c001608f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016094:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001609c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00160a0:	89 d0                	mov    eax,edx
c00160a2:	c1 e0 02             	shl    eax,0x2
c00160a5:	01 d0                	add    eax,edx
c00160a7:	c1 e0 04             	shl    eax,0x4
c00160aa:	89 c2                	mov    edx,eax
c00160ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00160b0:	01 d0                	add    eax,edx
c00160b2:	01 c0                	add    eax,eax
c00160b4:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00160b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160bc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00160c1:	66 89 02             	mov    WORD PTR [edx],ax
c00160c4:	90                   	nop
c00160c5:	83 c4 14             	add    esp,0x14
c00160c8:	c3                   	ret    
c00160c9:	8d 76 00             	lea    esi,[esi+0x0]

c00160cc <HalConsoleCursorUpdate(int, int)>:
c00160cc:	83 ec 20             	sub    esp,0x20
c00160cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160d3:	89 c2                	mov    edx,eax
c00160d5:	89 d0                	mov    eax,edx
c00160d7:	c1 e0 02             	shl    eax,0x2
c00160da:	01 d0                	add    eax,edx
c00160dc:	c1 e0 04             	shl    eax,0x4
c00160df:	89 c2                	mov    edx,eax
c00160e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00160e5:	01 d0                	add    eax,edx
c00160e7:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00160ec:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00160f3:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00160f8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00160fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016100:	ee                   	out    dx,al
c0016101:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016106:	25 ff 00 00 00       	and    eax,0xff
c001610b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0016112:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016116:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001611a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001611e:	ee                   	out    dx,al
c001611f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0016126:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001612b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001612f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016133:	ee                   	out    dx,al
c0016134:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016139:	66 c1 e8 08          	shr    ax,0x8
c001613d:	25 ff 00 00 00       	and    eax,0xff
c0016142:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016149:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001614d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016151:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016155:	ee                   	out    dx,al
c0016156:	90                   	nop
c0016157:	83 c4 20             	add    esp,0x20
c001615a:	c3                   	ret    
c001615b:	90                   	nop

c001615c <FAT::getName()>:
c001615c:	b8 f0 eb 01 c0       	mov    eax,0xc001ebf0
c0016161:	c3                   	ret    
c0016162:	66 90                	xchg   ax,ax

c0016164 <FAT::tell(void*, unsigned long long*)>:
c0016164:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016169:	75 09                	jne    c0016174 <FAT::tell(void*, unsigned long long*)+0x10>
c001616b:	b8 04 00 00 00       	mov    eax,0x4
c0016170:	c3                   	ret    
c0016171:	8d 76 00             	lea    esi,[esi+0x0]
c0016174:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016179:	75 09                	jne    c0016184 <FAT::tell(void*, unsigned long long*)+0x20>
c001617b:	b8 04 00 00 00       	mov    eax,0x4
c0016180:	c3                   	ret    
c0016181:	8d 76 00             	lea    esi,[esi+0x0]
c0016184:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016188:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001618b:	ba 00 00 00 00       	mov    edx,0x0
c0016190:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016194:	89 01                	mov    DWORD PTR [ecx],eax
c0016196:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016199:	b8 00 00 00 00       	mov    eax,0x0
c001619e:	c3                   	ret    
c001619f:	90                   	nop

c00161a0 <FAT::stat(void*, unsigned long long*)>:
c00161a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00161a5:	75 09                	jne    c00161b0 <FAT::stat(void*, unsigned long long*)+0x10>
c00161a7:	b8 04 00 00 00       	mov    eax,0x4
c00161ac:	c3                   	ret    
c00161ad:	8d 76 00             	lea    esi,[esi+0x0]
c00161b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00161b5:	75 09                	jne    c00161c0 <FAT::stat(void*, unsigned long long*)+0x20>
c00161b7:	b8 04 00 00 00       	mov    eax,0x4
c00161bc:	c3                   	ret    
c00161bd:	8d 76 00             	lea    esi,[esi+0x0]
c00161c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00161c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00161c7:	ba 00 00 00 00       	mov    edx,0x0
c00161cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00161d0:	89 01                	mov    DWORD PTR [ecx],eax
c00161d2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00161d5:	b8 00 00 00 00       	mov    eax,0x0
c00161da:	c3                   	ret    
c00161db:	90                   	nop

c00161dc <FAT::~FAT()>:
c00161dc:	83 ec 0c             	sub    esp,0xc
c00161df:	ba 3c ec 01 c0       	mov    edx,0xc001ec3c
c00161e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161e8:	89 10                	mov    DWORD PTR [eax],edx
c00161ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161ee:	83 ec 0c             	sub    esp,0xc
c00161f1:	50                   	push   eax
c00161f2:	e8 ef 45 ff ff       	call   c000a7e6 <Filesystem::~Filesystem()>
c00161f7:	83 c4 10             	add    esp,0x10
c00161fa:	90                   	nop
c00161fb:	83 c4 0c             	add    esp,0xc
c00161fe:	c3                   	ret    
c00161ff:	90                   	nop

c0016200 <FAT::~FAT()>:
c0016200:	83 ec 0c             	sub    esp,0xc
c0016203:	83 ec 0c             	sub    esp,0xc
c0016206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001620a:	e8 cd ff ff ff       	call   c00161dc <FAT::~FAT()>
c001620f:	83 c4 10             	add    esp,0x10
c0016212:	83 ec 08             	sub    esp,0x8
c0016215:	6a 08                	push   0x8
c0016217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001621b:	e8 8a 41 ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c0016220:	83 c4 10             	add    esp,0x10
c0016223:	83 c4 0c             	add    esp,0xc
c0016226:	c3                   	ret    
c0016227:	90                   	nop

c0016228 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016228:	83 ec 1c             	sub    esp,0x1c
c001622b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0016232:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016237:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001623b:	8b 04 85 00 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc400]
c0016242:	83 f8 ff             	cmp    eax,0xffffffff
c0016245:	75 35                	jne    c001627c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0016247:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001624b:	88 c2                	mov    dl,al
c001624d:	a1 e0 3b 02 c0       	mov    eax,ds:0xc0023be0
c0016252:	01 d0                	add    eax,edx
c0016254:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016258:	8b 15 e0 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023be0
c001625e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016262:	89 14 85 00 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc400],edx
c0016269:	a1 e0 3b 02 c0       	mov    eax,ds:0xc0023be0
c001626e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016272:	89 14 85 80 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc380],edx
c0016279:	eb 19                	jmp    c0016294 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001627b:	90                   	nop
c001627c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016280:	88 c2                	mov    dl,al
c0016282:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016286:	8b 04 85 00 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc400]
c001628d:	01 d0                	add    eax,edx
c001628f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016293:	90                   	nop
c0016294:	83 ec 04             	sub    esp,0x4
c0016297:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001629b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001629f:	8d 44 24 15          	lea    eax,[esp+0x15]
c00162a3:	50                   	push   eax
c00162a4:	e8 ab eb fe ff       	call   c0004e54 <f_getlabel>
c00162a9:	83 c4 10             	add    esp,0x10
c00162ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00162b5:	75 09                	jne    c00162c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00162b7:	b8 00 00 00 00       	mov    eax,0x0
c00162bc:	eb 0a                	jmp    c00162c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00162be:	66 90                	xchg   ax,ax
c00162c0:	b8 01 00 00 00       	mov    eax,0x1
c00162c5:	8d 76 00             	lea    esi,[esi+0x0]
c00162c8:	83 c4 1c             	add    esp,0x1c
c00162cb:	c3                   	ret    

c00162cc <FAT::setlabel(LogicalDisk*, int, char*)>:
c00162cc:	57                   	push   edi
c00162cd:	83 ec 58             	sub    esp,0x58
c00162d0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00162d8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00162dc:	b8 00 00 00 00       	mov    eax,0x0
c00162e1:	b9 0f 00 00 00       	mov    ecx,0xf
c00162e6:	fc                   	cld    
c00162e7:	89 d7                	mov    edi,edx
c00162e9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00162eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00162ef:	8b 04 85 00 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc400]
c00162f6:	83 f8 ff             	cmp    eax,0xffffffff
c00162f9:	75 35                	jne    c0016330 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00162fb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00162ff:	88 c2                	mov    dl,al
c0016301:	a1 e0 3b 02 c0       	mov    eax,ds:0xc0023be0
c0016306:	01 d0                	add    eax,edx
c0016308:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001630c:	8b 15 e0 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023be0
c0016312:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016316:	89 14 85 00 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc400],edx
c001631d:	a1 e0 3b 02 c0       	mov    eax,ds:0xc0023be0
c0016322:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0016326:	89 14 85 80 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc380],edx
c001632d:	eb 19                	jmp    c0016348 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001632f:	90                   	nop
c0016330:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016334:	88 c2                	mov    dl,al
c0016336:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001633a:	8b 04 85 00 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc400]
c0016341:	01 d0                	add    eax,edx
c0016343:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016347:	90                   	nop
c0016348:	83 ec 08             	sub    esp,0x8
c001634b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001634f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016353:	50                   	push   eax
c0016354:	e8 67 a4 fe ff       	call   c00007c0 <strcat>
c0016359:	83 c4 10             	add    esp,0x10
c001635c:	83 ec 0c             	sub    esp,0xc
c001635f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016363:	50                   	push   eax
c0016364:	e8 3c ec fe ff       	call   c0004fa5 <f_setlabel>
c0016369:	83 c4 10             	add    esp,0x10
c001636c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016370:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016375:	75 09                	jne    c0016380 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0016377:	b8 00 00 00 00       	mov    eax,0x0
c001637c:	eb 0a                	jmp    c0016388 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001637e:	66 90                	xchg   ax,ax
c0016380:	b8 01 00 00 00       	mov    eax,0x1
c0016385:	8d 76 00             	lea    esi,[esi+0x0]
c0016388:	83 c4 58             	add    esp,0x58
c001638b:	5f                   	pop    edi
c001638c:	c3                   	ret    
c001638d:	90                   	nop
c001638e:	66 90                	xchg   ax,ax

c0016390 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016390:	83 ec 2c             	sub    esp,0x2c
c0016393:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001639b:	83 ec 08             	sub    esp,0x8
c001639e:	68 14 ec 01 c0       	push   0xc001ec14
c00163a3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00163a7:	e8 34 a3 fe ff       	call   c00006e0 <strcmp>
c00163ac:	83 c4 10             	add    esp,0x10
c00163af:	85 c0                	test   eax,eax
c00163b1:	0f 94 c0             	sete   al
c00163b4:	84 c0                	test   al,al
c00163b6:	74 10                	je     c00163c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00163b8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00163c0:	e9 b3 00 00 00       	jmp    c0016478 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00163c5:	8d 76 00             	lea    esi,[esi+0x0]
c00163c8:	83 ec 08             	sub    esp,0x8
c00163cb:	68 06 ec 01 c0       	push   0xc001ec06
c00163d0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00163d4:	e8 07 a3 fe ff       	call   c00006e0 <strcmp>
c00163d9:	83 c4 10             	add    esp,0x10
c00163dc:	85 c0                	test   eax,eax
c00163de:	0f 94 c0             	sete   al
c00163e1:	84 c0                	test   al,al
c00163e3:	74 0f                	je     c00163f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00163e5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00163ed:	e9 86 00 00 00       	jmp    c0016478 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00163f2:	66 90                	xchg   ax,ax
c00163f4:	83 ec 08             	sub    esp,0x8
c00163f7:	68 0c ec 01 c0       	push   0xc001ec0c
c00163fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016400:	e8 db a2 fe ff       	call   c00006e0 <strcmp>
c0016405:	83 c4 10             	add    esp,0x10
c0016408:	85 c0                	test   eax,eax
c001640a:	0f 94 c0             	sete   al
c001640d:	84 c0                	test   al,al
c001640f:	74 0b                	je     c001641c <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016411:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016419:	eb 5d                	jmp    c0016478 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001641b:	90                   	nop
c001641c:	83 ec 08             	sub    esp,0x8
c001641f:	68 3c cc 01 c0       	push   0xc001cc3c
c0016424:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016428:	e8 b3 a2 fe ff       	call   c00006e0 <strcmp>
c001642d:	83 c4 10             	add    esp,0x10
c0016430:	85 c0                	test   eax,eax
c0016432:	0f 94 c0             	sete   al
c0016435:	84 c0                	test   al,al
c0016437:	74 0b                	je     c0016444 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016439:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016441:	eb 35                	jmp    c0016478 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016443:	90                   	nop
c0016444:	83 ec 08             	sub    esp,0x8
c0016447:	68 12 ec 01 c0       	push   0xc001ec12
c001644c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016450:	e8 8b a2 fe ff       	call   c00006e0 <strcmp>
c0016455:	83 c4 10             	add    esp,0x10
c0016458:	85 c0                	test   eax,eax
c001645a:	0f 94 c0             	sete   al
c001645d:	84 c0                	test   al,al
c001645f:	74 0b                	je     c001646c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016461:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016469:	eb 0d                	jmp    c0016478 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001646b:	90                   	nop
c001646c:	b8 08 00 00 00       	mov    eax,0x8
c0016471:	e9 ea 00 00 00       	jmp    c0016560 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016476:	66 90                	xchg   ax,ax
c0016478:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001647f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016484:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016488:	8b 04 85 00 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc400]
c001648f:	83 f8 ff             	cmp    eax,0xffffffff
c0016492:	75 34                	jne    c00164c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016494:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016498:	88 c2                	mov    dl,al
c001649a:	a1 e0 3b 02 c0       	mov    eax,ds:0xc0023be0
c001649f:	01 d0                	add    eax,edx
c00164a1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00164a5:	8b 15 e0 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023be0
c00164ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00164af:	89 14 85 00 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc400],edx
c00164b6:	a1 e0 3b 02 c0       	mov    eax,ds:0xc0023be0
c00164bb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00164bf:	89 14 85 80 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc380],edx
c00164c6:	eb 18                	jmp    c00164e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00164c8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00164cc:	88 c2                	mov    dl,al
c00164ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00164d2:	8b 04 85 00 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc400]
c00164d9:	01 d0                	add    eax,edx
c00164db:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00164df:	90                   	nop
c00164e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164e4:	88 04 24             	mov    BYTE PTR [esp],al
c00164e7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00164eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164ef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00164f7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00164fc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016504:	83 ec 0c             	sub    esp,0xc
c0016507:	68 00 20 00 00       	push   0x2000
c001650c:	e8 f4 12 ff ff       	call   c0007805 <malloc>
c0016511:	83 c4 10             	add    esp,0x10
c0016514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016518:	68 00 20 00 00       	push   0x2000
c001651d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016521:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016525:	50                   	push   eax
c0016526:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001652a:	50                   	push   eax
c001652b:	e8 65 ed fe ff       	call   c0005295 <f_mkfs>
c0016530:	83 c4 10             	add    esp,0x10
c0016533:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016537:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001653c:	75 0a                	jne    c0016548 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001653e:	b8 00 00 00 00       	mov    eax,0x0
c0016543:	eb 1b                	jmp    c0016560 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016545:	8d 76 00             	lea    esi,[esi+0x0]
c0016548:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001654d:	75 09                	jne    c0016558 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001654f:	b8 09 00 00 00       	mov    eax,0x9
c0016554:	eb 0a                	jmp    c0016560 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016556:	66 90                	xchg   ax,ax
c0016558:	b8 01 00 00 00       	mov    eax,0x1
c001655d:	8d 76 00             	lea    esi,[esi+0x0]
c0016560:	83 c4 2c             	add    esp,0x2c
c0016563:	c3                   	ret    

c0016564 <FAT::tryMount(LogicalDisk*, int)>:
c0016564:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001656a:	a1 e0 3b 02 c0       	mov    eax,ds:0xc0023be0
c001656f:	83 f8 14             	cmp    eax,0x14
c0016572:	75 18                	jne    c001658c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016574:	83 ec 0c             	sub    esp,0xc
c0016577:	68 18 ec 01 c0       	push   0xc001ec18
c001657c:	e8 82 9b ff ff       	call   c0010103 <KePanic(char const*)>
c0016581:	83 c4 10             	add    esp,0x10
c0016584:	b0 00                	mov    al,0x0
c0016586:	e9 e9 01 00 00       	jmp    c0016774 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001658b:	90                   	nop
c001658c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016593:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016599:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001659f:	3d 00 02 00 00       	cmp    eax,0x200
c00165a4:	74 0a                	je     c00165b0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00165a6:	b0 00                	mov    al,0x0
c00165a8:	e9 c7 01 00 00       	jmp    c0016774 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00165ad:	8d 76 00             	lea    esi,[esi+0x0]
c00165b0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00165b8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00165bf:	8b 04 85 00 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc400]
c00165c6:	83 f8 ff             	cmp    eax,0xffffffff
c00165c9:	74 09                	je     c00165d4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00165cb:	b0 01                	mov    al,0x1
c00165cd:	e9 a2 01 00 00       	jmp    c0016774 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00165d2:	66 90                	xchg   ax,ax
c00165d4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00165de:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00165e6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00165ed:	88 c2                	mov    dl,al
c00165ef:	a1 e0 3b 02 c0       	mov    eax,ds:0xc0023be0
c00165f4:	01 d0                	add    eax,edx
c00165f6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00165fd:	8b 15 e0 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023be0
c0016603:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001660a:	89 14 85 00 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc400],edx
c0016611:	a1 e0 3b 02 c0       	mov    eax,ds:0xc0023be0
c0016616:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001661d:	89 14 85 80 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc380],edx
c0016624:	83 ec 0c             	sub    esp,0xc
c0016627:	68 34 02 00 00       	push   0x234
c001662c:	e8 d4 11 ff ff       	call   c0007805 <malloc>
c0016631:	83 c4 10             	add    esp,0x10
c0016634:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001663b:	83 ec 04             	sub    esp,0x4
c001663e:	6a 00                	push   0x0
c0016640:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016647:	50                   	push   eax
c0016648:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001664f:	e8 67 d4 fe ff       	call   c0003abb <f_mount>
c0016654:	83 c4 10             	add    esp,0x10
c0016657:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001665e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016666:	74 1c                	je     c0016684 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016668:	83 ec 0c             	sub    esp,0xc
c001666b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016672:	e8 ae 11 ff ff       	call   c0007825 <rfree>
c0016677:	83 c4 10             	add    esp,0x10
c001667a:	b0 00                	mov    al,0x0
c001667c:	e9 f3 00 00 00       	jmp    c0016774 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016681:	8d 76 00             	lea    esi,[esi+0x0]
c0016684:	83 ec 04             	sub    esp,0x4
c0016687:	68 00 01 00 00       	push   0x100
c001668c:	6a 00                	push   0x0
c001668e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016695:	50                   	push   eax
c0016696:	e8 35 9e fe ff       	call   c00004d0 <memset>
c001669b:	83 c4 10             	add    esp,0x10
c001669e:	83 ec 08             	sub    esp,0x8
c00166a1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00166a8:	50                   	push   eax
c00166a9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00166b0:	50                   	push   eax
c00166b1:	e8 0a a1 fe ff       	call   c00007c0 <strcat>
c00166b6:	83 c4 10             	add    esp,0x10
c00166b9:	83 ec 08             	sub    esp,0x8
c00166bc:	68 26 ec 01 c0       	push   0xc001ec26
c00166c1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00166c8:	50                   	push   eax
c00166c9:	e8 f2 a0 fe ff       	call   c00007c0 <strcat>
c00166ce:	83 c4 10             	add    esp,0x10
c00166d1:	83 ec 04             	sub    esp,0x4
c00166d4:	6a 01                	push   0x1
c00166d6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00166dd:	50                   	push   eax
c00166de:	8d 44 24 14          	lea    eax,[esp+0x14]
c00166e2:	50                   	push   eax
c00166e3:	e8 35 d4 fe ff       	call   c0003b1d <f_open>
c00166e8:	83 c4 10             	add    esp,0x10
c00166eb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00166f2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00166f9:	85 c0                	test   eax,eax
c00166fb:	74 0b                	je     c0016708 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00166fd:	78 31                	js     c0016730 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00166ff:	83 e8 04             	sub    eax,0x4
c0016702:	83 f8 01             	cmp    eax,0x1
c0016705:	77 29                	ja     c0016730 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016707:	90                   	nop
c0016708:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016710:	83 ec 0c             	sub    esp,0xc
c0016713:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016717:	50                   	push   eax
c0016718:	e8 b3 db fe ff       	call   c00042d0 <f_close>
c001671d:	83 c4 10             	add    esp,0x10
c0016720:	90                   	nop
c0016721:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016729:	74 41                	je     c001676c <FAT::tryMount(LogicalDisk*, int)+0x208>
c001672b:	eb 33                	jmp    c0016760 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001672d:	8d 76 00             	lea    esi,[esi+0x0]
c0016730:	83 ec 0c             	sub    esp,0xc
c0016733:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001673a:	e8 e6 10 ff ff       	call   c0007825 <rfree>
c001673f:	83 c4 10             	add    esp,0x10
c0016742:	83 ec 04             	sub    esp,0x4
c0016745:	6a 00                	push   0x0
c0016747:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001674e:	50                   	push   eax
c001674f:	6a 00                	push   0x0
c0016751:	e8 65 d3 fe ff       	call   c0003abb <f_mount>
c0016756:	83 c4 10             	add    esp,0x10
c0016759:	b0 00                	mov    al,0x0
c001675b:	eb 17                	jmp    c0016774 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001675d:	8d 76 00             	lea    esi,[esi+0x0]
c0016760:	a1 e0 3b 02 c0       	mov    eax,ds:0xc0023be0
c0016765:	40                   	inc    eax
c0016766:	a3 e0 3b 02 c0       	mov    ds:0xc0023be0,eax
c001676b:	90                   	nop
c001676c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016773:	90                   	nop
c0016774:	81 c4 4c 03 00 00    	add    esp,0x34c
c001677a:	c3                   	ret    
c001677b:	90                   	nop

c001677c <FAT::allocateSwapfile(char const*, int)>:
c001677c:	55                   	push   ebp
c001677d:	57                   	push   edi
c001677e:	56                   	push   esi
c001677f:	53                   	push   ebx
c0016780:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016786:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016791:	83 ec 0c             	sub    esp,0xc
c0016794:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001679b:	e8 65 10 ff ff       	call   c0007805 <malloc>
c00167a0:	83 c4 10             	add    esp,0x10
c00167a3:	89 c7                	mov    edi,eax
c00167a5:	a1 50 3b 02 c0       	mov    eax,ds:0xc0023b50
c00167aa:	83 ec 04             	sub    esp,0x4
c00167ad:	50                   	push   eax
c00167ae:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00167b5:	57                   	push   edi
c00167b6:	e8 5b 42 ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c00167bb:	83 c4 10             	add    esp,0x10
c00167be:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00167c5:	83 ec 04             	sub    esp,0x4
c00167c8:	8d 44 24 13          	lea    eax,[esp+0x13]
c00167cc:	50                   	push   eax
c00167cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00167d1:	50                   	push   eax
c00167d2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00167d9:	e8 a4 45 ff ff       	call   c000ad82 <File::stat(unsigned long long*, bool*)>
c00167de:	83 c4 10             	add    esp,0x10
c00167e1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00167e8:	c1 e0 14             	shl    eax,0x14
c00167eb:	89 c7                	mov    edi,eax
c00167ed:	89 c5                	mov    ebp,eax
c00167ef:	c1 fd 1f             	sar    ebp,0x1f
c00167f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00167fa:	89 f9                	mov    ecx,edi
c00167fc:	31 c1                	xor    ecx,eax
c00167fe:	89 cb                	mov    ebx,ecx
c0016800:	89 e9                	mov    ecx,ebp
c0016802:	31 d1                	xor    ecx,edx
c0016804:	89 ce                	mov    esi,ecx
c0016806:	89 f0                	mov    eax,esi
c0016808:	09 d8                	or     eax,ebx
c001680a:	0f 84 9c 00 00 00    	je     c00168ac <FAT::allocateSwapfile(char const*, int)+0x130>
c0016810:	83 ec 0c             	sub    esp,0xc
c0016813:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001681a:	e8 2f 44 ff ff       	call   c000ac4e <File::unlink()>
c001681f:	83 c4 10             	add    esp,0x10
c0016822:	83 ec 08             	sub    esp,0x8
c0016825:	6a 12                	push   0x12
c0016827:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001682e:	e8 a3 42 ff ff       	call   c000aad6 <File::open(FileOpenMode)>
c0016833:	83 c4 10             	add    esp,0x10
c0016836:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001683d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016843:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001684a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016851:	c1 e0 14             	shl    eax,0x14
c0016854:	83 ec 04             	sub    esp,0x4
c0016857:	6a 01                	push   0x1
c0016859:	50                   	push   eax
c001685a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016861:	e8 cf e8 fe ff       	call   c0005135 <f_expand>
c0016866:	83 c4 10             	add    esp,0x10
c0016869:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016870:	8b 00                	mov    eax,DWORD PTR [eax]
c0016872:	83 c0 10             	add    eax,0x10
c0016875:	8b 00                	mov    eax,DWORD PTR [eax]
c0016877:	83 ec 0c             	sub    esp,0xc
c001687a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001687e:	52                   	push   edx
c001687f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016883:	52                   	push   edx
c0016884:	6a 00                	push   0x0
c0016886:	68 00 04 00 00       	push   0x400
c001688b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016892:	ff d0                	call   eax
c0016894:	83 c4 20             	add    esp,0x20
c0016897:	83 ec 0c             	sub    esp,0xc
c001689a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00168a1:	e8 8e 42 ff ff       	call   c000ab34 <File::close()>
c00168a6:	83 c4 10             	add    esp,0x10
c00168a9:	8d 76 00             	lea    esi,[esi+0x0]
c00168ac:	83 ec 08             	sub    esp,0x8
c00168af:	6a 01                	push   0x1
c00168b1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00168b8:	e8 19 42 ff ff       	call   c000aad6 <File::open(FileOpenMode)>
c00168bd:	83 c4 10             	add    esp,0x10
c00168c0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00168c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00168c9:	83 c0 0c             	add    eax,0xc
c00168cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00168ce:	83 ec 0c             	sub    esp,0xc
c00168d1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00168d5:	52                   	push   edx
c00168d6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00168da:	52                   	push   edx
c00168db:	6a 00                	push   0x0
c00168dd:	6a 04                	push   0x4
c00168df:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00168e6:	ff d0                	call   eax
c00168e8:	83 c4 20             	add    esp,0x20
c00168eb:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00168f2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00168f8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00168ff:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016906:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016909:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016910:	83 ec 0c             	sub    esp,0xc
c0016913:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001691a:	e8 15 42 ff ff       	call   c000ab34 <File::close()>
c001691f:	83 c4 10             	add    esp,0x10
c0016922:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016929:	ba 00 00 00 00       	mov    edx,0x0
c001692e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016934:	5b                   	pop    ebx
c0016935:	5e                   	pop    esi
c0016936:	5f                   	pop    edi
c0016937:	5d                   	pop    ebp
c0016938:	c3                   	ret    
c0016939:	90                   	nop
c001693a:	66 90                	xchg   ax,ax

c001693c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001693c:	57                   	push   edi
c001693d:	56                   	push   esi
c001693e:	53                   	push   ebx
c001693f:	81 ec 50 02 00 00    	sub    esp,0x250
c0016945:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001694d:	74 0d                	je     c001695c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001694f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016957:	75 0f                	jne    c0016968 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016959:	8d 76 00             	lea    esi,[esi+0x0]
c001695c:	b8 04 00 00 00       	mov    eax,0x4
c0016961:	e9 36 01 00 00       	jmp    c0016a9c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016966:	66 90                	xchg   ax,ax
c0016968:	83 ec 08             	sub    esp,0x8
c001696b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016972:	50                   	push   eax
c0016973:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001697a:	e8 14 dc fe ff       	call   c0004593 <f_readdir>
c001697f:	83 c4 10             	add    esp,0x10
c0016982:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016989:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016990:	83 ec 0c             	sub    esp,0xc
c0016993:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001699a:	83 c0 16             	add    eax,0x16
c001699d:	50                   	push   eax
c001699e:	e8 9d 9b fe ff       	call   c0000540 <strlen>
c00169a3:	83 c4 10             	add    esp,0x10
c00169a6:	ba 00 00 00 00       	mov    edx,0x0
c00169ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169af:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00169b3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00169ba:	25 ff 00 00 00       	and    eax,0xff
c00169bf:	83 e0 10             	and    eax,0x10
c00169c2:	74 08                	je     c00169cc <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00169c4:	b8 02 00 00 00       	mov    eax,0x2
c00169c9:	eb 09                	jmp    c00169d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00169cb:	90                   	nop
c00169cc:	b8 01 00 00 00       	mov    eax,0x1
c00169d1:	8d 76 00             	lea    esi,[esi+0x0]
c00169d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00169d8:	83 ec 08             	sub    esp,0x8
c00169db:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00169e2:	83 c0 16             	add    eax,0x16
c00169e5:	50                   	push   eax
c00169e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00169ea:	83 c0 10             	add    eax,0x10
c00169ed:	50                   	push   eax
c00169ee:	e8 0d 9c fe ff       	call   c0000600 <strcpy>
c00169f3:	83 c4 10             	add    esp,0x10
c00169f6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00169fd:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016a04:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016a08:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016a0f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016a16:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016a1d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016a24:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016a2b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016a32:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016a39:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016a40:	89 c6                	mov    esi,eax
c0016a42:	89 d7                	mov    edi,edx
c0016a44:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a46:	89 c8                	mov    eax,ecx
c0016a48:	89 fa                	mov    edx,edi
c0016a4a:	89 f3                	mov    ebx,esi
c0016a4c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016a53:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016a5a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016a61:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016a68:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016a6e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016a75:	84 c0                	test   al,al
c0016a77:	75 07                	jne    c0016a80 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016a79:	b8 07 00 00 00       	mov    eax,0x7
c0016a7e:	eb 1c                	jmp    c0016a9c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016a80:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016a87:	85 c0                	test   eax,eax
c0016a89:	75 09                	jne    c0016a94 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016a8b:	b8 00 00 00 00       	mov    eax,0x0
c0016a90:	eb 0a                	jmp    c0016a9c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016a92:	66 90                	xchg   ax,ax
c0016a94:	b8 01 00 00 00       	mov    eax,0x1
c0016a99:	8d 76 00             	lea    esi,[esi+0x0]
c0016a9c:	81 c4 50 02 00 00    	add    esp,0x250
c0016aa2:	5b                   	pop    ebx
c0016aa3:	5e                   	pop    esi
c0016aa4:	5f                   	pop    edi
c0016aa5:	c3                   	ret    
c0016aa6:	66 90                	xchg   ax,ax

c0016aa8 <FAT::read(void*, unsigned long, void*, int*)>:
c0016aa8:	83 ec 1c             	sub    esp,0x1c
c0016aab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ab0:	74 0a                	je     c0016abc <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016ab2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016ab7:	75 0b                	jne    c0016ac4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0016abc:	b8 04 00 00 00       	mov    eax,0x4
c0016ac1:	eb 41                	jmp    c0016b04 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016ac3:	90                   	nop
c0016ac4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ac8:	50                   	push   eax
c0016ac9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016acd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016ad1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ad5:	e8 0e d3 fe ff       	call   c0003de8 <f_read>
c0016ada:	83 c4 10             	add    esp,0x10
c0016add:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ae1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ae5:	89 c2                	mov    edx,eax
c0016ae7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016aeb:	89 10                	mov    DWORD PTR [eax],edx
c0016aed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016af1:	85 c0                	test   eax,eax
c0016af3:	75 07                	jne    c0016afc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016af5:	b8 00 00 00 00       	mov    eax,0x0
c0016afa:	eb 08                	jmp    c0016b04 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016afc:	b8 01 00 00 00       	mov    eax,0x1
c0016b01:	8d 76 00             	lea    esi,[esi+0x0]
c0016b04:	83 c4 1c             	add    esp,0x1c
c0016b07:	c3                   	ret    

c0016b08 <FAT::write(void*, unsigned long, void*, int*)>:
c0016b08:	83 ec 1c             	sub    esp,0x1c
c0016b0b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016b10:	74 0a                	je     c0016b1c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016b12:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016b17:	75 0b                	jne    c0016b24 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016b19:	8d 76 00             	lea    esi,[esi+0x0]
c0016b1c:	b8 04 00 00 00       	mov    eax,0x4
c0016b21:	eb 41                	jmp    c0016b64 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016b23:	90                   	nop
c0016b24:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016b28:	50                   	push   eax
c0016b29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016b31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b35:	e8 ad d4 fe ff       	call   c0003fe7 <f_write>
c0016b3a:	83 c4 10             	add    esp,0x10
c0016b3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b45:	89 c2                	mov    edx,eax
c0016b47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b4b:	89 10                	mov    DWORD PTR [eax],edx
c0016b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b51:	85 c0                	test   eax,eax
c0016b53:	75 07                	jne    c0016b5c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016b55:	b8 00 00 00 00       	mov    eax,0x0
c0016b5a:	eb 08                	jmp    c0016b64 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016b5c:	b8 01 00 00 00       	mov    eax,0x1
c0016b61:	8d 76 00             	lea    esi,[esi+0x0]
c0016b64:	83 c4 1c             	add    esp,0x1c
c0016b67:	c3                   	ret    

c0016b68 <FAT::close(void*)>:
c0016b68:	83 ec 1c             	sub    esp,0x1c
c0016b6b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016b70:	75 0a                	jne    c0016b7c <FAT::close(void*)+0x14>
c0016b72:	b8 04 00 00 00       	mov    eax,0x4
c0016b77:	eb 3f                	jmp    c0016bb8 <FAT::close(void*)+0x50>
c0016b79:	8d 76 00             	lea    esi,[esi+0x0]
c0016b7c:	83 ec 0c             	sub    esp,0xc
c0016b7f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b83:	e8 48 d7 fe ff       	call   c00042d0 <f_close>
c0016b88:	83 c4 10             	add    esp,0x10
c0016b8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b8f:	83 ec 0c             	sub    esp,0xc
c0016b92:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b96:	e8 7a 0c ff ff       	call   c0007815 <free>
c0016b9b:	83 c4 10             	add    esp,0x10
c0016b9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ba2:	85 c0                	test   eax,eax
c0016ba4:	75 0a                	jne    c0016bb0 <FAT::close(void*)+0x48>
c0016ba6:	b8 00 00 00 00       	mov    eax,0x0
c0016bab:	eb 0b                	jmp    c0016bb8 <FAT::close(void*)+0x50>
c0016bad:	8d 76 00             	lea    esi,[esi+0x0]
c0016bb0:	b8 01 00 00 00       	mov    eax,0x1
c0016bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0016bb8:	83 c4 1c             	add    esp,0x1c
c0016bbb:	c3                   	ret    

c0016bbc <FAT::closeDir(void*)>:
c0016bbc:	83 ec 1c             	sub    esp,0x1c
c0016bbf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016bc4:	75 0a                	jne    c0016bd0 <FAT::closeDir(void*)+0x14>
c0016bc6:	b8 04 00 00 00       	mov    eax,0x4
c0016bcb:	eb 3f                	jmp    c0016c0c <FAT::closeDir(void*)+0x50>
c0016bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0016bd0:	83 ec 0c             	sub    esp,0xc
c0016bd3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016bd7:	e8 95 d9 fe ff       	call   c0004571 <f_closedir>
c0016bdc:	83 c4 10             	add    esp,0x10
c0016bdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016be3:	83 ec 0c             	sub    esp,0xc
c0016be6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016bea:	e8 26 0c ff ff       	call   c0007815 <free>
c0016bef:	83 c4 10             	add    esp,0x10
c0016bf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bf6:	85 c0                	test   eax,eax
c0016bf8:	75 0a                	jne    c0016c04 <FAT::closeDir(void*)+0x48>
c0016bfa:	b8 00 00 00 00       	mov    eax,0x0
c0016bff:	eb 0b                	jmp    c0016c0c <FAT::closeDir(void*)+0x50>
c0016c01:	8d 76 00             	lea    esi,[esi+0x0]
c0016c04:	b8 01 00 00 00       	mov    eax,0x1
c0016c09:	8d 76 00             	lea    esi,[esi+0x0]
c0016c0c:	83 c4 1c             	add    esp,0x1c
c0016c0f:	c3                   	ret    

c0016c10 <FAT::seek(void*, unsigned long long)>:
c0016c10:	83 ec 2c             	sub    esp,0x2c
c0016c13:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016c17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c1b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016c1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c23:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016c28:	75 0a                	jne    c0016c34 <FAT::seek(void*, unsigned long long)+0x24>
c0016c2a:	b8 04 00 00 00       	mov    eax,0x4
c0016c2f:	eb 33                	jmp    c0016c64 <FAT::seek(void*, unsigned long long)+0x54>
c0016c31:	8d 76 00             	lea    esi,[esi+0x0]
c0016c34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c38:	83 ec 08             	sub    esp,0x8
c0016c3b:	50                   	push   eax
c0016c3c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c40:	e8 ba d6 fe ff       	call   c00042ff <f_lseek>
c0016c45:	83 c4 10             	add    esp,0x10
c0016c48:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c50:	85 c0                	test   eax,eax
c0016c52:	75 08                	jne    c0016c5c <FAT::seek(void*, unsigned long long)+0x4c>
c0016c54:	b8 00 00 00 00       	mov    eax,0x0
c0016c59:	eb 09                	jmp    c0016c64 <FAT::seek(void*, unsigned long long)+0x54>
c0016c5b:	90                   	nop
c0016c5c:	b8 01 00 00 00       	mov    eax,0x1
c0016c61:	8d 76 00             	lea    esi,[esi+0x0]
c0016c64:	83 c4 2c             	add    esp,0x2c
c0016c67:	c3                   	ret    

c0016c68 <fatWrapperReadDisk>:
c0016c68:	53                   	push   ebx
c0016c69:	83 ec 18             	sub    esp,0x18
c0016c6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c70:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016c74:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016c78:	25 ff 00 00 00       	and    eax,0xff
c0016c7d:	8b 0c 85 e0 2b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd420]
c0016c84:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016c88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c8c:	ba 00 00 00 00       	mov    edx,0x0
c0016c91:	83 ec 0c             	sub    esp,0xc
c0016c94:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016c98:	53                   	push   ebx
c0016c99:	52                   	push   edx
c0016c9a:	50                   	push   eax
c0016c9b:	51                   	push   ecx
c0016c9c:	e8 e7 5e ff ff       	call   c000cb88 <LogicalDisk::read(unsigned long long, int, void*)>
c0016ca1:	83 c4 20             	add    esp,0x20
c0016ca4:	83 c4 18             	add    esp,0x18
c0016ca7:	5b                   	pop    ebx
c0016ca8:	c3                   	ret    
c0016ca9:	8d 76 00             	lea    esi,[esi+0x0]

c0016cac <fatWrapperWriteDisk>:
c0016cac:	53                   	push   ebx
c0016cad:	83 ec 18             	sub    esp,0x18
c0016cb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cb4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016cb8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016cbc:	25 ff 00 00 00       	and    eax,0xff
c0016cc1:	8b 0c 85 e0 2b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd420]
c0016cc8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016ccc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016cd0:	ba 00 00 00 00       	mov    edx,0x0
c0016cd5:	83 ec 0c             	sub    esp,0xc
c0016cd8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016cdc:	53                   	push   ebx
c0016cdd:	52                   	push   edx
c0016cde:	50                   	push   eax
c0016cdf:	51                   	push   ecx
c0016ce0:	e8 0f 5f ff ff       	call   c000cbf4 <LogicalDisk::write(unsigned long long, int, void*)>
c0016ce5:	83 c4 20             	add    esp,0x20
c0016ce8:	83 c4 18             	add    esp,0x18
c0016ceb:	5b                   	pop    ebx
c0016cec:	c3                   	ret    
c0016ced:	8d 76 00             	lea    esi,[esi+0x0]

c0016cf0 <fatWrapperIoctl>:
c0016cf0:	53                   	push   ebx
c0016cf1:	83 ec 28             	sub    esp,0x28
c0016cf4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016cf8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016cfc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016d00:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016d04:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016d09:	75 35                	jne    c0016d40 <fatWrapperIoctl+0x50>
c0016d0b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016d0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016d13:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016d17:	25 ff 00 00 00       	and    eax,0xff
c0016d1c:	8b 04 85 e0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd420]
c0016d23:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016d29:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016d2f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016d33:	66 89 02             	mov    WORD PTR [edx],ax
c0016d36:	b8 00 00 00 00       	mov    eax,0x0
c0016d3b:	e9 c4 00 00 00       	jmp    c0016e04 <fatWrapperIoctl+0x114>
c0016d40:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016d45:	75 75                	jne    c0016dbc <fatWrapperIoctl+0xcc>
c0016d47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016d4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d4f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016d53:	25 ff 00 00 00       	and    eax,0xff
c0016d58:	8b 04 85 e0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd420]
c0016d5f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016d65:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016d6b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0016d71:	89 c8                	mov    eax,ecx
c0016d73:	89 da                	mov    edx,ebx
c0016d75:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016d79:	c1 e0 0a             	shl    eax,0xa
c0016d7c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016d80:	81 e1 ff 00 00 00    	and    ecx,0xff
c0016d86:	8b 0c 8d e0 2b 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd420]
c0016d8d:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0016d93:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016d99:	89 cb                	mov    ebx,ecx
c0016d9b:	c1 fb 1f             	sar    ebx,0x1f
c0016d9e:	53                   	push   ebx
c0016d9f:	51                   	push   ecx
c0016da0:	52                   	push   edx
c0016da1:	50                   	push   eax
c0016da2:	e8 99 50 00 00       	call   c001be40 <__udivdi3>
c0016da7:	83 c4 10             	add    esp,0x10
c0016daa:	89 c2                	mov    edx,eax
c0016dac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016db0:	89 10                	mov    DWORD PTR [eax],edx
c0016db2:	b8 00 00 00 00       	mov    eax,0x0
c0016db7:	eb 4b                	jmp    c0016e04 <fatWrapperIoctl+0x114>
c0016db9:	8d 76 00             	lea    esi,[esi+0x0]
c0016dbc:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0016dc1:	75 09                	jne    c0016dcc <fatWrapperIoctl+0xdc>
c0016dc3:	b8 00 00 00 00       	mov    eax,0x0
c0016dc8:	eb 3a                	jmp    c0016e04 <fatWrapperIoctl+0x114>
c0016dca:	66 90                	xchg   ax,ax
c0016dcc:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0016dd1:	75 19                	jne    c0016dec <fatWrapperIoctl+0xfc>
c0016dd3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016dd7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ddb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ddf:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0016de5:	b8 00 00 00 00       	mov    eax,0x0
c0016dea:	eb 18                	jmp    c0016e04 <fatWrapperIoctl+0x114>
c0016dec:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0016df1:	75 09                	jne    c0016dfc <fatWrapperIoctl+0x10c>
c0016df3:	b8 00 00 00 00       	mov    eax,0x0
c0016df8:	eb 0a                	jmp    c0016e04 <fatWrapperIoctl+0x114>
c0016dfa:	66 90                	xchg   ax,ax
c0016dfc:	b8 04 00 00 00       	mov    eax,0x4
c0016e01:	8d 76 00             	lea    esi,[esi+0x0]
c0016e04:	83 c4 28             	add    esp,0x28
c0016e07:	5b                   	pop    ebx
c0016e08:	c3                   	ret    
c0016e09:	90                   	nop
c0016e0a:	66 90                	xchg   ax,ax

c0016e0c <FAT::FAT()>:
c0016e0c:	83 ec 1c             	sub    esp,0x1c
c0016e0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e13:	83 ec 0c             	sub    esp,0xc
c0016e16:	50                   	push   eax
c0016e17:	e8 a6 39 ff ff       	call   c000a7c2 <Filesystem::Filesystem()>
c0016e1c:	83 c4 10             	add    esp,0x10
c0016e1f:	ba 3c ec 01 c0       	mov    edx,0xc001ec3c
c0016e24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e28:	89 10                	mov    DWORD PTR [eax],edx
c0016e2a:	c7 05 e0 3b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023be0,0x0
c0016e34:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016e3c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0016e41:	7f 15                	jg     c0016e58 <FAT::FAT()+0x4c>
c0016e43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e47:	c7 04 85 00 3c 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc400],0xffffffff
c0016e52:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016e56:	eb e4                	jmp    c0016e3c <FAT::FAT()+0x30>
c0016e58:	90                   	nop
c0016e59:	83 c4 1c             	add    esp,0x1c
c0016e5c:	c3                   	ret    
c0016e5d:	90                   	nop
c0016e5e:	66 90                	xchg   ax,ax

c0016e60 <FAT::fixFilepath(char*)>:
c0016e60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e64:	8a 00                	mov    al,BYTE PTR [eax]
c0016e66:	3c 40                	cmp    al,0x40
c0016e68:	7e 2e                	jle    c0016e98 <FAT::fixFilepath(char*)+0x38>
c0016e6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e6e:	8a 00                	mov    al,BYTE PTR [eax]
c0016e70:	83 e8 41             	sub    eax,0x41
c0016e73:	88 c2                	mov    dl,al
c0016e75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e79:	88 10                	mov    BYTE PTR [eax],dl
c0016e7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e7f:	8a 00                	mov    al,BYTE PTR [eax]
c0016e81:	0f be c0             	movsx  eax,al
c0016e84:	8b 04 85 00 3c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc400]
c0016e8b:	83 c0 30             	add    eax,0x30
c0016e8e:	88 c2                	mov    dl,al
c0016e90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e94:	88 10                	mov    BYTE PTR [eax],dl
c0016e96:	66 90                	xchg   ax,ax
c0016e98:	90                   	nop
c0016e99:	c3                   	ret    
c0016e9a:	66 90                	xchg   ax,ax

c0016e9c <FAT::open(char const*, void**, FileOpenMode)>:
c0016e9c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016ea2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016eaa:	74 0c                	je     c0016eb8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0016eac:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016eb4:	75 0e                	jne    c0016ec4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0016eb6:	66 90                	xchg   ax,ax
c0016eb8:	b8 04 00 00 00       	mov    eax,0x4
c0016ebd:	e9 0a 01 00 00       	jmp    c0016fcc <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016ec2:	66 90                	xchg   ax,ax
c0016ec4:	83 ec 08             	sub    esp,0x8
c0016ec7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016ece:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016ed2:	50                   	push   eax
c0016ed3:	e8 28 97 fe ff       	call   c0000600 <strcpy>
c0016ed8:	83 c4 10             	add    esp,0x10
c0016edb:	83 ec 08             	sub    esp,0x8
c0016ede:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016ee2:	50                   	push   eax
c0016ee3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016eea:	e8 71 ff ff ff       	call   c0016e60 <FAT::fixFilepath(char*)>
c0016eef:	83 c4 10             	add    esp,0x10
c0016ef2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0016efa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016f01:	83 e0 01             	and    eax,0x1
c0016f04:	74 0a                	je     c0016f10 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0016f06:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0016f0e:	66 90                	xchg   ax,ax
c0016f10:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016f17:	83 e0 04             	and    eax,0x4
c0016f1a:	74 10                	je     c0016f2c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0016f1c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0016f24:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016f2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016f33:	83 e0 02             	and    eax,0x2
c0016f36:	74 08                	je     c0016f40 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016f38:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016f40:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016f47:	83 e0 08             	and    eax,0x8
c0016f4a:	74 08                	je     c0016f54 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0016f4c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0016f54:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016f5b:	83 e0 10             	and    eax,0x10
c0016f5e:	74 08                	je     c0016f68 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0016f60:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0016f68:	83 ec 0c             	sub    esp,0xc
c0016f6b:	68 28 02 00 00       	push   0x228
c0016f70:	e8 90 08 ff ff       	call   c0007805 <malloc>
c0016f75:	83 c4 10             	add    esp,0x10
c0016f78:	89 c2                	mov    edx,eax
c0016f7a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016f81:	89 10                	mov    DWORD PTR [eax],edx
c0016f83:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0016f8a:	31 d2                	xor    edx,edx
c0016f8c:	88 c2                	mov    dl,al
c0016f8e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016f95:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f97:	83 ec 04             	sub    esp,0x4
c0016f9a:	52                   	push   edx
c0016f9b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016f9f:	52                   	push   edx
c0016fa0:	50                   	push   eax
c0016fa1:	e8 77 cb fe ff       	call   c0003b1d <f_open>
c0016fa6:	83 c4 10             	add    esp,0x10
c0016fa9:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0016fb0:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0016fb8:	74 0a                	je     c0016fc4 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0016fba:	b8 01 00 00 00       	mov    eax,0x1
c0016fbf:	eb 0b                	jmp    c0016fcc <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fc4:	b8 00 00 00 00       	mov    eax,0x0
c0016fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fcc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016fd2:	c3                   	ret    
c0016fd3:	90                   	nop

c0016fd4 <FAT::openDir(char const*, void**)>:
c0016fd4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016fda:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016fe2:	74 0c                	je     c0016ff0 <FAT::openDir(char const*, void**)+0x1c>
c0016fe4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016fec:	75 0e                	jne    c0016ffc <FAT::openDir(char const*, void**)+0x28>
c0016fee:	66 90                	xchg   ax,ax
c0016ff0:	b8 04 00 00 00       	mov    eax,0x4
c0016ff5:	e9 82 00 00 00       	jmp    c001707c <FAT::openDir(char const*, void**)+0xa8>
c0016ffa:	66 90                	xchg   ax,ax
c0016ffc:	83 ec 08             	sub    esp,0x8
c0016fff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017006:	8d 44 24 18          	lea    eax,[esp+0x18]
c001700a:	50                   	push   eax
c001700b:	e8 f0 95 fe ff       	call   c0000600 <strcpy>
c0017010:	83 c4 10             	add    esp,0x10
c0017013:	83 ec 08             	sub    esp,0x8
c0017016:	8d 44 24 14          	lea    eax,[esp+0x14]
c001701a:	50                   	push   eax
c001701b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017022:	e8 39 fe ff ff       	call   c0016e60 <FAT::fixFilepath(char*)>
c0017027:	83 c4 10             	add    esp,0x10
c001702a:	83 ec 0c             	sub    esp,0xc
c001702d:	6a 30                	push   0x30
c001702f:	e8 d1 07 ff ff       	call   c0007805 <malloc>
c0017034:	83 c4 10             	add    esp,0x10
c0017037:	89 c2                	mov    edx,eax
c0017039:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017040:	89 10                	mov    DWORD PTR [eax],edx
c0017042:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017049:	8b 00                	mov    eax,DWORD PTR [eax]
c001704b:	83 ec 08             	sub    esp,0x8
c001704e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0017052:	52                   	push   edx
c0017053:	50                   	push   eax
c0017054:	e8 4d d4 fe ff       	call   c00044a6 <f_opendir>
c0017059:	83 c4 10             	add    esp,0x10
c001705c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017063:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001706b:	74 07                	je     c0017074 <FAT::openDir(char const*, void**)+0xa0>
c001706d:	b8 01 00 00 00       	mov    eax,0x1
c0017072:	eb 08                	jmp    c001707c <FAT::openDir(char const*, void**)+0xa8>
c0017074:	b8 00 00 00 00       	mov    eax,0x0
c0017079:	8d 76 00             	lea    esi,[esi+0x0]
c001707c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017082:	c3                   	ret    
c0017083:	90                   	nop

c0017084 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017084:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001708a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0017092:	75 0c                	jne    c00170a0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017094:	b8 04 00 00 00       	mov    eax,0x4
c0017099:	e9 d6 00 00 00       	jmp    c0017174 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001709e:	66 90                	xchg   ax,ax
c00170a0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00170a8:	75 0a                	jne    c00170b4 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00170aa:	b8 04 00 00 00       	mov    eax,0x4
c00170af:	e9 c0 00 00 00       	jmp    c0017174 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00170b4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00170bc:	75 0a                	jne    c00170c8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00170be:	b8 04 00 00 00       	mov    eax,0x4
c00170c3:	e9 ac 00 00 00       	jmp    c0017174 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00170c8:	83 ec 08             	sub    esp,0x8
c00170cb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00170d2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00170d9:	50                   	push   eax
c00170da:	e8 21 95 fe ff       	call   c0000600 <strcpy>
c00170df:	83 c4 10             	add    esp,0x10
c00170e2:	83 ec 08             	sub    esp,0x8
c00170e5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00170ec:	50                   	push   eax
c00170ed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00170f4:	e8 67 fd ff ff       	call   c0016e60 <FAT::fixFilepath(char*)>
c00170f9:	83 c4 10             	add    esp,0x10
c00170fc:	83 ec 08             	sub    esp,0x8
c00170ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017103:	50                   	push   eax
c0017104:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001710b:	50                   	push   eax
c001710c:	e8 14 d5 fe ff       	call   c0004625 <f_stat>
c0017111:	83 c4 10             	add    esp,0x10
c0017114:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001711b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017122:	85 c0                	test   eax,eax
c0017124:	74 0a                	je     c0017130 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0017126:	83 f8 04             	cmp    eax,0x4
c0017129:	74 39                	je     c0017164 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001712b:	eb 3f                	jmp    c001716c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001712d:	8d 76 00             	lea    esi,[esi+0x0]
c0017130:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017134:	25 ff 00 00 00       	and    eax,0xff
c0017139:	83 e0 10             	and    eax,0x10
c001713c:	0f 95 c2             	setne  dl
c001713f:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0017146:	88 10                	mov    BYTE PTR [eax],dl
c0017148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001714c:	ba 00 00 00 00       	mov    edx,0x0
c0017151:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017158:	89 01                	mov    DWORD PTR [ecx],eax
c001715a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001715d:	b8 00 00 00 00       	mov    eax,0x0
c0017162:	eb 10                	jmp    c0017174 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017164:	b8 02 00 00 00       	mov    eax,0x2
c0017169:	eb 09                	jmp    c0017174 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001716b:	90                   	nop
c001716c:	b8 01 00 00 00       	mov    eax,0x1
c0017171:	8d 76 00             	lea    esi,[esi+0x0]
c0017174:	81 c4 2c 02 00 00    	add    esp,0x22c
c001717a:	c3                   	ret    
c001717b:	90                   	nop

c001717c <FAT::unlink(char const*)>:
c001717c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017182:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001718a:	75 08                	jne    c0017194 <FAT::unlink(char const*)+0x18>
c001718c:	b8 04 00 00 00       	mov    eax,0x4
c0017191:	eb 61                	jmp    c00171f4 <FAT::unlink(char const*)+0x78>
c0017193:	90                   	nop
c0017194:	83 ec 08             	sub    esp,0x8
c0017197:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001719e:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171a2:	50                   	push   eax
c00171a3:	e8 58 94 fe ff       	call   c0000600 <strcpy>
c00171a8:	83 c4 10             	add    esp,0x10
c00171ab:	83 ec 08             	sub    esp,0x8
c00171ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c00171b2:	50                   	push   eax
c00171b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00171ba:	e8 a1 fc ff ff       	call   c0016e60 <FAT::fixFilepath(char*)>
c00171bf:	83 c4 10             	add    esp,0x10
c00171c2:	83 ec 0c             	sub    esp,0xc
c00171c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171c9:	50                   	push   eax
c00171ca:	e8 bb d6 fe ff       	call   c000488a <f_unlink>
c00171cf:	83 c4 10             	add    esp,0x10
c00171d2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00171d9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00171e0:	85 c0                	test   eax,eax
c00171e2:	75 08                	jne    c00171ec <FAT::unlink(char const*)+0x70>
c00171e4:	b8 00 00 00 00       	mov    eax,0x0
c00171e9:	eb 09                	jmp    c00171f4 <FAT::unlink(char const*)+0x78>
c00171eb:	90                   	nop
c00171ec:	b8 01 00 00 00       	mov    eax,0x1
c00171f1:	8d 76 00             	lea    esi,[esi+0x0]
c00171f4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00171fa:	c3                   	ret    
c00171fb:	90                   	nop

c00171fc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00171fc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017202:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017209:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017210:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017214:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017218:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017220:	75 0a                	jne    c001722c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0017222:	b8 04 00 00 00       	mov    eax,0x4
c0017227:	e9 54 01 00 00       	jmp    c0017380 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001722c:	83 ec 08             	sub    esp,0x8
c001722f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017236:	8d 44 24 24          	lea    eax,[esp+0x24]
c001723a:	50                   	push   eax
c001723b:	e8 c0 93 fe ff       	call   c0000600 <strcpy>
c0017240:	83 c4 10             	add    esp,0x10
c0017243:	83 ec 08             	sub    esp,0x8
c0017246:	8d 44 24 20          	lea    eax,[esp+0x20]
c001724a:	50                   	push   eax
c001724b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017252:	e8 09 fc ff ff       	call   c0016e60 <FAT::fixFilepath(char*)>
c0017257:	83 c4 10             	add    esp,0x10
c001725a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0017262:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001726a:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001726e:	25 ff 00 00 00       	and    eax,0xff
c0017273:	83 e0 01             	and    eax,0x1
c0017276:	74 08                	je     c0017280 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0017278:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017280:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017284:	25 ff 00 00 00       	and    eax,0xff
c0017289:	83 e0 02             	and    eax,0x2
c001728c:	74 0a                	je     c0017298 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c001728e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0017296:	66 90                	xchg   ax,ax
c0017298:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001729c:	25 ff 00 00 00       	and    eax,0xff
c00172a1:	83 e0 04             	and    eax,0x4
c00172a4:	74 0a                	je     c00172b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00172a6:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00172ae:	66 90                	xchg   ax,ax
c00172b0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00172b4:	25 ff 00 00 00       	and    eax,0xff
c00172b9:	83 e0 08             	and    eax,0x8
c00172bc:	74 0a                	je     c00172c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00172be:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00172c6:	66 90                	xchg   ax,ax
c00172c8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00172cc:	25 ff 00 00 00       	and    eax,0xff
c00172d1:	83 e0 01             	and    eax,0x1
c00172d4:	74 0a                	je     c00172e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00172d6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00172de:	66 90                	xchg   ax,ax
c00172e0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00172e4:	25 ff 00 00 00       	and    eax,0xff
c00172e9:	83 e0 02             	and    eax,0x2
c00172ec:	74 0a                	je     c00172f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00172ee:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00172f6:	66 90                	xchg   ax,ax
c00172f8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00172fc:	25 ff 00 00 00       	and    eax,0xff
c0017301:	83 e0 04             	and    eax,0x4
c0017304:	74 0a                	je     c0017310 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0017306:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001730e:	66 90                	xchg   ax,ax
c0017310:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017314:	25 ff 00 00 00       	and    eax,0xff
c0017319:	83 e0 08             	and    eax,0x8
c001731c:	74 0a                	je     c0017328 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001731e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0017326:	66 90                	xchg   ax,ax
c0017328:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001732f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017336:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001733d:	31 d2                	xor    edx,edx
c001733f:	88 c2                	mov    dl,al
c0017341:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017348:	25 ff 00 00 00       	and    eax,0xff
c001734d:	83 ec 04             	sub    esp,0x4
c0017350:	52                   	push   edx
c0017351:	50                   	push   eax
c0017352:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017356:	50                   	push   eax
c0017357:	e8 a1 d9 fe ff       	call   c0004cfd <f_chmod>
c001735c:	83 c4 10             	add    esp,0x10
c001735f:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0017366:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001736d:	85 c0                	test   eax,eax
c001736f:	75 07                	jne    c0017378 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017371:	b8 00 00 00 00       	mov    eax,0x0
c0017376:	eb 08                	jmp    c0017380 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017378:	b8 01 00 00 00       	mov    eax,0x1
c001737d:	8d 76 00             	lea    esi,[esi+0x0]
c0017380:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017386:	c3                   	ret    
c0017387:	90                   	nop

c0017388 <FAT::rename(char const*, char const*)>:
c0017388:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001738e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0017396:	74 0c                	je     c00173a4 <FAT::rename(char const*, char const*)+0x1c>
c0017398:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00173a0:	75 0e                	jne    c00173b0 <FAT::rename(char const*, char const*)+0x28>
c00173a2:	66 90                	xchg   ax,ax
c00173a4:	b8 04 00 00 00       	mov    eax,0x4
c00173a9:	e9 9e 00 00 00       	jmp    c001744c <FAT::rename(char const*, char const*)+0xc4>
c00173ae:	66 90                	xchg   ax,ax
c00173b0:	83 ec 08             	sub    esp,0x8
c00173b3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00173ba:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00173c1:	50                   	push   eax
c00173c2:	e8 39 92 fe ff       	call   c0000600 <strcpy>
c00173c7:	83 c4 10             	add    esp,0x10
c00173ca:	83 ec 08             	sub    esp,0x8
c00173cd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00173d4:	50                   	push   eax
c00173d5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00173dc:	e8 7f fa ff ff       	call   c0016e60 <FAT::fixFilepath(char*)>
c00173e1:	83 c4 10             	add    esp,0x10
c00173e4:	83 ec 08             	sub    esp,0x8
c00173e7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00173ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c00173f2:	50                   	push   eax
c00173f3:	e8 08 92 fe ff       	call   c0000600 <strcpy>
c00173f8:	83 c4 10             	add    esp,0x10
c00173fb:	83 ec 08             	sub    esp,0x8
c00173fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017402:	50                   	push   eax
c0017403:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001740a:	e8 51 fa ff ff       	call   c0016e60 <FAT::fixFilepath(char*)>
c001740f:	83 c4 10             	add    esp,0x10
c0017412:	83 ec 08             	sub    esp,0x8
c0017415:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017419:	50                   	push   eax
c001741a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017421:	50                   	push   eax
c0017422:	e8 20 d7 fe ff       	call   c0004b47 <f_rename>
c0017427:	83 c4 10             	add    esp,0x10
c001742a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017431:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017438:	85 c0                	test   eax,eax
c001743a:	75 08                	jne    c0017444 <FAT::rename(char const*, char const*)+0xbc>
c001743c:	b8 00 00 00 00       	mov    eax,0x0
c0017441:	eb 09                	jmp    c001744c <FAT::rename(char const*, char const*)+0xc4>
c0017443:	90                   	nop
c0017444:	b8 01 00 00 00       	mov    eax,0x1
c0017449:	8d 76 00             	lea    esi,[esi+0x0]
c001744c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0017452:	c3                   	ret    
c0017453:	90                   	nop

c0017454 <FAT::mkdir(char const*)>:
c0017454:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001745a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017462:	75 08                	jne    c001746c <FAT::mkdir(char const*)+0x18>
c0017464:	b8 04 00 00 00       	mov    eax,0x4
c0017469:	eb 61                	jmp    c00174cc <FAT::mkdir(char const*)+0x78>
c001746b:	90                   	nop
c001746c:	83 ec 08             	sub    esp,0x8
c001746f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017476:	8d 44 24 18          	lea    eax,[esp+0x18]
c001747a:	50                   	push   eax
c001747b:	e8 80 91 fe ff       	call   c0000600 <strcpy>
c0017480:	83 c4 10             	add    esp,0x10
c0017483:	83 ec 08             	sub    esp,0x8
c0017486:	8d 44 24 14          	lea    eax,[esp+0x14]
c001748a:	50                   	push   eax
c001748b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017492:	e8 c9 f9 ff ff       	call   c0016e60 <FAT::fixFilepath(char*)>
c0017497:	83 c4 10             	add    esp,0x10
c001749a:	83 ec 0c             	sub    esp,0xc
c001749d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00174a1:	50                   	push   eax
c00174a2:	e8 05 d5 fe ff       	call   c00049ac <f_mkdir>
c00174a7:	83 c4 10             	add    esp,0x10
c00174aa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00174b1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00174b8:	85 c0                	test   eax,eax
c00174ba:	75 08                	jne    c00174c4 <FAT::mkdir(char const*)+0x70>
c00174bc:	b8 00 00 00 00       	mov    eax,0x0
c00174c1:	eb 09                	jmp    c00174cc <FAT::mkdir(char const*)+0x78>
c00174c3:	90                   	nop
c00174c4:	b8 01 00 00 00       	mov    eax,0x1
c00174c9:	8d 76 00             	lea    esi,[esi+0x0]
c00174cc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174d2:	c3                   	ret    
c00174d3:	90                   	nop

c00174d4 <FAT::exists(char const*)>:
c00174d4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00174da:	83 ec 08             	sub    esp,0x8
c00174dd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00174e4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00174e8:	50                   	push   eax
c00174e9:	e8 12 91 fe ff       	call   c0000600 <strcpy>
c00174ee:	83 c4 10             	add    esp,0x10
c00174f1:	83 ec 08             	sub    esp,0x8
c00174f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00174f8:	50                   	push   eax
c00174f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017500:	e8 5b f9 ff ff       	call   c0016e60 <FAT::fixFilepath(char*)>
c0017505:	83 c4 10             	add    esp,0x10
c0017508:	83 ec 08             	sub    esp,0x8
c001750b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0017512:	50                   	push   eax
c0017513:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017517:	50                   	push   eax
c0017518:	e8 08 d1 fe ff       	call   c0004625 <f_stat>
c001751d:	83 c4 10             	add    esp,0x10
c0017520:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017527:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001752e:	85 c0                	test   eax,eax
c0017530:	75 06                	jne    c0017538 <FAT::exists(char const*)+0x64>
c0017532:	b0 01                	mov    al,0x1
c0017534:	eb 06                	jmp    c001753c <FAT::exists(char const*)+0x68>
c0017536:	66 90                	xchg   ax,ax
c0017538:	b0 00                	mov    al,0x0
c001753a:	66 90                	xchg   ax,ax
c001753c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017542:	c3                   	ret    
c0017543:	90                   	nop

c0017544 <isoReadDiscSectorHelper>:
c0017544:	83 ec 2c             	sub    esp,0x2c
c0017547:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001754b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001754f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017554:	83 e8 41             	sub    eax,0x41
c0017557:	8b 0c 85 e0 2b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd420]
c001755e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017562:	ba 00 00 00 00       	mov    edx,0x0
c0017567:	83 ec 0c             	sub    esp,0xc
c001756a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001756e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017572:	52                   	push   edx
c0017573:	50                   	push   eax
c0017574:	51                   	push   ecx
c0017575:	e8 0e 56 ff ff       	call   c000cb88 <LogicalDisk::read(unsigned long long, int, void*)>
c001757a:	83 c4 20             	add    esp,0x20
c001757d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017581:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017586:	74 0c                	je     c0017594 <isoReadDiscSectorHelper+0x50>
c0017588:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001758c:	c1 e0 0b             	shl    eax,0xb
c001758f:	eb 0b                	jmp    c001759c <isoReadDiscSectorHelper+0x58>
c0017591:	8d 76 00             	lea    esi,[esi+0x0]
c0017594:	b8 00 00 00 00       	mov    eax,0x0
c0017599:	8d 76 00             	lea    esi,[esi+0x0]
c001759c:	83 c4 2c             	add    esp,0x2c
c001759f:	c3                   	ret    

c00175a0 <iso_kprintf>:
c00175a0:	83 ec 0c             	sub    esp,0xc
c00175a3:	a1 c4 06 02 c0       	mov    eax,ds:0xc00206c4
c00175a8:	83 ec 08             	sub    esp,0x8
c00175ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00175af:	50                   	push   eax
c00175b0:	e8 cd 11 ff ff       	call   c0008782 <VgaText::puts(char const*)>
c00175b5:	83 c4 10             	add    esp,0x10
c00175b8:	90                   	nop
c00175b9:	83 c4 0c             	add    esp,0xc
c00175bc:	c3                   	ret    
c00175bd:	8d 76 00             	lea    esi,[esi+0x0]

c00175c0 <iso_kprintfd>:
c00175c0:	83 ec 0c             	sub    esp,0xc
c00175c3:	a1 c4 06 02 c0       	mov    eax,ds:0xc00206c4
c00175c8:	83 ec 08             	sub    esp,0x8
c00175cb:	68 9c ec 01 c0       	push   0xc001ec9c
c00175d0:	50                   	push   eax
c00175d1:	e8 ac 11 ff ff       	call   c0008782 <VgaText::puts(char const*)>
c00175d6:	83 c4 10             	add    esp,0x10
c00175d9:	a1 c4 06 02 c0       	mov    eax,ds:0xc00206c4
c00175de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00175e2:	83 ec 08             	sub    esp,0x8
c00175e5:	52                   	push   edx
c00175e6:	50                   	push   eax
c00175e7:	e8 50 11 ff ff       	call   c000873c <VgaText::putx(unsigned int)>
c00175ec:	83 c4 10             	add    esp,0x10
c00175ef:	a1 c4 06 02 c0       	mov    eax,ds:0xc00206c4
c00175f4:	83 ec 08             	sub    esp,0x8
c00175f7:	68 1d eb 01 c0       	push   0xc001eb1d
c00175fc:	50                   	push   eax
c00175fd:	e8 80 11 ff ff       	call   c0008782 <VgaText::puts(char const*)>
c0017602:	83 c4 10             	add    esp,0x10
c0017605:	90                   	nop
c0017606:	83 c4 0c             	add    esp,0xc
c0017609:	c3                   	ret    

c001760a <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001760a:	b8 08 00 00 00       	mov    eax,0x8
c001760f:	c3                   	ret    

c0017610 <ISO9660::getName()>:
c0017610:	b8 9f ec 01 c0       	mov    eax,0xc001ec9f
c0017615:	c3                   	ret    

c0017616 <ISO9660::closeDir(void*)>:
c0017616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001761a:	8b 00                	mov    eax,DWORD PTR [eax]
c001761c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001761f:	90                   	nop

c0017620 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0017620:	b8 01 00 00 00       	mov    eax,0x1
c0017625:	c3                   	ret    

c0017626 <ISO9660::unlink(char const*)>:
c0017626:	b8 01 00 00 00       	mov    eax,0x1
c001762b:	c3                   	ret    

c001762c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001762c:	b8 03 00 00 00       	mov    eax,0x3
c0017631:	c3                   	ret    

c0017632 <ISO9660::rename(char const*, char const*)>:
c0017632:	b8 01 00 00 00       	mov    eax,0x1
c0017637:	c3                   	ret    

c0017638 <ISO9660::mkdir(char const*)>:
c0017638:	b8 01 00 00 00       	mov    eax,0x1
c001763d:	c3                   	ret    

c001763e <ISO9660::~ISO9660()>:
c001763e:	83 ec 0c             	sub    esp,0xc
c0017641:	ba 20 ed 01 c0       	mov    edx,0xc001ed20
c0017646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001764a:	89 10                	mov    DWORD PTR [eax],edx
c001764c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017650:	83 ec 0c             	sub    esp,0xc
c0017653:	50                   	push   eax
c0017654:	e8 8d 31 ff ff       	call   c000a7e6 <Filesystem::~Filesystem()>
c0017659:	83 c4 10             	add    esp,0x10
c001765c:	90                   	nop
c001765d:	83 c4 0c             	add    esp,0xc
c0017660:	c3                   	ret    
c0017661:	90                   	nop

c0017662 <ISO9660::~ISO9660()>:
c0017662:	83 ec 0c             	sub    esp,0xc
c0017665:	83 ec 0c             	sub    esp,0xc
c0017668:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001766c:	e8 cd ff ff ff       	call   c001763e <ISO9660::~ISO9660()>
c0017671:	83 c4 10             	add    esp,0x10
c0017674:	83 ec 08             	sub    esp,0x8
c0017677:	6a 08                	push   0x8
c0017679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001767d:	e8 28 2d ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c0017682:	83 c4 10             	add    esp,0x10
c0017685:	83 c4 0c             	add    esp,0xc
c0017688:	c3                   	ret    
c0017689:	90                   	nop

c001768a <ISO9660::exists(char const*)>:
c001768a:	83 ec 18             	sub    esp,0x18
c001768d:	68 ba ec 01 c0       	push   0xc001ecba
c0017692:	e8 6c 8a ff ff       	call   c0010103 <KePanic(char const*)>
c0017697:	31 c0                	xor    eax,eax
c0017699:	83 c4 1c             	add    esp,0x1c
c001769c:	c3                   	ret    
c001769d:	90                   	nop

c001769e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001769e:	56                   	push   esi
c001769f:	53                   	push   ebx
c00176a0:	53                   	push   ebx
c00176a1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00176a5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00176a9:	85 db                	test   ebx,ebx
c00176ab:	74 72                	je     c001771f <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c00176ad:	85 f6                	test   esi,esi
c00176af:	74 6e                	je     c001771f <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c00176b1:	ba 03 00 00 00       	mov    edx,0x3
c00176b6:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00176bb:	75 67                	jne    c0017724 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c00176bd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00176c0:	3a 05 e0 3c 02 c0    	cmp    al,BYTE PTR ds:0xc0023ce0
c00176c6:	74 34                	je     c00176fc <ISO9660::open(char const*, void**, FileOpenMode)+0x5e>
c00176c8:	83 ec 0c             	sub    esp,0xc
c00176cb:	50                   	push   eax
c00176cc:	e8 ee f0 fe ff       	call   c00067bf <init_percd>
c00176d1:	83 c4 10             	add    esp,0x10
c00176d4:	ba 0b 00 00 00       	mov    edx,0xb
c00176d9:	40                   	inc    eax
c00176da:	74 48                	je     c0017724 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c00176dc:	80 3d e0 3c 02 c0 00 	cmp    BYTE PTR ds:0xc0023ce0,0x0
c00176e3:	74 10                	je     c00176f5 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c00176e5:	83 ec 0c             	sub    esp,0xc
c00176e8:	68 d8 ec 01 c0       	push   0xc001ecd8
c00176ed:	e8 11 8a ff ff       	call   c0010103 <KePanic(char const*)>
c00176f2:	83 c4 10             	add    esp,0x10
c00176f5:	8a 03                	mov    al,BYTE PTR [ebx]
c00176f7:	a2 e0 3c 02 c0       	mov    ds:0xc0023ce0,al
c00176fc:	83 c3 03             	add    ebx,0x3
c00176ff:	51                   	push   ecx
c0017700:	51                   	push   ecx
c0017701:	6a 00                	push   0x0
c0017703:	53                   	push   ebx
c0017704:	e8 f4 eb fe ff       	call   c00062fd <iso_open>
c0017709:	83 c4 10             	add    esp,0x10
c001770c:	ba 01 00 00 00       	mov    edx,0x1
c0017711:	83 f8 ff             	cmp    eax,0xffffffff
c0017714:	74 0e                	je     c0017724 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017716:	83 c0 64             	add    eax,0x64
c0017719:	31 d2                	xor    edx,edx
c001771b:	89 06                	mov    DWORD PTR [esi],eax
c001771d:	eb 05                	jmp    c0017724 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c001771f:	ba 04 00 00 00       	mov    edx,0x4
c0017724:	89 d0                	mov    eax,edx
c0017726:	5a                   	pop    edx
c0017727:	5b                   	pop    ebx
c0017728:	5e                   	pop    esi
c0017729:	c3                   	ret    

c001772a <ISO9660::openDir(char const*, void**)>:
c001772a:	56                   	push   esi
c001772b:	53                   	push   ebx
c001772c:	53                   	push   ebx
c001772d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017731:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017735:	85 db                	test   ebx,ebx
c0017737:	74 66                	je     c001779f <ISO9660::openDir(char const*, void**)+0x75>
c0017739:	85 f6                	test   esi,esi
c001773b:	74 62                	je     c001779f <ISO9660::openDir(char const*, void**)+0x75>
c001773d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017740:	3a 05 e0 3c 02 c0    	cmp    al,BYTE PTR ds:0xc0023ce0
c0017746:	74 34                	je     c001777c <ISO9660::openDir(char const*, void**)+0x52>
c0017748:	83 ec 0c             	sub    esp,0xc
c001774b:	50                   	push   eax
c001774c:	e8 6e f0 fe ff       	call   c00067bf <init_percd>
c0017751:	83 c4 10             	add    esp,0x10
c0017754:	ba 0b 00 00 00       	mov    edx,0xb
c0017759:	40                   	inc    eax
c001775a:	74 48                	je     c00177a4 <ISO9660::openDir(char const*, void**)+0x7a>
c001775c:	80 3d e0 3c 02 c0 00 	cmp    BYTE PTR ds:0xc0023ce0,0x0
c0017763:	74 10                	je     c0017775 <ISO9660::openDir(char const*, void**)+0x4b>
c0017765:	83 ec 0c             	sub    esp,0xc
c0017768:	68 d8 ec 01 c0       	push   0xc001ecd8
c001776d:	e8 91 89 ff ff       	call   c0010103 <KePanic(char const*)>
c0017772:	83 c4 10             	add    esp,0x10
c0017775:	8a 03                	mov    al,BYTE PTR [ebx]
c0017777:	a2 e0 3c 02 c0       	mov    ds:0xc0023ce0,al
c001777c:	83 c3 03             	add    ebx,0x3
c001777f:	51                   	push   ecx
c0017780:	51                   	push   ecx
c0017781:	6a 01                	push   0x1
c0017783:	53                   	push   ebx
c0017784:	e8 74 eb fe ff       	call   c00062fd <iso_open>
c0017789:	83 c4 10             	add    esp,0x10
c001778c:	ba 01 00 00 00       	mov    edx,0x1
c0017791:	83 f8 ff             	cmp    eax,0xffffffff
c0017794:	74 0e                	je     c00177a4 <ISO9660::openDir(char const*, void**)+0x7a>
c0017796:	83 c0 64             	add    eax,0x64
c0017799:	31 d2                	xor    edx,edx
c001779b:	89 06                	mov    DWORD PTR [esi],eax
c001779d:	eb 05                	jmp    c00177a4 <ISO9660::openDir(char const*, void**)+0x7a>
c001779f:	ba 04 00 00 00       	mov    edx,0x4
c00177a4:	89 d0                	mov    eax,edx
c00177a6:	5a                   	pop    edx
c00177a7:	5b                   	pop    ebx
c00177a8:	5e                   	pop    esi
c00177a9:	c3                   	ret    

c00177aa <ISO9660::read(void*, unsigned long, void*, int*)>:
c00177aa:	53                   	push   ebx
c00177ab:	83 ec 08             	sub    esp,0x8
c00177ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00177b6:	85 c0                	test   eax,eax
c00177b8:	74 25                	je     c00177df <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c00177ba:	85 db                	test   ebx,ebx
c00177bc:	74 21                	je     c00177df <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c00177be:	83 e8 64             	sub    eax,0x64
c00177c1:	52                   	push   edx
c00177c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00177c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00177ca:	50                   	push   eax
c00177cb:	e8 d5 eb fe ff       	call   c00063a5 <iso_read>
c00177d0:	83 c4 10             	add    esp,0x10
c00177d3:	89 03                	mov    DWORD PTR [ebx],eax
c00177d5:	09 d0                	or     eax,edx
c00177d7:	0f 94 c0             	sete   al
c00177da:	0f b6 c0             	movzx  eax,al
c00177dd:	eb 05                	jmp    c00177e4 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c00177df:	b8 04 00 00 00       	mov    eax,0x4
c00177e4:	83 c4 08             	add    esp,0x8
c00177e7:	5b                   	pop    ebx
c00177e8:	c3                   	ret    
c00177e9:	90                   	nop

c00177ea <ISO9660::seek(void*, unsigned long long)>:
c00177ea:	57                   	push   edi
c00177eb:	56                   	push   esi
c00177ec:	b8 04 00 00 00       	mov    eax,0x4
c00177f1:	51                   	push   ecx
c00177f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00177f6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00177fa:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00177fe:	85 d2                	test   edx,edx
c0017800:	74 1c                	je     c001781e <ISO9660::seek(void*, unsigned long long)+0x34>
c0017802:	6a 00                	push   0x0
c0017804:	83 ea 64             	sub    edx,0x64
c0017807:	57                   	push   edi
c0017808:	56                   	push   esi
c0017809:	52                   	push   edx
c001780a:	e8 ac ec fe ff       	call   c00064bb <iso_seek>
c001780f:	83 c4 10             	add    esp,0x10
c0017812:	31 f0                	xor    eax,esi
c0017814:	31 fa                	xor    edx,edi
c0017816:	09 d0                	or     eax,edx
c0017818:	0f 95 c0             	setne  al
c001781b:	0f b6 c0             	movzx  eax,al
c001781e:	5a                   	pop    edx
c001781f:	5e                   	pop    esi
c0017820:	5f                   	pop    edi
c0017821:	c3                   	ret    

c0017822 <ISO9660::tell(void*, unsigned long long*)>:
c0017822:	53                   	push   ebx
c0017823:	83 ec 08             	sub    esp,0x8
c0017826:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001782a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001782e:	85 c0                	test   eax,eax
c0017830:	74 1c                	je     c001784e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017832:	85 db                	test   ebx,ebx
c0017834:	74 18                	je     c001784e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017836:	83 ec 0c             	sub    esp,0xc
c0017839:	83 e8 64             	sub    eax,0x64
c001783c:	50                   	push   eax
c001783d:	e8 fd ec fe ff       	call   c000653f <iso_tell>
c0017842:	83 c4 10             	add    esp,0x10
c0017845:	89 03                	mov    DWORD PTR [ebx],eax
c0017847:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001784a:	31 c0                	xor    eax,eax
c001784c:	eb 05                	jmp    c0017853 <ISO9660::tell(void*, unsigned long long*)+0x31>
c001784e:	b8 04 00 00 00       	mov    eax,0x4
c0017853:	83 c4 08             	add    esp,0x8
c0017856:	5b                   	pop    ebx
c0017857:	c3                   	ret    

c0017858 <ISO9660::stat(void*, unsigned long long*)>:
c0017858:	53                   	push   ebx
c0017859:	83 ec 08             	sub    esp,0x8
c001785c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017860:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017864:	85 c0                	test   eax,eax
c0017866:	74 20                	je     c0017888 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017868:	85 db                	test   ebx,ebx
c001786a:	74 1c                	je     c0017888 <ISO9660::stat(void*, unsigned long long*)+0x30>
c001786c:	83 ec 0c             	sub    esp,0xc
c001786f:	83 e8 64             	sub    eax,0x64
c0017872:	50                   	push   eax
c0017873:	e8 f8 ec fe ff       	call   c0006570 <iso_total>
c0017878:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001787f:	89 03                	mov    DWORD PTR [ebx],eax
c0017881:	83 c4 10             	add    esp,0x10
c0017884:	31 c0                	xor    eax,eax
c0017886:	eb 05                	jmp    c001788d <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017888:	b8 04 00 00 00       	mov    eax,0x4
c001788d:	83 c4 08             	add    esp,0x8
c0017890:	5b                   	pop    ebx
c0017891:	c3                   	ret    

c0017892 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017892:	55                   	push   ebp
c0017893:	57                   	push   edi
c0017894:	56                   	push   esi
c0017895:	53                   	push   ebx
c0017896:	83 ec 0c             	sub    esp,0xc
c0017899:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001789d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00178a1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00178a5:	85 ff                	test   edi,edi
c00178a7:	0f 94 c2             	sete   dl
c00178aa:	85 f6                	test   esi,esi
c00178ac:	0f 94 c0             	sete   al
c00178af:	08 c2                	or     dl,al
c00178b1:	0f 85 b7 00 00 00    	jne    c001796e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c00178b7:	85 db                	test   ebx,ebx
c00178b9:	0f 84 af 00 00 00    	je     c001796e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c00178bf:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00178c2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00178c8:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00178cf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00178d2:	3a 05 e0 3c 02 c0    	cmp    al,BYTE PTR ds:0xc0023ce0
c00178d8:	74 38                	je     c0017912 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x80>
c00178da:	83 ec 0c             	sub    esp,0xc
c00178dd:	50                   	push   eax
c00178de:	e8 dc ee fe ff       	call   c00067bf <init_percd>
c00178e3:	83 c4 10             	add    esp,0x10
c00178e6:	ba 0b 00 00 00       	mov    edx,0xb
c00178eb:	40                   	inc    eax
c00178ec:	0f 84 81 00 00 00    	je     c0017973 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c00178f2:	80 3d e0 3c 02 c0 00 	cmp    BYTE PTR ds:0xc0023ce0,0x0
c00178f9:	74 10                	je     c001790b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x79>
c00178fb:	83 ec 0c             	sub    esp,0xc
c00178fe:	68 d8 ec 01 c0       	push   0xc001ecd8
c0017903:	e8 fb 87 ff ff       	call   c0010103 <KePanic(char const*)>
c0017908:	83 c4 10             	add    esp,0x10
c001790b:	8a 03                	mov    al,BYTE PTR [ebx]
c001790d:	a2 e0 3c 02 c0       	mov    ds:0xc0023ce0,al
c0017912:	83 c3 03             	add    ebx,0x3
c0017915:	55                   	push   ebp
c0017916:	55                   	push   ebp
c0017917:	6a 00                	push   0x0
c0017919:	53                   	push   ebx
c001791a:	e8 de e9 fe ff       	call   c00062fd <iso_open>
c001791f:	83 c4 10             	add    esp,0x10
c0017922:	89 c5                	mov    ebp,eax
c0017924:	83 f8 ff             	cmp    eax,0xffffffff
c0017927:	75 0f                	jne    c0017938 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa6>
c0017929:	56                   	push   esi
c001792a:	56                   	push   esi
c001792b:	6a 01                	push   0x1
c001792d:	53                   	push   ebx
c001792e:	e8 ca e9 fe ff       	call   c00062fd <iso_open>
c0017933:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017936:	eb 2f                	jmp    c0017967 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd5>
c0017938:	83 ec 0c             	sub    esp,0xc
c001793b:	50                   	push   eax
c001793c:	e8 2f ec fe ff       	call   c0006570 <iso_total>
c0017941:	5a                   	pop    edx
c0017942:	59                   	pop    ecx
c0017943:	50                   	push   eax
c0017944:	68 e8 ec 01 c0       	push   0xc001ece8
c0017949:	e8 52 2b ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c001794e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017951:	e8 1a ec fe ff       	call   c0006570 <iso_total>
c0017956:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001795d:	89 06                	mov    DWORD PTR [esi],eax
c001795f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017962:	e8 20 ea fe ff       	call   c0006387 <iso_close>
c0017967:	83 c4 10             	add    esp,0x10
c001796a:	31 d2                	xor    edx,edx
c001796c:	eb 05                	jmp    c0017973 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c001796e:	ba 04 00 00 00       	mov    edx,0x4
c0017973:	83 c4 0c             	add    esp,0xc
c0017976:	89 d0                	mov    eax,edx
c0017978:	5b                   	pop    ebx
c0017979:	5e                   	pop    esi
c001797a:	5f                   	pop    edi
c001797b:	5d                   	pop    ebp
c001797c:	c3                   	ret    
c001797d:	90                   	nop

c001797e <ISO9660::close(void*)>:
c001797e:	83 ec 0c             	sub    esp,0xc
c0017981:	b8 04 00 00 00       	mov    eax,0x4
c0017986:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001798a:	85 d2                	test   edx,edx
c001798c:	74 11                	je     c001799f <ISO9660::close(void*)+0x21>
c001798e:	83 ec 0c             	sub    esp,0xc
c0017991:	83 ea 64             	sub    edx,0x64
c0017994:	52                   	push   edx
c0017995:	e8 ed e9 fe ff       	call   c0006387 <iso_close>
c001799a:	83 c4 10             	add    esp,0x10
c001799d:	31 c0                	xor    eax,eax
c001799f:	83 c4 0c             	add    esp,0xc
c00179a2:	c3                   	ret    
c00179a3:	90                   	nop

c00179a4 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00179a4:	55                   	push   ebp
c00179a5:	57                   	push   edi
c00179a6:	56                   	push   esi
c00179a7:	53                   	push   ebx
c00179a8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00179ae:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c00179b5:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00179bc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00179c3:	85 c0                	test   eax,eax
c00179c5:	0f 84 96 00 00 00    	je     c0017a61 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c00179cb:	85 db                	test   ebx,ebx
c00179cd:	0f 84 8e 00 00 00    	je     c0017a61 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c00179d3:	83 ec 0c             	sub    esp,0xc
c00179d6:	83 e8 64             	sub    eax,0x64
c00179d9:	50                   	push   eax
c00179da:	e8 e2 eb fe ff       	call   c00065c1 <iso_readdir>
c00179df:	83 c4 10             	add    esp,0x10
c00179e2:	89 c6                	mov    esi,eax
c00179e4:	85 c0                	test   eax,eax
c00179e6:	75 18                	jne    c0017a00 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c00179e8:	52                   	push   edx
c00179e9:	68 10 01 00 00       	push   0x110
c00179ee:	6a 00                	push   0x0
c00179f0:	57                   	push   edi
c00179f1:	e8 da 8a fe ff       	call   c00004d0 <memset>
c00179f6:	83 c4 10             	add    esp,0x10
c00179f9:	b8 01 00 00 00       	mov    eax,0x1
c00179fe:	eb 66                	jmp    c0017a66 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017a00:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017a06:	8d 68 08             	lea    ebp,[eax+0x8]
c0017a09:	83 ec 0c             	sub    esp,0xc
c0017a0c:	55                   	push   ebp
c0017a0d:	e8 2e 8b fe ff       	call   c0000540 <strlen>
c0017a12:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017a1a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a1e:	83 c4 10             	add    esp,0x10
c0017a21:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017a25:	75 0a                	jne    c0017a31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017a27:	b8 02 00 00 00       	mov    eax,0x2
c0017a2c:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017a2f:	74 05                	je     c0017a36 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017a31:	b8 01 00 00 00       	mov    eax,0x1
c0017a36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a3a:	50                   	push   eax
c0017a3b:	50                   	push   eax
c0017a3c:	55                   	push   ebp
c0017a3d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017a41:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017a45:	50                   	push   eax
c0017a46:	e8 b5 8b fe ff       	call   c0000600 <strcpy>
c0017a4b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017a52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017a54:	31 c0                	xor    eax,eax
c0017a56:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017a5c:	83 c4 10             	add    esp,0x10
c0017a5f:	eb 05                	jmp    c0017a66 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017a61:	b8 04 00 00 00       	mov    eax,0x4
c0017a66:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017a6c:	5b                   	pop    ebx
c0017a6d:	5e                   	pop    esi
c0017a6e:	5f                   	pop    edi
c0017a6f:	5d                   	pop    ebp
c0017a70:	c3                   	ret    

c0017a71 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017a71:	57                   	push   edi
c0017a72:	56                   	push   esi
c0017a73:	53                   	push   ebx
c0017a74:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017a78:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017a7c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017a80:	39 35 e4 3c 02 c0    	cmp    DWORD PTR ds:0xc0023ce4,esi
c0017a86:	75 08                	jne    c0017a90 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017a88:	38 1d 54 f6 01 c0    	cmp    BYTE PTR ds:0xc001f654,bl
c0017a8e:	74 59                	je     c0017ae9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017a90:	83 ec 0c             	sub    esp,0xc
c0017a93:	31 d2                	xor    edx,edx
c0017a95:	68 00 3d 02 c0       	push   0xc0023d00
c0017a9a:	0f be c3             	movsx  eax,bl
c0017a9d:	6a 01                	push   0x1
c0017a9f:	52                   	push   edx
c0017aa0:	56                   	push   esi
c0017aa1:	ff 34 85 dc 2a 02 c0 	push   DWORD PTR [eax*4-0x3ffdd524]
c0017aa8:	e8 db 50 ff ff       	call   c000cb88 <LogicalDisk::read(unsigned long long, int, void*)>
c0017aad:	83 c4 20             	add    esp,0x20
c0017ab0:	85 c0                	test   eax,eax
c0017ab2:	75 0e                	jne    c0017ac2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017ab4:	89 35 e4 3c 02 c0    	mov    DWORD PTR ds:0xc0023ce4,esi
c0017aba:	88 1d 54 f6 01 c0    	mov    BYTE PTR ds:0xc001f654,bl
c0017ac0:	eb 27                	jmp    c0017ae9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017ac2:	83 ec 0c             	sub    esp,0xc
c0017ac5:	68 fa ec 01 c0       	push   0xc001ecfa
c0017aca:	e8 d1 29 ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0017acf:	83 c4 0c             	add    esp,0xc
c0017ad2:	68 00 08 00 00       	push   0x800
c0017ad7:	6a 00                	push   0x0
c0017ad9:	57                   	push   edi
c0017ada:	e8 f1 89 fe ff       	call   c00004d0 <memset>
c0017adf:	83 c4 10             	add    esp,0x10
c0017ae2:	b8 01 00 00 00       	mov    eax,0x1
c0017ae7:	eb 0e                	jmp    c0017af7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c0017ae9:	be 00 3d 02 c0       	mov    esi,0xc0023d00
c0017aee:	b9 00 08 00 00       	mov    ecx,0x800
c0017af3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017af5:	31 c0                	xor    eax,eax
c0017af7:	5b                   	pop    ebx
c0017af8:	5e                   	pop    esi
c0017af9:	5f                   	pop    edi
c0017afa:	c3                   	ret    
c0017afb:	90                   	nop

c0017afc <ISO9660::tryMount(LogicalDisk*, int)>:
c0017afc:	53                   	push   ebx
c0017afd:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017b03:	c7 05 e4 3c 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023ce4,0xdeadbeef
c0017b0d:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017b14:	8d 58 41             	lea    ebx,[eax+0x41]
c0017b17:	0f be db             	movsx  ebx,bl
c0017b1a:	53                   	push   ebx
c0017b1b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017b1f:	50                   	push   eax
c0017b20:	6a 10                	push   0x10
c0017b22:	e8 4a ff ff ff       	call   c0017a71 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017b27:	83 c4 10             	add    esp,0x10
c0017b2a:	31 d2                	xor    edx,edx
c0017b2c:	85 c0                	test   eax,eax
c0017b2e:	75 33                	jne    c0017b63 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017b30:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017b35:	75 2c                	jne    c0017b63 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017b37:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017b3c:	75 25                	jne    c0017b63 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017b3e:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017b43:	75 1e                	jne    c0017b63 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017b45:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017b4a:	75 17                	jne    c0017b63 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017b4c:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017b51:	75 10                	jne    c0017b63 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017b53:	83 ec 0c             	sub    esp,0xc
c0017b56:	53                   	push   ebx
c0017b57:	e8 63 ec fe ff       	call   c00067bf <init_percd>
c0017b5c:	83 c4 10             	add    esp,0x10
c0017b5f:	40                   	inc    eax
c0017b60:	0f 95 c2             	setne  dl
c0017b63:	88 d0                	mov    al,dl
c0017b65:	81 c4 08 08 00 00    	add    esp,0x808
c0017b6b:	5b                   	pop    ebx
c0017b6c:	c3                   	ret    
c0017b6d:	90                   	nop

c0017b6e <ISO9660::ISO9660()>:
c0017b6e:	83 ec 0c             	sub    esp,0xc
c0017b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b75:	83 ec 0c             	sub    esp,0xc
c0017b78:	50                   	push   eax
c0017b79:	e8 44 2c ff ff       	call   c000a7c2 <Filesystem::Filesystem()>
c0017b7e:	83 c4 10             	add    esp,0x10
c0017b81:	ba 20 ed 01 c0       	mov    edx,0xc001ed20
c0017b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b8a:	89 10                	mov    DWORD PTR [eax],edx
c0017b8c:	e8 76 ed fe ff       	call   c0006907 <fs_iso9660_init>
c0017b91:	90                   	nop
c0017b92:	83 c4 0c             	add    esp,0xc
c0017b95:	c3                   	ret    

c0017b96 <SoundCard::beginPlayback()>:
c0017b96:	c7 44 24 04 80 ed 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ed80
c0017b9e:	e9 60 85 ff ff       	jmp    c0010103 <KePanic(char const*)>
c0017ba3:	90                   	nop

c0017ba4 <SoundCard::stopPlayback()>:
c0017ba4:	c7 44 24 04 80 ed 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ed80
c0017bac:	e9 52 85 ff ff       	jmp    c0010103 <KePanic(char const*)>
c0017bb1:	90                   	nop

c0017bb2 <SoundCard::SoundCard(char const*)>:
c0017bb2:	83 ec 1c             	sub    esp,0x1c
c0017bb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bb9:	83 ec 08             	sub    esp,0x8
c0017bbc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bc0:	50                   	push   eax
c0017bc1:	e8 b2 3e ff ff       	call   c000ba78 <Device::Device(char const*)>
c0017bc6:	83 c4 10             	add    esp,0x10
c0017bc9:	ba cc ed 01 c0       	mov    edx,0xc001edcc
c0017bce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bd2:	89 10                	mov    DWORD PTR [eax],edx
c0017bd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bd8:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017bdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017be3:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017bed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bf1:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017bfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bff:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017c09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c0d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017c17:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017c1f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017c24:	7f 19                	jg     c0017c3f <SoundCard::SoundCard(char const*)+0x8d>
c0017c26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c2e:	83 c2 54             	add    edx,0x54
c0017c31:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017c39:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017c3d:	eb e0                	jmp    c0017c1f <SoundCard::SoundCard(char const*)+0x6d>
c0017c3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c43:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017c4a:	90                   	nop
c0017c4b:	83 c4 1c             	add    esp,0x1c
c0017c4e:	c3                   	ret    
c0017c4f:	90                   	nop

c0017c50 <SoundCard::~SoundCard()>:
c0017c50:	83 ec 0c             	sub    esp,0xc
c0017c53:	ba cc ed 01 c0       	mov    edx,0xc001edcc
c0017c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c5c:	89 10                	mov    DWORD PTR [eax],edx
c0017c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c62:	83 ec 0c             	sub    esp,0xc
c0017c65:	50                   	push   eax
c0017c66:	e8 77 3b ff ff       	call   c000b7e2 <Device::~Device()>
c0017c6b:	83 c4 10             	add    esp,0x10
c0017c6e:	90                   	nop
c0017c6f:	83 c4 0c             	add    esp,0xc
c0017c72:	c3                   	ret    
c0017c73:	90                   	nop

c0017c74 <SoundCard::~SoundCard()>:
c0017c74:	83 ec 0c             	sub    esp,0xc
c0017c77:	83 ec 0c             	sub    esp,0xc
c0017c7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c7e:	e8 cd ff ff ff       	call   c0017c50 <SoundCard::~SoundCard()>
c0017c83:	83 c4 10             	add    esp,0x10
c0017c86:	83 ec 08             	sub    esp,0x8
c0017c89:	68 e8 01 00 00       	push   0x1e8
c0017c8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c92:	e8 13 27 ff ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c0017c97:	83 c4 10             	add    esp,0x10
c0017c9a:	83 c4 0c             	add    esp,0xc
c0017c9d:	c3                   	ret    

c0017c9e <SoundCard::configureRates(int, int, int)>:
c0017c9e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017ca2:	31 c0                	xor    eax,eax
c0017ca4:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017cab:	75 20                	jne    c0017ccd <SoundCard::configureRates(int, int, int)+0x2f>
c0017cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cb1:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017cb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cbb:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cc5:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017ccb:	b0 01                	mov    al,0x1
c0017ccd:	c3                   	ret    

c0017cce <SoundCard::getSamples16(int, short*)>:
c0017cce:	55                   	push   ebp
c0017ccf:	57                   	push   edi
c0017cd0:	31 ff                	xor    edi,edi
c0017cd2:	56                   	push   esi
c0017cd3:	53                   	push   ebx
c0017cd4:	31 db                	xor    ebx,ebx
c0017cd6:	83 ec 10             	sub    esp,0x10
c0017cd9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017cdd:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017ce1:	8d 04 36             	lea    eax,[esi+esi*1]
c0017ce4:	50                   	push   eax
c0017ce5:	6a 00                	push   0x0
c0017ce7:	55                   	push   ebp
c0017ce8:	e8 e3 87 fe ff       	call   c00004d0 <memset>
c0017ced:	83 c4 10             	add    esp,0x10
c0017cf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cf4:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017cfb:	85 c0                	test   eax,eax
c0017cfd:	74 1b                	je     c0017d1a <SoundCard::getSamples16(int, short*)+0x4c>
c0017cff:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017d03:	75 15                	jne    c0017d1a <SoundCard::getSamples16(int, short*)+0x4c>
c0017d05:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017d09:	55                   	push   ebp
c0017d0a:	56                   	push   esi
c0017d0b:	50                   	push   eax
c0017d0c:	e8 ef 02 00 00       	call   c0018000 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017d11:	83 c4 10             	add    esp,0x10
c0017d14:	39 c7                	cmp    edi,eax
c0017d16:	7d 02                	jge    c0017d1a <SoundCard::getSamples16(int, short*)+0x4c>
c0017d18:	89 c7                	mov    edi,eax
c0017d1a:	43                   	inc    ebx
c0017d1b:	83 fb 20             	cmp    ebx,0x20
c0017d1e:	75 d0                	jne    c0017cf0 <SoundCard::getSamples16(int, short*)+0x22>
c0017d20:	83 c4 0c             	add    esp,0xc
c0017d23:	89 f8                	mov    eax,edi
c0017d25:	5b                   	pop    ebx
c0017d26:	5e                   	pop    esi
c0017d27:	5f                   	pop    edi
c0017d28:	5d                   	pop    ebp
c0017d29:	c3                   	ret    

c0017d2a <SoundCard::getSamples32(int, int*)>:
c0017d2a:	55                   	push   ebp
c0017d2b:	57                   	push   edi
c0017d2c:	31 ff                	xor    edi,edi
c0017d2e:	56                   	push   esi
c0017d2f:	31 f6                	xor    esi,esi
c0017d31:	53                   	push   ebx
c0017d32:	83 ec 10             	sub    esp,0x10
c0017d35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d39:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017d3d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017d41:	c1 e0 02             	shl    eax,0x2
c0017d44:	50                   	push   eax
c0017d45:	6a 00                	push   0x0
c0017d47:	55                   	push   ebp
c0017d48:	e8 83 87 fe ff       	call   c00004d0 <memset>
c0017d4d:	83 c4 10             	add    esp,0x10
c0017d50:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017d57:	85 c0                	test   eax,eax
c0017d59:	74 1b                	je     c0017d76 <SoundCard::getSamples32(int, int*)+0x4c>
c0017d5b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017d5f:	75 15                	jne    c0017d76 <SoundCard::getSamples32(int, int*)+0x4c>
c0017d61:	53                   	push   ebx
c0017d62:	55                   	push   ebp
c0017d63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d67:	50                   	push   eax
c0017d68:	e8 57 03 00 00       	call   c00180c4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0017d6d:	83 c4 10             	add    esp,0x10
c0017d70:	39 c6                	cmp    esi,eax
c0017d72:	7d 02                	jge    c0017d76 <SoundCard::getSamples32(int, int*)+0x4c>
c0017d74:	89 c6                	mov    esi,eax
c0017d76:	47                   	inc    edi
c0017d77:	83 ff 20             	cmp    edi,0x20
c0017d7a:	75 d4                	jne    c0017d50 <SoundCard::getSamples32(int, int*)+0x26>
c0017d7c:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0017d82:	85 f6                	test   esi,esi
c0017d84:	75 0f                	jne    c0017d95 <SoundCard::getSamples32(int, int*)+0x6b>
c0017d86:	84 c0                	test   al,al
c0017d88:	74 1b                	je     c0017da5 <SoundCard::getSamples32(int, int*)+0x7b>
c0017d8a:	83 ec 0c             	sub    esp,0xc
c0017d8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d8f:	53                   	push   ebx
c0017d90:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0017d93:	eb 0d                	jmp    c0017da2 <SoundCard::getSamples32(int, int*)+0x78>
c0017d95:	84 c0                	test   al,al
c0017d97:	75 0c                	jne    c0017da5 <SoundCard::getSamples32(int, int*)+0x7b>
c0017d99:	83 ec 0c             	sub    esp,0xc
c0017d9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d9e:	53                   	push   ebx
c0017d9f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017da2:	83 c4 10             	add    esp,0x10
c0017da5:	83 c4 0c             	add    esp,0xc
c0017da8:	89 f0                	mov    eax,esi
c0017daa:	5b                   	pop    ebx
c0017dab:	5e                   	pop    esi
c0017dac:	5f                   	pop    edi
c0017dad:	5d                   	pop    ebp
c0017dae:	c3                   	ret    
c0017daf:	90                   	nop

c0017db0 <SoundCard::addChannel(SoundPort*)>:
c0017db0:	83 ec 0c             	sub    esp,0xc
c0017db3:	31 c0                	xor    eax,eax
c0017db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017db9:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0017dc1:	74 1b                	je     c0017dde <SoundCard::addChannel(SoundPort*)+0x2e>
c0017dc3:	40                   	inc    eax
c0017dc4:	83 f8 20             	cmp    eax,0x20
c0017dc7:	75 f0                	jne    c0017db9 <SoundCard::addChannel(SoundPort*)+0x9>
c0017dc9:	83 ec 0c             	sub    esp,0xc
c0017dcc:	68 a5 ed 01 c0       	push   0xc001eda5
c0017dd1:	e8 2d 83 ff ff       	call   c0010103 <KePanic(char const*)>
c0017dd6:	83 c4 10             	add    esp,0x10
c0017dd9:	83 c8 ff             	or     eax,0xffffffff
c0017ddc:	eb 0b                	jmp    c0017de9 <SoundCard::addChannel(SoundPort*)+0x39>
c0017dde:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017de2:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0017de9:	83 c4 0c             	add    esp,0xc
c0017dec:	c3                   	ret    
c0017ded:	90                   	nop

c0017dee <SoundCard::removeChannel(int)>:
c0017dee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017df2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017df6:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0017e01:	c3                   	ret    
c0017e02:	66 90                	xchg   ax,ax

c0017e04 <SoundPort::SoundPort(int, int, int, int)>:
c0017e04:	83 ec 0c             	sub    esp,0xc
c0017e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e0b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e16:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e22:	89 10                	mov    DWORD PTR [eax],edx
c0017e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e2c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e33:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e37:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017e3a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0017e3f:	75 13                	jne    c0017e54 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0017e41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e45:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e47:	05 a0 0f 00 00       	add    eax,0xfa0
c0017e4c:	01 c0                	add    eax,eax
c0017e4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017e52:	66 90                	xchg   ax,ax
c0017e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e58:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e5c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0017e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e63:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0017e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e6e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017e71:	c1 e0 02             	shl    eax,0x2
c0017e74:	83 ec 0c             	sub    esp,0xc
c0017e77:	50                   	push   eax
c0017e78:	e8 88 f9 fe ff       	call   c0007805 <malloc>
c0017e7d:	83 c4 10             	add    esp,0x10
c0017e80:	89 c2                	mov    edx,eax
c0017e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e86:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017e89:	90                   	nop
c0017e8a:	83 c4 0c             	add    esp,0xc
c0017e8d:	c3                   	ret    
c0017e8e:	66 90                	xchg   ax,ax

c0017e90 <SoundPort::~SoundPort()>:
c0017e90:	83 ec 0c             	sub    esp,0xc
c0017e93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e97:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017e9a:	85 c0                	test   eax,eax
c0017e9c:	74 1e                	je     c0017ebc <SoundPort::~SoundPort()+0x2c>
c0017e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ea2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017ea5:	83 ec 0c             	sub    esp,0xc
c0017ea8:	50                   	push   eax
c0017ea9:	e8 67 f9 fe ff       	call   c0007815 <free>
c0017eae:	83 c4 10             	add    esp,0x10
c0017eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017eb5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017ebc:	90                   	nop
c0017ebd:	83 c4 0c             	add    esp,0xc
c0017ec0:	c3                   	ret    
c0017ec1:	90                   	nop
c0017ec2:	66 90                	xchg   ax,ax

c0017ec4 <SoundPort::unpause()>:
c0017ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ec8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0017ecc:	c3                   	ret    
c0017ecd:	90                   	nop
c0017ece:	66 90                	xchg   ax,ax

c0017ed0 <SoundPort::pause()>:
c0017ed0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ed4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017ed8:	c3                   	ret    
c0017ed9:	90                   	nop
c0017eda:	66 90                	xchg   ax,ax

c0017edc <SoundPort::getBufferUsed()>:
c0017edc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ee0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017ee3:	c3                   	ret    

c0017ee4 <SoundPort::getBufferSize()>:
c0017ee4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ee8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017eeb:	c3                   	ret    

c0017eec <SoundPort::buffer16(short*, int)>:
c0017eec:	55                   	push   ebp
c0017eed:	57                   	push   edi
c0017eee:	56                   	push   esi
c0017eef:	53                   	push   ebx
c0017ef0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017ef4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0017ef8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017efb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0017efe:	74 68                	je     c0017f68 <SoundPort::buffer16(short*, int)+0x7c>
c0017f00:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017f04:	85 c9                	test   ecx,ecx
c0017f06:	7e 60                	jle    c0017f68 <SoundPort::buffer16(short*, int)+0x7c>
c0017f08:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0017f0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017f0f:	c1 e1 0f             	shl    ecx,0xf
c0017f12:	8d 70 01             	lea    esi,[eax+0x1]
c0017f15:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017f18:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0017f1b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017f1e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017f21:	74 4d                	je     c0017f70 <SoundPort::buffer16(short*, int)+0x84>
c0017f23:	31 f6                	xor    esi,esi
c0017f25:	eb 21                	jmp    c0017f48 <SoundPort::buffer16(short*, int)+0x5c>
c0017f27:	90                   	nop
c0017f28:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0017f2d:	8d 79 01             	lea    edi,[ecx+0x1]
c0017f30:	c1 e3 0f             	shl    ebx,0xf
c0017f33:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0017f36:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0017f39:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0017f3c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017f3f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017f42:	74 1c                	je     c0017f60 <SoundPort::buffer16(short*, int)+0x74>
c0017f44:	89 c6                	mov    esi,eax
c0017f46:	66 90                	xchg   ax,ax
c0017f48:	8d 46 01             	lea    eax,[esi+0x1]
c0017f4b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0017f4f:	75 d7                	jne    c0017f28 <SoundPort::buffer16(short*, int)+0x3c>
c0017f51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f55:	8d 76 00             	lea    esi,[esi+0x0]
c0017f58:	5b                   	pop    ebx
c0017f59:	5e                   	pop    esi
c0017f5a:	5f                   	pop    edi
c0017f5b:	5d                   	pop    ebp
c0017f5c:	c3                   	ret    
c0017f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0017f60:	5b                   	pop    ebx
c0017f61:	8d 46 02             	lea    eax,[esi+0x2]
c0017f64:	5e                   	pop    esi
c0017f65:	5f                   	pop    edi
c0017f66:	5d                   	pop    ebp
c0017f67:	c3                   	ret    
c0017f68:	5b                   	pop    ebx
c0017f69:	31 c0                	xor    eax,eax
c0017f6b:	5e                   	pop    esi
c0017f6c:	5f                   	pop    edi
c0017f6d:	5d                   	pop    ebp
c0017f6e:	c3                   	ret    
c0017f6f:	90                   	nop
c0017f70:	b8 01 00 00 00       	mov    eax,0x1
c0017f75:	eb e1                	jmp    c0017f58 <SoundPort::buffer16(short*, int)+0x6c>
c0017f77:	90                   	nop

c0017f78 <SoundPort::buffer32(int*, int)>:
c0017f78:	55                   	push   ebp
c0017f79:	57                   	push   edi
c0017f7a:	56                   	push   esi
c0017f7b:	53                   	push   ebx
c0017f7c:	51                   	push   ecx
c0017f7d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f85:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017f88:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f8f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017f92:	74 5c                	je     c0017ff0 <SoundPort::buffer32(int*, int)+0x78>
c0017f94:	85 c0                	test   eax,eax
c0017f96:	7e 58                	jle    c0017ff0 <SoundPort::buffer32(int*, int)+0x78>
c0017f98:	8d 71 01             	lea    esi,[ecx+0x1]
c0017f9b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017f9e:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017fa1:	8b 37                	mov    esi,DWORD PTR [edi]
c0017fa3:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0017fa6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017fa9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017fac:	74 4a                	je     c0017ff8 <SoundPort::buffer32(int*, int)+0x80>
c0017fae:	31 f6                	xor    esi,esi
c0017fb0:	eb 1e                	jmp    c0017fd0 <SoundPort::buffer32(int*, int)+0x58>
c0017fb2:	66 90                	xchg   ax,ax
c0017fb4:	8d 69 01             	lea    ebp,[ecx+0x1]
c0017fb7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0017fba:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0017fbd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017fc0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0017fc4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017fc7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017fca:	74 18                	je     c0017fe4 <SoundPort::buffer32(int*, int)+0x6c>
c0017fcc:	89 de                	mov    esi,ebx
c0017fce:	66 90                	xchg   ax,ax
c0017fd0:	8d 5e 01             	lea    ebx,[esi+0x1]
c0017fd3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0017fd6:	75 dc                	jne    c0017fb4 <SoundPort::buffer32(int*, int)+0x3c>
c0017fd8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017fdb:	90                   	nop
c0017fdc:	5a                   	pop    edx
c0017fdd:	5b                   	pop    ebx
c0017fde:	5e                   	pop    esi
c0017fdf:	5f                   	pop    edi
c0017fe0:	5d                   	pop    ebp
c0017fe1:	c3                   	ret    
c0017fe2:	66 90                	xchg   ax,ax
c0017fe4:	5a                   	pop    edx
c0017fe5:	8d 46 02             	lea    eax,[esi+0x2]
c0017fe8:	5b                   	pop    ebx
c0017fe9:	5e                   	pop    esi
c0017fea:	5f                   	pop    edi
c0017feb:	5d                   	pop    ebp
c0017fec:	c3                   	ret    
c0017fed:	8d 76 00             	lea    esi,[esi+0x0]
c0017ff0:	5a                   	pop    edx
c0017ff1:	31 c0                	xor    eax,eax
c0017ff3:	5b                   	pop    ebx
c0017ff4:	5e                   	pop    esi
c0017ff5:	5f                   	pop    edi
c0017ff6:	5d                   	pop    ebp
c0017ff7:	c3                   	ret    
c0017ff8:	b8 01 00 00 00       	mov    eax,0x1
c0017ffd:	eb dd                	jmp    c0017fdc <SoundPort::buffer32(int*, int)+0x64>
c0017fff:	90                   	nop

c0018000 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018000:	57                   	push   edi
c0018001:	56                   	push   esi
c0018002:	53                   	push   ebx
c0018003:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018007:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001800b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018011:	39 03                	cmp    DWORD PTR [ebx],eax
c0018013:	74 13                	je     c0018028 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018015:	83 ec 0c             	sub    esp,0xc
c0018018:	68 f8 ed 01 c0       	push   0xc001edf8
c001801d:	e8 e1 80 ff ff       	call   c0010103 <KePanic(char const*)>
c0018022:	83 c4 10             	add    esp,0x10
c0018025:	8d 76 00             	lea    esi,[esi+0x0]
c0018028:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001802e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0018031:	74 11                	je     c0018044 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0018033:	83 ec 0c             	sub    esp,0xc
c0018036:	68 37 ee 01 c0       	push   0xc001ee37
c001803b:	e8 c3 80 ff ff       	call   c0010103 <KePanic(char const*)>
c0018040:	83 c4 10             	add    esp,0x10
c0018043:	90                   	nop
c0018044:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001804a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001804d:	74 11                	je     c0018060 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001804f:	83 ec 0c             	sub    esp,0xc
c0018052:	68 37 ee 01 c0       	push   0xc001ee37
c0018057:	e8 a7 80 ff ff       	call   c0010103 <KePanic(char const*)>
c001805c:	83 c4 10             	add    esp,0x10
c001805f:	90                   	nop
c0018060:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018063:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0018067:	7e 07                	jle    c0018070 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018069:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001806d:	8d 76 00             	lea    esi,[esi+0x0]
c0018070:	85 f6                	test   esi,esi
c0018072:	7e 2c                	jle    c00180a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018074:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018078:	8d 3c 36             	lea    edi,[esi+esi*1]
c001807b:	31 c9                	xor    ecx,ecx
c001807d:	01 d7                	add    edi,edx
c001807f:	90                   	nop
c0018080:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0018083:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018086:	85 c0                	test   eax,eax
c0018088:	79 06                	jns    c0018090 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001808a:	05 ff 7f 00 00       	add    eax,0x7fff
c001808f:	90                   	nop
c0018090:	c1 f8 0f             	sar    eax,0xf
c0018093:	83 c1 04             	add    ecx,0x4
c0018096:	66 01 02             	add    WORD PTR [edx],ax
c0018099:	83 c2 02             	add    edx,0x2
c001809c:	39 d7                	cmp    edi,edx
c001809e:	75 e0                	jne    c0018080 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c00180a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00180a3:	50                   	push   eax
c00180a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00180a7:	29 f0                	sub    eax,esi
c00180a9:	c1 e0 02             	shl    eax,0x2
c00180ac:	50                   	push   eax
c00180ad:	8d 04 b2             	lea    eax,[edx+esi*4]
c00180b0:	50                   	push   eax
c00180b1:	52                   	push   edx
c00180b2:	e8 29 83 fe ff       	call   c00003e0 <memmove>
c00180b7:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00180ba:	83 c4 10             	add    esp,0x10
c00180bd:	89 f0                	mov    eax,esi
c00180bf:	5b                   	pop    ebx
c00180c0:	5e                   	pop    esi
c00180c1:	5f                   	pop    edi
c00180c2:	c3                   	ret    
c00180c3:	90                   	nop

c00180c4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00180c4:	57                   	push   edi
c00180c5:	56                   	push   esi
c00180c6:	53                   	push   ebx
c00180c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00180cb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00180cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00180d3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00180d9:	39 06                	cmp    DWORD PTR [esi],eax
c00180db:	74 13                	je     c00180f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00180dd:	83 ec 0c             	sub    esp,0xc
c00180e0:	68 18 ee 01 c0       	push   0xc001ee18
c00180e5:	e8 19 80 ff ff       	call   c0010103 <KePanic(char const*)>
c00180ea:	83 c4 10             	add    esp,0x10
c00180ed:	8d 76 00             	lea    esi,[esi+0x0]
c00180f0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00180f6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00180f9:	74 11                	je     c001810c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00180fb:	83 ec 0c             	sub    esp,0xc
c00180fe:	68 53 ee 01 c0       	push   0xc001ee53
c0018103:	e8 fb 7f ff ff       	call   c0010103 <KePanic(char const*)>
c0018108:	83 c4 10             	add    esp,0x10
c001810b:	90                   	nop
c001810c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0018112:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018115:	74 11                	je     c0018128 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0018117:	83 ec 0c             	sub    esp,0xc
c001811a:	68 53 ee 01 c0       	push   0xc001ee53
c001811f:	e8 df 7f ff ff       	call   c0010103 <KePanic(char const*)>
c0018124:	83 c4 10             	add    esp,0x10
c0018127:	90                   	nop
c0018128:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001812b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001812f:	7e 07                	jle    c0018138 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0018131:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018135:	8d 76 00             	lea    esi,[esi+0x0]
c0018138:	85 ff                	test   edi,edi
c001813a:	7e 1c                	jle    c0018158 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001813c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0018143:	31 c0                	xor    eax,eax
c0018145:	8d 76 00             	lea    esi,[esi+0x0]
c0018148:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001814b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001814e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018151:	83 c0 04             	add    eax,0x4
c0018154:	39 c1                	cmp    ecx,eax
c0018156:	75 f0                	jne    c0018148 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018158:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001815b:	50                   	push   eax
c001815c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001815f:	29 f8                	sub    eax,edi
c0018161:	c1 e0 02             	shl    eax,0x2
c0018164:	50                   	push   eax
c0018165:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018168:	50                   	push   eax
c0018169:	52                   	push   edx
c001816a:	e8 71 82 fe ff       	call   c00003e0 <memmove>
c001816f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0018172:	83 c4 10             	add    esp,0x10
c0018175:	89 f8                	mov    eax,edi
c0018177:	5b                   	pop    ebx
c0018178:	5e                   	pop    esi
c0018179:	5f                   	pop    edi
c001817a:	c3                   	ret    
c001817b:	90                   	nop

c001817c <PCI::open(int, int, void*)>:
c001817c:	83 ec 18             	sub    esp,0x18
c001817f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018183:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018187:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001818d:	8b 10                	mov    edx,DWORD PTR [eax]
c001818f:	50                   	push   eax
c0018190:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0018193:	31 c0                	xor    eax,eax
c0018195:	83 c4 1c             	add    esp,0x1c
c0018198:	c3                   	ret    
c0018199:	90                   	nop

c001819a <PCI::close(int, int, void*)>:
c001819a:	31 c0                	xor    eax,eax
c001819c:	c3                   	ret    
c001819d:	90                   	nop

c001819e <PCI::PCI()>:
c001819e:	83 ec 0c             	sub    esp,0xc
c00181a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a5:	83 ec 08             	sub    esp,0x8
c00181a8:	68 6f ee 01 c0       	push   0xc001ee6f
c00181ad:	50                   	push   eax
c00181ae:	e8 81 30 ff ff       	call   c000b234 <Bus::Bus(char const*)>
c00181b3:	83 c4 10             	add    esp,0x10
c00181b6:	ba 18 ef 01 c0       	mov    edx,0xc001ef18
c00181bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181bf:	89 10                	mov    DWORD PTR [eax],edx
c00181c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00181cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d3:	a3 00 45 02 c0       	mov    ds:0xc0024500,eax
c00181d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181dc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00181e2:	31 d2                	xor    edx,edx
c00181e4:	88 c2                	mov    dl,al
c00181e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ea:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00181f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00181fb:	31 d2                	xor    edx,edx
c00181fd:	88 c2                	mov    dl,al
c00181ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018203:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018212:	8d 50 01             	lea    edx,[eax+0x1]
c0018215:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018219:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001821f:	31 d2                	xor    edx,edx
c0018221:	88 c2                	mov    dl,al
c0018223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018227:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001822b:	83 c9 c0             	or     ecx,0xffffffc0
c001822e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018232:	90                   	nop
c0018233:	83 c4 0c             	add    esp,0xc
c0018236:	c3                   	ret    
c0018237:	90                   	nop

c0018238 <PCI::readBAR8(unsigned int, int)>:
c0018238:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001823c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018240:	f6 c2 01             	test   dl,0x1
c0018243:	74 07                	je     c001824c <PCI::readBAR8(unsigned int, int)+0x14>
c0018245:	83 e2 fc             	and    edx,0xfffffffc
c0018248:	01 c2                	add    edx,eax
c001824a:	ec                   	in     al,dx
c001824b:	c3                   	ret    
c001824c:	83 e2 f0             	and    edx,0xfffffff0
c001824f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018252:	c3                   	ret    
c0018253:	90                   	nop

c0018254 <PCI::readBAR16(unsigned int, int)>:
c0018254:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018258:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001825c:	f6 c2 01             	test   dl,0x1
c001825f:	74 08                	je     c0018269 <PCI::readBAR16(unsigned int, int)+0x15>
c0018261:	83 e2 fc             	and    edx,0xfffffffc
c0018264:	01 c2                	add    edx,eax
c0018266:	66 ed                	in     ax,dx
c0018268:	c3                   	ret    
c0018269:	83 e2 f0             	and    edx,0xfffffff0
c001826c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018270:	c3                   	ret    
c0018271:	90                   	nop

c0018272 <PCI::readBAR32(unsigned int, int)>:
c0018272:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018276:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001827a:	f6 c2 01             	test   dl,0x1
c001827d:	74 07                	je     c0018286 <PCI::readBAR32(unsigned int, int)+0x14>
c001827f:	83 e2 fc             	and    edx,0xfffffffc
c0018282:	01 c2                	add    edx,eax
c0018284:	ed                   	in     eax,dx
c0018285:	c3                   	ret    
c0018286:	83 e2 f0             	and    edx,0xfffffff0
c0018289:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001828c:	c3                   	ret    
c001828d:	90                   	nop

c001828e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001828e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018292:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018296:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001829a:	f6 c2 01             	test   dl,0x1
c001829d:	74 07                	je     c00182a6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001829f:	83 e2 fc             	and    edx,0xfffffffc
c00182a2:	01 ca                	add    edx,ecx
c00182a4:	ee                   	out    dx,al
c00182a5:	c3                   	ret    
c00182a6:	83 e2 f0             	and    edx,0xfffffff0
c00182a9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00182ac:	c3                   	ret    
c00182ad:	90                   	nop

c00182ae <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00182ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00182b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00182ba:	f6 c2 01             	test   dl,0x1
c00182bd:	74 08                	je     c00182c7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00182bf:	83 e2 fc             	and    edx,0xfffffffc
c00182c2:	01 ca                	add    edx,ecx
c00182c4:	66 ef                	out    dx,ax
c00182c6:	c3                   	ret    
c00182c7:	83 e2 f0             	and    edx,0xfffffff0
c00182ca:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00182ce:	c3                   	ret    
c00182cf:	90                   	nop

c00182d0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00182d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00182d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00182dc:	f6 c2 01             	test   dl,0x1
c00182df:	74 07                	je     c00182e8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00182e1:	83 e2 fc             	and    edx,0xfffffffc
c00182e4:	01 ca                	add    edx,ecx
c00182e6:	ef                   	out    dx,eax
c00182e7:	c3                   	ret    
c00182e8:	83 e2 f0             	and    edx,0xfffffff0
c00182eb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00182ee:	c3                   	ret    
c00182ef:	90                   	nop

c00182f0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00182f0:	55                   	push   ebp
c00182f1:	57                   	push   edi
c00182f2:	56                   	push   esi
c00182f3:	53                   	push   ebx
c00182f4:	83 ec 0c             	sub    esp,0xc
c00182f7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00182fb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00182ff:	89 f0                	mov    eax,esi
c0018301:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018305:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018309:	3c 07                	cmp    al,0x7
c001830b:	76 10                	jbe    c001831d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001830d:	83 ec 0c             	sub    esp,0xc
c0018310:	68 77 ee 01 c0       	push   0xc001ee77
c0018315:	e8 e9 7d ff ff       	call   c0010103 <KePanic(char const*)>
c001831a:	83 c4 10             	add    esp,0x10
c001831d:	80 fb 0f             	cmp    bl,0xf
c0018320:	76 10                	jbe    c0018332 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018322:	83 ec 0c             	sub    esp,0xc
c0018325:	68 a7 ee 01 c0       	push   0xc001eea7
c001832a:	e8 d4 7d ff ff       	call   c0010103 <KePanic(char const*)>
c001832f:	83 c4 10             	add    esp,0x10
c0018332:	8d 04 36             	lea    eax,[esi+esi*1]
c0018335:	ba f8 0c 00 00       	mov    edx,0xcf8
c001833a:	83 c8 f0             	or     eax,0xfffffff0
c001833d:	ee                   	out    dx,al
c001833e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018343:	89 e8                	mov    eax,ebp
c0018345:	ee                   	out    dx,al
c0018346:	83 c4 0c             	add    esp,0xc
c0018349:	89 d8                	mov    eax,ebx
c001834b:	66 81 e7 fc 00       	and    di,0xfc
c0018350:	5b                   	pop    ebx
c0018351:	c1 e0 08             	shl    eax,0x8
c0018354:	5e                   	pop    esi
c0018355:	09 f8                	or     eax,edi
c0018357:	5f                   	pop    edi
c0018358:	66 0d 00 c0          	or     ax,0xc000
c001835c:	5d                   	pop    ebp
c001835d:	c3                   	ret    

c001835e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001835e:	57                   	push   edi
c001835f:	56                   	push   esi
c0018360:	53                   	push   ebx
c0018361:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018365:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018369:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001836f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018373:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018377:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001837b:	83 ff 01             	cmp    edi,0x1
c001837e:	75 3e                	jne    c00183be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018380:	89 de                	mov    esi,ebx
c0018382:	0f b6 c0             	movzx  eax,al
c0018385:	81 e6 fc 00 00 00    	and    esi,0xfc
c001838b:	c1 e0 10             	shl    eax,0x10
c001838e:	0f b6 c9             	movzx  ecx,cl
c0018391:	09 f0                	or     eax,esi
c0018393:	c1 e1 08             	shl    ecx,0x8
c0018396:	0f b6 d2             	movzx  edx,dl
c0018399:	09 c8                	or     eax,ecx
c001839b:	c1 e2 0b             	shl    edx,0xb
c001839e:	09 d0                	or     eax,edx
c00183a0:	ba f8 0c 00 00       	mov    edx,0xcf8
c00183a5:	0d 00 00 00 80       	or     eax,0x80000000
c00183aa:	ef                   	out    dx,eax
c00183ab:	ba fc 0c 00 00       	mov    edx,0xcfc
c00183b0:	ed                   	in     eax,dx
c00183b1:	83 e3 02             	and    ebx,0x2
c00183b4:	0f b6 cb             	movzx  ecx,bl
c00183b7:	c1 e1 03             	shl    ecx,0x3
c00183ba:	d3 e8                	shr    eax,cl
c00183bc:	eb 43                	jmp    c0018401 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00183be:	83 ff 02             	cmp    edi,0x2
c00183c1:	75 2c                	jne    c00183ef <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00183c3:	83 ec 0c             	sub    esp,0xc
c00183c6:	0f b6 c9             	movzx  ecx,cl
c00183c9:	0f b6 d2             	movzx  edx,dl
c00183cc:	0f b6 fb             	movzx  edi,bl
c00183cf:	0f b6 c0             	movzx  eax,al
c00183d2:	57                   	push   edi
c00183d3:	51                   	push   ecx
c00183d4:	52                   	push   edx
c00183d5:	50                   	push   eax
c00183d6:	56                   	push   esi
c00183d7:	e8 14 ff ff ff       	call   c00182f0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00183dc:	89 c2                	mov    edx,eax
c00183de:	ed                   	in     eax,dx
c00183df:	83 e3 02             	and    ebx,0x2
c00183e2:	83 c4 20             	add    esp,0x20
c00183e5:	0f b6 cb             	movzx  ecx,bl
c00183e8:	c1 e1 03             	shl    ecx,0x3
c00183eb:	d3 e8                	shr    eax,cl
c00183ed:	eb 12                	jmp    c0018401 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00183ef:	83 ec 0c             	sub    esp,0xc
c00183f2:	68 d7 ee 01 c0       	push   0xc001eed7
c00183f7:	e8 07 7d ff ff       	call   c0010103 <KePanic(char const*)>
c00183fc:	83 c4 10             	add    esp,0x10
c00183ff:	31 c0                	xor    eax,eax
c0018401:	5b                   	pop    ebx
c0018402:	5e                   	pop    esi
c0018403:	5f                   	pop    edi
c0018404:	c3                   	ret    
c0018405:	90                   	nop

c0018406 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018406:	83 ec 18             	sub    esp,0x18
c0018409:	6a 00                	push   0x0
c001840b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018410:	50                   	push   eax
c0018411:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018416:	50                   	push   eax
c0018417:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001841c:	50                   	push   eax
c001841d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018421:	e8 38 ff ff ff       	call   c001835e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018426:	83 c4 2c             	add    esp,0x2c
c0018429:	c3                   	ret    

c001842a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001842a:	83 ec 18             	sub    esp,0x18
c001842d:	6a 0e                	push   0xe
c001842f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018434:	50                   	push   eax
c0018435:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001843a:	50                   	push   eax
c001843b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018440:	50                   	push   eax
c0018441:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018445:	e8 14 ff ff ff       	call   c001835e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001844a:	83 c4 2c             	add    esp,0x2c
c001844d:	0f b6 c0             	movzx  eax,al
c0018450:	c3                   	ret    
c0018451:	90                   	nop

c0018452 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018452:	55                   	push   ebp
c0018453:	57                   	push   edi
c0018454:	56                   	push   esi
c0018455:	53                   	push   ebx
c0018456:	83 ec 18             	sub    esp,0x18
c0018459:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001845e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018463:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018468:	6a 0a                	push   0xa
c001846a:	56                   	push   esi
c001846b:	55                   	push   ebp
c001846c:	57                   	push   edi
c001846d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018471:	e8 e8 fe ff ff       	call   c001835e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018476:	83 c4 14             	add    esp,0x14
c0018479:	89 c3                	mov    ebx,eax
c001847b:	6a 0a                	push   0xa
c001847d:	0f b6 db             	movzx  ebx,bl
c0018480:	56                   	push   esi
c0018481:	55                   	push   ebp
c0018482:	57                   	push   edi
c0018483:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018487:	e8 d2 fe ff ff       	call   c001835e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001848c:	83 c4 2c             	add    esp,0x2c
c001848f:	25 00 ff 00 00       	and    eax,0xff00
c0018494:	09 d8                	or     eax,ebx
c0018496:	5b                   	pop    ebx
c0018497:	5e                   	pop    esi
c0018498:	5f                   	pop    edi
c0018499:	5d                   	pop    ebp
c001849a:	c3                   	ret    
c001849b:	90                   	nop

c001849c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001849c:	83 ec 18             	sub    esp,0x18
c001849f:	6a 08                	push   0x8
c00184a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00184a6:	50                   	push   eax
c00184a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00184ac:	50                   	push   eax
c00184ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00184b2:	50                   	push   eax
c00184b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00184b7:	e8 a2 fe ff ff       	call   c001835e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00184bc:	83 c4 2c             	add    esp,0x2c
c00184bf:	0f b6 c4             	movzx  eax,ah
c00184c2:	c3                   	ret    
c00184c3:	90                   	nop

c00184c4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00184c4:	83 ec 18             	sub    esp,0x18
c00184c7:	6a 08                	push   0x8
c00184c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00184ce:	50                   	push   eax
c00184cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00184d4:	50                   	push   eax
c00184d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00184da:	50                   	push   eax
c00184db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00184df:	e8 7a fe ff ff       	call   c001835e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00184e4:	83 c4 2c             	add    esp,0x2c
c00184e7:	c3                   	ret    

c00184e8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00184e8:	83 ec 18             	sub    esp,0x18
c00184eb:	6a 3c                	push   0x3c
c00184ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00184f2:	50                   	push   eax
c00184f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00184f8:	50                   	push   eax
c00184f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00184fe:	50                   	push   eax
c00184ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018503:	e8 56 fe ff ff       	call   c001835e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018508:	83 c4 2c             	add    esp,0x2c
c001850b:	c3                   	ret    

c001850c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001850c:	83 ec 18             	sub    esp,0x18
c001850f:	6a 18                	push   0x18
c0018511:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018516:	50                   	push   eax
c0018517:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001851c:	50                   	push   eax
c001851d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018522:	50                   	push   eax
c0018523:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018527:	e8 32 fe ff ff       	call   c001835e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001852c:	83 c4 2c             	add    esp,0x2c
c001852f:	0f b6 c4             	movzx  eax,ah
c0018532:	c3                   	ret    
c0018533:	90                   	nop

c0018534 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018534:	55                   	push   ebp
c0018535:	57                   	push   edi
c0018536:	56                   	push   esi
c0018537:	53                   	push   ebx
c0018538:	83 ec 28             	sub    esp,0x28
c001853b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001853f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018544:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018549:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001854e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018555:	8d 43 12             	lea    eax,[ebx+0x12]
c0018558:	83 c3 10             	add    ebx,0x10
c001855b:	0f b6 c0             	movzx  eax,al
c001855e:	0f b6 db             	movzx  ebx,bl
c0018561:	50                   	push   eax
c0018562:	51                   	push   ecx
c0018563:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018567:	57                   	push   edi
c0018568:	55                   	push   ebp
c0018569:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001856d:	e8 ec fd ff ff       	call   c001835e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018572:	83 c4 14             	add    esp,0x14
c0018575:	89 c6                	mov    esi,eax
c0018577:	53                   	push   ebx
c0018578:	c1 e6 10             	shl    esi,0x10
c001857b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001857f:	51                   	push   ecx
c0018580:	57                   	push   edi
c0018581:	55                   	push   ebp
c0018582:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018586:	e8 d3 fd ff ff       	call   c001835e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001858b:	83 c4 3c             	add    esp,0x3c
c001858e:	0f b7 c0             	movzx  eax,ax
c0018591:	5b                   	pop    ebx
c0018592:	09 f0                	or     eax,esi
c0018594:	5e                   	pop    esi
c0018595:	5f                   	pop    edi
c0018596:	5d                   	pop    ebp
c0018597:	c3                   	ret    

c0018598 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018598:	55                   	push   ebp
c0018599:	57                   	push   edi
c001859a:	56                   	push   esi
c001859b:	53                   	push   ebx
c001859c:	83 ec 0c             	sub    esp,0xc
c001859f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00185a3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00185a7:	89 f5                	mov    ebp,esi
c00185a9:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00185af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00185b3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00185b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00185bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00185bf:	83 f9 01             	cmp    ecx,0x1
c00185c2:	75 5d                	jne    c0018621 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00185c4:	0f b6 c8             	movzx  ecx,al
c00185c7:	0f b6 d2             	movzx  edx,dl
c00185ca:	c1 e1 10             	shl    ecx,0x10
c00185cd:	c1 e2 0b             	shl    edx,0xb
c00185d0:	89 f0                	mov    eax,esi
c00185d2:	25 fc 00 00 00       	and    eax,0xfc
c00185d7:	09 c1                	or     ecx,eax
c00185d9:	89 e8                	mov    eax,ebp
c00185db:	0f b6 c0             	movzx  eax,al
c00185de:	c1 e0 08             	shl    eax,0x8
c00185e1:	09 c1                	or     ecx,eax
c00185e3:	09 d1                	or     ecx,edx
c00185e5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00185ea:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00185f0:	89 c8                	mov    eax,ecx
c00185f2:	ef                   	out    dx,eax
c00185f3:	ba fc 0c 00 00       	mov    edx,0xcfc
c00185f8:	ed                   	in     eax,dx
c00185f9:	0f b7 db             	movzx  ebx,bx
c00185fc:	83 e6 02             	and    esi,0x2
c00185ff:	74 0a                	je     c001860b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018601:	0f b7 d0             	movzx  edx,ax
c0018604:	c1 e3 10             	shl    ebx,0x10
c0018607:	09 d3                	or     ebx,edx
c0018609:	eb 05                	jmp    c0018610 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001860b:	66 31 c0             	xor    ax,ax
c001860e:	09 c3                	or     ebx,eax
c0018610:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018615:	89 c8                	mov    eax,ecx
c0018617:	ef                   	out    dx,eax
c0018618:	ba fc 0c 00 00       	mov    edx,0xcfc
c001861d:	89 d8                	mov    eax,ebx
c001861f:	eb 41                	jmp    c0018662 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018621:	83 f9 02             	cmp    ecx,0x2
c0018624:	75 45                	jne    c001866b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0018626:	83 ec 0c             	sub    esp,0xc
c0018629:	0f b6 d2             	movzx  edx,dl
c001862c:	89 f1                	mov    ecx,esi
c001862e:	0f b6 c0             	movzx  eax,al
c0018631:	0f b6 f1             	movzx  esi,cl
c0018634:	89 e9                	mov    ecx,ebp
c0018636:	56                   	push   esi
c0018637:	0f b6 c9             	movzx  ecx,cl
c001863a:	51                   	push   ecx
c001863b:	52                   	push   edx
c001863c:	50                   	push   eax
c001863d:	57                   	push   edi
c001863e:	e8 ad fc ff ff       	call   c00182f0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018643:	89 c2                	mov    edx,eax
c0018645:	ed                   	in     eax,dx
c0018646:	83 c4 20             	add    esp,0x20
c0018649:	0f b7 db             	movzx  ebx,bx
c001864c:	f6 c2 02             	test   dl,0x2
c001864f:	74 0c                	je     c001865d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018651:	0f b7 c8             	movzx  ecx,ax
c0018654:	89 d8                	mov    eax,ebx
c0018656:	c1 e0 10             	shl    eax,0x10
c0018659:	09 c8                	or     eax,ecx
c001865b:	eb 05                	jmp    c0018662 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001865d:	66 31 c0             	xor    ax,ax
c0018660:	09 d8                	or     eax,ebx
c0018662:	ef                   	out    dx,eax
c0018663:	83 c4 0c             	add    esp,0xc
c0018666:	5b                   	pop    ebx
c0018667:	5e                   	pop    esi
c0018668:	5f                   	pop    edi
c0018669:	5d                   	pop    ebp
c001866a:	c3                   	ret    
c001866b:	c7 44 24 20 d7 ee 01 c0 	mov    DWORD PTR [esp+0x20],0xc001eed7
c0018673:	83 c4 0c             	add    esp,0xc
c0018676:	5b                   	pop    ebx
c0018677:	5e                   	pop    esi
c0018678:	5f                   	pop    edi
c0018679:	5d                   	pop    ebp
c001867a:	e9 84 7a ff ff       	jmp    c0010103 <KePanic(char const*)>
c001867f:	90                   	nop

c0018680 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018680:	55                   	push   ebp
c0018681:	57                   	push   edi
c0018682:	56                   	push   esi
c0018683:	53                   	push   ebx
c0018684:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001868a:	80 3d 0c 45 02 c0 00 	cmp    BYTE PTR ds:0xc002450c,0x0
c0018691:	0f 85 84 00 00 00    	jne    c001871b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018697:	83 ec 0c             	sub    esp,0xc
c001869a:	68 14 01 00 00       	push   0x114
c001869f:	e8 61 f1 fe ff       	call   c0007805 <malloc>
c00186a4:	83 c4 0c             	add    esp,0xc
c00186a7:	89 c3                	mov    ebx,eax
c00186a9:	ff 35 50 3b 02 c0    	push   DWORD PTR ds:0xc0023b50
c00186af:	68 dd ee 01 c0       	push   0xc001eedd
c00186b4:	50                   	push   eax
c00186b5:	e8 5c 23 ff ff       	call   c000aa16 <File::File(char const*, Process*)>
c00186ba:	5a                   	pop    edx
c00186bb:	59                   	pop    ecx
c00186bc:	6a 01                	push   0x1
c00186be:	53                   	push   ebx
c00186bf:	e8 12 24 ff ff       	call   c000aad6 <File::open(FileOpenMode)>
c00186c4:	83 c4 0c             	add    esp,0xc
c00186c7:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00186cb:	50                   	push   eax
c00186cc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00186d0:	50                   	push   eax
c00186d1:	53                   	push   ebx
c00186d2:	e8 ab 26 ff ff       	call   c000ad82 <File::stat(unsigned long long*, bool*)>
c00186d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00186db:	40                   	inc    eax
c00186dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00186df:	e8 21 f1 fe ff       	call   c0007805 <malloc>
c00186e4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00186e8:	a3 08 45 02 c0       	mov    ds:0xc0024508,eax
c00186ed:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00186f1:	5e                   	pop    esi
c00186f2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00186f4:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00186f8:	51                   	push   ecx
c00186f9:	50                   	push   eax
c00186fa:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00186fe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018702:	53                   	push   ebx
c0018703:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018706:	83 c4 14             	add    esp,0x14
c0018709:	53                   	push   ebx
c001870a:	e8 25 24 ff ff       	call   c000ab34 <File::close()>
c001870f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018713:	83 c4 10             	add    esp,0x10
c0018716:	a3 04 45 02 c0       	mov    ds:0xc0024504,eax
c001871b:	a1 04 45 02 c0       	mov    eax,ds:0xc0024504
c0018720:	8b 15 08 45 02 c0    	mov    edx,DWORD PTR ds:0xc0024508
c0018726:	89 04 24             	mov    DWORD PTR [esp],eax
c0018729:	31 ff                	xor    edi,edi
c001872b:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018733:	31 f6                	xor    esi,esi
c0018735:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001873a:	31 db                	xor    ebx,ebx
c001873c:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018744:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018749:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018750:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018754:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001875b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001875f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018762:	0f 8e 6b 01 00 00    	jle    c00188d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018768:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001876b:	d4 40                	aam    0x40
c001876d:	d5 39                	aad    0x39
c001876f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018773:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018777:	d4 40                	aam    0x40
c0018779:	d5 39                	aad    0x39
c001877b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001877f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018783:	d4 40                	aam    0x40
c0018785:	d5 39                	aad    0x39
c0018787:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001878b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001878f:	d4 40                	aam    0x40
c0018791:	d5 39                	aad    0x39
c0018793:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018797:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001879b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001879f:	3c 56                	cmp    al,0x56
c00187a1:	74 45                	je     c00187e8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c00187a3:	d4 40                	aam    0x40
c00187a5:	d5 39                	aad    0x39
c00187a7:	8d 48 d0             	lea    ecx,[eax-0x30]
c00187aa:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c00187ae:	0f b6 c9             	movzx  ecx,cl
c00187b1:	c1 e1 04             	shl    ecx,0x4
c00187b4:	d4 40                	aam    0x40
c00187b6:	d5 39                	aad    0x39
c00187b8:	8d 58 d0             	lea    ebx,[eax-0x30]
c00187bb:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00187bf:	0f b6 db             	movzx  ebx,bl
c00187c2:	09 cb                	or     ebx,ecx
c00187c4:	c1 e3 04             	shl    ebx,0x4
c00187c7:	d4 40                	aam    0x40
c00187c9:	d5 39                	aad    0x39
c00187cb:	8d 48 d0             	lea    ecx,[eax-0x30]
c00187ce:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00187d2:	0f b6 c9             	movzx  ecx,cl
c00187d5:	09 cb                	or     ebx,ecx
c00187d7:	c1 e3 04             	shl    ebx,0x4
c00187da:	89 d9                	mov    ecx,ebx
c00187dc:	d4 40                	aam    0x40
c00187de:	d5 39                	aad    0x39
c00187e0:	8d 58 d0             	lea    ebx,[eax-0x30]
c00187e3:	0f b6 db             	movzx  ebx,bl
c00187e6:	09 cb                	or     ebx,ecx
c00187e8:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00187ec:	80 f9 44             	cmp    cl,0x44
c00187ef:	74 47                	je     c0018838 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00187f1:	88 c8                	mov    al,cl
c00187f3:	d4 40                	aam    0x40
c00187f5:	d5 39                	aad    0x39
c00187f7:	83 e8 30             	sub    eax,0x30
c00187fa:	0f b6 e8             	movzx  ebp,al
c00187fd:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018801:	c1 e5 04             	shl    ebp,0x4
c0018804:	d4 40                	aam    0x40
c0018806:	d5 39                	aad    0x39
c0018808:	83 e8 30             	sub    eax,0x30
c001880b:	0f b6 f0             	movzx  esi,al
c001880e:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018812:	09 ee                	or     esi,ebp
c0018814:	c1 e6 04             	shl    esi,0x4
c0018817:	d4 40                	aam    0x40
c0018819:	d5 39                	aad    0x39
c001881b:	83 e8 30             	sub    eax,0x30
c001881e:	0f b6 e8             	movzx  ebp,al
c0018821:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018825:	09 ee                	or     esi,ebp
c0018827:	c1 e6 04             	shl    esi,0x4
c001882a:	89 f5                	mov    ebp,esi
c001882c:	d4 40                	aam    0x40
c001882e:	d5 39                	aad    0x39
c0018830:	83 e8 30             	sub    eax,0x30
c0018833:	0f b6 f0             	movzx  esi,al
c0018836:	09 ee                	or     esi,ebp
c0018838:	83 c7 10             	add    edi,0x10
c001883b:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001883f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018842:	3c 0a                	cmp    al,0xa
c0018844:	74 09                	je     c001884f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018846:	45                   	inc    ebp
c0018847:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001884a:	75 16                	jne    c0018862 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001884c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001884f:	3c 0a                	cmp    al,0xa
c0018851:	0f 94 c0             	sete   al
c0018854:	0f b6 c0             	movzx  eax,al
c0018857:	01 c7                	add    edi,eax
c0018859:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001885e:	75 0c                	jne    c001886c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018860:	eb 15                	jmp    c0018877 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018862:	47                   	inc    edi
c0018863:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018866:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001886a:	eb d3                	jmp    c001883f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001886c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018871:	0f 85 e8 fe ff ff    	jne    c001875f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018877:	80 f9 44             	cmp    cl,0x44
c001887a:	74 0b                	je     c0018887 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001887c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018881:	0f 85 d8 fe ff ff    	jne    c001875f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018887:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001888b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001888f:	c1 e1 04             	shl    ecx,0x4
c0018892:	83 e8 30             	sub    eax,0x30
c0018895:	09 c8                	or     eax,ecx
c0018897:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001889b:	0f 85 be fe ff ff    	jne    c001875f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00188a1:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00188a5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00188a9:	c1 e1 04             	shl    ecx,0x4
c00188ac:	83 e8 30             	sub    eax,0x30
c00188af:	09 c8                	or     eax,ecx
c00188b1:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00188b5:	0f 85 a4 fe ff ff    	jne    c001875f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00188bb:	50                   	push   eax
c00188bc:	50                   	push   eax
c00188bd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00188c1:	50                   	push   eax
c00188c2:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00188c9:	e8 32 7d fe ff       	call   c0000600 <strcpy>
c00188ce:	83 c4 10             	add    esp,0x10
c00188d1:	eb 15                	jmp    c00188e8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c00188d3:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00188da:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00188e5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00188e8:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00188ef:	81 c4 2c 01 00 00    	add    esp,0x12c
c00188f5:	5b                   	pop    ebx
c00188f6:	5e                   	pop    esi
c00188f7:	5f                   	pop    edi
c00188f8:	5d                   	pop    ebp
c00188f9:	c3                   	ret    

c00188fa <PCI::checkBus(unsigned char)>:
c00188fa:	56                   	push   esi
c00188fb:	53                   	push   ebx
c00188fc:	31 f6                	xor    esi,esi
c00188fe:	51                   	push   ecx
c00188ff:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018903:	0f b6 c3             	movzx  eax,bl
c0018906:	52                   	push   edx
c0018907:	56                   	push   esi
c0018908:	46                   	inc    esi
c0018909:	50                   	push   eax
c001890a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001890e:	e8 f3 02 00 00       	call   c0018c06 <PCI::checkDevice(unsigned char, unsigned char)>
c0018913:	83 c4 10             	add    esp,0x10
c0018916:	83 fe 20             	cmp    esi,0x20
c0018919:	75 e8                	jne    c0018903 <PCI::checkBus(unsigned char)+0x9>
c001891b:	58                   	pop    eax
c001891c:	5b                   	pop    ebx
c001891d:	5e                   	pop    esi
c001891e:	c3                   	ret    
c001891f:	90                   	nop

c0018920 <PCI::foundDevice(PCIDeviceInfo)>:
c0018920:	55                   	push   ebp
c0018921:	57                   	push   edi
c0018922:	56                   	push   esi
c0018923:	53                   	push   ebx
c0018924:	83 ec 1c             	sub    esp,0x1c
c0018927:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001892b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018931:	0f 84 52 01 00 00    	je     c0018a89 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018937:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001893b:	66 81 f9 06 04       	cmp    cx,0x406
c0018940:	75 2c                	jne    c001896e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018942:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018947:	50                   	push   eax
c0018948:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001894d:	50                   	push   eax
c001894e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018953:	50                   	push   eax
c0018954:	56                   	push   esi
c0018955:	e8 b2 fb ff ff       	call   c001850c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001895a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001895e:	0f b6 c0             	movzx  eax,al
c0018961:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018965:	83 c4 2c             	add    esp,0x2c
c0018968:	5b                   	pop    ebx
c0018969:	5e                   	pop    esi
c001896a:	5f                   	pop    edi
c001896b:	5d                   	pop    ebp
c001896c:	eb 8c                	jmp    c00188fa <PCI::checkBus(unsigned char)>
c001896e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018972:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018978:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001897c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018980:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018984:	88 d3                	mov    bl,dl
c0018986:	85 c0                	test   eax,eax
c0018988:	74 33                	je     c00189bd <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001898a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001898d:	85 d2                	test   edx,edx
c001898f:	74 28                	je     c00189b9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018991:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018997:	31 ef                	xor    edi,ebp
c0018999:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001899f:	75 18                	jne    c00189b9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00189a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00189a5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00189ab:	75 0c                	jne    c00189b9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00189ad:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00189b3:	0f 84 d0 00 00 00    	je     c0018a89 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00189b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00189bb:	eb c9                	jmp    c0018986 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00189bd:	66 81 f9 01 06       	cmp    cx,0x601
c00189c2:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00189c6:	75 19                	jne    c00189e1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00189c8:	83 ec 0c             	sub    esp,0xc
c00189cb:	68 64 01 00 00       	push   0x164
c00189d0:	e8 30 ee fe ff       	call   c0007805 <malloc>
c00189d5:	89 c5                	mov    ebp,eax
c00189d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00189da:	e8 47 0e 00 00       	call   c0019826 <SATABus::SATABus()>
c00189df:	eb 1e                	jmp    c00189ff <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00189e1:	66 81 f9 01 01       	cmp    cx,0x101
c00189e6:	75 60                	jne    c0018a48 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00189e8:	83 ec 0c             	sub    esp,0xc
c00189eb:	68 70 02 00 00       	push   0x270
c00189f0:	e8 10 ee fe ff       	call   c0007805 <malloc>
c00189f5:	89 c5                	mov    ebp,eax
c00189f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00189fa:	e8 cb 02 00 00       	call   c0018cca <IDE::IDE()>
c00189ff:	58                   	pop    eax
c0018a00:	5a                   	pop    edx
c0018a01:	55                   	push   ebp
c0018a02:	56                   	push   esi
c0018a03:	e8 d8 2e ff ff       	call   c000b8e0 <Device::addChild(Device*)>
c0018a08:	83 ec 1c             	sub    esp,0x1c
c0018a0b:	b9 09 00 00 00       	mov    ecx,0x9
c0018a10:	fc                   	cld    
c0018a11:	89 e7                	mov    edi,esp
c0018a13:	89 de                	mov    esi,ebx
c0018a15:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018a17:	55                   	push   ebp
c0018a18:	e8 09 2e ff ff       	call   c000b826 <Device::preOpenPCI(PCIDeviceInfo)>
c0018a1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018a20:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018a24:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018a2c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018a34:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018a3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018a3f:	83 c4 4c             	add    esp,0x4c
c0018a42:	5b                   	pop    ebx
c0018a43:	5e                   	pop    esi
c0018a44:	5f                   	pop    edi
c0018a45:	5d                   	pop    ebp
c0018a46:	ff e0                	jmp    eax
c0018a48:	83 ec 0c             	sub    esp,0xc
c0018a4b:	68 58 01 00 00       	push   0x158
c0018a50:	e8 b0 ed fe ff       	call   c0007805 <malloc>
c0018a55:	89 c5                	mov    ebp,eax
c0018a57:	58                   	pop    eax
c0018a58:	5a                   	pop    edx
c0018a59:	68 f6 ee 01 c0       	push   0xc001eef6
c0018a5e:	55                   	push   ebp
c0018a5f:	e8 1a 31 ff ff       	call   c000bb7e <DriverlessDevice::DriverlessDevice(char const*)>
c0018a64:	59                   	pop    ecx
c0018a65:	5f                   	pop    edi
c0018a66:	55                   	push   ebp
c0018a67:	56                   	push   esi
c0018a68:	e8 73 2e ff ff       	call   c000b8e0 <Device::addChild(Device*)>
c0018a6d:	b9 09 00 00 00       	mov    ecx,0x9
c0018a72:	fc                   	cld    
c0018a73:	89 df                	mov    edi,ebx
c0018a75:	89 de                	mov    esi,ebx
c0018a77:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018a79:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018a7d:	83 c4 2c             	add    esp,0x2c
c0018a80:	5b                   	pop    ebx
c0018a81:	5e                   	pop    esi
c0018a82:	5f                   	pop    edi
c0018a83:	5d                   	pop    ebp
c0018a84:	e9 9d 2d ff ff       	jmp    c000b826 <Device::preOpenPCI(PCIDeviceInfo)>
c0018a89:	83 c4 1c             	add    esp,0x1c
c0018a8c:	5b                   	pop    ebx
c0018a8d:	5e                   	pop    esi
c0018a8e:	5f                   	pop    edi
c0018a8f:	5d                   	pop    ebp
c0018a90:	c3                   	ret    
c0018a91:	90                   	nop

c0018a92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018a92:	55                   	push   ebp
c0018a93:	57                   	push   edi
c0018a94:	56                   	push   esi
c0018a95:	53                   	push   ebx
c0018a96:	83 ec 68             	sub    esp,0x68
c0018a99:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018a9d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018aa4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018aa8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018aaf:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018ab4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018ab8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018abf:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018ac4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018ac8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018acd:	6a 0c                	push   0xc
c0018acf:	57                   	push   edi
c0018ad0:	53                   	push   ebx
c0018ad1:	56                   	push   esi
c0018ad2:	55                   	push   ebp
c0018ad3:	e8 86 f8 ff ff       	call   c001835e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ad8:	83 c4 20             	add    esp,0x20
c0018adb:	57                   	push   edi
c0018adc:	53                   	push   ebx
c0018add:	56                   	push   esi
c0018ade:	55                   	push   ebp
c0018adf:	e8 6e f9 ff ff       	call   c0018452 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018ae4:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018ae9:	57                   	push   edi
c0018aea:	53                   	push   ebx
c0018aeb:	56                   	push   esi
c0018aec:	55                   	push   ebp
c0018aed:	e8 f6 f9 ff ff       	call   c00184e8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018af2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018af6:	83 c4 14             	add    esp,0x14
c0018af9:	6a 3c                	push   0x3c
c0018afb:	57                   	push   edi
c0018afc:	53                   	push   ebx
c0018afd:	56                   	push   esi
c0018afe:	55                   	push   ebp
c0018aff:	e8 5a f8 ff ff       	call   c001835e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018b04:	0f b6 c4             	movzx  eax,ah
c0018b07:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018b0b:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018b0f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018b13:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c0018b18:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018b1e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018b24:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018b28:	83 c4 20             	add    esp,0x20
c0018b2b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018b30:	74 30                	je     c0018b62 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018b32:	31 c0                	xor    eax,eax
c0018b34:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018b38:	7e 28                	jle    c0018b62 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018b3a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018b42:	39 cb                	cmp    ebx,ecx
c0018b44:	75 19                	jne    c0018b5f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018b46:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018b4e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018b52:	75 0b                	jne    c0018b5f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018b54:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018b5b:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018b5f:	40                   	inc    eax
c0018b60:	eb d2                	jmp    c0018b34 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018b62:	31 d2                	xor    edx,edx
c0018b64:	83 ec 0c             	sub    esp,0xc
c0018b67:	57                   	push   edi
c0018b68:	53                   	push   ebx
c0018b69:	56                   	push   esi
c0018b6a:	52                   	push   edx
c0018b6b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018b6f:	55                   	push   ebp
c0018b70:	e8 bf f9 ff ff       	call   c0018534 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018b75:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018b79:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018b7d:	42                   	inc    edx
c0018b7e:	83 c4 20             	add    esp,0x20
c0018b81:	83 fa 06             	cmp    edx,0x6
c0018b84:	75 de                	jne    c0018b64 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018b86:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018b8b:	83 ec 0c             	sub    esp,0xc
c0018b8e:	86 e0                	xchg   al,ah
c0018b90:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018b95:	6a 02                	push   0x2
c0018b97:	57                   	push   edi
c0018b98:	53                   	push   ebx
c0018b99:	56                   	push   esi
c0018b9a:	55                   	push   ebp
c0018b9b:	e8 be f7 ff ff       	call   c001835e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ba0:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018ba5:	83 c4 20             	add    esp,0x20
c0018ba8:	57                   	push   edi
c0018ba9:	53                   	push   ebx
c0018baa:	56                   	push   esi
c0018bab:	55                   	push   ebp
c0018bac:	e8 eb f8 ff ff       	call   c001849c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018bb1:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018bb5:	57                   	push   edi
c0018bb6:	53                   	push   ebx
c0018bb7:	56                   	push   esi
c0018bb8:	55                   	push   ebp
c0018bb9:	e8 48 f8 ff ff       	call   c0018406 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018bbe:	b9 09 00 00 00       	mov    ecx,0x9
c0018bc3:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018bc8:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018bcc:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018bd0:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018bd4:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018bd8:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018bdc:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018be0:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018be4:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018be8:	83 ec 0c             	sub    esp,0xc
c0018beb:	fc                   	cld    
c0018bec:	89 e7                	mov    edi,esp
c0018bee:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018bf2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018bf4:	55                   	push   ebp
c0018bf5:	e8 26 fd ff ff       	call   c0018920 <PCI::foundDevice(PCIDeviceInfo)>
c0018bfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018c00:	5b                   	pop    ebx
c0018c01:	5e                   	pop    esi
c0018c02:	5f                   	pop    edi
c0018c03:	5d                   	pop    ebp
c0018c04:	c3                   	ret    
c0018c05:	90                   	nop

c0018c06 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018c06:	55                   	push   ebp
c0018c07:	57                   	push   edi
c0018c08:	56                   	push   esi
c0018c09:	53                   	push   ebx
c0018c0a:	83 ec 0c             	sub    esp,0xc
c0018c0d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018c11:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018c16:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018c1b:	6a 00                	push   0x0
c0018c1d:	56                   	push   esi
c0018c1e:	57                   	push   edi
c0018c1f:	55                   	push   ebp
c0018c20:	e8 e1 f7 ff ff       	call   c0018406 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018c25:	6a 00                	push   0x0
c0018c27:	56                   	push   esi
c0018c28:	57                   	push   edi
c0018c29:	55                   	push   ebp
c0018c2a:	e8 63 fe ff ff       	call   c0018a92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018c2f:	83 c4 20             	add    esp,0x20
c0018c32:	6a 00                	push   0x0
c0018c34:	56                   	push   esi
c0018c35:	57                   	push   edi
c0018c36:	55                   	push   ebp
c0018c37:	e8 ee f7 ff ff       	call   c001842a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018c3c:	83 c4 10             	add    esp,0x10
c0018c3f:	84 c0                	test   al,al
c0018c41:	79 27                	jns    c0018c6a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018c43:	bb 01 00 00 00       	mov    ebx,0x1
c0018c48:	53                   	push   ebx
c0018c49:	56                   	push   esi
c0018c4a:	57                   	push   edi
c0018c4b:	55                   	push   ebp
c0018c4c:	e8 b5 f7 ff ff       	call   c0018406 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018c51:	83 c4 10             	add    esp,0x10
c0018c54:	66 40                	inc    ax
c0018c56:	74 0c                	je     c0018c64 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018c58:	53                   	push   ebx
c0018c59:	56                   	push   esi
c0018c5a:	57                   	push   edi
c0018c5b:	55                   	push   ebp
c0018c5c:	e8 31 fe ff ff       	call   c0018a92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018c61:	83 c4 10             	add    esp,0x10
c0018c64:	43                   	inc    ebx
c0018c65:	83 fb 08             	cmp    ebx,0x8
c0018c68:	75 de                	jne    c0018c48 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018c6a:	83 c4 0c             	add    esp,0xc
c0018c6d:	5b                   	pop    ebx
c0018c6e:	5e                   	pop    esi
c0018c6f:	5f                   	pop    edi
c0018c70:	5d                   	pop    ebp
c0018c71:	c3                   	ret    

c0018c72 <PCI::detect()>:
c0018c72:	56                   	push   esi
c0018c73:	53                   	push   ebx
c0018c74:	53                   	push   ebx
c0018c75:	31 db                	xor    ebx,ebx
c0018c77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018c7b:	6a 00                	push   0x0
c0018c7d:	6a 00                	push   0x0
c0018c7f:	6a 00                	push   0x0
c0018c81:	56                   	push   esi
c0018c82:	e8 a3 f7 ff ff       	call   c001842a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018c87:	83 c4 10             	add    esp,0x10
c0018c8a:	a8 80                	test   al,0x80
c0018c8c:	75 21                	jne    c0018caf <PCI::detect()+0x3d>
c0018c8e:	51                   	push   ecx
c0018c8f:	51                   	push   ecx
c0018c90:	6a 00                	push   0x0
c0018c92:	56                   	push   esi
c0018c93:	e8 62 fc ff ff       	call   c00188fa <PCI::checkBus(unsigned char)>
c0018c98:	83 c4 10             	add    esp,0x10
c0018c9b:	eb 24                	jmp    c0018cc1 <PCI::detect()+0x4f>
c0018c9d:	52                   	push   edx
c0018c9e:	52                   	push   edx
c0018c9f:	53                   	push   ebx
c0018ca0:	43                   	inc    ebx
c0018ca1:	56                   	push   esi
c0018ca2:	e8 53 fc ff ff       	call   c00188fa <PCI::checkBus(unsigned char)>
c0018ca7:	83 c4 10             	add    esp,0x10
c0018caa:	83 fb 08             	cmp    ebx,0x8
c0018cad:	74 12                	je     c0018cc1 <PCI::detect()+0x4f>
c0018caf:	53                   	push   ebx
c0018cb0:	6a 00                	push   0x0
c0018cb2:	6a 00                	push   0x0
c0018cb4:	56                   	push   esi
c0018cb5:	e8 4c f7 ff ff       	call   c0018406 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018cba:	83 c4 10             	add    esp,0x10
c0018cbd:	66 40                	inc    ax
c0018cbf:	74 dc                	je     c0018c9d <PCI::detect()+0x2b>
c0018cc1:	58                   	pop    eax
c0018cc2:	5b                   	pop    ebx
c0018cc3:	5e                   	pop    esi
c0018cc4:	c3                   	ret    
c0018cc5:	90                   	nop

c0018cc6 <IDE::close(int, int, void*)>:
c0018cc6:	83 c8 ff             	or     eax,0xffffffff
c0018cc9:	c3                   	ret    

c0018cca <IDE::IDE()>:
c0018cca:	83 ec 0c             	sub    esp,0xc
c0018ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cd1:	83 ec 08             	sub    esp,0x8
c0018cd4:	68 3c ef 01 c0       	push   0xc001ef3c
c0018cd9:	50                   	push   eax
c0018cda:	e8 45 2f ff ff       	call   c000bc24 <HardDiskController::HardDiskController(char const*)>
c0018cdf:	83 c4 10             	add    esp,0x10
c0018ce2:	ba cc ef 01 c0       	mov    edx,0xc001efcc
c0018ce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ceb:	89 10                	mov    DWORD PTR [eax],edx
c0018ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cf1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018cf8:	90                   	nop
c0018cf9:	83 c4 0c             	add    esp,0xc
c0018cfc:	c3                   	ret    
c0018cfd:	90                   	nop

c0018cfe <IDE::prepareInterrupt(unsigned char)>:
c0018cfe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018d03:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018d07:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018d0f:	c3                   	ret    

c0018d10 <selectDrive(unsigned char, unsigned char)>:
c0018d10:	c3                   	ret    
c0018d11:	90                   	nop

c0018d12 <IDE::getBase(unsigned char)>:
c0018d12:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018d17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d1b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018d23:	c3                   	ret    

c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018d24:	55                   	push   ebp
c0018d25:	57                   	push   edi
c0018d26:	56                   	push   esi
c0018d27:	53                   	push   ebx
c0018d28:	83 ec 1c             	sub    esp,0x1c
c0018d2b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018d2f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018d33:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018d36:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018d3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018d3e:	80 f9 03             	cmp    cl,0x3
c0018d41:	77 51                	ja     c0018d94 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018d43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d47:	0f b6 f2             	movzx  esi,dl
c0018d4a:	0f b6 db             	movzx  ebx,bl
c0018d4d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018d50:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018d54:	83 ca 80             	or     edx,0xffffff80
c0018d57:	0f b6 d2             	movzx  edx,dl
c0018d5a:	52                   	push   edx
c0018d5b:	6a 0c                	push   0xc
c0018d5d:	56                   	push   esi
c0018d5e:	57                   	push   edi
c0018d5f:	e8 c0 ff ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018d64:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0018d69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d6d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018d71:	ee                   	out    dx,al
c0018d72:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0018d77:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0018d7b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0018d7f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018d83:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018d8b:	83 c4 2c             	add    esp,0x2c
c0018d8e:	5b                   	pop    ebx
c0018d8f:	5e                   	pop    esi
c0018d90:	5f                   	pop    edi
c0018d91:	5d                   	pop    ebp
c0018d92:	eb 90                	jmp    c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018d94:	80 fb 07             	cmp    bl,0x7
c0018d97:	77 12                	ja     c0018dab <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0018d99:	0f b6 d2             	movzx  edx,dl
c0018d9c:	0f b6 db             	movzx  ebx,bl
c0018d9f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0018da7:	89 da                	mov    edx,ebx
c0018da9:	eb 2f                	jmp    c0018dda <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018dab:	80 fb 0d             	cmp    bl,0xd
c0018dae:	77 13                	ja     c0018dc3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0018db0:	0f b6 d2             	movzx  edx,dl
c0018db3:	0f b6 db             	movzx  ebx,bl
c0018db6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0018dbd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0018dc1:	eb 17                	jmp    c0018dda <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018dc3:	80 fb 15             	cmp    bl,0x15
c0018dc6:	77 13                	ja     c0018ddb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0018dc8:	0f b6 d2             	movzx  edx,dl
c0018dcb:	0f b6 db             	movzx  ebx,bl
c0018dce:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0018dd6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0018dda:	ee                   	out    dx,al
c0018ddb:	83 c4 1c             	add    esp,0x1c
c0018dde:	5b                   	pop    ebx
c0018ddf:	5e                   	pop    esi
c0018de0:	5f                   	pop    edi
c0018de1:	5d                   	pop    ebp
c0018de2:	c3                   	ret    
c0018de3:	90                   	nop

c0018de4 <IDE::read(unsigned char, unsigned char)>:
c0018de4:	55                   	push   ebp
c0018de5:	57                   	push   edi
c0018de6:	56                   	push   esi
c0018de7:	53                   	push   ebx
c0018de8:	83 ec 1c             	sub    esp,0x1c
c0018deb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018def:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018df3:	8d 43 f8             	lea    eax,[ebx-0x8]
c0018df6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018dfa:	3c 03                	cmp    al,0x3
c0018dfc:	77 43                	ja     c0018e41 <IDE::read(unsigned char, unsigned char)+0x5d>
c0018dfe:	0f b6 f2             	movzx  esi,dl
c0018e01:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018e04:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0018e08:	83 c8 80             	or     eax,0xffffff80
c0018e0b:	0f b6 c0             	movzx  eax,al
c0018e0e:	50                   	push   eax
c0018e0f:	6a 0c                	push   0xc
c0018e11:	56                   	push   esi
c0018e12:	57                   	push   edi
c0018e13:	e8 0c ff ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018e18:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0018e1d:	0f b6 c3             	movzx  eax,bl
c0018e20:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0018e24:	ec                   	in     al,dx
c0018e25:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018e29:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0018e2e:	52                   	push   edx
c0018e2f:	6a 0c                	push   0xc
c0018e31:	56                   	push   esi
c0018e32:	57                   	push   edi
c0018e33:	e8 ec fe ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018e38:	83 c4 20             	add    esp,0x20
c0018e3b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018e3f:	eb 49                	jmp    c0018e8a <IDE::read(unsigned char, unsigned char)+0xa6>
c0018e41:	80 fb 07             	cmp    bl,0x7
c0018e44:	77 12                	ja     c0018e58 <IDE::read(unsigned char, unsigned char)+0x74>
c0018e46:	0f b6 d2             	movzx  edx,dl
c0018e49:	0f b6 c3             	movzx  eax,bl
c0018e4c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0018e54:	89 c2                	mov    edx,eax
c0018e56:	eb 31                	jmp    c0018e89 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018e58:	80 fb 0d             	cmp    bl,0xd
c0018e5b:	77 13                	ja     c0018e70 <IDE::read(unsigned char, unsigned char)+0x8c>
c0018e5d:	0f b6 d2             	movzx  edx,dl
c0018e60:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0018e67:	0f b6 d3             	movzx  edx,bl
c0018e6a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0018e6e:	eb 19                	jmp    c0018e89 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018e70:	31 c0                	xor    eax,eax
c0018e72:	80 fb 15             	cmp    bl,0x15
c0018e75:	77 13                	ja     c0018e8a <IDE::read(unsigned char, unsigned char)+0xa6>
c0018e77:	0f b6 d2             	movzx  edx,dl
c0018e7a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0018e82:	0f b6 d3             	movzx  edx,bl
c0018e85:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0018e89:	ec                   	in     al,dx
c0018e8a:	83 c4 1c             	add    esp,0x1c
c0018e8d:	5b                   	pop    ebx
c0018e8e:	5e                   	pop    esi
c0018e8f:	5f                   	pop    edi
c0018e90:	5d                   	pop    ebp
c0018e91:	c3                   	ret    

c0018e92 <IDE::waitInterrupt(unsigned char)>:
c0018e92:	57                   	push   edi
c0018e93:	56                   	push   esi
c0018e94:	31 f6                	xor    esi,esi
c0018e96:	53                   	push   ebx
c0018e97:	83 ec 10             	sub    esp,0x10
c0018e9a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0018e9e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018ea2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018ea6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018eab:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0018eb2:	84 db                	test   bl,bl
c0018eb4:	75 33                	jne    c0018ee9 <IDE::waitInterrupt(unsigned char)+0x57>
c0018eb6:	52                   	push   edx
c0018eb7:	6a 0c                	push   0xc
c0018eb9:	50                   	push   eax
c0018eba:	57                   	push   edi
c0018ebb:	e8 24 ff ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c0018ec0:	83 c4 10             	add    esp,0x10
c0018ec3:	a8 01                	test   al,0x1
c0018ec5:	75 2a                	jne    c0018ef1 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018ec7:	f7 c6 04 00 00 00    	test   esi,0x4
c0018ecd:	75 12                	jne    c0018ee1 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018ecf:	83 fe 32             	cmp    esi,0x32
c0018ed2:	7e 0d                	jle    c0018ee1 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018ed4:	83 ec 0c             	sub    esp,0xc
c0018ed7:	6a 64                	push   0x64
c0018ed9:	e8 12 a9 ff ff       	call   c00137f0 <milliTenthSleep(unsigned int)>
c0018ede:	83 c4 10             	add    esp,0x10
c0018ee1:	83 fe 3c             	cmp    esi,0x3c
c0018ee4:	74 0b                	je     c0018ef1 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018ee6:	46                   	inc    esi
c0018ee7:	eb bd                	jmp    c0018ea6 <IDE::waitInterrupt(unsigned char)+0x14>
c0018ee9:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0018ef1:	83 c4 10             	add    esp,0x10
c0018ef4:	88 d8                	mov    al,bl
c0018ef6:	5b                   	pop    ebx
c0018ef7:	5e                   	pop    esi
c0018ef8:	5f                   	pop    edi
c0018ef9:	c3                   	ret    

c0018efa <ideChannel0IRQHandler(regs*, void*)>:
c0018efa:	83 ec 10             	sub    esp,0x10
c0018efd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f01:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0018f08:	6a 07                	push   0x7
c0018f0a:	6a 00                	push   0x0
c0018f0c:	50                   	push   eax
c0018f0d:	e8 d2 fe ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c0018f12:	83 c4 1c             	add    esp,0x1c
c0018f15:	c3                   	ret    

c0018f16 <ideChannel1IRQHandler(regs*, void*)>:
c0018f16:	83 ec 10             	sub    esp,0x10
c0018f19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f1d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0018f24:	6a 07                	push   0x7
c0018f26:	6a 01                	push   0x1
c0018f28:	50                   	push   eax
c0018f29:	e8 b6 fe ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c0018f2e:	83 c4 1c             	add    esp,0x1c
c0018f31:	c3                   	ret    

c0018f32 <IDE::enableIRQs(unsigned char, bool)>:
c0018f32:	57                   	push   edi
c0018f33:	56                   	push   esi
c0018f34:	be 04 00 00 00       	mov    esi,0x4
c0018f39:	53                   	push   ebx
c0018f3a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018f3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018f43:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0018f48:	0f 94 c0             	sete   al
c0018f4b:	01 c0                	add    eax,eax
c0018f4d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0018f54:	0f b6 c0             	movzx  eax,al
c0018f57:	50                   	push   eax
c0018f58:	6a 0c                	push   0xc
c0018f5a:	57                   	push   edi
c0018f5b:	53                   	push   ebx
c0018f5c:	e8 c3 fd ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018f61:	83 c4 10             	add    esp,0x10
c0018f64:	50                   	push   eax
c0018f65:	6a 0c                	push   0xc
c0018f67:	57                   	push   edi
c0018f68:	53                   	push   ebx
c0018f69:	e8 76 fe ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c0018f6e:	83 c4 10             	add    esp,0x10
c0018f71:	4e                   	dec    esi
c0018f72:	75 f0                	jne    c0018f64 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0018f74:	5b                   	pop    ebx
c0018f75:	5e                   	pop    esi
c0018f76:	5f                   	pop    edi
c0018f77:	c3                   	ret    

c0018f78 <IDE::open(int, int, void*)>:
c0018f78:	55                   	push   ebp
c0018f79:	57                   	push   edi
c0018f7a:	56                   	push   esi
c0018f7b:	53                   	push   ebx
c0018f7c:	83 ec 1c             	sub    esp,0x1c
c0018f7f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018f83:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0018f8c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0018f95:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0018f9c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0018fa3:	0f 85 b0 02 00 00    	jne    c0019259 <IDE::open(int, int, void*)+0x2e1>
c0018fa9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0018faf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0018fb3:	83 e0 7f             	and    eax,0x7f
c0018fb6:	3c 05                	cmp    al,0x5
c0018fb8:	74 04                	je     c0018fbe <IDE::open(int, int, void*)+0x46>
c0018fba:	3c 0f                	cmp    al,0xf
c0018fbc:	75 32                	jne    c0018ff0 <IDE::open(int, int, void*)+0x78>
c0018fbe:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0018fc4:	83 e0 fc             	and    eax,0xfffffffc
c0018fc7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018fce:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0018fd4:	83 e0 fc             	and    eax,0xfffffffc
c0018fd7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018fde:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0018fe4:	83 e0 fc             	and    eax,0xfffffffc
c0018fe7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018fee:	eb 14                	jmp    c0019004 <IDE::open(int, int, void*)+0x8c>
c0018ff0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0018ffa:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019004:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001900b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0019012:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019016:	89 c6                	mov    esi,eax
c0019018:	bf f8 0c 00 00       	mov    edi,0xcf8
c001901d:	c1 e6 10             	shl    esi,0x10
c0019020:	89 e8                	mov    eax,ebp
c0019022:	89 fa                	mov    edx,edi
c0019024:	c1 e0 0b             	shl    eax,0xb
c0019027:	09 f0                	or     eax,esi
c0019029:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0019030:	c1 e6 08             	shl    esi,0x8
c0019033:	09 c6                	or     esi,eax
c0019035:	89 f0                	mov    eax,esi
c0019037:	0d 08 00 00 80       	or     eax,0x80000008
c001903c:	ef                   	out    dx,eax
c001903d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0019042:	89 ca                	mov    edx,ecx
c0019044:	ed                   	in     eax,dx
c0019045:	c1 e8 10             	shr    eax,0x10
c0019048:	3d ff ff 00 00       	cmp    eax,0xffff
c001904d:	0f 84 f5 00 00 00    	je     c0019148 <IDE::open(int, int, void*)+0x1d0>
c0019053:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019059:	89 fa                	mov    edx,edi
c001905b:	89 f0                	mov    eax,esi
c001905d:	ef                   	out    dx,eax
c001905e:	b0 fe                	mov    al,0xfe
c0019060:	89 ca                	mov    edx,ecx
c0019062:	ee                   	out    dx,al
c0019063:	89 f0                	mov    eax,esi
c0019065:	89 fa                	mov    edx,edi
c0019067:	ef                   	out    dx,eax
c0019068:	89 ca                	mov    edx,ecx
c001906a:	ed                   	in     eax,dx
c001906b:	3c fe                	cmp    al,0xfe
c001906d:	0f 85 a9 00 00 00    	jne    c001911c <IDE::open(int, int, void*)+0x1a4>
c0019073:	8b 15 78 06 02 c0    	mov    edx,DWORD PTR ds:0xc0020678
c0019079:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019080:	74 33                	je     c00190b5 <IDE::open(int, int, void*)+0x13d>
c0019082:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019088:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001908c:	40                   	inc    eax
c001908d:	83 ec 0c             	sub    esp,0xc
c0019090:	0f b6 c0             	movzx  eax,al
c0019093:	50                   	push   eax
c0019094:	55                   	push   ebp
c0019095:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019099:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001909f:	51                   	push   ecx
c00190a0:	e8 77 55 ff ff       	call   c000e61c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00190a5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00190aa:	83 c4 1c             	add    esp,0x1c
c00190ad:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00190b3:	eb 0a                	jmp    c00190bf <IDE::open(int, int, void*)+0x147>
c00190b5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00190bf:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00190c6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00190cd:	c1 e1 10             	shl    ecx,0x10
c00190d0:	c1 e0 08             	shl    eax,0x8
c00190d3:	bf f8 0c 00 00       	mov    edi,0xcf8
c00190d8:	09 c1                	or     ecx,eax
c00190da:	89 fa                	mov    edx,edi
c00190dc:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00190e3:	c1 e0 0b             	shl    eax,0xb
c00190e6:	09 c1                	or     ecx,eax
c00190e8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00190ee:	89 c8                	mov    eax,ecx
c00190f0:	ef                   	out    dx,eax
c00190f1:	be fc 0c 00 00       	mov    esi,0xcfc
c00190f6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00190fc:	89 f2                	mov    edx,esi
c00190fe:	ee                   	out    dx,al
c00190ff:	89 c8                	mov    eax,ecx
c0019101:	89 fa                	mov    edx,edi
c0019103:	ef                   	out    dx,eax
c0019104:	89 f2                	mov    edx,esi
c0019106:	ed                   	in     eax,dx
c0019107:	0f b6 c0             	movzx  eax,al
c001910a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019110:	74 46                	je     c0019158 <IDE::open(int, int, void*)+0x1e0>
c0019112:	83 ec 0c             	sub    esp,0xc
c0019115:	68 54 ef 01 c0       	push   0xc001ef54
c001911a:	eb 34                	jmp    c0019150 <IDE::open(int, int, void*)+0x1d8>
c001911c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019125:	75 17                	jne    c001913e <IDE::open(int, int, void*)+0x1c6>
c0019127:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001912c:	74 07                	je     c0019135 <IDE::open(int, int, void*)+0x1bd>
c001912e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0019133:	75 09                	jne    c001913e <IDE::open(int, int, void*)+0x1c6>
c0019135:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001913c:	eb 1a                	jmp    c0019158 <IDE::open(int, int, void*)+0x1e0>
c001913e:	83 ec 0c             	sub    esp,0xc
c0019141:	68 5c ef 01 c0       	push   0xc001ef5c
c0019146:	eb 08                	jmp    c0019150 <IDE::open(int, int, void*)+0x1d8>
c0019148:	83 ec 0c             	sub    esp,0xc
c001914b:	68 8d ef 01 c0       	push   0xc001ef8d
c0019150:	e8 ae 6f ff ff       	call   c0010103 <KePanic(char const*)>
c0019155:	83 c4 10             	add    esp,0x10
c0019158:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001915f:	79 1a                	jns    c001917b <IDE::open(int, int, void*)+0x203>
c0019161:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0019167:	83 e0 fc             	and    eax,0xfffffffc
c001916a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019171:	83 c0 08             	add    eax,0x8
c0019174:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001917b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019181:	89 c2                	mov    edx,eax
c0019183:	83 e2 0f             	and    edx,0xf
c0019186:	66 83 fa 08          	cmp    dx,0x8
c001918a:	75 0a                	jne    c0019196 <IDE::open(int, int, void*)+0x21e>
c001918c:	83 e8 02             	sub    eax,0x2
c001918f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019196:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001919c:	89 c2                	mov    edx,eax
c001919e:	83 e2 0f             	and    edx,0xf
c00191a1:	66 83 fa 08          	cmp    dx,0x8
c00191a5:	75 0a                	jne    c00191b1 <IDE::open(int, int, void*)+0x239>
c00191a7:	83 e8 02             	sub    eax,0x2
c00191aa:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00191b1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00191b8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00191bf:	89 d0                	mov    eax,edx
c00191c1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00191c4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00191c8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00191cc:	8d 4a 01             	lea    ecx,[edx+0x1]
c00191cf:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00191d4:	0f b6 c9             	movzx  ecx,cl
c00191d7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00191de:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00191e1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00191e5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00191e9:	8d 50 02             	lea    edx,[eax+0x2]
c00191ec:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00191f1:	0f b6 d2             	movzx  edx,dl
c00191f4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00191fa:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00191fd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019201:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019205:	8d 48 03             	lea    ecx,[eax+0x3]
c0019208:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001920d:	0f b6 c9             	movzx  ecx,cl
c0019210:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0019216:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019219:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001921d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019221:	8d 50 04             	lea    edx,[eax+0x4]
c0019224:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001922a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001922f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0019236:	66 85 f6             	test   si,si
c0019239:	74 5b                	je     c0019296 <IDE::open(int, int, void*)+0x31e>
c001923b:	0f b6 d2             	movzx  edx,dl
c001923e:	83 c0 05             	add    eax,0x5
c0019241:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019244:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019248:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001924c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019252:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019257:	eb 3d                	jmp    c0019296 <IDE::open(int, int, void*)+0x31e>
c0019259:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001925f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019266:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001926d:	66 05 06 02          	add    ax,0x206
c0019271:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019278:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001927f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019286:	66 05 06 02          	add    ax,0x206
c001928a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019291:	e9 e5 fe ff ff       	jmp    c001917b <IDE::open(int, int, void*)+0x203>
c0019296:	50                   	push   eax
c0019297:	50                   	push   eax
c0019298:	6a 00                	push   0x0
c001929a:	53                   	push   ebx
c001929b:	e8 5e fa ff ff       	call   c0018cfe <IDE::prepareInterrupt(unsigned char)>
c00192a0:	5a                   	pop    edx
c00192a1:	59                   	pop    ecx
c00192a2:	6a 01                	push   0x1
c00192a4:	53                   	push   ebx
c00192a5:	e8 54 fa ff ff       	call   c0018cfe <IDE::prepareInterrupt(unsigned char)>
c00192aa:	83 c4 0c             	add    esp,0xc
c00192ad:	6a 00                	push   0x0
c00192af:	6a 00                	push   0x0
c00192b1:	53                   	push   ebx
c00192b2:	e8 7b fc ff ff       	call   c0018f32 <IDE::enableIRQs(unsigned char, bool)>
c00192b7:	83 c4 0c             	add    esp,0xc
c00192ba:	6a 00                	push   0x0
c00192bc:	6a 01                	push   0x1
c00192be:	53                   	push   ebx
c00192bf:	e8 6e fc ff ff       	call   c0018f32 <IDE::enableIRQs(unsigned char, bool)>
c00192c4:	83 c4 10             	add    esp,0x10
c00192c7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00192ce:	74 34                	je     c0019304 <IDE::open(int, int, void*)+0x38c>
c00192d0:	83 ec 0c             	sub    esp,0xc
c00192d3:	53                   	push   ebx
c00192d4:	6a 01                	push   0x1
c00192d6:	68 fa 8e 01 c0       	push   0xc0018efa
c00192db:	6a 0e                	push   0xe
c00192dd:	53                   	push   ebx
c00192de:	e8 a9 25 ff ff       	call   c000b88c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00192e3:	83 c4 14             	add    esp,0x14
c00192e6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00192ec:	53                   	push   ebx
c00192ed:	6a 01                	push   0x1
c00192ef:	68 16 8f 01 c0       	push   0xc0018f16
c00192f4:	6a 0f                	push   0xf
c00192f6:	53                   	push   ebx
c00192f7:	e8 90 25 ff ff       	call   c000b88c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00192fc:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019302:	eb 38                	jmp    c001933c <IDE::open(int, int, void*)+0x3c4>
c0019304:	83 ec 0c             	sub    esp,0xc
c0019307:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019311:	53                   	push   ebx
c0019312:	6a 00                	push   0x0
c0019314:	68 fa 8e 01 c0       	push   0xc0018efa
c0019319:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001931f:	53                   	push   ebx
c0019320:	e8 67 25 ff ff       	call   c000b88c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019325:	83 c4 14             	add    esp,0x14
c0019328:	53                   	push   ebx
c0019329:	6a 00                	push   0x0
c001932b:	68 16 8f 01 c0       	push   0xc0018f16
c0019330:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0019336:	53                   	push   ebx
c0019337:	e8 50 25 ff ff       	call   c000b88c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001933c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001933e:	83 c4 20             	add    esp,0x20
c0019341:	83 ec 0c             	sub    esp,0xc
c0019344:	53                   	push   ebx
c0019345:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019348:	83 c4 0c             	add    esp,0xc
c001934b:	6a 07                	push   0x7
c001934d:	6a 00                	push   0x0
c001934f:	53                   	push   ebx
c0019350:	e8 8f fa ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c0019355:	83 c4 0c             	add    esp,0xc
c0019358:	6a 07                	push   0x7
c001935a:	6a 01                	push   0x1
c001935c:	53                   	push   ebx
c001935d:	e8 82 fa ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c0019362:	83 c4 0c             	add    esp,0xc
c0019365:	6a 01                	push   0x1
c0019367:	6a 00                	push   0x0
c0019369:	53                   	push   ebx
c001936a:	e8 c3 fb ff ff       	call   c0018f32 <IDE::enableIRQs(unsigned char, bool)>
c001936f:	83 c4 0c             	add    esp,0xc
c0019372:	6a 01                	push   0x1
c0019374:	6a 01                	push   0x1
c0019376:	53                   	push   ebx
c0019377:	e8 b6 fb ff ff       	call   c0018f32 <IDE::enableIRQs(unsigned char, bool)>
c001937c:	83 c4 2c             	add    esp,0x2c
c001937f:	31 c0                	xor    eax,eax
c0019381:	5b                   	pop    ebx
c0019382:	5e                   	pop    esi
c0019383:	5f                   	pop    edi
c0019384:	5d                   	pop    ebp
c0019385:	c3                   	ret    

c0019386 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019386:	55                   	push   ebp
c0019387:	57                   	push   edi
c0019388:	56                   	push   esi
c0019389:	53                   	push   ebx
c001938a:	83 ec 1c             	sub    esp,0x1c
c001938d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019391:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019395:	8d 50 f8             	lea    edx,[eax-0x8]
c0019398:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001939c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00193a0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00193a4:	80 fa 03             	cmp    dl,0x3
c00193a7:	77 5d                	ja     c0019406 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00193a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00193ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00193b1:	0f b6 db             	movzx  ebx,bl
c00193b4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00193b7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00193bb:	83 ca 80             	or     edx,0xffffff80
c00193be:	0f b6 d2             	movzx  edx,dl
c00193c1:	52                   	push   edx
c00193c2:	6a 0c                	push   0xc
c00193c4:	53                   	push   ebx
c00193c5:	56                   	push   esi
c00193c6:	e8 59 f9 ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00193cb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00193d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00193d4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00193d8:	0f b6 c0             	movzx  eax,al
c00193db:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00193df:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00193e1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00193e6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00193ea:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00193ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00193f2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00193fa:	83 c4 2c             	add    esp,0x2c
c00193fd:	5b                   	pop    ebx
c00193fe:	5e                   	pop    esi
c00193ff:	5f                   	pop    edi
c0019400:	5d                   	pop    ebp
c0019401:	e9 1e f9 ff ff       	jmp    c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019406:	3c 07                	cmp    al,0x7
c0019408:	77 10                	ja     c001941a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001940a:	0f b6 db             	movzx  ebx,bl
c001940d:	0f b6 d0             	movzx  edx,al
c0019410:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0019418:	eb 2d                	jmp    c0019447 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001941a:	3c 0d                	cmp    al,0xd
c001941c:	77 13                	ja     c0019431 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001941e:	0f b6 db             	movzx  ebx,bl
c0019421:	0f b6 c0             	movzx  eax,al
c0019424:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001942b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001942f:	eb 16                	jmp    c0019447 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019431:	3c 15                	cmp    al,0x15
c0019433:	77 14                	ja     c0019449 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019435:	0f b6 db             	movzx  ebx,bl
c0019438:	0f b6 c0             	movzx  eax,al
c001943b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019443:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019447:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019449:	83 c4 1c             	add    esp,0x1c
c001944c:	5b                   	pop    ebx
c001944d:	5e                   	pop    esi
c001944e:	5f                   	pop    edi
c001944f:	5d                   	pop    ebp
c0019450:	c3                   	ret    
c0019451:	90                   	nop

c0019452 <IDE::detect()>:
c0019452:	55                   	push   ebp
c0019453:	57                   	push   edi
c0019454:	56                   	push   esi
c0019455:	53                   	push   ebx
c0019456:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001945c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019463:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001946a:	0f 85 97 02 00 00    	jne    c0019707 <IDE::detect()+0x2b5>
c0019470:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019477:	31 f6                	xor    esi,esi
c0019479:	31 ed                	xor    ebp,ebp
c001947b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019483:	89 e8                	mov    eax,ebp
c0019485:	c1 e0 06             	shl    eax,0x6
c0019488:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019490:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019494:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019498:	c1 e0 04             	shl    eax,0x4
c001949b:	83 c8 a0             	or     eax,0xffffffa0
c001949e:	0f b6 c0             	movzx  eax,al
c00194a1:	50                   	push   eax
c00194a2:	6a 06                	push   0x6
c00194a4:	56                   	push   esi
c00194a5:	53                   	push   ebx
c00194a6:	e8 79 f8 ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00194ab:	83 c4 0c             	add    esp,0xc
c00194ae:	6a 0c                	push   0xc
c00194b0:	56                   	push   esi
c00194b1:	53                   	push   ebx
c00194b2:	e8 2d f9 ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c00194b7:	83 c4 0c             	add    esp,0xc
c00194ba:	6a 0c                	push   0xc
c00194bc:	56                   	push   esi
c00194bd:	53                   	push   ebx
c00194be:	e8 21 f9 ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c00194c3:	83 c4 0c             	add    esp,0xc
c00194c6:	6a 0c                	push   0xc
c00194c8:	56                   	push   esi
c00194c9:	53                   	push   ebx
c00194ca:	e8 15 f9 ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c00194cf:	83 c4 0c             	add    esp,0xc
c00194d2:	6a 0c                	push   0xc
c00194d4:	56                   	push   esi
c00194d5:	53                   	push   ebx
c00194d6:	e8 09 f9 ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c00194db:	68 ec 00 00 00       	push   0xec
c00194e0:	6a 07                	push   0x7
c00194e2:	56                   	push   esi
c00194e3:	53                   	push   ebx
c00194e4:	e8 3b f8 ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00194e9:	83 c4 1c             	add    esp,0x1c
c00194ec:	6a 0c                	push   0xc
c00194ee:	56                   	push   esi
c00194ef:	53                   	push   ebx
c00194f0:	e8 ef f8 ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c00194f5:	83 c4 0c             	add    esp,0xc
c00194f8:	6a 0c                	push   0xc
c00194fa:	56                   	push   esi
c00194fb:	53                   	push   ebx
c00194fc:	e8 e3 f8 ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c0019501:	83 c4 0c             	add    esp,0xc
c0019504:	6a 0c                	push   0xc
c0019506:	56                   	push   esi
c0019507:	53                   	push   ebx
c0019508:	e8 d7 f8 ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c001950d:	83 c4 0c             	add    esp,0xc
c0019510:	6a 0c                	push   0xc
c0019512:	56                   	push   esi
c0019513:	53                   	push   ebx
c0019514:	e8 cb f8 ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c0019519:	83 c4 0c             	add    esp,0xc
c001951c:	6a 0c                	push   0xc
c001951e:	56                   	push   esi
c001951f:	53                   	push   ebx
c0019520:	e8 bf f8 ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c0019525:	83 c4 10             	add    esp,0x10
c0019528:	84 c0                	test   al,al
c001952a:	0f 84 5f 01 00 00    	je     c001968f <IDE::detect()+0x23d>
c0019530:	31 ff                	xor    edi,edi
c0019532:	50                   	push   eax
c0019533:	6a 0c                	push   0xc
c0019535:	56                   	push   esi
c0019536:	53                   	push   ebx
c0019537:	e8 a8 f8 ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c001953c:	83 c4 10             	add    esp,0x10
c001953f:	a8 01                	test   al,0x1
c0019541:	0f 85 69 01 00 00    	jne    c00196b0 <IDE::detect()+0x25e>
c0019547:	84 c0                	test   al,al
c0019549:	78 04                	js     c001954f <IDE::detect()+0xfd>
c001954b:	a8 08                	test   al,0x8
c001954d:	75 23                	jne    c0019572 <IDE::detect()+0x120>
c001954f:	47                   	inc    edi
c0019550:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019556:	7e da                	jle    c0019532 <IDE::detect()+0xe0>
c0019558:	83 ec 0c             	sub    esp,0xc
c001955b:	6a 32                	push   0x32
c001955d:	e8 8e a2 ff ff       	call   c00137f0 <milliTenthSleep(unsigned int)>
c0019562:	83 c4 10             	add    esp,0x10
c0019565:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001956b:	75 c5                	jne    c0019532 <IDE::detect()+0xe0>
c001956d:	e9 3e 01 00 00       	jmp    c00196b0 <IDE::detect()+0x25e>
c0019572:	31 c9                	xor    ecx,ecx
c0019574:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019578:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001957c:	83 ec 0c             	sub    esp,0xc
c001957f:	68 80 00 00 00       	push   0x80
c0019584:	57                   	push   edi
c0019585:	6a 00                	push   0x0
c0019587:	56                   	push   esi
c0019588:	53                   	push   ebx
c0019589:	e8 f8 fd ff ff       	call   c0019386 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001958e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019593:	89 e8                	mov    eax,ebp
c0019595:	89 d1                	mov    ecx,edx
c0019597:	c1 e0 06             	shl    eax,0x6
c001959a:	01 d8                	add    eax,ebx
c001959c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00195a3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00195aa:	89 f2                	mov    edx,esi
c00195ac:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00195b2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00195b6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00195bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00195c0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00195c7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00195cf:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00195d6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00195de:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00195e4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00195eb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00195f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00195f5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00195f9:	83 c4 20             	add    esp,0x20
c00195fc:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00195ff:	83 c0 02             	add    eax,0x2
c0019602:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019608:	83 c7 02             	add    edi,0x2
c001960b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001960e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019614:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0019618:	75 e2                	jne    c00195fc <IDE::detect()+0x1aa>
c001961a:	89 e8                	mov    eax,ebp
c001961c:	c1 e0 06             	shl    eax,0x6
c001961f:	01 d8                	add    eax,ebx
c0019621:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0019627:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001962e:	66 c1 ea 09          	shr    dx,0x9
c0019632:	83 e2 01             	and    edx,0x1
c0019635:	84 c9                	test   cl,cl
c0019637:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001963d:	75 22                	jne    c0019661 <IDE::detect()+0x20f>
c001963f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019646:	74 46                	je     c001968e <IDE::detect()+0x23c>
c0019648:	83 ec 0c             	sub    esp,0xc
c001964b:	68 7c 01 00 00       	push   0x17c
c0019650:	e8 b0 e1 fe ff       	call   c0007805 <malloc>
c0019655:	89 c7                	mov    edi,eax
c0019657:	89 04 24             	mov    DWORD PTR [esp],eax
c001965a:	e8 11 05 00 00       	call   c0019b70 <ATA::ATA()>
c001965f:	eb 17                	jmp    c0019678 <IDE::detect()+0x226>
c0019661:	83 ec 0c             	sub    esp,0xc
c0019664:	68 84 01 00 00       	push   0x184
c0019669:	e8 97 e1 fe ff       	call   c0007805 <malloc>
c001966e:	89 c7                	mov    edi,eax
c0019670:	89 04 24             	mov    DWORD PTR [esp],eax
c0019673:	e8 f0 0a 00 00       	call   c001a168 <ATAPI::ATAPI()>
c0019678:	5a                   	pop    edx
c0019679:	59                   	pop    ecx
c001967a:	57                   	push   edi
c001967b:	53                   	push   ebx
c001967c:	e8 5f 22 ff ff       	call   c000b8e0 <Device::addChild(Device*)>
c0019681:	8b 07                	mov    eax,DWORD PTR [edi]
c0019683:	53                   	push   ebx
c0019684:	55                   	push   ebp
c0019685:	6a 00                	push   0x0
c0019687:	57                   	push   edi
c0019688:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001968b:	83 c4 20             	add    esp,0x20
c001968e:	45                   	inc    ebp
c001968f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019694:	74 0d                	je     c00196a3 <IDE::detect()+0x251>
c0019696:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001969e:	e9 e0 fd ff ff       	jmp    c0019483 <IDE::detect()+0x31>
c00196a3:	4e                   	dec    esi
c00196a4:	74 61                	je     c0019707 <IDE::detect()+0x2b5>
c00196a6:	be 01 00 00 00       	mov    esi,0x1
c00196ab:	e9 cb fd ff ff       	jmp    c001947b <IDE::detect()+0x29>
c00196b0:	50                   	push   eax
c00196b1:	6a 04                	push   0x4
c00196b3:	56                   	push   esi
c00196b4:	53                   	push   ebx
c00196b5:	e8 2a f7 ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c00196ba:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00196be:	83 c4 0c             	add    esp,0xc
c00196c1:	6a 05                	push   0x5
c00196c3:	56                   	push   esi
c00196c4:	53                   	push   ebx
c00196c5:	e8 1a f7 ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c00196ca:	83 c4 10             	add    esp,0x10
c00196cd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00196d1:	80 fa 14             	cmp    dl,0x14
c00196d4:	75 04                	jne    c00196da <IDE::detect()+0x288>
c00196d6:	3c eb                	cmp    al,0xeb
c00196d8:	eb 07                	jmp    c00196e1 <IDE::detect()+0x28f>
c00196da:	3c 96                	cmp    al,0x96
c00196dc:	75 b1                	jne    c001968f <IDE::detect()+0x23d>
c00196de:	80 fa 69             	cmp    dl,0x69
c00196e1:	75 ac                	jne    c001968f <IDE::detect()+0x23d>
c00196e3:	68 a1 00 00 00       	push   0xa1
c00196e8:	6a 07                	push   0x7
c00196ea:	56                   	push   esi
c00196eb:	53                   	push   ebx
c00196ec:	e8 33 f6 ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196f1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c00196f8:	e8 f3 a0 ff ff       	call   c00137f0 <milliTenthSleep(unsigned int)>
c00196fd:	83 c4 10             	add    esp,0x10
c0019700:	b1 01                	mov    cl,0x1
c0019702:	e9 6d fe ff ff       	jmp    c0019574 <IDE::detect()+0x122>
c0019707:	81 c4 1c 02 00 00    	add    esp,0x21c
c001970d:	5b                   	pop    ebx
c001970e:	5e                   	pop    esi
c001970f:	5f                   	pop    edi
c0019710:	5d                   	pop    ebp
c0019711:	c3                   	ret    

c0019712 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019712:	55                   	push   ebp
c0019713:	57                   	push   edi
c0019714:	56                   	push   esi
c0019715:	53                   	push   ebx
c0019716:	83 ec 1c             	sub    esp,0x1c
c0019719:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001971d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019721:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019725:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019729:	88 c3                	mov    bl,al
c001972b:	84 c0                	test   al,al
c001972d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019731:	0f 84 81 00 00 00    	je     c00197b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019737:	83 ec 0c             	sub    esp,0xc
c001973a:	68 b7 ef 01 c0       	push   0xc001efb7
c001973f:	e8 5c 0d ff ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c0019744:	83 c4 10             	add    esp,0x10
c0019747:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001974b:	3c 01                	cmp    al,0x1
c001974d:	74 63                	je     c00197b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001974f:	3c 02                	cmp    al,0x2
c0019751:	75 53                	jne    c00197a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019753:	01 f6                	add    esi,esi
c0019755:	09 ee                	or     esi,ebp
c0019757:	50                   	push   eax
c0019758:	89 f0                	mov    eax,esi
c001975a:	6a 01                	push   0x1
c001975c:	0f b6 f0             	movzx  esi,al
c001975f:	c1 e6 06             	shl    esi,0x6
c0019762:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001976a:	50                   	push   eax
c001976b:	57                   	push   edi
c001976c:	e8 73 f6 ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c0019771:	83 c4 10             	add    esp,0x10
c0019774:	a8 01                	test   al,0x1
c0019776:	74 02                	je     c001977a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019778:	b3 07                	mov    bl,0x7
c001977a:	a8 02                	test   al,0x2
c001977c:	74 02                	je     c0019780 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001977e:	b3 03                	mov    bl,0x3
c0019780:	a8 04                	test   al,0x4
c0019782:	74 02                	je     c0019786 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019784:	b3 14                	mov    bl,0x14
c0019786:	a8 08                	test   al,0x8
c0019788:	74 02                	je     c001978c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001978a:	b3 03                	mov    bl,0x3
c001978c:	a8 10                	test   al,0x10
c001978e:	74 02                	je     c0019792 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019790:	b3 15                	mov    bl,0x15
c0019792:	a8 20                	test   al,0x20
c0019794:	74 02                	je     c0019798 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019796:	b3 03                	mov    bl,0x3
c0019798:	a8 40                	test   al,0x40
c001979a:	74 02                	je     c001979e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001979c:	b3 16                	mov    bl,0x16
c001979e:	84 c0                	test   al,al
c00197a0:	79 16                	jns    c00197b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00197a2:	b3 0d                	mov    bl,0xd
c00197a4:	eb 12                	jmp    c00197b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00197a6:	3c 03                	cmp    al,0x3
c00197a8:	74 0c                	je     c00197b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00197aa:	3c 04                	cmp    al,0x4
c00197ac:	75 0a                	jne    c00197b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00197ae:	b3 08                	mov    bl,0x8
c00197b0:	eb 06                	jmp    c00197b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00197b2:	b3 13                	mov    bl,0x13
c00197b4:	eb 02                	jmp    c00197b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00197b6:	b3 17                	mov    bl,0x17
c00197b8:	83 c4 1c             	add    esp,0x1c
c00197bb:	88 d8                	mov    al,bl
c00197bd:	5b                   	pop    ebx
c00197be:	5e                   	pop    esi
c00197bf:	5f                   	pop    edi
c00197c0:	5d                   	pop    ebp
c00197c1:	c3                   	ret    

c00197c2 <IDE::polling(unsigned char, unsigned int)>:
c00197c2:	55                   	push   ebp
c00197c3:	bd 04 00 00 00       	mov    ebp,0x4
c00197c8:	57                   	push   edi
c00197c9:	56                   	push   esi
c00197ca:	53                   	push   ebx
c00197cb:	83 ec 0c             	sub    esp,0xc
c00197ce:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00197d2:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c00197d6:	0f b6 f3             	movzx  esi,bl
c00197d9:	52                   	push   edx
c00197da:	6a 0c                	push   0xc
c00197dc:	56                   	push   esi
c00197dd:	57                   	push   edi
c00197de:	e8 01 f6 ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c00197e3:	83 c4 10             	add    esp,0x10
c00197e6:	4d                   	dec    ebp
c00197e7:	75 ed                	jne    c00197d6 <IDE::polling(unsigned char, unsigned int)+0x14>
c00197e9:	bb a0 86 01 00       	mov    ebx,0x186a0
c00197ee:	50                   	push   eax
c00197ef:	6a 0c                	push   0xc
c00197f1:	56                   	push   esi
c00197f2:	57                   	push   edi
c00197f3:	e8 ec f5 ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c00197f8:	83 c4 10             	add    esp,0x10
c00197fb:	a8 01                	test   al,0x1
c00197fd:	75 17                	jne    c0019816 <IDE::polling(unsigned char, unsigned int)+0x54>
c00197ff:	a8 20                	test   al,0x20
c0019801:	75 0f                	jne    c0019812 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019803:	4b                   	dec    ebx
c0019804:	74 10                	je     c0019816 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019806:	84 c0                	test   al,al
c0019808:	78 e4                	js     c00197ee <IDE::polling(unsigned char, unsigned int)+0x2c>
c001980a:	a8 08                	test   al,0x8
c001980c:	74 e0                	je     c00197ee <IDE::polling(unsigned char, unsigned int)+0x2c>
c001980e:	31 c0                	xor    eax,eax
c0019810:	eb 06                	jmp    c0019818 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019812:	b0 01                	mov    al,0x1
c0019814:	eb 02                	jmp    c0019818 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019816:	b0 02                	mov    al,0x2
c0019818:	83 c4 0c             	add    esp,0xc
c001981b:	5b                   	pop    ebx
c001981c:	5e                   	pop    esi
c001981d:	5f                   	pop    edi
c001981e:	5d                   	pop    ebp
c001981f:	c3                   	ret    

c0019820 <SATABus::close(int, int, void*)>:
c0019820:	31 c0                	xor    eax,eax
c0019822:	c3                   	ret    
c0019823:	90                   	nop

c0019824 <SATABus::detect()>:
c0019824:	c3                   	ret    
c0019825:	90                   	nop

c0019826 <SATABus::SATABus()>:
c0019826:	83 ec 0c             	sub    esp,0xc
c0019829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001982d:	83 ec 08             	sub    esp,0x8
c0019830:	68 f0 ef 01 c0       	push   0xc001eff0
c0019835:	50                   	push   eax
c0019836:	e8 e9 23 ff ff       	call   c000bc24 <HardDiskController::HardDiskController(char const*)>
c001983b:	83 c4 10             	add    esp,0x10
c001983e:	ba 1c f0 01 c0       	mov    edx,0xc001f01c
c0019843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019847:	89 10                	mov    DWORD PTR [eax],edx
c0019849:	83 ec 0c             	sub    esp,0xc
c001984c:	6a 50                	push   0x50
c001984e:	e8 4c e3 fe ff       	call   c0007b9f <Phys::allocateContiguousPages(int)>
c0019853:	83 c4 10             	add    esp,0x10
c0019856:	89 c2                	mov    edx,eax
c0019858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001985c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019862:	83 ec 0c             	sub    esp,0xc
c0019865:	6a 50                	push   0x50
c0019867:	e8 e1 f9 fe ff       	call   c000924d <Virt::allocateKernelVirtualPages(int)>
c001986c:	83 c4 10             	add    esp,0x10
c001986f:	89 c2                	mov    edx,eax
c0019871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019875:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001987b:	a1 70 07 02 c0       	mov    eax,ds:0xc0020770
c0019880:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019884:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001988a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001988e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019894:	83 ec 0c             	sub    esp,0xc
c0019897:	6a 03                	push   0x3
c0019899:	6a 50                	push   0x50
c001989b:	51                   	push   ecx
c001989c:	52                   	push   edx
c001989d:	50                   	push   eax
c001989e:	e8 39 03 ff ff       	call   c0009bdc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00198a3:	83 c4 20             	add    esp,0x20
c00198a6:	90                   	nop
c00198a7:	83 c4 0c             	add    esp,0xc
c00198aa:	c3                   	ret    
c00198ab:	90                   	nop

c00198ac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00198ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198b0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00198b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00198b6:	09 c2                	or     edx,eax
c00198b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00198c2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00198c4:	31 c0                	xor    eax,eax
c00198c6:	c1 e9 08             	shr    ecx,0x8
c00198c9:	83 e1 0f             	and    ecx,0xf
c00198cc:	39 c8                	cmp    eax,ecx
c00198ce:	74 0a                	je     c00198da <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c00198d0:	f6 c2 01             	test   dl,0x1
c00198d3:	74 08                	je     c00198dd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00198d5:	d1 ea                	shr    edx,1
c00198d7:	40                   	inc    eax
c00198d8:	eb f2                	jmp    c00198cc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c00198da:	83 c8 ff             	or     eax,0xffffffff
c00198dd:	c3                   	ret    

c00198de <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00198de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00198e2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00198e5:	89 c2                	mov    edx,eax
c00198e7:	c1 ea 08             	shr    edx,0x8
c00198ea:	83 e2 0f             	and    edx,0xf
c00198ed:	fe ca                	dec    dl
c00198ef:	75 31                	jne    c0019922 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00198f1:	83 e0 0f             	and    eax,0xf
c00198f4:	3c 03                	cmp    al,0x3
c00198f6:	75 2a                	jne    c0019922 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00198f8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00198fb:	b8 02 00 00 00       	mov    eax,0x2
c0019900:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019906:	74 1c                	je     c0019924 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019908:	b8 04 00 00 00       	mov    eax,0x4
c001990d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019913:	74 0f                	je     c0019924 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019915:	31 c0                	xor    eax,eax
c0019917:	83 fa 03             	cmp    edx,0x3
c001991a:	0f 94 c0             	sete   al
c001991d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019921:	c3                   	ret    
c0019922:	31 c0                	xor    eax,eax
c0019924:	c3                   	ret    
c0019925:	90                   	nop

c0019926 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019926:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001992a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001992d:	0f ba e2 0f          	bt     edx,0xf
c0019931:	72 f7                	jb     c001992a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019933:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019936:	83 ca 10             	or     edx,0x10
c0019939:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001993c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001993f:	83 ca 01             	or     edx,0x1
c0019942:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019945:	c3                   	ret    

c0019946 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019946:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001994a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001994d:	83 e2 fe             	and    edx,0xfffffffe
c0019950:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019953:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019956:	83 e2 ef             	and    edx,0xffffffef
c0019959:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001995c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001995f:	0f ba e2 0e          	bt     edx,0xe
c0019963:	72 f7                	jb     c001995c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019965:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019968:	0f ba e2 0f          	bt     edx,0xf
c001996c:	72 ee                	jb     c001995c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001996e:	c3                   	ret    
c001996f:	90                   	nop

c0019970 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019970:	55                   	push   ebp
c0019971:	57                   	push   edi
c0019972:	56                   	push   esi
c0019973:	53                   	push   ebx
c0019974:	83 ec 1c             	sub    esp,0x1c
c0019977:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001997b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001997f:	53                   	push   ebx
c0019980:	56                   	push   esi
c0019981:	e8 c0 ff ff ff       	call   c0019946 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019986:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001998a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019990:	83 ec 0c             	sub    esp,0xc
c0019993:	c1 e5 0a             	shl    ebp,0xa
c0019996:	01 e8                	add    eax,ebp
c0019998:	89 03                	mov    DWORD PTR [ebx],eax
c001999a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001999c:	68 00 04 00 00       	push   0x400
c00199a1:	6a 00                	push   0x0
c00199a3:	50                   	push   eax
c00199a4:	e8 27 6b fe ff       	call   c00004d0 <memset>
c00199a9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00199af:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00199b3:	01 e8                	add    eax,ebp
c00199b5:	83 c4 1c             	add    esp,0x1c
c00199b8:	89 03                	mov    DWORD PTR [ebx],eax
c00199ba:	c1 e2 08             	shl    edx,0x8
c00199bd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00199c4:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c00199ca:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00199d0:	01 f8                	add    eax,edi
c00199d2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00199d5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00199d8:	68 00 01 00 00       	push   0x100
c00199dd:	6a 00                	push   0x0
c00199df:	50                   	push   eax
c00199e0:	e8 eb 6a fe ff       	call   c00004d0 <memset>
c00199e5:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c00199eb:	01 fa                	add    edx,edi
c00199ed:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00199f1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00199f4:	c1 e7 0d             	shl    edi,0xd
c00199f7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00199fe:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019a04:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019a0a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a0e:	31 ff                	xor    edi,edi
c0019a10:	83 c4 10             	add    esp,0x10
c0019a13:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019a19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a1d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019a23:	83 c5 20             	add    ebp,0x20
c0019a26:	01 f8                	add    eax,edi
c0019a28:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019a2b:	52                   	push   edx
c0019a2c:	68 00 01 00 00       	push   0x100
c0019a31:	6a 00                	push   0x0
c0019a33:	50                   	push   eax
c0019a34:	e8 97 6a fe ff       	call   c00004d0 <memset>
c0019a39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a3d:	83 c4 10             	add    esp,0x10
c0019a40:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019a46:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019a4d:	01 f8                	add    eax,edi
c0019a4f:	81 c7 00 01 00 00    	add    edi,0x100
c0019a55:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019a58:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019a5e:	75 b3                	jne    c0019a13 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019a60:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019a67:	50                   	push   eax
c0019a68:	50                   	push   eax
c0019a69:	53                   	push   ebx
c0019a6a:	56                   	push   esi
c0019a6b:	e8 b6 fe ff ff       	call   c0019926 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019a70:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019a77:	83 c4 2c             	add    esp,0x2c
c0019a7a:	5b                   	pop    ebx
c0019a7b:	5e                   	pop    esi
c0019a7c:	5f                   	pop    edi
c0019a7d:	5d                   	pop    ebp
c0019a7e:	c3                   	ret    
c0019a7f:	90                   	nop

c0019a80 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019a80:	55                   	push   ebp
c0019a81:	57                   	push   edi
c0019a82:	56                   	push   esi
c0019a83:	53                   	push   ebx
c0019a84:	31 db                	xor    ebx,ebx
c0019a86:	83 ec 0c             	sub    esp,0xc
c0019a89:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019a8d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019a91:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019a94:	f7 c7 01 00 00 00    	test   edi,0x1
c0019a9a:	74 7a                	je     c0019b16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019a9c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019aa0:	89 d8                	mov    eax,ebx
c0019aa2:	c1 e0 07             	shl    eax,0x7
c0019aa5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019aac:	55                   	push   ebp
c0019aad:	56                   	push   esi
c0019aae:	e8 2b fe ff ff       	call   c00198de <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019ab3:	5a                   	pop    edx
c0019ab4:	83 f8 01             	cmp    eax,0x1
c0019ab7:	59                   	pop    ecx
c0019ab8:	75 21                	jne    c0019adb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019aba:	50                   	push   eax
c0019abb:	53                   	push   ebx
c0019abc:	55                   	push   ebp
c0019abd:	56                   	push   esi
c0019abe:	e8 ad fe ff ff       	call   c0019970 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019ac3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019aca:	e8 36 dd fe ff       	call   c0007805 <malloc>
c0019acf:	89 c5                	mov    ebp,eax
c0019ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ad4:	e8 43 0d 00 00       	call   c001a81c <SATA::SATA()>
c0019ad9:	eb 24                	jmp    c0019aff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019adb:	83 f8 04             	cmp    eax,0x4
c0019ade:	75 36                	jne    c0019b16 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019ae0:	51                   	push   ecx
c0019ae1:	53                   	push   ebx
c0019ae2:	55                   	push   ebp
c0019ae3:	56                   	push   esi
c0019ae4:	e8 87 fe ff ff       	call   c0019970 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019ae9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019af0:	e8 10 dd fe ff       	call   c0007805 <malloc>
c0019af5:	89 c5                	mov    ebp,eax
c0019af7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019afa:	e8 79 10 00 00       	call   c001ab78 <SATAPI::SATAPI()>
c0019aff:	58                   	pop    eax
c0019b00:	5a                   	pop    edx
c0019b01:	55                   	push   ebp
c0019b02:	56                   	push   esi
c0019b03:	e8 d8 1d ff ff       	call   c000b8e0 <Device::addChild(Device*)>
c0019b08:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b0b:	56                   	push   esi
c0019b0c:	6a 00                	push   0x0
c0019b0e:	53                   	push   ebx
c0019b0f:	55                   	push   ebp
c0019b10:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019b13:	83 c4 20             	add    esp,0x20
c0019b16:	d1 ef                	shr    edi,1
c0019b18:	43                   	inc    ebx
c0019b19:	83 fb 20             	cmp    ebx,0x20
c0019b1c:	0f 85 72 ff ff ff    	jne    c0019a94 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019b22:	83 c4 0c             	add    esp,0xc
c0019b25:	5b                   	pop    ebx
c0019b26:	5e                   	pop    esi
c0019b27:	5f                   	pop    edi
c0019b28:	5d                   	pop    ebp
c0019b29:	c3                   	ret    

c0019b2a <SATABus::open(int, int, void*)>:
c0019b2a:	83 ec 14             	sub    esp,0x14
c0019b2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b31:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019b37:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019b3d:	52                   	push   edx
c0019b3e:	50                   	push   eax
c0019b3f:	e8 3c ff ff ff       	call   c0019a80 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019b44:	31 c0                	xor    eax,eax
c0019b46:	83 c4 1c             	add    esp,0x1c
c0019b49:	c3                   	ret    

c0019b4a <ATA::close(int, int, void*)>:
c0019b4a:	83 ec 0c             	sub    esp,0xc
c0019b4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b51:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019b57:	85 c0                	test   eax,eax
c0019b59:	74 0c                	je     c0019b67 <ATA::close(int, int, void*)+0x1d>
c0019b5b:	83 ec 0c             	sub    esp,0xc
c0019b5e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019b60:	50                   	push   eax
c0019b61:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019b64:	83 c4 10             	add    esp,0x10
c0019b67:	31 c0                	xor    eax,eax
c0019b69:	83 c4 0c             	add    esp,0xc
c0019b6c:	c3                   	ret    
c0019b6d:	90                   	nop

c0019b6e <ATA::powerSaving(PowerSavingLevel)>:
c0019b6e:	c3                   	ret    
c0019b6f:	90                   	nop

c0019b70 <ATA::ATA()>:
c0019b70:	83 ec 0c             	sub    esp,0xc
c0019b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b77:	83 ec 04             	sub    esp,0x4
c0019b7a:	68 00 02 00 00       	push   0x200
c0019b7f:	68 e9 f0 01 c0       	push   0xc001f0e9
c0019b84:	50                   	push   eax
c0019b85:	e8 24 21 ff ff       	call   c000bcae <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019b8a:	83 c4 10             	add    esp,0x10
c0019b8d:	ba 5c f0 01 c0       	mov    edx,0xc001f05c
c0019b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b96:	89 10                	mov    DWORD PTR [eax],edx
c0019b98:	90                   	nop
c0019b99:	83 c4 0c             	add    esp,0xc
c0019b9c:	c3                   	ret    
c0019b9d:	90                   	nop

c0019b9e <ATA::flush(bool)>:
c0019b9e:	53                   	push   ebx
c0019b9f:	83 ec 08             	sub    esp,0x8
c0019ba2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019ba7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019bab:	19 c0                	sbb    eax,eax
c0019bad:	83 e0 fd             	and    eax,0xfffffffd
c0019bb0:	05 ea 00 00 00       	add    eax,0xea
c0019bb5:	50                   	push   eax
c0019bb6:	6a 07                	push   0x7
c0019bb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bbf:	50                   	push   eax
c0019bc0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bc6:	e8 59 f1 ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bcb:	83 c4 0c             	add    esp,0xc
c0019bce:	6a 00                	push   0x0
c0019bd0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bd7:	50                   	push   eax
c0019bd8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bde:	e8 df fb ff ff       	call   c00197c2 <IDE::polling(unsigned char, unsigned int)>
c0019be3:	83 c4 18             	add    esp,0x18
c0019be6:	5b                   	pop    ebx
c0019be7:	c3                   	ret    

c0019be8 <ATA::readyForCommand()>:
c0019be8:	56                   	push   esi
c0019be9:	53                   	push   ebx
c0019bea:	53                   	push   ebx
c0019beb:	31 db                	xor    ebx,ebx
c0019bed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019bf1:	51                   	push   ecx
c0019bf2:	6a 0c                	push   0xc
c0019bf4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019bfb:	50                   	push   eax
c0019bfc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019c02:	e8 dd f1 ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c0019c07:	83 c4 10             	add    esp,0x10
c0019c0a:	a8 88                	test   al,0x88
c0019c0c:	74 1f                	je     c0019c2d <ATA::readyForCommand()+0x45>
c0019c0e:	43                   	inc    ebx
c0019c0f:	83 fb 63             	cmp    ebx,0x63
c0019c12:	7e dd                	jle    c0019bf1 <ATA::readyForCommand()+0x9>
c0019c14:	83 ec 0c             	sub    esp,0xc
c0019c17:	6a 0a                	push   0xa
c0019c19:	e8 d2 9b ff ff       	call   c00137f0 <milliTenthSleep(unsigned int)>
c0019c1e:	83 c4 10             	add    esp,0x10
c0019c21:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019c27:	75 c8                	jne    c0019bf1 <ATA::readyForCommand()+0x9>
c0019c29:	31 c0                	xor    eax,eax
c0019c2b:	eb 02                	jmp    c0019c2f <ATA::readyForCommand()+0x47>
c0019c2d:	b0 01                	mov    al,0x1
c0019c2f:	5a                   	pop    edx
c0019c30:	5b                   	pop    ebx
c0019c31:	5e                   	pop    esi
c0019c32:	c3                   	ret    
c0019c33:	90                   	nop

c0019c34 <ATA::access(unsigned long long, int, void*, bool)>:
c0019c34:	55                   	push   ebp
c0019c35:	57                   	push   edi
c0019c36:	56                   	push   esi
c0019c37:	53                   	push   ebx
c0019c38:	83 ec 2c             	sub    esp,0x2c
c0019c3b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019c3f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019c43:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019c47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019c4b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019c4f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019c53:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019c57:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019c5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019c61:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019c67:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019c6b:	c1 e0 06             	shl    eax,0x6
c0019c6e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019c76:	74 5d                	je     c0019cd5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019c78:	89 fa                	mov    edx,edi
c0019c7a:	89 f0                	mov    eax,esi
c0019c7c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019c80:	c1 ea 1c             	shr    edx,0x1c
c0019c83:	89 d1                	mov    ecx,edx
c0019c85:	09 c1                	or     ecx,eax
c0019c87:	74 25                	je     c0019cae <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019c89:	31 ed                	xor    ebp,ebp
c0019c8b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019c92:	89 fa                	mov    edx,edi
c0019c94:	89 f0                	mov    eax,esi
c0019c96:	0f ad d0             	shrd   eax,edx,cl
c0019c99:	d3 ea                	shr    edx,cl
c0019c9b:	f6 c1 20             	test   cl,0x20
c0019c9e:	74 02                	je     c0019ca2 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019ca0:	89 d0                	mov    eax,edx
c0019ca2:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019ca6:	45                   	inc    ebp
c0019ca7:	83 fd 06             	cmp    ebp,0x6
c0019caa:	75 df                	jne    c0019c8b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019cac:	eb 76                	jmp    c0019d24 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019cae:	89 f0                	mov    eax,esi
c0019cb0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019cb5:	89 fa                	mov    edx,edi
c0019cb7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019cbe:	0f ac d0 10          	shrd   eax,edx,0x10
c0019cc2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019cc7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019ccb:	c1 ee 18             	shr    esi,0x18
c0019cce:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019cd3:	eb 56                	jmp    c0019d2b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019cd5:	6a 00                	push   0x0
c0019cd7:	6a 3f                	push   0x3f
c0019cd9:	57                   	push   edi
c0019cda:	56                   	push   esi
c0019cdb:	e8 60 22 00 00       	call   c001bf40 <__umoddi3>
c0019ce0:	83 c4 10             	add    esp,0x10
c0019ce3:	40                   	inc    eax
c0019ce4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019ce8:	6a 00                	push   0x0
c0019cea:	68 f0 03 00 00       	push   0x3f0
c0019cef:	57                   	push   edi
c0019cf0:	56                   	push   esi
c0019cf1:	e8 4a 21 00 00       	call   c001be40 <__udivdi3>
c0019cf6:	83 c4 10             	add    esp,0x10
c0019cf9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019cfe:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019d05:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019d0a:	6a 00                	push   0x0
c0019d0c:	6a 3f                	push   0x3f
c0019d0e:	57                   	push   edi
c0019d0f:	56                   	push   esi
c0019d10:	e8 2b 21 00 00       	call   c001be40 <__udivdi3>
c0019d15:	83 c4 10             	add    esp,0x10
c0019d18:	89 c6                	mov    esi,eax
c0019d1a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019d1f:	83 e6 0f             	and    esi,0xf
c0019d22:	eb 07                	jmp    c0019d2b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019d24:	31 f6                	xor    esi,esi
c0019d26:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019d2b:	bf 01 00 00 00       	mov    edi,0x1
c0019d30:	50                   	push   eax
c0019d31:	6a 00                	push   0x0
c0019d33:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d3a:	50                   	push   eax
c0019d3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019d3f:	e8 ee f1 ff ff       	call   c0018f32 <IDE::enableIRQs(unsigned char, bool)>
c0019d44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d47:	e8 9c fe ff ff       	call   c0019be8 <ATA::readyForCommand()>
c0019d4c:	83 c4 10             	add    esp,0x10
c0019d4f:	84 c0                	test   al,al
c0019d51:	0f 84 4e 02 00 00    	je     c0019fa5 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019d57:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019d5d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019d63:	c1 e0 04             	shl    eax,0x4
c0019d66:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0019d6d:	09 c6                	or     esi,eax
c0019d6f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0019d74:	75 05                	jne    c0019d7b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0019d76:	83 ce a0             	or     esi,0xffffffa0
c0019d79:	eb 03                	jmp    c0019d7e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0019d7b:	83 ce e0             	or     esi,0xffffffe0
c0019d7e:	89 f0                	mov    eax,esi
c0019d80:	0f b6 f0             	movzx  esi,al
c0019d83:	56                   	push   esi
c0019d84:	6a 06                	push   0x6
c0019d86:	51                   	push   ecx
c0019d87:	52                   	push   edx
c0019d88:	e8 97 ef ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019d8d:	83 c4 10             	add    esp,0x10
c0019d90:	6a 00                	push   0x0
c0019d92:	6a 01                	push   0x1
c0019d94:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d9b:	50                   	push   eax
c0019d9c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019da2:	e8 7d ef ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019da7:	83 c4 10             	add    esp,0x10
c0019daa:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019daf:	75 6e                	jne    c0019e1f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0019db1:	6a 00                	push   0x0
c0019db3:	6a 08                	push   0x8
c0019db5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019dbc:	50                   	push   eax
c0019dbd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019dc3:	e8 5c ef ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019dc8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0019dcd:	50                   	push   eax
c0019dce:	6a 09                	push   0x9
c0019dd0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019dd7:	50                   	push   eax
c0019dd8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019dde:	e8 41 ef ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019de3:	83 c4 20             	add    esp,0x20
c0019de6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0019deb:	50                   	push   eax
c0019dec:	6a 0a                	push   0xa
c0019dee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019df5:	50                   	push   eax
c0019df6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019dfc:	e8 23 ef ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e01:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0019e06:	50                   	push   eax
c0019e07:	6a 0b                	push   0xb
c0019e09:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e10:	50                   	push   eax
c0019e11:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e17:	e8 08 ef ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e1c:	83 c4 20             	add    esp,0x20
c0019e1f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0019e24:	50                   	push   eax
c0019e25:	6a 02                	push   0x2
c0019e27:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e2e:	50                   	push   eax
c0019e2f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e35:	e8 ea ee ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e3a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0019e3f:	50                   	push   eax
c0019e40:	6a 03                	push   0x3
c0019e42:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e49:	50                   	push   eax
c0019e4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e50:	e8 cf ee ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e55:	83 c4 20             	add    esp,0x20
c0019e58:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0019e5d:	50                   	push   eax
c0019e5e:	6a 04                	push   0x4
c0019e60:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e67:	50                   	push   eax
c0019e68:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e6e:	e8 b1 ee ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e73:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019e78:	50                   	push   eax
c0019e79:	6a 05                	push   0x5
c0019e7b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e82:	50                   	push   eax
c0019e83:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e89:	e8 96 ee ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e8e:	83 c4 20             	add    esp,0x20
c0019e91:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019e96:	0f 94 c0             	sete   al
c0019e99:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019e9e:	74 09                	je     c0019ea9 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0019ea0:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0019ea7:	eb 07                	jmp    c0019eb0 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0019ea9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0019eb0:	0f b6 c0             	movzx  eax,al
c0019eb3:	50                   	push   eax
c0019eb4:	6a 07                	push   0x7
c0019eb6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ebd:	50                   	push   eax
c0019ebe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ec4:	e8 5b ee ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ec9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019ecd:	83 c4 10             	add    esp,0x10
c0019ed0:	85 f6                	test   esi,esi
c0019ed2:	0f 84 ae 00 00 00    	je     c0019f86 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c0019ed8:	50                   	push   eax
c0019ed9:	6a 01                	push   0x1
c0019edb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ee2:	50                   	push   eax
c0019ee3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ee9:	e8 d4 f8 ff ff       	call   c00197c2 <IDE::polling(unsigned char, unsigned int)>
c0019eee:	83 c4 10             	add    esp,0x10
c0019ef1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0019ef7:	84 c0                	test   al,al
c0019ef9:	74 20                	je     c0019f1b <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c0019efb:	0f b6 f8             	movzx  edi,al
c0019efe:	0f b6 d2             	movzx  edx,dl
c0019f01:	57                   	push   edi
c0019f02:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0019f09:	50                   	push   eax
c0019f0a:	52                   	push   edx
c0019f0b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f11:	e8 fc f7 ff ff       	call   c0019712 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019f16:	e9 87 00 00 00       	jmp    c0019fa2 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c0019f1b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019f20:	74 33                	je     c0019f55 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c0019f22:	31 ed                	xor    ebp,ebp
c0019f24:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0019f28:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0019f2c:	50                   	push   eax
c0019f2d:	50                   	push   eax
c0019f2e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f35:	50                   	push   eax
c0019f36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f3c:	e8 d1 ed ff ff       	call   c0018d12 <IDE::getBase(unsigned char)>
c0019f41:	89 c2                	mov    edx,eax
c0019f43:	89 f8                	mov    eax,edi
c0019f45:	66 ef                	out    dx,ax
c0019f47:	45                   	inc    ebp
c0019f48:	83 c4 10             	add    esp,0x10
c0019f4b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0019f51:	75 d1                	jne    c0019f24 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c0019f53:	eb 23                	jmp    c0019f78 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c0019f55:	0f b6 d2             	movzx  edx,dl
c0019f58:	51                   	push   ecx
c0019f59:	51                   	push   ecx
c0019f5a:	52                   	push   edx
c0019f5b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f61:	e8 ac ed ff ff       	call   c0018d12 <IDE::getBase(unsigned char)>
c0019f66:	b9 00 01 00 00       	mov    ecx,0x100
c0019f6b:	89 c2                	mov    edx,eax
c0019f6d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0019f71:	fc                   	cld    
c0019f72:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0019f75:	83 c4 10             	add    esp,0x10
c0019f78:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0019f80:	4e                   	dec    esi
c0019f81:	e9 4a ff ff ff       	jmp    c0019ed0 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0019f86:	31 ff                	xor    edi,edi
c0019f88:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019f8d:	74 16                	je     c0019fa5 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019f8f:	50                   	push   eax
c0019f90:	50                   	push   eax
c0019f91:	31 c0                	xor    eax,eax
c0019f93:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0019f98:	0f 94 c0             	sete   al
c0019f9b:	50                   	push   eax
c0019f9c:	53                   	push   ebx
c0019f9d:	e8 fc fb ff ff       	call   c0019b9e <ATA::flush(bool)>
c0019fa2:	83 c4 10             	add    esp,0x10
c0019fa5:	83 c4 2c             	add    esp,0x2c
c0019fa8:	89 f8                	mov    eax,edi
c0019faa:	5b                   	pop    ebx
c0019fab:	5e                   	pop    esi
c0019fac:	5f                   	pop    edi
c0019fad:	5d                   	pop    ebp
c0019fae:	c3                   	ret    
c0019faf:	90                   	nop

c0019fb0 <ATA::read(unsigned long long, int, void*)>:
c0019fb0:	57                   	push   edi
c0019fb1:	b8 04 00 00 00       	mov    eax,0x4
c0019fb6:	56                   	push   esi
c0019fb7:	53                   	push   ebx
c0019fb8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019fbc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019fc0:	8d 7a ff             	lea    edi,[edx-0x1]
c0019fc3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019fc7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019fcb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019fd1:	77 25                	ja     c0019ff8 <ATA::read(unsigned long long, int, void*)+0x48>
c0019fd3:	b8 06 00 00 00       	mov    eax,0x6
c0019fd8:	85 f6                	test   esi,esi
c0019fda:	74 1c                	je     c0019ff8 <ATA::read(unsigned long long, int, void*)+0x48>
c0019fdc:	50                   	push   eax
c0019fdd:	50                   	push   eax
c0019fde:	6a 00                	push   0x0
c0019fe0:	56                   	push   esi
c0019fe1:	52                   	push   edx
c0019fe2:	53                   	push   ebx
c0019fe3:	51                   	push   ecx
c0019fe4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019fe8:	e8 47 fc ff ff       	call   c0019c34 <ATA::access(unsigned long long, int, void*, bool)>
c0019fed:	83 c4 20             	add    esp,0x20
c0019ff0:	85 c0                	test   eax,eax
c0019ff2:	0f 95 c0             	setne  al
c0019ff5:	0f b6 c0             	movzx  eax,al
c0019ff8:	5b                   	pop    ebx
c0019ff9:	5e                   	pop    esi
c0019ffa:	5f                   	pop    edi
c0019ffb:	c3                   	ret    

c0019ffc <ATA::write(unsigned long long, int, void*)>:
c0019ffc:	57                   	push   edi
c0019ffd:	b8 04 00 00 00       	mov    eax,0x4
c001a002:	56                   	push   esi
c001a003:	53                   	push   ebx
c001a004:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a008:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a00c:	8d 7a ff             	lea    edi,[edx-0x1]
c001a00f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a013:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a017:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a01d:	77 25                	ja     c001a044 <ATA::write(unsigned long long, int, void*)+0x48>
c001a01f:	b8 06 00 00 00       	mov    eax,0x6
c001a024:	85 f6                	test   esi,esi
c001a026:	74 1c                	je     c001a044 <ATA::write(unsigned long long, int, void*)+0x48>
c001a028:	50                   	push   eax
c001a029:	50                   	push   eax
c001a02a:	6a 01                	push   0x1
c001a02c:	56                   	push   esi
c001a02d:	52                   	push   edx
c001a02e:	53                   	push   ebx
c001a02f:	51                   	push   ecx
c001a030:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a034:	e8 fb fb ff ff       	call   c0019c34 <ATA::access(unsigned long long, int, void*, bool)>
c001a039:	83 c4 20             	add    esp,0x20
c001a03c:	85 c0                	test   eax,eax
c001a03e:	0f 95 c0             	setne  al
c001a041:	0f b6 c0             	movzx  eax,al
c001a044:	5b                   	pop    ebx
c001a045:	5e                   	pop    esi
c001a046:	5f                   	pop    edi
c001a047:	c3                   	ret    

c001a048 <ATA::detectCHS()>:
c001a048:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a04c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a052:	c1 e0 06             	shl    eax,0x6
c001a055:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a05b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a065:	c7 44 24 04 40 f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f040
c001a06d:	e9 91 60 ff ff       	jmp    c0010103 <KePanic(char const*)>

c001a072 <ATA::open(int, int, void*)>:
c001a072:	53                   	push   ebx
c001a073:	83 ec 08             	sub    esp,0x8
c001a076:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a07a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a07e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a082:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a088:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a08e:	c1 e0 06             	shl    eax,0x6
c001a091:	01 d0                	add    eax,edx
c001a093:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a09a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a0a0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a0a7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a0b1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a0b7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a0be:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a0c5:	75 0c                	jne    c001a0d3 <ATA::open(int, int, void*)+0x61>
c001a0c7:	83 ec 0c             	sub    esp,0xc
c001a0ca:	53                   	push   ebx
c001a0cb:	e8 78 ff ff ff       	call   c001a048 <ATA::detectCHS()>
c001a0d0:	83 c4 10             	add    esp,0x10
c001a0d3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a0d9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a0df:	c1 e0 06             	shl    eax,0x6
c001a0e2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a0e9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a0f3:	d1 e8                	shr    eax,1
c001a0f5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a0fb:	6a 04                	push   0x4
c001a0fd:	6a 0c                	push   0xc
c001a0ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a106:	50                   	push   eax
c001a107:	52                   	push   edx
c001a108:	e8 17 ec ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a10d:	90                   	nop
c001a10e:	90                   	nop
c001a10f:	6a 00                	push   0x0
c001a111:	6a 0c                	push   0xc
c001a113:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a11a:	50                   	push   eax
c001a11b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a121:	e8 fe eb ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a126:	83 c4 14             	add    esp,0x14
c001a129:	53                   	push   ebx
c001a12a:	e8 e7 1b ff ff       	call   c000bd16 <PhysicalDisk::startCache()>
c001a12f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a132:	e8 57 2c ff ff       	call   c000cd8e <createPartitionsForDisk(PhysicalDisk*)>
c001a137:	31 c0                	xor    eax,eax
c001a139:	83 c4 18             	add    esp,0x18
c001a13c:	5b                   	pop    ebx
c001a13d:	c3                   	ret    

c001a13e <ATAPI::write(unsigned long long, int, void*)>:
c001a13e:	b8 03 00 00 00       	mov    eax,0x3
c001a143:	c3                   	ret    

c001a144 <ATAPI::close(int, int, void*)>:
c001a144:	83 ec 0c             	sub    esp,0xc
c001a147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a14b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a151:	85 c0                	test   eax,eax
c001a153:	74 0c                	je     c001a161 <ATAPI::close(int, int, void*)+0x1d>
c001a155:	83 ec 0c             	sub    esp,0xc
c001a158:	8b 10                	mov    edx,DWORD PTR [eax]
c001a15a:	50                   	push   eax
c001a15b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a15e:	83 c4 10             	add    esp,0x10
c001a161:	31 c0                	xor    eax,eax
c001a163:	83 c4 0c             	add    esp,0xc
c001a166:	c3                   	ret    
c001a167:	90                   	nop

c001a168 <ATAPI::ATAPI()>:
c001a168:	83 ec 0c             	sub    esp,0xc
c001a16b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a16f:	83 ec 04             	sub    esp,0x4
c001a172:	68 00 08 00 00       	push   0x800
c001a177:	68 89 f1 01 c0       	push   0xc001f189
c001a17c:	50                   	push   eax
c001a17d:	e8 2c 1b ff ff       	call   c000bcae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a182:	83 c4 10             	add    esp,0x10
c001a185:	ba a4 f0 01 c0       	mov    edx,0xc001f0a4
c001a18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a18e:	89 10                	mov    DWORD PTR [eax],edx
c001a190:	90                   	nop
c001a191:	83 c4 0c             	add    esp,0xc
c001a194:	c3                   	ret    
c001a195:	90                   	nop

c001a196 <ATAPI::readyForCommand()>:
c001a196:	56                   	push   esi
c001a197:	53                   	push   ebx
c001a198:	53                   	push   ebx
c001a199:	31 db                	xor    ebx,ebx
c001a19b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a19f:	51                   	push   ecx
c001a1a0:	6a 0c                	push   0xc
c001a1a2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a1a9:	50                   	push   eax
c001a1aa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a1b0:	e8 2f ec ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c001a1b5:	83 c4 10             	add    esp,0x10
c001a1b8:	a8 88                	test   al,0x88
c001a1ba:	74 25                	je     c001a1e1 <ATAPI::readyForCommand()+0x4b>
c001a1bc:	43                   	inc    ebx
c001a1bd:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a1c3:	7e da                	jle    c001a19f <ATAPI::readyForCommand()+0x9>
c001a1c5:	83 ec 0c             	sub    esp,0xc
c001a1c8:	68 5e 01 00 00       	push   0x15e
c001a1cd:	e8 1e 96 ff ff       	call   c00137f0 <milliTenthSleep(unsigned int)>
c001a1d2:	83 c4 10             	add    esp,0x10
c001a1d5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a1db:	75 c2                	jne    c001a19f <ATAPI::readyForCommand()+0x9>
c001a1dd:	31 c0                	xor    eax,eax
c001a1df:	eb 02                	jmp    c001a1e3 <ATAPI::readyForCommand()+0x4d>
c001a1e1:	b0 01                	mov    al,0x1
c001a1e3:	5a                   	pop    edx
c001a1e4:	5b                   	pop    ebx
c001a1e5:	5e                   	pop    esi
c001a1e6:	c3                   	ret    
c001a1e7:	90                   	nop

c001a1e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a1e8:	55                   	push   ebp
c001a1e9:	57                   	push   edi
c001a1ea:	56                   	push   esi
c001a1eb:	53                   	push   ebx
c001a1ec:	83 ec 20             	sub    esp,0x20
c001a1ef:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a1f3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a1f7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a1fb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a1ff:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a203:	6a 01                	push   0x1
c001a205:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a20c:	50                   	push   eax
c001a20d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a213:	e8 1a ed ff ff       	call   c0018f32 <IDE::enableIRQs(unsigned char, bool)>
c001a218:	5e                   	pop    esi
c001a219:	58                   	pop    eax
c001a21a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a221:	50                   	push   eax
c001a222:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a228:	e8 d1 ea ff ff       	call   c0018cfe <IDE::prepareInterrupt(unsigned char)>
c001a22d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a230:	e8 61 ff ff ff       	call   c001a196 <ATAPI::readyForCommand()>
c001a235:	83 c4 10             	add    esp,0x10
c001a238:	84 c0                	test   al,al
c001a23a:	75 0a                	jne    c001a246 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a23c:	bb 01 00 00 00       	mov    ebx,0x1
c001a241:	e9 57 02 00 00       	jmp    c001a49d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a246:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a24c:	c1 e0 04             	shl    eax,0x4
c001a24f:	0f b6 c0             	movzx  eax,al
c001a252:	50                   	push   eax
c001a253:	6a 06                	push   0x6
c001a255:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a25c:	50                   	push   eax
c001a25d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a263:	e8 bc ea ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a268:	6a 00                	push   0x0
c001a26a:	6a 01                	push   0x1
c001a26c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a273:	50                   	push   eax
c001a274:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a27a:	e8 a5 ea ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a27f:	83 c4 20             	add    esp,0x20
c001a282:	0f b6 c3             	movzx  eax,bl
c001a285:	0f b6 df             	movzx  ebx,bh
c001a288:	50                   	push   eax
c001a289:	6a 04                	push   0x4
c001a28b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a292:	50                   	push   eax
c001a293:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a299:	e8 86 ea ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a29e:	53                   	push   ebx
c001a29f:	6a 05                	push   0x5
c001a2a1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a2a8:	50                   	push   eax
c001a2a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a2af:	e8 70 ea ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a2b4:	83 c4 20             	add    esp,0x20
c001a2b7:	68 a0 00 00 00       	push   0xa0
c001a2bc:	6a 07                	push   0x7
c001a2be:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a2c5:	50                   	push   eax
c001a2c6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a2cc:	e8 53 ea ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a2d1:	83 c4 0c             	add    esp,0xc
c001a2d4:	6a 01                	push   0x1
c001a2d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a2dd:	50                   	push   eax
c001a2de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a2e4:	e8 d9 f4 ff ff       	call   c00197c2 <IDE::polling(unsigned char, unsigned int)>
c001a2e9:	83 c4 10             	add    esp,0x10
c001a2ec:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a2f2:	84 c0                	test   al,al
c001a2f4:	74 23                	je     c001a319 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a2f6:	0f b6 d8             	movzx  ebx,al
c001a2f9:	0f b6 d2             	movzx  edx,dl
c001a2fc:	53                   	push   ebx
c001a2fd:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a304:	50                   	push   eax
c001a305:	52                   	push   edx
c001a306:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a30c:	e8 01 f4 ff ff       	call   c0019712 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a311:	83 c4 10             	add    esp,0x10
c001a314:	e9 84 01 00 00       	jmp    c001a49d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a319:	0f b6 d2             	movzx  edx,dl
c001a31c:	53                   	push   ebx
c001a31d:	53                   	push   ebx
c001a31e:	52                   	push   edx
c001a31f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a325:	e8 e8 e9 ff ff       	call   c0018d12 <IDE::getBase(unsigned char)>
c001a32a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a32e:	b9 06 00 00 00       	mov    ecx,0x6
c001a333:	89 c2                	mov    edx,eax
c001a335:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a338:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a33c:	83 c4 10             	add    esp,0x10
c001a33f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a345:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a34c:	85 db                	test   ebx,ebx
c001a34e:	0f 84 ec 00 00 00    	je     c001a440 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a354:	51                   	push   ecx
c001a355:	51                   	push   ecx
c001a356:	52                   	push   edx
c001a357:	50                   	push   eax
c001a358:	e8 35 eb ff ff       	call   c0018e92 <IDE::waitInterrupt(unsigned char)>
c001a35d:	83 c4 10             	add    esp,0x10
c001a360:	84 c0                	test   al,al
c001a362:	0f 84 d4 fe ff ff    	je     c001a23c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a368:	56                   	push   esi
c001a369:	56                   	push   esi
c001a36a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a371:	50                   	push   eax
c001a372:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a378:	e8 81 e9 ff ff       	call   c0018cfe <IDE::prepareInterrupt(unsigned char)>
c001a37d:	83 c4 0c             	add    esp,0xc
c001a380:	6a 04                	push   0x4
c001a382:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a389:	50                   	push   eax
c001a38a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a390:	e8 4f ea ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c001a395:	83 c4 0c             	add    esp,0xc
c001a398:	89 c6                	mov    esi,eax
c001a39a:	6a 05                	push   0x5
c001a39c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a3a3:	50                   	push   eax
c001a3a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a3aa:	e8 35 ea ff ff       	call   c0018de4 <IDE::read(unsigned char, unsigned char)>
c001a3af:	89 f1                	mov    ecx,esi
c001a3b1:	0f b6 c0             	movzx  eax,al
c001a3b4:	0f b6 f1             	movzx  esi,cl
c001a3b7:	c1 e0 08             	shl    eax,0x8
c001a3ba:	09 c6                	or     esi,eax
c001a3bc:	d1 fe                	sar    esi,1
c001a3be:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a3c2:	83 c4 10             	add    esp,0x10
c001a3c5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a3ca:	74 41                	je     c001a40d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a3cc:	31 c9                	xor    ecx,ecx
c001a3ce:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a3d4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a3db:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a3df:	75 0a                	jne    c001a3eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a3e1:	01 c9                	add    ecx,ecx
c001a3e3:	01 cd                	add    ebp,ecx
c001a3e5:	4b                   	dec    ebx
c001a3e6:	e9 54 ff ff ff       	jmp    c001a33f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a3eb:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a3f0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a3f4:	51                   	push   ecx
c001a3f5:	51                   	push   ecx
c001a3f6:	52                   	push   edx
c001a3f7:	50                   	push   eax
c001a3f8:	e8 15 e9 ff ff       	call   c0018d12 <IDE::getBase(unsigned char)>
c001a3fd:	89 c2                	mov    edx,eax
c001a3ff:	89 f0                	mov    eax,esi
c001a401:	66 ef                	out    dx,ax
c001a403:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a407:	83 c4 10             	add    esp,0x10
c001a40a:	41                   	inc    ecx
c001a40b:	eb c1                	jmp    c001a3ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a40d:	31 f6                	xor    esi,esi
c001a40f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a415:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a41c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a420:	75 06                	jne    c001a428 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a422:	01 f6                	add    esi,esi
c001a424:	01 f5                	add    ebp,esi
c001a426:	eb bd                	jmp    c001a3e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a428:	51                   	push   ecx
c001a429:	51                   	push   ecx
c001a42a:	52                   	push   edx
c001a42b:	50                   	push   eax
c001a42c:	e8 e1 e8 ff ff       	call   c0018d12 <IDE::getBase(unsigned char)>
c001a431:	89 c2                	mov    edx,eax
c001a433:	66 ed                	in     ax,dx
c001a435:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a43a:	83 c4 10             	add    esp,0x10
c001a43d:	46                   	inc    esi
c001a43e:	eb cf                	jmp    c001a40f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a440:	51                   	push   ecx
c001a441:	51                   	push   ecx
c001a442:	52                   	push   edx
c001a443:	50                   	push   eax
c001a444:	e8 49 ea ff ff       	call   c0018e92 <IDE::waitInterrupt(unsigned char)>
c001a449:	83 c4 10             	add    esp,0x10
c001a44c:	84 c0                	test   al,al
c001a44e:	0f 84 e8 fd ff ff    	je     c001a23c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a454:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a459:	52                   	push   edx
c001a45a:	52                   	push   edx
c001a45b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a462:	50                   	push   eax
c001a463:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a469:	e8 90 e8 ff ff       	call   c0018cfe <IDE::prepareInterrupt(unsigned char)>
c001a46e:	83 c4 10             	add    esp,0x10
c001a471:	50                   	push   eax
c001a472:	50                   	push   eax
c001a473:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a47a:	50                   	push   eax
c001a47b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a481:	e8 8c e8 ff ff       	call   c0018d12 <IDE::getBase(unsigned char)>
c001a486:	8d 50 07             	lea    edx,[eax+0x7]
c001a489:	ec                   	in     al,dx
c001a48a:	83 c4 10             	add    esp,0x10
c001a48d:	a8 88                	test   al,0x88
c001a48f:	74 0a                	je     c001a49b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a491:	4b                   	dec    ebx
c001a492:	75 dd                	jne    c001a471 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a494:	bb 02 00 00 00       	mov    ebx,0x2
c001a499:	eb 02                	jmp    c001a49d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a49b:	31 db                	xor    ebx,ebx
c001a49d:	83 c4 1c             	add    esp,0x1c
c001a4a0:	89 d8                	mov    eax,ebx
c001a4a2:	5b                   	pop    ebx
c001a4a3:	5e                   	pop    esi
c001a4a4:	5f                   	pop    edi
c001a4a5:	5d                   	pop    ebp
c001a4a6:	c3                   	ret    
c001a4a7:	90                   	nop

c001a4a8 <ATAPI::diskRemoved()>:
c001a4a8:	53                   	push   ebx
c001a4a9:	83 ec 14             	sub    esp,0x14
c001a4ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a4b0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a4b7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a4bd:	e8 4c 26 ff ff       	call   c000cb0e <LogicalDisk::unmount()>
c001a4c2:	58                   	pop    eax
c001a4c3:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a4c9:	e8 86 2f ff ff       	call   c000d454 <VCache::writeWriteBuffer()>
c001a4ce:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a4d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a4d8:	83 c4 18             	add    esp,0x18
c001a4db:	5b                   	pop    ebx
c001a4dc:	e9 63 2f ff ff       	jmp    c000d444 <VCache::invalidateReadBuffer()>
c001a4e1:	90                   	nop

c001a4e2 <ATAPI::eject()>:
c001a4e2:	57                   	push   edi
c001a4e3:	b9 03 00 00 00       	mov    ecx,0x3
c001a4e8:	53                   	push   ebx
c001a4e9:	83 ec 14             	sub    esp,0x14
c001a4ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a4f0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a4f4:	fc                   	cld    
c001a4f5:	31 c0                	xor    eax,eax
c001a4f7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a4f9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a4fe:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a503:	50                   	push   eax
c001a504:	50                   	push   eax
c001a505:	6a 00                	push   0x0
c001a507:	6a 00                	push   0x0
c001a509:	6a 00                	push   0x0
c001a50b:	6a 02                	push   0x2
c001a50d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a511:	50                   	push   eax
c001a512:	53                   	push   ebx
c001a513:	e8 d0 fc ff ff       	call   c001a1e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a518:	83 c4 14             	add    esp,0x14
c001a51b:	53                   	push   ebx
c001a51c:	e8 87 ff ff ff       	call   c001a4a8 <ATAPI::diskRemoved()>
c001a521:	83 c4 24             	add    esp,0x24
c001a524:	31 c0                	xor    eax,eax
c001a526:	5b                   	pop    ebx
c001a527:	5f                   	pop    edi
c001a528:	c3                   	ret    
c001a529:	90                   	nop

c001a52a <ATAPI::diskInserted()>:
c001a52a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a52e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a535:	c3                   	ret    

c001a536 <ATAPI::detectMedia()>:
c001a536:	56                   	push   esi
c001a537:	53                   	push   ebx
c001a538:	83 ec 28             	sub    esp,0x28
c001a53b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a53f:	6a 0c                	push   0xc
c001a541:	6a 00                	push   0x0
c001a543:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a547:	56                   	push   esi
c001a548:	e8 83 5f fe ff       	call   c00004d0 <memset>
c001a54d:	58                   	pop    eax
c001a54e:	5a                   	pop    edx
c001a54f:	6a 00                	push   0x0
c001a551:	6a 00                	push   0x0
c001a553:	6a 00                	push   0x0
c001a555:	6a 00                	push   0x0
c001a557:	56                   	push   esi
c001a558:	53                   	push   ebx
c001a559:	e8 8a fc ff ff       	call   c001a1e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a55e:	83 c4 1c             	add    esp,0x1c
c001a561:	6a 0c                	push   0xc
c001a563:	6a 00                	push   0x0
c001a565:	56                   	push   esi
c001a566:	e8 65 5f fe ff       	call   c00004d0 <memset>
c001a56b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a570:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a575:	59                   	pop    ecx
c001a576:	58                   	pop    eax
c001a577:	6a 01                	push   0x1
c001a579:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a57d:	50                   	push   eax
c001a57e:	6a 00                	push   0x0
c001a580:	6a 12                	push   0x12
c001a582:	56                   	push   esi
c001a583:	53                   	push   ebx
c001a584:	e8 5f fc ff ff       	call   c001a1e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a589:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a58d:	83 c4 20             	add    esp,0x20
c001a590:	83 e0 7f             	and    eax,0x7f
c001a593:	3c 70                	cmp    al,0x70
c001a595:	74 15                	je     c001a5ac <ATAPI::detectMedia()+0x76>
c001a597:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a59e:	75 0c                	jne    c001a5ac <ATAPI::detectMedia()+0x76>
c001a5a0:	83 ec 0c             	sub    esp,0xc
c001a5a3:	53                   	push   ebx
c001a5a4:	e8 81 ff ff ff       	call   c001a52a <ATAPI::diskInserted()>
c001a5a9:	83 c4 10             	add    esp,0x10
c001a5ac:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a5b0:	83 e0 0f             	and    eax,0xf
c001a5b3:	3c 02                	cmp    al,0x2
c001a5b5:	75 1b                	jne    c001a5d2 <ATAPI::detectMedia()+0x9c>
c001a5b7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a5bc:	75 2d                	jne    c001a5eb <ATAPI::detectMedia()+0xb5>
c001a5be:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a5c5:	74 24                	je     c001a5eb <ATAPI::detectMedia()+0xb5>
c001a5c7:	83 ec 0c             	sub    esp,0xc
c001a5ca:	53                   	push   ebx
c001a5cb:	e8 d8 fe ff ff       	call   c001a4a8 <ATAPI::diskRemoved()>
c001a5d0:	eb 16                	jmp    c001a5e8 <ATAPI::detectMedia()+0xb2>
c001a5d2:	84 c0                	test   al,al
c001a5d4:	75 15                	jne    c001a5eb <ATAPI::detectMedia()+0xb5>
c001a5d6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a5dd:	75 0c                	jne    c001a5eb <ATAPI::detectMedia()+0xb5>
c001a5df:	83 ec 0c             	sub    esp,0xc
c001a5e2:	53                   	push   ebx
c001a5e3:	e8 42 ff ff ff       	call   c001a52a <ATAPI::diskInserted()>
c001a5e8:	83 c4 10             	add    esp,0x10
c001a5eb:	83 c4 24             	add    esp,0x24
c001a5ee:	5b                   	pop    ebx
c001a5ef:	5e                   	pop    esi
c001a5f0:	c3                   	ret    
c001a5f1:	90                   	nop

c001a5f2 <ATAPI::open(int, int, void*)>:
c001a5f2:	56                   	push   esi
c001a5f3:	53                   	push   ebx
c001a5f4:	50                   	push   eax
c001a5f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a5f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a5fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a601:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a607:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a60d:	c1 e0 06             	shl    eax,0x6
c001a610:	01 d0                	add    eax,edx
c001a612:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a619:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a61f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a626:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a630:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a636:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a63d:	6a 04                	push   0x4
c001a63f:	6a 0c                	push   0xc
c001a641:	51                   	push   ecx
c001a642:	52                   	push   edx
c001a643:	e8 dc e6 ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a648:	90                   	nop
c001a649:	90                   	nop
c001a64a:	6a 00                	push   0x0
c001a64c:	6a 0c                	push   0xc
c001a64e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a655:	50                   	push   eax
c001a656:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a65c:	e8 c3 e6 ff ff       	call   c0018d24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a661:	83 c4 14             	add    esp,0x14
c001a664:	68 74 01 00 00       	push   0x174
c001a669:	e8 97 d1 fe ff       	call   c0007805 <malloc>
c001a66e:	83 c4 0c             	add    esp,0xc
c001a671:	89 c6                	mov    esi,eax
c001a673:	6a 00                	push   0x0
c001a675:	68 ff ff ff 7f       	push   0x7fffffff
c001a67a:	6a 00                	push   0x0
c001a67c:	6a 00                	push   0x0
c001a67e:	53                   	push   ebx
c001a67f:	68 74 f2 01 c0       	push   0xc001f274
c001a684:	50                   	push   eax
c001a685:	e8 d0 22 ff ff       	call   c000c95a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a68a:	83 c4 14             	add    esp,0x14
c001a68d:	56                   	push   esi
c001a68e:	e8 7d 23 ff ff       	call   c000ca10 <LogicalDisk::assignDriveLetter()>
c001a693:	5a                   	pop    edx
c001a694:	0f be c0             	movsx  eax,al
c001a697:	59                   	pop    ecx
c001a698:	50                   	push   eax
c001a699:	68 8c f0 01 c0       	push   0xc001f08c
c001a69e:	e8 fd fd fe ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c001a6a3:	58                   	pop    eax
c001a6a4:	5a                   	pop    edx
c001a6a5:	56                   	push   esi
c001a6a6:	53                   	push   ebx
c001a6a7:	e8 34 12 ff ff       	call   c000b8e0 <Device::addChild(Device*)>
c001a6ac:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a6b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a6b5:	e8 5c 16 ff ff       	call   c000bd16 <PhysicalDisk::startCache()>
c001a6ba:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a6c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a6c4:	e8 6d fe ff ff       	call   c001a536 <ATAPI::detectMedia()>
c001a6c9:	83 c4 14             	add    esp,0x14
c001a6cc:	31 c0                	xor    eax,eax
c001a6ce:	5b                   	pop    ebx
c001a6cf:	5e                   	pop    esi
c001a6d0:	c3                   	ret    
c001a6d1:	90                   	nop

c001a6d2 <ATAPI::read(unsigned long long, int, void*)>:
c001a6d2:	55                   	push   ebp
c001a6d3:	57                   	push   edi
c001a6d4:	56                   	push   esi
c001a6d5:	53                   	push   ebx
c001a6d6:	83 ec 1c             	sub    esp,0x1c
c001a6d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a6dd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a6e1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a6e5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a6ec:	74 3c                	je     c001a72a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a6ee:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a6f2:	b9 03 00 00 00       	mov    ecx,0x3
c001a6f7:	fc                   	cld    
c001a6f8:	31 c0                	xor    eax,eax
c001a6fa:	0f ce                	bswap  esi
c001a6fc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a6fe:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a703:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a707:	89 e8                	mov    eax,ebp
c001a709:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a70d:	50                   	push   eax
c001a70e:	50                   	push   eax
c001a70f:	55                   	push   ebp
c001a710:	c1 e5 0b             	shl    ebp,0xb
c001a713:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a717:	6a 00                	push   0x0
c001a719:	55                   	push   ebp
c001a71a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a71e:	50                   	push   eax
c001a71f:	53                   	push   ebx
c001a720:	e8 c3 fa ff ff       	call   c001a1e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a725:	83 c4 20             	add    esp,0x20
c001a728:	eb 1a                	jmp    c001a744 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a72a:	83 ec 0c             	sub    esp,0xc
c001a72d:	53                   	push   ebx
c001a72e:	e8 03 fe ff ff       	call   c001a536 <ATAPI::detectMedia()>
c001a733:	83 c4 10             	add    esp,0x10
c001a736:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a73d:	75 af                	jne    c001a6ee <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a73f:	b8 02 00 00 00       	mov    eax,0x2
c001a744:	83 c4 1c             	add    esp,0x1c
c001a747:	5b                   	pop    ebx
c001a748:	5e                   	pop    esi
c001a749:	5f                   	pop    edi
c001a74a:	5d                   	pop    ebp
c001a74b:	c3                   	ret    

c001a74c <SATA::close(int, int, void*)>:
c001a74c:	83 ec 0c             	sub    esp,0xc
c001a74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a753:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a759:	85 c0                	test   eax,eax
c001a75b:	74 0c                	je     c001a769 <SATA::close(int, int, void*)+0x1d>
c001a75d:	83 ec 0c             	sub    esp,0xc
c001a760:	8b 10                	mov    edx,DWORD PTR [eax]
c001a762:	50                   	push   eax
c001a763:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a766:	83 c4 10             	add    esp,0x10
c001a769:	31 c0                	xor    eax,eax
c001a76b:	83 c4 0c             	add    esp,0xc
c001a76e:	c3                   	ret    
c001a76f:	90                   	nop

c001a770 <SATA::powerSaving(PowerSavingLevel)>:
c001a770:	c3                   	ret    
c001a771:	90                   	nop

c001a772 <SATA::open(int, int, void*)>:
c001a772:	56                   	push   esi
c001a773:	53                   	push   ebx
c001a774:	50                   	push   eax
c001a775:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a779:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a77d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a787:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a78d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a797:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a79b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a7a5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a7ab:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a7b2:	e8 2a d3 fe ff       	call   c0007ae1 <Phys::allocatePage()>
c001a7b7:	89 c6                	mov    esi,eax
c001a7b9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a7bf:	81 c6 00 10 00 00    	add    esi,0x1000
c001a7c5:	e8 17 d3 fe ff       	call   c0007ae1 <Phys::allocatePage()>
c001a7ca:	39 c6                	cmp    esi,eax
c001a7cc:	74 10                	je     c001a7de <SATA::open(int, int, void*)+0x6c>
c001a7ce:	83 ec 0c             	sub    esp,0xc
c001a7d1:	68 d4 f0 01 c0       	push   0xc001f0d4
c001a7d6:	e8 28 59 ff ff       	call   c0010103 <KePanic(char const*)>
c001a7db:	83 c4 10             	add    esp,0x10
c001a7de:	83 ec 0c             	sub    esp,0xc
c001a7e1:	6a 02                	push   0x2
c001a7e3:	e8 65 ea fe ff       	call   c000924d <Virt::allocateKernelVirtualPages(int)>
c001a7e8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a7ee:	6a 03                	push   0x3
c001a7f0:	50                   	push   eax
c001a7f1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001a7f7:	ff 35 70 07 02 c0    	push   DWORD PTR ds:0xc0020770
c001a7fd:	e8 e0 f0 fe ff       	call   c00098e2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a802:	83 c4 14             	add    esp,0x14
c001a805:	53                   	push   ebx
c001a806:	e8 0b 15 ff ff       	call   c000bd16 <PhysicalDisk::startCache()>
c001a80b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a80e:	e8 7b 25 ff ff       	call   c000cd8e <createPartitionsForDisk(PhysicalDisk*)>
c001a813:	83 c4 14             	add    esp,0x14
c001a816:	31 c0                	xor    eax,eax
c001a818:	5b                   	pop    ebx
c001a819:	5e                   	pop    esi
c001a81a:	c3                   	ret    
c001a81b:	90                   	nop

c001a81c <SATA::SATA()>:
c001a81c:	83 ec 0c             	sub    esp,0xc
c001a81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a823:	83 ec 04             	sub    esp,0x4
c001a826:	68 00 02 00 00       	push   0x200
c001a82b:	68 e8 f0 01 c0       	push   0xc001f0e8
c001a830:	50                   	push   eax
c001a831:	e8 78 14 ff ff       	call   c000bcae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a836:	83 c4 10             	add    esp,0x10
c001a839:	ba 58 f1 01 c0       	mov    edx,0xc001f158
c001a83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a842:	89 10                	mov    DWORD PTR [eax],edx
c001a844:	90                   	nop
c001a845:	83 c4 0c             	add    esp,0xc
c001a848:	c3                   	ret    
c001a849:	90                   	nop

c001a84a <SATA::access(unsigned long long, int, void*, bool)>:
c001a84a:	55                   	push   ebp
c001a84b:	57                   	push   edi
c001a84c:	56                   	push   esi
c001a84d:	53                   	push   ebx
c001a84e:	83 ec 2c             	sub    esp,0x2c
c001a851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a855:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a859:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a85d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a861:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a865:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001a86a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a86e:	7e 10                	jle    c001a880 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001a870:	83 ec 0c             	sub    esp,0xc
c001a873:	68 f8 f0 01 c0       	push   0xc001f0f8
c001a878:	e8 86 58 ff ff       	call   c0010103 <KePanic(char const*)>
c001a87d:	83 c4 10             	add    esp,0x10
c001a880:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a886:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001a88c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a892:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a896:	89 d0                	mov    eax,edx
c001a898:	c1 e0 07             	shl    eax,0x7
c001a89b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a89f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a8a9:	51                   	push   ecx
c001a8aa:	8d 42 02             	lea    eax,[edx+0x2]
c001a8ad:	51                   	push   ecx
c001a8ae:	c1 e0 07             	shl    eax,0x7
c001a8b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a8b5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a8b9:	50                   	push   eax
c001a8ba:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001a8c0:	e8 e7 ef ff ff       	call   c00198ac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a8c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a8c9:	83 c4 10             	add    esp,0x10
c001a8cc:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a8d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a8d5:	0f 84 4f 01 00 00    	je     c001aa2a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a8db:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a8df:	c1 e0 09             	shl    eax,0x9
c001a8e2:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a8e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a8eb:	74 0e                	je     c001a8fb <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001a8ed:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001a8f3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a8f7:	89 c1                	mov    ecx,eax
c001a8f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a8ff:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a905:	8d 42 02             	lea    eax,[edx+0x2]
c001a908:	c1 e0 07             	shl    eax,0x7
c001a90b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a90f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a911:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a917:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a91d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a921:	c1 e1 05             	shl    ecx,0x5
c001a924:	01 c8                	add    eax,ecx
c001a926:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a92a:	83 e1 01             	and    ecx,0x1
c001a92d:	89 ce                	mov    esi,ecx
c001a92f:	8a 08                	mov    cl,BYTE PTR [eax]
c001a931:	c1 e6 06             	shl    esi,0x6
c001a934:	83 e1 bf             	and    ecx,0xffffffbf
c001a937:	09 f1                	or     ecx,esi
c001a939:	88 08                	mov    BYTE PTR [eax],cl
c001a93b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a93d:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a943:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a949:	89 08                	mov    DWORD PTR [eax],ecx
c001a94b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a951:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a957:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a95d:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a960:	50                   	push   eax
c001a961:	68 90 00 00 00       	push   0x90
c001a966:	6a 00                	push   0x0
c001a968:	56                   	push   esi
c001a969:	e8 62 5b fe ff       	call   c00004d0 <memset>
c001a96e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a974:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a978:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a97e:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a982:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a986:	83 c4 10             	add    esp,0x10
c001a989:	48                   	dec    eax
c001a98a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a98f:	89 c1                	mov    ecx,eax
c001a991:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a997:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a99c:	09 c8                	or     eax,ecx
c001a99e:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a9a4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a9a7:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a9ae:	66 25 00 7f          	and    ax,0x7f00
c001a9b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a9b6:	66 0d 27 80          	or     ax,0x8027
c001a9ba:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a9bf:	66 89 06             	mov    WORD PTR [esi],ax
c001a9c2:	19 c0                	sbb    eax,eax
c001a9c4:	83 e0 f0             	and    eax,0xfffffff0
c001a9c7:	83 c0 35             	add    eax,0x35
c001a9ca:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a9cd:	89 e8                	mov    eax,ebp
c001a9cf:	c1 e8 10             	shr    eax,0x10
c001a9d2:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a9d5:	89 e8                	mov    eax,ebp
c001a9d7:	c1 e8 18             	shr    eax,0x18
c001a9da:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a9dd:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a9e1:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a9e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a9e8:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a9eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a9ef:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a9f3:	89 d6                	mov    esi,edx
c001a9f5:	31 c0                	xor    eax,eax
c001a9f7:	c1 e6 07             	shl    esi,0x7
c001a9fa:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a9fe:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001aa04:	80 e1 88             	and    cl,0x88
c001aa07:	74 0a                	je     c001aa13 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001aa09:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001aa0e:	74 0a                	je     c001aa1a <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001aa10:	40                   	inc    eax
c001aa11:	eb eb                	jmp    c001a9fe <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001aa13:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001aa18:	75 17                	jne    c001aa31 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001aa1a:	83 ec 0c             	sub    esp,0xc
c001aa1d:	68 31 f1 01 c0       	push   0xc001f131
c001aa22:	e8 79 fa fe ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c001aa27:	83 c4 10             	add    esp,0x10
c001aa2a:	b8 01 00 00 00       	mov    eax,0x1
c001aa2f:	eb 5d                	jmp    c001aa8e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001aa31:	b8 01 00 00 00       	mov    eax,0x1
c001aa36:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001aa3a:	c1 e2 07             	shl    edx,0x7
c001aa3d:	d3 e0                	shl    eax,cl
c001aa3f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001aa43:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001aa49:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001aa4f:	85 c8                	test   eax,ecx
c001aa51:	74 16                	je     c001aa69 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001aa53:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001aa59:	0f ba e1 1e          	bt     ecx,0x1e
c001aa5d:	73 ea                	jae    c001aa49 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001aa5f:	83 ec 0c             	sub    esp,0xc
c001aa62:	68 3f f1 01 c0       	push   0xc001f13f
c001aa67:	eb b9                	jmp    c001aa22 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001aa69:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001aa6f:	0f ba e0 1e          	bt     eax,0x1e
c001aa73:	72 b5                	jb     c001aa2a <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001aa75:	31 c0                	xor    eax,eax
c001aa77:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001aa7c:	75 10                	jne    c001aa8e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001aa7e:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001aa84:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001aa88:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aa8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa8e:	83 c4 2c             	add    esp,0x2c
c001aa91:	5b                   	pop    ebx
c001aa92:	5e                   	pop    esi
c001aa93:	5f                   	pop    edi
c001aa94:	5d                   	pop    ebp
c001aa95:	c3                   	ret    

c001aa96 <SATA::read(unsigned long long, int, void*)>:
c001aa96:	57                   	push   edi
c001aa97:	b8 04 00 00 00       	mov    eax,0x4
c001aa9c:	56                   	push   esi
c001aa9d:	53                   	push   ebx
c001aa9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001aaa2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aaa6:	8d 7a ff             	lea    edi,[edx-0x1]
c001aaa9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aaad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001aab1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001aab7:	77 25                	ja     c001aade <SATA::read(unsigned long long, int, void*)+0x48>
c001aab9:	b8 06 00 00 00       	mov    eax,0x6
c001aabe:	85 f6                	test   esi,esi
c001aac0:	74 1c                	je     c001aade <SATA::read(unsigned long long, int, void*)+0x48>
c001aac2:	50                   	push   eax
c001aac3:	50                   	push   eax
c001aac4:	6a 00                	push   0x0
c001aac6:	56                   	push   esi
c001aac7:	52                   	push   edx
c001aac8:	53                   	push   ebx
c001aac9:	51                   	push   ecx
c001aaca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aace:	e8 77 fd ff ff       	call   c001a84a <SATA::access(unsigned long long, int, void*, bool)>
c001aad3:	83 c4 20             	add    esp,0x20
c001aad6:	85 c0                	test   eax,eax
c001aad8:	0f 95 c0             	setne  al
c001aadb:	0f b6 c0             	movzx  eax,al
c001aade:	5b                   	pop    ebx
c001aadf:	5e                   	pop    esi
c001aae0:	5f                   	pop    edi
c001aae1:	c3                   	ret    

c001aae2 <SATA::write(unsigned long long, int, void*)>:
c001aae2:	55                   	push   ebp
c001aae3:	b8 04 00 00 00       	mov    eax,0x4
c001aae8:	57                   	push   edi
c001aae9:	56                   	push   esi
c001aaea:	53                   	push   ebx
c001aaeb:	83 ec 0c             	sub    esp,0xc
c001aaee:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aaf2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aaf6:	8d 73 ff             	lea    esi,[ebx-0x1]
c001aaf9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001aafd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ab01:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ab07:	77 3d                	ja     c001ab46 <SATA::write(unsigned long long, int, void*)+0x64>
c001ab09:	b8 06 00 00 00       	mov    eax,0x6
c001ab0e:	85 ed                	test   ebp,ebp
c001ab10:	74 34                	je     c001ab46 <SATA::write(unsigned long long, int, void*)+0x64>
c001ab12:	c1 e3 09             	shl    ebx,0x9
c001ab15:	01 eb                	add    ebx,ebp
c001ab17:	89 d6                	mov    esi,edx
c001ab19:	89 cf                	mov    edi,ecx
c001ab1b:	83 c6 01             	add    esi,0x1
c001ab1e:	83 d7 00             	adc    edi,0x0
c001ab21:	50                   	push   eax
c001ab22:	50                   	push   eax
c001ab23:	6a 01                	push   0x1
c001ab25:	55                   	push   ebp
c001ab26:	81 c5 00 02 00 00    	add    ebp,0x200
c001ab2c:	6a 01                	push   0x1
c001ab2e:	51                   	push   ecx
c001ab2f:	52                   	push   edx
c001ab30:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab34:	e8 11 fd ff ff       	call   c001a84a <SATA::access(unsigned long long, int, void*, bool)>
c001ab39:	83 c4 20             	add    esp,0x20
c001ab3c:	89 f2                	mov    edx,esi
c001ab3e:	89 f9                	mov    ecx,edi
c001ab40:	39 dd                	cmp    ebp,ebx
c001ab42:	75 d3                	jne    c001ab17 <SATA::write(unsigned long long, int, void*)+0x35>
c001ab44:	31 c0                	xor    eax,eax
c001ab46:	83 c4 0c             	add    esp,0xc
c001ab49:	5b                   	pop    ebx
c001ab4a:	5e                   	pop    esi
c001ab4b:	5f                   	pop    edi
c001ab4c:	5d                   	pop    ebp
c001ab4d:	c3                   	ret    

c001ab4e <SATAPI::write(unsigned long long, int, void*)>:
c001ab4e:	b8 03 00 00 00       	mov    eax,0x3
c001ab53:	c3                   	ret    

c001ab54 <SATAPI::close(int, int, void*)>:
c001ab54:	83 ec 0c             	sub    esp,0xc
c001ab57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab5b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ab61:	85 c0                	test   eax,eax
c001ab63:	74 0c                	je     c001ab71 <SATAPI::close(int, int, void*)+0x1d>
c001ab65:	83 ec 0c             	sub    esp,0xc
c001ab68:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab6a:	50                   	push   eax
c001ab6b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ab6e:	83 c4 10             	add    esp,0x10
c001ab71:	31 c0                	xor    eax,eax
c001ab73:	83 c4 0c             	add    esp,0xc
c001ab76:	c3                   	ret    
c001ab77:	90                   	nop

c001ab78 <SATAPI::SATAPI()>:
c001ab78:	83 ec 0c             	sub    esp,0xc
c001ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab7f:	83 ec 04             	sub    esp,0x4
c001ab82:	68 00 08 00 00       	push   0x800
c001ab87:	68 88 f1 01 c0       	push   0xc001f188
c001ab8c:	50                   	push   eax
c001ab8d:	e8 1c 11 ff ff       	call   c000bcae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ab92:	83 c4 10             	add    esp,0x10
c001ab95:	ba e8 f2 01 c0       	mov    edx,0xc001f2e8
c001ab9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab9e:	89 10                	mov    DWORD PTR [eax],edx
c001aba0:	90                   	nop
c001aba1:	83 c4 0c             	add    esp,0xc
c001aba4:	c3                   	ret    
c001aba5:	90                   	nop

c001aba6 <SATAPI::diskRemoved()>:
c001aba6:	c3                   	ret    
c001aba7:	90                   	nop

c001aba8 <SATAPI::diskInserted()>:
c001aba8:	83 ec 18             	sub    esp,0x18
c001abab:	68 94 f1 01 c0       	push   0xc001f194
c001abb0:	e8 eb f8 fe ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c001abb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abb9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001abc0:	83 c4 1c             	add    esp,0x1c
c001abc3:	c3                   	ret    

c001abc4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001abc4:	55                   	push   ebp
c001abc5:	57                   	push   edi
c001abc6:	56                   	push   esi
c001abc7:	53                   	push   ebx
c001abc8:	83 ec 38             	sub    esp,0x38
c001abcb:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001abcf:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001abd3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001abd7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001abdb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001abdf:	68 ac f1 01 c0       	push   0xc001f1ac
c001abe4:	e8 b7 f8 fe ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c001abe9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001abef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001abf5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001abf9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001abff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac03:	c1 e0 07             	shl    eax,0x7
c001ac06:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001ac0a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ac0e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ac18:	58                   	pop    eax
c001ac19:	5a                   	pop    edx
c001ac1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac1e:	8d 58 02             	lea    ebx,[eax+0x2]
c001ac21:	c1 e3 07             	shl    ebx,0x7
c001ac24:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001ac28:	53                   	push   ebx
c001ac29:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ac2f:	e8 78 ec ff ff       	call   c00198ac <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ac34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ac38:	83 c4 10             	add    esp,0x10
c001ac3b:	b8 01 00 00 00       	mov    eax,0x1
c001ac40:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ac45:	0f 84 4c 02 00 00    	je     c001ae97 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001ac4b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ac51:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac53:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ac59:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ac5f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac63:	c1 e1 05             	shl    ecx,0x5
c001ac66:	01 c8                	add    eax,ecx
c001ac68:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ac6a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001ac70:	81 c9 25 00 01 00    	or     ecx,0x10025
c001ac76:	89 08                	mov    DWORD PTR [eax],ecx
c001ac78:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ac7e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001ac84:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001ac8a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001ac8d:	8d 7b 40             	lea    edi,[ebx+0x40]
c001ac90:	50                   	push   eax
c001ac91:	68 90 00 00 00       	push   0x90
c001ac96:	6a 00                	push   0x0
c001ac98:	53                   	push   ebx
c001ac99:	e8 32 58 fe ff       	call   c00004d0 <memset>
c001ac9e:	b9 0c 00 00 00       	mov    ecx,0xc
c001aca3:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001aca7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aca9:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001acaf:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001acb3:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001acb9:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001acbd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001acc1:	48                   	dec    eax
c001acc2:	25 ff ff 3f 00       	and    eax,0x3fffff
c001acc7:	89 c1                	mov    ecx,eax
c001acc9:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001accf:	25 00 00 c0 ff       	and    eax,0xffc00000
c001acd4:	09 c8                	or     eax,ecx
c001acd6:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001acdc:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001acdf:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001ace6:	66 25 00 7f          	and    ax,0x7f00
c001acea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001acee:	66 0d 27 80          	or     ax,0x8027
c001acf2:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001acf6:	66 89 03             	mov    WORD PTR [ebx],ax
c001acf9:	89 d0                	mov    eax,edx
c001acfb:	c1 ea 18             	shr    edx,0x18
c001acfe:	c1 e8 10             	shr    eax,0x10
c001ad01:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001ad04:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001ad07:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001ad0b:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001ad0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad12:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001ad15:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ad19:	83 c4 10             	add    esp,0x10
c001ad1c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001ad20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ad24:	31 c0                	xor    eax,eax
c001ad26:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001ad2c:	80 e1 88             	and    cl,0x88
c001ad2f:	74 0a                	je     c001ad3b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001ad31:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad36:	74 0a                	je     c001ad42 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001ad38:	40                   	inc    eax
c001ad39:	eb eb                	jmp    c001ad26 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001ad3b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad40:	75 16                	jne    c001ad58 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001ad42:	83 ec 0c             	sub    esp,0xc
c001ad45:	68 c6 f1 01 c0       	push   0xc001f1c6
c001ad4a:	e8 51 f7 fe ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c001ad4f:	5f                   	pop    edi
c001ad50:	5d                   	pop    ebp
c001ad51:	68 db f1 01 c0       	push   0xc001f1db
c001ad56:	eb 4f                	jmp    c001ada7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001ad58:	be 01 00 00 00       	mov    esi,0x1
c001ad5d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ad61:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ad65:	d3 e6                	shl    esi,cl
c001ad67:	c1 e7 07             	shl    edi,0x7
c001ad6a:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001ad70:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001ad75:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001ad79:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001ad7f:	85 c6                	test   esi,eax
c001ad81:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001ad87:	0f 84 cb 00 00 00    	je     c001ae58 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001ad8d:	0f ba e0 1e          	bt     eax,0x1e
c001ad91:	73 2c                	jae    c001adbf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001ad93:	83 ec 0c             	sub    esp,0xc
c001ad96:	68 ed f1 01 c0       	push   0xc001f1ed
c001ad9b:	e8 00 f7 fe ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c001ada0:	5b                   	pop    ebx
c001ada1:	5e                   	pop    esi
c001ada2:	68 00 f2 01 c0       	push   0xc001f200
c001ada7:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c001adad:	e8 d0 d9 fe ff       	call   c0008782 <VgaText::puts(char const*)>
c001adb2:	83 c4 10             	add    esp,0x10
c001adb5:	b8 01 00 00 00       	mov    eax,0x1
c001adba:	e9 d8 00 00 00       	jmp    c001ae97 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001adbf:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001adc5:	83 f8 0d             	cmp    eax,0xd
c001adc8:	77 0a                	ja     c001add4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001adca:	83 ec 0c             	sub    esp,0xc
c001adcd:	68 c8 00 00 00       	push   0xc8
c001add2:	eb 28                	jmp    c001adfc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001add4:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001adda:	83 f8 0d             	cmp    eax,0xd
c001addd:	77 0a                	ja     c001ade9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001addf:	83 ec 0c             	sub    esp,0xc
c001ade2:	68 58 02 00 00       	push   0x258
c001ade7:	eb 13                	jmp    c001adfc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001ade9:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001adef:	83 f8 06             	cmp    eax,0x6
c001adf2:	77 10                	ja     c001ae04 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001adf4:	83 ec 0c             	sub    esp,0xc
c001adf7:	68 dc 05 00 00       	push   0x5dc
c001adfc:	e8 ef 89 ff ff       	call   c00137f0 <milliTenthSleep(unsigned int)>
c001ae01:	83 c4 10             	add    esp,0x10
c001ae04:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ae08:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001ae0b:	75 06                	jne    c001ae13 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001ae0d:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001ae11:	74 15                	je     c001ae28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001ae13:	83 fb 06             	cmp    ebx,0x6
c001ae16:	77 10                	ja     c001ae28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001ae18:	83 ec 0c             	sub    esp,0xc
c001ae1b:	68 c4 09 00 00       	push   0x9c4
c001ae20:	e8 cb 89 ff ff       	call   c00137f0 <milliTenthSleep(unsigned int)>
c001ae25:	83 c4 10             	add    esp,0x10
c001ae28:	43                   	inc    ebx
c001ae29:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001ae2f:	0f 85 44 ff ff ff    	jne    c001ad79 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001ae35:	51                   	push   ecx
c001ae36:	51                   	push   ecx
c001ae37:	68 11 f2 01 c0       	push   0xc001f211
c001ae3c:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c001ae42:	e8 3b d9 fe ff       	call   c0008782 <VgaText::puts(char const*)>
c001ae47:	c7 04 24 21 f2 01 c0 	mov    DWORD PTR [esp],0xc001f221
c001ae4e:	e8 4d f6 fe ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c001ae53:	e9 5a ff ff ff       	jmp    c001adb2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001ae58:	0f ba e0 1e          	bt     eax,0x1e
c001ae5c:	73 19                	jae    c001ae77 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001ae5e:	83 ec 0c             	sub    esp,0xc
c001ae61:	68 35 f2 01 c0       	push   0xc001f235
c001ae66:	e8 35 f6 fe ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c001ae6b:	58                   	pop    eax
c001ae6c:	5a                   	pop    edx
c001ae6d:	68 4a f2 01 c0       	push   0xc001f24a
c001ae72:	e9 30 ff ff ff       	jmp    c001ada7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001ae77:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ae7c:	74 17                	je     c001ae95 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001ae7e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ae83:	74 10                	je     c001ae95 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001ae85:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ae8b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ae8f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ae93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae95:	31 c0                	xor    eax,eax
c001ae97:	83 c4 2c             	add    esp,0x2c
c001ae9a:	5b                   	pop    ebx
c001ae9b:	5e                   	pop    esi
c001ae9c:	5f                   	pop    edi
c001ae9d:	5d                   	pop    ebp
c001ae9e:	c3                   	ret    
c001ae9f:	90                   	nop

c001aea0 <SATAPI::eject()>:
c001aea0:	57                   	push   edi
c001aea1:	b9 03 00 00 00       	mov    ecx,0x3
c001aea6:	83 ec 18             	sub    esp,0x18
c001aea9:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aead:	fc                   	cld    
c001aeae:	31 c0                	xor    eax,eax
c001aeb0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aeb2:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001aeb7:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001aebc:	50                   	push   eax
c001aebd:	6a 00                	push   0x0
c001aebf:	6a 00                	push   0x0
c001aec1:	6a 00                	push   0x0
c001aec3:	6a 00                	push   0x0
c001aec5:	6a 02                	push   0x2
c001aec7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aecb:	50                   	push   eax
c001aecc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aed0:	e8 ef fc ff ff       	call   c001abc4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001aed5:	31 c0                	xor    eax,eax
c001aed7:	83 c4 38             	add    esp,0x38
c001aeda:	5f                   	pop    edi
c001aedb:	c3                   	ret    

c001aedc <SATAPI::detectMedia()>:
c001aedc:	53                   	push   ebx
c001aedd:	83 ec 14             	sub    esp,0x14
c001aee0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001aee4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001aeea:	e8 65 25 ff ff       	call   c000d454 <VCache::writeWriteBuffer()>
c001aeef:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001aef5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aef9:	83 c4 18             	add    esp,0x18
c001aefc:	5b                   	pop    ebx
c001aefd:	e9 42 25 ff ff       	jmp    c000d444 <VCache::invalidateReadBuffer()>

c001af02 <SATAPI::open(int, int, void*)>:
c001af02:	56                   	push   esi
c001af03:	53                   	push   ebx
c001af04:	51                   	push   ecx
c001af05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af0d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001af17:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001af1d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001af27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af2b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001af35:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001af3b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001af42:	e8 9a cb fe ff       	call   c0007ae1 <Phys::allocatePage()>
c001af47:	89 c6                	mov    esi,eax
c001af49:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001af4f:	81 c6 00 10 00 00    	add    esi,0x1000
c001af55:	e8 87 cb fe ff       	call   c0007ae1 <Phys::allocatePage()>
c001af5a:	39 c6                	cmp    esi,eax
c001af5c:	74 10                	je     c001af6e <SATAPI::open(int, int, void*)+0x6c>
c001af5e:	83 ec 0c             	sub    esp,0xc
c001af61:	68 5d f2 01 c0       	push   0xc001f25d
c001af66:	e8 98 51 ff ff       	call   c0010103 <KePanic(char const*)>
c001af6b:	83 c4 10             	add    esp,0x10
c001af6e:	83 ec 0c             	sub    esp,0xc
c001af71:	6a 02                	push   0x2
c001af73:	e8 d5 e2 fe ff       	call   c000924d <Virt::allocateKernelVirtualPages(int)>
c001af78:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001af7e:	6a 03                	push   0x3
c001af80:	50                   	push   eax
c001af81:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001af87:	ff 35 70 07 02 c0    	push   DWORD PTR ds:0xc0020770
c001af8d:	e8 50 e9 fe ff       	call   c00098e2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001af92:	83 c4 14             	add    esp,0x14
c001af95:	68 74 01 00 00       	push   0x174
c001af9a:	e8 66 c8 fe ff       	call   c0007805 <malloc>
c001af9f:	83 c4 0c             	add    esp,0xc
c001afa2:	89 c6                	mov    esi,eax
c001afa4:	6a 00                	push   0x0
c001afa6:	68 ff ff ff 7f       	push   0x7fffffff
c001afab:	6a 00                	push   0x0
c001afad:	6a 00                	push   0x0
c001afaf:	53                   	push   ebx
c001afb0:	68 73 f2 01 c0       	push   0xc001f273
c001afb5:	50                   	push   eax
c001afb6:	e8 9f 19 ff ff       	call   c000c95a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001afbb:	83 c4 14             	add    esp,0x14
c001afbe:	56                   	push   esi
c001afbf:	e8 4c 1a ff ff       	call   c000ca10 <LogicalDisk::assignDriveLetter()>
c001afc4:	5a                   	pop    edx
c001afc5:	0f be c0             	movsx  eax,al
c001afc8:	59                   	pop    ecx
c001afc9:	50                   	push   eax
c001afca:	68 8c f0 01 c0       	push   0xc001f08c
c001afcf:	e8 cc f4 fe ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c001afd4:	58                   	pop    eax
c001afd5:	5a                   	pop    edx
c001afd6:	56                   	push   esi
c001afd7:	53                   	push   ebx
c001afd8:	e8 03 09 ff ff       	call   c000b8e0 <Device::addChild(Device*)>
c001afdd:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001afe3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afe6:	e8 2b 0d ff ff       	call   c000bd16 <PhysicalDisk::startCache()>
c001afeb:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001aff2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aff5:	e8 e2 fe ff ff       	call   c001aedc <SATAPI::detectMedia()>
c001affa:	83 c4 14             	add    esp,0x14
c001affd:	31 c0                	xor    eax,eax
c001afff:	5b                   	pop    ebx
c001b000:	5e                   	pop    esi
c001b001:	c3                   	ret    

c001b002 <SATAPI::read(unsigned long long, int, void*)>:
c001b002:	57                   	push   edi
c001b003:	56                   	push   esi
c001b004:	53                   	push   ebx
c001b005:	83 ec 3c             	sub    esp,0x3c
c001b008:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b00c:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b010:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b014:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b018:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b01c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b020:	68 81 f2 01 c0       	push   0xc001f281
c001b025:	e8 76 f4 fe ff       	call   c000a4a0 <Dbg::kprintf(char const*, ...)>
c001b02a:	83 c4 10             	add    esp,0x10
c001b02d:	83 fe 04             	cmp    esi,0x4
c001b030:	7e 10                	jle    c001b042 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b032:	83 ec 0c             	sub    esp,0xc
c001b035:	68 92 f2 01 c0       	push   0xc001f292
c001b03a:	e8 c4 50 ff ff       	call   c0010103 <KePanic(char const*)>
c001b03f:	83 c4 10             	add    esp,0x10
c001b042:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b048:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b04e:	51                   	push   ecx
c001b04f:	50                   	push   eax
c001b050:	83 c0 02             	add    eax,0x2
c001b053:	c1 e0 07             	shl    eax,0x7
c001b056:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b05c:	50                   	push   eax
c001b05d:	52                   	push   edx
c001b05e:	e8 0d e9 ff ff       	call   c0019970 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b063:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b067:	b9 03 00 00 00       	mov    ecx,0x3
c001b06c:	fc                   	cld    
c001b06d:	31 c0                	xor    eax,eax
c001b06f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b071:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b076:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b07b:	83 c4 0c             	add    esp,0xc
c001b07e:	6a 00                	push   0x0
c001b080:	6a 00                	push   0x0
c001b082:	6a 00                	push   0x0
c001b084:	6a 00                	push   0x0
c001b086:	6a 02                	push   0x2
c001b088:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b08c:	50                   	push   eax
c001b08d:	53                   	push   ebx
c001b08e:	e8 31 fb ff ff       	call   c001abc4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b093:	83 c4 20             	add    esp,0x20
c001b096:	85 c0                	test   eax,eax
c001b098:	74 27                	je     c001b0c1 <SATAPI::read(unsigned long long, int, void*)+0xbf>
c001b09a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b09e:	50                   	push   eax
c001b09f:	50                   	push   eax
c001b0a0:	68 bc f2 01 c0       	push   0xc001f2bc
c001b0a5:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c001b0ab:	e8 d2 d6 fe ff       	call   c0008782 <VgaText::puts(char const*)>
c001b0b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b0b3:	e8 24 fe ff ff       	call   c001aedc <SATAPI::detectMedia()>
c001b0b8:	58                   	pop    eax
c001b0b9:	5a                   	pop    edx
c001b0ba:	68 c4 f2 01 c0       	push   0xc001f2c4
c001b0bf:	eb 69                	jmp    c001b12a <SATAPI::read(unsigned long long, int, void*)+0x128>
c001b0c1:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b0c5:	b9 03 00 00 00       	mov    ecx,0x3
c001b0ca:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b0cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0d0:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b0d5:	0f c8                	bswap  eax
c001b0d7:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b0db:	89 f0                	mov    eax,esi
c001b0dd:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b0e1:	57                   	push   edi
c001b0e2:	56                   	push   esi
c001b0e3:	c1 e6 0b             	shl    esi,0xb
c001b0e6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b0ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b0ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b0f2:	56                   	push   esi
c001b0f3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b0f7:	50                   	push   eax
c001b0f8:	53                   	push   ebx
c001b0f9:	e8 c6 fa ff ff       	call   c001abc4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b0fe:	83 c4 20             	add    esp,0x20
c001b101:	85 c0                	test   eax,eax
c001b103:	74 37                	je     c001b13c <SATAPI::read(unsigned long long, int, void*)+0x13a>
c001b105:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b109:	50                   	push   eax
c001b10a:	50                   	push   eax
c001b10b:	68 ce f2 01 c0       	push   0xc001f2ce
c001b110:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c001b116:	e8 67 d6 fe ff       	call   c0008782 <VgaText::puts(char const*)>
c001b11b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b11e:	e8 b9 fd ff ff       	call   c001aedc <SATAPI::detectMedia()>
c001b123:	5a                   	pop    edx
c001b124:	59                   	pop    ecx
c001b125:	68 d6 f2 01 c0       	push   0xc001f2d6
c001b12a:	ff 35 c4 06 02 c0    	push   DWORD PTR ds:0xc00206c4
c001b130:	e8 4d d6 fe ff       	call   c0008782 <VgaText::puts(char const*)>
c001b135:	83 c4 10             	add    esp,0x10
c001b138:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b13c:	83 c4 30             	add    esp,0x30
c001b13f:	5b                   	pop    ebx
c001b140:	5e                   	pop    esi
c001b141:	5f                   	pop    edi
c001b142:	c3                   	ret    
c001b143:	90                   	nop

c001b144 <IOAPIC::close(int, int, void*)>:
c001b144:	b8 00 00 00 00       	mov    eax,0x0
c001b149:	c3                   	ret    

c001b14a <apicGetBase()>:
c001b14a:	55                   	push   ebp
c001b14b:	89 e5                	mov    ebp,esp
c001b14d:	83 ec 18             	sub    esp,0x18
c001b150:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c001b155:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b15b:	83 e0 08             	and    eax,0x8
c001b15e:	84 c0                	test   al,al
c001b160:	75 07                	jne    c001b169 <apicGetBase()+0x1f>
c001b162:	b8 00 00 00 00       	mov    eax,0x0
c001b167:	eb 21                	jmp    c001b18a <apicGetBase()+0x40>
c001b169:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c001b16e:	83 ec 08             	sub    esp,0x8
c001b171:	6a 1b                	push   0x1b
c001b173:	50                   	push   eax
c001b174:	e8 c5 bc fe ff       	call   c0006e3e <Computer::rdmsr(unsigned int)>
c001b179:	83 c4 10             	add    esp,0x10
c001b17c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b17f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b182:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b185:	25 00 00 ff ff       	and    eax,0xffff0000
c001b18a:	c9                   	leave  
c001b18b:	c3                   	ret    

c001b18c <IOAPIC::IOAPIC()>:
c001b18c:	83 ec 0c             	sub    esp,0xc
c001b18f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b193:	83 ec 08             	sub    esp,0x8
c001b196:	68 18 f3 01 c0       	push   0xc001f318
c001b19b:	50                   	push   eax
c001b19c:	e8 d7 08 ff ff       	call   c000ba78 <Device::Device(char const*)>
c001b1a1:	83 c4 10             	add    esp,0x10
c001b1a4:	ba 28 f3 01 c0       	mov    edx,0xc001f328
c001b1a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1ad:	89 10                	mov    DWORD PTR [eax],edx
c001b1af:	90                   	nop
c001b1b0:	83 c4 0c             	add    esp,0xc
c001b1b3:	c3                   	ret    

c001b1b4 <apicOpen()>:
c001b1b4:	55                   	push   ebp
c001b1b5:	89 e5                	mov    ebp,esp
c001b1b7:	53                   	push   ebx
c001b1b8:	83 ec 34             	sub    esp,0x34
c001b1bb:	a0 60 45 02 c0       	mov    al,ds:0xc0024560
c001b1c0:	83 f0 01             	xor    eax,0x1
c001b1c3:	84 c0                	test   al,al
c001b1c5:	0f 84 9d 00 00 00    	je     c001b268 <apicOpen()+0xb4>
c001b1cb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b1cf:	a0 40 2f 02 c0       	mov    al,ds:0xc0022f40
c001b1d4:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b1d7:	0f 83 84 00 00 00    	jae    c001b261 <apicOpen()+0xad>
c001b1dd:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b1e4:	83 ec 0c             	sub    esp,0xc
c001b1e7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b1ea:	e8 16 c6 fe ff       	call   c0007805 <malloc>
c001b1ef:	83 c4 10             	add    esp,0x10
c001b1f2:	89 c3                	mov    ebx,eax
c001b1f4:	83 ec 0c             	sub    esp,0xc
c001b1f7:	53                   	push   ebx
c001b1f8:	e8 8f ff ff ff       	call   c001b18c <IOAPIC::IOAPIC()>
c001b1fd:	83 c4 10             	add    esp,0x10
c001b200:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b203:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b206:	25 ff 00 00 00       	and    eax,0xff
c001b20b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b20e:	89 14 85 40 45 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbac0],edx
c001b215:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c001b21a:	40                   	inc    eax
c001b21b:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c001b220:	a1 78 06 02 c0       	mov    eax,ds:0xc0020678
c001b225:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b22b:	83 ec 08             	sub    esp,0x8
c001b22e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b231:	50                   	push   eax
c001b232:	e8 a9 06 ff ff       	call   c000b8e0 <Device::addChild(Device*)>
c001b237:	83 c4 10             	add    esp,0x10
c001b23a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b23d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b23f:	83 c0 08             	add    eax,0x8
c001b242:	8b 10                	mov    edx,DWORD PTR [eax]
c001b244:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b247:	25 ff 00 00 00       	and    eax,0xff
c001b24c:	6a 00                	push   0x0
c001b24e:	6a 00                	push   0x0
c001b250:	50                   	push   eax
c001b251:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b254:	ff d2                	call   edx
c001b256:	83 c4 10             	add    esp,0x10
c001b259:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b25c:	e9 6e ff ff ff       	jmp    c001b1cf <apicOpen()+0x1b>
c001b261:	c6 05 60 45 02 c0 01 	mov    BYTE PTR ds:0xc0024560,0x1
c001b268:	e8 dd fe ff ff       	call   c001b14a <apicGetBase()>
c001b26d:	05 f0 00 00 00       	add    eax,0xf0
c001b272:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b275:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b278:	8b 00                	mov    eax,DWORD PTR [eax]
c001b27a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b27d:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b284:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b28b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b28e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b291:	89 10                	mov    DWORD PTR [eax],edx
c001b293:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b29a:	a1 90 2e 02 c0       	mov    eax,ds:0xc0022e90
c001b29f:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b2a2:	7d 70                	jge    c001b314 <apicOpen()+0x160>
c001b2a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b2a7:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c001b2ae:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b2b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b2b4:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c001b2bb:	c1 e8 08             	shr    eax,0x8
c001b2be:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b2c2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b2c5:	8b 04 85 a0 2e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd160]
c001b2cc:	c1 e8 18             	shr    eax,0x18
c001b2cf:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b2d2:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b2d6:	75 37                	jne    c001b30f <apicOpen()+0x15b>
c001b2d8:	e8 6d fe ff ff       	call   c001b14a <apicGetBase()>
c001b2dd:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b2e1:	75 07                	jne    c001b2ea <apicOpen()+0x136>
c001b2e3:	ba 60 03 00 00       	mov    edx,0x360
c001b2e8:	eb 05                	jmp    c001b2ef <apicOpen()+0x13b>
c001b2ea:	ba 50 03 00 00       	mov    edx,0x350
c001b2ef:	01 d0                	add    eax,edx
c001b2f1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b2f4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b2f7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2f9:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b2fc:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b303:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b307:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b30a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b30d:	89 10                	mov    DWORD PTR [eax],edx
c001b30f:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b312:	eb 86                	jmp    c001b29a <apicOpen()+0xe6>
c001b314:	90                   	nop
c001b315:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b318:	c9                   	leave  
c001b319:	c3                   	ret    

c001b31a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b31a:	55                   	push   ebp
c001b31b:	89 e5                	mov    ebp,esp
c001b31d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b320:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b326:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b329:	72 1d                	jb     c001b348 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b32b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b32e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b337:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b33d:	01 d0                	add    eax,edx
c001b33f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b342:	73 04                	jae    c001b348 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b344:	b0 01                	mov    al,0x1
c001b346:	eb 02                	jmp    c001b34a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b348:	b0 00                	mov    al,0x0
c001b34a:	5d                   	pop    ebp
c001b34b:	c3                   	ret    

c001b34c <IOAPIC::read(int)>:
c001b34c:	55                   	push   ebp
c001b34d:	89 e5                	mov    ebp,esp
c001b34f:	83 ec 10             	sub    esp,0x10
c001b352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b355:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b35b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b35e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b361:	31 d2                	xor    edx,edx
c001b363:	88 c2                	mov    dl,al
c001b365:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b368:	89 10                	mov    DWORD PTR [eax],edx
c001b36a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b36d:	83 c0 10             	add    eax,0x10
c001b370:	8b 00                	mov    eax,DWORD PTR [eax]
c001b372:	c9                   	leave  
c001b373:	c3                   	ret    

c001b374 <IOAPIC::open(int, int, void*)>:
c001b374:	55                   	push   ebp
c001b375:	89 e5                	mov    ebp,esp
c001b377:	57                   	push   edi
c001b378:	56                   	push   esi
c001b379:	53                   	push   ebx
c001b37a:	83 ec 04             	sub    esp,0x4
c001b37d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b380:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b383:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b38c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b392:	8b 14 85 80 2f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd080]
c001b399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b39c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b3a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b3a5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b3ab:	8b 14 85 00 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd000]
c001b3b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b3b5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b3bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b3be:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b3c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b3c7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b3cd:	89 c6                	mov    esi,eax
c001b3cf:	81 e6 ff 00 00 00    	and    esi,0xff
c001b3d5:	89 d0                	mov    eax,edx
c001b3d7:	ba 00 00 00 00       	mov    edx,0x0
c001b3dc:	89 c7                	mov    edi,eax
c001b3de:	83 e7 ff             	and    edi,0xffffffff
c001b3e1:	89 f9                	mov    ecx,edi
c001b3e3:	89 d0                	mov    eax,edx
c001b3e5:	25 ff 00 00 00       	and    eax,0xff
c001b3ea:	89 c3                	mov    ebx,eax
c001b3ec:	89 c8                	mov    eax,ecx
c001b3ee:	89 da                	mov    edx,ebx
c001b3f0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b3f3:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b3f6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b3fa:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b3fe:	83 e0 00             	and    eax,0x0
c001b401:	09 d0                	or     eax,edx
c001b403:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b40a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b410:	8d 50 01             	lea    edx,[eax+0x1]
c001b413:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b416:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b41c:	31 d2                	xor    edx,edx
c001b41e:	88 c2                	mov    dl,al
c001b420:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b423:	83 c2 08             	add    edx,0x8
c001b426:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b42a:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b430:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b436:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b43a:	6a 01                	push   0x1
c001b43c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b43f:	e8 08 ff ff ff       	call   c001b34c <IOAPIC::read(int)>
c001b444:	83 c4 08             	add    esp,0x8
c001b447:	c1 f8 10             	sar    eax,0x10
c001b44a:	25 ff 00 00 00       	and    eax,0xff
c001b44f:	8d 50 01             	lea    edx,[eax+0x1]
c001b452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b455:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b45b:	b8 00 00 00 00       	mov    eax,0x0
c001b460:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b463:	5b                   	pop    ebx
c001b464:	5e                   	pop    esi
c001b465:	5f                   	pop    edi
c001b466:	5d                   	pop    ebp
c001b467:	c3                   	ret    

c001b468 <IOAPIC::write(int, int)>:
c001b468:	55                   	push   ebp
c001b469:	89 e5                	mov    ebp,esp
c001b46b:	83 ec 10             	sub    esp,0x10
c001b46e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b471:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b477:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b47a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b47d:	31 d2                	xor    edx,edx
c001b47f:	88 c2                	mov    dl,al
c001b481:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b484:	89 10                	mov    DWORD PTR [eax],edx
c001b486:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b489:	8d 50 10             	lea    edx,[eax+0x10]
c001b48c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b48f:	89 02                	mov    DWORD PTR [edx],eax
c001b491:	90                   	nop
c001b492:	c9                   	leave  
c001b493:	c3                   	ret    

c001b494 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b494:	55                   	push   ebp
c001b495:	89 e5                	mov    ebp,esp
c001b497:	53                   	push   ebx
c001b498:	83 ec 2c             	sub    esp,0x2c
c001b49b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b49e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b4a1:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b4a4:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b4a7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b4aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b4ad:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b4b0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b4b3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b4b6:	88 d8                	mov    al,bl
c001b4b8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b4bb:	88 c8                	mov    al,cl
c001b4bd:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b4c0:	88 d0                	mov    al,dl
c001b4c2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b4c5:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b4c8:	25 ff 00 00 00       	and    eax,0xff
c001b4cd:	83 c0 08             	add    eax,0x8
c001b4d0:	01 c0                	add    eax,eax
c001b4d2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b4d5:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b4d8:	25 ff 00 00 00       	and    eax,0xff
c001b4dd:	83 c0 08             	add    eax,0x8
c001b4e0:	01 c0                	add    eax,eax
c001b4e2:	40                   	inc    eax
c001b4e3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b4e6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b4e9:	50                   	push   eax
c001b4ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b4ed:	e8 5a fe ff ff       	call   c001b34c <IOAPIC::read(int)>
c001b4f2:	83 c4 08             	add    esp,0x8
c001b4f5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b4f8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b4ff:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b502:	c1 e0 18             	shl    eax,0x18
c001b505:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b508:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b50b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b50e:	52                   	push   edx
c001b50f:	50                   	push   eax
c001b510:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b513:	e8 50 ff ff ff       	call   c001b468 <IOAPIC::write(int, int)>
c001b518:	83 c4 0c             	add    esp,0xc
c001b51b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b51e:	50                   	push   eax
c001b51f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b522:	e8 25 fe ff ff       	call   c001b34c <IOAPIC::read(int)>
c001b527:	83 c4 08             	add    esp,0x8
c001b52a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b52d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b534:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b53b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b542:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b546:	74 09                	je     c001b551 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b548:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b54f:	eb 07                	jmp    c001b558 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b551:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b558:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b55c:	74 09                	je     c001b567 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b55e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b565:	eb 07                	jmp    c001b56e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b567:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b56e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b575:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b578:	25 ff 00 00 00       	and    eax,0xff
c001b57d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b580:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b583:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b586:	52                   	push   edx
c001b587:	50                   	push   eax
c001b588:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b58b:	e8 d8 fe ff ff       	call   c001b468 <IOAPIC::write(int, int)>
c001b590:	83 c4 0c             	add    esp,0xc
c001b593:	90                   	nop
c001b594:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b597:	c9                   	leave  
c001b598:	c3                   	ret    
c001b599:	66 90                	xchg   ax,ax
c001b59b:	90                   	nop

c001b59c <APICTimer::close(int, int, void*)>:
c001b59c:	b8 00 00 00 00       	mov    eax,0x0
c001b5a1:	c3                   	ret    
c001b5a2:	66 90                	xchg   ax,ax

c001b5a4 <apicTimerHandler(regs*, void*)>:
c001b5a4:	83 ec 0c             	sub    esp,0xc
c001b5a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5ab:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b5ad:	b8 10 27 00 00       	mov    eax,0x2710
c001b5b2:	ba 00 00 00 00       	mov    edx,0x0
c001b5b7:	f7 f1                	div    ecx
c001b5b9:	83 ec 0c             	sub    esp,0xc
c001b5bc:	50                   	push   eax
c001b5bd:	e8 b2 1b ff ff       	call   c000d174 <timerHandler(unsigned int)>
c001b5c2:	83 c4 10             	add    esp,0x10
c001b5c5:	90                   	nop
c001b5c6:	83 c4 0c             	add    esp,0xc
c001b5c9:	c3                   	ret    
c001b5ca:	66 90                	xchg   ax,ax

c001b5cc <APICTimer::open(int, int, void*)>:
c001b5cc:	83 ec 0c             	sub    esp,0xc
c001b5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5d3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5d5:	83 c0 24             	add    eax,0x24
c001b5d8:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5da:	83 ec 08             	sub    esp,0x8
c001b5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5e5:	ff d0                	call   eax
c001b5e7:	83 c4 10             	add    esp,0x10
c001b5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5ee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b5f2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b5f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b600:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b606:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b60a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b610:	83 ec 0c             	sub    esp,0xc
c001b613:	51                   	push   ecx
c001b614:	6a 01                	push   0x1
c001b616:	68 a4 b5 01 c0       	push   0xc001b5a4
c001b61b:	52                   	push   edx
c001b61c:	50                   	push   eax
c001b61d:	e8 6a 02 ff ff       	call   c000b88c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b622:	83 c4 20             	add    esp,0x20
c001b625:	89 c2                	mov    edx,eax
c001b627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b62b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b631:	b8 00 00 00 00       	mov    eax,0x0
c001b636:	83 c4 0c             	add    esp,0xc
c001b639:	c3                   	ret    
c001b63a:	66 90                	xchg   ax,ax

c001b63c <APICTimer::write(int)>:
c001b63c:	83 ec 0c             	sub    esp,0xc
c001b63f:	83 ec 0c             	sub    esp,0xc
c001b642:	68 4c f3 01 c0       	push   0xc001f34c
c001b647:	e8 b7 4a ff ff       	call   c0010103 <KePanic(char const*)>
c001b64c:	83 c4 10             	add    esp,0x10
c001b64f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b653:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b657:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b65d:	90                   	nop
c001b65e:	83 c4 0c             	add    esp,0xc
c001b661:	c3                   	ret    
c001b662:	66 90                	xchg   ax,ax

c001b664 <APICTimer::APICTimer()>:
c001b664:	83 ec 0c             	sub    esp,0xc
c001b667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b66b:	83 ec 08             	sub    esp,0x8
c001b66e:	68 5c f3 01 c0       	push   0xc001f35c
c001b673:	50                   	push   eax
c001b674:	e8 2f 1a ff ff       	call   c000d0a8 <Timer::Timer(char const*)>
c001b679:	83 c4 10             	add    esp,0x10
c001b67c:	ba 70 f3 01 c0       	mov    edx,0xc001f370
c001b681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b685:	89 10                	mov    DWORD PTR [eax],edx
c001b687:	90                   	nop
c001b688:	83 c4 0c             	add    esp,0xc
c001b68b:	c3                   	ret    

c001b68c <PIT::write(int)>:
c001b68c:	83 ec 10             	sub    esp,0x10
c001b68f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b693:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b697:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b69d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6a1:	a3 64 45 02 c0       	mov    ds:0xc0024564,eax
c001b6a6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b6ab:	99                   	cdq    
c001b6ac:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b6b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6b4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b6bb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b6c0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b6c4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b6c9:	ee                   	out    dx,al
c001b6ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6ce:	25 ff 00 00 00       	and    eax,0xff
c001b6d3:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b6da:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b6de:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b6e2:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b6e7:	ee                   	out    dx,al
c001b6e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6ec:	c1 f8 08             	sar    eax,0x8
c001b6ef:	25 ff 00 00 00       	and    eax,0xff
c001b6f4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b6fb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b6ff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b703:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b708:	ee                   	out    dx,al
c001b709:	90                   	nop
c001b70a:	83 c4 10             	add    esp,0x10
c001b70d:	c3                   	ret    
c001b70e:	66 90                	xchg   ax,ax

c001b710 <pitHandler(regs*, void*)>:
c001b710:	83 ec 0c             	sub    esp,0xc
c001b713:	8b 0d 64 45 02 c0    	mov    ecx,DWORD PTR ds:0xc0024564
c001b719:	b8 10 27 00 00       	mov    eax,0x2710
c001b71e:	99                   	cdq    
c001b71f:	f7 f9                	idiv   ecx
c001b721:	83 ec 0c             	sub    esp,0xc
c001b724:	50                   	push   eax
c001b725:	e8 4a 1a ff ff       	call   c000d174 <timerHandler(unsigned int)>
c001b72a:	83 c4 10             	add    esp,0x10
c001b72d:	90                   	nop
c001b72e:	83 c4 0c             	add    esp,0xc
c001b731:	c3                   	ret    
c001b732:	66 90                	xchg   ax,ax

c001b734 <PIT::open(int, int, void*)>:
c001b734:	83 ec 0c             	sub    esp,0xc
c001b737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b73b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b73d:	83 c0 24             	add    eax,0x24
c001b740:	8b 00                	mov    eax,DWORD PTR [eax]
c001b742:	83 ec 08             	sub    esp,0x8
c001b745:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b74d:	ff d0                	call   eax
c001b74f:	83 c4 10             	add    esp,0x10
c001b752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b756:	83 ec 0c             	sub    esp,0xc
c001b759:	6a 00                	push   0x0
c001b75b:	6a 01                	push   0x1
c001b75d:	68 10 b7 01 c0       	push   0xc001b710
c001b762:	6a 00                	push   0x0
c001b764:	50                   	push   eax
c001b765:	e8 22 01 ff ff       	call   c000b88c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b76a:	83 c4 20             	add    esp,0x20
c001b76d:	89 c2                	mov    edx,eax
c001b76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b773:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b779:	b8 00 00 00 00       	mov    eax,0x0
c001b77e:	83 c4 0c             	add    esp,0xc
c001b781:	c3                   	ret    
c001b782:	66 90                	xchg   ax,ax

c001b784 <PIT::close(int, int, void*)>:
c001b784:	83 ec 0c             	sub    esp,0xc
c001b787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b78b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b799:	6a 01                	push   0x1
c001b79b:	68 10 b7 01 c0       	push   0xc001b710
c001b7a0:	6a 00                	push   0x0
c001b7a2:	50                   	push   eax
c001b7a3:	e8 1a 01 ff ff       	call   c000b8c2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001b7a8:	83 c4 10             	add    esp,0x10
c001b7ab:	b8 00 00 00 00       	mov    eax,0x0
c001b7b0:	83 c4 0c             	add    esp,0xc
c001b7b3:	c3                   	ret    

c001b7b4 <PIT::PIT()>:
c001b7b4:	83 ec 0c             	sub    esp,0xc
c001b7b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7bb:	83 ec 08             	sub    esp,0x8
c001b7be:	68 98 f3 01 c0       	push   0xc001f398
c001b7c3:	50                   	push   eax
c001b7c4:	e8 df 18 ff ff       	call   c000d0a8 <Timer::Timer(char const*)>
c001b7c9:	83 c4 10             	add    esp,0x10
c001b7cc:	ba c0 f3 01 c0       	mov    edx,0xc001f3c0
c001b7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7d5:	89 10                	mov    DWORD PTR [eax],edx
c001b7d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7db:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b7e1:	31 d2                	xor    edx,edx
c001b7e3:	88 c2                	mov    dl,al
c001b7e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7e9:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001b7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7f4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b7fa:	31 d2                	xor    edx,edx
c001b7fc:	88 c2                	mov    dl,al
c001b7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b802:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001b807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b80b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b811:	8d 50 01             	lea    edx,[eax+0x1]
c001b814:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b818:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b81e:	31 d2                	xor    edx,edx
c001b820:	88 c2                	mov    dl,al
c001b822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b826:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b82a:	83 e1 3f             	and    ecx,0x3f
c001b82d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b831:	90                   	nop
c001b832:	83 c4 0c             	add    esp,0xc
c001b835:	c3                   	ret    
c001b836:	66 90                	xchg   ax,ax
c001b838:	66 90                	xchg   ax,ax
c001b83a:	66 90                	xchg   ax,ax
c001b83c:	66 90                	xchg   ax,ax
c001b83e:	66 90                	xchg   ax,ax

c001b840 <avxDetect>:
c001b840:	b8 01 00 00 00       	mov    eax,0x1
c001b845:	0f a2                	cpuid  
c001b847:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001b84d:	74 15                	je     c001b864 <avxDetect.noAVX>
c001b84f:	b8 01 00 00 00       	mov    eax,0x1
c001b854:	0f a2                	cpuid  
c001b856:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001b85c:	74 06                	je     c001b864 <avxDetect.noAVX>
c001b85e:	b8 01 00 00 00       	mov    eax,0x1
c001b863:	c3                   	ret    

c001b864 <avxDetect.noAVX>:
c001b864:	b8 00 00 00 00       	mov    eax,0x0
c001b869:	c3                   	ret    

c001b86a <avxSave>:
c001b86a:	53                   	push   ebx
c001b86b:	52                   	push   edx
c001b86c:	31 c0                	xor    eax,eax
c001b86e:	48                   	dec    eax
c001b86f:	89 c2                	mov    edx,eax
c001b871:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b875:	0f ae 23             	xsave  [ebx]
c001b878:	5a                   	pop    edx
c001b879:	5b                   	pop    ebx
c001b87a:	c3                   	ret    

c001b87b <avxLoad>:
c001b87b:	53                   	push   ebx
c001b87c:	52                   	push   edx
c001b87d:	31 c0                	xor    eax,eax
c001b87f:	48                   	dec    eax
c001b880:	89 c2                	mov    edx,eax
c001b882:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b886:	0f ae 2b             	xrstor [ebx]
c001b889:	5a                   	pop    edx
c001b88a:	5b                   	pop    ebx
c001b88b:	c3                   	ret    

c001b88c <avxInit>:
c001b88c:	e8 57 02 00 00       	call   c001bae8 <sseInit>
c001b891:	50                   	push   eax
c001b892:	51                   	push   ecx
c001b893:	0f 20 e0             	mov    eax,cr4
c001b896:	0d 00 00 04 00       	or     eax,0x40000
c001b89b:	0f 22 e0             	mov    cr4,eax
c001b89e:	31 c9                	xor    ecx,ecx
c001b8a0:	0f 01 d0             	xgetbv 
c001b8a3:	0d 07 00 00 00       	or     eax,0x7
c001b8a8:	0f 01 d1             	xsetbv 
c001b8ab:	59                   	pop    ecx
c001b8ac:	58                   	pop    eax
c001b8ad:	c3                   	ret    

c001b8ae <avxClose>:
c001b8ae:	c3                   	ret    

c001b8af <wouldSheSayYes>:
c001b8af:	c3                   	ret    
c001b8b0:	49                   	dec    ecx
c001b8b1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001b8b5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001b8b9:	75 20                	jne    c001b8db <isr0+0xb>
c001b8bb:	4e                   	dec    esi
c001b8bc:	79 61                	jns    c001b91f <isr7+0x3>
c001b8be:	68 2e 2e 2e 00       	push   0x2e2e2e
c001b8c3:	66 90                	xchg   ax,ax
c001b8c5:	66 90                	xchg   ax,ax
c001b8c7:	66 90                	xchg   ax,ax
c001b8c9:	66 90                	xchg   ax,ax
c001b8cb:	66 90                	xchg   ax,ax
c001b8cd:	66 90                	xchg   ax,ax
c001b8cf:	90                   	nop

c001b8d0 <isr0>:
c001b8d0:	fa                   	cli    
c001b8d1:	68 00 00 00 00       	push   0x0
c001b8d6:	68 00 00 00 00       	push   0x0
c001b8db:	e9 44 01 00 00       	jmp    c001ba24 <int_common_stub>

c001b8e0 <isr1>:
c001b8e0:	fa                   	cli    
c001b8e1:	6a 00                	push   0x0
c001b8e3:	6a 01                	push   0x1
c001b8e5:	e9 3a 01 00 00       	jmp    c001ba24 <int_common_stub>

c001b8ea <isr2>:
c001b8ea:	fa                   	cli    
c001b8eb:	6a 00                	push   0x0
c001b8ed:	6a 02                	push   0x2
c001b8ef:	e9 30 01 00 00       	jmp    c001ba24 <int_common_stub>

c001b8f4 <isr3>:
c001b8f4:	fa                   	cli    
c001b8f5:	6a 00                	push   0x0
c001b8f7:	6a 03                	push   0x3
c001b8f9:	e9 26 01 00 00       	jmp    c001ba24 <int_common_stub>

c001b8fe <isr4>:
c001b8fe:	fa                   	cli    
c001b8ff:	6a 00                	push   0x0
c001b901:	6a 04                	push   0x4
c001b903:	e9 1c 01 00 00       	jmp    c001ba24 <int_common_stub>

c001b908 <isr5>:
c001b908:	fa                   	cli    
c001b909:	6a 00                	push   0x0
c001b90b:	6a 05                	push   0x5
c001b90d:	e9 12 01 00 00       	jmp    c001ba24 <int_common_stub>

c001b912 <isr6>:
c001b912:	fa                   	cli    
c001b913:	6a 00                	push   0x0
c001b915:	6a 06                	push   0x6
c001b917:	e9 08 01 00 00       	jmp    c001ba24 <int_common_stub>

c001b91c <isr7>:
c001b91c:	fa                   	cli    
c001b91d:	6a 00                	push   0x0
c001b91f:	6a 07                	push   0x7
c001b921:	e9 fe 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b926 <isr8>:
c001b926:	fa                   	cli    
c001b927:	6a 08                	push   0x8
c001b929:	e9 f6 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b92e <isr9>:
c001b92e:	fa                   	cli    
c001b92f:	6a 00                	push   0x0
c001b931:	6a 09                	push   0x9
c001b933:	e9 ec 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b938 <isr10>:
c001b938:	fa                   	cli    
c001b939:	6a 0a                	push   0xa
c001b93b:	e9 e4 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b940 <isr11>:
c001b940:	fa                   	cli    
c001b941:	6a 0b                	push   0xb
c001b943:	e9 dc 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b948 <isr12>:
c001b948:	fa                   	cli    
c001b949:	6a 0c                	push   0xc
c001b94b:	e9 d4 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b950 <isr13>:
c001b950:	fa                   	cli    
c001b951:	6a 0d                	push   0xd
c001b953:	e9 cc 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b958 <isr14>:
c001b958:	fa                   	cli    
c001b959:	6a 0e                	push   0xe
c001b95b:	e9 c4 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b960 <isr15>:
c001b960:	fa                   	cli    
c001b961:	6a 00                	push   0x0
c001b963:	6a 0f                	push   0xf
c001b965:	e9 ba 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b96a <isr16>:
c001b96a:	fa                   	cli    
c001b96b:	6a 00                	push   0x0
c001b96d:	6a 10                	push   0x10
c001b96f:	e9 b0 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b974 <isr17>:
c001b974:	fa                   	cli    
c001b975:	6a 00                	push   0x0
c001b977:	6a 11                	push   0x11
c001b979:	e9 a6 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b97e <isr18>:
c001b97e:	fa                   	cli    
c001b97f:	6a 00                	push   0x0
c001b981:	6a 12                	push   0x12
c001b983:	e9 9c 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b988 <irq3>:
c001b988:	fa                   	cli    
c001b989:	6a 00                	push   0x0
c001b98b:	6a 23                	push   0x23
c001b98d:	e9 92 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b992 <irq4>:
c001b992:	fa                   	cli    
c001b993:	6a 00                	push   0x0
c001b995:	6a 24                	push   0x24
c001b997:	e9 88 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b99c <irq5>:
c001b99c:	fa                   	cli    
c001b99d:	6a 00                	push   0x0
c001b99f:	6a 25                	push   0x25
c001b9a1:	e9 7e 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b9a6 <irq6>:
c001b9a6:	fa                   	cli    
c001b9a7:	6a 00                	push   0x0
c001b9a9:	6a 26                	push   0x26
c001b9ab:	e9 74 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b9b0 <irq7>:
c001b9b0:	fa                   	cli    
c001b9b1:	6a 00                	push   0x0
c001b9b3:	6a 27                	push   0x27
c001b9b5:	e9 6a 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b9ba <irq8>:
c001b9ba:	fa                   	cli    
c001b9bb:	6a 00                	push   0x0
c001b9bd:	6a 28                	push   0x28
c001b9bf:	e9 60 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b9c4 <irq9>:
c001b9c4:	fa                   	cli    
c001b9c5:	6a 00                	push   0x0
c001b9c7:	6a 29                	push   0x29
c001b9c9:	e9 56 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b9ce <irq10>:
c001b9ce:	fa                   	cli    
c001b9cf:	6a 00                	push   0x0
c001b9d1:	6a 2a                	push   0x2a
c001b9d3:	e9 4c 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b9d8 <irq11>:
c001b9d8:	fa                   	cli    
c001b9d9:	6a 00                	push   0x0
c001b9db:	6a 2b                	push   0x2b
c001b9dd:	e9 42 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b9e2 <irq12>:
c001b9e2:	fa                   	cli    
c001b9e3:	6a 00                	push   0x0
c001b9e5:	6a 2c                	push   0x2c
c001b9e7:	e9 38 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b9ec <irq13>:
c001b9ec:	fa                   	cli    
c001b9ed:	6a 00                	push   0x0
c001b9ef:	6a 2d                	push   0x2d
c001b9f1:	e9 2e 00 00 00       	jmp    c001ba24 <int_common_stub>

c001b9f6 <irq14>:
c001b9f6:	fa                   	cli    
c001b9f7:	6a 00                	push   0x0
c001b9f9:	6a 2e                	push   0x2e
c001b9fb:	e9 24 00 00 00       	jmp    c001ba24 <int_common_stub>

c001ba00 <irq15>:
c001ba00:	fa                   	cli    
c001ba01:	6a 00                	push   0x0
c001ba03:	6a 2f                	push   0x2f
c001ba05:	e9 1a 00 00 00       	jmp    c001ba24 <int_common_stub>

c001ba0a <irq1>:
c001ba0a:	fa                   	cli    
c001ba0b:	6a 00                	push   0x0
c001ba0d:	6a 21                	push   0x21
c001ba0f:	eb 13                	jmp    c001ba24 <int_common_stub>

c001ba11 <irq2>:
c001ba11:	fa                   	cli    
c001ba12:	6a 00                	push   0x0
c001ba14:	6a 22                	push   0x22
c001ba16:	eb 0c                	jmp    c001ba24 <int_common_stub>

c001ba18 <isr96>:
c001ba18:	6a 00                	push   0x0
c001ba1a:	6a 60                	push   0x60
c001ba1c:	fb                   	sti    
c001ba1d:	eb 05                	jmp    c001ba24 <int_common_stub>

c001ba1f <irq0>:
c001ba1f:	fa                   	cli    
c001ba20:	6a 00                	push   0x0
c001ba22:	6a 20                	push   0x20

c001ba24 <int_common_stub>:
c001ba24:	60                   	pusha  
c001ba25:	1e                   	push   ds
c001ba26:	06                   	push   es
c001ba27:	0f a0                	push   fs
c001ba29:	0f a8                	push   gs
c001ba2b:	66 b8 10 00          	mov    ax,0x10
c001ba2f:	66 8e d8             	mov    ds,ax
c001ba32:	66 8e c0             	mov    es,ax
c001ba35:	66 8e e0             	mov    fs,ax
c001ba38:	66 8e e8             	mov    gs,ax
c001ba3b:	54                   	push   esp
c001ba3c:	fc                   	cld    
c001ba3d:	e8 4a 03 ff ff       	call   c000bd8c <int_handler>
c001ba42:	81 c4 04 00 00 00    	add    esp,0x4
c001ba48:	0f a9                	pop    gs
c001ba4a:	0f a1                	pop    fs
c001ba4c:	07                   	pop    es
c001ba4d:	1f                   	pop    ds
c001ba4e:	61                   	popa   
c001ba4f:	81 c4 08 00 00 00    	add    esp,0x8
c001ba55:	cf                   	iret   

c001ba56 <irq16>:
c001ba56:	fa                   	cli    
c001ba57:	6a 00                	push   0x0
c001ba59:	6a 30                	push   0x30
c001ba5b:	e9 c4 ff ff ff       	jmp    c001ba24 <int_common_stub>

c001ba60 <irq17>:
c001ba60:	fa                   	cli    
c001ba61:	6a 00                	push   0x0
c001ba63:	6a 31                	push   0x31
c001ba65:	e9 ba ff ff ff       	jmp    c001ba24 <int_common_stub>

c001ba6a <irq18>:
c001ba6a:	fa                   	cli    
c001ba6b:	6a 00                	push   0x0
c001ba6d:	6a 32                	push   0x32
c001ba6f:	e9 b0 ff ff ff       	jmp    c001ba24 <int_common_stub>

c001ba74 <irq19>:
c001ba74:	fa                   	cli    
c001ba75:	6a 00                	push   0x0
c001ba77:	6a 33                	push   0x33
c001ba79:	e9 a6 ff ff ff       	jmp    c001ba24 <int_common_stub>

c001ba7e <irq20>:
c001ba7e:	fa                   	cli    
c001ba7f:	6a 00                	push   0x0
c001ba81:	6a 34                	push   0x34
c001ba83:	e9 9c ff ff ff       	jmp    c001ba24 <int_common_stub>

c001ba88 <irq21>:
c001ba88:	fa                   	cli    
c001ba89:	6a 00                	push   0x0
c001ba8b:	6a 35                	push   0x35
c001ba8d:	e9 92 ff ff ff       	jmp    c001ba24 <int_common_stub>

c001ba92 <irq22>:
c001ba92:	fa                   	cli    
c001ba93:	6a 00                	push   0x0
c001ba95:	6a 36                	push   0x36
c001ba97:	e9 88 ff ff ff       	jmp    c001ba24 <int_common_stub>

c001ba9c <irq23>:
c001ba9c:	fa                   	cli    
c001ba9d:	6a 00                	push   0x0
c001ba9f:	6a 37                	push   0x37
c001baa1:	e9 7e ff ff ff       	jmp    c001ba24 <int_common_stub>
c001baa6:	66 90                	xchg   ax,ax
c001baa8:	66 90                	xchg   ax,ax
c001baaa:	66 90                	xchg   ax,ax
c001baac:	66 90                	xchg   ax,ax
c001baae:	66 90                	xchg   ax,ax

c001bab0 <i386GetRDRAND>:
c001bab0:	b9 64 00 00 00       	mov    ecx,0x64

c001bab5 <retry>:
c001bab5:	0f c7 f0             	rdrand eax
c001bab8:	72 05                	jb     c001babf <retry.done>
c001baba:	e2 f9                	loop   c001bab5 <retry>

c001babc <retry.fail>:
c001babc:	31 c0                	xor    eax,eax
c001babe:	c3                   	ret    

c001babf <retry.done>:
c001babf:	c3                   	ret    

c001bac0 <absolutelyNoChanceInHell>:
c001bac0:	b8 01 00 00 00       	mov    eax,0x1
c001bac5:	0f a2                	cpuid  
c001bac7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bacd:	74 06                	je     c001bad5 <sseDetect.noSSE>
c001bacf:	b8 01 00 00 00       	mov    eax,0x1
c001bad4:	c3                   	ret    

c001bad5 <sseDetect.noSSE>:
c001bad5:	31 c0                	xor    eax,eax
c001bad7:	c3                   	ret    

c001bad8 <sseSave>:
c001bad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001badc:	0f ae 00             	fxsave [eax]
c001badf:	c3                   	ret    

c001bae0 <sseLoad>:
c001bae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bae4:	0f ae 08             	fxrstor [eax]
c001bae7:	c3                   	ret    

c001bae8 <sseInit>:
c001bae8:	e8 42 00 00 00       	call   c001bb2f <x87Init>
c001baed:	0f 20 e0             	mov    eax,cr4
c001baf0:	66 0d 00 06          	or     ax,0x600
c001baf4:	0f 22 e0             	mov    cr4,eax
c001baf7:	c3                   	ret    

c001baf8 <sseClose>:
c001baf8:	c3                   	ret    
c001baf9:	66 90                	xchg   ax,ax
c001bafb:	66 90                	xchg   ax,ax
c001bafd:	66 90                	xchg   ax,ax
c001baff:	90                   	nop

c001bb00 <value_37F>:
c001bb00:	7f 03                	jg     c001bb05 <value_37A+0x1>

c001bb02 <value_37E>:
c001bb02:	7e 03                	jle    c001bb07 <x87Detect+0x1>

c001bb04 <value_37A>:
c001bb04:	7a 03                	jp     c001bb09 <x87Detect+0x3>

c001bb06 <x87Detect>:
c001bb06:	b8 01 00 00 00       	mov    eax,0x1
c001bb0b:	0f a2                	cpuid  
c001bb0d:	f7 c2 01 00 00 00    	test   edx,0x1
c001bb13:	74 06                	je     c001bb1b <x87Detect.nox87>
c001bb15:	b8 01 00 00 00       	mov    eax,0x1
c001bb1a:	c3                   	ret    

c001bb1b <x87Detect.nox87>:
c001bb1b:	b8 00 00 00 00       	mov    eax,0x0
c001bb20:	c3                   	ret    

c001bb21 <x87Save>:
c001bb21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb25:	dd 30                	fnsave [eax]
c001bb27:	c3                   	ret    

c001bb28 <x87Load>:
c001bb28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb2c:	dd 20                	frstor [eax]
c001bb2e:	c3                   	ret    

c001bb2f <x87Init>:
c001bb2f:	0f 20 c0             	mov    eax,cr0
c001bb32:	66 25 fb ff          	and    ax,0xfffb
c001bb36:	66 0d 22 00          	or     ax,0x22
c001bb3a:	0f 22 c0             	mov    cr0,eax
c001bb3d:	db e3                	fninit 
c001bb3f:	0f 06                	clts   
c001bb41:	d9 2d 04 bb 01 c0    	fldcw  WORD PTR ds:0xc001bb04
c001bb47:	c3                   	ret    

c001bb48 <x87Close>:
c001bb48:	c3                   	ret    
c001bb49:	66 90                	xchg   ax,ax
c001bb4b:	90                   	nop

c001bb4c <__do_global_ctors_aux>:
c001bb4c:	a1 fc ca 01 c0       	mov    eax,ds:0xc001cafc
c001bb51:	83 f8 ff             	cmp    eax,0xffffffff
c001bb54:	74 1a                	je     c001bb70 <__do_global_ctors_aux+0x24>
c001bb56:	55                   	push   ebp
c001bb57:	89 e5                	mov    ebp,esp
c001bb59:	53                   	push   ebx
c001bb5a:	52                   	push   edx
c001bb5b:	bb fc ca 01 c0       	mov    ebx,0xc001cafc
c001bb60:	ff d0                	call   eax
c001bb62:	83 eb 04             	sub    ebx,0x4
c001bb65:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb67:	83 f8 ff             	cmp    eax,0xffffffff
c001bb6a:	75 f4                	jne    c001bb60 <__do_global_ctors_aux+0x14>
c001bb6c:	58                   	pop    eax
c001bb6d:	5b                   	pop    ebx
c001bb6e:	5d                   	pop    ebp
c001bb6f:	c3                   	ret    
c001bb70:	c3                   	ret    
c001bb71:	66 90                	xchg   ax,ax
c001bb73:	90                   	nop

c001bb74 <__divdi3>:
c001bb74:	55                   	push   ebp
c001bb75:	57                   	push   edi
c001bb76:	56                   	push   esi
c001bb77:	53                   	push   ebx
c001bb78:	83 ec 1c             	sub    esp,0x1c
c001bb7b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bb7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bb83:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bb86:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bb8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bb8e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bb92:	85 db                	test   ebx,ebx
c001bb94:	0f 88 8e 00 00 00    	js     c001bc28 <__divdi3+0xb4>
c001bb9a:	89 dd                	mov    ebp,ebx
c001bb9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bba4:	89 d3                	mov    ebx,edx
c001bba6:	85 d2                	test   edx,edx
c001bba8:	79 0d                	jns    c001bbb7 <__divdi3+0x43>
c001bbaa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bbae:	f7 d8                	neg    eax
c001bbb0:	83 d2 00             	adc    edx,0x0
c001bbb3:	f7 da                	neg    edx
c001bbb5:	89 d3                	mov    ebx,edx
c001bbb7:	89 c7                	mov    edi,eax
c001bbb9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bbbc:	85 db                	test   ebx,ebx
c001bbbe:	75 48                	jne    c001bc08 <__divdi3+0x94>
c001bbc0:	39 ef                	cmp    edi,ebp
c001bbc2:	76 24                	jbe    c001bbe8 <__divdi3+0x74>
c001bbc4:	89 ea                	mov    edx,ebp
c001bbc6:	f7 f7                	div    edi
c001bbc8:	89 c1                	mov    ecx,eax
c001bbca:	31 f6                	xor    esi,esi
c001bbcc:	89 c8                	mov    eax,ecx
c001bbce:	89 f2                	mov    edx,esi
c001bbd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bbd4:	85 c9                	test   ecx,ecx
c001bbd6:	74 07                	je     c001bbdf <__divdi3+0x6b>
c001bbd8:	f7 d8                	neg    eax
c001bbda:	83 d2 00             	adc    edx,0x0
c001bbdd:	f7 da                	neg    edx
c001bbdf:	83 c4 1c             	add    esp,0x1c
c001bbe2:	5b                   	pop    ebx
c001bbe3:	5e                   	pop    esi
c001bbe4:	5f                   	pop    edi
c001bbe5:	5d                   	pop    ebp
c001bbe6:	c3                   	ret    
c001bbe7:	90                   	nop
c001bbe8:	85 ff                	test   edi,edi
c001bbea:	75 0b                	jne    c001bbf7 <__divdi3+0x83>
c001bbec:	b8 01 00 00 00       	mov    eax,0x1
c001bbf1:	31 d2                	xor    edx,edx
c001bbf3:	f7 f3                	div    ebx
c001bbf5:	89 c7                	mov    edi,eax
c001bbf7:	31 d2                	xor    edx,edx
c001bbf9:	89 e8                	mov    eax,ebp
c001bbfb:	f7 f7                	div    edi
c001bbfd:	89 c6                	mov    esi,eax
c001bbff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bc02:	f7 f7                	div    edi
c001bc04:	89 c1                	mov    ecx,eax
c001bc06:	eb c4                	jmp    c001bbcc <__divdi3+0x58>
c001bc08:	39 eb                	cmp    ebx,ebp
c001bc0a:	77 3c                	ja     c001bc48 <__divdi3+0xd4>
c001bc0c:	0f bd f3             	bsr    esi,ebx
c001bc0f:	83 f6 1f             	xor    esi,0x1f
c001bc12:	75 40                	jne    c001bc54 <__divdi3+0xe0>
c001bc14:	39 eb                	cmp    ebx,ebp
c001bc16:	72 09                	jb     c001bc21 <__divdi3+0xad>
c001bc18:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bc1b:	0f 87 97 00 00 00    	ja     c001bcb8 <__divdi3+0x144>
c001bc21:	b9 01 00 00 00       	mov    ecx,0x1
c001bc26:	eb a4                	jmp    c001bbcc <__divdi3+0x58>
c001bc28:	f7 d9                	neg    ecx
c001bc2a:	83 d3 00             	adc    ebx,0x0
c001bc2d:	f7 db                	neg    ebx
c001bc2f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bc32:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bc36:	89 dd                	mov    ebp,ebx
c001bc38:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bc40:	e9 5f ff ff ff       	jmp    c001bba4 <__divdi3+0x30>
c001bc45:	8d 76 00             	lea    esi,[esi+0x0]
c001bc48:	31 f6                	xor    esi,esi
c001bc4a:	31 c9                	xor    ecx,ecx
c001bc4c:	e9 7b ff ff ff       	jmp    c001bbcc <__divdi3+0x58>
c001bc51:	8d 76 00             	lea    esi,[esi+0x0]
c001bc54:	b8 20 00 00 00       	mov    eax,0x20
c001bc59:	29 f0                	sub    eax,esi
c001bc5b:	89 f1                	mov    ecx,esi
c001bc5d:	d3 e3                	shl    ebx,cl
c001bc5f:	89 fa                	mov    edx,edi
c001bc61:	88 c1                	mov    cl,al
c001bc63:	d3 ea                	shr    edx,cl
c001bc65:	09 da                	or     edx,ebx
c001bc67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bc6b:	89 f1                	mov    ecx,esi
c001bc6d:	d3 e7                	shl    edi,cl
c001bc6f:	89 eb                	mov    ebx,ebp
c001bc71:	88 c1                	mov    cl,al
c001bc73:	d3 eb                	shr    ebx,cl
c001bc75:	89 f1                	mov    ecx,esi
c001bc77:	d3 e5                	shl    ebp,cl
c001bc79:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001bc7c:	88 c1                	mov    cl,al
c001bc7e:	d3 ea                	shr    edx,cl
c001bc80:	09 d5                	or     ebp,edx
c001bc82:	89 e8                	mov    eax,ebp
c001bc84:	89 da                	mov    edx,ebx
c001bc86:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bc8a:	89 d3                	mov    ebx,edx
c001bc8c:	89 c5                	mov    ebp,eax
c001bc8e:	f7 e7                	mul    edi
c001bc90:	39 d3                	cmp    ebx,edx
c001bc92:	72 18                	jb     c001bcac <__divdi3+0x138>
c001bc94:	74 0a                	je     c001bca0 <__divdi3+0x12c>
c001bc96:	89 e9                	mov    ecx,ebp
c001bc98:	31 f6                	xor    esi,esi
c001bc9a:	e9 2d ff ff ff       	jmp    c001bbcc <__divdi3+0x58>
c001bc9f:	90                   	nop
c001bca0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bca3:	89 f1                	mov    ecx,esi
c001bca5:	d3 e7                	shl    edi,cl
c001bca7:	39 c7                	cmp    edi,eax
c001bca9:	73 eb                	jae    c001bc96 <__divdi3+0x122>
c001bcab:	90                   	nop
c001bcac:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001bcaf:	31 f6                	xor    esi,esi
c001bcb1:	e9 16 ff ff ff       	jmp    c001bbcc <__divdi3+0x58>
c001bcb6:	66 90                	xchg   ax,ax
c001bcb8:	31 c9                	xor    ecx,ecx
c001bcba:	e9 0d ff ff ff       	jmp    c001bbcc <__divdi3+0x58>
c001bcbf:	90                   	nop

c001bcc0 <__moddi3>:
c001bcc0:	55                   	push   ebp
c001bcc1:	57                   	push   edi
c001bcc2:	56                   	push   esi
c001bcc3:	53                   	push   ebx
c001bcc4:	83 ec 2c             	sub    esp,0x2c
c001bcc7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bccb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001bccf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bcd3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bcd7:	85 db                	test   ebx,ebx
c001bcd9:	0f 88 85 00 00 00    	js     c001bd64 <__moddi3+0xa4>
c001bcdf:	89 de                	mov    esi,ebx
c001bce1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bce9:	89 d7                	mov    edi,edx
c001bceb:	85 d2                	test   edx,edx
c001bced:	79 09                	jns    c001bcf8 <__moddi3+0x38>
c001bcef:	f7 d8                	neg    eax
c001bcf1:	83 d2 00             	adc    edx,0x0
c001bcf4:	f7 da                	neg    edx
c001bcf6:	89 d7                	mov    edi,edx
c001bcf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcfc:	89 cd                	mov    ebp,ecx
c001bcfe:	85 ff                	test   edi,edi
c001bd00:	75 52                	jne    c001bd54 <__moddi3+0x94>
c001bd02:	89 c3                	mov    ebx,eax
c001bd04:	39 f0                	cmp    eax,esi
c001bd06:	76 24                	jbe    c001bd2c <__moddi3+0x6c>
c001bd08:	89 c8                	mov    eax,ecx
c001bd0a:	89 f2                	mov    edx,esi
c001bd0c:	f7 f3                	div    ebx
c001bd0e:	89 d6                	mov    esi,edx
c001bd10:	89 f0                	mov    eax,esi
c001bd12:	31 d2                	xor    edx,edx
c001bd14:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bd18:	85 c9                	test   ecx,ecx
c001bd1a:	74 07                	je     c001bd23 <__moddi3+0x63>
c001bd1c:	f7 d8                	neg    eax
c001bd1e:	83 d2 00             	adc    edx,0x0
c001bd21:	f7 da                	neg    edx
c001bd23:	83 c4 2c             	add    esp,0x2c
c001bd26:	5b                   	pop    ebx
c001bd27:	5e                   	pop    esi
c001bd28:	5f                   	pop    edi
c001bd29:	5d                   	pop    ebp
c001bd2a:	c3                   	ret    
c001bd2b:	90                   	nop
c001bd2c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bd30:	85 db                	test   ebx,ebx
c001bd32:	75 0d                	jne    c001bd41 <__moddi3+0x81>
c001bd34:	b8 01 00 00 00       	mov    eax,0x1
c001bd39:	31 d2                	xor    edx,edx
c001bd3b:	f7 f7                	div    edi
c001bd3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd41:	89 f0                	mov    eax,esi
c001bd43:	31 d2                	xor    edx,edx
c001bd45:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bd49:	f7 f7                	div    edi
c001bd4b:	89 e8                	mov    eax,ebp
c001bd4d:	f7 f7                	div    edi
c001bd4f:	89 d6                	mov    esi,edx
c001bd51:	eb bd                	jmp    c001bd10 <__moddi3+0x50>
c001bd53:	90                   	nop
c001bd54:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bd58:	39 f7                	cmp    edi,esi
c001bd5a:	76 20                	jbe    c001bd7c <__moddi3+0xbc>
c001bd5c:	89 c8                	mov    eax,ecx
c001bd5e:	89 f2                	mov    edx,esi
c001bd60:	eb b2                	jmp    c001bd14 <__moddi3+0x54>
c001bd62:	66 90                	xchg   ax,ax
c001bd64:	f7 d9                	neg    ecx
c001bd66:	83 d3 00             	adc    ebx,0x0
c001bd69:	f7 db                	neg    ebx
c001bd6b:	89 de                	mov    esi,ebx
c001bd6d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001bd75:	e9 6f ff ff ff       	jmp    c001bce9 <__moddi3+0x29>
c001bd7a:	66 90                	xchg   ax,ax
c001bd7c:	0f bd c7             	bsr    eax,edi
c001bd7f:	83 f0 1f             	xor    eax,0x1f
c001bd82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd86:	75 24                	jne    c001bdac <__moddi3+0xec>
c001bd88:	39 f7                	cmp    edi,esi
c001bd8a:	72 06                	jb     c001bd92 <__moddi3+0xd2>
c001bd8c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001bd90:	77 0c                	ja     c001bd9e <__moddi3+0xde>
c001bd92:	89 e9                	mov    ecx,ebp
c001bd94:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001bd98:	19 fe                	sbb    esi,edi
c001bd9a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bd9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bda2:	89 f2                	mov    edx,esi
c001bda4:	e9 6b ff ff ff       	jmp    c001bd14 <__moddi3+0x54>
c001bda9:	8d 76 00             	lea    esi,[esi+0x0]
c001bdac:	b8 20 00 00 00       	mov    eax,0x20
c001bdb1:	89 c2                	mov    edx,eax
c001bdb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bdb7:	29 da                	sub    edx,ebx
c001bdb9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001bdbd:	88 d9                	mov    cl,bl
c001bdbf:	d3 e7                	shl    edi,cl
c001bdc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdc5:	88 d1                	mov    cl,dl
c001bdc7:	d3 e8                	shr    eax,cl
c001bdc9:	09 c7                	or     edi,eax
c001bdcb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001bdcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bdd3:	89 d8                	mov    eax,ebx
c001bdd5:	88 d9                	mov    cl,bl
c001bdd7:	d3 e7                	shl    edi,cl
c001bdd9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bddd:	89 f3                	mov    ebx,esi
c001bddf:	88 d1                	mov    cl,dl
c001bde1:	d3 eb                	shr    ebx,cl
c001bde3:	89 c7                	mov    edi,eax
c001bde5:	88 c1                	mov    cl,al
c001bde7:	d3 e6                	shl    esi,cl
c001bde9:	89 e8                	mov    eax,ebp
c001bdeb:	88 d1                	mov    cl,dl
c001bded:	d3 e8                	shr    eax,cl
c001bdef:	09 f0                	or     eax,esi
c001bdf1:	89 f9                	mov    ecx,edi
c001bdf3:	d3 e5                	shl    ebp,cl
c001bdf5:	89 da                	mov    edx,ebx
c001bdf7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001bdfb:	89 d3                	mov    ebx,edx
c001bdfd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001be01:	89 c6                	mov    esi,eax
c001be03:	89 d1                	mov    ecx,edx
c001be05:	39 d3                	cmp    ebx,edx
c001be07:	72 27                	jb     c001be30 <__moddi3+0x170>
c001be09:	74 21                	je     c001be2c <__moddi3+0x16c>
c001be0b:	29 f5                	sub    ebp,esi
c001be0d:	19 cb                	sbb    ebx,ecx
c001be0f:	89 de                	mov    esi,ebx
c001be11:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001be15:	d3 e6                	shl    esi,cl
c001be17:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001be1b:	89 f9                	mov    ecx,edi
c001be1d:	d3 ed                	shr    ebp,cl
c001be1f:	09 ee                	or     esi,ebp
c001be21:	89 f0                	mov    eax,esi
c001be23:	d3 eb                	shr    ebx,cl
c001be25:	89 da                	mov    edx,ebx
c001be27:	e9 e8 fe ff ff       	jmp    c001bd14 <__moddi3+0x54>
c001be2c:	39 c5                	cmp    ebp,eax
c001be2e:	73 db                	jae    c001be0b <__moddi3+0x14b>
c001be30:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001be34:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001be38:	89 d1                	mov    ecx,edx
c001be3a:	89 c6                	mov    esi,eax
c001be3c:	eb cd                	jmp    c001be0b <__moddi3+0x14b>
c001be3e:	66 90                	xchg   ax,ax

c001be40 <__udivdi3>:
c001be40:	55                   	push   ebp
c001be41:	57                   	push   edi
c001be42:	56                   	push   esi
c001be43:	53                   	push   ebx
c001be44:	83 ec 1c             	sub    esp,0x1c
c001be47:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001be4b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001be4f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001be53:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001be57:	85 d2                	test   edx,edx
c001be59:	75 41                	jne    c001be9c <__udivdi3+0x5c>
c001be5b:	39 f7                	cmp    edi,esi
c001be5d:	76 15                	jbe    c001be74 <__udivdi3+0x34>
c001be5f:	89 e8                	mov    eax,ebp
c001be61:	89 f2                	mov    edx,esi
c001be63:	f7 f7                	div    edi
c001be65:	31 db                	xor    ebx,ebx
c001be67:	89 da                	mov    edx,ebx
c001be69:	83 c4 1c             	add    esp,0x1c
c001be6c:	5b                   	pop    ebx
c001be6d:	5e                   	pop    esi
c001be6e:	5f                   	pop    edi
c001be6f:	5d                   	pop    ebp
c001be70:	c3                   	ret    
c001be71:	8d 76 00             	lea    esi,[esi+0x0]
c001be74:	89 f9                	mov    ecx,edi
c001be76:	85 ff                	test   edi,edi
c001be78:	75 0b                	jne    c001be85 <__udivdi3+0x45>
c001be7a:	b8 01 00 00 00       	mov    eax,0x1
c001be7f:	31 d2                	xor    edx,edx
c001be81:	f7 f7                	div    edi
c001be83:	89 c1                	mov    ecx,eax
c001be85:	31 d2                	xor    edx,edx
c001be87:	89 f0                	mov    eax,esi
c001be89:	f7 f1                	div    ecx
c001be8b:	89 c3                	mov    ebx,eax
c001be8d:	89 e8                	mov    eax,ebp
c001be8f:	f7 f1                	div    ecx
c001be91:	89 da                	mov    edx,ebx
c001be93:	83 c4 1c             	add    esp,0x1c
c001be96:	5b                   	pop    ebx
c001be97:	5e                   	pop    esi
c001be98:	5f                   	pop    edi
c001be99:	5d                   	pop    ebp
c001be9a:	c3                   	ret    
c001be9b:	90                   	nop
c001be9c:	39 f2                	cmp    edx,esi
c001be9e:	77 1c                	ja     c001bebc <__udivdi3+0x7c>
c001bea0:	0f bd da             	bsr    ebx,edx
c001bea3:	83 f3 1f             	xor    ebx,0x1f
c001bea6:	75 24                	jne    c001becc <__udivdi3+0x8c>
c001bea8:	39 f2                	cmp    edx,esi
c001beaa:	72 08                	jb     c001beb4 <__udivdi3+0x74>
c001beac:	39 ef                	cmp    edi,ebp
c001beae:	0f 87 84 00 00 00    	ja     c001bf38 <__udivdi3+0xf8>
c001beb4:	b8 01 00 00 00       	mov    eax,0x1
c001beb9:	eb ac                	jmp    c001be67 <__udivdi3+0x27>
c001bebb:	90                   	nop
c001bebc:	31 db                	xor    ebx,ebx
c001bebe:	31 c0                	xor    eax,eax
c001bec0:	89 da                	mov    edx,ebx
c001bec2:	83 c4 1c             	add    esp,0x1c
c001bec5:	5b                   	pop    ebx
c001bec6:	5e                   	pop    esi
c001bec7:	5f                   	pop    edi
c001bec8:	5d                   	pop    ebp
c001bec9:	c3                   	ret    
c001beca:	66 90                	xchg   ax,ax
c001becc:	b8 20 00 00 00       	mov    eax,0x20
c001bed1:	29 d8                	sub    eax,ebx
c001bed3:	88 d9                	mov    cl,bl
c001bed5:	d3 e2                	shl    edx,cl
c001bed7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bedb:	89 fa                	mov    edx,edi
c001bedd:	88 c1                	mov    cl,al
c001bedf:	d3 ea                	shr    edx,cl
c001bee1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bee5:	09 d1                	or     ecx,edx
c001bee7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001beeb:	88 d9                	mov    cl,bl
c001beed:	d3 e7                	shl    edi,cl
c001beef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bef3:	89 f7                	mov    edi,esi
c001bef5:	88 c1                	mov    cl,al
c001bef7:	d3 ef                	shr    edi,cl
c001bef9:	88 d9                	mov    cl,bl
c001befb:	d3 e6                	shl    esi,cl
c001befd:	89 ea                	mov    edx,ebp
c001beff:	88 c1                	mov    cl,al
c001bf01:	d3 ea                	shr    edx,cl
c001bf03:	09 d6                	or     esi,edx
c001bf05:	89 f0                	mov    eax,esi
c001bf07:	89 fa                	mov    edx,edi
c001bf09:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001bf0d:	89 d7                	mov    edi,edx
c001bf0f:	89 c6                	mov    esi,eax
c001bf11:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bf15:	39 d7                	cmp    edi,edx
c001bf17:	72 13                	jb     c001bf2c <__udivdi3+0xec>
c001bf19:	74 09                	je     c001bf24 <__udivdi3+0xe4>
c001bf1b:	89 f0                	mov    eax,esi
c001bf1d:	31 db                	xor    ebx,ebx
c001bf1f:	e9 43 ff ff ff       	jmp    c001be67 <__udivdi3+0x27>
c001bf24:	88 d9                	mov    cl,bl
c001bf26:	d3 e5                	shl    ebp,cl
c001bf28:	39 c5                	cmp    ebp,eax
c001bf2a:	73 ef                	jae    c001bf1b <__udivdi3+0xdb>
c001bf2c:	8d 46 ff             	lea    eax,[esi-0x1]
c001bf2f:	31 db                	xor    ebx,ebx
c001bf31:	e9 31 ff ff ff       	jmp    c001be67 <__udivdi3+0x27>
c001bf36:	66 90                	xchg   ax,ax
c001bf38:	31 c0                	xor    eax,eax
c001bf3a:	e9 28 ff ff ff       	jmp    c001be67 <__udivdi3+0x27>
c001bf3f:	90                   	nop

c001bf40 <__umoddi3>:
c001bf40:	55                   	push   ebp
c001bf41:	57                   	push   edi
c001bf42:	56                   	push   esi
c001bf43:	53                   	push   ebx
c001bf44:	83 ec 1c             	sub    esp,0x1c
c001bf47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bf4b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf4f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bf53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bf57:	89 da                	mov    edx,ebx
c001bf59:	85 c0                	test   eax,eax
c001bf5b:	75 37                	jne    c001bf94 <__umoddi3+0x54>
c001bf5d:	39 df                	cmp    edi,ebx
c001bf5f:	76 13                	jbe    c001bf74 <__umoddi3+0x34>
c001bf61:	89 f0                	mov    eax,esi
c001bf63:	f7 f7                	div    edi
c001bf65:	89 d0                	mov    eax,edx
c001bf67:	31 d2                	xor    edx,edx
c001bf69:	83 c4 1c             	add    esp,0x1c
c001bf6c:	5b                   	pop    ebx
c001bf6d:	5e                   	pop    esi
c001bf6e:	5f                   	pop    edi
c001bf6f:	5d                   	pop    ebp
c001bf70:	c3                   	ret    
c001bf71:	8d 76 00             	lea    esi,[esi+0x0]
c001bf74:	89 fd                	mov    ebp,edi
c001bf76:	85 ff                	test   edi,edi
c001bf78:	75 0b                	jne    c001bf85 <__umoddi3+0x45>
c001bf7a:	b8 01 00 00 00       	mov    eax,0x1
c001bf7f:	31 d2                	xor    edx,edx
c001bf81:	f7 f7                	div    edi
c001bf83:	89 c5                	mov    ebp,eax
c001bf85:	89 d8                	mov    eax,ebx
c001bf87:	31 d2                	xor    edx,edx
c001bf89:	f7 f5                	div    ebp
c001bf8b:	89 f0                	mov    eax,esi
c001bf8d:	f7 f5                	div    ebp
c001bf8f:	89 d0                	mov    eax,edx
c001bf91:	eb d4                	jmp    c001bf67 <__umoddi3+0x27>
c001bf93:	90                   	nop
c001bf94:	89 f1                	mov    ecx,esi
c001bf96:	39 d8                	cmp    eax,ebx
c001bf98:	76 0a                	jbe    c001bfa4 <__umoddi3+0x64>
c001bf9a:	89 f0                	mov    eax,esi
c001bf9c:	83 c4 1c             	add    esp,0x1c
c001bf9f:	5b                   	pop    ebx
c001bfa0:	5e                   	pop    esi
c001bfa1:	5f                   	pop    edi
c001bfa2:	5d                   	pop    ebp
c001bfa3:	c3                   	ret    
c001bfa4:	0f bd e8             	bsr    ebp,eax
c001bfa7:	83 f5 1f             	xor    ebp,0x1f
c001bfaa:	75 1c                	jne    c001bfc8 <__umoddi3+0x88>
c001bfac:	39 d8                	cmp    eax,ebx
c001bfae:	72 04                	jb     c001bfb4 <__umoddi3+0x74>
c001bfb0:	39 f7                	cmp    edi,esi
c001bfb2:	77 08                	ja     c001bfbc <__umoddi3+0x7c>
c001bfb4:	89 da                	mov    edx,ebx
c001bfb6:	29 fe                	sub    esi,edi
c001bfb8:	19 c2                	sbb    edx,eax
c001bfba:	89 f1                	mov    ecx,esi
c001bfbc:	89 c8                	mov    eax,ecx
c001bfbe:	83 c4 1c             	add    esp,0x1c
c001bfc1:	5b                   	pop    ebx
c001bfc2:	5e                   	pop    esi
c001bfc3:	5f                   	pop    edi
c001bfc4:	5d                   	pop    ebp
c001bfc5:	c3                   	ret    
c001bfc6:	66 90                	xchg   ax,ax
c001bfc8:	ba 20 00 00 00       	mov    edx,0x20
c001bfcd:	29 ea                	sub    edx,ebp
c001bfcf:	89 e9                	mov    ecx,ebp
c001bfd1:	d3 e0                	shl    eax,cl
c001bfd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bfd7:	89 f8                	mov    eax,edi
c001bfd9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bfdd:	88 d1                	mov    cl,dl
c001bfdf:	d3 e8                	shr    eax,cl
c001bfe1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bfe5:	09 c1                	or     ecx,eax
c001bfe7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bfeb:	89 e9                	mov    ecx,ebp
c001bfed:	d3 e7                	shl    edi,cl
c001bfef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bff3:	89 d8                	mov    eax,ebx
c001bff5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bff9:	88 d1                	mov    cl,dl
c001bffb:	d3 e8                	shr    eax,cl
c001bffd:	89 c7                	mov    edi,eax
c001bfff:	89 e9                	mov    ecx,ebp
c001c001:	d3 e3                	shl    ebx,cl
c001c003:	89 f0                	mov    eax,esi
c001c005:	88 d1                	mov    cl,dl
c001c007:	d3 e8                	shr    eax,cl
c001c009:	09 d8                	or     eax,ebx
c001c00b:	89 e9                	mov    ecx,ebp
c001c00d:	d3 e6                	shl    esi,cl
c001c00f:	89 f3                	mov    ebx,esi
c001c011:	89 fa                	mov    edx,edi
c001c013:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c017:	89 d1                	mov    ecx,edx
c001c019:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c01d:	89 c6                	mov    esi,eax
c001c01f:	89 d7                	mov    edi,edx
c001c021:	39 d1                	cmp    ecx,edx
c001c023:	72 27                	jb     c001c04c <__umoddi3+0x10c>
c001c025:	74 21                	je     c001c048 <__umoddi3+0x108>
c001c027:	89 ca                	mov    edx,ecx
c001c029:	29 f3                	sub    ebx,esi
c001c02b:	19 fa                	sbb    edx,edi
c001c02d:	89 d0                	mov    eax,edx
c001c02f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c033:	d3 e0                	shl    eax,cl
c001c035:	89 e9                	mov    ecx,ebp
c001c037:	d3 eb                	shr    ebx,cl
c001c039:	09 d8                	or     eax,ebx
c001c03b:	d3 ea                	shr    edx,cl
c001c03d:	83 c4 1c             	add    esp,0x1c
c001c040:	5b                   	pop    ebx
c001c041:	5e                   	pop    esi
c001c042:	5f                   	pop    edi
c001c043:	5d                   	pop    ebp
c001c044:	c3                   	ret    
c001c045:	8d 76 00             	lea    esi,[esi+0x0]
c001c048:	39 c3                	cmp    ebx,eax
c001c04a:	73 db                	jae    c001c027 <__umoddi3+0xe7>
c001c04c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c050:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c054:	89 d7                	mov    edi,edx
c001c056:	89 c6                	mov    esi,eax
c001c058:	eb cd                	jmp    c001c027 <__umoddi3+0xe7>

Disassembly of section .init:

c001c05a <_init>:
c001c05a:	55                   	push   ebp
c001c05b:	89 e5                	mov    ebp,esp
c001c05d:	e8 92 40 fe ff       	call   c00000f4 <frame_dummy>
c001c062:	e8 e5 fa ff ff       	call   c001bb4c <__do_global_ctors_aux>
c001c067:	5d                   	pop    ebp
c001c068:	c3                   	ret    

Disassembly of section .fini:

c001c069 <_fini>:
c001c069:	55                   	push   ebp
c001c06a:	89 e5                	mov    ebp,esp
c001c06c:	e8 13 40 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c071:	5d                   	pop    ebp
c001c072:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c074 <Computer::~Computer()>:
c001c074:	83 ec 0c             	sub    esp,0xc
c001c077:	ba 80 d3 01 c0       	mov    edx,0xc001d380
c001c07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c080:	89 10                	mov    DWORD PTR [eax],edx
c001c082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c086:	83 ec 0c             	sub    esp,0xc
c001c089:	50                   	push   eax
c001c08a:	e8 53 f7 fe ff       	call   c000b7e2 <Device::~Device()>
c001c08f:	83 c4 10             	add    esp,0x10
c001c092:	90                   	nop
c001c093:	83 c4 0c             	add    esp,0xc
c001c096:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c098 <Computer::~Computer()>:
c001c098:	83 ec 0c             	sub    esp,0xc
c001c09b:	83 ec 0c             	sub    esp,0xc
c001c09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0a2:	e8 cd ff ff ff       	call   c001c074 <Computer::~Computer()>
c001c0a7:	83 c4 10             	add    esp,0x10
c001c0aa:	83 ec 08             	sub    esp,0x8
c001c0ad:	68 70 01 00 00       	push   0x170
c001c0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0b6:	e8 ef e2 fe ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c001c0bb:	83 c4 10             	add    esp,0x10
c001c0be:	83 c4 0c             	add    esp,0xc
c001c0c1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c0c2 <idleCommon()>:
c001c0c2:	83 ec 0c             	sub    esp,0xc
c001c0c5:	fa                   	cli    
c001c0c6:	ff 05 28 3b 02 c0    	inc    DWORD PTR ds:0xc0023b28
c001c0cc:	e8 1f 74 ff ff       	call   c00134f0 <schedule()>
c001c0d1:	a1 28 3b 02 c0       	mov    eax,ds:0xc0023b28
c001c0d6:	48                   	dec    eax
c001c0d7:	a3 28 3b 02 c0       	mov    ds:0xc0023b28,eax
c001c0dc:	75 01                	jne    c001c0df <idleCommon()+0x1d>
c001c0de:	fb                   	sti    
c001c0df:	83 c4 0c             	add    esp,0xc
c001c0e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c0e4 <LinkedList<UnixFile>::~LinkedList()>:
c001c0e4:	90                   	nop
c001c0e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c0e6 <LinkedList<UnixFile>::LinkedList()>:
c001c0e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c0f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c0fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c10a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c114:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c11b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c11f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c126:	90                   	nop
c001c127:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c128 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c128:	83 ec 0c             	sub    esp,0xc
c001c12b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c130:	75 10                	jne    c001c142 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c132:	83 ec 0c             	sub    esp,0xc
c001c135:	68 d4 d5 01 c0       	push   0xc001d5d4
c001c13a:	e8 c4 3f ff ff       	call   c0010103 <KePanic(char const*)>
c001c13f:	83 c4 10             	add    esp,0x10
c001c142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c146:	8b 00                	mov    eax,DWORD PTR [eax]
c001c148:	85 c0                	test   eax,eax
c001c14a:	74 34                	je     c001c180 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c14c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c150:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c153:	85 c0                	test   eax,eax
c001c155:	74 29                	je     c001c180 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c15b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c15e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c162:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c169:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c16d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c174:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c177:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c17e:	eb 65                	jmp    c001c1e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c184:	8b 00                	mov    eax,DWORD PTR [eax]
c001c186:	85 c0                	test   eax,eax
c001c188:	75 4b                	jne    c001c1d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c18e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c191:	85 c0                	test   eax,eax
c001c193:	75 40                	jne    c001c1d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c199:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c19d:	89 10                	mov    DWORD PTR [eax],edx
c001c19f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c1a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c1b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c1bf:	85 c0                	test   eax,eax
c001c1c1:	74 22                	je     c001c1e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c1c3:	83 ec 0c             	sub    esp,0xc
c001c1c6:	68 f6 d5 01 c0       	push   0xc001d5f6
c001c1cb:	e8 33 3f ff ff       	call   c0010103 <KePanic(char const*)>
c001c1d0:	83 c4 10             	add    esp,0x10
c001c1d3:	eb 10                	jmp    c001c1e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c1d5:	83 ec 0c             	sub    esp,0xc
c001c1d8:	68 00 d6 01 c0       	push   0xc001d600
c001c1dd:	e8 21 3f ff ff       	call   c0010103 <KePanic(char const*)>
c001c1e2:	83 c4 10             	add    esp,0x10
c001c1e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c1ec:	8d 50 01             	lea    edx,[eax+0x1]
c001c1ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1f3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c1f6:	90                   	nop
c001c1f7:	83 c4 0c             	add    esp,0xc
c001c1fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c1fc <LinkedList<UnixFile>::getFirstElement()>:
c001c1fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c200:	8b 00                	mov    eax,DWORD PTR [eax]
c001c202:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c204 <LinkedList<UnixFile>::removeFirst()>:
c001c204:	83 ec 0c             	sub    esp,0xc
c001c207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c20b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c20d:	85 c0                	test   eax,eax
c001c20f:	75 12                	jne    c001c223 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c211:	83 ec 0c             	sub    esp,0xc
c001c214:	68 0c d6 01 c0       	push   0xc001d60c
c001c219:	e8 e5 3e ff ff       	call   c0010103 <KePanic(char const*)>
c001c21e:	83 c4 10             	add    esp,0x10
c001c221:	eb 7e                	jmp    c001c2a1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c227:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c22a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c22d:	85 c0                	test   eax,eax
c001c22f:	74 10                	je     c001c241 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c231:	83 ec 0c             	sub    esp,0xc
c001c234:	68 57 d6 01 c0       	push   0xc001d657
c001c239:	e8 c5 3e ff ff       	call   c0010103 <KePanic(char const*)>
c001c23e:	83 c4 10             	add    esp,0x10
c001c241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c245:	8b 00                	mov    eax,DWORD PTR [eax]
c001c247:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c24a:	85 c0                	test   eax,eax
c001c24c:	75 33                	jne    c001c281 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c24e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c252:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c25c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c267:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c26a:	83 f8 01             	cmp    eax,0x1
c001c26d:	74 21                	je     c001c290 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c26f:	83 ec 0c             	sub    esp,0xc
c001c272:	68 30 d6 01 c0       	push   0xc001d630
c001c277:	e8 87 3e ff ff       	call   c0010103 <KePanic(char const*)>
c001c27c:	83 c4 10             	add    esp,0x10
c001c27f:	eb 0f                	jmp    c001c290 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c285:	8b 00                	mov    eax,DWORD PTR [eax]
c001c287:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c28e:	89 10                	mov    DWORD PTR [eax],edx
c001c290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c294:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c297:	8d 50 ff             	lea    edx,[eax-0x1]
c001c29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c29e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c2a1:	83 c4 0c             	add    esp,0xc
c001c2a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c2a6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c2a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c2ad:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c2ae <DriverlessDevice::~DriverlessDevice()>:
c001c2ae:	ba 9c dc 01 c0       	mov    edx,0xc001dc9c
c001c2b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2b7:	89 10                	mov    DWORD PTR [eax],edx
c001c2b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2bd:	50                   	push   eax
c001c2be:	e8 1f f5 fe ff       	call   c000b7e2 <Device::~Device()>
c001c2c3:	83 c4 04             	add    esp,0x4
c001c2c6:	90                   	nop
c001c2c7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c2c8 <DriverlessDevice::~DriverlessDevice()>:
c001c2c8:	83 ec 0c             	sub    esp,0xc
c001c2cb:	83 ec 0c             	sub    esp,0xc
c001c2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2d2:	e8 d7 ff ff ff       	call   c001c2ae <DriverlessDevice::~DriverlessDevice()>
c001c2d7:	83 c4 10             	add    esp,0x10
c001c2da:	83 ec 08             	sub    esp,0x8
c001c2dd:	68 58 01 00 00       	push   0x158
c001c2e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2e6:	e8 bf e0 fe ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c001c2eb:	83 c4 10             	add    esp,0x10
c001c2ee:	83 c4 0c             	add    esp,0xc
c001c2f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c2f2 <LinkedList<Device>::addElement(Device*)>:
c001c2f2:	83 ec 0c             	sub    esp,0xc
c001c2f5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c2fa:	75 10                	jne    c001c30c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c2fc:	83 ec 0c             	sub    esp,0xc
c001c2ff:	68 d4 d5 01 c0       	push   0xc001d5d4
c001c304:	e8 fa 3d ff ff       	call   c0010103 <KePanic(char const*)>
c001c309:	83 c4 10             	add    esp,0x10
c001c30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c310:	8b 00                	mov    eax,DWORD PTR [eax]
c001c312:	85 c0                	test   eax,eax
c001c314:	74 3a                	je     c001c350 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c31a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c31d:	85 c0                	test   eax,eax
c001c31f:	74 2f                	je     c001c350 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c325:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c328:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c32c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c336:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c33a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c33d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c341:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c344:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c34e:	eb 68                	jmp    c001c3b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c354:	8b 00                	mov    eax,DWORD PTR [eax]
c001c356:	85 c0                	test   eax,eax
c001c358:	75 4e                	jne    c001c3a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c35e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c361:	85 c0                	test   eax,eax
c001c363:	75 43                	jne    c001c3a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c369:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c36d:	89 10                	mov    DWORD PTR [eax],edx
c001c36f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c373:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c377:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c37e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c381:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c38b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c38f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c392:	85 c0                	test   eax,eax
c001c394:	74 22                	je     c001c3b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c396:	83 ec 0c             	sub    esp,0xc
c001c399:	68 f6 d5 01 c0       	push   0xc001d5f6
c001c39e:	e8 60 3d ff ff       	call   c0010103 <KePanic(char const*)>
c001c3a3:	83 c4 10             	add    esp,0x10
c001c3a6:	eb 10                	jmp    c001c3b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c3a8:	83 ec 0c             	sub    esp,0xc
c001c3ab:	68 00 d6 01 c0       	push   0xc001d600
c001c3b0:	e8 4e 3d ff ff       	call   c0010103 <KePanic(char const*)>
c001c3b5:	83 c4 10             	add    esp,0x10
c001c3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c3bf:	8d 50 01             	lea    edx,[eax+0x1]
c001c3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c3c9:	90                   	nop
c001c3ca:	83 c4 0c             	add    esp,0xc
c001c3cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c3ce <LinkedList<Device>::LinkedList()>:
c001c3ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c3ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c403:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c407:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c40e:	90                   	nop
c001c40f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c410 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c414:	8b 00                	mov    eax,DWORD PTR [eax]
c001c416:	85 c0                	test   eax,eax
c001c418:	75 0e                	jne    c001c428 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c41a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c41e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c421:	85 c0                	test   eax,eax
c001c423:	75 03                	jne    c001c428 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c425:	b0 01                	mov    al,0x1
c001c427:	c3                   	ret    
c001c428:	b0 00                	mov    al,0x0
c001c42a:	90                   	nop
c001c42b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c42c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c42c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c430:	8b 00                	mov    eax,DWORD PTR [eax]
c001c432:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c434 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c434:	83 ec 0c             	sub    esp,0xc
c001c437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c43b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c43d:	85 c0                	test   eax,eax
c001c43f:	75 17                	jne    c001c458 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c441:	83 ec 0c             	sub    esp,0xc
c001c444:	68 0c d6 01 c0       	push   0xc001d60c
c001c449:	e8 b5 3c ff ff       	call   c0010103 <KePanic(char const*)>
c001c44e:	83 c4 10             	add    esp,0x10
c001c451:	e9 92 00 00 00       	jmp    c001c4e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c456:	66 90                	xchg   ax,ax
c001c458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c45c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c45f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c462:	85 c0                	test   eax,eax
c001c464:	0f 95 c0             	setne  al
c001c467:	84 c0                	test   al,al
c001c469:	74 11                	je     c001c47c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c46b:	83 ec 0c             	sub    esp,0xc
c001c46e:	68 57 d6 01 c0       	push   0xc001d657
c001c473:	e8 8b 3c ff ff       	call   c0010103 <KePanic(char const*)>
c001c478:	83 c4 10             	add    esp,0x10
c001c47b:	90                   	nop
c001c47c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c480:	8b 00                	mov    eax,DWORD PTR [eax]
c001c482:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c485:	85 c0                	test   eax,eax
c001c487:	0f 94 c0             	sete   al
c001c48a:	84 c0                	test   al,al
c001c48c:	74 36                	je     c001c4c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c492:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c49c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4aa:	83 f8 01             	cmp    eax,0x1
c001c4ad:	74 25                	je     c001c4d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c4af:	83 ec 0c             	sub    esp,0xc
c001c4b2:	68 30 d6 01 c0       	push   0xc001d630
c001c4b7:	e8 47 3c ff ff       	call   c0010103 <KePanic(char const*)>
c001c4bc:	83 c4 10             	add    esp,0x10
c001c4bf:	eb 13                	jmp    c001c4d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c4c1:	8d 76 00             	lea    esi,[esi+0x0]
c001c4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4ca:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c4cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d1:	89 10                	mov    DWORD PTR [eax],edx
c001c4d3:	90                   	nop
c001c4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4db:	8d 50 ff             	lea    edx,[eax-0x1]
c001c4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c4e8:	83 c4 0c             	add    esp,0xc
c001c4eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c4ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c4ec:	83 ec 0c             	sub    esp,0xc
c001c4ef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c4f4:	75 12                	jne    c001c508 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c4f6:	83 ec 0c             	sub    esp,0xc
c001c4f9:	68 d4 d5 01 c0       	push   0xc001d5d4
c001c4fe:	e8 00 3c ff ff       	call   c0010103 <KePanic(char const*)>
c001c503:	83 c4 10             	add    esp,0x10
c001c506:	66 90                	xchg   ax,ax
c001c508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c50c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c50e:	85 c0                	test   eax,eax
c001c510:	74 36                	je     c001c548 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c516:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c519:	85 c0                	test   eax,eax
c001c51b:	74 2b                	je     c001c548 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c521:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c524:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c528:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c52b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c52f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c533:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c53a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c53d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c544:	eb 6a                	jmp    c001c5b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c546:	66 90                	xchg   ax,ax
c001c548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c54c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c54e:	85 c0                	test   eax,eax
c001c550:	75 4e                	jne    c001c5a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c556:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c559:	85 c0                	test   eax,eax
c001c55b:	75 43                	jne    c001c5a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c561:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c565:	89 10                	mov    DWORD PTR [eax],edx
c001c567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c56b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c56f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c576:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c579:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c584:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c587:	85 c0                	test   eax,eax
c001c589:	74 25                	je     c001c5b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c58b:	83 ec 0c             	sub    esp,0xc
c001c58e:	68 f6 d5 01 c0       	push   0xc001d5f6
c001c593:	e8 6b 3b ff ff       	call   c0010103 <KePanic(char const*)>
c001c598:	83 c4 10             	add    esp,0x10
c001c59b:	eb 13                	jmp    c001c5b0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c59d:	8d 76 00             	lea    esi,[esi+0x0]
c001c5a0:	83 ec 0c             	sub    esp,0xc
c001c5a3:	68 00 d6 01 c0       	push   0xc001d600
c001c5a8:	e8 56 3b ff ff       	call   c0010103 <KePanic(char const*)>
c001c5ad:	83 c4 10             	add    esp,0x10
c001c5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5b7:	8d 50 01             	lea    edx,[eax+0x1]
c001c5ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5c1:	90                   	nop
c001c5c2:	83 c4 0c             	add    esp,0xc
c001c5c5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c5c8 <ACPI::~ACPI()>:
c001c5c8:	83 ec 0c             	sub    esp,0xc
c001c5cb:	ba 04 e2 01 c0       	mov    edx,0xc001e204
c001c5d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d4:	89 10                	mov    DWORD PTR [eax],edx
c001c5d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5da:	83 ec 0c             	sub    esp,0xc
c001c5dd:	50                   	push   eax
c001c5de:	e8 ff f1 fe ff       	call   c000b7e2 <Device::~Device()>
c001c5e3:	83 c4 10             	add    esp,0x10
c001c5e6:	90                   	nop
c001c5e7:	83 c4 0c             	add    esp,0xc
c001c5ea:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c5ec <ACPI::~ACPI()>:
c001c5ec:	83 ec 0c             	sub    esp,0xc
c001c5ef:	83 ec 0c             	sub    esp,0xc
c001c5f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5f6:	e8 cd ff ff ff       	call   c001c5c8 <ACPI::~ACPI()>
c001c5fb:	83 c4 10             	add    esp,0x10
c001c5fe:	83 ec 08             	sub    esp,0x8
c001c601:	68 64 12 00 00       	push   0x1264
c001c606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c60a:	e8 9b dd fe ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c001c60f:	83 c4 10             	add    esp,0x10
c001c612:	83 c4 0c             	add    esp,0xc
c001c615:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c618 <LinkedList<Device>::~LinkedList()>:
c001c618:	90                   	nop
c001c619:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c61c <LinkedList<Device>::isEmpty()>:
c001c61c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c620:	8b 00                	mov    eax,DWORD PTR [eax]
c001c622:	85 c0                	test   eax,eax
c001c624:	75 0e                	jne    c001c634 <LinkedList<Device>::isEmpty()+0x18>
c001c626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c62a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c62d:	85 c0                	test   eax,eax
c001c62f:	75 03                	jne    c001c634 <LinkedList<Device>::isEmpty()+0x18>
c001c631:	b0 01                	mov    al,0x1
c001c633:	c3                   	ret    
c001c634:	b0 00                	mov    al,0x0
c001c636:	90                   	nop
c001c637:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c638 <LinkedList<Device>::getFirstElement()>:
c001c638:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c63c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c63e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c640 <LinkedList<Device>::removeFirst()>:
c001c640:	83 ec 0c             	sub    esp,0xc
c001c643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c647:	8b 00                	mov    eax,DWORD PTR [eax]
c001c649:	85 c0                	test   eax,eax
c001c64b:	75 17                	jne    c001c664 <LinkedList<Device>::removeFirst()+0x24>
c001c64d:	83 ec 0c             	sub    esp,0xc
c001c650:	68 0c d6 01 c0       	push   0xc001d60c
c001c655:	e8 a9 3a ff ff       	call   c0010103 <KePanic(char const*)>
c001c65a:	83 c4 10             	add    esp,0x10
c001c65d:	e9 92 00 00 00       	jmp    c001c6f4 <LinkedList<Device>::removeFirst()+0xb4>
c001c662:	66 90                	xchg   ax,ax
c001c664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c668:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c66b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c671:	85 c0                	test   eax,eax
c001c673:	74 13                	je     c001c688 <LinkedList<Device>::removeFirst()+0x48>
c001c675:	83 ec 0c             	sub    esp,0xc
c001c678:	68 57 d6 01 c0       	push   0xc001d657
c001c67d:	e8 81 3a ff ff       	call   c0010103 <KePanic(char const*)>
c001c682:	83 c4 10             	add    esp,0x10
c001c685:	8d 76 00             	lea    esi,[esi+0x0]
c001c688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c68e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c694:	85 c0                	test   eax,eax
c001c696:	75 34                	jne    c001c6cc <LinkedList<Device>::removeFirst()+0x8c>
c001c698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c69c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6b4:	83 f8 01             	cmp    eax,0x1
c001c6b7:	74 27                	je     c001c6e0 <LinkedList<Device>::removeFirst()+0xa0>
c001c6b9:	83 ec 0c             	sub    esp,0xc
c001c6bc:	68 30 d6 01 c0       	push   0xc001d630
c001c6c1:	e8 3d 3a ff ff       	call   c0010103 <KePanic(char const*)>
c001c6c6:	83 c4 10             	add    esp,0x10
c001c6c9:	eb 15                	jmp    c001c6e0 <LinkedList<Device>::removeFirst()+0xa0>
c001c6cb:	90                   	nop
c001c6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6d2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6dc:	89 10                	mov    DWORD PTR [eax],edx
c001c6de:	66 90                	xchg   ax,ax
c001c6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c6e7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c6f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c6f4:	83 c4 0c             	add    esp,0xc
c001c6f7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c6f8 <CPU::~CPU()>:
c001c6f8:	83 ec 0c             	sub    esp,0xc
c001c6fb:	ba a0 e3 01 c0       	mov    edx,0xc001e3a0
c001c700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c704:	89 10                	mov    DWORD PTR [eax],edx
c001c706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c70a:	83 ec 0c             	sub    esp,0xc
c001c70d:	50                   	push   eax
c001c70e:	e8 cf f0 fe ff       	call   c000b7e2 <Device::~Device()>
c001c713:	83 c4 10             	add    esp,0x10
c001c716:	90                   	nop
c001c717:	83 c4 0c             	add    esp,0xc
c001c71a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c71c <CPU::~CPU()>:
c001c71c:	83 ec 0c             	sub    esp,0xc
c001c71f:	83 ec 0c             	sub    esp,0xc
c001c722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c726:	e8 cd ff ff ff       	call   c001c6f8 <CPU::~CPU()>
c001c72b:	83 c4 10             	add    esp,0x10
c001c72e:	83 ec 08             	sub    esp,0x8
c001c731:	68 94 11 00 00       	push   0x1194
c001c736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c73a:	e8 6b dc fe ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c001c73f:	83 c4 10             	add    esp,0x10
c001c742:	83 c4 0c             	add    esp,0xc
c001c745:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c748 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c748:	90                   	nop
c001c749:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c74c <ThreadControlBlock::ThreadControlBlock()>:
c001c74c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c750:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c757:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c75b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001c762:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c766:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001c76d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c771:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001c778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c77c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001c783:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c787:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001c78b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c78f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001c793:	90                   	nop
c001c794:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001c798 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001c798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c79c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7d8:	90                   	nop
c001c7d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001c7dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001c7dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c7e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c7e3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001c7e4 <PCI::~PCI()>:
c001c7e4:	83 ec 0c             	sub    esp,0xc
c001c7e7:	ba 18 ef 01 c0       	mov    edx,0xc001ef18
c001c7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f0:	89 10                	mov    DWORD PTR [eax],edx
c001c7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f6:	83 ec 0c             	sub    esp,0xc
c001c7f9:	50                   	push   eax
c001c7fa:	e8 6d ea fe ff       	call   c000b26c <Bus::~Bus()>
c001c7ff:	83 c4 10             	add    esp,0x10
c001c802:	90                   	nop
c001c803:	83 c4 0c             	add    esp,0xc
c001c806:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001c808 <PCI::~PCI()>:
c001c808:	83 ec 0c             	sub    esp,0xc
c001c80b:	83 ec 0c             	sub    esp,0xc
c001c80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c812:	e8 cd ff ff ff       	call   c001c7e4 <PCI::~PCI()>
c001c817:	83 c4 10             	add    esp,0x10
c001c81a:	83 ec 08             	sub    esp,0x8
c001c81d:	68 5c 01 00 00       	push   0x15c
c001c822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c826:	e8 7f db fe ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c001c82b:	83 c4 10             	add    esp,0x10
c001c82e:	83 c4 0c             	add    esp,0xc
c001c831:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001c832 <IDE::~IDE()>:
c001c832:	83 ec 0c             	sub    esp,0xc
c001c835:	ba cc ef 01 c0       	mov    edx,0xc001efcc
c001c83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83e:	89 10                	mov    DWORD PTR [eax],edx
c001c840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c844:	83 ec 0c             	sub    esp,0xc
c001c847:	50                   	push   eax
c001c848:	e8 0f f4 fe ff       	call   c000bc5c <HardDiskController::~HardDiskController()>
c001c84d:	83 c4 10             	add    esp,0x10
c001c850:	90                   	nop
c001c851:	83 c4 0c             	add    esp,0xc
c001c854:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001c856 <IDE::~IDE()>:
c001c856:	83 ec 0c             	sub    esp,0xc
c001c859:	83 ec 0c             	sub    esp,0xc
c001c85c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c860:	e8 cd ff ff ff       	call   c001c832 <IDE::~IDE()>
c001c865:	83 c4 10             	add    esp,0x10
c001c868:	83 ec 08             	sub    esp,0x8
c001c86b:	68 70 02 00 00       	push   0x270
c001c870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c874:	e8 31 db fe ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c001c879:	83 c4 10             	add    esp,0x10
c001c87c:	83 c4 0c             	add    esp,0xc
c001c87f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001c880 <SATABus::~SATABus()>:
c001c880:	83 ec 0c             	sub    esp,0xc
c001c883:	ba 1c f0 01 c0       	mov    edx,0xc001f01c
c001c888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c88c:	89 10                	mov    DWORD PTR [eax],edx
c001c88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c892:	83 ec 0c             	sub    esp,0xc
c001c895:	50                   	push   eax
c001c896:	e8 c1 f3 fe ff       	call   c000bc5c <HardDiskController::~HardDiskController()>
c001c89b:	83 c4 10             	add    esp,0x10
c001c89e:	90                   	nop
c001c89f:	83 c4 0c             	add    esp,0xc
c001c8a2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001c8a4 <SATABus::~SATABus()>:
c001c8a4:	83 ec 0c             	sub    esp,0xc
c001c8a7:	83 ec 0c             	sub    esp,0xc
c001c8aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8ae:	e8 cd ff ff ff       	call   c001c880 <SATABus::~SATABus()>
c001c8b3:	83 c4 10             	add    esp,0x10
c001c8b6:	83 ec 08             	sub    esp,0x8
c001c8b9:	68 64 01 00 00       	push   0x164
c001c8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8c2:	e8 e3 da fe ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c001c8c7:	83 c4 10             	add    esp,0x10
c001c8ca:	83 c4 0c             	add    esp,0xc
c001c8cd:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001c8ce <ATA::~ATA()>:
c001c8ce:	83 ec 0c             	sub    esp,0xc
c001c8d1:	ba 5c f0 01 c0       	mov    edx,0xc001f05c
c001c8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8da:	89 10                	mov    DWORD PTR [eax],edx
c001c8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e0:	83 ec 0c             	sub    esp,0xc
c001c8e3:	50                   	push   eax
c001c8e4:	e8 55 f4 fe ff       	call   c000bd3e <PhysicalDisk::~PhysicalDisk()>
c001c8e9:	83 c4 10             	add    esp,0x10
c001c8ec:	90                   	nop
c001c8ed:	83 c4 0c             	add    esp,0xc
c001c8f0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001c8f2 <ATA::~ATA()>:
c001c8f2:	83 ec 0c             	sub    esp,0xc
c001c8f5:	83 ec 0c             	sub    esp,0xc
c001c8f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8fc:	e8 cd ff ff ff       	call   c001c8ce <ATA::~ATA()>
c001c901:	83 c4 10             	add    esp,0x10
c001c904:	83 ec 08             	sub    esp,0x8
c001c907:	68 7c 01 00 00       	push   0x17c
c001c90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c910:	e8 95 da fe ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c001c915:	83 c4 10             	add    esp,0x10
c001c918:	83 c4 0c             	add    esp,0xc
c001c91b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001c91c <ATAPI::~ATAPI()>:
c001c91c:	83 ec 0c             	sub    esp,0xc
c001c91f:	ba a4 f0 01 c0       	mov    edx,0xc001f0a4
c001c924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c928:	89 10                	mov    DWORD PTR [eax],edx
c001c92a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c92e:	83 ec 0c             	sub    esp,0xc
c001c931:	50                   	push   eax
c001c932:	e8 07 f4 fe ff       	call   c000bd3e <PhysicalDisk::~PhysicalDisk()>
c001c937:	83 c4 10             	add    esp,0x10
c001c93a:	90                   	nop
c001c93b:	83 c4 0c             	add    esp,0xc
c001c93e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001c940 <ATAPI::~ATAPI()>:
c001c940:	83 ec 0c             	sub    esp,0xc
c001c943:	83 ec 0c             	sub    esp,0xc
c001c946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c94a:	e8 cd ff ff ff       	call   c001c91c <ATAPI::~ATAPI()>
c001c94f:	83 c4 10             	add    esp,0x10
c001c952:	83 ec 08             	sub    esp,0x8
c001c955:	68 84 01 00 00       	push   0x184
c001c95a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c95e:	e8 47 da fe ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c001c963:	83 c4 10             	add    esp,0x10
c001c966:	83 c4 0c             	add    esp,0xc
c001c969:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001c96a <SATA::~SATA()>:
c001c96a:	83 ec 0c             	sub    esp,0xc
c001c96d:	ba 58 f1 01 c0       	mov    edx,0xc001f158
c001c972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c976:	89 10                	mov    DWORD PTR [eax],edx
c001c978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c97c:	83 ec 0c             	sub    esp,0xc
c001c97f:	50                   	push   eax
c001c980:	e8 b9 f3 fe ff       	call   c000bd3e <PhysicalDisk::~PhysicalDisk()>
c001c985:	83 c4 10             	add    esp,0x10
c001c988:	90                   	nop
c001c989:	83 c4 0c             	add    esp,0xc
c001c98c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c98e <SATA::~SATA()>:
c001c98e:	83 ec 0c             	sub    esp,0xc
c001c991:	83 ec 0c             	sub    esp,0xc
c001c994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c998:	e8 cd ff ff ff       	call   c001c96a <SATA::~SATA()>
c001c99d:	83 c4 10             	add    esp,0x10
c001c9a0:	83 ec 08             	sub    esp,0x8
c001c9a3:	68 7c 01 00 00       	push   0x17c
c001c9a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9ac:	e8 f9 d9 fe ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c001c9b1:	83 c4 10             	add    esp,0x10
c001c9b4:	83 c4 0c             	add    esp,0xc
c001c9b7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c9b8 <SATAPI::~SATAPI()>:
c001c9b8:	83 ec 0c             	sub    esp,0xc
c001c9bb:	ba e8 f2 01 c0       	mov    edx,0xc001f2e8
c001c9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c4:	89 10                	mov    DWORD PTR [eax],edx
c001c9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ca:	83 ec 0c             	sub    esp,0xc
c001c9cd:	50                   	push   eax
c001c9ce:	e8 6b f3 fe ff       	call   c000bd3e <PhysicalDisk::~PhysicalDisk()>
c001c9d3:	83 c4 10             	add    esp,0x10
c001c9d6:	90                   	nop
c001c9d7:	83 c4 0c             	add    esp,0xc
c001c9da:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c9dc <SATAPI::~SATAPI()>:
c001c9dc:	83 ec 0c             	sub    esp,0xc
c001c9df:	83 ec 0c             	sub    esp,0xc
c001c9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9e6:	e8 cd ff ff ff       	call   c001c9b8 <SATAPI::~SATAPI()>
c001c9eb:	83 c4 10             	add    esp,0x10
c001c9ee:	83 ec 08             	sub    esp,0x8
c001c9f1:	68 84 01 00 00       	push   0x184
c001c9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9fa:	e8 ab d9 fe ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c001c9ff:	83 c4 10             	add    esp,0x10
c001ca02:	83 c4 0c             	add    esp,0xc
c001ca05:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ca06 <IOAPIC::~IOAPIC()>:
c001ca06:	83 ec 0c             	sub    esp,0xc
c001ca09:	ba 28 f3 01 c0       	mov    edx,0xc001f328
c001ca0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca12:	89 10                	mov    DWORD PTR [eax],edx
c001ca14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca18:	83 ec 0c             	sub    esp,0xc
c001ca1b:	50                   	push   eax
c001ca1c:	e8 c1 ed fe ff       	call   c000b7e2 <Device::~Device()>
c001ca21:	83 c4 10             	add    esp,0x10
c001ca24:	90                   	nop
c001ca25:	83 c4 0c             	add    esp,0xc
c001ca28:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ca2a <IOAPIC::~IOAPIC()>:
c001ca2a:	83 ec 0c             	sub    esp,0xc
c001ca2d:	83 ec 0c             	sub    esp,0xc
c001ca30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca34:	e8 cd ff ff ff       	call   c001ca06 <IOAPIC::~IOAPIC()>
c001ca39:	83 c4 10             	add    esp,0x10
c001ca3c:	83 ec 08             	sub    esp,0x8
c001ca3f:	68 68 01 00 00       	push   0x168
c001ca44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca48:	e8 5d d9 fe ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c001ca4d:	83 c4 10             	add    esp,0x10
c001ca50:	83 c4 0c             	add    esp,0xc
c001ca53:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ca54 <APICTimer::~APICTimer()>:
c001ca54:	83 ec 0c             	sub    esp,0xc
c001ca57:	ba 70 f3 01 c0       	mov    edx,0xc001f370
c001ca5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca60:	89 10                	mov    DWORD PTR [eax],edx
c001ca62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca66:	83 ec 0c             	sub    esp,0xc
c001ca69:	50                   	push   eax
c001ca6a:	e8 71 06 ff ff       	call   c000d0e0 <Timer::~Timer()>
c001ca6f:	83 c4 10             	add    esp,0x10
c001ca72:	90                   	nop
c001ca73:	83 c4 0c             	add    esp,0xc
c001ca76:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ca78 <APICTimer::~APICTimer()>:
c001ca78:	83 ec 0c             	sub    esp,0xc
c001ca7b:	83 ec 0c             	sub    esp,0xc
c001ca7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca82:	e8 cd ff ff ff       	call   c001ca54 <APICTimer::~APICTimer()>
c001ca87:	83 c4 10             	add    esp,0x10
c001ca8a:	83 ec 08             	sub    esp,0x8
c001ca8d:	68 60 01 00 00       	push   0x160
c001ca92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca96:	e8 0f d9 fe ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c001ca9b:	83 c4 10             	add    esp,0x10
c001ca9e:	83 c4 0c             	add    esp,0xc
c001caa1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001caa4 <PIT::~PIT()>:
c001caa4:	83 ec 0c             	sub    esp,0xc
c001caa7:	ba c0 f3 01 c0       	mov    edx,0xc001f3c0
c001caac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab0:	89 10                	mov    DWORD PTR [eax],edx
c001cab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab6:	83 ec 0c             	sub    esp,0xc
c001cab9:	50                   	push   eax
c001caba:	e8 21 06 ff ff       	call   c000d0e0 <Timer::~Timer()>
c001cabf:	83 c4 10             	add    esp,0x10
c001cac2:	90                   	nop
c001cac3:	83 c4 0c             	add    esp,0xc
c001cac6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cac8 <PIT::~PIT()>:
c001cac8:	83 ec 0c             	sub    esp,0xc
c001cacb:	83 ec 0c             	sub    esp,0xc
c001cace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cad2:	e8 cd ff ff ff       	call   c001caa4 <PIT::~PIT()>
c001cad7:	83 c4 10             	add    esp,0x10
c001cada:	83 ec 08             	sub    esp,0x8
c001cadd:	68 5c 01 00 00       	push   0x15c
c001cae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cae6:	e8 bf d8 fe ff       	call   c000a3aa <operator delete(void*, unsigned long)>
c001caeb:	83 c4 10             	add    esp,0x10
c001caee:	83 c4 0c             	add    esp,0xc
c001caf1:	c3                   	ret    
